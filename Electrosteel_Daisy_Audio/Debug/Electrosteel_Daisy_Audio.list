
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00033310  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  240335a8  240335a8  00067138  2**0
                  CONTENTS
  3 .exidx        00000000  240335a8  240335a8  00067138  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  240335a8  240335a8  00067138  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  240335a8  240335a8  000435a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  240335ac  240335ac  000435ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003f7a0  24040000  24040000  00070000  2**5
                  ALLOC
  8 .sram2_dma_bss 00001180  30000000  30000000  00070000  2**5
                  ALLOC
  9 .sram2_bss    0003bf80  30002000  30002000  00072000  2**5
                  ALLOC
 10 .sram3_bss    00000034  38000000  38000000  00070000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00070000  2**5
                  ALLOC
 12 .data         00000848  20000000  240335b0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001adfc  20000848  24033df8  00070848  2**3
                  ALLOC
 14 .itcmram      00006d38  00000400  24033df8  00060400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    04000000  c0000000  c0000000  00070000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  00067166  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  00067166  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  00067166  2**0
                  CONTENTS
 19 .heap         00000000  2001b644  2001b644  00067166  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001b644  2001b644  00067166  2**0
                  CONTENTS
 21 .debug_info   00085787  00000000  00000000  00067166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00009f67  00000000  00000000  000ec8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00078fd5  00000000  00000000  000f6854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003968  00000000  00000000  0016f829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 0000f6b0  00000000  00000000  00173191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  0004400a  00000000  00000000  00182841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   00073a64  00000000  00000000  001c684b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    0017319e  00000000  00000000  0023a2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c5  00000000  00000000  003ad44d  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000cc40  00000000  00000000  003ad514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000848 	.word	0x20000848
240002b4:	00000000 	.word	0x00000000
240002b8:	00007138 	.word	0x00007138

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000084c 	.word	0x2000084c
240002d4:	00007138 	.word	0x00007138

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4cf1      	ldr	r4, [pc, #964]	; (24000a2c <audioInit+0x3cc>)
24000666:	f64e 2260 	movw	r2, #60000	; 0xea60
2400066a:	ed9f 0af1 	vldr	s0, [pc, #964]	; 24000a30 <audioInit+0x3d0>
2400066e:	4620      	mov	r0, r4
24000670:	49f0      	ldr	r1, [pc, #960]	; (24000a34 <audioInit+0x3d4>)
24000672:	4bf1      	ldr	r3, [pc, #964]	; (24000a38 <audioInit+0x3d8>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000674:	4df1      	ldr	r5, [pc, #964]	; (24000a3c <audioInit+0x3dc>)
{
24000676:	ed2d 8b10 	vpush	{d8-d15}
2400067a:	b089      	sub	sp, #36	; 0x24
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000680:	f017 fbc6 	bl	24017e10 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000684:	4623      	mov	r3, r4
24000686:	4aee      	ldr	r2, [pc, #952]	; (24000a40 <audioInit+0x3e0>)
24000688:	49ee      	ldr	r1, [pc, #952]	; (24000a44 <audioInit+0x3e4>)
2400068a:	48ef      	ldr	r0, [pc, #956]	; (24000a48 <audioInit+0x3e8>)
2400068c:	f012 fd48 	bl	24013120 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000690:	4623      	mov	r3, r4
24000692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24000696:	49ed      	ldr	r1, [pc, #948]	; (24000a4c <audioInit+0x3ec>)
24000698:	48ed      	ldr	r0, [pc, #948]	; (24000a50 <audioInit+0x3f0>)
2400069a:	f012 fd41 	bl	24013120 <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a4:	eddf 1aeb 	vldr	s3, [pc, #940]	; 24000a54 <audioInit+0x3f4>
240006a8:	eddf 0aeb 	vldr	s1, [pc, #940]	; 24000a58 <audioInit+0x3f8>
240006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006b0:	ed9f 0aea 	vldr	s0, [pc, #936]	; 24000a5c <audioInit+0x3fc>
240006b4:	48ea      	ldr	r0, [pc, #936]	; (24000a60 <audioInit+0x400>)
	leaf.clearOnAllocation = 1;
240006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b8:	f012 fa6a 	bl	24012b90 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006bc:	48e9      	ldr	r0, [pc, #932]	; (24000a64 <audioInit+0x404>)
	tCycle_init(&testSine, &leaf);
240006be:	4621      	mov	r1, r4
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c0:	4be9      	ldr	r3, [pc, #932]	; (24000a68 <audioInit+0x408>)
240006c2:	4aea      	ldr	r2, [pc, #936]	; (24000a6c <audioInit+0x40c>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c4:	6005      	str	r5, [r0, #0]
	tCycle_init(&testSine, &leaf);
240006c6:	48ea      	ldr	r0, [pc, #936]	; (24000a70 <audioInit+0x410>)
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c8:	601a      	str	r2, [r3, #0]
	tCycle_init(&testSine, &leaf);
240006ca:	f012 fda9 	bl	24013220 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006ce:	ed9f 0ae9 	vldr	s0, [pc, #932]	; 24000a74 <audioInit+0x414>
240006d2:	48e7      	ldr	r0, [pc, #924]	; (24000a70 <audioInit+0x410>)
240006d4:	f012 fde6 	bl	240132a4 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006d8:	4ce7      	ldr	r4, [pc, #924]	; (24000a78 <audioInit+0x418>)
		totalGain[1] += partialsHigh[i];
240006da:	49e8      	ldr	r1, [pc, #928]	; (24000a7c <audioInit+0x41c>)
		totalGain[0] += partials[i];
240006dc:	4ae8      	ldr	r2, [pc, #928]	; (24000a80 <audioInit+0x420>)
		totalGain[1] += partialsHigh[i];
240006de:	ed94 4a01 	vldr	s8, [r4, #4]
240006e2:	edd1 4a00 	vldr	s9, [r1]
		totalGain[0] += partials[i];
240006e6:	ed92 2a00 	vldr	s4, [r2]
240006ea:	edd4 3a00 	vldr	s7, [r4]
		totalGain[1] += partialsHigh[i];
240006ee:	ee34 4a24 	vadd.f32	s8, s8, s9
240006f2:	ed91 1a01 	vldr	s2, [r1, #4]
		totalGain[0] += partials[i];
240006f6:	ee73 3a82 	vadd.f32	s7, s7, s4
240006fa:	edd2 0a01 	vldr	s1, [r2, #4]
		totalGain[1] += partialsHigh[i];
240006fe:	ee34 4a01 	vadd.f32	s8, s8, s2
24000702:	ed91 3a02 	vldr	s6, [r1, #8]
		totalGain[0] += partials[i];
24000706:	edd2 6a02 	vldr	s13, [r2, #8]
2400070a:	ee73 3aa0 	vadd.f32	s7, s7, s1
		totalGain[1] += partialsHigh[i];
2400070e:	ed91 2a03 	vldr	s4, [r1, #12]
24000712:	ee34 4a03 	vadd.f32	s8, s8, s6
		totalGain[0] += partials[i];
24000716:	ed92 5a03 	vldr	s10, [r2, #12]
		totalGain[1] += partialsHigh[i];
2400071a:	edd1 4a04 	vldr	s9, [r1, #16]
		totalGain[0] += partials[i];
2400071e:	ee73 3aa6 	vadd.f32	s7, s7, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000722:	4bd8      	ldr	r3, [pc, #864]	; (24000a84 <audioInit+0x424>)
		totalGain[1] += partialsHigh[i];
24000724:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000728:	48d7      	ldr	r0, [pc, #860]	; (24000a88 <audioInit+0x428>)
		totalGain[0] += partials[i];
2400072a:	edd2 2a04 	vldr	s5, [r2, #16]
2400072e:	ee73 3a85 	vadd.f32	s7, s7, s10
		totalGain[1] += partialsHigh[i];
24000732:	ed91 1a05 	vldr	s2, [r1, #20]
24000736:	ee34 4a24 	vadd.f32	s8, s8, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400073a:	edd0 4a00 	vldr	s9, [r0]
		totalGain[0] += partials[i];
2400073e:	ed92 0a05 	vldr	s0, [r2, #20]
24000742:	ee73 3aa2 	vadd.f32	s7, s7, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000746:	edd3 2a00 	vldr	s5, [r3]
		totalGain[1] += partialsHigh[i];
2400074a:	ee34 4a01 	vadd.f32	s8, s8, s2
2400074e:	edd1 0a06 	vldr	s1, [r1, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000752:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000756:	edd2 1a06 	vldr	s3, [r2, #24]
2400075a:	ee73 3a80 	vadd.f32	s7, s7, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400075e:	ed93 0a01 	vldr	s0, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000762:	ee34 4a20 	vadd.f32	s8, s8, s1
24000766:	edd1 6a07 	vldr	s13, [r1, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400076a:	ee74 4a80 	vadd.f32	s9, s9, s0
2400076e:	edd3 2a02 	vldr	s5, [r3, #8]
		totalGain[0] += partials[i];
24000772:	ee73 3aa1 	vadd.f32	s7, s7, s3
		totalGain[1] += partialsHigh[i];
24000776:	ed91 5a08 	vldr	s10, [r1, #32]
2400077a:	ee34 4a26 	vadd.f32	s8, s8, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077e:	edd3 1a03 	vldr	s3, [r3, #12]
24000782:	ee74 4aa2 	vadd.f32	s9, s9, s5
		totalGain[0] += partials[i];
24000786:	edd2 5a07 	vldr	s11, [r2, #28]
2400078a:	edd2 7a08 	vldr	s15, [r2, #32]
2400078e:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
24000792:	ee73 3aa5 	vadd.f32	s7, s7, s11
24000796:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400079a:	ee74 4aa1 	vadd.f32	s9, s9, s3
		totalGain[1] += partialsHigh[i];
2400079e:	ed91 3a09 	vldr	s6, [r1, #36]	; 0x24
240007a2:	ee34 4a05 	vadd.f32	s8, s8, s10
240007a6:	ed91 2a0a 	vldr	s4, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007aa:	ee73 3aa7 	vadd.f32	s7, s7, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ae:	ed93 1a04 	vldr	s2, [r3, #16]
240007b2:	ed93 0a05 	vldr	s0, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007b6:	ee34 4a03 	vadd.f32	s8, s8, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ba:	ed93 8a06 	vldr	s16, [r3, #24]
240007be:	ee74 4a81 	vadd.f32	s9, s9, s2
240007c2:	edd3 5a07 	vldr	s11, [r3, #28]
		totalGain[0] += partials[i];
240007c6:	ee73 3a86 	vadd.f32	s7, s7, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ca:	ed90 5a01 	vldr	s10, [r0, #4]
		totalGain[1] += partialsHigh[i];
240007ce:	ee34 4a02 	vadd.f32	s8, s8, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d2:	edd3 1a0c 	vldr	s3, [r3, #48]	; 0x30
240007d6:	ee74 4a80 	vadd.f32	s9, s9, s0
240007da:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007de:	ee73 3a87 	vadd.f32	s7, s7, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e2:	ee35 5a21 	vadd.f32	s10, s10, s3
240007e6:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
240007ea:	edd3 1a0f 	vldr	s3, [r3, #60]	; 0x3c
240007ee:	ee74 4a88 	vadd.f32	s9, s9, s16
240007f2:	ed93 1a10 	vldr	s2, [r3, #64]	; 0x40
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
240007f6:	ee8b aa23 	vdiv.f32	s20, s22, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007fa:	edd3 0a11 	vldr	s1, [r3, #68]	; 0x44
240007fe:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
24000802:	edd3 2a08 	vldr	s5, [r3, #32]
24000806:	ed93 3a13 	vldr	s6, [r3, #76]	; 0x4c
2400080a:	ee35 5a28 	vadd.f32	s10, s10, s17
2400080e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
24000812:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000816:	edd0 5a02 	vldr	s11, [r0, #8]
2400081a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	gainNormalizers[1] = 1.0f / totalGain[1];
2400081e:	eecb 8a04 	vdiv.f32	s17, s22, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000822:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
24000826:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
	gainNormalizers[0] = 1.0f / totalGain[0];
2400082a:	4d98      	ldr	r5, [pc, #608]	; (24000a8c <audioInit+0x42c>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400082c:	ee35 5a06 	vadd.f32	s10, s10, s12
24000830:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
24000834:	ee74 4aa2 	vadd.f32	s9, s9, s5
24000838:	edd3 2a1b 	vldr	s5, [r3, #108]	; 0x6c
2400083c:	ee35 5a21 	vadd.f32	s10, s10, s3
24000840:	edd3 1a18 	vldr	s3, [r3, #96]	; 0x60
24000844:	ee74 4aa6 	vadd.f32	s9, s9, s13
24000848:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
2400084c:	ee75 5aa1 	vadd.f32	s11, s11, s3
24000850:	edd3 1a1a 	vldr	s3, [r3, #104]	; 0x68
24000854:	ee35 5a01 	vadd.f32	s10, s10, s2
24000858:	ed93 1a19 	vldr	s2, [r3, #100]	; 0x64
2400085c:	ee74 4aa7 	vadd.f32	s9, s9, s15
24000860:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
24000864:	ee75 5a81 	vadd.f32	s11, s11, s2
24000868:	ed93 1a1d 	vldr	s2, [r3, #116]	; 0x74
2400086c:	ee35 5a20 	vadd.f32	s10, s10, s1
24000870:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000874:	eecb 9a24 	vdiv.f32	s19, s22, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000878:	ee35 5a00 	vadd.f32	s10, s10, s0
2400087c:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
24000880:	ee75 5aa1 	vadd.f32	s11, s11, s3
24000884:	edd3 1a21 	vldr	s3, [r3, #132]	; 0x84
24000888:	ee35 5a03 	vadd.f32	s10, s10, s6
2400088c:	ed93 3a1f 	vldr	s6, [r3, #124]	; 0x7c
24000890:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000894:	edd3 2a22 	vldr	s5, [r3, #136]	; 0x88
24000898:	ee35 5a06 	vadd.f32	s10, s10, s12
2400089c:	ed90 6a03 	vldr	s12, [r0, #12]
240008a0:	ee75 5aa0 	vadd.f32	s11, s11, s1
240008a4:	edd3 0a24 	vldr	s1, [r3, #144]	; 0x90
240008a8:	ee36 6a20 	vadd.f32	s12, s12, s1
240008ac:	ee35 5a02 	vadd.f32	s10, s10, s4
240008b0:	ed93 2a26 	vldr	s4, [r3, #152]	; 0x98
240008b4:	ee75 5a81 	vadd.f32	s11, s11, s2
240008b8:	edd3 0a27 	vldr	s1, [r3, #156]	; 0x9c
240008bc:	ee36 6a27 	vadd.f32	s12, s12, s15
240008c0:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008c4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
240008c8:	ee35 5a07 	vadd.f32	s10, s10, s14
240008cc:	ee75 5a80 	vadd.f32	s11, s11, s0
240008d0:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
240008d4:	ee36 6a02 	vadd.f32	s12, s12, s4
240008d8:	ed93 0a2b 	vldr	s0, [r3, #172]	; 0xac
240008dc:	ed93 2a2c 	vldr	s4, [r3, #176]	; 0xb0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008e0:	ee8b 9a05 	vdiv.f32	s18, s22, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008e4:	edd3 aa45 	vldr	s21, [r3, #276]	; 0x114
240008e8:	ee36 6a20 	vadd.f32	s12, s12, s1
240008ec:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
240008f0:	ee75 5a83 	vadd.f32	s11, s11, s6
240008f4:	ed93 3a2d 	vldr	s6, [r3, #180]	; 0xb4
240008f8:	ee36 6a01 	vadd.f32	s12, s12, s2
240008fc:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
24000900:	ee75 5aa6 	vadd.f32	s11, s11, s13
24000904:	edd0 6a04 	vldr	s13, [r0, #16]
24000908:	ee36 6a27 	vadd.f32	s12, s12, s15
2400090c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
24000910:	ee76 6a81 	vadd.f32	s13, s13, s2
24000914:	ed93 1a33 	vldr	s2, [r3, #204]	; 0xcc
24000918:	ee75 5aa1 	vadd.f32	s11, s11, s3
2400091c:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
24000920:	ee36 6a07 	vadd.f32	s12, s12, s14
24000924:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
24000928:	ee76 6aa7 	vadd.f32	s13, s13, s15
2400092c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
24000930:	ee75 5aa2 	vadd.f32	s11, s11, s5
24000934:	edd3 2a36 	vldr	s5, [r3, #216]	; 0xd8
24000938:	ee36 6a00 	vadd.f32	s12, s12, s0
2400093c:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
24000940:	ee76 6aa1 	vadd.f32	s13, s13, s3
24000944:	edd3 1a38 	vldr	s3, [r3, #224]	; 0xe0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000948:	ee8b 8a25 	vdiv.f32	s16, s22, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400094c:	ee36 6a02 	vadd.f32	s12, s12, s4
24000950:	ed93 2a39 	vldr	s4, [r3, #228]	; 0xe4
24000954:	ee76 6a81 	vadd.f32	s13, s13, s2
24000958:	ed93 1a3c 	vldr	s2, [r3, #240]	; 0xf0
2400095c:	ee36 6a03 	vadd.f32	s12, s12, s6
24000960:	ed90 3a05 	vldr	s6, [r0, #20]
24000964:	ee76 6a87 	vadd.f32	s13, s13, s14
24000968:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
2400096c:	ee33 3a01 	vadd.f32	s6, s6, s2
24000970:	ed93 1a3d 	vldr	s2, [r3, #244]	; 0xf4
24000974:	ee36 6a20 	vadd.f32	s12, s12, s1
24000978:	edd3 0a3f 	vldr	s1, [r3, #252]	; 0xfc
2400097c:	ee76 6aa7 	vadd.f32	s13, s13, s15
24000980:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
24000984:	ee33 3a01 	vadd.f32	s6, s6, s2
24000988:	ed93 1a42 	vldr	s2, [r3, #264]	; 0x108
2400098c:	ee76 6aa2 	vadd.f32	s13, s13, s5
24000990:	edd3 2a40 	vldr	s5, [r3, #256]	; 0x100
24000994:	ee33 3a27 	vadd.f32	s6, s6, s15
24000998:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
2400099c:	ee76 6a80 	vadd.f32	s13, s13, s0
240009a0:	ee33 3a20 	vadd.f32	s6, s6, s1
240009a4:	edd3 0a44 	vldr	s1, [r3, #272]	; 0x110
240009a8:	ee76 6aa1 	vadd.f32	s13, s13, s3
240009ac:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
240009b0:	ee33 3a22 	vadd.f32	s6, s6, s5
240009b4:	edd3 2a46 	vldr	s5, [r3, #280]	; 0x118
240009b8:	ee76 6a82 	vadd.f32	s13, s13, s4
240009bc:	ed90 2a06 	vldr	s4, [r0, #24]
240009c0:	ee33 3a27 	vadd.f32	s6, s6, s15
240009c4:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
240009c8:	ed93 0a54 	vldr	s0, [r3, #336]	; 0x150
240009cc:	ee32 2a27 	vadd.f32	s4, s4, s15
240009d0:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
240009d4:	ee76 6a87 	vadd.f32	s13, s13, s14
240009d8:	ed90 7a07 	vldr	s14, [r0, #28]
240009dc:	ee33 3a01 	vadd.f32	s6, s6, s2
240009e0:	ed93 1a4c 	vldr	s2, [r3, #304]	; 0x130
240009e4:	ee37 7a00 	vadd.f32	s14, s14, s0
240009e8:	ed93 0a60 	vldr	s0, [r3, #384]	; 0x180
240009ec:	ee32 2a27 	vadd.f32	s4, s4, s15
240009f0:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
240009f4:	ee33 3a21 	vadd.f32	s6, s6, s3
240009f8:	edd3 1a55 	vldr	s3, [r3, #340]	; 0x154
240009fc:	ee32 2a27 	vadd.f32	s4, s4, s15
24000a00:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000a04:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a08:	edd3 1a56 	vldr	s3, [r3, #344]	; 0x158
24000a0c:	ee33 3a20 	vadd.f32	s6, s6, s1
24000a10:	edd3 0a58 	vldr	s1, [r3, #352]	; 0x160
24000a14:	ee32 2a27 	vadd.f32	s4, s4, s15
24000a18:	edd0 7a08 	vldr	s15, [r0, #32]
24000a1c:	ee37 7a21 	vadd.f32	s14, s14, s3
24000a20:	edd3 1a57 	vldr	s3, [r3, #348]	; 0x15c
24000a24:	ee77 7a80 	vadd.f32	s15, s15, s0
24000a28:	e032      	b.n	24000a90 <audioInit+0x430>
24000a2a:	bf00      	nop
24000a2c:	2000522c 	.word	0x2000522c
24000a30:	473b8000 	.word	0x473b8000
24000a34:	20005b60 	.word	0x20005b60
24000a38:	24003381 	.word	0x24003381
24000a3c:	457ff000 	.word	0x457ff000
24000a40:	0003f7a0 	.word	0x0003f7a0
24000a44:	24040000 	.word	0x24040000
24000a48:	2000546c 	.word	0x2000546c
24000a4c:	c0000000 	.word	0xc0000000
24000a50:	20005228 	.word	0x20005228
24000a54:	ba51b717 	.word	0xba51b717
24000a58:	00000000 	.word	0x00000000
24000a5c:	3a83126f 	.word	0x3a83126f
24000a60:	20000fec 	.word	0x20000fec
24000a64:	20004fec 	.word	0x20004fec
24000a68:	20005180 	.word	0x20005180
24000a6c:	3dba2e8c 	.word	0x3dba2e8c
24000a70:	20014738 	.word	0x20014738
24000a74:	43dc0000 	.word	0x43dc0000
24000a78:	20014760 	.word	0x20014760
24000a7c:	20000144 	.word	0x20000144
24000a80:	200000fc 	.word	0x200000fc
24000a84:	20000394 	.word	0x20000394
24000a88:	20014768 	.word	0x20014768
24000a8c:	20005118 	.word	0x20005118
24000a90:	ed93 0a4e 	vldr	s0, [r3, #312]	; 0x138
24000a94:	ee73 aa2a 	vadd.f32	s21, s6, s21
24000a98:	ed93 3a61 	vldr	s6, [r3, #388]	; 0x184
24000a9c:	ee37 7a21 	vadd.f32	s14, s14, s3
24000aa0:	edd3 1a62 	vldr	s3, [r3, #392]	; 0x188
24000aa4:	ee32 2a01 	vadd.f32	s4, s4, s2
24000aa8:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
24000aac:	ee77 7a83 	vadd.f32	s15, s15, s6
24000ab0:	ee37 7a20 	vadd.f32	s14, s14, s1
24000ab4:	edd3 0a66 	vldr	s1, [r3, #408]	; 0x198
24000ab8:	ee32 2a01 	vadd.f32	s4, s4, s2
24000abc:	ed93 1a59 	vldr	s2, [r3, #356]	; 0x164
24000ac0:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000ac4:	edd3 1a5a 	vldr	s3, [r3, #360]	; 0x168
24000ac8:	ee37 7a01 	vadd.f32	s14, s14, s2
24000acc:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000ad0:	ee32 3a00 	vadd.f32	s6, s4, s0
24000ad4:	ed93 0a64 	vldr	s0, [r3, #400]	; 0x190
24000ad8:	ee77 7a81 	vadd.f32	s15, s15, s2
24000adc:	ed93 1a5b 	vldr	s2, [r3, #364]	; 0x16c
24000ae0:	ee37 7a21 	vadd.f32	s14, s14, s3
24000ae4:	ed93 2a65 	vldr	s4, [r3, #404]	; 0x194
24000ae8:	edd3 1a4f 	vldr	s3, [r3, #316]	; 0x13c
24000aec:	ee7a aaa2 	vadd.f32	s21, s21, s5
24000af0:	ee77 7a80 	vadd.f32	s15, s15, s0
24000af4:	ee37 7a01 	vadd.f32	s14, s14, s2
24000af8:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
24000afc:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b00:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
24000b04:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b08:	ed93 2a5c 	vldr	s4, [r3, #368]	; 0x170
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b0c:	ee8b 0a06 	vdiv.f32	s0, s22, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b10:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b14:	ed93 2a5e 	vldr	s4, [r3, #376]	; 0x178
24000b18:	ee77 7aa0 	vadd.f32	s15, s15, s1
24000b1c:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
24000b20:	ee37 7a01 	vadd.f32	s14, s14, s2
24000b24:	ed93 1a52 	vldr	s2, [r3, #328]	; 0x148
24000b28:	ee33 3a20 	vadd.f32	s6, s6, s1
24000b2c:	edd3 2a67 	vldr	s5, [r3, #412]	; 0x19c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b30:	eecb 0a26 	vdiv.f32	s1, s22, s13
24000b34:	edc4 3a00 	vstr	s7, [r4]
24000b38:	ed84 4a01 	vstr	s8, [r4, #4]
24000b3c:	edc0 4a00 	vstr	s9, [r0]
24000b40:	4ce2      	ldr	r4, [pc, #904]	; (24000ecc <audioInit+0x86c>)
24000b42:	ed80 5a01 	vstr	s10, [r0, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b46:	ee77 7aa2 	vadd.f32	s15, s15, s5
24000b4a:	edd3 2a6a 	vldr	s5, [r3, #424]	; 0x1a8
24000b4e:	ee33 3a21 	vadd.f32	s6, s6, s3
24000b52:	edd3 1a68 	vldr	s3, [r3, #416]	; 0x1a0
24000b56:	ee37 7a02 	vadd.f32	s14, s14, s4
24000b5a:	ed93 2a69 	vldr	s4, [r3, #420]	; 0x1a4
24000b5e:	ee77 7aa1 	vadd.f32	s15, s15, s3
24000b62:	edc0 5a02 	vstr	s11, [r0, #8]
24000b66:	ee33 3a01 	vadd.f32	s6, s6, s2
24000b6a:	ed80 6a03 	vstr	s12, [r0, #12]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6e:	ee8b 1a2a 	vdiv.f32	s2, s22, s21
24000b72:	edc0 6a04 	vstr	s13, [r0, #16]
24000b76:	edc0 aa05 	vstr	s21, [r0, #20]
24000b7a:	ed80 3a06 	vstr	s6, [r0, #24]
24000b7e:	ed80 7a07 	vstr	s14, [r0, #28]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000b82:	ed85 aa00 	vstr	s20, [r5]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b86:	ee77 7a82 	vadd.f32	s15, s15, s4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b8a:	edc4 9a00 	vstr	s19, [r4]
24000b8e:	eecb 1a03 	vdiv.f32	s3, s22, s6
24000b92:	ed84 9a01 	vstr	s18, [r4, #4]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000b96:	edc5 8a01 	vstr	s17, [r5, #4]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b9a:	ed84 8a02 	vstr	s16, [r4, #8]
24000b9e:	ed84 0a03 	vstr	s0, [r4, #12]
24000ba2:	edc4 0a04 	vstr	s1, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000ba6:	ee77 7aa2 	vadd.f32	s15, s15, s5
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000baa:	ee8b 2a07 	vdiv.f32	s4, s22, s14
24000bae:	edc0 7a08 	vstr	s15, [r0, #32]
24000bb2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
24000bb6:	ed84 1a05 	vstr	s2, [r4, #20]
24000bba:	eecb 2a27 	vdiv.f32	s5, s22, s15
24000bbe:	edc4 1a06 	vstr	s3, [r4, #24]
24000bc2:	ed84 2a07 	vstr	s4, [r4, #28]
24000bc6:	edc4 2a08 	vstr	s5, [r4, #32]
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bca:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
24000bce:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000bd2:	ee69 7aa7 	vmul.f32	s15, s19, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bd6:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
24000bda:	ee2a 3a03 	vmul.f32	s6, s20, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000bde:	ee68 3aa3 	vmul.f32	s7, s17, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000be2:	ece3 7a01 	vstmia	r3!, {s15}
24000be6:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000bea:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000bee:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000bf2:	ee24 4a09 	vmul.f32	s8, s8, s18
24000bf6:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000bfa:	ee64 4a88 	vmul.f32	s9, s9, s16
24000bfe:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c02:	ee25 5a00 	vmul.f32	s10, s10, s0
24000c06:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c0a:	ee65 5aa0 	vmul.f32	s11, s11, s1
24000c0e:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c12:	ee26 6a01 	vmul.f32	s12, s12, s2
24000c16:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c1a:	ee66 6aa1 	vmul.f32	s13, s13, s3
24000c1e:	ee27 7a02 	vmul.f32	s14, s14, s4
			partials[i] = partials[i] * gainNormalizers[0];
24000c22:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c26:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c2a:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c2c:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c30:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000c34:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000c38:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000c3c:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000c40:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000c44:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000c48:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000c4c:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c50:	d1bb      	bne.n	24000bca <audioInit+0x56a>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000c52:	4b9f      	ldr	r3, [pc, #636]	; (24000ed0 <audioInit+0x870>)
24000c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000c58:	4c9e      	ldr	r4, [pc, #632]	; (24000ed4 <audioInit+0x874>)
24000c5a:	ed93 8a01 	vldr	s16, [r3, #4]
24000c5e:	ed93 0a04 	vldr	s0, [r3, #16]
24000c62:	f104 082c 	add.w	r8, r4, #44	; 0x2c
24000c66:	edd3 0a07 	vldr	s1, [r3, #28]
24000c6a:	edd3 9a00 	vldr	s19, [r3]
24000c6e:	ed93 6a02 	vldr	s12, [r3, #8]
24000c72:	ed93 9a03 	vldr	s18, [r3, #12]
24000c76:	ee78 4a69 	vsub.f32	s9, s16, s19
24000c7a:	edd3 6a05 	vldr	s13, [r3, #20]
24000c7e:	ee36 6a48 	vsub.f32	s12, s12, s16
24000c82:	edd3 8a06 	vldr	s17, [r3, #24]
24000c86:	ee30 5a49 	vsub.f32	s10, s0, s18
24000c8a:	ed93 7a08 	vldr	s14, [r3, #32]
24000c8e:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000c92:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000c96:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 24000f58 <audioInit+0x8f8>
24000c9a:	ee37 7a60 	vsub.f32	s14, s14, s1
24000c9e:	4f8e      	ldr	r7, [pc, #568]	; (24000ed8 <audioInit+0x878>)
24000ca0:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000ca4:	4e8d      	ldr	r6, [pc, #564]	; (24000edc <audioInit+0x87c>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000ca6:	eddf aa8e 	vldr	s21, [pc, #568]	; 24000ee0 <audioInit+0x880>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000caa:	ed9f aa8e 	vldr	s20, [pc, #568]	; 24000ee4 <audioInit+0x884>
24000cae:	4b8e      	ldr	r3, [pc, #568]	; (24000ee8 <audioInit+0x888>)
24000cb0:	488e      	ldr	r0, [pc, #568]	; (24000eec <audioInit+0x88c>)
24000cb2:	ee87 da86 	vdiv.f32	s26, s15, s12
24000cb6:	498e      	ldr	r1, [pc, #568]	; (24000ef0 <audioInit+0x890>)
24000cb8:	4a8e      	ldr	r2, [pc, #568]	; (24000ef4 <audioInit+0x894>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cba:	4d8f      	ldr	r5, [pc, #572]	; (24000ef8 <audioInit+0x898>)
24000cbc:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000cc0:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000cc4:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000cc8:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000ccc:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000cd0:	3304      	adds	r3, #4
24000cd2:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cd6:	ecb5 2a01 	vldmia	r5!, {s4}
24000cda:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cde:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000ce2:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000ce6:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
24000cea:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cec:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000cf0:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000cf4:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000cf8:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000cfc:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d00:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d04:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d08:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d0c:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d10:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d14:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d1c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d20:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d24:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d28:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d2c:	ee35 3a63 	vsub.f32	s6, s10, s7
24000d30:	ee74 2aef 	vsub.f32	s5, s9, s31
24000d34:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d38:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3c:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d40:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d44:	ece0 1a01 	vstmia	r0!, {s3}
24000d48:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d4c:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d54:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d58:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5c:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d60:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d64:	ee62 2aac 	vmul.f32	s5, s5, s25
24000d68:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000d6c:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000d70:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d74:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000d78:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000d7c:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d80:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d84:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d88:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8c:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d90:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d94:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000d98:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d9c:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000da0:	ee28 2a83 	vmul.f32	s4, s17, s6
24000da4:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000da8:	ee20 6a87 	vmul.f32	s12, s1, s14
24000dac:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000db0:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db4:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000db8:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dbc:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc0:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc4:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dc8:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000dcc:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dd0:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000dd4:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000dd8:	ee35 5a46 	vsub.f32	s10, s10, s12
24000ddc:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000de0:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000de4:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000de8:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
24000dec:	f47f af6e 	bne.w	24000ccc <audioInit+0x66c>
24000df0:	4c42      	ldr	r4, [pc, #264]	; (24000efc <audioInit+0x89c>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = randomNumber() + 0.5f;
24000df2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24000df6:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000dfa:	f002 fac1 	bl	24003380 <randomNumber>
24000dfe:	ee30 0a08 	vadd.f32	s0, s0, s16
24000e02:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
24000e06:	42ac      	cmp	r4, r5
24000e08:	d1f7      	bne.n	24000dfa <audioInit+0x79a>
		}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000e0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000e0e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 24000f00 <audioInit+0x8a0>
24000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e16:	483b      	ldr	r0, [pc, #236]	; (24000f04 <audioInit+0x8a4>)
24000e18:	f011 ff1e 	bl	24012c58 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000e1c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24000e20:	ed9f 0a39 	vldr	s0, [pc, #228]	; 24000f08 <audioInit+0x8a8>
24000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e28:	4838      	ldr	r0, [pc, #224]	; (24000f0c <audioInit+0x8ac>)
24000e2a:	f011 ff39 	bl	24012ca0 <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000e2e:	4c38      	ldr	r4, [pc, #224]	; (24000f10 <audioInit+0x8b0>)
24000e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000e34:	eddf 0a37 	vldr	s1, [pc, #220]	; 24000f14 <audioInit+0x8b4>
24000e38:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24000f18 <audioInit+0x8b8>
24000e3c:	4837      	ldr	r0, [pc, #220]	; (24000f1c <audioInit+0x8bc>)
24000e3e:	1865      	adds	r5, r4, r1

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
24000e40:	ed9f 8a37 	vldr	s16, [pc, #220]	; 24000f20 <audioInit+0x8c0>
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000e44:	f011 ff56 	bl	24012cf4 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e48:	eddf 9a36 	vldr	s19, [pc, #216]	; 24000f24 <audioInit+0x8c4>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e4c:	4b36      	ldr	r3, [pc, #216]	; (24000f28 <audioInit+0x8c8>)
24000e4e:	4a37      	ldr	r2, [pc, #220]	; (24000f2c <audioInit+0x8cc>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e50:	ed9f 9a37 	vldr	s18, [pc, #220]	; 24000f30 <audioInit+0x8d0>
        x += increment;
24000e54:	eddf 8a37 	vldr	s17, [pc, #220]	; 24000f34 <audioInit+0x8d4>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
24000e58:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
24000e5a:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
24000e5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24000e62:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
24000e66:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
24000e6a:	ee20 0a29 	vmul.f32	s0, s0, s19
24000e6e:	f012 f80f 	bl	24012e90 <ftom>
24000e72:	ee30 0a49 	vsub.f32	s0, s0, s18
24000e76:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
24000e7a:	42ac      	cmp	r4, r5
24000e7c:	d1ed      	bne.n	24000e5a <audioInit+0x7fa>





	if (numStrings == 6)
24000e7e:	4b2e      	ldr	r3, [pc, #184]	; (24000f38 <audioInit+0x8d8>)
24000e80:	781b      	ldrb	r3, [r3, #0]
24000e82:	2b06      	cmp	r3, #6
24000e84:	f000 8416 	beq.w	240016b4 <audioInit+0x1054>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000e88:	2b0a      	cmp	r3, #10
	{
		// first two strings are one board each, other 8 are two strings each.
		if (boardNumber == 0)
24000e8a:	4b2c      	ldr	r3, [pc, #176]	; (24000f3c <audioInit+0x8dc>)
	else if (numStrings == 10)
24000e8c:	f000 83f9 	beq.w	24001682 <audioInit+0x1022>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e90:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
24000e92:	2002      	movs	r0, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e94:	4a2a      	ldr	r2, [pc, #168]	; (24000f40 <audioInit+0x8e0>)
		numStringsThisBoard = 2;
24000e96:	492b      	ldr	r1, [pc, #172]	; (24000f44 <audioInit+0x8e4>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e98:	005b      	lsls	r3, r3, #1
		numStringsThisBoard = 2;
24000e9a:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000e9c:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
24000e9e:	4b2a      	ldr	r3, [pc, #168]	; (24000f48 <audioInit+0x8e8>)
    float x = 0.0f;
24000ea0:	f04f 0900 	mov.w	r9, #0
24000ea4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 24000f5c <audioInit+0x8fc>
24000ea8:	9303      	str	r3, [sp, #12]
24000eaa:	4b13      	ldr	r3, [pc, #76]	; (24000ef8 <audioInit+0x898>)
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000eac:	ed9f 9a27 	vldr	s18, [pc, #156]	; 24000f4c <audioInit+0x8ec>
24000eb0:	f103 082c 	add.w	r8, r3, #44	; 0x2c
24000eb4:	eddf 8a26 	vldr	s17, [pc, #152]	; 24000f50 <audioInit+0x8f0>
24000eb8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 24000f20 <audioInit+0x8c0>
    float x = 0.0f;
24000ebc:	9e03      	ldr	r6, [sp, #12]
24000ebe:	465c      	mov	r4, fp
24000ec0:	4d0d      	ldr	r5, [pc, #52]	; (24000ef8 <audioInit+0x898>)
			tCycle_init(&additive[i][j], &leaf);
24000ec2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 24000f60 <audioInit+0x900>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000ec6:	4f23      	ldr	r7, [pc, #140]	; (24000f54 <audioInit+0x8f4>)
24000ec8:	e04c      	b.n	24000f64 <audioInit+0x904>
24000eca:	bf00      	nop
24000ecc:	20005120 	.word	0x20005120
24000ed0:	20000340 	.word	0x20000340
24000ed4:	200000b4 	.word	0x200000b4
24000ed8:	20000f14 	.word	0x20000f14
24000edc:	20000fa4 	.word	0x20000fa4
24000ee0:	3b84a9fa 	.word	0x3b84a9fa
24000ee4:	42f60000 	.word	0x42f60000
24000ee8:	20000190 	.word	0x20000190
24000eec:	20000c94 	.word	0x20000c94
24000ef0:	20000b74 	.word	0x20000b74
24000ef4:	20000db4 	.word	0x20000db4
24000ef8:	2000006c 	.word	0x2000006c
24000efc:	20005670 	.word	0x20005670
24000f00:	3727c5ac 	.word	0x3727c5ac
24000f04:	3000a000 	.word	0x3000a000
24000f08:	c2b40000 	.word	0xc2b40000
24000f0c:	30002000 	.word	0x30002000
24000f10:	30012000 	.word	0x30012000
24000f14:	4323d666 	.word	0x4323d666
24000f18:	c323d666 	.word	0xc323d666
24000f1c:	3001a000 	.word	0x3001a000
24000f20:	00000000 	.word	0x00000000
24000f24:	435c0000 	.word	0x435c0000
24000f28:	2000004c 	.word	0x2000004c
24000f2c:	44924492 	.word	0x44924492
24000f30:	42640000 	.word	0x42640000
24000f34:	39000400 	.word	0x39000400
24000f38:	20000051 	.word	0x20000051
24000f3c:	200149b1 	.word	0x200149b1
24000f40:	200050b8 	.word	0x200050b8
24000f44:	20000052 	.word	0x20000052
24000f48:	20000a64 	.word	0x20000a64
24000f4c:	447a0000 	.word	0x447a0000
24000f50:	43160000 	.word	0x43160000
24000f54:	20000fec 	.word	0x20000fec
24000f58:	20000f5c 	.word	0x20000f5c
24000f5c:	200009d4 	.word	0x200009d4
24000f60:	2000522c 	.word	0x2000522c
			tCycle_init(&additive[i][j], &leaf);
24000f64:	4620      	mov	r0, r4
24000f66:	4651      	mov	r1, sl
24000f68:	f012 f95a 	bl	24013220 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f6c:	ecf5 0a01 	vldmia	r5!, {s1}
24000f70:	4630      	mov	r0, r6
24000f72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f76:	ee60 0a89 	vmul.f32	s1, s1, s18
24000f7a:	4653      	mov	r3, sl
24000f7c:	eef0 1a68 	vmov.f32	s3, s17
24000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000f84:	eeb0 1a48 	vmov.f32	s2, s16
24000f88:	4639      	mov	r1, r7
24000f8a:	f00f fd01 	bl	24010990 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000f8e:	4545      	cmp	r5, r8
24000f90:	f104 0404 	add.w	r4, r4, #4
24000f94:	f106 0604 	add.w	r6, r6, #4
24000f98:	d1e4      	bne.n	24000f64 <audioInit+0x904>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000f9a:	9b03      	ldr	r3, [sp, #12]
24000f9c:	f109 0912 	add.w	r9, r9, #18
24000fa0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
24000fa4:	3348      	adds	r3, #72	; 0x48
24000fa6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000faa:	9303      	str	r3, [sp, #12]
24000fac:	d186      	bne.n	24000ebc <audioInit+0x85c>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fae:	4ede      	ldr	r6, [pc, #888]	; (24001328 <audioInit+0xcc8>)
24000fb0:	eddf 8ade 	vldr	s17, [pc, #888]	; 2400132c <audioInit+0xccc>
24000fb4:	ed9f 8ade 	vldr	s16, [pc, #888]	; 24001330 <audioInit+0xcd0>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fb8:	4631      	mov	r1, r6
24000fba:	4cde      	ldr	r4, [pc, #888]	; (24001334 <audioInit+0xcd4>)
24000fbc:	eef0 0a68 	vmov.f32	s1, s17
24000fc0:	eeb0 0a48 	vmov.f32	s0, s16
24000fc4:	48dc      	ldr	r0, [pc, #880]	; (24001338 <audioInit+0xcd8>)
24000fc6:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000fca:	f00f ffdf 	bl	24010f8c <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fce:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24000fd0:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fd2:	eef0 0a68 	vmov.f32	s1, s17
24000fd6:	4631      	mov	r1, r6
24000fd8:	eeb0 0a48 	vmov.f32	s0, s16
24000fdc:	f00f ffd6 	bl	24010f8c <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24000fe0:	42ac      	cmp	r4, r5
24000fe2:	d1f4      	bne.n	24000fce <audioInit+0x96e>
24000fe4:	4cd5      	ldr	r4, [pc, #852]	; (2400133c <audioInit+0xcdc>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000fe6:	4ed0      	ldr	r6, [pc, #832]	; (24001328 <audioInit+0xcc8>)
24000fe8:	eddf 8ad0 	vldr	s17, [pc, #832]	; 2400132c <audioInit+0xccc>
24000fec:	f104 0528 	add.w	r5, r4, #40	; 0x28
24000ff0:	ed9f 8acf 	vldr	s16, [pc, #828]	; 24001330 <audioInit+0xcd0>
24000ff4:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24000ff6:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000ff8:	eef0 0a68 	vmov.f32	s1, s17
24000ffc:	4631      	mov	r1, r6
24000ffe:	eeb0 0a48 	vmov.f32	s0, s16
24001002:	f00f ffc3 	bl	24010f8c <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24001006:	42ac      	cmp	r4, r5
24001008:	d1f4      	bne.n	24000ff4 <audioInit+0x994>
2400100a:	2600      	movs	r6, #0
2400100c:	4bcc      	ldr	r3, [pc, #816]	; (24001340 <audioInit+0xce0>)
2400100e:	f8df b430 	ldr.w	fp, [pc, #1072]	; 24001440 <audioInit+0xde0>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
24001012:	4cc5      	ldr	r4, [pc, #788]	; (24001328 <audioInit+0xcc8>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001014:	eddf bacb 	vldr	s23, [pc, #812]	; 24001344 <audioInit+0xce4>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001018:	ed9f cacb 	vldr	s24, [pc, #812]	; 24001348 <audioInit+0xce8>
2400101c:	eddf 8ac4 	vldr	s17, [pc, #784]	; 24001330 <audioInit+0xcd0>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001020:	ed9f aaca 	vldr	s20, [pc, #808]	; 2400134c <audioInit+0xcec>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001024:	e9cd 3604 	strd	r3, r6, [sp, #16]
    float x = 0.0f;
24001028:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400102a:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 24001350 <audioInit+0xcf0>
			tMBSaw_init(&saw[i][v],  &leaf);
2400102e:	4bc9      	ldr	r3, [pc, #804]	; (24001354 <audioInit+0xcf4>)
24001030:	4621      	mov	r1, r4
24001032:	1998      	adds	r0, r3, r6
24001034:	4428      	add	r0, r5
24001036:	f015 f8d5 	bl	240161e4 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
2400103a:	4bc7      	ldr	r3, [pc, #796]	; (24001358 <audioInit+0xcf8>)
2400103c:	4621      	mov	r1, r4
2400103e:	1998      	adds	r0, r3, r6
24001040:	4428      	add	r0, r5
24001042:	f012 f9ad 	bl	240133a0 <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24001046:	4bc5      	ldr	r3, [pc, #788]	; (2400135c <audioInit+0xcfc>)
24001048:	4621      	mov	r1, r4
2400104a:	1998      	adds	r0, r3, r6
2400104c:	4428      	add	r0, r5
2400104e:	f012 f8e7 	bl	24013220 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
24001052:	4bc3      	ldr	r3, [pc, #780]	; (24001360 <audioInit+0xd00>)
24001054:	4621      	mov	r1, r4
24001056:	1998      	adds	r0, r3, r6
24001058:	4428      	add	r0, r5
2400105a:	f012 ff8d 	bl	24013f78 <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
2400105e:	4bc1      	ldr	r3, [pc, #772]	; (24001364 <audioInit+0xd04>)
24001060:	4621      	mov	r1, r4
24001062:	1998      	adds	r0, r3, r6
24001064:	4428      	add	r0, r5
24001066:	f015 fb7b 	bl	24016760 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
2400106a:	4bbf      	ldr	r3, [pc, #764]	; (24001368 <audioInit+0xd08>)
2400106c:	4621      	mov	r1, r4
2400106e:	1998      	adds	r0, r3, r6
24001070:	4428      	add	r0, r5
24001072:	f013 fff7 	bl	24015064 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001076:	4bbd      	ldr	r3, [pc, #756]	; (2400136c <audioInit+0xd0c>)
24001078:	eef0 0a48 	vmov.f32	s1, s16
2400107c:	4621      	mov	r1, r4
2400107e:	1998      	adds	r0, r3, r6
24001080:	eeb0 0a6b 	vmov.f32	s0, s23
24001084:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
24001086:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001088:	f00f ff80 	bl	24010f8c <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
2400108c:	2d18      	cmp	r5, #24
2400108e:	d1ce      	bne.n	2400102e <audioInit+0x9ce>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001090:	48b7      	ldr	r0, [pc, #732]	; (24001370 <audioInit+0xd10>)
24001092:	eef0 2a4c 	vmov.f32	s5, s24
24001096:	eef0 1a68 	vmov.f32	s3, s17
2400109a:	ed9f 2aab 	vldr	s4, [pc, #684]	; 24001348 <audioInit+0xce8>
2400109e:	ed9f 1ab5 	vldr	s2, [pc, #724]	; 24001374 <audioInit+0xd14>
240010a2:	2200      	movs	r2, #0
240010a4:	eddf 0ab4 	vldr	s1, [pc, #720]	; 24001378 <audioInit+0xd18>
240010a8:	2104      	movs	r1, #4
240010aa:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 2400137c <audioInit+0xd1c>
240010ae:	4430      	add	r0, r6
240010b0:	4bb3      	ldr	r3, [pc, #716]	; (24001380 <audioInit+0xd20>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240010b2:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010b4:	f015 fefc 	bl	24016eb0 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &largePool);
240010b8:	4bb2      	ldr	r3, [pc, #712]	; (24001384 <audioInit+0xd24>)
240010ba:	eddf 4ab3 	vldr	s9, [pc, #716]	; 24001388 <audioInit+0xd28>
240010be:	eef0 3a68 	vmov.f32	s7, s17
240010c2:	ed9f 3ab2 	vldr	s6, [pc, #712]	; 2400138c <audioInit+0xd2c>
240010c6:	1998      	adds	r0, r3, r6
240010c8:	eeb0 4a64 	vmov.f32	s8, s9
240010cc:	ed9f 2a98 	vldr	s4, [pc, #608]	; 24001330 <audioInit+0xcd0>
240010d0:	eef0 2a43 	vmov.f32	s5, s6
240010d4:	eddf 1aae 	vldr	s3, [pc, #696]	; 24001390 <audioInit+0xd30>
240010d8:	ed9f 1aae 	vldr	s2, [pc, #696]	; 24001394 <audioInit+0xd34>
240010dc:	2101      	movs	r1, #1
240010de:	eddf 0aae 	vldr	s1, [pc, #696]	; 24001398 <audioInit+0xd38>
240010e2:	f106 0710 	add.w	r7, r6, #16
240010e6:	4aad      	ldr	r2, [pc, #692]	; (2400139c <audioInit+0xd3c>)
240010e8:	ed9f 0aad 	vldr	s0, [pc, #692]	; 240013a0 <audioInit+0xd40>
240010ec:	9003      	str	r0, [sp, #12]
240010ee:	f016 fa25 	bl	2401753c <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
240010f2:	ed9f 0aac 	vldr	s0, [pc, #688]	; 240013a4 <audioInit+0xd44>
240010f6:	9803      	ldr	r0, [sp, #12]
240010f8:	f016 fbce 	bl	24017898 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
240010fc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
24001100:	9803      	ldr	r0, [sp, #12]
24001102:	f016 fb85 	bl	24017810 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
24001106:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 240013a8 <audioInit+0xd48>
2400110a:	9803      	ldr	r0, [sp, #12]
2400110c:	f016 fb92 	bl	24017834 <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
24001110:	eeb0 0a68 	vmov.f32	s0, s17
24001114:	9803      	ldr	r0, [sp, #12]
24001116:	f016 fbb1 	bl	2401787c <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
2400111a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2400111e:	9803      	ldr	r0, [sp, #12]
24001120:	f016 fb9a 	bl	24017858 <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001124:	4aa1      	ldr	r2, [pc, #644]	; (240013ac <audioInit+0xd4c>)
24001126:	eeb0 1a68 	vmov.f32	s2, s17
2400112a:	4623      	mov	r3, r4
2400112c:	eddf 1aa0 	vldr	s3, [pc, #640]	; 240013b0 <audioInit+0xd50>
24001130:	1990      	adds	r0, r2, r6
24001132:	eddf 0aa0 	vldr	s1, [pc, #640]	; 240013b4 <audioInit+0xd54>
24001136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400113a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24001330 <audioInit+0xcd0>
2400113e:	499e      	ldr	r1, [pc, #632]	; (240013b8 <audioInit+0xd58>)
24001140:	f00f fc26 	bl	24010990 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24001144:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24001148:	4622      	mov	r2, r4
2400114a:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 240013bc <audioInit+0xd5c>
2400114e:	2103      	movs	r1, #3
24001150:	489b      	ldr	r0, [pc, #620]	; (240013c0 <audioInit+0xd60>)
24001152:	f010 fc01 	bl	24011958 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24001156:	4622      	mov	r2, r4
24001158:	2101      	movs	r1, #1
2400115a:	489a      	ldr	r0, [pc, #616]	; (240013c4 <audioInit+0xd64>)
2400115c:	eddf 0a8c 	vldr	s1, [pc, #560]	; 24001390 <audioInit+0xd30>
24001160:	ed9f 0a99 	vldr	s0, [pc, #612]	; 240013c8 <audioInit+0xd68>
24001164:	f010 fbf8 	bl	24011958 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001168:	4622      	mov	r2, r4
2400116a:	2100      	movs	r1, #0
2400116c:	4897      	ldr	r0, [pc, #604]	; (240013cc <audioInit+0xd6c>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400116e:	ed9f 9ab6 	vldr	s18, [pc, #728]	; 24001448 <audioInit+0xde8>
24001172:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 2400144c <audioInit+0xdec>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001176:	f012 f8b3 	bl	240132e0 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400117a:	4b95      	ldr	r3, [pc, #596]	; (240013d0 <audioInit+0xd70>)
2400117c:	eef0 0a49 	vmov.f32	s1, s18
24001180:	eeb0 0a48 	vmov.f32	s0, s16
24001184:	2101      	movs	r1, #1
24001186:	1958      	adds	r0, r3, r5
24001188:	4622      	mov	r2, r4
2400118a:	f010 f87b 	bl	24011284 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
2400118e:	4b91      	ldr	r3, [pc, #580]	; (240013d4 <audioInit+0xd74>)
24001190:	eef0 0a49 	vmov.f32	s1, s18
24001194:	4622      	mov	r2, r4
24001196:	1958      	adds	r0, r3, r5
24001198:	eeb0 0a48 	vmov.f32	s0, s16
2400119c:	2100      	movs	r1, #0
2400119e:	f010 f871 	bl	24011284 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240011a2:	4b8d      	ldr	r3, [pc, #564]	; (240013d8 <audioInit+0xd78>)
240011a4:	4622      	mov	r2, r4
240011a6:	eef0 0a49 	vmov.f32	s1, s18
240011aa:	1958      	adds	r0, r3, r5
240011ac:	eeb0 0a48 	vmov.f32	s0, s16
240011b0:	2102      	movs	r1, #2
240011b2:	f010 f867 	bl	24011284 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240011b6:	4b89      	ldr	r3, [pc, #548]	; (240013dc <audioInit+0xd7c>)
240011b8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240011bc:	4621      	mov	r1, r4
240011be:	1958      	adds	r0, r3, r5
240011c0:	eeb0 0a48 	vmov.f32	s0, s16
240011c4:	f010 febc 	bl	24011f40 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240011c8:	4b85      	ldr	r3, [pc, #532]	; (240013e0 <audioInit+0xd80>)
240011ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011ce:	4622      	mov	r2, r4
240011d0:	1958      	adds	r0, r3, r5
240011d2:	eeb0 0a48 	vmov.f32	s0, s16
240011d6:	2105      	movs	r1, #5
240011d8:	f010 fbbe 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240011dc:	4b81      	ldr	r3, [pc, #516]	; (240013e4 <audioInit+0xd84>)
240011de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011e2:	4622      	mov	r2, r4
240011e4:	1958      	adds	r0, r3, r5
240011e6:	eeb0 0a48 	vmov.f32	s0, s16
240011ea:	2106      	movs	r1, #6
240011ec:	f010 fbb4 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240011f0:	4b7d      	ldr	r3, [pc, #500]	; (240013e8 <audioInit+0xd88>)
240011f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011f6:	4622      	mov	r2, r4
240011f8:	1958      	adds	r0, r3, r5
240011fa:	eeb0 0a48 	vmov.f32	s0, s16
240011fe:	2107      	movs	r1, #7
24001200:	f010 fbaa 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24001204:	4b79      	ldr	r3, [pc, #484]	; (240013ec <audioInit+0xd8c>)
24001206:	4622      	mov	r2, r4
24001208:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400120c:	1958      	adds	r0, r3, r5
2400120e:	eeb0 0a48 	vmov.f32	s0, s16
24001212:	2104      	movs	r1, #4
24001214:	f010 fba0 	bl	24011958 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
24001218:	4b75      	ldr	r3, [pc, #468]	; (240013f0 <audioInit+0xd90>)
2400121a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400121e:	4621      	mov	r1, r4
24001220:	1958      	adds	r0, r3, r5
24001222:	eeb0 0a48 	vmov.f32	s0, s16
24001226:	f011 fa1f 	bl	24012668 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400122a:	4b72      	ldr	r3, [pc, #456]	; (240013f4 <audioInit+0xd94>)
2400122c:	eef0 0a4c 	vmov.f32	s1, s24
24001230:	4621      	mov	r1, r4
24001232:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
24001234:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24001236:	eeb0 0a6b 	vmov.f32	s0, s23
2400123a:	f00f fea7 	bl	24010f8c <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
2400123e:	42af      	cmp	r7, r5
24001240:	d19b      	bne.n	2400117a <audioInit+0xb1a>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001242:	4b6d      	ldr	r3, [pc, #436]	; (240013f8 <audioInit+0xd98>)
24001244:	2500      	movs	r5, #0
24001246:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400124a:	4b6c      	ldr	r3, [pc, #432]	; (240013fc <audioInit+0xd9c>)
2400124c:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
2400124e:	eb08 0005 	add.w	r0, r8, r5
24001252:	4621      	mov	r1, r4
24001254:	f015 fad2 	bl	240167fc <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24001258:	1978      	adds	r0, r7, r5
2400125a:	4621      	mov	r1, r4
2400125c:	f015 fb14 	bl	24016888 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001260:	4b67      	ldr	r3, [pc, #412]	; (24001400 <audioInit+0xda0>)
24001262:	4621      	mov	r1, r4
24001264:	1998      	adds	r0, r3, r6
24001266:	4428      	add	r0, r5
24001268:	f011 ffda 	bl	24013220 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
2400126c:	4b65      	ldr	r3, [pc, #404]	; (24001404 <audioInit+0xda4>)
2400126e:	4621      	mov	r1, r4
24001270:	1998      	adds	r0, r3, r6
24001272:	4428      	add	r0, r5
24001274:	f015 fcf4 	bl	24016c60 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
24001278:	4b63      	ldr	r3, [pc, #396]	; (24001408 <audioInit+0xda8>)
2400127a:	4621      	mov	r1, r4
2400127c:	1998      	adds	r0, r3, r6
2400127e:	4428      	add	r0, r5
24001280:	f015 fd4a 	bl	24016d18 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24001284:	4b61      	ldr	r3, [pc, #388]	; (2400140c <audioInit+0xdac>)
24001286:	4621      	mov	r1, r4
24001288:	1998      	adds	r0, r3, r6
2400128a:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
2400128c:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
2400128e:	f015 fc25 	bl	24016adc <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24001292:	2d20      	cmp	r5, #32
24001294:	d1db      	bne.n	2400124e <audioInit+0xbee>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
24001296:	4b5e      	ldr	r3, [pc, #376]	; (24001410 <audioInit+0xdb0>)
24001298:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
2400129c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 24001414 <audioInit+0xdb4>
240012a0:	2106      	movs	r1, #6
240012a2:	1998      	adds	r0, r3, r6
240012a4:	4622      	mov	r2, r4
240012a6:	f010 fb57 	bl	24011958 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012aa:	4b5b      	ldr	r3, [pc, #364]	; (24001418 <audioInit+0xdb8>)
240012ac:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012b0:	4622      	mov	r2, r4
240012b2:	1998      	adds	r0, r3, r6
240012b4:	ed9f 0a59 	vldr	s0, [pc, #356]	; 2400141c <audioInit+0xdbc>
240012b8:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012ba:	ed9f 9a59 	vldr	s18, [pc, #356]	; 24001420 <audioInit+0xdc0>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012be:	f010 fb4b 	bl	24011958 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012c2:	4b58      	ldr	r3, [pc, #352]	; (24001424 <audioInit+0xdc4>)
240012c4:	9f04      	ldr	r7, [sp, #16]
240012c6:	eeb0 0a4a 	vmov.f32	s0, s20
240012ca:	4622      	mov	r2, r4
240012cc:	eddf 0a56 	vldr	s1, [pc, #344]	; 24001428 <audioInit+0xdc8>
240012d0:	2105      	movs	r1, #5
240012d2:	1998      	adds	r0, r3, r6
240012d4:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012d8:	ed9f 8a54 	vldr	s16, [pc, #336]	; 2400142c <audioInit+0xdcc>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012dc:	f010 fb3c 	bl	24011958 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012e0:	4628      	mov	r0, r5
240012e2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240012e6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240012ea:	4623      	mov	r3, r4
240012ec:	eef0 0a4a 	vmov.f32	s1, s20
240012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240012f4:	eeb0 0a49 	vmov.f32	s0, s18
240012f8:	492f      	ldr	r1, [pc, #188]	; (240013b8 <audioInit+0xd58>)
240012fa:	f00f fb49 	bl	24010990 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012fe:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
24001300:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001302:	eeb0 0a48 	vmov.f32	s0, s16
24001306:	f00f fbf9 	bl	24010afc <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
2400130a:	42af      	cmp	r7, r5
2400130c:	d1e8      	bne.n	240012e0 <audioInit+0xc80>
2400130e:	4b48      	ldr	r3, [pc, #288]	; (24001430 <audioInit+0xdd0>)
24001310:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001312:	ed9f ba48 	vldr	s22, [pc, #288]	; 24001434 <audioInit+0xdd4>
24001316:	eb03 0806 	add.w	r8, r3, r6
2400131a:	4b47      	ldr	r3, [pc, #284]	; (24001438 <audioInit+0xdd8>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400131c:	eddf 9a47 	vldr	s19, [pc, #284]	; 2400143c <audioInit+0xddc>
24001320:	199f      	adds	r7, r3, r6
24001322:	f106 0320 	add.w	r3, r6, #32
24001326:	e093      	b.n	24001450 <audioInit+0xdf0>
24001328:	2000522c 	.word	0x2000522c
2400132c:	3a03126f 	.word	0x3a03126f
24001330:	00000000 	.word	0x00000000
24001334:	200051f8 	.word	0x200051f8
24001338:	200147bc 	.word	0x200147bc
2400133c:	200055d8 	.word	0x200055d8
24001340:	20005078 	.word	0x20005078
24001344:	42800000 	.word	0x42800000
24001348:	3c23d70a 	.word	0x3c23d70a
2400134c:	447a0000 	.word	0x447a0000
24001350:	3ca3d70a 	.word	0x3ca3d70a
24001354:	20005a74 	.word	0x20005a74
24001358:	20005658 	.word	0x20005658
2400135c:	20005b30 	.word	0x20005b30
24001360:	20014794 	.word	0x20014794
24001364:	20005a8c 	.word	0x20005a8c
24001368:	20005b48 	.word	0x20005b48
2400136c:	20005600 	.word	0x20005600
24001370:	20005350 	.word	0x20005350
24001374:	3f7fff58 	.word	0x3f7fff58
24001378:	4684d000 	.word	0x4684d000
2400137c:	435c0000 	.word	0x435c0000
24001380:	2000546c 	.word	0x2000546c
24001384:	20014730 	.word	0x20014730
24001388:	3d4ccccd 	.word	0x3d4ccccd
2400138c:	3f7ff972 	.word	0x3f7ff972
24001390:	3f666666 	.word	0x3f666666
24001394:	3e99999a 	.word	0x3e99999a
24001398:	3f19999a 	.word	0x3f19999a
2400139c:	20005228 	.word	0x20005228
240013a0:	42c80000 	.word	0x42c80000
240013a4:	3f7d70a4 	.word	0x3f7d70a4
240013a8:	3ecccccd 	.word	0x3ecccccd
240013ac:	20005078 	.word	0x20005078
240013b0:	43480000 	.word	0x43480000
240013b4:	42480000 	.word	0x42480000
240013b8:	20000fec 	.word	0x20000fec
240013bc:	44bb8000 	.word	0x44bb8000
240013c0:	200054c8 	.word	0x200054c8
240013c4:	200054cc 	.word	0x200054cc
240013c8:	44480000 	.word	0x44480000
240013cc:	200054b0 	.word	0x200054b0
240013d0:	20005358 	.word	0x20005358
240013d4:	20005144 	.word	0x20005144
240013d8:	20000afc 	.word	0x20000afc
240013dc:	20005030 	.word	0x20005030
240013e0:	200009c4 	.word	0x200009c4
240013e4:	200009b4 	.word	0x200009b4
240013e8:	200009a4 	.word	0x200009a4
240013ec:	20000994 	.word	0x20000994
240013f0:	20000984 	.word	0x20000984
240013f4:	20005080 	.word	0x20005080
240013f8:	200052a0 	.word	0x200052a0
240013fc:	20005280 	.word	0x20005280
24001400:	200052f0 	.word	0x200052f0
24001404:	20005330 	.word	0x20005330
24001408:	20005310 	.word	0x20005310
2400140c:	200052c0 	.word	0x200052c0
24001410:	200054e0 	.word	0x200054e0
24001414:	42a00000 	.word	0x42a00000
24001418:	200054e8 	.word	0x200054e8
2400141c:	463b8000 	.word	0x463b8000
24001420:	3dcccccd 	.word	0x3dcccccd
24001424:	200054c0 	.word	0x200054c0
24001428:	3ff33333 	.word	0x3ff33333
2400142c:	3f7fffac 	.word	0x3f7fffac
24001430:	20000b14 	.word	0x20000b14
24001434:	42000000 	.word	0x42000000
24001438:	20000ed4 	.word	0x20000ed4
2400143c:	47bb8000 	.word	0x47bb8000
24001440:	2000546c 	.word	0x2000546c
24001444:	457a0000 	.word	0x457a0000
24001448:	3f333333 	.word	0x3f333333
2400144c:	44fa0000 	.word	0x44fa0000
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001450:	ed5f aa04 	vldr	s21, [pc, #-16]	; 24001444 <audioInit+0xde4>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001454:	ed1f 9a04 	vldr	s18, [pc, #-16]	; 24001448 <audioInit+0xde8>
24001458:	ed1f 8a04 	vldr	s16, [pc, #-16]	; 2400144c <audioInit+0xdec>
2400145c:	e9cd b606 	strd	fp, r6, [sp, #24]
24001460:	461e      	mov	r6, r3
			tCrusher_init(&bc[i][v],&leaf);
24001462:	4640      	mov	r0, r8
24001464:	4621      	mov	r1, r4
24001466:	f00f f8a9 	bl	240105bc <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
2400146a:	4638      	mov	r0, r7
2400146c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001470:	4621      	mov	r1, r4
24001472:	f010 f801 	bl	24011478 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001476:	4b9a      	ldr	r3, [pc, #616]	; (240016e0 <audioInit+0x1080>)
24001478:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400147c:	4621      	mov	r1, r4
2400147e:	eb03 0b05 	add.w	fp, r3, r5
24001482:	4b98      	ldr	r3, [pc, #608]	; (240016e4 <audioInit+0x1084>)
		for (int i = 0; i < NUM_EFFECT; i++)
24001484:	f108 0808 	add.w	r8, r8, #8
24001488:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
2400148a:	1958      	adds	r0, r3, r5
2400148c:	f00f fff4 	bl	24011478 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001490:	4b95      	ldr	r3, [pc, #596]	; (240016e8 <audioInit+0x1088>)
24001492:	eef0 0a4b 	vmov.f32	s1, s22
24001496:	ed9f 0a95 	vldr	s0, [pc, #596]	; 240016ec <audioInit+0x108c>
2400149a:	eb03 0a05 	add.w	sl, r3, r5
2400149e:	4b94      	ldr	r3, [pc, #592]	; (240016f0 <audioInit+0x1090>)
240014a0:	4622      	mov	r2, r4
240014a2:	2106      	movs	r1, #6
240014a4:	eb03 0905 	add.w	r9, r3, r5
240014a8:	4658      	mov	r0, fp
240014aa:	f010 fa55 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
240014ae:	4650      	mov	r0, sl
240014b0:	eef0 0a4b 	vmov.f32	s1, s22
240014b4:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 240016f4 <audioInit+0x1094>
240014b8:	4622      	mov	r2, r4
240014ba:	2107      	movs	r1, #7
240014bc:	f010 fa4c 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
240014c0:	eddf 0a8d 	vldr	s1, [pc, #564]	; 240016f8 <audioInit+0x1098>
240014c4:	4622      	mov	r2, r4
240014c6:	2105      	movs	r1, #5
240014c8:	4648      	mov	r0, r9
240014ca:	eeb0 0a4a 	vmov.f32	s0, s20
240014ce:	f010 fa43 	bl	24011958 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014d2:	eeb0 0a69 	vmov.f32	s0, s19
240014d6:	4658      	mov	r0, fp
240014d8:	f010 fbf0 	bl	24011cbc <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
240014dc:	4650      	mov	r0, sl
240014de:	eeb0 0a69 	vmov.f32	s0, s19
240014e2:	f010 fbeb 	bl	24011cbc <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014e6:	eeb0 0a69 	vmov.f32	s0, s19
240014ea:	4648      	mov	r0, r9
240014ec:	f010 fbe6 	bl	24011cbc <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
240014f0:	4b82      	ldr	r3, [pc, #520]	; (240016fc <audioInit+0x109c>)
240014f2:	4621      	mov	r1, r4
240014f4:	1958      	adds	r0, r3, r5
240014f6:	4b82      	ldr	r3, [pc, #520]	; (24001700 <audioInit+0x10a0>)
240014f8:	9003      	str	r0, [sp, #12]
240014fa:	eb03 0905 	add.w	r9, r3, r5
240014fe:	f00f f919 	bl	24010734 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24001502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001506:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
2400150a:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 24001704 <audioInit+0x10a4>
2400150e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24001512:	9803      	ldr	r0, [sp, #12]
24001514:	4a7c      	ldr	r2, [pc, #496]	; (24001708 <audioInit+0x10a8>)
24001516:	497d      	ldr	r1, [pc, #500]	; (2400170c <audioInit+0x10ac>)
24001518:	9300      	str	r3, [sp, #0]
2400151a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24001710 <audioInit+0x10b0>
2400151e:	f00f f9b3 	bl	24010888 <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001522:	4b7c      	ldr	r3, [pc, #496]	; (24001714 <audioInit+0x10b4>)
24001524:	eeb0 0a6a 	vmov.f32	s0, s21
24001528:	4a7b      	ldr	r2, [pc, #492]	; (24001718 <audioInit+0x10b8>)
2400152a:	1958      	adds	r0, r3, r5
2400152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001530:	f00e fdd4 	bl	240100dc <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
24001534:	4b79      	ldr	r3, [pc, #484]	; (2400171c <audioInit+0x10bc>)
24001536:	4a78      	ldr	r2, [pc, #480]	; (24001718 <audioInit+0x10b8>)
24001538:	eeb0 0a6a 	vmov.f32	s0, s21
2400153c:	1958      	adds	r0, r3, r5
2400153e:	4b78      	ldr	r3, [pc, #480]	; (24001720 <audioInit+0x10c0>)
24001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001544:	eb03 0a05 	add.w	sl, r3, r5
24001548:	f00e fdc8 	bl	240100dc <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
2400154c:	4621      	mov	r1, r4
2400154e:	4648      	mov	r0, r9
24001550:	f011 fe66 	bl	24013220 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001554:	4621      	mov	r1, r4
24001556:	4650      	mov	r0, sl
24001558:	f011 fe62 	bl	24013220 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
2400155c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 24001724 <audioInit+0x10c4>
24001560:	4648      	mov	r0, r9
24001562:	f011 fe9f 	bl	240132a4 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24001566:	4650      	mov	r0, sl
24001568:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 24001728 <audioInit+0x10c8>
2400156c:	f011 fe9a 	bl	240132a4 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001570:	4b6e      	ldr	r3, [pc, #440]	; (2400172c <audioInit+0x10cc>)
24001572:	eef0 0a49 	vmov.f32	s1, s18
24001576:	4622      	mov	r2, r4
24001578:	1958      	adds	r0, r3, r5
2400157a:	eeb0 0a48 	vmov.f32	s0, s16
2400157e:	2101      	movs	r1, #1
24001580:	f00f fe80 	bl	24011284 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001584:	4b6a      	ldr	r3, [pc, #424]	; (24001730 <audioInit+0x10d0>)
24001586:	eef0 0a49 	vmov.f32	s1, s18
2400158a:	4622      	mov	r2, r4
2400158c:	1958      	adds	r0, r3, r5
2400158e:	eeb0 0a48 	vmov.f32	s0, s16
24001592:	2100      	movs	r1, #0
24001594:	f00f fe76 	bl	24011284 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001598:	4b66      	ldr	r3, [pc, #408]	; (24001734 <audioInit+0x10d4>)
2400159a:	4622      	mov	r2, r4
2400159c:	eef0 0a49 	vmov.f32	s1, s18
240015a0:	1958      	adds	r0, r3, r5
240015a2:	eeb0 0a48 	vmov.f32	s0, s16
240015a6:	2102      	movs	r1, #2
240015a8:	f00f fe6c 	bl	24011284 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
240015ac:	4b62      	ldr	r3, [pc, #392]	; (24001738 <audioInit+0x10d8>)
240015ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015b2:	4621      	mov	r1, r4
240015b4:	1958      	adds	r0, r3, r5
240015b6:	eeb0 0a48 	vmov.f32	s0, s16
240015ba:	f010 fcc1 	bl	24011f40 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240015be:	4b5f      	ldr	r3, [pc, #380]	; (2400173c <audioInit+0x10dc>)
240015c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015c4:	4622      	mov	r2, r4
240015c6:	1958      	adds	r0, r3, r5
240015c8:	eeb0 0a48 	vmov.f32	s0, s16
240015cc:	2105      	movs	r1, #5
240015ce:	f010 f9c3 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240015d2:	4b5b      	ldr	r3, [pc, #364]	; (24001740 <audioInit+0x10e0>)
240015d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015d8:	4622      	mov	r2, r4
240015da:	1958      	adds	r0, r3, r5
240015dc:	eeb0 0a48 	vmov.f32	s0, s16
240015e0:	2106      	movs	r1, #6
240015e2:	f010 f9b9 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240015e6:	4b57      	ldr	r3, [pc, #348]	; (24001744 <audioInit+0x10e4>)
240015e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015ec:	4622      	mov	r2, r4
240015ee:	1958      	adds	r0, r3, r5
240015f0:	eeb0 0a48 	vmov.f32	s0, s16
240015f4:	2107      	movs	r1, #7
240015f6:	f010 f9af 	bl	24011958 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240015fa:	4b53      	ldr	r3, [pc, #332]	; (24001748 <audioInit+0x10e8>)
240015fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001600:	4622      	mov	r2, r4
24001602:	1958      	adds	r0, r3, r5
24001604:	eeb0 0a48 	vmov.f32	s0, s16
24001608:	2104      	movs	r1, #4
2400160a:	f010 f9a5 	bl	24011958 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
2400160e:	4b4f      	ldr	r3, [pc, #316]	; (2400174c <audioInit+0x10ec>)
24001610:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001614:	4621      	mov	r1, r4
24001616:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
24001618:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
2400161a:	eeb0 0a48 	vmov.f32	s0, s16
2400161e:	f011 f823 	bl	24012668 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
24001622:	42ae      	cmp	r6, r5
24001624:	f47f af1d 	bne.w	24001462 <audioInit+0xe02>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001628:	ed9f 8a49 	vldr	s16, [pc, #292]	; 24001750 <audioInit+0x10f0>
2400162c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
24001630:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
24001634:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001636:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001638:	eef0 0a48 	vmov.f32	s1, s16
2400163c:	4621      	mov	r1, r4
2400163e:	eeb0 0a68 	vmov.f32	s0, s17
24001642:	f00f fca3 	bl	24010f8c <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001646:	455d      	cmp	r5, fp
24001648:	d1f4      	bne.n	24001634 <audioInit+0xfd4>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400164a:	9b04      	ldr	r3, [sp, #16]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
2400164c:	2102      	movs	r1, #2
2400164e:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001650:	f10b 0b04 	add.w	fp, fp, #4
24001654:	3304      	adds	r3, #4
24001656:	9304      	str	r3, [sp, #16]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24001658:	4b3e      	ldr	r3, [pc, #248]	; (24001754 <audioInit+0x10f4>)
2400165a:	1998      	adds	r0, r3, r6
2400165c:	4623      	mov	r3, r4
2400165e:	f00e ff55 	bl	2401050c <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001662:	4b3d      	ldr	r3, [pc, #244]	; (24001758 <audioInit+0x10f8>)
24001664:	4622      	mov	r2, r4
24001666:	eddf 0a3d 	vldr	s1, [pc, #244]	; 2400175c <audioInit+0x10fc>
2400166a:	1998      	adds	r0, r3, r6
2400166c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 24001760 <audioInit+0x1100>
24001670:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001672:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24001674:	f00f fe06 	bl	24011284 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001678:	9b05      	ldr	r3, [sp, #20]
2400167a:	b973      	cbnz	r3, 2400169a <audioInit+0x103a>
2400167c:	2301      	movs	r3, #1
2400167e:	9305      	str	r3, [sp, #20]
24001680:	e4d2      	b.n	24001028 <audioInit+0x9c8>
		if (boardNumber == 0)
24001682:	781b      	ldrb	r3, [r3, #0]
24001684:	b1fb      	cbz	r3, 240016c6 <audioInit+0x1066>
		else if (boardNumber == 1)
24001686:	2b01      	cmp	r3, #1
24001688:	d024      	beq.n	240016d4 <audioInit+0x1074>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
2400168a:	3b01      	subs	r3, #1
2400168c:	4a35      	ldr	r2, [pc, #212]	; (24001764 <audioInit+0x1104>)
			numStringsThisBoard = 2;
2400168e:	4936      	ldr	r1, [pc, #216]	; (24001768 <audioInit+0x1108>)
24001690:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001692:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
24001694:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001696:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
24001698:	e401      	b.n	24000e9e <audioInit+0x83e>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
2400169a:	2280      	movs	r2, #128	; 0x80
2400169c:	2100      	movs	r1, #0
2400169e:	4833      	ldr	r0, [pc, #204]	; (2400176c <audioInit+0x110c>)
240016a0:	f016 fc82 	bl	24017fa8 <memset>
	}
	HAL_Delay(1);
240016a4:	9805      	ldr	r0, [sp, #20]

}
240016a6:	b009      	add	sp, #36	; 0x24
240016a8:	ecbd 8b10 	vpop	{d8-d15}
240016ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
240016b0:	f003 ba16 	b.w	24004ae0 <HAL_Delay>
		firstString = boardNumber;
240016b4:	4a2e      	ldr	r2, [pc, #184]	; (24001770 <audioInit+0x1110>)
		numStringsThisBoard = 1;
240016b6:	2001      	movs	r0, #1
		firstString = boardNumber;
240016b8:	4b2a      	ldr	r3, [pc, #168]	; (24001764 <audioInit+0x1104>)
		numStringsThisBoard = 1;
240016ba:	492b      	ldr	r1, [pc, #172]	; (24001768 <audioInit+0x1108>)
		firstString = boardNumber;
240016bc:	7812      	ldrb	r2, [r2, #0]
		numStringsThisBoard = 1;
240016be:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber;
240016c0:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
240016c2:	f7ff bbec 	b.w	24000e9e <audioInit+0x83e>
			firstString = 0;
240016c6:	4827      	ldr	r0, [pc, #156]	; (24001764 <audioInit+0x1104>)
			numStringsThisBoard = 1;
240016c8:	2101      	movs	r1, #1
240016ca:	4a27      	ldr	r2, [pc, #156]	; (24001768 <audioInit+0x1108>)
			firstString = 0;
240016cc:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
240016ce:	7011      	strb	r1, [r2, #0]
240016d0:	f7ff bbe5 	b.w	24000e9e <audioInit+0x83e>
			firstString = 1;
240016d4:	4923      	ldr	r1, [pc, #140]	; (24001764 <audioInit+0x1104>)
			numStringsThisBoard = 1;
240016d6:	4a24      	ldr	r2, [pc, #144]	; (24001768 <audioInit+0x1108>)
			firstString = 1;
240016d8:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
240016da:	7013      	strb	r3, [r2, #0]
240016dc:	f7ff bbdf 	b.w	24000e9e <audioInit+0x83e>
240016e0:	20005af0 	.word	0x20005af0
240016e4:	20000ef4 	.word	0x20000ef4
240016e8:	20005b10 	.word	0x20005b10
240016ec:	42a00000 	.word	0x42a00000
240016f0:	20000b34 	.word	0x20000b34
240016f4:	463b8000 	.word	0x463b8000
240016f8:	3ff33333 	.word	0x3ff33333
240016fc:	20000b54 	.word	0x20000b54
24001700:	20005470 	.word	0x20005470
24001704:	c2b40000 	.word	0xc2b40000
24001708:	30002000 	.word	0x30002000
2400170c:	3000a000 	.word	0x3000a000
24001710:	3727c5ac 	.word	0x3727c5ac
24001714:	20004ff0 	.word	0x20004ff0
24001718:	20005228 	.word	0x20005228
2400171c:	20005010 	.word	0x20005010
24001720:	20005490 	.word	0x20005490
24001724:	3e4ccccd 	.word	0x3e4ccccd
24001728:	3e638e39 	.word	0x3e638e39
2400172c:	20000964 	.word	0x20000964
24001730:	20000944 	.word	0x20000944
24001734:	20000904 	.word	0x20000904
24001738:	20000924 	.word	0x20000924
2400173c:	200008e4 	.word	0x200008e4
24001740:	200008c4 	.word	0x200008c4
24001744:	200008a4 	.word	0x200008a4
24001748:	20000884 	.word	0x20000884
2400174c:	20000864 	.word	0x20000864
24001750:	3d4ccccd 	.word	0x3d4ccccd
24001754:	200054f4 	.word	0x200054f4
24001758:	200050a8 	.word	0x200050a8
2400175c:	3e99999a 	.word	0x3e99999a
24001760:	46947000 	.word	0x46947000
24001764:	200050b8 	.word	0x200050b8
24001768:	20000052 	.word	0x20000052
2400176c:	30000000 	.word	0x30000000
24001770:	200149b1 	.word	0x200149b1

24001774 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24001774:	b570      	push	{r4, r5, r6, lr}
24001776:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001778:	4e0a      	ldr	r6, [pc, #40]	; (240017a4 <audioStart+0x30>)
	HAL_Delay(1);
2400177a:	2001      	movs	r0, #1
{
2400177c:	460c      	mov	r4, r1
	HAL_Delay(1);
2400177e:	f003 f9af 	bl	24004ae0 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001782:	2220      	movs	r2, #32
24001784:	4631      	mov	r1, r6
24001786:	4628      	mov	r0, r5
24001788:	f008 fac2 	bl	24009d10 <HAL_SAI_Transmit_DMA>
2400178c:	4b06      	ldr	r3, [pc, #24]	; (240017a8 <audioStart+0x34>)
2400178e:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001790:	2220      	movs	r2, #32
24001792:	f106 0180 	add.w	r1, r6, #128	; 0x80
24001796:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001798:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
2400179a:	f008 fb55 	bl	24009e48 <HAL_SAI_Receive_DMA>
2400179e:	4b03      	ldr	r3, [pc, #12]	; (240017ac <audioStart+0x38>)
240017a0:	7018      	strb	r0, [r3, #0]
}
240017a2:	bd70      	pop	{r4, r5, r6, pc}
240017a4:	30000000 	.word	0x30000000
240017a8:	2001478c 	.word	0x2001478c
240017ac:	20005a71 	.word	0x20005a71

240017b0 <audioTickString>:




float  audioTickString(void)
{
240017b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
240017b4:	f8df 9210 	ldr.w	r9, [pc, #528]	; 240019c8 <audioTickString+0x218>
240017b8:	4d74      	ldr	r5, [pc, #464]	; (2400198c <audioTickString+0x1dc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240017ba:	4875      	ldr	r0, [pc, #468]	; (24001990 <audioTickString+0x1e0>)
240017bc:	f8df 820c 	ldr.w	r8, [pc, #524]	; 240019cc <audioTickString+0x21c>
240017c0:	462c      	mov	r4, r5
240017c2:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
240017c6:	ed2d 8b0c 	vpush	{d8-d13}
240017ca:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
240017cc:	f899 3000 	ldrb.w	r3, [r9]
{
240017d0:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
240017d2:	009b      	lsls	r3, r3, #2
240017d4:	3307      	adds	r3, #7
240017d6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
240017da:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240017de:	f00f fc31 	bl	24011044 <tExpSmooth_tick>
240017e2:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
240017e6:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
240017e8:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
240017ea:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
240017ee:	f00f fc29 	bl	24011044 <tExpSmooth_tick>
240017f2:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
240017f6:	4554      	cmp	r4, sl
240017f8:	d1f6      	bne.n	240017e8 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
240017fa:	4a66      	ldr	r2, [pc, #408]	; (24001994 <audioTickString+0x1e4>)
240017fc:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
240017fe:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
24001802:	eddf 9a65 	vldr	s19, [pc, #404]	; 24001998 <audioTickString+0x1e8>
	pluckPos = knobScaled[9];
24001806:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
24001808:	2b00      	cmp	r3, #0
2400180a:	f000 8088 	beq.w	2400191e <audioTickString+0x16e>
2400180e:	4b63      	ldr	r3, [pc, #396]	; (2400199c <audioTickString+0x1ec>)
		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
24001810:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
		if (note[i] < 0.0f)
24001814:	eef0 aa69 	vmov.f32	s21, s19
24001818:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 240019d0 <audioTickString+0x220>
2400181c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
2400181e:	f04f 0800 	mov.w	r8, #0
24001822:	4b5f      	ldr	r3, [pc, #380]	; (240019a0 <audioTickString+0x1f0>)
24001824:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 240019d4 <audioTickString+0x224>
24001828:	4c5e      	ldr	r4, [pc, #376]	; (240019a4 <audioTickString+0x1f4>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
2400182a:	eddf ca5f 	vldr	s25, [pc, #380]	; 240019a8 <audioTickString+0x1f8>
2400182e:	ed9f ca5f 	vldr	s24, [pc, #380]	; 240019ac <audioTickString+0x1fc>
		float decay = 0.1f;
24001832:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 240019b0 <audioTickString+0x200>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
24001836:	ed9f da5f 	vldr	s26, [pc, #380]	; 240019b4 <audioTickString+0x204>
2400183a:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
2400183c:	ecfb 7a01 	vldmia	fp!, {s15}
24001840:	ecba 0a01 	vldmia	sl!, {s0}
24001844:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
24001848:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24001850:	f100 8097 	bmi.w	24001982 <audioTickString+0x1d2>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001854:	ed86 0a00 	vstr	s0, [r6]
		float finalFreq = mtof(note[i]) * invMapping[i] ;
24001858:	f011 fad0 	bl	24012dfc <mtof>
2400185c:	683b      	ldr	r3, [r7, #0]
2400185e:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
24001862:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
24001866:	eeb0 0a4c 	vmov.f32	s0, s24
		float finalFreq = mtof(note[i]) * invMapping[i] ;
2400186a:	ecf3 7a01 	vldmia	r3!, {s15}
		float decay = 0.1f;
2400186e:	eeb0 aa49 	vmov.f32	s20, s18
		float finalFreq = mtof(note[i]) * invMapping[i] ;
24001872:	603b      	str	r3, [r7, #0]
24001874:	ee28 8a27 	vmul.f32	s16, s16, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
24001878:	eea7 0a2c 	vfma.f32	s0, s14, s25
2400187c:	f011 fae8 	bl	24012e50 <faster_mtof>
		if (lsDecay[i])
24001880:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
24001882:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
24001886:	f812 3b01 	ldrb.w	r3, [r2], #1
2400188a:	607a      	str	r2, [r7, #4]
2400188c:	b12b      	cbz	r3, 2400189a <audioTickString+0xea>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
2400188e:	eeb0 aa6b 	vmov.f32	s20, s23
24001892:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
24001896:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
2400189a:	4620      	mov	r0, r4
2400189c:	ed95 0a08 	vldr	s0, [r5, #32]
240018a0:	f015 fe48 	bl	24017534 <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
240018a4:	4620      	mov	r0, r4
240018a6:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
240018aa:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
240018ae:	f015 fc9b 	bl	240171e8 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
240018b2:	4620      	mov	r0, r4
240018b4:	eeb0 0a68 	vmov.f32	s0, s17
	for (int i = 0; i < numStringsThisBoard; i++)
240018b8:	3604      	adds	r6, #4
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
240018ba:	f015 fc91 	bl	240171e0 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
240018be:	4620      	mov	r0, r4
240018c0:	ed95 0a00 	vldr	s0, [r5]
240018c4:	f015 fcb6 	bl	24017234 <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
240018c8:	ed95 0a01 	vldr	s0, [r5, #4]
240018cc:	4620      	mov	r0, r4
240018ce:	ee20 0a09 	vmul.f32	s0, s0, s18
240018d2:	f015 fcb3 	bl	2401723c <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
240018d6:	ed95 0a02 	vldr	s0, [r5, #8]
240018da:	4620      	mov	r0, r4
240018dc:	ee20 0a09 	vmul.f32	s0, s0, s18
240018e0:	f015 fcb0 	bl	24017244 <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
240018e4:	edd5 7a03 	vldr	s15, [r5, #12]
240018e8:	4620      	mov	r0, r4
240018ea:	eef4 7aeb 	vcmpe.f32	s15, s23
240018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240018f2:	bfcc      	ite	gt
240018f4:	2101      	movgt	r1, #1
240018f6:	2100      	movle	r1, #0
240018f8:	f015 fca8 	bl	2401724c <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
240018fc:	4620      	mov	r0, r4
240018fe:	eeb0 0a48 	vmov.f32	s0, s16
24001902:	f015 fc1d 	bl	24017140 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001906:	4620      	mov	r0, r4
24001908:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
2400190c:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
2400190e:	f015 fd4f 	bl	240173b0 <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
24001912:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
24001916:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
2400191a:	4543      	cmp	r3, r8
2400191c:	dc8e      	bgt.n	2400183c <audioTickString+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
2400191e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 240019b8 <audioTickString+0x208>
24001922:	eddf 7a26 	vldr	s15, [pc, #152]	; 240019bc <audioTickString+0x20c>
24001926:	eef0 0a40 	vmov.f32	s1, s0
2400192a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 240019c0 <audioTickString+0x210>
2400192e:	eeeb 0a27 	vfma.f32	s1, s22, s15
24001932:	f031 fe09 	bl	24033548 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
24001936:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
2400193a:	4a22      	ldr	r2, [pc, #136]	; (240019c4 <audioTickString+0x214>)
	float omAlpha = 1.0f - alpha;
2400193c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
24001940:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
24001942:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
24001946:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
2400194a:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
2400194e:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
24001954:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001958:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
2400195c:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001960:	ed93 7a00 	vldr	s14, [r3]
24001964:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24001968:	edd2 6a00 	vldr	s13, [r2]
2400196c:	ee20 0a26 	vmul.f32	s0, s0, s13
24001970:	eea7 0a27 	vfma.f32	s0, s14, s15
}
24001974:	ee20 0a29 	vmul.f32	s0, s0, s19
24001978:	46bd      	mov	sp, r7
2400197a:	ecbd 8b0c 	vpop	{d8-d13}
2400197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
24001982:	eeb0 0a6a 	vmov.f32	s0, s21
24001986:	edc6 aa00 	vstr	s21, [r6]
2400198a:	e765      	b.n	24001858 <audioTickString+0xa8>
2400198c:	20005184 	.word	0x20005184
24001990:	200147bc 	.word	0x200147bc
24001994:	2000018c 	.word	0x2000018c
24001998:	00000000 	.word	0x00000000
2400199c:	20005178 	.word	0x20005178
240019a0:	20005368 	.word	0x20005368
240019a4:	20005350 	.word	0x20005350
240019a8:	430c0000 	.word	0x430c0000
240019ac:	42700000 	.word	0x42700000
240019b0:	3dcccccd 	.word	0x3dcccccd
240019b4:	44480000 	.word	0x44480000
240019b8:	423c0000 	.word	0x423c0000
240019bc:	42a00000 	.word	0x42a00000
240019c0:	42fe0000 	.word	0x42fe0000
240019c4:	20000544 	.word	0x20000544
240019c8:	20000052 	.word	0x20000052
240019cc:	200051f8 	.word	0x200051f8
240019d0:	20014700 	.word	0x20014700
240019d4:	20014708 	.word	0x20014708

240019d8 <audioTickString2>:



float  audioTickString2(void)
{
240019d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
240019dc:	4ba8      	ldr	r3, [pc, #672]	; (24001c80 <audioTickString2+0x2a8>)
240019de:	4da9      	ldr	r5, [pc, #676]	; (24001c84 <audioTickString2+0x2ac>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
240019e0:	48a9      	ldr	r0, [pc, #676]	; (24001c88 <audioTickString2+0x2b0>)
240019e2:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 24001cdc <audioTickString2+0x304>
240019e6:	462c      	mov	r4, r5
240019e8:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
240019ec:	ed2d 8b08 	vpush	{d8-d11}
240019f0:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
240019f2:	781b      	ldrb	r3, [r3, #0]
{
240019f4:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
240019f6:	009b      	lsls	r3, r3, #2
240019f8:	3307      	adds	r3, #7
240019fa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
240019fe:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24001a02:	f00f fb1f 	bl	24011044 <tExpSmooth_tick>
24001a06:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
24001a0a:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001a0c:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
24001a0e:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24001a12:	f00f fb17 	bl	24011044 <tExpSmooth_tick>
24001a16:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
24001a1a:	454c      	cmp	r4, r9
24001a1c:	d1f6      	bne.n	24001a0c <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
24001a1e:	4b98      	ldr	r3, [pc, #608]	; (24001c80 <audioTickString2+0x2a8>)
	float temp = 0.0f;
24001a20:	eddf 8a9a 	vldr	s17, [pc, #616]	; 24001c8c <audioTickString2+0x2b4>
	for (int i = 0; i < numStringsThisBoard; i++)
24001a24:	781b      	ldrb	r3, [r3, #0]
24001a26:	2b00      	cmp	r3, #0
24001a28:	f000 80e8 	beq.w	24001bfc <audioTickString2+0x224>
24001a2c:	4b98      	ldr	r3, [pc, #608]	; (24001c90 <audioTickString2+0x2b8>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
24001a2e:	eeb0 aa68 	vmov.f32	s20, s17
24001a32:	617e      	str	r6, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
24001a34:	2600      	movs	r6, #0
24001a36:	60bb      	str	r3, [r7, #8]
24001a38:	4b96      	ldr	r3, [pc, #600]	; (24001c94 <audioTickString2+0x2bc>)
24001a3a:	4c97      	ldr	r4, [pc, #604]	; (24001c98 <audioTickString2+0x2c0>)
24001a3c:	60fb      	str	r3, [r7, #12]
24001a3e:	4b97      	ldr	r3, [pc, #604]	; (24001c9c <audioTickString2+0x2c4>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001a40:	eddf 9a97 	vldr	s19, [pc, #604]	; 24001ca0 <audioTickString2+0x2c8>
24001a44:	607b      	str	r3, [r7, #4]
24001a46:	f8df 8298 	ldr.w	r8, [pc, #664]	; 24001ce0 <audioTickString2+0x308>
24001a4a:	4b96      	ldr	r3, [pc, #600]	; (24001ca4 <audioTickString2+0x2cc>)
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001a4c:	f8df b294 	ldr.w	fp, [pc, #660]	; 24001ce4 <audioTickString2+0x30c>
24001a50:	f8df a294 	ldr.w	sl, [pc, #660]	; 24001ce8 <audioTickString2+0x310>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001a54:	f8df 9294 	ldr.w	r9, [pc, #660]	; 24001cec <audioTickString2+0x314>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001a58:	eddf aa93 	vldr	s21, [pc, #588]	; 24001ca8 <audioTickString2+0x2d0>
24001a5c:	613b      	str	r3, [r7, #16]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001a5e:	68bb      	ldr	r3, [r7, #8]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001a60:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001a62:	eddf ba92 	vldr	s23, [pc, #584]	; 24001cac <audioTickString2+0x2d4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001a66:	ecf3 7a01 	vldmia	r3!, {s15}
24001a6a:	60bb      	str	r3, [r7, #8]
24001a6c:	68fb      	ldr	r3, [r7, #12]
24001a6e:	ecb3 7a01 	vldmia	r3!, {s14}
24001a72:	ee77 7a87 	vadd.f32	s15, s15, s14
24001a76:	60fb      	str	r3, [r7, #12]
			note[i] = 0.0f;
24001a78:	697b      	ldr	r3, [r7, #20]
		if (note[i] < 0.0f)
24001a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
24001a82:	bf54      	ite	pl
24001a84:	edc3 7a00 	vstrpl	s15, [r3]
			note[i] = 0.0f;
24001a88:	ed83 aa00 	vstrmi	s20, [r3]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001a8c:	f011 fc38 	bl	24013300 <tNoise_tick>
24001a90:	4650      	mov	r0, sl
24001a92:	f00f fd5f 	bl	24011554 <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001a96:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
24001a98:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001a9c:	f011 fc30 	bl	24013300 <tNoise_tick>
24001aa0:	4648      	mov	r0, r9
24001aa2:	f00f fd57 	bl	24011554 <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001aa6:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
24001aa8:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001aac:	f00f f852 	bl	24010b54 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001ab0:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
24001ab2:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
24001ab6:	eeb0 0a6a 	vmov.f32	s0, s21
24001aba:	f015 fecd 	bl	24017858 <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
24001abe:	ed95 0a05 	vldr	s0, [r5, #20]
24001ac2:	ee20 0a29 	vmul.f32	s0, s0, s19
24001ac6:	f011 f9c3 	bl	24012e50 <faster_mtof>
24001aca:	4650      	mov	r0, sl
24001acc:	f00f ff48 	bl	24011960 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
24001ad0:	ed95 0a06 	vldr	s0, [r5, #24]
24001ad4:	ee20 0a29 	vmul.f32	s0, s0, s19
24001ad8:	f011 f9ba 	bl	24012e50 <faster_mtof>
24001adc:	4648      	mov	r0, r9
24001ade:	f00f ff3f 	bl	24011960 <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
24001ae2:	ed95 0a07 	vldr	s0, [r5, #28]
24001ae6:	4620      	mov	r0, r4
24001ae8:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001aec:	f015 ff42 	bl	24017974 <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
24001af0:	ed95 0a08 	vldr	s0, [r5, #32]
24001af4:	4620      	mov	r0, r4
24001af6:	ee20 0a2b 	vmul.f32	s0, s0, s23
24001afa:	f015 ff4f 	bl	2401799c <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
24001afe:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
24001b02:	4620      	mov	r0, r4
24001b04:	f015 fec8 	bl	24017898 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
24001b08:	ed95 0a02 	vldr	s0, [r5, #8]
24001b0c:	4620      	mov	r0, r4
24001b0e:	f015 fe7f 	bl	24017810 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
24001b12:	eeb0 0a6b 	vmov.f32	s0, s23
24001b16:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
24001b1a:	4620      	mov	r0, r4
24001b1c:	eddf 7a64 	vldr	s15, [pc, #400]	; 24001cb0 <audioTickString2+0x2d8>
24001b20:	eea7 0a27 	vfma.f32	s0, s14, s15
24001b24:	f015 fe86 	bl	24017834 <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001b28:	697b      	ldr	r3, [r7, #20]
24001b2a:	ed9f 1a62 	vldr	s2, [pc, #392]	; 24001cb4 <audioTickString2+0x2dc>
24001b2e:	ecf3 0a01 	vldmia	r3!, {s1}
24001b32:	ed9f 0a61 	vldr	s0, [pc, #388]	; 24001cb8 <audioTickString2+0x2e0>
24001b36:	617b      	str	r3, [r7, #20]
24001b38:	f031 fd06 	bl	24033548 <__LEAF_clip_veneer>
24001b3c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 24001cbc <audioTickString2+0x2e4>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth * invMapping[i] ;

		tLivingString2_setFreq(&strings[i], finalFreq);
24001b40:	4620      	mov	r0, r4
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001b42:	eddf 7a5f 	vldr	s15, [pc, #380]	; 24001cc0 <audioTickString2+0x2e8>
		float finalFreq = freqToSmooth * invMapping[i] ;
24001b46:	687b      	ldr	r3, [r7, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
24001b48:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001b4c:	495d      	ldr	r1, [pc, #372]	; (24001cc4 <audioTickString2+0x2ec>)
		float finalFreq = freqToSmooth * invMapping[i] ;
24001b4e:	ecb3 0a01 	vldmia	r3!, {s0}
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float finalFreq = freqToSmooth * invMapping[i] ;
24001b56:	607b      	str	r3, [r7, #4]
		int tempIndexI = (int)tempIndexF;
24001b58:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
24001b60:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
24001b64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001b68:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001b6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001b6e:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
24001b72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001b76:	f3c2 020e 	ubfx	r2, r2, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
24001b7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001b7e:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
24001b82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
24001b86:	ed93 6a00 	vldr	s12, [r3]
24001b8a:	ee67 7a86 	vmul.f32	s15, s15, s12
24001b8e:	eee7 7a26 	vfma.f32	s15, s14, s13
		tLivingString2_setFreq(&strings[i], finalFreq);
24001b92:	ee20 0a27 	vmul.f32	s0, s0, s15
24001b96:	f015 fe1d 	bl	240177d4 <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
24001b9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24001b9e:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001ba2:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001ba4:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
24001ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
24001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
24001bb0:	bfc8      	it	gt
24001bb2:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
24001bb6:	f015 fe61 	bl	2401787c <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
24001bba:	ee28 0a0b 	vmul.f32	s0, s16, s22
24001bbe:	4620      	mov	r0, r4
24001bc0:	f015 ff0e 	bl	240179e0 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
24001bc4:	693b      	ldr	r3, [r7, #16]
24001bc6:	eca3 aa01 	vstmia	r3!, {s20}
24001bca:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
24001bcc:	2e00      	cmp	r6, #0
24001bce:	d14f      	bne.n	24001c70 <audioTickString2+0x298>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001bd0:	4b34      	ldr	r3, [pc, #208]	; (24001ca4 <audioTickString2+0x2cc>)
24001bd2:	edd3 7a01 	vldr	s15, [r3, #4]
24001bd6:	eee9 7a00 	vfma.f32	s15, s18, s0
24001bda:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
24001bde:	4b28      	ldr	r3, [pc, #160]	; (24001c80 <audioTickString2+0x2a8>)
24001be0:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
24001be2:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
24001be6:	3404      	adds	r4, #4
24001be8:	781b      	ldrb	r3, [r3, #0]
24001bea:	f108 0804 	add.w	r8, r8, #4
24001bee:	42b3      	cmp	r3, r6
24001bf0:	f73f af35 	bgt.w	24001a5e <audioTickString2+0x86>
24001bf4:	eddf 7a34 	vldr	s15, [pc, #208]	; 24001cc8 <audioTickString2+0x2f0>
24001bf8:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24001bfc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 24001ccc <audioTickString2+0x2f4>
24001c00:	eddf 7a33 	vldr	s15, [pc, #204]	; 24001cd0 <audioTickString2+0x2f8>
24001c04:	eef0 0a40 	vmov.f32	s1, s0
24001c08:	ed9f 1a32 	vldr	s2, [pc, #200]	; 24001cd4 <audioTickString2+0x2fc>
24001c0c:	eee9 0a27 	vfma.f32	s1, s18, s15
24001c10:	f031 fc9a 	bl	24033548 <__LEAF_clip_veneer>
24001c14:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
24001c18:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001c1c:	4a2e      	ldr	r2, [pc, #184]	; (24001cd8 <audioTickString2+0x300>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001c1e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
24001c22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24001c26:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
24001c2a:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001c2e:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
24001c30:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
24001c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
24001c38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
24001c3c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001c40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
24001c44:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001c48:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
24001c4c:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
24001c50:	edd3 6a00 	vldr	s13, [r3]
24001c54:	ee60 0aa7 	vmul.f32	s1, s1, s15
24001c58:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
24001c5c:	ee60 0aa8 	vmul.f32	s1, s1, s17
24001c60:	f031 fc72 	bl	24033548 <__LEAF_clip_veneer>
}
24001c64:	371c      	adds	r7, #28
24001c66:	46bd      	mov	sp, r7
24001c68:	ecbd 8b08 	vpop	{d8-d11}
24001c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
24001c70:	4b0c      	ldr	r3, [pc, #48]	; (24001ca4 <audioTickString2+0x2cc>)
24001c72:	edd3 7a00 	vldr	s15, [r3]
24001c76:	eee9 7a00 	vfma.f32	s15, s18, s0
24001c7a:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
24001c7e:	e7ae      	b.n	24001bde <audioTickString2+0x206>
24001c80:	20000052 	.word	0x20000052
24001c84:	20005184 	.word	0x20005184
24001c88:	200147bc 	.word	0x200147bc
24001c8c:	00000000 	.word	0x00000000
24001c90:	20014700 	.word	0x20014700
24001c94:	20014708 	.word	0x20014708
24001c98:	20014730 	.word	0x20014730
24001c9c:	20005178 	.word	0x20005178
24001ca0:	43000000 	.word	0x43000000
24001ca4:	2000561c 	.word	0x2000561c
24001ca8:	3f7ff972 	.word	0x3f7ff972
24001cac:	3dcccccd 	.word	0x3dcccccd
24001cb0:	3f4ccccd 	.word	0x3f4ccccd
24001cb4:	43480000 	.word	0x43480000
24001cb8:	c3480000 	.word	0xc3480000
24001cbc:	42c80000 	.word	0x42c80000
24001cc0:	46800000 	.word	0x46800000
24001cc4:	3001a000 	.word	0x3001a000
24001cc8:	3f666666 	.word	0x3f666666
24001ccc:	423c0000 	.word	0x423c0000
24001cd0:	42a00000 	.word	0x42a00000
24001cd4:	42fe0000 	.word	0x42fe0000
24001cd8:	20000544 	.word	0x20000544
24001cdc:	200051f8 	.word	0x200051f8
24001ce0:	20005078 	.word	0x20005078
24001ce4:	200054b0 	.word	0x200054b0
24001ce8:	200054c8 	.word	0x200054c8
24001cec:	200054cc 	.word	0x200054cc

24001cf0 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001cf0:	4b05      	ldr	r3, [pc, #20]	; (24001d08 <lfoSawSquareTick+0x18>)
24001cf2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001cf6:	b510      	push	{r4, lr}
24001cf8:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
24001cfa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001cfe:	f014 ff13 	bl	24016b28 <tSawSquareLFO_tick>
24001d02:	ed84 0a00 	vstr	s0, [r4]
}
24001d06:	bd10      	pop	{r4, pc}
24001d08:	200052c0 	.word	0x200052c0

24001d0c <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001d0c:	4b05      	ldr	r3, [pc, #20]	; (24001d24 <lfoSineTriTick+0x18>)
24001d0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d12:	b510      	push	{r4, lr}
24001d14:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
24001d16:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d1a:	f015 f847 	bl	24016dac <tSineTriLFO_tick>
24001d1e:	ed84 0a00 	vstr	s0, [r4]
}
24001d22:	bd10      	pop	{r4, pc}
24001d24:	20005310 	.word	0x20005310

24001d28 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
24001d28:	4b05      	ldr	r3, [pc, #20]	; (24001d40 <lfoSineTick+0x18>)
24001d2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d2e:	b510      	push	{r4, lr}
24001d30:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
24001d32:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d36:	f011 fa8f 	bl	24013258 <tCycle_tick>
24001d3a:	ed84 0a00 	vstr	s0, [r4]
}
24001d3e:	bd10      	pop	{r4, pc}
24001d40:	200052f0 	.word	0x200052f0

24001d44 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001d44:	4b05      	ldr	r3, [pc, #20]	; (24001d5c <lfoTriTick+0x18>)
24001d46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d4a:	b510      	push	{r4, lr}
24001d4c:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
24001d4e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d52:	f014 ffaf 	bl	24016cb4 <tTriLFO_tick>
24001d56:	ed84 0a00 	vstr	s0, [r4]
}
24001d5a:	bd10      	pop	{r4, pc}
24001d5c:	20005330 	.word	0x20005330

24001d60 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001d60:	4b08      	ldr	r3, [pc, #32]	; (24001d84 <lfoSawTick+0x24>)
24001d62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d66:	b510      	push	{r4, lr}
24001d68:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
24001d6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d6e:	f014 fd5d 	bl	2401682c <tIntPhasor_tick>
24001d72:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24001d76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24001d7a:	eee0 7a07 	vfma.f32	s15, s0, s14
24001d7e:	edc4 7a00 	vstr	s15, [r4]
}
24001d82:	bd10      	pop	{r4, pc}
24001d84:	200052a0 	.word	0x200052a0

24001d88 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001d88:	4b05      	ldr	r3, [pc, #20]	; (24001da0 <lfoPulseTick+0x18>)
24001d8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
24001d8e:	b510      	push	{r4, lr}
24001d90:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
24001d92:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24001d96:	f014 fe17 	bl	240169c8 <tSquareLFO_tick>
24001d9a:	ed84 0a00 	vstr	s0, [r4]
}
24001d9e:	bd10      	pop	{r4, pc}
24001da0:	20005280 	.word	0x20005280

24001da4 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
24001da4:	4b03      	ldr	r3, [pc, #12]	; (24001db4 <lfoSawSquareSetRate+0x10>)
24001da6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001daa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001dae:	f014 befd 	b.w	24016bac <tSawSquareLFO_setFreq>
24001db2:	bf00      	nop
24001db4:	200052c0 	.word	0x200052c0

24001db8 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
24001db8:	4b03      	ldr	r3, [pc, #12]	; (24001dc8 <lfoSineTriSetRate+0x10>)
24001dba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001dbe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001dc2:	f015 b83f 	b.w	24016e44 <tSineTriLFO_setFreq>
24001dc6:	bf00      	nop
24001dc8:	20005310 	.word	0x20005310

24001dcc <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
24001dcc:	4b03      	ldr	r3, [pc, #12]	; (24001ddc <lfoSineSetRate+0x10>)
24001dce:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001dd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001dd6:	f011 ba65 	b.w	240132a4 <tCycle_setFreq>
24001dda:	bf00      	nop
24001ddc:	200052f0 	.word	0x200052f0

24001de0 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
24001de0:	4b03      	ldr	r3, [pc, #12]	; (24001df0 <lfoTriSetRate+0x10>)
24001de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001dea:	f014 bf7d 	b.w	24016ce8 <tTriLFO_setFreq>
24001dee:	bf00      	nop
24001df0:	20005330 	.word	0x20005330

24001df4 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
24001df4:	4b03      	ldr	r3, [pc, #12]	; (24001e04 <lfoSawSetRate+0x10>)
24001df6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001dfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001dfe:	f014 bd25 	b.w	2401684c <tIntPhasor_setFreq>
24001e02:	bf00      	nop
24001e04:	200052a0 	.word	0x200052a0

24001e08 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
24001e08:	4b03      	ldr	r3, [pc, #12]	; (24001e18 <lfoPulseSetRate+0x10>)
24001e0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e12:	f014 bdfd 	b.w	24016a10 <tSquareLFO_setFreq>
24001e16:	bf00      	nop
24001e18:	20005280 	.word	0x20005280

24001e1c <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
24001e1c:	4b03      	ldr	r3, [pc, #12]	; (24001e2c <lfoSawSquareSetPhase+0x10>)
24001e1e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e26:	f014 bee5 	b.w	24016bf4 <tSawSquareLFO_setPhase>
24001e2a:	bf00      	nop
24001e2c:	200052c0 	.word	0x200052c0

24001e30 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
24001e30:	4b03      	ldr	r3, [pc, #12]	; (24001e40 <lfoSineTriSetPhase+0x10>)
24001e32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e3a:	f015 b81b 	b.w	24016e74 <tSineTriLFO_setPhase>
24001e3e:	bf00      	nop
24001e40:	20005310 	.word	0x20005310

24001e44 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
24001e44:	4b03      	ldr	r3, [pc, #12]	; (24001e54 <lfoSineSetPhase+0x10>)
24001e46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e4e:	f011 ba35 	b.w	240132bc <tCycle_setPhase>
24001e52:	bf00      	nop
24001e54:	200052f0 	.word	0x200052f0

24001e58 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
24001e58:	4b03      	ldr	r3, [pc, #12]	; (24001e68 <lfoTriSetPhase+0x10>)
24001e5a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e62:	f014 bf4d 	b.w	24016d00 <tTriLFO_setPhase>
24001e66:	bf00      	nop
24001e68:	20005330 	.word	0x20005330

24001e6c <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
24001e6c:	4b03      	ldr	r3, [pc, #12]	; (24001e7c <lfoSawSetPhase+0x10>)
24001e6e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e76:	f014 bcf5 	b.w	24016864 <tIntPhasor_setPhase>
24001e7a:	bf00      	nop
24001e7c:	200052a0 	.word	0x200052a0

24001e80 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
24001e80:	4b03      	ldr	r3, [pc, #12]	; (24001e90 <lfoPulseSetPhase+0x10>)
24001e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e8a:	f014 bdf9 	b.w	24016a80 <tSquareLFO_setPhase>
24001e8e:	bf00      	nop
24001e90:	20005280 	.word	0x20005280

24001e94 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
24001e94:	4b03      	ldr	r3, [pc, #12]	; (24001ea4 <lfoSawSquareSetShape+0x10>)
24001e96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001e9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001e9e:	f014 bedb 	b.w	24016c58 <tSawSquareLFO_setShape>
24001ea2:	bf00      	nop
24001ea4:	200052c0 	.word	0x200052c0

24001ea8 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
24001ea8:	4b03      	ldr	r3, [pc, #12]	; (24001eb8 <lfoSineTriSetShape+0x10>)
24001eaa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001eb2:	f014 bff7 	b.w	24016ea4 <tSineTriLFO_setShape>
24001eb6:	bf00      	nop
24001eb8:	20005310 	.word	0x20005310

24001ebc <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
24001ebc:	4770      	bx	lr
24001ebe:	bf00      	nop

24001ec0 <lfoTriSetShape>:
24001ec0:	4770      	bx	lr
24001ec2:	bf00      	nop

24001ec4 <lfoSawSetShape>:
24001ec4:	4770      	bx	lr
24001ec6:	bf00      	nop

24001ec8 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
24001ec8:	4b03      	ldr	r3, [pc, #12]	; (24001ed8 <lfoPulseSetShape+0x10>)
24001eca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24001ece:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24001ed2:	f014 bdb5 	b.w	24016a40 <tSquareLFO_setPulseWidth>
24001ed6:	bf00      	nop
24001ed8:	20005280 	.word	0x20005280

24001edc <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001edc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001ee0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001f14 <FXLowpassParam1+0x38>
24001ee4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001f18 <FXLowpassParam1+0x3c>
24001ee8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24001f1c <FXLowpassParam1+0x40>
24001eec:	eee0 7a07 	vfma.f32	s15, s0, s14
24001ef0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24001f20 <FXLowpassParam1+0x44>
{
24001ef4:	b538      	push	{r3, r4, r5, lr}
24001ef6:	4605      	mov	r5, r0
24001ef8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001efa:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001efe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f02:	f031 fb21 	bl	24033548 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001f06:	4807      	ldr	r0, [pc, #28]	; (24001f24 <FXLowpassParam1+0x48>)
24001f08:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
24001f10:	f00f ba5e 	b.w	240113d0 <tSVF_setFreqFast>
24001f14:	429a0000 	.word	0x429a0000
24001f18:	420fb824 	.word	0x420fb824
24001f1c:	457ff000 	.word	0x457ff000
24001f20:	00000000 	.word	0x00000000
24001f24:	20000964 	.word	0x20000964

24001f28 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f28:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001f2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001f60 <FXHighpassParam1+0x38>
24001f30:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001f64 <FXHighpassParam1+0x3c>
24001f34:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24001f68 <FXHighpassParam1+0x40>
24001f38:	eee0 7a07 	vfma.f32	s15, s0, s14
24001f3c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24001f6c <FXHighpassParam1+0x44>
{
24001f40:	b538      	push	{r3, r4, r5, lr}
24001f42:	4605      	mov	r5, r0
24001f44:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f46:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001f4a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f4e:	f031 fafb 	bl	24033548 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001f52:	4807      	ldr	r0, [pc, #28]	; (24001f70 <FXHighpassParam1+0x48>)
24001f54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
24001f5c:	f00f ba38 	b.w	240113d0 <tSVF_setFreqFast>
24001f60:	429a0000 	.word	0x429a0000
24001f64:	420fb824 	.word	0x420fb824
24001f68:	457ff000 	.word	0x457ff000
24001f6c:	00000000 	.word	0x00000000
24001f70:	20000944 	.word	0x20000944

24001f74 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f74:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001f78:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001fac <FXBandpassParam1+0x38>
24001f7c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001fb0 <FXBandpassParam1+0x3c>
24001f80:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24001fb4 <FXBandpassParam1+0x40>
24001f84:	eee0 7a07 	vfma.f32	s15, s0, s14
24001f88:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24001fb8 <FXBandpassParam1+0x44>
{
24001f8c:	b538      	push	{r3, r4, r5, lr}
24001f8e:	4605      	mov	r5, r0
24001f90:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f92:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
24001f96:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001f9a:	f031 fad5 	bl	24033548 <__LEAF_clip_veneer>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
24001f9e:	4807      	ldr	r0, [pc, #28]	; (24001fbc <FXBandpassParam1+0x48>)
24001fa0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
24001fa8:	f00f ba12 	b.w	240113d0 <tSVF_setFreqFast>
24001fac:	429a0000 	.word	0x429a0000
24001fb0:	420fb824 	.word	0x420fb824
24001fb4:	457ff000 	.word	0x457ff000
24001fb8:	00000000 	.word	0x00000000
24001fbc:	20000904 	.word	0x20000904

24001fc0 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fc0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24001fc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24001ff8 <FXDiodeParam1+0x38>
24001fc8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24001ffc <FXDiodeParam1+0x3c>
24001fcc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002000 <FXDiodeParam1+0x40>
24001fd0:	eee0 7a07 	vfma.f32	s15, s0, s14
24001fd4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002004 <FXDiodeParam1+0x44>
{
24001fd8:	b538      	push	{r3, r4, r5, lr}
24001fda:	4605      	mov	r5, r0
24001fdc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fde:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24001fe2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24001fe6:	f031 faaf 	bl	24033548 <__LEAF_clip_veneer>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24001fea:	4807      	ldr	r0, [pc, #28]	; (24002008 <FXDiodeParam1+0x48>)
24001fec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24001ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
24001ff4:	f010 bb04 	b.w	24012600 <tDiodeFilter_setFreqFast>
24001ff8:	429a0000 	.word	0x429a0000
24001ffc:	420fb824 	.word	0x420fb824
24002000:	457ff000 	.word	0x457ff000
24002004:	00000000 	.word	0x00000000
24002008:	20000924 	.word	0x20000924

2400200c <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400200c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002010:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002044 <FXPeakParam1+0x38>
24002014:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002048 <FXPeakParam1+0x3c>
24002018:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2400204c <FXPeakParam1+0x40>
2400201c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002020:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002050 <FXPeakParam1+0x44>
{
24002024:	b538      	push	{r3, r4, r5, lr}
24002026:	4605      	mov	r5, r0
24002028:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400202a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
2400202e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002032:	f031 fa89 	bl	24033548 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
24002036:	4807      	ldr	r0, [pc, #28]	; (24002054 <FXPeakParam1+0x48>)
24002038:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400203c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
24002040:	f00f bca6 	b.w	24011990 <tVZFilter_setFreqFast>
24002044:	429a0000 	.word	0x429a0000
24002048:	420fb824 	.word	0x420fb824
2400204c:	457ff000 	.word	0x457ff000
24002050:	00000000 	.word	0x00000000
24002054:	200008e4 	.word	0x200008e4

24002058 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002058:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
2400205c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002090 <FXLowShelfParam1+0x38>
24002060:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002094 <FXLowShelfParam1+0x3c>
24002064:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002098 <FXLowShelfParam1+0x40>
24002068:	eee0 7a07 	vfma.f32	s15, s0, s14
2400206c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2400209c <FXLowShelfParam1+0x44>
{
24002070:	b538      	push	{r3, r4, r5, lr}
24002072:	4605      	mov	r5, r0
24002074:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002076:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
2400207a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400207e:	f031 fa63 	bl	24033548 <__LEAF_clip_veneer>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
24002082:	4807      	ldr	r0, [pc, #28]	; (240020a0 <FXLowShelfParam1+0x48>)
24002084:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
2400208c:	f00f bc80 	b.w	24011990 <tVZFilter_setFreqFast>
24002090:	429a0000 	.word	0x429a0000
24002094:	420fb824 	.word	0x420fb824
24002098:	457ff000 	.word	0x457ff000
2400209c:	00000000 	.word	0x00000000
240020a0:	200008c4 	.word	0x200008c4

240020a4 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020a4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240020a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240020dc <FXHighShelfParam1+0x38>
240020ac:	eddf 0a0c 	vldr	s1, [pc, #48]	; 240020e0 <FXHighShelfParam1+0x3c>
240020b0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 240020e4 <FXHighShelfParam1+0x40>
240020b4:	eee0 7a07 	vfma.f32	s15, s0, s14
240020b8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 240020e8 <FXHighShelfParam1+0x44>
{
240020bc:	b538      	push	{r3, r4, r5, lr}
240020be:	4605      	mov	r5, r0
240020c0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020c2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
240020c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020ca:	f031 fa3d 	bl	24033548 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
240020ce:	4807      	ldr	r0, [pc, #28]	; (240020ec <FXHighShelfParam1+0x48>)
240020d0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240020d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
240020d8:	f00f bc5a 	b.w	24011990 <tVZFilter_setFreqFast>
240020dc:	429a0000 	.word	0x429a0000
240020e0:	420fb824 	.word	0x420fb824
240020e4:	457ff000 	.word	0x457ff000
240020e8:	00000000 	.word	0x00000000
240020ec:	200008a4 	.word	0x200008a4

240020f0 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240020f0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240020f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002128 <FXNotchParam1+0x38>
240020f8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2400212c <FXNotchParam1+0x3c>
240020fc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 24002130 <FXNotchParam1+0x40>
24002100:	eee0 7a07 	vfma.f32	s15, s0, s14
24002104:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002134 <FXNotchParam1+0x44>
{
24002108:	b538      	push	{r3, r4, r5, lr}
2400210a:	4605      	mov	r5, r0
2400210c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400210e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
24002112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002116:	f031 fa17 	bl	24033548 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
2400211a:	4807      	ldr	r0, [pc, #28]	; (24002138 <FXNotchParam1+0x48>)
2400211c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
24002124:	f00f bc34 	b.w	24011990 <tVZFilter_setFreqFast>
24002128:	429a0000 	.word	0x429a0000
2400212c:	420fb824 	.word	0x420fb824
24002130:	457ff000 	.word	0x457ff000
24002134:	00000000 	.word	0x00000000
24002138:	20000884 	.word	0x20000884

2400213c <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400213c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24002140:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24002174 <FXLadderParam1+0x38>
24002144:	eddf 0a0c 	vldr	s1, [pc, #48]	; 24002178 <FXLadderParam1+0x3c>
24002148:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2400217c <FXLadderParam1+0x40>
2400214c:	eee0 7a07 	vfma.f32	s15, s0, s14
24002150:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24002180 <FXLadderParam1+0x44>
{
24002154:	b538      	push	{r3, r4, r5, lr}
24002156:	4605      	mov	r5, r0
24002158:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400215a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
2400215e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24002162:	f031 f9f1 	bl	24033548 <__LEAF_clip_veneer>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
24002166:	4807      	ldr	r0, [pc, #28]	; (24002184 <FXLadderParam1+0x48>)
24002168:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400216c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
24002170:	f010 bbe4 	b.w	2401293c <tLadderFilter_setFreqFast>
24002174:	429a0000 	.word	0x429a0000
24002178:	420fb824 	.word	0x420fb824
2400217c:	457ff000 	.word	0x457ff000
24002180:	00000000 	.word	0x00000000
24002184:	20000864 	.word	0x20000864

24002188 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002188:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
2400218c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240021b4 <FXPeakParam2+0x2c>
{
24002190:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002192:	eee0 7a07 	vfma.f32	s15, s0, s14
{
24002196:	4605      	mov	r5, r0
24002198:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400219a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
2400219e:	eeb0 0a67 	vmov.f32	s0, s15
240021a2:	f010 fec3 	bl	24012f2c <fasterdbtoa>
240021a6:	4804      	ldr	r0, [pc, #16]	; (240021b8 <FXPeakParam2+0x30>)
240021a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240021ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021b0:	f00f bd4c 	b.w	24011c4c <tVZFilter_setGain>
240021b4:	42480000 	.word	0x42480000
240021b8:	200008e4 	.word	0x200008e4

240021bc <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021bc:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240021c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240021e8 <FXLowShelfParam2+0x2c>
{
240021c4:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021c6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240021ca:	4605      	mov	r5, r0
240021cc:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
240021d2:	eeb0 0a67 	vmov.f32	s0, s15
240021d6:	f010 fea9 	bl	24012f2c <fasterdbtoa>
240021da:	4804      	ldr	r0, [pc, #16]	; (240021ec <FXLowShelfParam2+0x30>)
240021dc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240021e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021e4:	f00f bd32 	b.w	24011c4c <tVZFilter_setGain>
240021e8:	42480000 	.word	0x42480000
240021ec:	200008c4 	.word	0x200008c4

240021f0 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021f0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240021f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2400221c <FXHighShelfParam2+0x2c>
{
240021f8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
240021fa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240021fe:	4605      	mov	r5, r0
24002200:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002202:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24002206:	eeb0 0a67 	vmov.f32	s0, s15
2400220a:	f010 fe8f 	bl	24012f2c <fasterdbtoa>
2400220e:	4804      	ldr	r0, [pc, #16]	; (24002220 <FXHighShelfParam2+0x30>)
24002210:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24002214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002218:	f00f bd18 	b.w	24011c4c <tVZFilter_setGain>
2400221c:	42480000 	.word	0x42480000
24002220:	200008a4 	.word	0x200008a4

24002224 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002224:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24002228:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24002250 <FXNotchParam2+0x2c>
{
2400222c:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400222e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
24002232:	4605      	mov	r5, r0
24002234:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
24002236:	eb04 0445 	add.w	r4, r4, r5, lsl #1
2400223a:	eeb0 0a67 	vmov.f32	s0, s15
2400223e:	f010 fe75 	bl	24012f2c <fasterdbtoa>
24002242:	4804      	ldr	r0, [pc, #16]	; (24002254 <FXNotchParam2+0x30>)
24002244:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
24002248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
2400224c:	f00f bcfe 	b.w	24011c4c <tVZFilter_setGain>
24002250:	42480000 	.word	0x42480000
24002254:	20000884 	.word	0x20000884

24002258 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
24002258:	4b03      	ldr	r3, [pc, #12]	; (24002268 <FXLowpassParam3+0x10>)
2400225a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400225e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002262:	f00f b8eb 	b.w	2401143c <tSVF_setQ>
24002266:	bf00      	nop
24002268:	20000964 	.word	0x20000964

2400226c <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
2400226c:	4b03      	ldr	r3, [pc, #12]	; (2400227c <FXHighpassParam3+0x10>)
2400226e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002272:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002276:	f00f b8e1 	b.w	2401143c <tSVF_setQ>
2400227a:	bf00      	nop
2400227c:	20000944 	.word	0x20000944

24002280 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
24002280:	4b03      	ldr	r3, [pc, #12]	; (24002290 <FXBandpassParam3+0x10>)
24002282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
24002286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400228a:	f00f b8d7 	b.w	2401143c <tSVF_setQ>
2400228e:	bf00      	nop
24002290:	20000904 	.word	0x20000904

24002294 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
24002294:	4b03      	ldr	r3, [pc, #12]	; (240022a4 <FXDiodeParam3+0x10>)
24002296:	eb01 0040 	add.w	r0, r1, r0, lsl #1
2400229a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400229e:	f010 b9cf 	b.w	24012640 <tDiodeFilter_setQ>
240022a2:	bf00      	nop
240022a4:	20000924 	.word	0x20000924

240022a8 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
240022a8:	4b03      	ldr	r3, [pc, #12]	; (240022b8 <FXPeakParam3+0x10>)
240022aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240022b2:	f00f bce7 	b.w	24011c84 <tVZFilter_setResonance>
240022b6:	bf00      	nop
240022b8:	200008e4 	.word	0x200008e4

240022bc <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
240022bc:	4b03      	ldr	r3, [pc, #12]	; (240022cc <FXLowShelfParam3+0x10>)
240022be:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240022c6:	f00f bcdd 	b.w	24011c84 <tVZFilter_setResonance>
240022ca:	bf00      	nop
240022cc:	200008c4 	.word	0x200008c4

240022d0 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
240022d0:	4b03      	ldr	r3, [pc, #12]	; (240022e0 <FXHighShelfParam3+0x10>)
240022d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240022da:	f00f bcd3 	b.w	24011c84 <tVZFilter_setResonance>
240022de:	bf00      	nop
240022e0:	200008a4 	.word	0x200008a4

240022e4 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
240022e4:	4b03      	ldr	r3, [pc, #12]	; (240022f4 <FXNotchParam3+0x10>)
240022e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240022ee:	f00f bcc9 	b.w	24011c84 <tVZFilter_setResonance>
240022f2:	bf00      	nop
240022f4:	20000884 	.word	0x20000884

240022f8 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
240022f8:	4b03      	ldr	r3, [pc, #12]	; (24002308 <FXLadderParam3+0x10>)
240022fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
240022fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24002302:	f010 bb3f 	b.w	24012984 <tLadderFilter_setQ>
24002306:	bf00      	nop
24002308:	20000864 	.word	0x20000864

2400230c <audioTickL>:
{
2400230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
24002310:	2100      	movs	r1, #0
24002312:	48c5      	ldr	r0, [pc, #788]	; (24002628 <audioTickL+0x31c>)
	uint32_t tempCount5 = DWT->CYCCNT;
24002314:	4ac5      	ldr	r2, [pc, #788]	; (2400262c <audioTickL+0x320>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
24002316:	4bc6      	ldr	r3, [pc, #792]	; (24002630 <audioTickL+0x324>)
24002318:	4dc6      	ldr	r5, [pc, #792]	; (24002634 <audioTickL+0x328>)
2400231a:	4ec7      	ldr	r6, [pc, #796]	; (24002638 <audioTickL+0x32c>)
2400231c:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24002320:	4cc6      	ldr	r4, [pc, #792]	; (2400263c <audioTickL+0x330>)
{
24002322:	ed2d 8b0a 	vpush	{d8-d12}
24002326:	b08d      	sub	sp, #52	; 0x34
	interrupted = 0;
24002328:	7001      	strb	r1, [r0, #0]
{
2400232a:	af00      	add	r7, sp, #0
	uint32_t tempCount5 = DWT->CYCCNT;
2400232c:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
2400232e:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
24002332:	60ba      	str	r2, [r7, #8]
	tickMappings();
24002334:	f031 f930 	bl	24033598 <__tickMappings_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
24002338:	48c1      	ldr	r0, [pc, #772]	; (24002640 <audioTickL+0x334>)
2400233a:	f00e fe83 	bl	24011044 <tExpSmooth_tick>
2400233e:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
24002342:	4630      	mov	r0, r6
24002344:	f00e fe7e 	bl	24011044 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
24002348:	4bbe      	ldr	r3, [pc, #760]	; (24002644 <audioTickL+0x338>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
2400234a:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
2400234e:	781b      	ldrb	r3, [r3, #0]
24002350:	b12b      	cbz	r3, 2400235e <audioTickL+0x52>
24002352:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
24002354:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
24002358:	d001      	beq.n	2400235e <audioTickL+0x52>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
2400235a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
2400235e:	4545      	cmp	r5, r8
24002360:	f106 0604 	add.w	r6, r6, #4
24002364:	f104 0408 	add.w	r4, r4, #8
24002368:	d1eb      	bne.n	24002342 <audioTickL+0x36>
	float note[numStringsThisBoard];
2400236a:	009a      	lsls	r2, r3, #2
2400236c:	3207      	adds	r2, #7
2400236e:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
24002372:	ebad 0d02 	sub.w	sp, sp, r2
24002376:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
24002378:	2b00      	cmp	r3, #0
2400237a:	f000 823b 	beq.w	240027f4 <audioTickL+0x4e8>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
2400237e:	ed9f aab2 	vldr	s20, [pc, #712]	; 24002648 <audioTickL+0x33c>
24002382:	2300      	movs	r3, #0
24002384:	eddf 7ab1 	vldr	s15, [pc, #708]	; 2400264c <audioTickL+0x340>
24002388:	eeb0 ba4a 	vmov.f32	s22, s20
2400238c:	617a      	str	r2, [r7, #20]
2400238e:	4ab0      	ldr	r2, [pc, #704]	; (24002650 <audioTickL+0x344>)
	for (int v = 0; v < numStringsThisBoard; v++)
24002390:	469a      	mov	sl, r3
	float masterSample = 0.0f;
24002392:	eddf 8ab0 	vldr	s17, [pc, #704]	; 24002654 <audioTickL+0x348>
24002396:	61ba      	str	r2, [r7, #24]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
24002398:	eea8 ba27 	vfma.f32	s22, s16, s15
2400239c:	4aae      	ldr	r2, [pc, #696]	; (24002658 <audioTickL+0x34c>)
		if (note[v] < 0.0f)
2400239e:	eeb0 9a68 	vmov.f32	s18, s17
240023a2:	f8df b30c 	ldr.w	fp, [pc, #780]	; 240026b0 <audioTickL+0x3a4>
240023a6:	623a      	str	r2, [r7, #32]
240023a8:	4aac      	ldr	r2, [pc, #688]	; (2400265c <audioTickL+0x350>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240023aa:	eddf aaad 	vldr	s21, [pc, #692]	; 24002660 <audioTickL+0x354>
240023ae:	613a      	str	r2, [r7, #16]
240023b0:	4aac      	ldr	r2, [pc, #688]	; (24002664 <audioTickL+0x358>)
240023b2:	627b      	str	r3, [r7, #36]	; 0x24
240023b4:	61fa      	str	r2, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240023b6:	69bb      	ldr	r3, [r7, #24]
240023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240023ba:	ecb3 8a01 	vldmia	r3!, {s16}
240023be:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
240023c0:	4ba9      	ldr	r3, [pc, #676]	; (24002668 <audioTickL+0x35c>)
240023c2:	edd3 7a00 	vldr	s15, [r3]
240023c6:	4ba9      	ldr	r3, [pc, #676]	; (2400266c <audioTickL+0x360>)
240023c8:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240023cc:	4ba8      	ldr	r3, [pc, #672]	; (24002670 <audioTickL+0x364>)
240023ce:	4413      	add	r3, r2
240023d0:	edd3 6a00 	vldr	s13, [r3]
240023d4:	697b      	ldr	r3, [r7, #20]
240023d6:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
240023da:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240023de:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
240023e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
240023e6:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
240023e8:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
240023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
240023f0:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
240023f4:	d503      	bpl.n	240023fe <audioTickL+0xf2>
			note[v] = 0.0f;
240023f6:	eeb0 8a49 	vmov.f32	s16, s18
240023fa:	ed03 9a01 	vstr	s18, [r3, #-4]
	interruptChecker = 0;
240023fe:	2300      	movs	r3, #0
24002400:	4a9c      	ldr	r2, [pc, #624]	; (24002674 <audioTickL+0x368>)
24002402:	f1ab 0520 	sub.w	r5, fp, #32
24002406:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
24002408:	4b88      	ldr	r3, [pc, #544]	; (2400262c <audioTickL+0x320>)
2400240a:	462e      	mov	r6, r5
2400240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2400240e:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
24002410:	4b99      	ldr	r3, [pc, #612]	; (24002678 <audioTickL+0x36c>)
24002412:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
24002416:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
24002418:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
2400241a:	f00e fcf1 	bl	24010e00 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
2400241e:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
24002422:	455e      	cmp	r6, fp
24002424:	f108 0808 	add.w	r8, r8, #8
24002428:	d1f5      	bne.n	24002416 <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
2400242a:	4a80      	ldr	r2, [pc, #512]	; (2400262c <audioTickL+0x320>)
2400242c:	4e93      	ldr	r6, [pc, #588]	; (2400267c <audioTickL+0x370>)
2400242e:	6853      	ldr	r3, [r2, #4]
24002430:	1b1c      	subs	r4, r3, r4
24002432:	4b93      	ldr	r3, [pc, #588]	; (24002680 <audioTickL+0x374>)
24002434:	601c      	str	r4, [r3, #0]
	interruptChecker = 0;
24002436:	2400      	movs	r4, #0
24002438:	4b8e      	ldr	r3, [pc, #568]	; (24002674 <audioTickL+0x368>)
2400243a:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
2400243c:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
24002440:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
24002444:	4621      	mov	r1, r4
24002446:	4652      	mov	r2, sl
24002448:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
2400244c:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
24002450:	2b00      	cmp	r3, #0
24002452:	f000 8165 	beq.w	24002720 <audioTickL+0x414>
			lfoShapeTick[i](&sample,i, string);
24002456:	4b8b      	ldr	r3, [pc, #556]	; (24002684 <audioTickL+0x378>)
	for (int i = 0; i < NUM_LFOS; i++)
24002458:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
2400245a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
2400245e:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
24002460:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
24002464:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002466:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
2400246a:	d1e9      	bne.n	24002440 <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
2400246c:	4b6f      	ldr	r3, [pc, #444]	; (2400262c <audioTickL+0x320>)
		oscillator_tick(note[v], v);
2400246e:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
24002472:	4a85      	ldr	r2, [pc, #532]	; (24002688 <audioTickL+0x37c>)
		oscillator_tick(note[v], v);
24002474:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
24002476:	685b      	ldr	r3, [r3, #4]
24002478:	eba3 0308 	sub.w	r3, r3, r8
2400247c:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
2400247e:	f031 f88f 	bl	240335a0 <__oscillator_tick_veneer>
		noise_tick(v);
24002482:	4650      	mov	r0, sl
24002484:	f031 f880 	bl	24033588 <__noise_tick_veneer>
		for (int i = 0; i < oscToTick; i++)
24002488:	4b80      	ldr	r3, [pc, #512]	; (2400268c <audioTickL+0x380>)
2400248a:	781b      	ldrb	r3, [r3, #0]
2400248c:	2b00      	cmp	r3, #0
2400248e:	f000 81ac 	beq.w	240027ea <audioTickL+0x4de>
			filterSamps[0] += oscOuts[0][i][v];
24002492:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
24002494:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
24002496:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
2400249a:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
2400249e:	d011      	beq.n	240024c4 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
240024a0:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
240024a4:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
240024a6:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
240024aa:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
240024ae:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
240024b2:	d007      	beq.n	240024c4 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
240024b4:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
240024b8:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
240024bc:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
240024c0:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
240024c4:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
240024c6:	eeb0 0a48 	vmov.f32	s0, s16
240024ca:	4651      	mov	r1, sl
240024cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
240024d0:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
240024d4:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
240024d8:	ee76 6a86 	vadd.f32	s13, s13, s12
240024dc:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
240024de:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
240024e2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
240024e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
240024ea:	f031 f849 	bl	24033580 <__filter_tick_veneer>
		if (fxPre)
240024ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
240024f2:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
240024f6:	eef4 9ae7 	vcmpe.f32	s19, s15
240024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240024fe:	dd04      	ble.n	2400250a <audioTickL+0x1fe>
			sample *= amplitude[v];
24002500:	6a3b      	ldr	r3, [r7, #32]
24002502:	edd3 7a00 	vldr	s15, [r3]
24002506:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
2400250a:	4b61      	ldr	r3, [pc, #388]	; (24002690 <audioTickL+0x384>)
2400250c:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
2400250e:	4b47      	ldr	r3, [pc, #284]	; (2400262c <audioTickL+0x320>)
24002510:	685b      	ldr	r3, [r3, #4]
24002512:	60fb      	str	r3, [r7, #12]
		if (overSampled)
24002514:	2c00      	cmp	r4, #0
24002516:	f040 810b 	bne.w	24002730 <audioTickL+0x424>
			for (int i = 0; i < numEffectToTick; i++)
2400251a:	4b5e      	ldr	r3, [pc, #376]	; (24002694 <audioTickL+0x388>)
2400251c:	781b      	ldrb	r3, [r3, #0]
2400251e:	b32b      	cbz	r3, 2400256c <audioTickL+0x260>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002520:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24002524:	f8df 918c 	ldr.w	r9, [pc, #396]	; 240026b4 <audioTickL+0x3a8>
			for (int i = 0; i < numEffectToTick; i++)
24002528:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
2400252c:	4e5a      	ldr	r6, [pc, #360]	; (24002698 <audioTickL+0x38c>)
2400252e:	4d5b      	ldr	r5, [pc, #364]	; (2400269c <audioTickL+0x390>)
				sample = effectTick[i](sample, i, v); //run the effect
24002530:	eeb0 0a48 	vmov.f32	s0, s16
24002534:	4620      	mov	r0, r4
24002536:	f859 3b04 	ldr.w	r3, [r9], #4
2400253a:	4651      	mov	r1, sl
2400253c:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
2400253e:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
24002542:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002544:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
24002548:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
2400254c:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
24002550:	ee67 7a00 	vmul.f32	s15, s14, s0
24002554:	ee3b 7ac7 	vsub.f32	s14, s23, s14
24002558:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
2400255c:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
24002560:	4b4c      	ldr	r3, [pc, #304]	; (24002694 <audioTickL+0x388>)
24002562:	781b      	ldrb	r3, [r3, #0]
24002564:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
24002566:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
2400256a:	dce1      	bgt.n	24002530 <audioTickL+0x224>
		if (!fxPre)
2400256c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
24002570:	4b2e      	ldr	r3, [pc, #184]	; (2400262c <audioTickL+0x320>)
		oversampleCount = tempCount2-tempCount1;
24002572:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
24002574:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
24002576:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
2400257a:	1a9b      	subs	r3, r3, r2
2400257c:	4a48      	ldr	r2, [pc, #288]	; (240026a0 <audioTickL+0x394>)
		if (!fxPre)
2400257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
24002582:	6013      	str	r3, [r2, #0]
		if (!fxPre)
24002584:	d804      	bhi.n	24002590 <audioTickL+0x284>
			sample *= amplitude[v];
24002586:	6a3b      	ldr	r3, [r7, #32]
24002588:	edd3 7a00 	vldr	s15, [r3]
2400258c:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
24002590:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
24002592:	eeb0 0a48 	vmov.f32	s0, s16
24002596:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
24002598:	f10a 0a01 	add.w	sl, sl, #1
2400259c:	3304      	adds	r3, #4
2400259e:	f10b 0b04 	add.w	fp, fp, #4
240025a2:	623b      	str	r3, [r7, #32]
240025a4:	69fb      	ldr	r3, [r7, #28]
240025a6:	3304      	adds	r3, #4
240025a8:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
240025aa:	4b3e      	ldr	r3, [pc, #248]	; (240026a4 <audioTickL+0x398>)
240025ac:	1918      	adds	r0, r3, r4
240025ae:	f00e fed9 	bl	24011364 <tSVF_tick>
		masterSample += sample;
240025b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240025b6:	eeb0 1a6a 	vmov.f32	s2, s21
240025ba:	eef0 0a4b 	vmov.f32	s1, s22
		masterSample += sample;
240025be:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
240025c2:	eeb0 0a4a 	vmov.f32	s0, s20
240025c6:	f030 ffbf 	bl	24033548 <__LEAF_clip_veneer>
240025ca:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
240025ce:	4936      	ldr	r1, [pc, #216]	; (240026a8 <audioTickL+0x39c>)
		float omAlpha = 1.0f - alpha;
240025d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240025d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
240025d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
240025dc:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
240025e0:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
240025e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
240025e8:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
240025ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
240025ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
240025f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
240025f6:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
240025fa:	edd2 6a00 	vldr	s13, [r2]
240025fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24002602:	edd3 0a00 	vldr	s1, [r3]
		masterSample *= finalMaster[v] ;
24002606:	4b29      	ldr	r3, [pc, #164]	; (240026ac <audioTickL+0x3a0>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
24002608:	ee67 7aa0 	vmul.f32	s15, s15, s1
		masterSample *= finalMaster[v] ;
2400260c:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
2400260e:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
24002612:	edd3 0a00 	vldr	s1, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
24002616:	1d23      	adds	r3, r4, #4
24002618:	ee68 0aa0 	vmul.f32	s1, s17, s1
2400261c:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
2400261e:	ee60 0aa7 	vmul.f32	s1, s1, s15
24002622:	f030 ff91 	bl	24033548 <__LEAF_clip_veneer>
24002626:	e047      	b.n	240026b8 <audioTickL+0x3ac>
24002628:	20005154 	.word	0x20005154
2400262c:	e0001000 	.word	0xe0001000
24002630:	20018534 	.word	0x20018534
24002634:	20005184 	.word	0x20005184
24002638:	200051f8 	.word	0x200051f8
2400263c:	200145c0 	.word	0x200145c0
24002640:	200147bc 	.word	0x200147bc
24002644:	20000052 	.word	0x20000052
24002648:	423c0000 	.word	0x423c0000
2400264c:	42a00000 	.word	0x42a00000
24002650:	20014700 	.word	0x20014700
24002654:	00000000 	.word	0x00000000
24002658:	20000af4 	.word	0x20000af4
2400265c:	200054d0 	.word	0x200054d0
24002660:	42fe0000 	.word	0x42fe0000
24002664:	200054fc 	.word	0x200054fc
24002668:	20017528 	.word	0x20017528
2400266c:	20017524 	.word	0x20017524
24002670:	20014708 	.word	0x20014708
24002674:	20016b6d 	.word	0x20016b6d
24002678:	20005058 	.word	0x20005058
2400267c:	2000527c 	.word	0x2000527c
24002680:	20014740 	.word	0x20014740
24002684:	200052e0 	.word	0x200052e0
24002688:	2001474c 	.word	0x2001474c
2400268c:	20000068 	.word	0x20000068
24002690:	20000069 	.word	0x20000069
24002694:	20000050 	.word	0x20000050
24002698:	200050d8 	.word	0x200050d8
2400269c:	200050f8 	.word	0x200050f8
240026a0:	2000552c 	.word	0x2000552c
240026a4:	200050a8 	.word	0x200050a8
240026a8:	20000544 	.word	0x20000544
240026ac:	200050b0 	.word	0x200050b0
240026b0:	200145e0 	.word	0x200145e0
240026b4:	20005048 	.word	0x20005048
	for (int v = 0; v < numStringsThisBoard; v++)
240026b8:	4b51      	ldr	r3, [pc, #324]	; (24002800 <audioTickL+0x4f4>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240026ba:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
240026be:	781b      	ldrb	r3, [r3, #0]
240026c0:	4553      	cmp	r3, sl
240026c2:	f73f ae78 	bgt.w	240023b6 <audioTickL+0xaa>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
240026c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240026ca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240026ce:	eef0 0a68 	vmov.f32	s1, s17
240026d2:	f030 ff39 	bl	24033548 <__LEAF_clip_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
240026d6:	4b4b      	ldr	r3, [pc, #300]	; (24002804 <audioTickL+0x4f8>)
	timeTick = tempCount6-tempCount5;
240026d8:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
240026da:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
240026de:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
240026e0:	4949      	ldr	r1, [pc, #292]	; (24002808 <audioTickL+0x4fc>)
240026e2:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
240026e4:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
240026e6:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
240026e8:	d90b      	bls.n	24002702 <audioTickL+0x3f6>
240026ea:	4b48      	ldr	r3, [pc, #288]	; (2400280c <audioTickL+0x500>)
240026ec:	781b      	ldrb	r3, [r3, #0]
240026ee:	b943      	cbnz	r3, 24002702 <audioTickL+0x3f6>
		if (overSampled)
240026f0:	4a47      	ldr	r2, [pc, #284]	; (24002810 <audioTickL+0x504>)
240026f2:	7811      	ldrb	r1, [r2, #0]
240026f4:	b921      	cbnz	r1, 24002700 <audioTickL+0x3f4>
		else if (oscToTick > 1)
240026f6:	4a47      	ldr	r2, [pc, #284]	; (24002814 <audioTickL+0x508>)
240026f8:	7813      	ldrb	r3, [r2, #0]
240026fa:	2b01      	cmp	r3, #1
240026fc:	d901      	bls.n	24002702 <audioTickL+0x3f6>
			oscToTick--;
240026fe:	3b01      	subs	r3, #1
24002700:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
24002702:	4b45      	ldr	r3, [pc, #276]	; (24002818 <audioTickL+0x50c>)
}
24002704:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
24002706:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2400281c <audioTickL+0x510>
2400270a:	edd3 7a00 	vldr	s15, [r3]
2400270e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
24002712:	ee27 0a80 	vmul.f32	s0, s15, s0
24002716:	46bd      	mov	sp, r7
24002718:	ecbd 8b0a 	vpop	{d8-d12}
2400271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
24002720:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
24002722:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
24002726:	3508      	adds	r5, #8
24002728:	2c04      	cmp	r4, #4
2400272a:	f47f ae89 	bne.w	24002440 <audioTickL+0x134>
2400272e:	e69d      	b.n	2400246c <audioTickL+0x160>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
24002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24002732:	eeb0 0a48 	vmov.f32	s0, s16
24002736:	4b3a      	ldr	r3, [pc, #232]	; (24002820 <audioTickL+0x514>)
24002738:	493a      	ldr	r1, [pc, #232]	; (24002824 <audioTickL+0x518>)
2400273a:	4413      	add	r3, r2
2400273c:	4618      	mov	r0, r3
2400273e:	ee0c 3a10 	vmov	s24, r3
24002742:	f030 ff09 	bl	24033558 <__tOversampler_upsample_veneer>
			for (int i = 0; i < numEffectToTick; i++)
24002746:	4b38      	ldr	r3, [pc, #224]	; (24002828 <audioTickL+0x51c>)
24002748:	781b      	ldrb	r3, [r3, #0]
2400274a:	2b00      	cmp	r3, #0
2400274c:	d055      	beq.n	240027fa <audioTickL+0x4ee>
2400274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002750:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24002754:	4e35      	ldr	r6, [pc, #212]	; (2400282c <audioTickL+0x520>)
			for (int i = 0; i < numEffectToTick; i++)
24002756:	f04f 0800 	mov.w	r8, #0
2400275a:	4d35      	ldr	r5, [pc, #212]	; (24002830 <audioTickL+0x524>)
2400275c:	eb06 0903 	add.w	r9, r6, r3
24002760:	4e34      	ldr	r6, [pc, #208]	; (24002834 <audioTickL+0x528>)
24002762:	441d      	add	r5, r3
24002764:	4b2f      	ldr	r3, [pc, #188]	; (24002824 <audioTickL+0x518>)
24002766:	607b      	str	r3, [r7, #4]
24002768:	4c2e      	ldr	r4, [pc, #184]	; (24002824 <audioTickL+0x518>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
2400276a:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
2400276e:	4651      	mov	r1, sl
24002770:	6833      	ldr	r3, [r6, #0]
24002772:	4640      	mov	r0, r8
24002774:	eeb0 0a48 	vmov.f32	s0, s16
24002778:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
2400277a:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
2400277e:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002782:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
24002786:	4b2c      	ldr	r3, [pc, #176]	; (24002838 <audioTickL+0x52c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
24002788:	ee3b 7ac7 	vsub.f32	s14, s23, s14
2400278c:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
24002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
24002794:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
24002798:	42a3      	cmp	r3, r4
2400279a:	d1e6      	bne.n	2400276a <audioTickL+0x45e>
			for (int i = 0; i < numEffectToTick; i++)
2400279c:	4b22      	ldr	r3, [pc, #136]	; (24002828 <audioTickL+0x51c>)
2400279e:	f108 0801 	add.w	r8, r8, #1
240027a2:	3604      	adds	r6, #4
240027a4:	f109 0908 	add.w	r9, r9, #8
240027a8:	781b      	ldrb	r3, [r3, #0]
240027aa:	3508      	adds	r5, #8
240027ac:	4543      	cmp	r3, r8
240027ae:	dcdb      	bgt.n	24002768 <audioTickL+0x45c>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
240027b0:	687c      	ldr	r4, [r7, #4]
240027b2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240027b6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240027ba:	edd4 0a00 	vldr	s1, [r4]
240027be:	f030 fec3 	bl	24033548 <__LEAF_clip_veneer>
240027c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240027c6:	edd4 0a01 	vldr	s1, [r4, #4]
240027ca:	ed84 0a00 	vstr	s0, [r4]
240027ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240027d2:	f030 feb9 	bl	24033548 <__LEAF_clip_veneer>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
240027d6:	ee1c 0a10 	vmov	r0, s24
240027da:	4912      	ldr	r1, [pc, #72]	; (24002824 <audioTickL+0x518>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
240027dc:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
240027e0:	f030 febe 	bl	24033560 <__tOversampler_downsample_veneer>
240027e4:	eeb0 8a40 	vmov.f32	s16, s0
240027e8:	e6c0      	b.n	2400256c <audioTickL+0x260>
		for (int i = 0; i < oscToTick; i++)
240027ea:	eddf 7a14 	vldr	s15, [pc, #80]	; 2400283c <audioTickL+0x530>
240027ee:	eeb0 6a67 	vmov.f32	s12, s15
240027f2:	e667      	b.n	240024c4 <audioTickL+0x1b8>
	float masterSample = 0.0f;
240027f4:	eddf 8a11 	vldr	s17, [pc, #68]	; 2400283c <audioTickL+0x530>
240027f8:	e765      	b.n	240026c6 <audioTickL+0x3ba>
240027fa:	4b0a      	ldr	r3, [pc, #40]	; (24002824 <audioTickL+0x518>)
240027fc:	607b      	str	r3, [r7, #4]
240027fe:	e7d7      	b.n	240027b0 <audioTickL+0x4a4>
24002800:	20000052 	.word	0x20000052
24002804:	e0001000 	.word	0xe0001000
24002808:	2001475c 	.word	0x2001475c
2400280c:	20005154 	.word	0x20005154
24002810:	20000069 	.word	0x20000069
24002814:	20000068 	.word	0x20000068
24002818:	20000744 	.word	0x20000744
2400281c:	3f7ae148 	.word	0x3f7ae148
24002820:	200054f4 	.word	0x200054f4
24002824:	20005530 	.word	0x20005530
24002828:	20000050 	.word	0x20000050
2400282c:	200050d8 	.word	0x200050d8
24002830:	200050f8 	.word	0x200050f8
24002834:	20005048 	.word	0x20005048
24002838:	20005538 	.word	0x20005538
2400283c:	00000000 	.word	0x00000000

24002840 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24002840:	4b0c      	ldr	r3, [pc, #48]	; (24002874 <MX_BDMA_Init+0x34>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 4, 0);
24002842:	2081      	movs	r0, #129	; 0x81
24002844:	2200      	movs	r2, #0
24002846:	2104      	movs	r1, #4
{
24002848:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
2400284a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
2400284e:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24002850:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24002854:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24002858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24002860:	9301      	str	r3, [sp, #4]
24002862:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 4, 0);
24002864:	f002 f966 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24002868:	2081      	movs	r0, #129	; 0x81

}
2400286a:	b002      	add	sp, #8
2400286c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24002870:	f002 b99e 	b.w	24004bb0 <HAL_NVIC_EnableIRQ>
24002874:	58024400 	.word	0x58024400

24002878 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24002878:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
2400287a:	231e      	movs	r3, #30
{
2400287c:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400287e:	25fa      	movs	r5, #250	; 0xfa
24002880:	2134      	movs	r1, #52	; 0x34
24002882:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24002884:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002888:	9500      	str	r5, [sp, #0]
2400288a:	2302      	movs	r3, #2
{
2400288c:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400288e:	f004 f89d 	bl	240069cc <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24002892:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24002894:	260a      	movs	r6, #10
    HAL_Delay(10);
24002896:	f002 f923 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400289a:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400289e:	2302      	movs	r3, #2
240028a0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240028a2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028a6:	4620      	mov	r0, r4
240028a8:	aa03      	add	r2, sp, #12
240028aa:	9500      	str	r5, [sp, #0]
240028ac:	f004 f88e 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240028b0:	200a      	movs	r0, #10
240028b2:	f002 f915 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240028b6:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028ba:	2302      	movs	r3, #2
240028bc:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240028be:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028c2:	4620      	mov	r0, r4
240028c4:	aa03      	add	r2, sp, #12
240028c6:	9500      	str	r5, [sp, #0]
240028c8:	f004 f880 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240028cc:	200a      	movs	r0, #10
240028ce:	f002 f907 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240028d2:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028d4:	2302      	movs	r3, #2
240028d6:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240028d8:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028dc:	4620      	mov	r0, r4
240028de:	aa03      	add	r2, sp, #12
240028e0:	9500      	str	r5, [sp, #0]
240028e2:	f004 f873 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240028e6:	200a      	movs	r0, #10
240028e8:	f002 f8fa 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240028ec:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028ee:	2302      	movs	r3, #2
240028f0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240028f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240028f6:	4620      	mov	r0, r4
240028f8:	aa03      	add	r2, sp, #12
240028fa:	9500      	str	r5, [sp, #0]
240028fc:	f004 f866 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24002900:	200a      	movs	r0, #10
24002902:	f002 f8ed 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24002906:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400290a:	2302      	movs	r3, #2
2400290c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400290e:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002912:	4620      	mov	r0, r4
24002914:	aa03      	add	r2, sp, #12
24002916:	9500      	str	r5, [sp, #0]
24002918:	f004 f858 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400291c:	4630      	mov	r0, r6
2400291e:	f002 f8df 	bl	24004ae0 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002922:	aa03      	add	r2, sp, #12
24002924:	2302      	movs	r3, #2
24002926:	2134      	movs	r1, #52	; 0x34
24002928:	4620      	mov	r0, r4
2400292a:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
2400292c:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002930:	f004 f84c 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24002934:	4630      	mov	r0, r6
24002936:	f002 f8d3 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400293a:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400293e:	aa03      	add	r2, sp, #12
24002940:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24002942:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002946:	4620      	mov	r0, r4
24002948:	2302      	movs	r3, #2
2400294a:	9500      	str	r5, [sp, #0]
2400294c:	f004 f83e 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24002950:	4630      	mov	r0, r6
24002952:	f002 f8c5 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24002956:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400295a:	aa03      	add	r2, sp, #12
2400295c:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400295e:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002962:	4620      	mov	r0, r4
24002964:	2302      	movs	r3, #2
24002966:	9500      	str	r5, [sp, #0]
24002968:	f004 f830 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400296c:	4630      	mov	r0, r6
2400296e:	f002 f8b7 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24002972:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002974:	aa03      	add	r2, sp, #12
24002976:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24002978:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400297c:	4620      	mov	r0, r4
2400297e:	2302      	movs	r3, #2
24002980:	9500      	str	r5, [sp, #0]
24002982:	f004 f823 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24002986:	4630      	mov	r0, r6
24002988:	f002 f8aa 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400298c:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400298e:	aa03      	add	r2, sp, #12
24002990:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24002992:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24002996:	4620      	mov	r0, r4
24002998:	2302      	movs	r3, #2
2400299a:	9500      	str	r5, [sp, #0]
2400299c:	f004 f816 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240029a0:	4630      	mov	r0, r6
240029a2:	f002 f89d 	bl	24004ae0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240029a6:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240029aa:	aa03      	add	r2, sp, #12
240029ac:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
240029ae:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240029b2:	4620      	mov	r0, r4
240029b4:	2134      	movs	r1, #52	; 0x34
240029b6:	9500      	str	r5, [sp, #0]
240029b8:	f004 f808 	bl	240069cc <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240029bc:	4630      	mov	r0, r6
240029be:	f002 f88f 	bl	24004ae0 <HAL_Delay>
}
240029c2:	b004      	add	sp, #16
240029c4:	bd70      	pop	{r4, r5, r6, pc}
240029c6:	bf00      	nop

240029c8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
240029c8:	4b24      	ldr	r3, [pc, #144]	; (24002a5c <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
240029ca:	2200      	movs	r2, #0
240029cc:	2103      	movs	r1, #3
240029ce:	200b      	movs	r0, #11
{
240029d0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
240029d2:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
240029d6:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
240029d8:	f044 0401 	orr.w	r4, r4, #1
240029dc:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
240029e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
240029e4:	f003 0301 	and.w	r3, r3, #1
240029e8:	9301      	str	r3, [sp, #4]
240029ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
240029ec:	f002 f8a2 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
240029f0:	200b      	movs	r0, #11
240029f2:	f002 f8dd 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
240029f6:	2200      	movs	r2, #0
240029f8:	2104      	movs	r1, #4
240029fa:	200c      	movs	r0, #12
240029fc:	f002 f89a 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24002a00:	200c      	movs	r0, #12
24002a02:	f002 f8d5 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 4, 0);
24002a06:	2200      	movs	r2, #0
24002a08:	2104      	movs	r1, #4
24002a0a:	200d      	movs	r0, #13
24002a0c:	f002 f892 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24002a10:	200d      	movs	r0, #13
24002a12:	f002 f8cd 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
24002a16:	2200      	movs	r2, #0
24002a18:	2101      	movs	r1, #1
24002a1a:	200e      	movs	r0, #14
24002a1c:	f002 f88a 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24002a20:	200e      	movs	r0, #14
24002a22:	f002 f8c5 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
24002a26:	2200      	movs	r2, #0
24002a28:	2101      	movs	r1, #1
24002a2a:	200f      	movs	r0, #15
24002a2c:	f002 f882 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24002a30:	200f      	movs	r0, #15
24002a32:	f002 f8bd 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
24002a36:	2200      	movs	r2, #0
24002a38:	2103      	movs	r1, #3
24002a3a:	2011      	movs	r0, #17
24002a3c:	f002 f87a 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24002a40:	2011      	movs	r0, #17
24002a42:	f002 f8b5 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
24002a46:	2066      	movs	r0, #102	; 0x66
24002a48:	2200      	movs	r2, #0
24002a4a:	2105      	movs	r1, #5
24002a4c:	f002 f872 	bl	24004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24002a50:	2066      	movs	r0, #102	; 0x66

}
24002a52:	b002      	add	sp, #8
24002a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24002a58:	f002 b8aa 	b.w	24004bb0 <HAL_NVIC_EnableIRQ>
24002a5c:	58024400 	.word	0x58024400

24002a60 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24002a60:	481b      	ldr	r0, [pc, #108]	; (24002ad0 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24002a62:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24002a64:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24002a66:	2108      	movs	r1, #8
{
24002a68:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24002a6a:	4c1a      	ldr	r4, [pc, #104]	; (24002ad4 <MX_FMC_Init+0x74>)
{
24002a6c:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24002a6e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24002a70:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24002a72:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24002a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24002a78:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24002a7a:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24002a7e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
24002a80:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24002a82:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
24002a86:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24002a88:	2308      	movs	r3, #8
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24002a8a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24002a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 8;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 10;
24002a92:	240a      	movs	r4, #10
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24002a94:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
24002a98:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24002a9a:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 10;
24002a9c:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
24002a9e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24002ac8 <MX_FMC_Init+0x68>
24002aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
24002aa6:	2203      	movs	r2, #3
24002aa8:	2310      	movs	r3, #16
24002aaa:	ed8d 7b00 	vstr	d7, [sp]
24002aae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24002ab2:	f008 f9ab 	bl	2400ae0c <HAL_SDRAM_Init>
24002ab6:	b908      	cbnz	r0, 24002abc <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24002ab8:	b008      	add	sp, #32
24002aba:	bd10      	pop	{r4, pc}
    Error_Handler( );
24002abc:	f001 fb14 	bl	240040e8 <Error_Handler>
}
24002ac0:	b008      	add	sp, #32
24002ac2:	bd10      	pop	{r4, pc}
24002ac4:	f3af 8000 	nop.w
24002ac8:	00000002 	.word	0x00000002
24002acc:	00000007 	.word	0x00000007
24002ad0:	200147e4 	.word	0x200147e4
24002ad4:	52004140 	.word	0x52004140

24002ad8 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24002ad8:	4b31      	ldr	r3, [pc, #196]	; (24002ba0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002ada:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24002adc:	b5d0      	push	{r4, r6, r7, lr}
24002ade:	b088      	sub	sp, #32
  if (FMC_Initialized) {
24002ae0:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002ae2:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24002ae4:	2a00      	cmp	r2, #0
24002ae6:	d159      	bne.n	24002b9c <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24002ae8:	4a2e      	ldr	r2, [pc, #184]	; (24002ba4 <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24002aea:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24002aec:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002af0:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24002af2:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24002af4:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24002af6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24002afa:	2600      	movs	r6, #0
24002afc:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24002afe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24002b02:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24002b06:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b0a:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24002b10:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002b12:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24002b14:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24002b16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24002b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24002b1c:	a902      	add	r1, sp, #8
24002b1e:	4822      	ldr	r0, [pc, #136]	; (24002ba8 <HAL_SDRAM_MspInit+0xd0>)
24002b20:	f003 fcda 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24002b24:	f248 1237 	movw	r2, #33079	; 0x8137
24002b28:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002b2a:	a902      	add	r1, sp, #8
24002b2c:	481f      	ldr	r0, [pc, #124]	; (24002bac <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b2e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24002b30:	e9cd 2302 	strd	r2, r3, [sp, #8]
24002b34:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002b38:	f003 fcce 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24002b3c:	f24c 7203 	movw	r2, #50947	; 0xc703
24002b40:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002b42:	a902      	add	r1, sp, #8
24002b44:	481a      	ldr	r0, [pc, #104]	; (24002bb0 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b46:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24002b48:	e9cd 2302 	strd	r2, r3, [sp, #8]
24002b4c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002b50:	f003 fcc2 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24002b54:	f240 62ff 	movw	r2, #1791	; 0x6ff
24002b58:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002b5a:	a902      	add	r1, sp, #8
24002b5c:	4815      	ldr	r0, [pc, #84]	; (24002bb4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b5e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24002b60:	e9cd 2302 	strd	r2, r3, [sp, #8]
24002b64:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002b68:	f003 fcb6 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24002b6c:	f64f 722c 	movw	r2, #65324	; 0xff2c
24002b70:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002b72:	a902      	add	r1, sp, #8
24002b74:	4810      	ldr	r0, [pc, #64]	; (24002bb8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b76:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24002b78:	e9cd 2302 	strd	r2, r3, [sp, #8]
24002b7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002b80:	f003 fcaa 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24002b84:	f64f 023f 	movw	r2, #63551	; 0xf83f
24002b88:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002b8a:	a902      	add	r1, sp, #8
24002b8c:	480b      	ldr	r0, [pc, #44]	; (24002bbc <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24002b8e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24002b90:	e9cd 6704 	strd	r6, r7, [sp, #16]
24002b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002b98:	f003 fc9e 	bl	240064d8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24002b9c:	b008      	add	sp, #32
24002b9e:	bdd0      	pop	{r4, r6, r7, pc}
24002ba0:	200147e0 	.word	0x200147e0
24002ba4:	58024400 	.word	0x58024400
24002ba8:	58021000 	.word	0x58021000
24002bac:	58021800 	.word	0x58021800
24002bb0:	58020c00 	.word	0x58020c00
24002bb4:	58022000 	.word	0x58022000
24002bb8:	58021c00 	.word	0x58021c00
24002bbc:	58021400 	.word	0x58021400

24002bc0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24002bc4:	4bb2      	ldr	r3, [pc, #712]	; (24002e90 <MX_GPIO_Init+0x2d0>)
{
24002bc6:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002bc8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002bca:	4db2      	ldr	r5, [pc, #712]	; (24002e94 <MX_GPIO_Init+0x2d4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24002bcc:	4fb2      	ldr	r7, [pc, #712]	; (24002e98 <MX_GPIO_Init+0x2d8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002bce:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002bd0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002bd2:	4628      	mov	r0, r5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24002bd4:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 24002eac <MX_GPIO_Init+0x2ec>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG14 PG13 PG12 PG7
                           PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24002bd8:	f247 08c0 	movw	r8, #28864	; 0x70c0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24002bdc:	4eaf      	ldr	r6, [pc, #700]	; (24002e9c <MX_GPIO_Init+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24002bde:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24002be2:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 24002eb0 <MX_GPIO_Init+0x2f0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002be6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24002bea:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24002bee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002bf2:	f042 0210 	orr.w	r2, r2, #16
24002bf6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002bfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002bfe:	f002 0210 	and.w	r2, r2, #16
24002c02:	9201      	str	r2, [sp, #4]
24002c04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24002c06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c0a:	f042 0202 	orr.w	r2, r2, #2
24002c0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c16:	f002 0202 	and.w	r2, r2, #2
24002c1a:	9202      	str	r2, [sp, #8]
24002c1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24002c1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24002c26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c2e:	f002 0240 	and.w	r2, r2, #64	; 0x40
24002c32:	9203      	str	r2, [sp, #12]
24002c34:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24002c36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c3a:	f042 0208 	orr.w	r2, r2, #8
24002c3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c46:	f002 0208 	and.w	r2, r2, #8
24002c4a:	9204      	str	r2, [sp, #16]
24002c4c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24002c4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c52:	f042 0204 	orr.w	r2, r2, #4
24002c56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c5e:	f002 0204 	and.w	r2, r2, #4
24002c62:	9205      	str	r2, [sp, #20]
24002c64:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24002c66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c6a:	f042 0201 	orr.w	r2, r2, #1
24002c6e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c76:	f002 0201 	and.w	r2, r2, #1
24002c7a:	9206      	str	r2, [sp, #24]
24002c7c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24002c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24002c86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002c8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c8e:	f402 7280 	and.w	r2, r2, #256	; 0x100
24002c92:	9207      	str	r2, [sp, #28]
24002c94:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24002c96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24002c9e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002ca2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002ca6:	f002 0280 	and.w	r2, r2, #128	; 0x80
24002caa:	9208      	str	r2, [sp, #32]
24002cac:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24002cae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002cb2:	f042 0220 	orr.w	r2, r2, #32
24002cb6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002cba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24002cc0:	f003 0320 	and.w	r3, r3, #32
24002cc4:	9309      	str	r3, [sp, #36]	; 0x24
24002cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24002cc8:	f003 fd56 	bl	24006778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24002ccc:	4622      	mov	r2, r4
24002cce:	4638      	mov	r0, r7
24002cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
24002cd4:	f003 fd50 	bl	24006778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24002cd8:	4622      	mov	r2, r4
24002cda:	4658      	mov	r0, fp
24002cdc:	2193      	movs	r1, #147	; 0x93
24002cde:	f003 fd4b 	bl	24006778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24002ce2:	4622      	mov	r2, r4
24002ce4:	4630      	mov	r0, r6
24002ce6:	2149      	movs	r1, #73	; 0x49
24002ce8:	f003 fd46 	bl	24006778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24002cec:	4622      	mov	r2, r4
24002cee:	4650      	mov	r0, sl
24002cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
24002cf4:	f003 fd40 	bl	24006778 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002cf8:	a90a      	add	r1, sp, #40	; 0x28
24002cfa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002cfc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24002cfe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24002d02:	f243 08f8 	movw	r8, #12536	; 0x30f8
24002d06:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002d0a:	f003 fbe5 	bl	240064d8 <HAL_GPIO_Init>
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002d0e:	a90a      	add	r1, sp, #40	; 0x28
24002d10:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002d12:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24002d14:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24002d18:	f44f 481f 	mov.w	r8, #40704	; 0x9f00
24002d1c:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002d20:	f003 fbda 	bl	240064d8 <HAL_GPIO_Init>
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002d24:	a90a      	add	r1, sp, #40	; 0x28
24002d26:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002d28:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24002d2a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002d2e:	f003 fbd3 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24002d32:	f04f 0800 	mov.w	r8, #0
24002d36:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002d3a:	a90a      	add	r1, sp, #40	; 0x28
24002d3c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24002d3e:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 24002e68 <MX_GPIO_Init+0x2a8>
24002d42:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24002d46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002d4a:	f003 fbc5 	bl	240064d8 <HAL_GPIO_Init>
                           PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002d4e:	a90a      	add	r1, sp, #40	; 0x28
24002d50:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002d52:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0
24002d54:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24002e70 <MX_GPIO_Init+0x2b0>
24002d58:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002d5c:	f003 fbbc 	bl	240064d8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002d60:	a90a      	add	r1, sp, #40	; 0x28
24002d62:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24002d64:	ed9f 7b44 	vldr	d7, [pc, #272]	; 24002e78 <MX_GPIO_Init+0x2b8>
24002d68:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24002d6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002d70:	f003 fbb2 	bl	240064d8 <HAL_GPIO_Init>
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002d74:	a90a      	add	r1, sp, #40	; 0x28
24002d76:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002d78:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24002d7a:	ed9f 7b41 	vldr	d7, [pc, #260]	; 24002e80 <MX_GPIO_Init+0x2c0>
24002d7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002d82:	f003 fba9 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002d86:	a90a      	add	r1, sp, #40	; 0x28
24002d88:	4845      	ldr	r0, [pc, #276]	; (24002ea0 <MX_GPIO_Init+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002d8a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24002d8c:	ed9f 7b3e 	vldr	d7, [pc, #248]	; 24002e88 <MX_GPIO_Init+0x2c8>
24002d90:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24002d94:	f003 fba0 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24002d98:	2293      	movs	r2, #147	; 0x93
24002d9a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002d9c:	4658      	mov	r0, fp
24002d9e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24002da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24002da4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002da8:	f003 fb96 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24002dac:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24002db0:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002db2:	a90a      	add	r1, sp, #40	; 0x28
24002db4:	483b      	ldr	r0, [pc, #236]	; (24002ea4 <MX_GPIO_Init+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002db6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24002db8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002dbc:	f003 fb8c 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24002dc0:	2208      	movs	r2, #8
24002dc2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002dc6:	4638      	mov	r0, r7
24002dc8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002dca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24002dcc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002dd0:	f003 fb82 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24002dd4:	22c0      	movs	r2, #192	; 0xc0
24002dd6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002dd8:	a90a      	add	r1, sp, #40	; 0x28
24002dda:	4833      	ldr	r0, [pc, #204]	; (24002ea8 <MX_GPIO_Init+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002ddc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24002dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24002de2:	f003 fb79 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24002de6:	2202      	movs	r2, #2
24002de8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002dea:	a90a      	add	r1, sp, #40	; 0x28
24002dec:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002dee:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24002df0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002df4:	f003 fb70 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24002df8:	2249      	movs	r2, #73	; 0x49
24002dfa:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002dfc:	a90a      	add	r1, sp, #40	; 0x28
24002dfe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24002e00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24002e04:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002e08:	f003 fb66 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24002e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
24002e10:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002e12:	4650      	mov	r0, sl
24002e14:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24002e16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24002e1a:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002e1e:	f003 fb5b 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002e22:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24002e24:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002e26:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002e28:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24002e2a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002e2c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24002e2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24002e32:	f003 fb51 	bl	240064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24002e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002e3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002e3e:	a90a      	add	r1, sp, #40	; 0x28
24002e40:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24002e42:	940c      	str	r4, [sp, #48]	; 0x30

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002e44:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24002e46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002e4a:	f003 fb45 	bl	240064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24002e4e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
24002e52:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002e54:	a90a      	add	r1, sp, #40	; 0x28
24002e56:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24002e58:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24002e5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002e5e:	f003 fb3b 	bl	240064d8 <HAL_GPIO_Init>

}
24002e62:	b011      	add	sp, #68	; 0x44
24002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24002e68:	00000082 	.word	0x00000082
24002e6c:	00000001 	.word	0x00000001
24002e70:	00002445 	.word	0x00002445
24002e74:	00000003 	.word	0x00000003
24002e78:	00000200 	.word	0x00000200
24002e7c:	00000001 	.word	0x00000001
24002e80:	0000e06c 	.word	0x0000e06c
24002e84:	00000003 	.word	0x00000003
24002e88:	00000900 	.word	0x00000900
24002e8c:	00000003 	.word	0x00000003
24002e90:	58024400 	.word	0x58024400
24002e94:	58020400 	.word	0x58020400
24002e98:	58021800 	.word	0x58021800
24002e9c:	58020000 	.word	0x58020000
24002ea0:	58022000 	.word	0x58022000
24002ea4:	58021400 	.word	0x58021400
24002ea8:	58021c00 	.word	0x58021c00
24002eac:	58020800 	.word	0x58020800
24002eb0:	58020c00 	.word	0x58020c00

24002eb4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24002eb4:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24002eb6:	4818      	ldr	r0, [pc, #96]	; (24002f18 <MX_I2C1_Init+0x64>)
  hi2c1.Init.Timing = 0x00B03FDB;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24002eb8:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x00B03FDB;
24002eba:	4a18      	ldr	r2, [pc, #96]	; (24002f1c <MX_I2C1_Init+0x68>)
  hi2c1.Init.OwnAddress1 = 68;
24002ebc:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24002ebe:	4c18      	ldr	r4, [pc, #96]	; (24002f20 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24002ec0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
24002ec2:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24002ec4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24002ec6:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x00B03FDB;
24002ec8:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24002ecc:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24002ece:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24002ed2:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24002ed4:	f003 fd1c 	bl	24006910 <HAL_I2C_Init>
24002ed8:	b950      	cbnz	r0, 24002ef0 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002eda:	2100      	movs	r1, #0
24002edc:	480e      	ldr	r0, [pc, #56]	; (24002f18 <MX_I2C1_Init+0x64>)
24002ede:	f004 fad5 	bl	2400748c <HAL_I2CEx_ConfigAnalogFilter>
24002ee2:	b968      	cbnz	r0, 24002f00 <MX_I2C1_Init+0x4c>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24002ee4:	2100      	movs	r1, #0
24002ee6:	480c      	ldr	r0, [pc, #48]	; (24002f18 <MX_I2C1_Init+0x64>)
24002ee8:	f004 fb04 	bl	240074f4 <HAL_I2CEx_ConfigDigitalFilter>
24002eec:	b980      	cbnz	r0, 24002f10 <MX_I2C1_Init+0x5c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24002eee:	bd10      	pop	{r4, pc}
    Error_Handler();
24002ef0:	f001 f8fa 	bl	240040e8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002ef4:	2100      	movs	r1, #0
24002ef6:	4808      	ldr	r0, [pc, #32]	; (24002f18 <MX_I2C1_Init+0x64>)
24002ef8:	f004 fac8 	bl	2400748c <HAL_I2CEx_ConfigAnalogFilter>
24002efc:	2800      	cmp	r0, #0
24002efe:	d0f1      	beq.n	24002ee4 <MX_I2C1_Init+0x30>
    Error_Handler();
24002f00:	f001 f8f2 	bl	240040e8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24002f04:	2100      	movs	r1, #0
24002f06:	4804      	ldr	r0, [pc, #16]	; (24002f18 <MX_I2C1_Init+0x64>)
24002f08:	f004 faf4 	bl	240074f4 <HAL_I2CEx_ConfigDigitalFilter>
24002f0c:	2800      	cmp	r0, #0
24002f0e:	d0ee      	beq.n	24002eee <MX_I2C1_Init+0x3a>
}
24002f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24002f14:	f001 b8e8 	b.w	240040e8 <Error_Handler>
24002f18:	20014908 	.word	0x20014908
24002f1c:	00b03fdb 	.word	0x00b03fdb
24002f20:	40005400 	.word	0x40005400

24002f24 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24002f24:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24002f26:	4817      	ldr	r0, [pc, #92]	; (24002f84 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24002f28:	2300      	movs	r3, #0
24002f2a:	4917      	ldr	r1, [pc, #92]	; (24002f88 <MX_I2C2_Init+0x64>)
24002f2c:	2401      	movs	r4, #1
24002f2e:	4a17      	ldr	r2, [pc, #92]	; (24002f8c <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24002f30:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24002f32:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24002f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24002f3a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24002f3e:	f003 fce7 	bl	24006910 <HAL_I2C_Init>
24002f42:	b950      	cbnz	r0, 24002f5a <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002f44:	2100      	movs	r1, #0
24002f46:	480f      	ldr	r0, [pc, #60]	; (24002f84 <MX_I2C2_Init+0x60>)
24002f48:	f004 faa0 	bl	2400748c <HAL_I2CEx_ConfigAnalogFilter>
24002f4c:	b968      	cbnz	r0, 24002f6a <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24002f4e:	2100      	movs	r1, #0
24002f50:	480c      	ldr	r0, [pc, #48]	; (24002f84 <MX_I2C2_Init+0x60>)
24002f52:	f004 facf 	bl	240074f4 <HAL_I2CEx_ConfigDigitalFilter>
24002f56:	b980      	cbnz	r0, 24002f7a <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24002f58:	bd10      	pop	{r4, pc}
    Error_Handler();
24002f5a:	f001 f8c5 	bl	240040e8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24002f5e:	2100      	movs	r1, #0
24002f60:	4808      	ldr	r0, [pc, #32]	; (24002f84 <MX_I2C2_Init+0x60>)
24002f62:	f004 fa93 	bl	2400748c <HAL_I2CEx_ConfigAnalogFilter>
24002f66:	2800      	cmp	r0, #0
24002f68:	d0f1      	beq.n	24002f4e <MX_I2C2_Init+0x2a>
    Error_Handler();
24002f6a:	f001 f8bd 	bl	240040e8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24002f6e:	2100      	movs	r1, #0
24002f70:	4804      	ldr	r0, [pc, #16]	; (24002f84 <MX_I2C2_Init+0x60>)
24002f72:	f004 fabf 	bl	240074f4 <HAL_I2CEx_ConfigDigitalFilter>
24002f76:	2800      	cmp	r0, #0
24002f78:	d0ee      	beq.n	24002f58 <MX_I2C2_Init+0x34>
}
24002f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24002f7e:	f001 b8b3 	b.w	240040e8 <Error_Handler>
24002f82:	bf00      	nop
24002f84:	2001495c 	.word	0x2001495c
24002f88:	40005800 	.word	0x40005800
24002f8c:	00b03fdb 	.word	0x00b03fdb

24002f90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
24002f92:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002f94:	2100      	movs	r1, #0
{
24002f96:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002f98:	22c0      	movs	r2, #192	; 0xc0
24002f9a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002f9c:	910a      	str	r1, [sp, #40]	; 0x28
24002f9e:	e9cd 1106 	strd	r1, r1, [sp, #24]
24002fa2:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002fa6:	f014 ffff 	bl	24017fa8 <memset>
  if(i2cHandle->Instance==I2C1)
24002faa:	6823      	ldr	r3, [r4, #0]
24002fac:	4a79      	ldr	r2, [pc, #484]	; (24003194 <HAL_I2C_MspInit+0x204>)
24002fae:	4293      	cmp	r3, r2
24002fb0:	d005      	beq.n	24002fbe <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24002fb2:	4a79      	ldr	r2, [pc, #484]	; (24003198 <HAL_I2C_MspInit+0x208>)
24002fb4:	4293      	cmp	r3, r2
24002fb6:	f000 8087 	beq.w	240030c8 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24002fba:	b03d      	add	sp, #244	; 0xf4
24002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24002fbe:	2208      	movs	r2, #8
24002fc0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002fc2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24002fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002fc8:	f005 f9b0 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
24002fcc:	2800      	cmp	r0, #0
24002fce:	f040 80db 	bne.w	24003188 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002fd2:	4d72      	ldr	r5, [pc, #456]	; (2400319c <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24002fd4:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24002fd8:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002fda:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002fdc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24002fe0:	4e6f      	ldr	r6, [pc, #444]	; (240031a0 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002fe2:	f043 0302 	orr.w	r3, r3, #2
24002fe6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24002fea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24002fee:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002ff0:	f003 0302 	and.w	r3, r3, #2
24002ff4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24002ff6:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002ff8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002ffa:	486a      	ldr	r0, [pc, #424]	; (240031a4 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24002ffc:	e9cd 2306 	strd	r2, r3, [sp, #24]
24003000:	2200      	movs	r2, #0
24003002:	2302      	movs	r3, #2
24003004:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003008:	f003 fa66 	bl	240064d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
2400300c:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003010:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003012:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24003014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24003018:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
2400301a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
2400301e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003022:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24003024:	4a60      	ldr	r2, [pc, #384]	; (240031a8 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
2400302a:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
2400302c:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
2400302e:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003030:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24003032:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24003034:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24003038:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
2400303a:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400303c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24003040:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24003044:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003048:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400304c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003050:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24003054:	f001 ff18 	bl	24004e88 <HAL_DMA_Init>
24003058:	2800      	cmp	r0, #0
2400305a:	f040 8092 	bne.w	24003182 <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
2400305e:	4d53      	ldr	r5, [pc, #332]	; (240031ac <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24003060:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24003062:	4953      	ldr	r1, [pc, #332]	; (240031b0 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24003064:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24003066:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24003068:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
2400306c:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400306e:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24003070:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003072:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24003076:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24003078:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
2400307a:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400307c:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
2400307e:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24003082:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24003084:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003086:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003088:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400308a:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400308c:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
2400308e:	63e6      	str	r6, [r4, #60]	; 0x3c
24003090:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24003092:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003094:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24003098:	f001 fef6 	bl	24004e88 <HAL_DMA_Init>
2400309c:	2800      	cmp	r0, #0
2400309e:	d16d      	bne.n	2400317c <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240030a0:	2200      	movs	r2, #0
240030a2:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
240030a4:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240030a6:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
240030a8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240030aa:	f001 fd43 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
240030ae:	201f      	movs	r0, #31
240030b0:	f001 fd7e 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
240030b4:	2200      	movs	r2, #0
240030b6:	2101      	movs	r1, #1
240030b8:	2020      	movs	r0, #32
240030ba:	f001 fd3b 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
240030be:	2020      	movs	r0, #32
240030c0:	f001 fd76 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
}
240030c4:	b03d      	add	sp, #244	; 0xf4
240030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
240030c8:	2208      	movs	r2, #8
240030ca:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240030cc:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
240030ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240030d2:	f005 f92b 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
240030d6:	2800      	cmp	r0, #0
240030d8:	d159      	bne.n	2400318e <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
240030da:	4c30      	ldr	r4, [pc, #192]	; (2400319c <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240030dc:	2010      	movs	r0, #16
240030de:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240030e0:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
240030e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240030e6:	2600      	movs	r6, #0
240030e8:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
240030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240030ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240030f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
240030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
240030fa:	9303      	str	r3, [sp, #12]
240030fc:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240030fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24003102:	f043 0302 	orr.w	r3, r3, #2
24003106:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400310a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400310e:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24003110:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24003114:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24003118:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400311a:	a906      	add	r1, sp, #24
2400311c:	4825      	ldr	r0, [pc, #148]	; (240031b4 <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400311e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24003120:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24003124:	f003 f9d8 	bl	240064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24003128:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400312c:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400312e:	a906      	add	r1, sp, #24
24003130:	481c      	ldr	r0, [pc, #112]	; (240031a4 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24003132:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24003134:	e9cd 2306 	strd	r2, r3, [sp, #24]
24003138:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400313c:	f003 f9cc 	bl	240064d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24003140:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24003144:	2200      	movs	r2, #0
24003146:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
24003148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
2400314c:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
2400314e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
24003152:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2400315a:	9305      	str	r3, [sp, #20]
2400315c:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
2400315e:	f001 fce9 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
24003162:	2021      	movs	r0, #33	; 0x21
24003164:	f001 fd24 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
24003168:	2200      	movs	r2, #0
2400316a:	2101      	movs	r1, #1
2400316c:	2022      	movs	r0, #34	; 0x22
2400316e:	f001 fce1 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
24003172:	2022      	movs	r0, #34	; 0x22
24003174:	f001 fd1c 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
}
24003178:	b03d      	add	sp, #244	; 0xf4
2400317a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
2400317c:	f000 ffb4 	bl	240040e8 <Error_Handler>
24003180:	e78e      	b.n	240030a0 <HAL_I2C_MspInit+0x110>
      Error_Handler();
24003182:	f000 ffb1 	bl	240040e8 <Error_Handler>
24003186:	e76a      	b.n	2400305e <HAL_I2C_MspInit+0xce>
      Error_Handler();
24003188:	f000 ffae 	bl	240040e8 <Error_Handler>
2400318c:	e721      	b.n	24002fd2 <HAL_I2C_MspInit+0x42>
      Error_Handler();
2400318e:	f000 ffab 	bl	240040e8 <Error_Handler>
24003192:	e7a2      	b.n	240030da <HAL_I2C_MspInit+0x14a>
24003194:	40005400 	.word	0x40005400
24003198:	40005800 	.word	0x40005800
2400319c:	58024400 	.word	0x58024400
240031a0:	20014818 	.word	0x20014818
240031a4:	58020400 	.word	0x58020400
240031a8:	40020058 	.word	0x40020058
240031ac:	20014890 	.word	0x20014890
240031b0:	40020070 	.word	0x40020070
240031b4:	58021c00 	.word	0x58021c00

240031b8 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
240031b8:	4770      	bx	lr
240031ba:	bf00      	nop
240031bc:	0000      	movs	r0, r0
	...

240031c0 <SystemClock_Config>:
{
240031c0:	b500      	push	{lr}
240031c2:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240031c4:	224c      	movs	r2, #76	; 0x4c
240031c6:	2100      	movs	r1, #0
240031c8:	a80c      	add	r0, sp, #48	; 0x30
240031ca:	f014 feed 	bl	24017fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240031ce:	2220      	movs	r2, #32
240031d0:	2100      	movs	r1, #0
240031d2:	a804      	add	r0, sp, #16
240031d4:	f014 fee8 	bl	24017fa8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240031d8:	2002      	movs	r0, #2
240031da:	f004 f9bd 	bl	24007558 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
240031de:	4b3e      	ldr	r3, [pc, #248]	; (240032d8 <SystemClock_Config+0x118>)
240031e0:	2100      	movs	r1, #0
240031e2:	4a3e      	ldr	r2, [pc, #248]	; (240032dc <SystemClock_Config+0x11c>)
240031e4:	9101      	str	r1, [sp, #4]
240031e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240031e8:	f021 0101 	bic.w	r1, r1, #1
240031ec:	62d9      	str	r1, [r3, #44]	; 0x2c
240031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240031f0:	f003 0301 	and.w	r3, r3, #1
240031f4:	9301      	str	r3, [sp, #4]
240031f6:	6993      	ldr	r3, [r2, #24]
240031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240031fc:	6193      	str	r3, [r2, #24]
240031fe:	6993      	ldr	r3, [r2, #24]
24003200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24003204:	9301      	str	r3, [sp, #4]
24003206:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24003208:	6993      	ldr	r3, [r2, #24]
2400320a:	0499      	lsls	r1, r3, #18
2400320c:	d5fc      	bpl.n	24003208 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400320e:	4b34      	ldr	r3, [pc, #208]	; (240032e0 <SystemClock_Config+0x120>)
24003210:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24003214:	f041 0102 	orr.w	r1, r1, #2
24003218:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400321c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400321e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24003222:	f003 0302 	and.w	r3, r3, #2
24003226:	9302      	str	r3, [sp, #8]
24003228:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400322a:	9103      	str	r1, [sp, #12]
2400322c:	6991      	ldr	r1, [r2, #24]
2400322e:	4b2a      	ldr	r3, [pc, #168]	; (240032d8 <SystemClock_Config+0x118>)
24003230:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
24003234:	6191      	str	r1, [r2, #24]
24003236:	6992      	ldr	r2, [r2, #24]
24003238:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
2400323c:	9203      	str	r2, [sp, #12]
2400323e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24003240:	4a26      	ldr	r2, [pc, #152]	; (240032dc <SystemClock_Config+0x11c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24003242:	f041 0101 	orr.w	r1, r1, #1
24003246:	62d9      	str	r1, [r3, #44]	; 0x2c
24003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400324a:	f003 0301 	and.w	r3, r3, #1
2400324e:	9303      	str	r3, [sp, #12]
24003250:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24003252:	6993      	ldr	r3, [r2, #24]
24003254:	049b      	lsls	r3, r3, #18
24003256:	d5fc      	bpl.n	24003252 <SystemClock_Config+0x92>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24003258:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
2400325a:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2400325c:	2200      	movs	r2, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2400325e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
24003260:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24003262:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
24003264:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
24003266:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24003268:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
2400326a:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
2400326c:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2400326e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24003272:	2306      	movs	r3, #6
24003274:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
24003276:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24003278:	ed9f 7b11 	vldr	d7, [pc, #68]	; 240032c0 <SystemClock_Config+0x100>
  RCC_OscInitStruct.PLL.PLLR = 8;
2400327c:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400327e:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24003280:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24003284:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24003286:	f004 fa0f 	bl	240076a8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400328a:	2200      	movs	r2, #0
2400328c:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400328e:	2104      	movs	r1, #4
24003290:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24003292:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 240032c8 <SystemClock_Config+0x108>
24003296:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400329a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2400329e:	2340      	movs	r3, #64	; 0x40
240032a0:	ed8d 7b04 	vstr	d7, [sp, #16]
240032a4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 240032d0 <SystemClock_Config+0x110>
240032a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
240032ac:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240032b0:	f004 fd8c 	bl	24007dcc <HAL_RCC_ClockConfig>
}
240032b4:	b021      	add	sp, #132	; 0x84
240032b6:	f85d fb04 	ldr.w	pc, [sp], #4
240032ba:	bf00      	nop
240032bc:	f3af 8000 	nop.w
240032c0:	00000021 	.word	0x00000021
240032c4:	00010000 	.word	0x00010000
240032c8:	0000003f 	.word	0x0000003f
240032cc:	00000003 	.word	0x00000003
240032d0:	00000040 	.word	0x00000040
240032d4:	00000040 	.word	0x00000040
240032d8:	58000400 	.word	0x58000400
240032dc:	58024800 	.word	0x58024800
240032e0:	58024400 	.word	0x58024400
240032e4:	00000000 	.word	0x00000000

240032e8 <PeriphCommonClock_Config>:
{
240032e8:	b500      	push	{lr}
240032ea:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240032ec:	2100      	movs	r1, #0
240032ee:	2280      	movs	r2, #128	; 0x80
240032f0:	a810      	add	r0, sp, #64	; 0x40
240032f2:	f014 fe59 	bl	24017fa8 <memset>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
240032f6:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
240032f8:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240032fa:	4668      	mov	r0, sp
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
240032fc:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
240032fe:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24003300:	23c0      	movs	r3, #192	; 0xc0
24003302:	ed9f 7b15 	vldr	d7, [pc, #84]	; 24003358 <PeriphCommonClock_Config+0x70>
24003306:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400330a:	2201      	movs	r2, #1
2400330c:	230c      	movs	r3, #12
2400330e:	ed8d 7b02 	vstr	d7, [sp, #8]
24003312:	ed9f 7b13 	vldr	d7, [pc, #76]	; 24003360 <PeriphCommonClock_Config+0x78>
24003316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
2400331a:	2210      	movs	r2, #16
2400331c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24003320:	ed8d 7b04 	vstr	d7, [sp, #16]
24003324:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24003368 <PeriphCommonClock_Config+0x80>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24003328:	ed9f 6b11 	vldr	d6, [pc, #68]	; 24003370 <PeriphCommonClock_Config+0x88>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400332c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
24003330:	ed8d 7b08 	vstr	d7, [sp, #32]
24003334:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24003378 <PeriphCommonClock_Config+0x90>
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24003338:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400333c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24003340:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24003344:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24003348:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
2400334a:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400334c:	f004 ffee 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
}
24003350:	b031      	add	sp, #196	; 0xc4
24003352:	f85d fb04 	ldr.w	pc, [sp], #4
24003356:	bf00      	nop
24003358:	00000001 	.word	0x00000001
2400335c:	0000000a 	.word	0x0000000a
24003360:	00000008 	.word	0x00000008
24003364:	00000002 	.word	0x00000002
24003368:	00000020 	.word	0x00000020
2400336c:	00001000 	.word	0x00001000
24003370:	01010100 	.word	0x01010100
24003374:	00000000 	.word	0x00000000
24003378:	00000004 	.word	0x00000004
2400337c:	00000008 	.word	0x00000008

24003380 <randomNumber>:
float randomNumber(void) {
24003380:	b500      	push	{lr}
24003382:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24003384:	4807      	ldr	r0, [pc, #28]	; (240033a4 <randomNumber+0x24>)
24003386:	a901      	add	r1, sp, #4
24003388:	f006 f9f8 	bl	2400977c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
2400338c:	eddd 7a01 	vldr	s15, [sp, #4]
24003390:	ed9f 0a05 	vldr	s0, [pc, #20]	; 240033a8 <randomNumber+0x28>
24003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
24003398:	ee27 0a80 	vmul.f32	s0, s15, s0
2400339c:	b003      	add	sp, #12
2400339e:	f85d fb04 	ldr.w	pc, [sp], #4
240033a2:	bf00      	nop
240033a4:	2001aa4c 	.word	0x2001aa4c
240033a8:	2f80000d 	.word	0x2f80000d

240033ac <BSP_SD_IsDetected>:
{
240033ac:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240033ae:	2301      	movs	r3, #1
240033b0:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
240033b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
240033b8:	b002      	add	sp, #8
240033ba:	4770      	bx	lr

240033bc <getPresetNamesFromSDCard>:
{
240033bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240033c0:	2401      	movs	r4, #1
{
240033c2:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
240033c4:	f88d 4003 	strb.w	r4, [sp, #3]
  return status;
240033c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
240033cc:	b93b      	cbnz	r3, 240033de <getPresetNamesFromSDCard+0x22>
240033ce:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2400342c <getPresetNamesFromSDCard+0x70>
	diskBusy = 0;
240033d2:	2300      	movs	r3, #0
240033d4:	f88a 3000 	strb.w	r3, [sl]
}
240033d8:	b009      	add	sp, #36	; 0x24
240033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
240033de:	2500      	movs	r5, #0
240033e0:	4b0d      	ldr	r3, [pc, #52]	; (24003418 <getPresetNamesFromSDCard+0x5c>)
		diskBusy = 1;
240033e2:	f8df a048 	ldr.w	sl, [pc, #72]	; 2400342c <getPresetNamesFromSDCard+0x70>
		disk_initialize(0);
240033e6:	4628      	mov	r0, r5
		loadFailed = 0;
240033e8:	701d      	strb	r5, [r3, #0]
		diskBusy = 1;
240033ea:	f88a 4000 	strb.w	r4, [sl]
		disk_initialize(0);
240033ee:	f009 fe25 	bl	2400d03c <disk_initialize>
	    disk_status(0);
240033f2:	4628      	mov	r0, r5
240033f4:	f009 fe18 	bl	2400d028 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240033f8:	4622      	mov	r2, r4
240033fa:	4908      	ldr	r1, [pc, #32]	; (2400341c <getPresetNamesFromSDCard+0x60>)
240033fc:	4808      	ldr	r0, [pc, #32]	; (24003420 <getPresetNamesFromSDCard+0x64>)
240033fe:	f00c f815 	bl	2400f42c <f_mount>
24003402:	2800      	cmp	r0, #0
24003404:	d1e5      	bne.n	240033d2 <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24003406:	4605      	mov	r5, r0
24003408:	4e06      	ldr	r6, [pc, #24]	; (24003424 <getPresetNamesFromSDCard+0x68>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400340a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2400341c <getPresetNamesFromSDCard+0x60>
2400340e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 24003430 <getPresetNamesFromSDCard+0x74>
24003412:	4f05      	ldr	r7, [pc, #20]	; (24003428 <getPresetNamesFromSDCard+0x6c>)
24003414:	e024      	b.n	24003460 <getPresetNamesFromSDCard+0xa4>
24003416:	bf00      	nop
24003418:	20016ba0 	.word	0x20016ba0
2400341c:	2001b408 	.word	0x2001b408
24003420:	2001afa8 	.word	0x2001afa8
24003424:	2401a634 	.word	0x2401a634
24003428:	200149b8 	.word	0x200149b8
2400342c:	200149f0 	.word	0x200149f0
24003430:	20016a54 	.word	0x20016a54
					strcat(charBuf, ".ebp");
24003434:	ab02      	add	r3, sp, #8
24003436:	6830      	ldr	r0, [r6, #0]
24003438:	ac02      	add	r4, sp, #8
2400343a:	1899      	adds	r1, r3, r2
2400343c:	7933      	ldrb	r3, [r6, #4]
2400343e:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
24003440:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24003442:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
24003444:	a805      	add	r0, sp, #20
24003446:	4621      	mov	r1, r4
24003448:	f014 fda0 	bl	24017f8c <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400344c:	ab05      	add	r3, sp, #20
2400344e:	464a      	mov	r2, r9
24003450:	4641      	mov	r1, r8
24003452:	4638      	mov	r0, r7
24003454:	f00c fd2c 	bl	2400feb0 <f_findfirst>
				if(res == FR_OK)
24003458:	b358      	cbz	r0, 240034b2 <getPresetNamesFromSDCard+0xf6>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400345a:	3501      	adds	r5, #1
2400345c:	2d40      	cmp	r5, #64	; 0x40
2400345e:	d0b8      	beq.n	240033d2 <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
24003460:	220a      	movs	r2, #10
24003462:	a902      	add	r1, sp, #8
24003464:	4628      	mov	r0, r5
24003466:	f014 fd8f 	bl	24017f88 <itoa>
				int len = ((strlen(charBuf)));
2400346a:	a802      	add	r0, sp, #8
2400346c:	f7fc ff34 	bl	240002d8 <strlen>
				if (len == 1)
24003470:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24003472:	4602      	mov	r2, r0
				if (len == 1)
24003474:	d1de      	bne.n	24003434 <getPresetNamesFromSDCard+0x78>
					finalString[2] = charBuf[1];
24003476:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
2400347a:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
2400347c:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
24003480:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24003482:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
24003486:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
2400348a:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
2400348e:	f7fc ff23 	bl	240002d8 <strlen>
24003492:	aa05      	add	r2, sp, #20
24003494:	4603      	mov	r3, r0
24003496:	a905      	add	r1, sp, #20
24003498:	4402      	add	r2, r0
2400349a:	6830      	ldr	r0, [r6, #0]
2400349c:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400349e:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
240034a0:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240034a2:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
240034a4:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240034a6:	ab05      	add	r3, sp, #20
240034a8:	464a      	mov	r2, r9
240034aa:	f00c fd01 	bl	2400feb0 <f_findfirst>
				if(res == FR_OK)
240034ae:	2800      	cmp	r0, #0
240034b0:	d1d3      	bne.n	2400345a <getPresetNamesFromSDCard+0x9e>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
240034b2:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 24003888 <getPresetNamesFromSDCard+0x4cc>
240034b6:	2211      	movs	r2, #17
240034b8:	49ef      	ldr	r1, [pc, #956]	; (24003878 <getPresetNamesFromSDCard+0x4bc>)
240034ba:	4658      	mov	r0, fp
240034bc:	f00c f808 	bl	2400f4d0 <f_open>
240034c0:	2800      	cmp	r0, #0
240034c2:	d1ca      	bne.n	2400345a <getPresetNamesFromSDCard+0x9e>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
240034c4:	4ced      	ldr	r4, [pc, #948]	; (2400387c <getPresetNamesFromSDCard+0x4c0>)
240034c6:	ab01      	add	r3, sp, #4
240034c8:	f8db 200c 	ldr.w	r2, [fp, #12]
240034cc:	4658      	mov	r0, fp
240034ce:	4621      	mov	r1, r4
240034d0:	f00c f97c 	bl	2400f7cc <f_read>
						f_close(&SDFile);
240034d4:	4658      	mov	r0, fp
240034d6:	f00c fbe1 	bl	2400fc9c <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
240034da:	7823      	ldrb	r3, [r4, #0]
240034dc:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
240034e0:	4ae7      	ldr	r2, [pc, #924]	; (24003880 <getPresetNamesFromSDCard+0x4c4>)
240034e2:	f894 c001 	ldrb.w	ip, [r4, #1]
240034e6:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
240034ea:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240034ee:	48e5      	ldr	r0, [pc, #916]	; (24003884 <getPresetNamesFromSDCard+0x4c8>)
							presetNamesArray[i][j] = buffer[bufferIndex];
240034f0:	f882 c001 	strb.w	ip, [r2, #1]
240034f4:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240034f8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
240034fc:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
240034fe:	f882 c002 	strb.w	ip, [r2, #2]
24003502:	f894 c003 	ldrb.w	ip, [r4, #3]
24003506:	f882 c003 	strb.w	ip, [r2, #3]
2400350a:	f894 c004 	ldrb.w	ip, [r4, #4]
2400350e:	f882 c004 	strb.w	ip, [r2, #4]
24003512:	f894 c005 	ldrb.w	ip, [r4, #5]
24003516:	f882 c005 	strb.w	ip, [r2, #5]
2400351a:	f894 c006 	ldrb.w	ip, [r4, #6]
2400351e:	f882 c006 	strb.w	ip, [r2, #6]
24003522:	f894 c007 	ldrb.w	ip, [r4, #7]
24003526:	f882 c007 	strb.w	ip, [r2, #7]
2400352a:	f894 c008 	ldrb.w	ip, [r4, #8]
2400352e:	f882 c008 	strb.w	ip, [r2, #8]
24003532:	f894 c009 	ldrb.w	ip, [r4, #9]
24003536:	f882 c009 	strb.w	ip, [r2, #9]
2400353a:	f894 c00a 	ldrb.w	ip, [r4, #10]
2400353e:	f882 c00a 	strb.w	ip, [r2, #10]
24003542:	f894 c00b 	ldrb.w	ip, [r4, #11]
24003546:	f882 c00b 	strb.w	ip, [r2, #11]
2400354a:	f894 c00c 	ldrb.w	ip, [r4, #12]
2400354e:	f882 c00c 	strb.w	ip, [r2, #12]
24003552:	f894 c00d 	ldrb.w	ip, [r4, #13]
24003556:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400355a:	7ba2      	ldrb	r2, [r4, #14]
2400355c:	5442      	strb	r2, [r0, r1]
2400355e:	7be2      	ldrb	r2, [r4, #15]
24003560:	705a      	strb	r2, [r3, #1]
24003562:	7c22      	ldrb	r2, [r4, #16]
24003564:	709a      	strb	r2, [r3, #2]
24003566:	7c62      	ldrb	r2, [r4, #17]
24003568:	70da      	strb	r2, [r3, #3]
2400356a:	7ca2      	ldrb	r2, [r4, #18]
2400356c:	711a      	strb	r2, [r3, #4]
2400356e:	7ce2      	ldrb	r2, [r4, #19]
24003570:	715a      	strb	r2, [r3, #5]
24003572:	7d22      	ldrb	r2, [r4, #20]
24003574:	719a      	strb	r2, [r3, #6]
24003576:	7d62      	ldrb	r2, [r4, #21]
24003578:	71da      	strb	r2, [r3, #7]
2400357a:	7da2      	ldrb	r2, [r4, #22]
2400357c:	721a      	strb	r2, [r3, #8]
2400357e:	7de2      	ldrb	r2, [r4, #23]
24003580:	725a      	strb	r2, [r3, #9]
24003582:	7e22      	ldrb	r2, [r4, #24]
24003584:	729a      	strb	r2, [r3, #10]
24003586:	7e62      	ldrb	r2, [r4, #25]
24003588:	72da      	strb	r2, [r3, #11]
2400358a:	7ea2      	ldrb	r2, [r4, #26]
2400358c:	731a      	strb	r2, [r3, #12]
2400358e:	7ee2      	ldrb	r2, [r4, #27]
24003590:	735a      	strb	r2, [r3, #13]
24003592:	7f22      	ldrb	r2, [r4, #28]
24003594:	739a      	strb	r2, [r3, #14]
24003596:	7f62      	ldrb	r2, [r4, #29]
24003598:	73da      	strb	r2, [r3, #15]
2400359a:	7fa2      	ldrb	r2, [r4, #30]
2400359c:	741a      	strb	r2, [r3, #16]
2400359e:	7fe2      	ldrb	r2, [r4, #31]
240035a0:	745a      	strb	r2, [r3, #17]
240035a2:	f894 2020 	ldrb.w	r2, [r4, #32]
240035a6:	749a      	strb	r2, [r3, #18]
240035a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
240035ac:	74da      	strb	r2, [r3, #19]
240035ae:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
240035b2:	751a      	strb	r2, [r3, #20]
240035b4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
240035b8:	755a      	strb	r2, [r3, #21]
240035ba:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
240035be:	759a      	strb	r2, [r3, #22]
240035c0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
240035c4:	75da      	strb	r2, [r3, #23]
240035c6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
240035ca:	761a      	strb	r2, [r3, #24]
240035cc:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
240035d0:	765a      	strb	r2, [r3, #25]
240035d2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
240035d6:	769a      	strb	r2, [r3, #26]
240035d8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
240035dc:	76da      	strb	r2, [r3, #27]
240035de:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
240035e2:	771a      	strb	r2, [r3, #28]
240035e4:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
240035e8:	775a      	strb	r2, [r3, #29]
240035ea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
240035ee:	779a      	strb	r2, [r3, #30]
240035f0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
240035f4:	77da      	strb	r2, [r3, #31]
240035f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
240035fa:	f883 2020 	strb.w	r2, [r3, #32]
240035fe:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
24003602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
24003606:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
2400360a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
2400360e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
24003612:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
24003616:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
2400361a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
2400361e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
24003622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
24003626:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
2400362a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
2400362e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
24003632:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
24003636:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
2400363a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
2400363e:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
24003642:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
24003646:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
2400364a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
2400364e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
24003652:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
24003656:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
2400365a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
2400365e:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
24003662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
24003666:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
2400366a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
2400366e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
24003672:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
24003676:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
2400367a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
2400367e:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
24003682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
24003686:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
2400368a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
2400368e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24003692:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
24003696:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
2400369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2400369e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
240036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
240036a6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
240036aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
240036ae:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
240036b2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
240036b6:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
240036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
240036be:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
240036c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
240036c6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
240036ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
240036ce:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
240036d2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
240036d6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
240036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
240036de:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
240036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
240036e6:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
240036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
240036ee:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
240036f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
240036f6:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
240036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
240036fe:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
24003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24003706:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
2400370a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
2400370e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
24003712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
24003716:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
2400371a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2400371e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
24003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
24003726:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
2400372a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
2400372e:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
24003732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
24003736:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
2400373a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
2400373e:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
24003742:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
24003746:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
2400374a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
2400374e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
24003752:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
24003756:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
2400375a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
2400375e:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
24003762:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
24003766:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
2400376a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
2400376e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
24003772:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
24003776:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
2400377a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
2400377e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
24003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
24003786:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
2400378a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
2400378e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
24003792:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
24003796:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
2400379a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2400379e:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
240037a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
240037a6:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
240037aa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
240037ae:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
240037b2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
240037b6:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
240037ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
240037be:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
240037c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
240037c6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
240037ca:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
240037ce:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
240037d2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
240037d6:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
240037da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
240037de:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
240037e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
240037e6:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
240037ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
240037ee:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
240037f2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
240037f6:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
240037fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
240037fe:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
24003802:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
24003806:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
2400380a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
2400380e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
24003812:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
24003816:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
2400381a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
2400381e:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
24003822:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
24003826:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
2400382a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
2400382e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
24003832:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
24003836:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
2400383a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
2400383e:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
24003842:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
24003846:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
2400384a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
2400384e:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
24003852:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
24003856:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
2400385a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
2400385e:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
24003862:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
24003866:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
2400386a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
2400386e:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
24003872:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
24003876:	e5f0      	b.n	2400345a <getPresetNamesFromSDCard+0x9e>
24003878:	20016a6a 	.word	0x20016a6a
2400387c:	30000180 	.word	0x30000180
24003880:	3003a000 	.word	0x3003a000
24003884:	3003c380 	.word	0x3003c380
24003888:	2001b1dc 	.word	0x2001b1dc

2400388c <SDRAM_init>:
{
2400388c:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
2400388e:	2300      	movs	r3, #0
{
24003890:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24003892:	4c22      	ldr	r4, [pc, #136]	; (2400391c <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24003894:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
24003896:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24003898:	2310      	movs	r3, #16
2400389a:	2601      	movs	r6, #1
2400389c:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400389e:	a902      	add	r1, sp, #8
240038a0:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
240038a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
240038aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038ae:	f007 fad7 	bl	2400ae60 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
240038b2:	2064      	movs	r0, #100	; 0x64
240038b4:	f001 f914 	bl	24004ae0 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038b8:	a902      	add	r1, sp, #8
240038ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240038be:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
240038c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
240038c4:	2602      	movs	r6, #2
240038c6:	2710      	movs	r7, #16
240038c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038cc:	f007 fac8 	bl	2400ae60 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
240038d0:	2003      	movs	r0, #3
240038d2:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
240038d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
240038dc:	2004      	movs	r0, #4
240038de:	2100      	movs	r1, #0
240038e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038e4:	a902      	add	r1, sp, #8
240038e6:	4620      	mov	r0, r4
240038e8:	f007 faba 	bl	2400ae60 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
240038ec:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
240038f0:	2204      	movs	r2, #4
240038f2:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
240038f4:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
240038f6:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
240038f8:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
240038fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
240038fe:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24003900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24003904:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24003908:	4620      	mov	r0, r4
2400390a:	f007 faa9 	bl	2400ae60 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
2400390e:	f640 0106 	movw	r1, #2054	; 0x806
24003912:	4620      	mov	r0, r4
24003914:	f007 fac4 	bl	2400aea0 <HAL_SDRAM_ProgramRefreshRate>
}
24003918:	b006      	add	sp, #24
2400391a:	bdd0      	pop	{r4, r6, r7, pc}
2400391c:	200147e4 	.word	0x200147e4

24003920 <main>:
{
24003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24003924:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24003926:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24003928:	2604      	movs	r6, #4
{
2400392a:	ed2d 8b02 	vpush	{d8}
2400392e:	b093      	sub	sp, #76	; 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24003930:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
24003934:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_MPU_Disable();
24003938:	f001 f972 	bl	24004c20 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
2400393c:	f248 731f 	movw	r3, #34591	; 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003940:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24003942:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003946:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
2400394a:	f240 1301 	movw	r3, #257	; 0x101
2400394e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003950:	f001 f984 	bl	24004c5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
24003954:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003958:	f8df c3c8 	ldr.w	ip, [pc, #968]	; 24003d24 <main+0x404>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400395c:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
2400395e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x024000000;
24003962:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003964:	4bcb      	ldr	r3, [pc, #812]	; (24003c94 <main+0x374>)
24003966:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400396a:	f001 f977 	bl	24004c5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
2400396e:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003970:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24003972:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24003976:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x24040000;
2400397a:	4bc7      	ldr	r3, [pc, #796]	; (24003c98 <main+0x378>)
2400397c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400397e:	f001 f96d 	bl	24004c5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24003982:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003984:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24003986:	f8ad 503d 	strh.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400398a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x30000000;
2400398e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
24003992:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24003994:	230c      	movs	r3, #12
24003996:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400399a:	f001 f95f 	bl	24004c5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30002000;
2400399e:	4bbf      	ldr	r3, [pc, #764]	; (24003c9c <main+0x37c>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039a0:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
240039a2:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x30002000;
240039a6:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
240039a8:	2311      	movs	r3, #17
240039aa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
240039ae:	f44f 7380 	mov.w	r3, #256	; 0x100
240039b2:	f8ad 303d 	strh.w	r3, [sp, #61]	; 0x3d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039b6:	f001 f951 	bl	24004c5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
240039ba:	2305      	movs	r3, #5
  MPU_InitStruct.BaseAddress = 0x38000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039bc:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
240039be:	f8ad 503d 	strh.w	r5, [sp, #61]	; 0x3d
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
240039c2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x38000000;
240039c6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
240039ca:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240039cc:	230f      	movs	r3, #15
240039ce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039d2:	f001 f943 	bl	24004c5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
240039d6:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
240039da:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039dc:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
240039de:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
  MPU_InitStruct.BaseAddress = 0x38800000;
240039e2:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240039e4:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
240039e6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240039ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039ee:	f001 f935 	bl	24004c5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240039f2:	2107      	movs	r1, #7
  MPU_InitStruct.BaseAddress = 0xc0000000;
240039f4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240039f8:	2319      	movs	r3, #25

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240039fa:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240039fc:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0xc0000000;
24003a00:	920d      	str	r2, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24003a02:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003a06:	f001 f929 	bl	24004c5c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24003a0a:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
24003a0c:	4ba4      	ldr	r3, [pc, #656]	; (24003ca0 <main+0x380>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003a0e:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24003a10:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  MPU_InitStruct.BaseAddress = 0x90040000;
24003a14:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003a16:	f001 f921 	bl	24004c5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24003a1a:	4630      	mov	r0, r6
24003a1c:	f001 f90e 	bl	24004c3c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24003a20:	4aa0      	ldr	r2, [pc, #640]	; (24003ca4 <main+0x384>)
24003a22:	6953      	ldr	r3, [r2, #20]
24003a24:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
24003a28:	d111      	bne.n	24003a4e <main+0x12e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24003a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003a2e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24003a32:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
24003a36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003a3a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24003a3e:	6953      	ldr	r3, [r2, #20]
24003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24003a44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
24003a46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003a4a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24003a4e:	4895      	ldr	r0, [pc, #596]	; (24003ca4 <main+0x384>)
24003a50:	6943      	ldr	r3, [r0, #20]
24003a52:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24003a56:	d124      	bne.n	24003aa2 <main+0x182>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24003a58:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24003a5c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24003a60:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003a64:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24003a68:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003a6c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24003a70:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003a72:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003a76:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003a78:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24003a7c:	3b01      	subs	r3, #1
24003a7e:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003a80:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
24003a84:	d1f8      	bne.n	24003a78 <main+0x158>
    } while(sets-- != 0U);
24003a86:	3c20      	subs	r4, #32
24003a88:	f114 0f20 	cmn.w	r4, #32
24003a8c:	d1f1      	bne.n	24003a72 <main+0x152>
24003a8e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24003a92:	6943      	ldr	r3, [r0, #20]
24003a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24003a98:	6143      	str	r3, [r0, #20]
24003a9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003a9e:	f3bf 8f6f 	isb	sy
  HAL_Init();
24003aa2:	f000 ffdb 	bl	24004a5c <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24003aa6:	b662      	cpsie	i
  SystemClock_Config();
24003aa8:	f7ff fb8a 	bl	240031c0 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003aac:	4e7e      	ldr	r6, [pc, #504]	; (24003ca8 <main+0x388>)
  PeriphCommonClock_Config();
24003aae:	f7ff fc1b 	bl	240032e8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
24003ab2:	f7ff f885 	bl	24002bc0 <MX_GPIO_Init>
  MX_DMA_Init();
24003ab6:	f7fe ff87 	bl	240029c8 <MX_DMA_Init>
  MX_BDMA_Init();
24003aba:	f7fe fec1 	bl	24002840 <MX_BDMA_Init>
  MX_I2C2_Init();
24003abe:	f7ff fa31 	bl	24002f24 <MX_I2C2_Init>
  MX_SAI1_Init();
24003ac2:	f000 fb53 	bl	2400416c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24003ac6:	f000 fc5d 	bl	24004384 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24003aca:	f000 fcc9 	bl	24004460 <MX_SPI1_Init>
  MX_I2C1_Init();
24003ace:	f7ff f9f1 	bl	24002eb4 <MX_I2C1_Init>
  MX_FMC_Init();
24003ad2:	f7fe ffc5 	bl	24002a60 <MX_FMC_Init>
  MX_FATFS_Init();
24003ad6:	f009 f9c7 	bl	2400ce68 <MX_FATFS_Init>
  MX_SPI6_Init();
24003ada:	f000 fced 	bl	240044b8 <MX_SPI6_Init>
  MX_RNG_Init();
24003ade:	f000 fb05 	bl	240040ec <MX_RNG_Init>
  HAL_Delay(500);
24003ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24003ae6:	f000 fffb 	bl	24004ae0 <HAL_Delay>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24003aee:	486f      	ldr	r0, [pc, #444]	; (24003cac <main+0x38c>)
24003af0:	f002 fe3c 	bl	2400676c <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
24003af8:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003afa:	486c      	ldr	r0, [pc, #432]	; (24003cac <main+0x38c>)
24003afc:	f002 fe36 	bl	2400676c <HAL_GPIO_ReadPin>
24003b00:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24003b02:	2104      	movs	r1, #4
24003b04:	486a      	ldr	r0, [pc, #424]	; (24003cb0 <main+0x390>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003b06:	00a4      	lsls	r4, r4, #2
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24003b08:	f002 fe30 	bl	2400676c <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003b0c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
24003b10:	4420      	add	r0, r4
24003b12:	b2c4      	uxtb	r4, r0
24003b14:	7034      	strb	r4, [r6, #0]
	if (boardNumber == 0)
24003b16:	2c00      	cmp	r4, #0
24003b18:	f000 829c 	beq.w	24004054 <main+0x734>
   PWR->CR1 |= PWR_CR1_DBP;
24003b1c:	4a65      	ldr	r2, [pc, #404]	; (24003cb4 <main+0x394>)
24003b1e:	6813      	ldr	r3, [r2, #0]
24003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003b24:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24003b26:	6813      	ldr	r3, [r2, #0]
24003b28:	05d9      	lsls	r1, r3, #23
24003b2a:	d5fc      	bpl.n	24003b26 <main+0x206>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003b2c:	4b62      	ldr	r3, [pc, #392]	; (24003cb8 <main+0x398>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003b2e:	2200      	movs	r2, #0
24003b30:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003b32:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24003b36:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
24003b3a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
24003b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003b42:	485e      	ldr	r0, [pc, #376]	; (24003cbc <main+0x39c>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24003b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24003b48:	9307      	str	r3, [sp, #28]
24003b4a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003b4c:	f002 fe14 	bl	24006778 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
24003b50:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24003b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24003b58:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003b5c:	4a51      	ldr	r2, [pc, #324]	; (24003ca4 <main+0x384>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003b5e:	4958      	ldr	r1, [pc, #352]	; (24003cc0 <main+0x3a0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003b60:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
24003b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24003b68:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003b6c:	f8d1 3fb4 	ldr.w	r3, [r1, #4020]	; 0xfb4
24003b70:	07db      	lsls	r3, r3, #31
24003b72:	d502      	bpl.n	24003b7a <main+0x25a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24003b74:	4b53      	ldr	r3, [pc, #332]	; (24003cc4 <main+0x3a4>)
24003b76:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24003b7a:	4b51      	ldr	r3, [pc, #324]	; (24003cc0 <main+0x3a0>)
24003b7c:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
24003b7e:	4a52      	ldr	r2, [pc, #328]	; (24003cc8 <main+0x3a8>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003b80:	2405      	movs	r4, #5
  DWT->CYCCNT = 0;
24003b82:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
24003b84:	601a      	str	r2, [r3, #0]
	  buffer[i] = 0;
24003b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003b8a:	4b50      	ldr	r3, [pc, #320]	; (24003ccc <main+0x3ac>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003b8c:	4d48      	ldr	r5, [pc, #288]	; (24003cb0 <main+0x390>)
	  buffer[i] = 0;
24003b8e:	4618      	mov	r0, r3
24003b90:	f014 fa0a 	bl	24017fa8 <memset>
  buffer[15+112] = NUM_PARAMS;
24003b94:	229b      	movs	r2, #155	; 0x9b
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003b96:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24003b9a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 24003cd0 <main+0x3b0>
  buffer[15+112] = NUM_PARAMS;
24003b9e:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003ba2:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003ba6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
24003baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003bae:	f8a0 21b6 	strh.w	r2, [r0, #438]	; 0x1b6
  buffer[NUM_PARAMS*2+19+112] = 1;
24003bb2:	2201      	movs	r2, #1
24003bb4:	f880 21b9 	strb.w	r2, [r0, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003bb8:	f64f 62fe 	movw	r2, #65278	; 0xfefe
24003bbc:	f8a0 21bf 	strh.w	r2, [r0, #447]	; 0x1bf
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003bc0:	4844      	ldr	r0, [pc, #272]	; (24003cd4 <main+0x3b4>)
24003bc2:	f00f f80d 	bl	24012be0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24003bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003bca:	ed9f 1a43 	vldr	s2, [pc, #268]	; 24003cd8 <main+0x3b8>
24003bce:	eddf 0a43 	vldr	s1, [pc, #268]	; 24003cdc <main+0x3bc>
24003bd2:	ed9f 0a43 	vldr	s0, [pc, #268]	; 24003ce0 <main+0x3c0>
24003bd6:	4843      	ldr	r0, [pc, #268]	; (24003ce4 <main+0x3c4>)
24003bd8:	f00f f802 	bl	24012be0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003bdc:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24003be0:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24003be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003be8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 24003ce0 <main+0x3c0>
24003bec:	483e      	ldr	r0, [pc, #248]	; (24003ce8 <main+0x3c8>)
24003bee:	f00e fff7 	bl	24012be0 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003bf2:	2201      	movs	r2, #1
24003bf4:	4628      	mov	r0, r5
24003bf6:	4611      	mov	r1, r2
24003bf8:	f002 fdbe 	bl	24006778 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003bfc:	200a      	movs	r0, #10
24003bfe:	f000 ff6f 	bl	24004ae0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
24003c02:	4628      	mov	r0, r5
24003c04:	2200      	movs	r2, #0
24003c06:	2101      	movs	r1, #1
24003c08:	f002 fdb6 	bl	24006778 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24003c0c:	200a      	movs	r0, #10
24003c0e:	f000 ff67 	bl	24004ae0 <HAL_Delay>
  for (int i = 0; i < 5; i++)
24003c12:	3c01      	subs	r4, #1
24003c14:	d1ed      	bne.n	24003bf2 <main+0x2d2>
  if (boardNumber == 0)
24003c16:	7833      	ldrb	r3, [r6, #0]
24003c18:	2b00      	cmp	r3, #0
24003c1a:	f000 81e1 	beq.w	24003fe0 <main+0x6c0>
	  diskBusy = 1;
24003c1e:	4a33      	ldr	r2, [pc, #204]	; (24003cec <main+0x3cc>)
24003c20:	2301      	movs	r3, #1
24003c22:	4933      	ldr	r1, [pc, #204]	; (24003cf0 <main+0x3d0>)
24003c24:	9204      	str	r2, [sp, #16]
24003c26:	9103      	str	r1, [sp, #12]
24003c28:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
24003c2a:	f7ff fe2f 	bl	2400388c <SDRAM_init>
  codec_init(&hi2c2);
24003c2e:	4831      	ldr	r0, [pc, #196]	; (24003cf4 <main+0x3d4>)
24003c30:	f7fe fe22 	bl	24002878 <codec_init>
  audioInit();
24003c34:	f7fc fd14 	bl	24000660 <audioInit>
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003c38:	2234      	movs	r2, #52	; 0x34
24003c3a:	492f      	ldr	r1, [pc, #188]	; (24003cf8 <main+0x3d8>)
24003c3c:	482f      	ldr	r0, [pc, #188]	; (24003cfc <main+0x3dc>)
24003c3e:	f007 fa77 	bl	2400b130 <HAL_SPI_Receive_DMA>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24003c42:	2340      	movs	r3, #64	; 0x40
24003c44:	4a2e      	ldr	r2, [pc, #184]	; (24003d00 <main+0x3e0>)
24003c46:	482f      	ldr	r0, [pc, #188]	; (24003d04 <main+0x3e4>)
24003c48:	18d1      	adds	r1, r2, r3
24003c4a:	f007 fb51 	bl	2400b2f0 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24003c4e:	492e      	ldr	r1, [pc, #184]	; (24003d08 <main+0x3e8>)
24003c50:	482e      	ldr	r0, [pc, #184]	; (24003d0c <main+0x3ec>)
24003c52:	f7fd fd8f 	bl	24001774 <audioStart>
    if (boardNumber !=0)
24003c56:	7831      	ldrb	r1, [r6, #0]
24003c58:	2900      	cmp	r1, #0
24003c5a:	f040 81ac 	bne.w	24003fb6 <main+0x696>
	  if (rand > TWO_TO_31)
24003c5e:	eddf 8a2c 	vldr	s17, [pc, #176]	; 24003d10 <main+0x3f0>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003c62:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 24003d14 <main+0x3f4>
24003c66:	4d2c      	ldr	r5, [pc, #176]	; (24003d18 <main+0x3f8>)
24003c68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 24003d28 <main+0x408>
24003c6c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 24003d2c <main+0x40c>
24003c70:	4c2a      	ldr	r4, [pc, #168]	; (24003d1c <main+0x3fc>)
24003c72:	4f2b      	ldr	r7, [pc, #172]	; (24003d20 <main+0x400>)
	  if (boardNumber == 0)
24003c74:	b949      	cbnz	r1, 24003c8a <main+0x36a>
		  if (presetWaitingToLoad > 0)
24003c76:	9b03      	ldr	r3, [sp, #12]
24003c78:	681b      	ldr	r3, [r3, #0]
24003c7a:	2b00      	cmp	r3, #0
24003c7c:	f040 808f 	bne.w	24003d9e <main+0x47e>
		  else if (presetWaitingToWrite > 0)
24003c80:	f8da 3000 	ldr.w	r3, [sl]
24003c84:	2b00      	cmp	r3, #0
24003c86:	f040 80d9 	bne.w	24003e3c <main+0x51c>
	  if (presetWaitingToParse > 0)
24003c8a:	682b      	ldr	r3, [r5, #0]
24003c8c:	2b00      	cmp	r3, #0
24003c8e:	d176      	bne.n	24003d7e <main+0x45e>
24003c90:	e04e      	b.n	24003d30 <main+0x410>
24003c92:	bf00      	nop
24003c94:	01010000 	.word	0x01010000
24003c98:	24040000 	.word	0x24040000
24003c9c:	30002000 	.word	0x30002000
24003ca0:	90040000 	.word	0x90040000
24003ca4:	e000ed00 	.word	0xe000ed00
24003ca8:	200149b1 	.word	0x200149b1
24003cac:	58020400 	.word	0x58020400
24003cb0:	58020000 	.word	0x58020000
24003cb4:	58024800 	.word	0x58024800
24003cb8:	58024400 	.word	0x58024400
24003cbc:	58020800 	.word	0x58020800
24003cc0:	e0001000 	.word	0xe0001000
24003cc4:	c5acce55 	.word	0xc5acce55
24003cc8:	40000001 	.word	0x40000001
24003ccc:	30000180 	.word	0x30000180
24003cd0:	3c23d70a 	.word	0x3c23d70a
24003cd4:	20018a48 	.word	0x20018a48
24003cd8:	457a0000 	.word	0x457a0000
24003cdc:	469c4000 	.word	0x469c4000
24003ce0:	00000000 	.word	0x00000000
24003ce4:	20014a44 	.word	0x20014a44
24003ce8:	3003a380 	.word	0x3003a380
24003cec:	200149f0 	.word	0x200149f0
24003cf0:	20018638 	.word	0x20018638
24003cf4:	2001495c 	.word	0x2001495c
24003cf8:	38000000 	.word	0x38000000
24003cfc:	2001af08 	.word	0x2001af08
24003d00:	30000100 	.word	0x30000100
24003d04:	2001ae68 	.word	0x2001ae68
24003d08:	2001ab54 	.word	0x2001ab54
24003d0c:	2001abec 	.word	0x2001abec
24003d10:	4f000000 	.word	0x4f000000
24003d14:	3000000d 	.word	0x3000000d
24003d18:	2001863c 	.word	0x2001863c
24003d1c:	200149b5 	.word	0x200149b5
24003d20:	20018644 	.word	0x20018644
24003d24:	03010011 	.word	0x03010011
24003d28:	20018640 	.word	0x20018640
24003d2c:	2001752c 	.word	0x2001752c
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24003d30:	a90c      	add	r1, sp, #48	; 0x30
24003d32:	48b0      	ldr	r0, [pc, #704]	; (24003ff4 <main+0x6d4>)
24003d34:	f005 fd22 	bl	2400977c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24003d38:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
24003d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24003d40:	eef4 7ae8 	vcmpe.f32	s15, s17
24003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003d48:	dd0c      	ble.n	24003d64 <main+0x444>
		  myTestInt++;
24003d4a:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
24003d4e:	2180      	movs	r1, #128	; 0x80
24003d50:	48a9      	ldr	r0, [pc, #676]	; (24003ff8 <main+0x6d8>)
		  myTestInt++;
24003d52:	3301      	adds	r3, #1
24003d54:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
24003d58:	f002 fd12 	bl	24006780 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
24003d5c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
24003d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003d64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24003d68:	7823      	ldrb	r3, [r4, #0]
	  if (boardNumber == 0)
24003d6a:	7831      	ldrb	r1, [r6, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003d6c:	1c5a      	adds	r2, r3, #1
24003d6e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24003d72:	eea7 7a88 	vfma.f32	s14, s15, s16
24003d76:	7022      	strb	r2, [r4, #0]
24003d78:	ed83 7a00 	vstr	s14, [r3]
  {
24003d7c:	e77a      	b.n	24003c74 <main+0x354>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
24003d7e:	2201      	movs	r2, #1
24003d80:	2180      	movs	r1, #128	; 0x80
24003d82:	489e      	ldr	r0, [pc, #632]	; (24003ffc <main+0x6dc>)
24003d84:	f002 fcf8 	bl	24006778 <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24003d88:	4b9d      	ldr	r3, [pc, #628]	; (24004000 <main+0x6e0>)
24003d8a:	6828      	ldr	r0, [r5, #0]
24003d8c:	7819      	ldrb	r1, [r3, #0]
24003d8e:	f02f fbeb 	bl	24033568 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
24003d92:	2200      	movs	r2, #0
24003d94:	2180      	movs	r1, #128	; 0x80
24003d96:	4899      	ldr	r0, [pc, #612]	; (24003ffc <main+0x6dc>)
24003d98:	f002 fcee 	bl	24006778 <HAL_GPIO_WritePin>
24003d9c:	e7c8      	b.n	24003d30 <main+0x410>
24003d9e:	f04f 0902 	mov.w	r9, #2
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003da2:	f8df b264 	ldr.w	fp, [pc, #612]	; 24004008 <main+0x6e8>
24003da6:	2201      	movs	r2, #1
24003da8:	4658      	mov	r0, fp
24003daa:	4611      	mov	r1, r2
24003dac:	f002 fce4 	bl	24006778 <HAL_GPIO_WritePin>
				  HAL_Delay(1);
24003db0:	2001      	movs	r0, #1
24003db2:	f000 fe95 	bl	24004ae0 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
24003db6:	4658      	mov	r0, fp
24003db8:	2200      	movs	r2, #0
24003dba:	2101      	movs	r1, #1
24003dbc:	f002 fcdc 	bl	24006778 <HAL_GPIO_WritePin>
				  HAL_Delay(1);
24003dc0:	2001      	movs	r0, #1
24003dc2:	f000 fe8d 	bl	24004ae0 <HAL_Delay>
			  for (int i = 0; i < 2; i++)
24003dc6:	f1b9 0f01 	cmp.w	r9, #1
24003dca:	d134      	bne.n	24003e36 <main+0x516>
			  if (!i2cSending)
24003dcc:	4b8d      	ldr	r3, [pc, #564]	; (24004004 <main+0x6e4>)
24003dce:	781b      	ldrb	r3, [r3, #0]
24003dd0:	f003 0bff 	and.w	fp, r3, #255	; 0xff
24003dd4:	2b00      	cmp	r3, #0
24003dd6:	f47f af58 	bne.w	24003c8a <main+0x36a>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003dda:	464a      	mov	r2, r9
24003ddc:	4649      	mov	r1, r9
24003dde:	488a      	ldr	r0, [pc, #552]	; (24004008 <main+0x6e8>)
24003de0:	f002 fcca 	bl	24006778 <HAL_GPIO_WritePin>
				  HAL_Delay(2);
24003de4:	2002      	movs	r0, #2
24003de6:	f000 fe7b 	bl	24004ae0 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
24003dea:	465a      	mov	r2, fp
24003dec:	4649      	mov	r1, r9
24003dee:	4886      	ldr	r0, [pc, #536]	; (24004008 <main+0x6e8>)
24003df0:	f002 fcc2 	bl	24006778 <HAL_GPIO_WritePin>
				  HAL_Delay(2);
24003df4:	2002      	movs	r0, #2
24003df6:	f000 fe73 	bl	24004ae0 <HAL_Delay>
				  checkForSDCardPreset(presetNumberToLoad);
24003dfa:	4b81      	ldr	r3, [pc, #516]	; (24004000 <main+0x6e0>)
	prevVoice = numberToLoad;
24003dfc:	4a83      	ldr	r2, [pc, #524]	; (2400400c <main+0x6ec>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003dfe:	4649      	mov	r1, r9
				  checkForSDCardPreset(presetNumberToLoad);
24003e00:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003e02:	487d      	ldr	r0, [pc, #500]	; (24003ff8 <main+0x6d8>)
				  checkForSDCardPreset(presetNumberToLoad);
24003e04:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
24003e06:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24003e08:	4a81      	ldr	r2, [pc, #516]	; (24004010 <main+0x6f0>)
24003e0a:	9305      	str	r3, [sp, #20]
24003e0c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003e0e:	464a      	mov	r2, r9
24003e10:	f002 fcb2 	bl	24006778 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003e14:	f88d 901a 	strb.w	r9, [sp, #26]
  return status;
24003e18:	f89d 201a 	ldrb.w	r2, [sp, #26]
	if(BSP_SD_IsDetected())
24003e1c:	2a00      	cmp	r2, #0
24003e1e:	d169      	bne.n	24003ef4 <main+0x5d4>
		loadFailed = 1;
24003e20:	2301      	movs	r3, #1
24003e22:	4a7c      	ldr	r2, [pc, #496]	; (24004014 <main+0x6f4>)
24003e24:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
24003e26:	2200      	movs	r2, #0
24003e28:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003e2a:	2101      	movs	r1, #1
24003e2c:	4872      	ldr	r0, [pc, #456]	; (24003ff8 <main+0x6d8>)
	diskBusy = 0;
24003e2e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003e30:	f002 fca2 	bl	24006778 <HAL_GPIO_WritePin>
	return found;
24003e34:	e729      	b.n	24003c8a <main+0x36a>
24003e36:	f04f 0901 	mov.w	r9, #1
24003e3a:	e7b4      	b.n	24003da6 <main+0x486>
				  writePresetToSDCard(presetWaitingToWrite);
24003e3c:	f8da 9000 	ldr.w	r9, [sl]
  __ASM volatile ("cpsid i" : : : "memory");
24003e40:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24003e42:	2280      	movs	r2, #128	; 0x80
24003e44:	4874      	ldr	r0, [pc, #464]	; (24004018 <main+0x6f8>)
24003e46:	f014 f8af 	bl	24017fa8 <memset>
  __IO uint8_t status = SD_PRESENT;
24003e4a:	2301      	movs	r3, #1
24003e4c:	f88d 301b 	strb.w	r3, [sp, #27]
  return status;
24003e50:	f89d 201b 	ldrb.w	r2, [sp, #27]
	if(BSP_SD_IsDetected())
24003e54:	b32a      	cbz	r2, 24003ea2 <main+0x582>
				diskBusy = 1;
24003e56:	9a04      	ldr	r2, [sp, #16]
24003e58:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24003e5a:	4a70      	ldr	r2, [pc, #448]	; (2400401c <main+0x6fc>)
24003e5c:	7813      	ldrb	r3, [r2, #0]
24003e5e:	2b63      	cmp	r3, #99	; 0x63
24003e60:	d901      	bls.n	24003e66 <main+0x546>
			        presetNumberToSave = 99;
24003e62:	2363      	movs	r3, #99	; 0x63
24003e64:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24003e66:	4b6d      	ldr	r3, [pc, #436]	; (2400401c <main+0x6fc>)
24003e68:	220a      	movs	r2, #10
24003e6a:	a909      	add	r1, sp, #36	; 0x24
24003e6c:	7818      	ldrb	r0, [r3, #0]
24003e6e:	f014 f88b 	bl	24017f88 <itoa>
				int len = ((strlen(charBuf)));
24003e72:	a809      	add	r0, sp, #36	; 0x24
24003e74:	f7fc fa30 	bl	240002d8 <strlen>
				if (len == 1)
24003e78:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24003e7a:	4602      	mov	r2, r0
				if (len == 1)
24003e7c:	d018      	beq.n	24003eb0 <main+0x590>
					strcat(charBuf, ".ebp");
24003e7e:	4968      	ldr	r1, [pc, #416]	; (24004020 <main+0x700>)
24003e80:	ab09      	add	r3, sp, #36	; 0x24
24003e82:	6808      	ldr	r0, [r1, #0]
24003e84:	7909      	ldrb	r1, [r1, #4]
24003e86:	5098      	str	r0, [r3, r2]
24003e88:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
24003e8a:	a80c      	add	r0, sp, #48	; 0x30
24003e8c:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24003e8e:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24003e90:	a909      	add	r1, sp, #36	; 0x24
24003e92:	f014 f87b 	bl	24017f8c <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003e96:	220a      	movs	r2, #10
24003e98:	a90c      	add	r1, sp, #48	; 0x30
24003e9a:	4862      	ldr	r0, [pc, #392]	; (24004024 <main+0x704>)
24003e9c:	f00b fb18 	bl	2400f4d0 <f_open>
24003ea0:	b1f0      	cbz	r0, 24003ee0 <main+0x5c0>
	presetWaitingToWrite = 0;
24003ea2:	2300      	movs	r3, #0
	diskBusy = 0;
24003ea4:	9a04      	ldr	r2, [sp, #16]
	presetWaitingToWrite = 0;
24003ea6:	f8ca 3000 	str.w	r3, [sl]
	diskBusy = 0;
24003eaa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24003eac:	b662      	cpsie	i
}
24003eae:	e6ec      	b.n	24003c8a <main+0x36a>
					finalString[2] = charBuf[1];
24003eb0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
24003eb4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
					finalString[1] = charBuf[0];
24003eb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
24003ebc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
					finalString[0] = '0';
24003ec0:	2330      	movs	r3, #48	; 0x30
					strcat(finalString, ".ebp");
24003ec2:	eb0d 0003 	add.w	r0, sp, r3
					finalString[0] = '0';
24003ec6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
					strcat(finalString, ".ebp");
24003eca:	f7fc fa05 	bl	240002d8 <strlen>
24003ece:	4a54      	ldr	r2, [pc, #336]	; (24004020 <main+0x700>)
24003ed0:	4603      	mov	r3, r0
24003ed2:	a90c      	add	r1, sp, #48	; 0x30
24003ed4:	6810      	ldr	r0, [r2, #0]
24003ed6:	7912      	ldrb	r2, [r2, #4]
24003ed8:	50c8      	str	r0, [r1, r3]
24003eda:	440b      	add	r3, r1
24003edc:	711a      	strb	r2, [r3, #4]
24003ede:	e7da      	b.n	24003e96 <main+0x576>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24003ee0:	464a      	mov	r2, r9
24003ee2:	ab08      	add	r3, sp, #32
24003ee4:	4950      	ldr	r1, [pc, #320]	; (24004028 <main+0x708>)
24003ee6:	484f      	ldr	r0, [pc, #316]	; (24004024 <main+0x704>)
24003ee8:	f00b fd96 	bl	2400fa18 <f_write>
					f_close(&SDFile);
24003eec:	484d      	ldr	r0, [pc, #308]	; (24004024 <main+0x704>)
24003eee:	f00b fed5 	bl	2400fc9c <f_close>
24003ef2:	e7d6      	b.n	24003ea2 <main+0x582>
		diskBusy = 1;
24003ef4:	9b04      	ldr	r3, [sp, #16]
		disk_initialize(0);
24003ef6:	4658      	mov	r0, fp
		diskBusy = 1;
24003ef8:	f883 9000 	strb.w	r9, [r3]
		loadFailed = 0;
24003efc:	4b45      	ldr	r3, [pc, #276]	; (24004014 <main+0x6f4>)
24003efe:	f883 b000 	strb.w	fp, [r3]
		presetWaitingToLoad = 0;
24003f02:	9b03      	ldr	r3, [sp, #12]
24003f04:	f8c3 b000 	str.w	fp, [r3]
		disk_initialize(0);
24003f08:	f009 f898 	bl	2400d03c <disk_initialize>
	    disk_status(0);
24003f0c:	4658      	mov	r0, fp
24003f0e:	f009 f88b 	bl	2400d028 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003f12:	464a      	mov	r2, r9
24003f14:	4945      	ldr	r1, [pc, #276]	; (2400402c <main+0x70c>)
24003f16:	4846      	ldr	r0, [pc, #280]	; (24004030 <main+0x710>)
24003f18:	f00b fa88 	bl	2400f42c <f_mount>
24003f1c:	9b05      	ldr	r3, [sp, #20]
24003f1e:	2800      	cmp	r0, #0
24003f20:	f47f af7e 	bne.w	24003e20 <main+0x500>
			itoa(numberToLoad, charBuf, 10);
24003f24:	220a      	movs	r2, #10
24003f26:	4618      	mov	r0, r3
24003f28:	a909      	add	r1, sp, #36	; 0x24
24003f2a:	f014 f82d 	bl	24017f88 <itoa>
			int len = ((strlen(charBuf)));
24003f2e:	a809      	add	r0, sp, #36	; 0x24
24003f30:	f7fc f9d2 	bl	240002d8 <strlen>
			if (len == 1)
24003f34:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24003f36:	4602      	mov	r2, r0
			if (len == 1)
24003f38:	f000 80a2 	beq.w	24004080 <main+0x760>
				strcat(charBuf, ".ebp");
24003f3c:	4938      	ldr	r1, [pc, #224]	; (24004020 <main+0x700>)
24003f3e:	ab09      	add	r3, sp, #36	; 0x24
24003f40:	6808      	ldr	r0, [r1, #0]
24003f42:	7909      	ldrb	r1, [r1, #4]
24003f44:	5098      	str	r0, [r3, r2]
24003f46:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003f48:	a80c      	add	r0, sp, #48	; 0x30
24003f4a:	3205      	adds	r2, #5
				strcat(charBuf, ".ebp");
24003f4c:	7119      	strb	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003f4e:	a909      	add	r1, sp, #36	; 0x24
24003f50:	f014 f81c 	bl	24017f8c <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003f54:	ab0c      	add	r3, sp, #48	; 0x30
24003f56:	4a35      	ldr	r2, [pc, #212]	; (2400402c <main+0x70c>)
24003f58:	4936      	ldr	r1, [pc, #216]	; (24004034 <main+0x714>)
24003f5a:	4837      	ldr	r0, [pc, #220]	; (24004038 <main+0x718>)
24003f5c:	f00b ffa8 	bl	2400feb0 <f_findfirst>
			if(res == FR_OK)
24003f60:	2800      	cmp	r0, #0
24003f62:	f47f af5d 	bne.w	24003e20 <main+0x500>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003f66:	2211      	movs	r2, #17
24003f68:	4934      	ldr	r1, [pc, #208]	; (2400403c <main+0x71c>)
24003f6a:	482e      	ldr	r0, [pc, #184]	; (24004024 <main+0x704>)
24003f6c:	f00b fab0 	bl	2400f4d0 <f_open>
24003f70:	4681      	mov	r9, r0
24003f72:	2800      	cmp	r0, #0
24003f74:	f47f af54 	bne.w	24003e20 <main+0x500>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003f78:	4a2a      	ldr	r2, [pc, #168]	; (24004024 <main+0x704>)
24003f7a:	ab08      	add	r3, sp, #32
24003f7c:	492a      	ldr	r1, [pc, #168]	; (24004028 <main+0x708>)
24003f7e:	68d2      	ldr	r2, [r2, #12]
24003f80:	4828      	ldr	r0, [pc, #160]	; (24004024 <main+0x704>)
24003f82:	f00b fc23 	bl	2400f7cc <f_read>
					presetWaitingToParse = bytesRead;
24003f86:	9b08      	ldr	r3, [sp, #32]
					f_close(&SDFile);
24003f88:	4826      	ldr	r0, [pc, #152]	; (24004024 <main+0x704>)
					presetWaitingToParse = bytesRead;
24003f8a:	602b      	str	r3, [r5, #0]
					f_close(&SDFile);
24003f8c:	f00b fe86 	bl	2400fc9c <f_close>
	  	  i2cSending = 1;
24003f90:	2301      	movs	r3, #1
24003f92:	4a1c      	ldr	r2, [pc, #112]	; (24004004 <main+0x6e4>)
24003f94:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003f96:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003f98:	f242 7310 	movw	r3, #10000	; 0x2710
24003f9c:	4a22      	ldr	r2, [pc, #136]	; (24004028 <main+0x708>)
24003f9e:	2144      	movs	r1, #68	; 0x44
24003fa0:	4827      	ldr	r0, [pc, #156]	; (24004040 <main+0x720>)
24003fa2:	9300      	str	r3, [sp, #0]
24003fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003fa8:	f002 fd10 	bl	240069cc <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003fac:	b662      	cpsie	i
	  	i2cSending = 0;
24003fae:	4a15      	ldr	r2, [pc, #84]	; (24004004 <main+0x6e4>)
24003fb0:	f882 9000 	strb.w	r9, [r2]
24003fb4:	e737      	b.n	24003e26 <main+0x506>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003fba:	491b      	ldr	r1, [pc, #108]	; (24004028 <main+0x708>)
24003fbc:	4820      	ldr	r0, [pc, #128]	; (24004040 <main+0x720>)
24003fbe:	f002 fed1 	bl	24006d64 <HAL_I2C_Slave_Receive_IT>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
24003fc2:	2201      	movs	r2, #1
24003fc4:	2140      	movs	r1, #64	; 0x40
24003fc6:	4810      	ldr	r0, [pc, #64]	; (24004008 <main+0x6e8>)
24003fc8:	f002 fbd6 	bl	24006778 <HAL_GPIO_WritePin>
	diskBusy = 1;
24003fcc:	2301      	movs	r3, #1
24003fce:	9a04      	ldr	r2, [sp, #16]
	presetReady = 0;
24003fd0:	2100      	movs	r1, #0
	diskBusy = 1;
24003fd2:	7013      	strb	r3, [r2, #0]
	presetReady = 0;
24003fd4:	4a1b      	ldr	r2, [pc, #108]	; (24004044 <main+0x724>)
24003fd6:	6011      	str	r1, [r2, #0]
	receivingI2C = 1;
24003fd8:	4a1b      	ldr	r2, [pc, #108]	; (24004048 <main+0x728>)
	  if (boardNumber == 0)
24003fda:	7831      	ldrb	r1, [r6, #0]
	receivingI2C = 1;
24003fdc:	7013      	strb	r3, [r2, #0]
}
24003fde:	e63e      	b.n	24003c5e <main+0x33e>
	  getPresetNamesFromSDCard();
24003fe0:	f7ff f9ec 	bl	240033bc <getPresetNamesFromSDCard>
	  presetWaitingToLoad = 1;
24003fe4:	4a19      	ldr	r2, [pc, #100]	; (2400404c <main+0x72c>)
24003fe6:	2301      	movs	r3, #1
	  diskBusy = 1;
24003fe8:	4919      	ldr	r1, [pc, #100]	; (24004050 <main+0x730>)
	  presetWaitingToLoad = 1;
24003fea:	9203      	str	r2, [sp, #12]
	  diskBusy = 1;
24003fec:	9104      	str	r1, [sp, #16]
	  presetWaitingToLoad = 1;
24003fee:	6013      	str	r3, [r2, #0]
	  diskBusy = 1;
24003ff0:	700b      	strb	r3, [r1, #0]
24003ff2:	e61a      	b.n	24003c2a <main+0x30a>
24003ff4:	2001aa4c 	.word	0x2001aa4c
24003ff8:	58020800 	.word	0x58020800
24003ffc:	58020400 	.word	0x58020400
24004000:	2000074c 	.word	0x2000074c
24004004:	20016b6c 	.word	0x20016b6c
24004008:	58020000 	.word	0x58020000
2400400c:	20005624 	.word	0x20005624
24004010:	200147ac 	.word	0x200147ac
24004014:	20016ba0 	.word	0x20016ba0
24004018:	30000000 	.word	0x30000000
2400401c:	20018636 	.word	0x20018636
24004020:	2401a634 	.word	0x2401a634
24004024:	2001b1dc 	.word	0x2001b1dc
24004028:	30000180 	.word	0x30000180
2400402c:	2001b408 	.word	0x2001b408
24004030:	2001afa8 	.word	0x2001afa8
24004034:	20016a54 	.word	0x20016a54
24004038:	200149b8 	.word	0x200149b8
2400403c:	20016a6a 	.word	0x20016a6a
24004040:	20014908 	.word	0x20014908
24004044:	20005618 	.word	0x20005618
24004048:	20018a44 	.word	0x20018a44
2400404c:	20018638 	.word	0x20018638
24004050:	200149f0 	.word	0x200149f0
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
24004054:	2028      	movs	r0, #40	; 0x28
24004056:	f000 fdb9 	bl	24004bcc <HAL_NVIC_DisableIRQ>
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
2400405a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400405e:	2301      	movs	r3, #1
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004060:	a90c      	add	r1, sp, #48	; 0x30
24004062:	4813      	ldr	r0, [pc, #76]	; (240040b0 <main+0x790>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24004064:	9410      	str	r4, [sp, #64]	; 0x40
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24004066:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		GPIO_InitTypeDef GPIO_InitStruct = {0};
2400406a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400406e:	f002 fa33 	bl	240064d8 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24004072:	4622      	mov	r2, r4
24004074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24004078:	480d      	ldr	r0, [pc, #52]	; (240040b0 <main+0x790>)
2400407a:	f002 fb7d 	bl	24006778 <HAL_GPIO_WritePin>
2400407e:	e54d      	b.n	24003b1c <main+0x1fc>
				finalString[2] = charBuf[1];
24004080:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
24004084:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				finalString[1] = charBuf[0];
24004088:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
2400408c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
				finalString[0] = '0';
24004090:	2330      	movs	r3, #48	; 0x30
				strcat(finalString, ".ebp");
24004092:	eb0d 0003 	add.w	r0, sp, r3
				finalString[0] = '0';
24004096:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				strcat(finalString, ".ebp");
2400409a:	f7fc f91d 	bl	240002d8 <strlen>
2400409e:	4a05      	ldr	r2, [pc, #20]	; (240040b4 <main+0x794>)
240040a0:	4603      	mov	r3, r0
240040a2:	a90c      	add	r1, sp, #48	; 0x30
240040a4:	6810      	ldr	r0, [r2, #0]
240040a6:	7912      	ldrb	r2, [r2, #4]
240040a8:	50c8      	str	r0, [r1, r3]
240040aa:	440b      	add	r3, r1
240040ac:	711a      	strb	r2, [r3, #4]
240040ae:	e751      	b.n	24003f54 <main+0x634>
240040b0:	58020400 	.word	0x58020400
240040b4:	2401a634 	.word	0x2401a634

240040b8 <waitForNewPresetDataOverI2C>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
240040b8:	2201      	movs	r2, #1
240040ba:	2140      	movs	r1, #64	; 0x40
240040bc:	4806      	ldr	r0, [pc, #24]	; (240040d8 <waitForNewPresetDataOverI2C+0x20>)
{
240040be:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
240040c0:	f002 fb5a 	bl	24006778 <HAL_GPIO_WritePin>
	diskBusy = 1;
240040c4:	4c05      	ldr	r4, [pc, #20]	; (240040dc <waitForNewPresetDataOverI2C+0x24>)
240040c6:	2301      	movs	r3, #1
	presetReady = 0;
240040c8:	4905      	ldr	r1, [pc, #20]	; (240040e0 <waitForNewPresetDataOverI2C+0x28>)
240040ca:	2000      	movs	r0, #0
	receivingI2C = 1;
240040cc:	4a05      	ldr	r2, [pc, #20]	; (240040e4 <waitForNewPresetDataOverI2C+0x2c>)
	diskBusy = 1;
240040ce:	7023      	strb	r3, [r4, #0]
	presetReady = 0;
240040d0:	6008      	str	r0, [r1, #0]
	receivingI2C = 1;
240040d2:	7013      	strb	r3, [r2, #0]
}
240040d4:	bd10      	pop	{r4, pc}
240040d6:	bf00      	nop
240040d8:	58020000 	.word	0x58020000
240040dc:	200149f0 	.word	0x200149f0
240040e0:	20005618 	.word	0x20005618
240040e4:	20018a44 	.word	0x20018a44

240040e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
240040e8:	4770      	bx	lr
240040ea:	bf00      	nop

240040ec <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
240040ec:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
240040ee:	4806      	ldr	r0, [pc, #24]	; (24004108 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
240040f0:	2300      	movs	r3, #0
240040f2:	4a06      	ldr	r2, [pc, #24]	; (2400410c <MX_RNG_Init+0x20>)
240040f4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
240040f8:	f005 fafe 	bl	240096f8 <HAL_RNG_Init>
240040fc:	b900      	cbnz	r0, 24004100 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
240040fe:	bd08      	pop	{r3, pc}
24004100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004104:	f7ff bff0 	b.w	240040e8 <Error_Handler>
24004108:	2001aa4c 	.word	0x2001aa4c
2400410c:	48021800 	.word	0x48021800

24004110 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24004110:	b510      	push	{r4, lr}
24004112:	b0b2      	sub	sp, #200	; 0xc8
24004114:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004116:	22c0      	movs	r2, #192	; 0xc0
24004118:	2100      	movs	r1, #0
2400411a:	a802      	add	r0, sp, #8
2400411c:	f013 ff44 	bl	24017fa8 <memset>
  if(rngHandle->Instance==RNG)
24004120:	4b10      	ldr	r3, [pc, #64]	; (24004164 <HAL_RNG_MspInit+0x54>)
24004122:	6822      	ldr	r2, [r4, #0]
24004124:	429a      	cmp	r2, r3
24004126:	d001      	beq.n	2400412c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24004128:	b032      	add	sp, #200	; 0xc8
2400412a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
2400412c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24004130:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004132:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24004134:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004138:	f004 f8f8 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
2400413c:	b970      	cbnz	r0, 2400415c <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
2400413e:	4b0a      	ldr	r3, [pc, #40]	; (24004168 <HAL_RNG_MspInit+0x58>)
24004140:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24004148:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
2400414c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
24004154:	9301      	str	r3, [sp, #4]
24004156:	9b01      	ldr	r3, [sp, #4]
}
24004158:	b032      	add	sp, #200	; 0xc8
2400415a:	bd10      	pop	{r4, pc}
      Error_Handler();
2400415c:	f7ff ffc4 	bl	240040e8 <Error_Handler>
24004160:	e7ed      	b.n	2400413e <HAL_RNG_MspInit+0x2e>
24004162:	bf00      	nop
24004164:	48021800 	.word	0x48021800
24004168:	58024400 	.word	0x58024400

2400416c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
2400416c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
2400416e:	4817      	ldr	r0, [pc, #92]	; (240041cc <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24004170:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24004172:	4c17      	ldr	r4, [pc, #92]	; (240041d0 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24004174:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24004176:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24004178:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
2400417a:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
2400417c:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24004180:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24004182:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24004184:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24004188:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
2400418c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24004190:	461a      	mov	r2, r3
24004192:	f005 fd03 	bl	24009b9c <HAL_SAI_InitProtocol>
24004196:	b990      	cbnz	r0, 240041be <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24004198:	480e      	ldr	r0, [pc, #56]	; (240041d4 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400419a:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
2400419c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
2400419e:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
240041a0:	4c0d      	ldr	r4, [pc, #52]	; (240041d8 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
240041a2:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
240041a4:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
240041a6:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
240041a8:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
240041aa:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
240041ac:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
240041b0:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
240041b2:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
240041b6:	f005 fcf1 	bl	24009b9c <HAL_SAI_InitProtocol>
240041ba:	b918      	cbnz	r0, 240041c4 <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
240041bc:	bd10      	pop	{r4, pc}
    Error_Handler();
240041be:	f7ff ff93 	bl	240040e8 <Error_Handler>
240041c2:	e7e9      	b.n	24004198 <MX_SAI1_Init+0x2c>
}
240041c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240041c8:	f7ff bf8e 	b.w	240040e8 <Error_Handler>
240041cc:	2001ab54 	.word	0x2001ab54
240041d0:	40015804 	.word	0x40015804
240041d4:	2001abec 	.word	0x2001abec
240041d8:	40015824 	.word	0x40015824
240041dc:	00000000 	.word	0x00000000

240041e0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
240041e0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
240041e2:	4a5f      	ldr	r2, [pc, #380]	; (24004360 <HAL_SAI_MspInit+0x180>)
{
240041e4:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
240041e6:	6803      	ldr	r3, [r0, #0]
{
240041e8:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
240041ea:	4293      	cmp	r3, r2
240041ec:	d004      	beq.n	240041f8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
240041ee:	4a5d      	ldr	r2, [pc, #372]	; (24004364 <HAL_SAI_MspInit+0x184>)
240041f0:	4293      	cmp	r3, r2
240041f2:	d04f      	beq.n	24004294 <HAL_SAI_MspInit+0xb4>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
240041f4:	b00d      	add	sp, #52	; 0x34
240041f6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
240041f8:	4b5b      	ldr	r3, [pc, #364]	; (24004368 <HAL_SAI_MspInit+0x188>)
240041fa:	681a      	ldr	r2, [r3, #0]
240041fc:	2a00      	cmp	r2, #0
240041fe:	f000 8093 	beq.w	24004328 <HAL_SAI_MspInit+0x148>
    SAI1_client ++;
24004202:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24004204:	2074      	movs	r0, #116	; 0x74
24004206:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
24004208:	4d58      	ldr	r5, [pc, #352]	; (2400436c <HAL_SAI_MspInit+0x18c>)
    SAI1_client ++;
2400420a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400420c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2400420e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 24004358 <HAL_SAI_MspInit+0x178>
24004212:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24004216:	a906      	add	r1, sp, #24
24004218:	4855      	ldr	r0, [pc, #340]	; (24004370 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400421a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2400421c:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24004220:	f002 f95a 	bl	240064d8 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24004224:	4953      	ldr	r1, [pc, #332]	; (24004374 <HAL_SAI_MspInit+0x194>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24004226:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24004228:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
2400422a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400422c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
2400422e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24004232:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24004236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400423a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
2400423e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24004242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24004246:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
2400424a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
2400424e:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004252:	2304      	movs	r3, #4
24004254:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24004258:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
2400425c:	f000 fe14 	bl	24004e88 <HAL_DMA_Init>
24004260:	2800      	cmp	r0, #0
24004262:	d175      	bne.n	24004350 <HAL_SAI_MspInit+0x170>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24004264:	2006      	movs	r0, #6
24004266:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
2400426a:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
2400426e:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24004270:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24004274:	a902      	add	r1, sp, #8
24004276:	483d      	ldr	r0, [pc, #244]	; (2400436c <HAL_SAI_MspInit+0x18c>)
    pSyncConfig.SyncEnable = DISABLE;
24004278:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
2400427c:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
2400427e:	f002 f8c1 	bl	24006404 <HAL_DMAEx_ConfigMuxSync>
24004282:	2800      	cmp	r0, #0
24004284:	d161      	bne.n	2400434a <HAL_SAI_MspInit+0x16a>
    if(saiHandle->Instance==SAI1_Block_B)
24004286:	4a37      	ldr	r2, [pc, #220]	; (24004364 <HAL_SAI_MspInit+0x184>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24004288:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
2400428a:	6823      	ldr	r3, [r4, #0]
2400428c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
2400428e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24004292:	d1af      	bne.n	240041f4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24004294:	4b34      	ldr	r3, [pc, #208]	; (24004368 <HAL_SAI_MspInit+0x188>)
24004296:	681a      	ldr	r2, [r3, #0]
24004298:	2a00      	cmp	r2, #0
2400429a:	d037      	beq.n	2400430c <HAL_SAI_MspInit+0x12c>
    SAI1_client ++;
2400429c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
2400429e:	2008      	movs	r0, #8
240042a0:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
240042a2:	4d35      	ldr	r5, [pc, #212]	; (24004378 <HAL_SAI_MspInit+0x198>)
    SAI1_client ++;
240042a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240042a6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
240042a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24004358 <HAL_SAI_MspInit+0x178>
240042ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240042b0:	a906      	add	r1, sp, #24
240042b2:	482f      	ldr	r0, [pc, #188]	; (24004370 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240042b4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
240042b6:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240042ba:	f002 f90d 	bl	240064d8 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
240042be:	492f      	ldr	r1, [pc, #188]	; (2400437c <HAL_SAI_MspInit+0x19c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240042c0:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240042c2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240042c4:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
240042c6:	60eb      	str	r3, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
240042c8:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
240042ca:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240042ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240042d2:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
240042d4:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
240042d8:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240042da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240042de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
240042e2:	60a9      	str	r1, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240042e4:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042e8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
240042ec:	f44f 7280 	mov.w	r2, #256	; 0x100
240042f0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240042f4:	2304      	movs	r3, #4
240042f6:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
240042f8:	f000 fdc6 	bl	24004e88 <HAL_DMA_Init>
240042fc:	bb10      	cbnz	r0, 24004344 <HAL_SAI_MspInit+0x164>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
240042fe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24004302:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24004304:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24004308:	b00d      	add	sp, #52	; 0x34
2400430a:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
2400430c:	491c      	ldr	r1, [pc, #112]	; (24004380 <HAL_SAI_MspInit+0x1a0>)
2400430e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24004312:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24004316:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
2400431a:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
2400431e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24004322:	9101      	str	r1, [sp, #4]
24004324:	9901      	ldr	r1, [sp, #4]
24004326:	e7b9      	b.n	2400429c <HAL_SAI_MspInit+0xbc>
       __HAL_RCC_SAI1_CLK_ENABLE();
24004328:	4915      	ldr	r1, [pc, #84]	; (24004380 <HAL_SAI_MspInit+0x1a0>)
2400432a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
2400432e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24004332:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24004336:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
2400433a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2400433e:	9100      	str	r1, [sp, #0]
24004340:	9900      	ldr	r1, [sp, #0]
24004342:	e75e      	b.n	24004202 <HAL_SAI_MspInit+0x22>
      Error_Handler();
24004344:	f7ff fed0 	bl	240040e8 <Error_Handler>
24004348:	e7d9      	b.n	240042fe <HAL_SAI_MspInit+0x11e>
      Error_Handler();
2400434a:	f7ff fecd 	bl	240040e8 <Error_Handler>
2400434e:	e79a      	b.n	24004286 <HAL_SAI_MspInit+0xa6>
      Error_Handler();
24004350:	f7ff feca 	bl	240040e8 <Error_Handler>
24004354:	e786      	b.n	24004264 <HAL_SAI_MspInit+0x84>
24004356:	bf00      	nop
24004358:	00000000 	.word	0x00000000
2400435c:	00000002 	.word	0x00000002
24004360:	40015804 	.word	0x40015804
24004364:	40015824 	.word	0x40015824
24004368:	2001aa60 	.word	0x2001aa60
2400436c:	2001aa64 	.word	0x2001aa64
24004370:	58021000 	.word	0x58021000
24004374:	40020028 	.word	0x40020028
24004378:	2001aadc 	.word	0x2001aadc
2400437c:	40020040 	.word	0x40020040
24004380:	58024400 	.word	0x58024400

24004384 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24004384:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24004386:	4b07      	ldr	r3, [pc, #28]	; (240043a4 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24004388:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
2400438a:	4c07      	ldr	r4, [pc, #28]	; (240043a8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400438c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24004390:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24004392:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24004396:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
2400439a:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
2400439e:	f85d 4b04 	ldr.w	r4, [sp], #4
240043a2:	4770      	bx	lr
240043a4:	2001ac84 	.word	0x2001ac84
240043a8:	52007000 	.word	0x52007000

240043ac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
240043ac:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
240043ae:	4a27      	ldr	r2, [pc, #156]	; (2400444c <HAL_SD_MspInit+0xa0>)
{
240043b0:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
240043b2:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240043b4:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
240043b6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240043b8:	9308      	str	r3, [sp, #32]
240043ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
240043be:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
240043c2:	d001      	beq.n	240043c8 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
240043c4:	b00a      	add	sp, #40	; 0x28
240043c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240043c8:	4b21      	ldr	r3, [pc, #132]	; (24004450 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240043ca:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
240043ce:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240043d0:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
240043d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240043d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240043da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240043de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240043e2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240043e6:	9201      	str	r2, [sp, #4]
240043e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240043ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240043ee:	f042 0204 	orr.w	r2, r2, #4
240043f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240043f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240043fa:	f002 0204 	and.w	r2, r2, #4
240043fe:	9202      	str	r2, [sp, #8]
24004400:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004402:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004406:	f042 0208 	orr.w	r2, r2, #8
2400440a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400440e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24004414:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004416:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400441a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400441c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004420:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004422:	a904      	add	r1, sp, #16
24004424:	480b      	ldr	r0, [pc, #44]	; (24004454 <HAL_SD_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004426:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004428:	f002 f856 	bl	240064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400442c:	2204      	movs	r2, #4
2400442e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004430:	a904      	add	r1, sp, #16
24004432:	4809      	ldr	r0, [pc, #36]	; (24004458 <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004434:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24004436:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400443a:	2200      	movs	r2, #0
2400443c:	2302      	movs	r3, #2
2400443e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004442:	f002 f849 	bl	240064d8 <HAL_GPIO_Init>
}
24004446:	b00a      	add	sp, #40	; 0x28
24004448:	bd10      	pop	{r4, pc}
2400444a:	bf00      	nop
2400444c:	52007000 	.word	0x52007000
24004450:	58024400 	.word	0x58024400
24004454:	58020800 	.word	0x58020800
24004458:	58020c00 	.word	0x58020c00
2400445c:	00000000 	.word	0x00000000

24004460 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24004460:	4813      	ldr	r0, [pc, #76]	; (240044b0 <MX_SPI1_Init+0x50>)
24004462:	4a14      	ldr	r2, [pc, #80]	; (240044b4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004464:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240044a8 <MX_SPI1_Init+0x48>
{
24004468:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
2400446a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
2400446c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400446e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24004470:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24004472:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004474:	ed80 7b08 	vstr	d7, [r0, #32]
24004478:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2400447c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24004480:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004484:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004488:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400448c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004490:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004494:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24004498:	f006 fd7e 	bl	2400af98 <HAL_SPI_Init>
2400449c:	b900      	cbnz	r0, 240044a0 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2400449e:	bd08      	pop	{r3, pc}
240044a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240044a4:	f7ff be20 	b.w	240040e8 <Error_Handler>
	...
240044b0:	2001ae68 	.word	0x2001ae68
240044b4:	40013000 	.word	0x40013000

240044b8 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
240044b8:	4815      	ldr	r0, [pc, #84]	; (24004510 <MX_SPI6_Init+0x58>)
240044ba:	4a16      	ldr	r2, [pc, #88]	; (24004514 <MX_SPI6_Init+0x5c>)
{
240044bc:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240044be:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24004508 <MX_SPI6_Init+0x50>
  hspi6.Instance = SPI6;
240044c2:	6002      	str	r2, [r0, #0]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240044c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240044c8:	2300      	movs	r3, #0
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
240044ca:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240044cc:	2207      	movs	r2, #7
  hspi6.Init.Mode = SPI_MODE_SLAVE;
240044ce:	6043      	str	r3, [r0, #4]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
240044d0:	6103      	str	r3, [r0, #16]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
240044d2:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240044d4:	ed80 7b08 	vstr	d7, [r0, #32]
240044d8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
240044dc:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240044e0:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240044e4:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240044e8:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240044ec:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240044f0:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
240044f4:	f006 fd50 	bl	2400af98 <HAL_SPI_Init>
240044f8:	b900      	cbnz	r0, 240044fc <MX_SPI6_Init+0x44>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
240044fa:	bd08      	pop	{r3, pc}
240044fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004500:	f7ff bdf2 	b.w	240040e8 <Error_Handler>
24004504:	f3af 8000 	nop.w
	...
24004510:	2001af08 	.word	0x2001af08
24004514:	58001400 	.word	0x58001400

24004518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24004518:	b5f0      	push	{r4, r5, r6, r7, lr}
2400451a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400451c:	2100      	movs	r1, #0
{
2400451e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004520:	22c0      	movs	r2, #192	; 0xc0
24004522:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004524:	910a      	str	r1, [sp, #40]	; 0x28
24004526:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400452a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400452e:	f013 fd3b 	bl	24017fa8 <memset>
  if(spiHandle->Instance==SPI1)
24004532:	6823      	ldr	r3, [r4, #0]
24004534:	4a7f      	ldr	r2, [pc, #508]	; (24004734 <HAL_SPI_MspInit+0x21c>)
24004536:	4293      	cmp	r3, r2
24004538:	d005      	beq.n	24004546 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
2400453a:	4a7f      	ldr	r2, [pc, #508]	; (24004738 <HAL_SPI_MspInit+0x220>)
2400453c:	4293      	cmp	r3, r2
2400453e:	f000 8096 	beq.w	2400466e <HAL_SPI_MspInit+0x156>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24004542:	b03d      	add	sp, #244	; 0xf4
24004544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24004546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400454a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400454c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400454e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004552:	f003 feeb 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
24004556:	2800      	cmp	r0, #0
24004558:	f040 80e3 	bne.w	24004722 <HAL_SPI_MspInit+0x20a>
    __HAL_RCC_SPI1_CLK_ENABLE();
2400455c:	4b77      	ldr	r3, [pc, #476]	; (2400473c <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400455e:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004560:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004562:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
24004564:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004568:	4875      	ldr	r0, [pc, #468]	; (24004740 <HAL_SPI_MspInit+0x228>)
    __HAL_RCC_SPI1_CLK_ENABLE();
2400456a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400456e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
24004572:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24004576:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
2400457a:	9201      	str	r2, [sp, #4]
2400457c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400457e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004582:	f042 0202 	orr.w	r2, r2, #2
24004586:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400458a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400458e:	f002 0202 	and.w	r2, r2, #2
24004592:	9202      	str	r2, [sp, #8]
24004594:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004596:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400459e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240045a2:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
240045a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240045a8:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
240045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
240045ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240045b0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
240045b2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240045b4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240045b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
240045ba:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240045be:	f001 ff8b 	bl	240064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240045c2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
240045c6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240045c8:	a906      	add	r1, sp, #24
240045ca:	485e      	ldr	r0, [pc, #376]	; (24004744 <HAL_SPI_MspInit+0x22c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240045cc:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
240045ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
240045d2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240045d6:	f001 ff7f 	bl	240064d8 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
240045da:	4e5b      	ldr	r6, [pc, #364]	; (24004748 <HAL_SPI_MspInit+0x230>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240045dc:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
240045de:	495b      	ldr	r1, [pc, #364]	; (2400474c <HAL_SPI_MspInit+0x234>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240045e0:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240045e2:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
240045e4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240045e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240045ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
240045f0:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240045f4:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240045f8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
240045fc:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240045fe:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24004600:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004604:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004606:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400460a:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
2400460c:	f000 fc3c 	bl	24004e88 <HAL_DMA_Init>
24004610:	2800      	cmp	r0, #0
24004612:	f040 8083 	bne.w	2400471c <HAL_SPI_MspInit+0x204>
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004616:	4d4e      	ldr	r5, [pc, #312]	; (24004750 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24004618:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400461a:	494e      	ldr	r1, [pc, #312]	; (24004754 <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400461c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400461e:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004620:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004624:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004626:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004628:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400462a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400462e:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004630:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004634:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004636:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004638:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
2400463a:	67e6      	str	r6, [r4, #124]	; 0x7c
2400463c:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400463e:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24004640:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004642:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24004644:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004646:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24004648:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400464a:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400464c:	626a      	str	r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
2400464e:	f000 fc1b 	bl	24004e88 <HAL_DMA_Init>
24004652:	2800      	cmp	r0, #0
24004654:	d15f      	bne.n	24004716 <HAL_SPI_MspInit+0x1fe>
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
24004656:	2200      	movs	r2, #0
24004658:	2103      	movs	r1, #3
2400465a:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
2400465c:	67a5      	str	r5, [r4, #120]	; 0x78
2400465e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
24004660:	f000 fa68 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24004664:	2023      	movs	r0, #35	; 0x23
24004666:	f000 faa3 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
}
2400466a:	b03d      	add	sp, #244	; 0xf4
2400466c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
2400466e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24004672:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004674:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004676:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400467a:	f003 fe57 	bl	2400832c <HAL_RCCEx_PeriphCLKConfig>
2400467e:	2800      	cmp	r0, #0
24004680:	d152      	bne.n	24004728 <HAL_SPI_MspInit+0x210>
    __HAL_RCC_SPI6_CLK_ENABLE();
24004682:	4b2e      	ldr	r3, [pc, #184]	; (2400473c <HAL_SPI_MspInit+0x224>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004684:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004686:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
24004688:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400468c:	f042 0220 	orr.w	r2, r2, #32
24004690:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004694:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004698:	f002 0220 	and.w	r2, r2, #32
2400469c:	9204      	str	r2, [sp, #16]
2400469e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240046a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240046a4:	f042 0201 	orr.w	r2, r2, #1
240046a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240046ac:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
240046ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240046b2:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
240046b4:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240046b8:	4827      	ldr	r0, [pc, #156]	; (24004758 <HAL_SPI_MspInit+0x240>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
240046ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240046bc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
240046be:	9d05      	ldr	r5, [sp, #20]
    hdma_spi6_rx.Instance = BDMA_Channel0;
240046c0:	4d26      	ldr	r5, [pc, #152]	; (2400475c <HAL_SPI_MspInit+0x244>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240046c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
240046c6:	2200      	movs	r2, #0
240046c8:	2302      	movs	r3, #2
240046ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240046ce:	f001 ff03 	bl	240064d8 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
240046d2:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
240046d4:	4922      	ldr	r1, [pc, #136]	; (24004760 <HAL_SPI_MspInit+0x248>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240046d6:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240046d8:	4628      	mov	r0, r5
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
240046da:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
240046de:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240046e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
240046e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240046ea:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240046ee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
240046f2:	6129      	str	r1, [r5, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240046f4:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
240046f8:	f000 fbc6 	bl	24004e88 <HAL_DMA_Init>
240046fc:	b9b8      	cbnz	r0, 2400472e <HAL_SPI_MspInit+0x216>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
240046fe:	2200      	movs	r2, #0
24004700:	2105      	movs	r1, #5
24004702:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24004704:	67e5      	str	r5, [r4, #124]	; 0x7c
24004706:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
24004708:	f000 fa14 	bl	24004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
2400470c:	2056      	movs	r0, #86	; 0x56
2400470e:	f000 fa4f 	bl	24004bb0 <HAL_NVIC_EnableIRQ>
}
24004712:	b03d      	add	sp, #244	; 0xf4
24004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24004716:	f7ff fce7 	bl	240040e8 <Error_Handler>
2400471a:	e79c      	b.n	24004656 <HAL_SPI_MspInit+0x13e>
      Error_Handler();
2400471c:	f7ff fce4 	bl	240040e8 <Error_Handler>
24004720:	e779      	b.n	24004616 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
24004722:	f7ff fce1 	bl	240040e8 <Error_Handler>
24004726:	e719      	b.n	2400455c <HAL_SPI_MspInit+0x44>
      Error_Handler();
24004728:	f7ff fcde 	bl	240040e8 <Error_Handler>
2400472c:	e7a9      	b.n	24004682 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
2400472e:	f7ff fcdb 	bl	240040e8 <Error_Handler>
24004732:	e7e4      	b.n	240046fe <HAL_SPI_MspInit+0x1e6>
24004734:	40013000 	.word	0x40013000
24004738:	58001400 	.word	0x58001400
2400473c:	58024400 	.word	0x58024400
24004740:	58020400 	.word	0x58020400
24004744:	58021800 	.word	0x58021800
24004748:	2001ad00 	.word	0x2001ad00
2400474c:	400200a0 	.word	0x400200a0
24004750:	2001ad78 	.word	0x2001ad78
24004754:	40020010 	.word	0x40020010
24004758:	58020000 	.word	0x58020000
2400475c:	2001adf0 	.word	0x2001adf0
24004760:	58025408 	.word	0x58025408

24004764 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24004764:	e7fe      	b.n	24004764 <Default_Handler>
24004766:	bf00      	nop

24004768 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24004768:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 2400482c <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
2400476c:	481f      	ldr	r0, [pc, #124]	; (240047ec <Reset_Handler+0x84>)
2400476e:	4a20      	ldr	r2, [pc, #128]	; (240047f0 <Reset_Handler+0x88>)
24004770:	4290      	cmp	r0, r2
24004772:	d003      	beq.n	2400477c <Reset_Handler+0x14>
		*pDest = *pSource;
24004774:	1a12      	subs	r2, r2, r0
24004776:	491f      	ldr	r1, [pc, #124]	; (240047f4 <Reset_Handler+0x8c>)
24004778:	f013 fc08 	bl	24017f8c <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
2400477c:	481e      	ldr	r0, [pc, #120]	; (240047f8 <Reset_Handler+0x90>)
2400477e:	4a1f      	ldr	r2, [pc, #124]	; (240047fc <Reset_Handler+0x94>)
24004780:	4290      	cmp	r0, r2
24004782:	d003      	beq.n	2400478c <Reset_Handler+0x24>
		*pDest = 0;
24004784:	1a12      	subs	r2, r2, r0
24004786:	2100      	movs	r1, #0
24004788:	f013 fc0e 	bl	24017fa8 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
2400478c:	481c      	ldr	r0, [pc, #112]	; (24004800 <Reset_Handler+0x98>)
2400478e:	4a1d      	ldr	r2, [pc, #116]	; (24004804 <Reset_Handler+0x9c>)
24004790:	4290      	cmp	r0, r2
24004792:	d003      	beq.n	2400479c <Reset_Handler+0x34>
		*pDest = 0;
24004794:	1a12      	subs	r2, r2, r0
24004796:	2100      	movs	r1, #0
24004798:	f013 fc06 	bl	24017fa8 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
2400479c:	481a      	ldr	r0, [pc, #104]	; (24004808 <Reset_Handler+0xa0>)
2400479e:	4a1b      	ldr	r2, [pc, #108]	; (2400480c <Reset_Handler+0xa4>)
240047a0:	4290      	cmp	r0, r2
240047a2:	d003      	beq.n	240047ac <Reset_Handler+0x44>
		*pDest = 0;
240047a4:	1a12      	subs	r2, r2, r0
240047a6:	2100      	movs	r1, #0
240047a8:	f013 fbfe 	bl	24017fa8 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
240047ac:	4818      	ldr	r0, [pc, #96]	; (24004810 <Reset_Handler+0xa8>)
240047ae:	4a19      	ldr	r2, [pc, #100]	; (24004814 <Reset_Handler+0xac>)
240047b0:	4290      	cmp	r0, r2
240047b2:	d003      	beq.n	240047bc <Reset_Handler+0x54>
		*pDest = 0;
240047b4:	1a12      	subs	r2, r2, r0
240047b6:	2100      	movs	r1, #0
240047b8:	f013 fbf6 	bl	24017fa8 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
240047bc:	4816      	ldr	r0, [pc, #88]	; (24004818 <Reset_Handler+0xb0>)
240047be:	4a17      	ldr	r2, [pc, #92]	; (2400481c <Reset_Handler+0xb4>)
240047c0:	4290      	cmp	r0, r2
240047c2:	d003      	beq.n	240047cc <Reset_Handler+0x64>
		*pDest = 0;
240047c4:	1a12      	subs	r2, r2, r0
240047c6:	2100      	movs	r1, #0
240047c8:	f013 fbee 	bl	24017fa8 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
240047cc:	4814      	ldr	r0, [pc, #80]	; (24004820 <Reset_Handler+0xb8>)
240047ce:	4a15      	ldr	r2, [pc, #84]	; (24004824 <Reset_Handler+0xbc>)
240047d0:	4290      	cmp	r0, r2
240047d2:	d003      	beq.n	240047dc <Reset_Handler+0x74>
		*pDest = *pSource;
240047d4:	1a12      	subs	r2, r2, r0
240047d6:	4914      	ldr	r1, [pc, #80]	; (24004828 <Reset_Handler+0xc0>)
240047d8:	f013 fbd8 	bl	24017f8c <memcpy>
	SystemInit();
240047dc:	f000 f8a0 	bl	24004920 <SystemInit>
	__libc_init_array();
240047e0:	f013 fb96 	bl	24017f10 <__libc_init_array>
	(void)main();
240047e4:	f7ff f89c 	bl	24003920 <main>
	for (;;) ;
240047e8:	e7fe      	b.n	240047e8 <Reset_Handler+0x80>
240047ea:	bf00      	nop
240047ec:	20000000 	.word	0x20000000
240047f0:	20000848 	.word	0x20000848
240047f4:	240335b0 	.word	0x240335b0
240047f8:	20000848 	.word	0x20000848
240047fc:	2001b644 	.word	0x2001b644
24004800:	24040000 	.word	0x24040000
24004804:	2407f7a0 	.word	0x2407f7a0
24004808:	30000000 	.word	0x30000000
2400480c:	30001180 	.word	0x30001180
24004810:	30002000 	.word	0x30002000
24004814:	3003df80 	.word	0x3003df80
24004818:	38000000 	.word	0x38000000
2400481c:	38000034 	.word	0x38000034
24004820:	00000400 	.word	0x00000400
24004824:	00007138 	.word	0x00007138
24004828:	24033df8 	.word	0x24033df8
2400482c:	20020000 	.word	0x20020000

24004830 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004830:	4b07      	ldr	r3, [pc, #28]	; (24004850 <HAL_MspInit+0x20>)
{
24004832:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004834:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004838:	f042 0202 	orr.w	r2, r2, #2
2400483c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004844:	f003 0302 	and.w	r3, r3, #2
24004848:	9301      	str	r3, [sp, #4]
2400484a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400484c:	b002      	add	sp, #8
2400484e:	4770      	bx	lr
24004850:	58024400 	.word	0x58024400

24004854 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004854:	e7fe      	b.n	24004854 <NMI_Handler>
24004856:	bf00      	nop

24004858 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24004858:	e7fe      	b.n	24004858 <HardFault_Handler>
2400485a:	bf00      	nop

2400485c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2400485c:	e7fe      	b.n	2400485c <MemManage_Handler>
2400485e:	bf00      	nop

24004860 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004860:	e7fe      	b.n	24004860 <BusFault_Handler>
24004862:	bf00      	nop

24004864 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24004864:	e7fe      	b.n	24004864 <UsageFault_Handler>
24004866:	bf00      	nop

24004868 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24004868:	4770      	bx	lr
2400486a:	bf00      	nop

2400486c <DebugMon_Handler>:
2400486c:	4770      	bx	lr
2400486e:	bf00      	nop

24004870 <PendSV_Handler>:
24004870:	4770      	bx	lr
24004872:	bf00      	nop

24004874 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24004874:	f000 b922 	b.w	24004abc <HAL_IncTick>

24004878 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24004878:	4801      	ldr	r0, [pc, #4]	; (24004880 <DMA1_Stream0_IRQHandler+0x8>)
2400487a:	f001 b959 	b.w	24005b30 <HAL_DMA_IRQHandler>
2400487e:	bf00      	nop
24004880:	2001ad78 	.word	0x2001ad78

24004884 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24004884:	4801      	ldr	r0, [pc, #4]	; (2400488c <DMA1_Stream1_IRQHandler+0x8>)
24004886:	f001 b953 	b.w	24005b30 <HAL_DMA_IRQHandler>
2400488a:	bf00      	nop
2400488c:	2001aa64 	.word	0x2001aa64

24004890 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24004890:	4801      	ldr	r0, [pc, #4]	; (24004898 <DMA1_Stream2_IRQHandler+0x8>)
24004892:	f001 b94d 	b.w	24005b30 <HAL_DMA_IRQHandler>
24004896:	bf00      	nop
24004898:	2001aadc 	.word	0x2001aadc

2400489c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
2400489c:	4801      	ldr	r0, [pc, #4]	; (240048a4 <DMA1_Stream3_IRQHandler+0x8>)
2400489e:	f001 b947 	b.w	24005b30 <HAL_DMA_IRQHandler>
240048a2:	bf00      	nop
240048a4:	20014818 	.word	0x20014818

240048a8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
240048a8:	4801      	ldr	r0, [pc, #4]	; (240048b0 <DMA1_Stream4_IRQHandler+0x8>)
240048aa:	f001 b941 	b.w	24005b30 <HAL_DMA_IRQHandler>
240048ae:	bf00      	nop
240048b0:	20014890 	.word	0x20014890

240048b4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
240048b4:	4801      	ldr	r0, [pc, #4]	; (240048bc <DMA1_Stream6_IRQHandler+0x8>)
240048b6:	f001 b93b 	b.w	24005b30 <HAL_DMA_IRQHandler>
240048ba:	bf00      	nop
240048bc:	2001ad00 	.word	0x2001ad00

240048c0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
240048c0:	4801      	ldr	r0, [pc, #4]	; (240048c8 <I2C1_EV_IRQHandler+0x8>)
240048c2:	f002 ba83 	b.w	24006dcc <HAL_I2C_EV_IRQHandler>
240048c6:	bf00      	nop
240048c8:	20014908 	.word	0x20014908

240048cc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
240048cc:	4801      	ldr	r0, [pc, #4]	; (240048d4 <I2C1_ER_IRQHandler+0x8>)
240048ce:	f002 bd9b 	b.w	24007408 <HAL_I2C_ER_IRQHandler>
240048d2:	bf00      	nop
240048d4:	20014908 	.word	0x20014908

240048d8 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
240048d8:	4801      	ldr	r0, [pc, #4]	; (240048e0 <I2C2_EV_IRQHandler+0x8>)
240048da:	f002 ba77 	b.w	24006dcc <HAL_I2C_EV_IRQHandler>
240048de:	bf00      	nop
240048e0:	2001495c 	.word	0x2001495c

240048e4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
240048e4:	4801      	ldr	r0, [pc, #4]	; (240048ec <I2C2_ER_IRQHandler+0x8>)
240048e6:	f002 bd8f 	b.w	24007408 <HAL_I2C_ER_IRQHandler>
240048ea:	bf00      	nop
240048ec:	2001495c 	.word	0x2001495c

240048f0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
240048f0:	4801      	ldr	r0, [pc, #4]	; (240048f8 <SPI1_IRQHandler+0x8>)
240048f2:	f006 bed7 	b.w	2400b6a4 <HAL_SPI_IRQHandler>
240048f6:	bf00      	nop
240048f8:	2001ae68 	.word	0x2001ae68

240048fc <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
240048fc:	4801      	ldr	r0, [pc, #4]	; (24004904 <SPI6_IRQHandler+0x8>)
240048fe:	f006 bed1 	b.w	2400b6a4 <HAL_SPI_IRQHandler>
24004902:	bf00      	nop
24004904:	2001af08 	.word	0x2001af08

24004908 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24004908:	4801      	ldr	r0, [pc, #4]	; (24004910 <DMAMUX1_OVR_IRQHandler+0x8>)
2400490a:	f001 bdb5 	b.w	24006478 <HAL_DMAEx_MUX_IRQHandler>
2400490e:	bf00      	nop
24004910:	2001aa64 	.word	0x2001aa64

24004914 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24004914:	4801      	ldr	r0, [pc, #4]	; (2400491c <BDMA_Channel0_IRQHandler+0x8>)
24004916:	f001 b90b 	b.w	24005b30 <HAL_DMA_IRQHandler>
2400491a:	bf00      	nop
2400491c:	2001adf0 	.word	0x2001adf0

24004920 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004920:	4930      	ldr	r1, [pc, #192]	; (240049e4 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004922:	4a31      	ldr	r2, [pc, #196]	; (240049e8 <SystemInit+0xc8>)
{
24004924:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004926:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
2400492a:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2400492c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004934:	6813      	ldr	r3, [r2, #0]
24004936:	f003 030f 	and.w	r3, r3, #15
2400493a:	2b06      	cmp	r3, #6
2400493c:	d805      	bhi.n	2400494a <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400493e:	6813      	ldr	r3, [r2, #0]
24004940:	f023 030f 	bic.w	r3, r3, #15
24004944:	f043 0307 	orr.w	r3, r3, #7
24004948:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
2400494a:	4b28      	ldr	r3, [pc, #160]	; (240049ec <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
2400494c:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400494e:	4a28      	ldr	r2, [pc, #160]	; (240049f0 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
24004950:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004952:	4825      	ldr	r0, [pc, #148]	; (240049e8 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24004954:	f041 0101 	orr.w	r1, r1, #1
24004958:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
2400495a:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
2400495c:	6819      	ldr	r1, [r3, #0]
2400495e:	400a      	ands	r2, r1
24004960:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004962:	6803      	ldr	r3, [r0, #0]
24004964:	071b      	lsls	r3, r3, #28
24004966:	d505      	bpl.n	24004974 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24004968:	6803      	ldr	r3, [r0, #0]
2400496a:	f023 030f 	bic.w	r3, r3, #15
2400496e:	f043 0307 	orr.w	r3, r3, #7
24004972:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24004974:	4b1d      	ldr	r3, [pc, #116]	; (240049ec <SystemInit+0xcc>)
24004976:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24004978:	491e      	ldr	r1, [pc, #120]	; (240049f4 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
2400497a:	4c1f      	ldr	r4, [pc, #124]	; (240049f8 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
2400497c:	481f      	ldr	r0, [pc, #124]	; (240049fc <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
2400497e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24004980:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24004982:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24004984:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24004986:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24004988:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
2400498a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
2400498c:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2400498e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24004990:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24004992:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24004994:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004996:	4c1a      	ldr	r4, [pc, #104]	; (24004a00 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24004998:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400499c:	4919      	ldr	r1, [pc, #100]	; (24004a04 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
2400499e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
240049a0:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240049a2:	6823      	ldr	r3, [r4, #0]
240049a4:	4019      	ands	r1, r3
240049a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240049aa:	d203      	bcs.n	240049b4 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
240049ac:	4b16      	ldr	r3, [pc, #88]	; (24004a08 <SystemInit+0xe8>)
240049ae:	2201      	movs	r2, #1
240049b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240049b4:	4b0d      	ldr	r3, [pc, #52]	; (240049ec <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240049b6:	f243 04d2 	movw	r4, #12498	; 0x30d2
240049ba:	4814      	ldr	r0, [pc, #80]	; (24004a0c <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240049bc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240049c0:	4908      	ldr	r1, [pc, #32]	; (240049e4 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240049c2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
240049c6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
240049ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240049ce:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240049d0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
240049d4:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240049d6:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240049d8:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240049da:	b003      	add	sp, #12
240049dc:	f85d 4b04 	ldr.w	r4, [sp], #4
240049e0:	4770      	bx	lr
240049e2:	bf00      	nop
240049e4:	e000ed00 	.word	0xe000ed00
240049e8:	52002000 	.word	0x52002000
240049ec:	58024400 	.word	0x58024400
240049f0:	eaf6ed7f 	.word	0xeaf6ed7f
240049f4:	01010280 	.word	0x01010280
240049f8:	02020200 	.word	0x02020200
240049fc:	01ff0000 	.word	0x01ff0000
24004a00:	5c001000 	.word	0x5c001000
24004a04:	ffff0000 	.word	0xffff0000
24004a08:	51008000 	.word	0x51008000
24004a0c:	52004000 	.word	0x52004000

24004a10 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24004a10:	4b0f      	ldr	r3, [pc, #60]	; (24004a50 <HAL_InitTick+0x40>)
24004a12:	781b      	ldrb	r3, [r3, #0]
24004a14:	b90b      	cbnz	r3, 24004a1a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24004a16:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24004a18:	4770      	bx	lr
{
24004a1a:	b510      	push	{r4, lr}
24004a1c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24004a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24004a22:	4a0c      	ldr	r2, [pc, #48]	; (24004a54 <HAL_InitTick+0x44>)
24004a24:	fbb0 f3f3 	udiv	r3, r0, r3
24004a28:	6810      	ldr	r0, [r2, #0]
24004a2a:	fbb0 f0f3 	udiv	r0, r0, r3
24004a2e:	f000 f8e1 	bl	24004bf4 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24004a32:	2c0f      	cmp	r4, #15
24004a34:	d800      	bhi.n	24004a38 <HAL_InitTick+0x28>
24004a36:	b108      	cbz	r0, 24004a3c <HAL_InitTick+0x2c>
    return HAL_ERROR;
24004a38:	2001      	movs	r0, #1
}
24004a3a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24004a3c:	2200      	movs	r2, #0
24004a3e:	4621      	mov	r1, r4
24004a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24004a44:	f000 f876 	bl	24004b34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24004a48:	4b03      	ldr	r3, [pc, #12]	; (24004a58 <HAL_InitTick+0x48>)
24004a4a:	2000      	movs	r0, #0
24004a4c:	601c      	str	r4, [r3, #0]
}
24004a4e:	bd10      	pop	{r4, pc}
24004a50:	20000758 	.word	0x20000758
24004a54:	20000750 	.word	0x20000750
24004a58:	2000075c 	.word	0x2000075c

24004a5c <HAL_Init>:
{
24004a5c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24004a5e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a60:	4c12      	ldr	r4, [pc, #72]	; (24004aac <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24004a62:	f000 f855 	bl	24004b10 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004a66:	f003 f911 	bl	24007c8c <HAL_RCC_GetSysClockFreq>
24004a6a:	4b11      	ldr	r3, [pc, #68]	; (24004ab0 <HAL_Init+0x54>)
24004a6c:	4911      	ldr	r1, [pc, #68]	; (24004ab4 <HAL_Init+0x58>)
24004a6e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a70:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004a72:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a76:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004a7a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a7c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004a7e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24004a82:	490d      	ldr	r1, [pc, #52]	; (24004ab8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a84:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004a88:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a8a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24004a8e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004a90:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004a92:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004a94:	f7ff ffbc 	bl	24004a10 <HAL_InitTick>
24004a98:	b110      	cbz	r0, 24004aa0 <HAL_Init+0x44>
    return HAL_ERROR;
24004a9a:	2401      	movs	r4, #1
}
24004a9c:	4620      	mov	r0, r4
24004a9e:	bd10      	pop	{r4, pc}
24004aa0:	4604      	mov	r4, r0
  HAL_MspInit();
24004aa2:	f7ff fec5 	bl	24004830 <HAL_MspInit>
}
24004aa6:	4620      	mov	r0, r4
24004aa8:	bd10      	pop	{r4, pc}
24004aaa:	bf00      	nop
24004aac:	20000754 	.word	0x20000754
24004ab0:	58024400 	.word	0x58024400
24004ab4:	2401a63c 	.word	0x2401a63c
24004ab8:	20000750 	.word	0x20000750

24004abc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24004abc:	4a03      	ldr	r2, [pc, #12]	; (24004acc <HAL_IncTick+0x10>)
24004abe:	4b04      	ldr	r3, [pc, #16]	; (24004ad0 <HAL_IncTick+0x14>)
24004ac0:	6811      	ldr	r1, [r2, #0]
24004ac2:	781b      	ldrb	r3, [r3, #0]
24004ac4:	440b      	add	r3, r1
24004ac6:	6013      	str	r3, [r2, #0]
}
24004ac8:	4770      	bx	lr
24004aca:	bf00      	nop
24004acc:	2001afa4 	.word	0x2001afa4
24004ad0:	20000758 	.word	0x20000758

24004ad4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24004ad4:	4b01      	ldr	r3, [pc, #4]	; (24004adc <HAL_GetTick+0x8>)
24004ad6:	6818      	ldr	r0, [r3, #0]
}
24004ad8:	4770      	bx	lr
24004ada:	bf00      	nop
24004adc:	2001afa4 	.word	0x2001afa4

24004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24004ae0:	b538      	push	{r3, r4, r5, lr}
24004ae2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004ae4:	f7ff fff6 	bl	24004ad4 <HAL_GetTick>
24004ae8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24004aea:	1c63      	adds	r3, r4, #1
24004aec:	d002      	beq.n	24004af4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
24004aee:	4b04      	ldr	r3, [pc, #16]	; (24004b00 <HAL_Delay+0x20>)
24004af0:	781b      	ldrb	r3, [r3, #0]
24004af2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24004af4:	f7ff ffee 	bl	24004ad4 <HAL_GetTick>
24004af8:	1b43      	subs	r3, r0, r5
24004afa:	42a3      	cmp	r3, r4
24004afc:	d3fa      	bcc.n	24004af4 <HAL_Delay+0x14>
  {
  }
}
24004afe:	bd38      	pop	{r3, r4, r5, pc}
24004b00:	20000758 	.word	0x20000758

24004b04 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24004b04:	4b01      	ldr	r3, [pc, #4]	; (24004b0c <HAL_GetREVID+0x8>)
24004b06:	6818      	ldr	r0, [r3, #0]
}
24004b08:	0c00      	lsrs	r0, r0, #16
24004b0a:	4770      	bx	lr
24004b0c:	5c001000 	.word	0x5c001000

24004b10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004b10:	4906      	ldr	r1, [pc, #24]	; (24004b2c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24004b12:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004b16:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24004b18:	4b05      	ldr	r3, [pc, #20]	; (24004b30 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004b1a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004b1c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24004b20:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24004b24:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24004b26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24004b28:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24004b2a:	4770      	bx	lr
24004b2c:	e000ed00 	.word	0xe000ed00
24004b30:	05fa0000 	.word	0x05fa0000

24004b34 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24004b34:	4b1b      	ldr	r3, [pc, #108]	; (24004ba4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24004b36:	b500      	push	{lr}
24004b38:	68db      	ldr	r3, [r3, #12]
24004b3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004b3e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004b42:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004b46:	f1be 0f04 	cmp.w	lr, #4
24004b4a:	bf28      	it	cs
24004b4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004b50:	f1bc 0f06 	cmp.w	ip, #6
24004b54:	d91a      	bls.n	24004b8c <HAL_NVIC_SetPriority+0x58>
24004b56:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24004b58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24004b5c:	fa0c fc03 	lsl.w	ip, ip, r3
24004b60:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004b64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24004b68:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004b6a:	fa0c fc0e 	lsl.w	ip, ip, lr
24004b6e:	ea21 010c 	bic.w	r1, r1, ip
24004b72:	fa01 f103 	lsl.w	r1, r1, r3
24004b76:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24004b7a:	db0a      	blt.n	24004b92 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004b7c:	0109      	lsls	r1, r1, #4
24004b7e:	4b0a      	ldr	r3, [pc, #40]	; (24004ba8 <HAL_NVIC_SetPriority+0x74>)
24004b80:	b2c9      	uxtb	r1, r1
24004b82:	4403      	add	r3, r0
24004b84:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24004b88:	f85d fb04 	ldr.w	pc, [sp], #4
24004b8c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004b8e:	4613      	mov	r3, r2
24004b90:	e7e8      	b.n	24004b64 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004b92:	f000 000f 	and.w	r0, r0, #15
24004b96:	0109      	lsls	r1, r1, #4
24004b98:	4b04      	ldr	r3, [pc, #16]	; (24004bac <HAL_NVIC_SetPriority+0x78>)
24004b9a:	b2c9      	uxtb	r1, r1
24004b9c:	4403      	add	r3, r0
24004b9e:	7619      	strb	r1, [r3, #24]
24004ba0:	f85d fb04 	ldr.w	pc, [sp], #4
24004ba4:	e000ed00 	.word	0xe000ed00
24004ba8:	e000e100 	.word	0xe000e100
24004bac:	e000ecfc 	.word	0xe000ecfc

24004bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24004bb0:	2800      	cmp	r0, #0
24004bb2:	db07      	blt.n	24004bc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24004bb4:	2301      	movs	r3, #1
24004bb6:	f000 011f 	and.w	r1, r0, #31
24004bba:	4a03      	ldr	r2, [pc, #12]	; (24004bc8 <HAL_NVIC_EnableIRQ+0x18>)
24004bbc:	0940      	lsrs	r0, r0, #5
24004bbe:	408b      	lsls	r3, r1
24004bc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24004bc4:	4770      	bx	lr
24004bc6:	bf00      	nop
24004bc8:	e000e100 	.word	0xe000e100

24004bcc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24004bcc:	2800      	cmp	r0, #0
24004bce:	db0d      	blt.n	24004bec <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24004bd0:	0943      	lsrs	r3, r0, #5
24004bd2:	2201      	movs	r2, #1
24004bd4:	f000 001f 	and.w	r0, r0, #31
24004bd8:	4905      	ldr	r1, [pc, #20]	; (24004bf0 <HAL_NVIC_DisableIRQ+0x24>)
24004bda:	3320      	adds	r3, #32
24004bdc:	fa02 f000 	lsl.w	r0, r2, r0
24004be0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
24004be4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004be8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
24004bec:	4770      	bx	lr
24004bee:	bf00      	nop
24004bf0:	e000e100 	.word	0xe000e100

24004bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24004bf4:	1e43      	subs	r3, r0, #1
24004bf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24004bfa:	d20c      	bcs.n	24004c16 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004bfc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004c00:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004c02:	4906      	ldr	r1, [pc, #24]	; (24004c1c <HAL_SYSTICK_Config+0x28>)
24004c04:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004c08:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004c0a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004c0c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004c10:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004c12:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24004c14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24004c16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24004c18:	4770      	bx	lr
24004c1a:	bf00      	nop
24004c1c:	e000ed00 	.word	0xe000ed00

24004c20 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24004c20:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004c24:	4b04      	ldr	r3, [pc, #16]	; (24004c38 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24004c26:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24004c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24004c2e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24004c30:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24004c34:	4770      	bx	lr
24004c36:	bf00      	nop
24004c38:	e000ed00 	.word	0xe000ed00

24004c3c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24004c3c:	4b06      	ldr	r3, [pc, #24]	; (24004c58 <HAL_MPU_Enable+0x1c>)
24004c3e:	f040 0001 	orr.w	r0, r0, #1
24004c42:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24004c48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004c4c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24004c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004c52:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24004c56:	4770      	bx	lr
24004c58:	e000ed00 	.word	0xe000ed00

24004c5c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24004c5c:	7843      	ldrb	r3, [r0, #1]
24004c5e:	4a16      	ldr	r2, [pc, #88]	; (24004cb8 <HAL_MPU_ConfigRegion+0x5c>)
24004c60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24004c64:	7803      	ldrb	r3, [r0, #0]
24004c66:	b313      	cbz	r3, 24004cae <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24004c68:	6843      	ldr	r3, [r0, #4]
24004c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004c6e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004c70:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004c74:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24004c76:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004c78:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24004c7c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004c80:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24004c82:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004c84:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24004c88:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004c8c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24004c90:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004c92:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24004c96:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24004c9e:	7a01      	ldrb	r1, [r0, #8]
24004ca0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24004ca4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004ca8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24004cac:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24004cae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24004cb2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
24004cb6:	4770      	bx	lr
24004cb8:	e000ed00 	.word	0xe000ed00

24004cbc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004cbc:	4b34      	ldr	r3, [pc, #208]	; (24004d90 <DMA_CalcBaseAndBitshift+0xd4>)
24004cbe:	4935      	ldr	r1, [pc, #212]	; (24004d94 <DMA_CalcBaseAndBitshift+0xd8>)
{
24004cc0:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004cc2:	4d35      	ldr	r5, [pc, #212]	; (24004d98 <DMA_CalcBaseAndBitshift+0xdc>)
24004cc4:	6802      	ldr	r2, [r0, #0]
24004cc6:	4c35      	ldr	r4, [pc, #212]	; (24004d9c <DMA_CalcBaseAndBitshift+0xe0>)
24004cc8:	42aa      	cmp	r2, r5
24004cca:	bf18      	it	ne
24004ccc:	429a      	cmpne	r2, r3
24004cce:	bf0c      	ite	eq
24004cd0:	2301      	moveq	r3, #1
24004cd2:	2300      	movne	r3, #0
24004cd4:	428a      	cmp	r2, r1
24004cd6:	bf08      	it	eq
24004cd8:	f043 0301 	orreq.w	r3, r3, #1
24004cdc:	3130      	adds	r1, #48	; 0x30
24004cde:	42a2      	cmp	r2, r4
24004ce0:	bf08      	it	eq
24004ce2:	f043 0301 	orreq.w	r3, r3, #1
24004ce6:	3430      	adds	r4, #48	; 0x30
24004ce8:	428a      	cmp	r2, r1
24004cea:	bf08      	it	eq
24004cec:	f043 0301 	orreq.w	r3, r3, #1
24004cf0:	3130      	adds	r1, #48	; 0x30
24004cf2:	42a2      	cmp	r2, r4
24004cf4:	bf08      	it	eq
24004cf6:	f043 0301 	orreq.w	r3, r3, #1
24004cfa:	3430      	adds	r4, #48	; 0x30
24004cfc:	428a      	cmp	r2, r1
24004cfe:	bf08      	it	eq
24004d00:	f043 0301 	orreq.w	r3, r3, #1
24004d04:	f501 715c 	add.w	r1, r1, #880	; 0x370
24004d08:	42a2      	cmp	r2, r4
24004d0a:	bf08      	it	eq
24004d0c:	f043 0301 	orreq.w	r3, r3, #1
24004d10:	f504 745c 	add.w	r4, r4, #880	; 0x370
24004d14:	428a      	cmp	r2, r1
24004d16:	bf08      	it	eq
24004d18:	f043 0301 	orreq.w	r3, r3, #1
24004d1c:	3130      	adds	r1, #48	; 0x30
24004d1e:	42a2      	cmp	r2, r4
24004d20:	bf08      	it	eq
24004d22:	f043 0301 	orreq.w	r3, r3, #1
24004d26:	3430      	adds	r4, #48	; 0x30
24004d28:	428a      	cmp	r2, r1
24004d2a:	bf08      	it	eq
24004d2c:	f043 0301 	orreq.w	r3, r3, #1
24004d30:	3130      	adds	r1, #48	; 0x30
24004d32:	42a2      	cmp	r2, r4
24004d34:	bf08      	it	eq
24004d36:	f043 0301 	orreq.w	r3, r3, #1
24004d3a:	3430      	adds	r4, #48	; 0x30
24004d3c:	428a      	cmp	r2, r1
24004d3e:	bf08      	it	eq
24004d40:	f043 0301 	orreq.w	r3, r3, #1
24004d44:	3130      	adds	r1, #48	; 0x30
24004d46:	42a2      	cmp	r2, r4
24004d48:	bf08      	it	eq
24004d4a:	f043 0301 	orreq.w	r3, r3, #1
24004d4e:	428a      	cmp	r2, r1
24004d50:	bf08      	it	eq
24004d52:	f043 0301 	orreq.w	r3, r3, #1
24004d56:	b913      	cbnz	r3, 24004d5e <DMA_CalcBaseAndBitshift+0xa2>
24004d58:	4b11      	ldr	r3, [pc, #68]	; (24004da0 <DMA_CalcBaseAndBitshift+0xe4>)
24004d5a:	429a      	cmp	r2, r3
24004d5c:	d113      	bne.n	24004d86 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004d5e:	b2d3      	uxtb	r3, r2
24004d60:	4910      	ldr	r1, [pc, #64]	; (24004da4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004d62:	4c11      	ldr	r4, [pc, #68]	; (24004da8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004d64:	3b10      	subs	r3, #16
24004d66:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
24004d6a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004d6c:	4b0f      	ldr	r3, [pc, #60]	; (24004dac <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004d6e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004d72:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004d76:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004d78:	bf88      	it	hi
24004d7a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004d7c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24004d7e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24004d80:	4618      	mov	r0, r3
24004d82:	bc30      	pop	{r4, r5}
24004d84:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24004d86:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
24004d8a:	6583      	str	r3, [r0, #88]	; 0x58
24004d8c:	e7f8      	b.n	24004d80 <DMA_CalcBaseAndBitshift+0xc4>
24004d8e:	bf00      	nop
24004d90:	40020010 	.word	0x40020010
24004d94:	40020040 	.word	0x40020040
24004d98:	40020028 	.word	0x40020028
24004d9c:	40020058 	.word	0x40020058
24004da0:	400204b8 	.word	0x400204b8
24004da4:	aaaaaaab 	.word	0xaaaaaaab
24004da8:	2401a64c 	.word	0x2401a64c
24004dac:	fffffc00 	.word	0xfffffc00

24004db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24004db0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004db2:	4a29      	ldr	r2, [pc, #164]	; (24004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24004db4:	4929      	ldr	r1, [pc, #164]	; (24004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
24004db6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004db8:	4d29      	ldr	r5, [pc, #164]	; (24004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
24004dba:	4c2a      	ldr	r4, [pc, #168]	; (24004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
24004dbc:	42ab      	cmp	r3, r5
24004dbe:	bf18      	it	ne
24004dc0:	4293      	cmpne	r3, r2
24004dc2:	bf0c      	ite	eq
24004dc4:	2201      	moveq	r2, #1
24004dc6:	2200      	movne	r2, #0
24004dc8:	428b      	cmp	r3, r1
24004dca:	bf08      	it	eq
24004dcc:	f042 0201 	orreq.w	r2, r2, #1
24004dd0:	3128      	adds	r1, #40	; 0x28
24004dd2:	42a3      	cmp	r3, r4
24004dd4:	bf08      	it	eq
24004dd6:	f042 0201 	orreq.w	r2, r2, #1
24004dda:	3428      	adds	r4, #40	; 0x28
24004ddc:	428b      	cmp	r3, r1
24004dde:	bf08      	it	eq
24004de0:	f042 0201 	orreq.w	r2, r2, #1
24004de4:	3128      	adds	r1, #40	; 0x28
24004de6:	42a3      	cmp	r3, r4
24004de8:	bf08      	it	eq
24004dea:	f042 0201 	orreq.w	r2, r2, #1
24004dee:	428b      	cmp	r3, r1
24004df0:	bf08      	it	eq
24004df2:	f042 0201 	orreq.w	r2, r2, #1
24004df6:	b912      	cbnz	r2, 24004dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24004df8:	4a1b      	ldr	r2, [pc, #108]	; (24004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
24004dfa:	4293      	cmp	r3, r2
24004dfc:	d113      	bne.n	24004e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004dfe:	b2db      	uxtb	r3, r3
24004e00:	4c1a      	ldr	r4, [pc, #104]	; (24004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004e02:	4a1b      	ldr	r2, [pc, #108]	; (24004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e04:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004e06:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004e08:	4d1a      	ldr	r5, [pc, #104]	; (24004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004e0a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004e0e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004e10:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e14:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004e18:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e1a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004e1e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e20:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24004e22:	bc30      	pop	{r4, r5}
24004e24:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004e26:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004e28:	4913      	ldr	r1, [pc, #76]	; (24004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004e2a:	4c14      	ldr	r4, [pc, #80]	; (24004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004e2c:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004e2e:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004e30:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004e32:	fba4 2302 	umull	r2, r3, r4, r2
24004e36:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004e3a:	d800      	bhi.n	24004e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24004e3c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004e3e:	4a10      	ldr	r2, [pc, #64]	; (24004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e40:	f003 051f 	and.w	r5, r3, #31
24004e44:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004e46:	4c0f      	ldr	r4, [pc, #60]	; (24004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004e48:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e4a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004e4c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004e4e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004e50:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004e52:	6602      	str	r2, [r0, #96]	; 0x60
}
24004e54:	e7e5      	b.n	24004e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
24004e56:	bf00      	nop
24004e58:	58025408 	.word	0x58025408
24004e5c:	58025430 	.word	0x58025430
24004e60:	5802541c 	.word	0x5802541c
24004e64:	58025444 	.word	0x58025444
24004e68:	58025494 	.word	0x58025494
24004e6c:	cccccccd 	.word	0xcccccccd
24004e70:	16009600 	.word	0x16009600
24004e74:	58025880 	.word	0x58025880
24004e78:	bffdfbf0 	.word	0xbffdfbf0
24004e7c:	aaaaaaab 	.word	0xaaaaaaab
24004e80:	10008200 	.word	0x10008200
24004e84:	40020880 	.word	0x40020880

24004e88 <HAL_DMA_Init>:
{
24004e88:	b538      	push	{r3, r4, r5, lr}
24004e8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004e8c:	f7ff fe22 	bl	24004ad4 <HAL_GetTick>
  if(hdma == NULL)
24004e90:	2c00      	cmp	r4, #0
24004e92:	f000 816b 	beq.w	2400516c <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004e96:	6822      	ldr	r2, [r4, #0]
24004e98:	4605      	mov	r5, r0
24004e9a:	4ba3      	ldr	r3, [pc, #652]	; (24005128 <HAL_DMA_Init+0x2a0>)
24004e9c:	429a      	cmp	r2, r3
24004e9e:	d048      	beq.n	24004f32 <HAL_DMA_Init+0xaa>
24004ea0:	3318      	adds	r3, #24
24004ea2:	429a      	cmp	r2, r3
24004ea4:	d045      	beq.n	24004f32 <HAL_DMA_Init+0xaa>
24004ea6:	3330      	adds	r3, #48	; 0x30
24004ea8:	49a0      	ldr	r1, [pc, #640]	; (2400512c <HAL_DMA_Init+0x2a4>)
24004eaa:	428a      	cmp	r2, r1
24004eac:	bf18      	it	ne
24004eae:	429a      	cmpne	r2, r3
24004eb0:	f101 0130 	add.w	r1, r1, #48	; 0x30
24004eb4:	bf0c      	ite	eq
24004eb6:	2301      	moveq	r3, #1
24004eb8:	2300      	movne	r3, #0
24004eba:	428a      	cmp	r2, r1
24004ebc:	bf08      	it	eq
24004ebe:	f043 0301 	orreq.w	r3, r3, #1
24004ec2:	3118      	adds	r1, #24
24004ec4:	428a      	cmp	r2, r1
24004ec6:	bf08      	it	eq
24004ec8:	f043 0301 	orreq.w	r3, r3, #1
24004ecc:	3118      	adds	r1, #24
24004ece:	428a      	cmp	r2, r1
24004ed0:	bf08      	it	eq
24004ed2:	f043 0301 	orreq.w	r3, r3, #1
24004ed6:	3118      	adds	r1, #24
24004ed8:	428a      	cmp	r2, r1
24004eda:	bf08      	it	eq
24004edc:	f043 0301 	orreq.w	r3, r3, #1
24004ee0:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004ee4:	428a      	cmp	r2, r1
24004ee6:	bf08      	it	eq
24004ee8:	f043 0301 	orreq.w	r3, r3, #1
24004eec:	3118      	adds	r1, #24
24004eee:	428a      	cmp	r2, r1
24004ef0:	bf08      	it	eq
24004ef2:	f043 0301 	orreq.w	r3, r3, #1
24004ef6:	3118      	adds	r1, #24
24004ef8:	428a      	cmp	r2, r1
24004efa:	bf08      	it	eq
24004efc:	f043 0301 	orreq.w	r3, r3, #1
24004f00:	3118      	adds	r1, #24
24004f02:	428a      	cmp	r2, r1
24004f04:	bf08      	it	eq
24004f06:	f043 0301 	orreq.w	r3, r3, #1
24004f0a:	3118      	adds	r1, #24
24004f0c:	428a      	cmp	r2, r1
24004f0e:	bf08      	it	eq
24004f10:	f043 0301 	orreq.w	r3, r3, #1
24004f14:	3118      	adds	r1, #24
24004f16:	428a      	cmp	r2, r1
24004f18:	bf08      	it	eq
24004f1a:	f043 0301 	orreq.w	r3, r3, #1
24004f1e:	3118      	adds	r1, #24
24004f20:	428a      	cmp	r2, r1
24004f22:	bf08      	it	eq
24004f24:	f043 0301 	orreq.w	r3, r3, #1
24004f28:	b91b      	cbnz	r3, 24004f32 <HAL_DMA_Init+0xaa>
24004f2a:	4b81      	ldr	r3, [pc, #516]	; (24005130 <HAL_DMA_Init+0x2a8>)
24004f2c:	429a      	cmp	r2, r3
24004f2e:	f040 8184 	bne.w	2400523a <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
24004f32:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004f34:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
24004f36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
24004f3a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24004f3e:	6813      	ldr	r3, [r2, #0]
24004f40:	f023 0301 	bic.w	r3, r3, #1
24004f44:	6013      	str	r3, [r2, #0]
24004f46:	e005      	b.n	24004f54 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004f48:	f7ff fdc4 	bl	24004ad4 <HAL_GetTick>
24004f4c:	1b43      	subs	r3, r0, r5
24004f4e:	2b05      	cmp	r3, #5
24004f50:	f200 80fe 	bhi.w	24005150 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004f54:	6823      	ldr	r3, [r4, #0]
24004f56:	681a      	ldr	r2, [r3, #0]
24004f58:	07d0      	lsls	r0, r2, #31
24004f5a:	d4f5      	bmi.n	24004f48 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24004f5c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004f60:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24004f62:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004f64:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004f68:	430a      	orrs	r2, r1
24004f6a:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004f6c:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004f6e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004f72:	69a1      	ldr	r1, [r4, #24]
24004f74:	ea42 0201 	orr.w	r2, r2, r1
24004f78:	69e1      	ldr	r1, [r4, #28]
24004f7a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004f7e:	6a21      	ldr	r1, [r4, #32]
24004f80:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004f84:	496b      	ldr	r1, [pc, #428]	; (24005134 <HAL_DMA_Init+0x2ac>)
24004f86:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24004f8a:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004f8e:	d103      	bne.n	24004f98 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004f90:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24004f94:	4301      	orrs	r1, r0
24004f96:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004f98:	4867      	ldr	r0, [pc, #412]	; (24005138 <HAL_DMA_Init+0x2b0>)
24004f9a:	4968      	ldr	r1, [pc, #416]	; (2400513c <HAL_DMA_Init+0x2b4>)
24004f9c:	6800      	ldr	r0, [r0, #0]
24004f9e:	4001      	ands	r1, r0
24004fa0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004fa4:	d30a      	bcc.n	24004fbc <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004fa6:	6861      	ldr	r1, [r4, #4]
24004fa8:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24004fac:	281f      	cmp	r0, #31
24004fae:	f240 80d6 	bls.w	2400515e <HAL_DMA_Init+0x2d6>
24004fb2:	394f      	subs	r1, #79	; 0x4f
24004fb4:	2903      	cmp	r1, #3
24004fb6:	d801      	bhi.n	24004fbc <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24004fb8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004fbc:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004fbe:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24004fc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004fc2:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004fc4:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004fc6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24004fca:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004fce:	d10e      	bne.n	24004fee <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004fd0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24004fd4:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004fd6:	b150      	cbz	r0, 24004fee <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24004fd8:	69a5      	ldr	r5, [r4, #24]
24004fda:	2d00      	cmp	r5, #0
24004fdc:	f040 8108 	bne.w	240051f0 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
24004fe0:	2a01      	cmp	r2, #1
24004fe2:	f000 8125 	beq.w	24005230 <HAL_DMA_Init+0x3a8>
24004fe6:	f032 0202 	bics.w	r2, r2, #2
24004fea:	f000 8109 	beq.w	24005200 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004fee:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004ff0:	4620      	mov	r0, r4
24004ff2:	f7ff fe63 	bl	24004cbc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004ff6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004ff8:	233f      	movs	r3, #63	; 0x3f
24004ffa:	f002 021f 	and.w	r2, r2, #31
24004ffe:	4093      	lsls	r3, r2
24005000:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005002:	6822      	ldr	r2, [r4, #0]
24005004:	4b48      	ldr	r3, [pc, #288]	; (24005128 <HAL_DMA_Init+0x2a0>)
24005006:	484e      	ldr	r0, [pc, #312]	; (24005140 <HAL_DMA_Init+0x2b8>)
24005008:	4948      	ldr	r1, [pc, #288]	; (2400512c <HAL_DMA_Init+0x2a4>)
2400500a:	4282      	cmp	r2, r0
2400500c:	bf18      	it	ne
2400500e:	429a      	cmpne	r2, r3
24005010:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005014:	bf0c      	ite	eq
24005016:	2301      	moveq	r3, #1
24005018:	2300      	movne	r3, #0
2400501a:	428a      	cmp	r2, r1
2400501c:	bf08      	it	eq
2400501e:	f043 0301 	orreq.w	r3, r3, #1
24005022:	3130      	adds	r1, #48	; 0x30
24005024:	4282      	cmp	r2, r0
24005026:	bf08      	it	eq
24005028:	f043 0301 	orreq.w	r3, r3, #1
2400502c:	3030      	adds	r0, #48	; 0x30
2400502e:	428a      	cmp	r2, r1
24005030:	bf08      	it	eq
24005032:	f043 0301 	orreq.w	r3, r3, #1
24005036:	3130      	adds	r1, #48	; 0x30
24005038:	4282      	cmp	r2, r0
2400503a:	bf08      	it	eq
2400503c:	f043 0301 	orreq.w	r3, r3, #1
24005040:	3030      	adds	r0, #48	; 0x30
24005042:	428a      	cmp	r2, r1
24005044:	bf08      	it	eq
24005046:	f043 0301 	orreq.w	r3, r3, #1
2400504a:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400504e:	4282      	cmp	r2, r0
24005050:	bf08      	it	eq
24005052:	f043 0301 	orreq.w	r3, r3, #1
24005056:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400505a:	428a      	cmp	r2, r1
2400505c:	bf08      	it	eq
2400505e:	f043 0301 	orreq.w	r3, r3, #1
24005062:	3130      	adds	r1, #48	; 0x30
24005064:	4282      	cmp	r2, r0
24005066:	bf08      	it	eq
24005068:	f043 0301 	orreq.w	r3, r3, #1
2400506c:	3030      	adds	r0, #48	; 0x30
2400506e:	428a      	cmp	r2, r1
24005070:	bf08      	it	eq
24005072:	f043 0301 	orreq.w	r3, r3, #1
24005076:	3130      	adds	r1, #48	; 0x30
24005078:	4282      	cmp	r2, r0
2400507a:	bf08      	it	eq
2400507c:	f043 0301 	orreq.w	r3, r3, #1
24005080:	3030      	adds	r0, #48	; 0x30
24005082:	428a      	cmp	r2, r1
24005084:	bf08      	it	eq
24005086:	f043 0301 	orreq.w	r3, r3, #1
2400508a:	3130      	adds	r1, #48	; 0x30
2400508c:	4282      	cmp	r2, r0
2400508e:	bf08      	it	eq
24005090:	f043 0301 	orreq.w	r3, r3, #1
24005094:	3030      	adds	r0, #48	; 0x30
24005096:	428a      	cmp	r2, r1
24005098:	bf08      	it	eq
2400509a:	f043 0301 	orreq.w	r3, r3, #1
2400509e:	4929      	ldr	r1, [pc, #164]	; (24005144 <HAL_DMA_Init+0x2bc>)
240050a0:	4282      	cmp	r2, r0
240050a2:	bf08      	it	eq
240050a4:	f043 0301 	orreq.w	r3, r3, #1
240050a8:	4827      	ldr	r0, [pc, #156]	; (24005148 <HAL_DMA_Init+0x2c0>)
240050aa:	428a      	cmp	r2, r1
240050ac:	bf08      	it	eq
240050ae:	f043 0301 	orreq.w	r3, r3, #1
240050b2:	3128      	adds	r1, #40	; 0x28
240050b4:	4282      	cmp	r2, r0
240050b6:	bf08      	it	eq
240050b8:	f043 0301 	orreq.w	r3, r3, #1
240050bc:	3028      	adds	r0, #40	; 0x28
240050be:	428a      	cmp	r2, r1
240050c0:	bf08      	it	eq
240050c2:	f043 0301 	orreq.w	r3, r3, #1
240050c6:	3128      	adds	r1, #40	; 0x28
240050c8:	4282      	cmp	r2, r0
240050ca:	bf08      	it	eq
240050cc:	f043 0301 	orreq.w	r3, r3, #1
240050d0:	3028      	adds	r0, #40	; 0x28
240050d2:	428a      	cmp	r2, r1
240050d4:	bf08      	it	eq
240050d6:	f043 0301 	orreq.w	r3, r3, #1
240050da:	3128      	adds	r1, #40	; 0x28
240050dc:	4282      	cmp	r2, r0
240050de:	bf08      	it	eq
240050e0:	f043 0301 	orreq.w	r3, r3, #1
240050e4:	428a      	cmp	r2, r1
240050e6:	bf08      	it	eq
240050e8:	f043 0301 	orreq.w	r3, r3, #1
240050ec:	b913      	cbnz	r3, 240050f4 <HAL_DMA_Init+0x26c>
240050ee:	4b17      	ldr	r3, [pc, #92]	; (2400514c <HAL_DMA_Init+0x2c4>)
240050f0:	429a      	cmp	r2, r3
240050f2:	d113      	bne.n	2400511c <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240050f4:	4620      	mov	r0, r4
240050f6:	f7ff fe5b 	bl	24004db0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240050fa:	68a3      	ldr	r3, [r4, #8]
240050fc:	2b80      	cmp	r3, #128	; 0x80
240050fe:	d037      	beq.n	24005170 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24005100:	7922      	ldrb	r2, [r4, #4]
24005102:	6e23      	ldr	r3, [r4, #96]	; 0x60
24005104:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005106:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
2400510a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400510c:	6861      	ldr	r1, [r4, #4]
2400510e:	1e4b      	subs	r3, r1, #1
24005110:	2b07      	cmp	r3, #7
24005112:	d931      	bls.n	24005178 <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
24005114:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24005116:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
2400511a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400511c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
2400511e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005120:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24005122:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005126:	bd38      	pop	{r3, r4, r5, pc}
24005128:	40020010 	.word	0x40020010
2400512c:	40020040 	.word	0x40020040
24005130:	400204b8 	.word	0x400204b8
24005134:	fe10803f 	.word	0xfe10803f
24005138:	5c001000 	.word	0x5c001000
2400513c:	ffff0000 	.word	0xffff0000
24005140:	40020028 	.word	0x40020028
24005144:	58025408 	.word	0x58025408
24005148:	5802541c 	.word	0x5802541c
2400514c:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005150:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24005152:	2303      	movs	r3, #3
        return HAL_ERROR;
24005154:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005156:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24005158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
2400515c:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
2400515e:	496a      	ldr	r1, [pc, #424]	; (24005308 <HAL_DMA_Init+0x480>)
24005160:	fa21 f000 	lsr.w	r0, r1, r0
24005164:	07c1      	lsls	r1, r0, #31
24005166:	f57f af29 	bpl.w	24004fbc <HAL_DMA_Init+0x134>
2400516a:	e725      	b.n	24004fb8 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
2400516c:	2001      	movs	r0, #1
}
2400516e:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24005170:	2300      	movs	r3, #0
24005172:	461a      	mov	r2, r3
24005174:	6063      	str	r3, [r4, #4]
24005176:	e7c4      	b.n	24005102 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24005178:	6820      	ldr	r0, [r4, #0]
2400517a:	4a64      	ldr	r2, [pc, #400]	; (2400530c <HAL_DMA_Init+0x484>)
2400517c:	4d64      	ldr	r5, [pc, #400]	; (24005310 <HAL_DMA_Init+0x488>)
2400517e:	42a8      	cmp	r0, r5
24005180:	bf18      	it	ne
24005182:	4290      	cmpne	r0, r2
24005184:	f105 0514 	add.w	r5, r5, #20
24005188:	bf0c      	ite	eq
2400518a:	2201      	moveq	r2, #1
2400518c:	2200      	movne	r2, #0
2400518e:	42a8      	cmp	r0, r5
24005190:	bf08      	it	eq
24005192:	f042 0201 	orreq.w	r2, r2, #1
24005196:	3514      	adds	r5, #20
24005198:	42a8      	cmp	r0, r5
2400519a:	bf08      	it	eq
2400519c:	f042 0201 	orreq.w	r2, r2, #1
240051a0:	3514      	adds	r5, #20
240051a2:	42a8      	cmp	r0, r5
240051a4:	bf08      	it	eq
240051a6:	f042 0201 	orreq.w	r2, r2, #1
240051aa:	3514      	adds	r5, #20
240051ac:	42a8      	cmp	r0, r5
240051ae:	bf08      	it	eq
240051b0:	f042 0201 	orreq.w	r2, r2, #1
240051b4:	3514      	adds	r5, #20
240051b6:	42a8      	cmp	r0, r5
240051b8:	bf08      	it	eq
240051ba:	f042 0201 	orreq.w	r2, r2, #1
240051be:	b93a      	cbnz	r2, 240051d0 <HAL_DMA_Init+0x348>
240051c0:	4a54      	ldr	r2, [pc, #336]	; (24005314 <HAL_DMA_Init+0x48c>)
240051c2:	4290      	cmp	r0, r2
240051c4:	d004      	beq.n	240051d0 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
240051c6:	4a54      	ldr	r2, [pc, #336]	; (24005318 <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
240051c8:	4854      	ldr	r0, [pc, #336]	; (2400531c <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
240051ca:	440a      	add	r2, r1
240051cc:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
240051ce:	e003      	b.n	240051d8 <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
240051d0:	4a53      	ldr	r2, [pc, #332]	; (24005320 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
240051d2:	4854      	ldr	r0, [pc, #336]	; (24005324 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
240051d4:	440a      	add	r2, r1
240051d6:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240051d8:	2101      	movs	r1, #1
240051da:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
240051de:	2100      	movs	r1, #0
240051e0:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240051e4:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
240051e6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240051e8:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
240051ec:	605a      	str	r2, [r3, #4]
240051ee:	e795      	b.n	2400511c <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
240051f0:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
240051f4:	d00e      	beq.n	24005214 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
240051f6:	2a02      	cmp	r2, #2
240051f8:	d905      	bls.n	24005206 <HAL_DMA_Init+0x37e>
240051fa:	2a03      	cmp	r2, #3
240051fc:	f47f aef7 	bne.w	24004fee <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24005200:	01c2      	lsls	r2, r0, #7
24005202:	f57f aef4 	bpl.w	24004fee <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
24005206:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005208:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
2400520a:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400520c:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
2400520e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005212:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24005214:	2a03      	cmp	r2, #3
24005216:	f63f aeea 	bhi.w	24004fee <HAL_DMA_Init+0x166>
2400521a:	a501      	add	r5, pc, #4	; (adr r5, 24005220 <HAL_DMA_Init+0x398>)
2400521c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24005220:	24005207 	.word	0x24005207
24005224:	24005201 	.word	0x24005201
24005228:	24005207 	.word	0x24005207
2400522c:	24005231 	.word	0x24005231
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24005230:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24005234:	f47f aedb 	bne.w	24004fee <HAL_DMA_Init+0x166>
24005238:	e7e5      	b.n	24005206 <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400523a:	4b34      	ldr	r3, [pc, #208]	; (2400530c <HAL_DMA_Init+0x484>)
2400523c:	4834      	ldr	r0, [pc, #208]	; (24005310 <HAL_DMA_Init+0x488>)
2400523e:	493a      	ldr	r1, [pc, #232]	; (24005328 <HAL_DMA_Init+0x4a0>)
24005240:	4282      	cmp	r2, r0
24005242:	bf18      	it	ne
24005244:	429a      	cmpne	r2, r3
24005246:	f100 0028 	add.w	r0, r0, #40	; 0x28
2400524a:	bf0c      	ite	eq
2400524c:	2301      	moveq	r3, #1
2400524e:	2300      	movne	r3, #0
24005250:	428a      	cmp	r2, r1
24005252:	bf08      	it	eq
24005254:	f043 0301 	orreq.w	r3, r3, #1
24005258:	3128      	adds	r1, #40	; 0x28
2400525a:	4282      	cmp	r2, r0
2400525c:	bf08      	it	eq
2400525e:	f043 0301 	orreq.w	r3, r3, #1
24005262:	3028      	adds	r0, #40	; 0x28
24005264:	428a      	cmp	r2, r1
24005266:	bf08      	it	eq
24005268:	f043 0301 	orreq.w	r3, r3, #1
2400526c:	3128      	adds	r1, #40	; 0x28
2400526e:	4282      	cmp	r2, r0
24005270:	bf08      	it	eq
24005272:	f043 0301 	orreq.w	r3, r3, #1
24005276:	428a      	cmp	r2, r1
24005278:	bf08      	it	eq
2400527a:	f043 0301 	orreq.w	r3, r3, #1
2400527e:	b913      	cbnz	r3, 24005286 <HAL_DMA_Init+0x3fe>
24005280:	4b24      	ldr	r3, [pc, #144]	; (24005314 <HAL_DMA_Init+0x48c>)
24005282:	429a      	cmp	r2, r3
24005284:	d139      	bne.n	240052fa <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
24005286:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24005288:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2400528a:	4928      	ldr	r1, [pc, #160]	; (2400532c <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
2400528c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24005290:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24005294:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24005296:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005298:	68a3      	ldr	r3, [r4, #8]
2400529a:	2b40      	cmp	r3, #64	; 0x40
2400529c:	d02b      	beq.n	240052f6 <HAL_DMA_Init+0x46e>
2400529e:	2b80      	cmp	r3, #128	; 0x80
240052a0:	bf0c      	ite	eq
240052a2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
240052a6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240052a8:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
240052ac:	08db      	lsrs	r3, r3, #3
240052ae:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240052b2:	6965      	ldr	r5, [r4, #20]
240052b4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240052b8:	69a5      	ldr	r5, [r4, #24]
240052ba:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240052be:	69e5      	ldr	r5, [r4, #28]
240052c0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240052c4:	6a25      	ldr	r5, [r4, #32]
240052c6:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
240052ca:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240052cc:	4918      	ldr	r1, [pc, #96]	; (24005330 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240052ce:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240052d0:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240052d2:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240052d4:	6822      	ldr	r2, [r4, #0]
240052d6:	4b17      	ldr	r3, [pc, #92]	; (24005334 <HAL_DMA_Init+0x4ac>)
240052d8:	4411      	add	r1, r2
240052da:	fba3 2301 	umull	r2, r3, r3, r1
240052de:	091b      	lsrs	r3, r3, #4
240052e0:	009b      	lsls	r3, r3, #2
240052e2:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240052e4:	f7ff fcea 	bl	24004cbc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240052e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240052ea:	2301      	movs	r3, #1
240052ec:	f002 021f 	and.w	r2, r2, #31
240052f0:	4093      	lsls	r3, r2
240052f2:	6043      	str	r3, [r0, #4]
240052f4:	e685      	b.n	24005002 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240052f6:	2010      	movs	r0, #16
240052f8:	e7d6      	b.n	240052a8 <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240052fa:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
240052fc:	2303      	movs	r3, #3
    return HAL_ERROR;
240052fe:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005300:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24005302:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24005306:	bd38      	pop	{r3, r4, r5, pc}
24005308:	c3c0003f 	.word	0xc3c0003f
2400530c:	58025408 	.word	0x58025408
24005310:	5802541c 	.word	0x5802541c
24005314:	58025494 	.word	0x58025494
24005318:	1000823f 	.word	0x1000823f
2400531c:	40020940 	.word	0x40020940
24005320:	1600963f 	.word	0x1600963f
24005324:	58025940 	.word	0x58025940
24005328:	58025430 	.word	0x58025430
2400532c:	fffe000f 	.word	0xfffe000f
24005330:	a7fdabf8 	.word	0xa7fdabf8
24005334:	cccccccd 	.word	0xcccccccd

24005338 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24005338:	2800      	cmp	r0, #0
2400533a:	f000 8270 	beq.w	2400581e <HAL_DMA_Start_IT+0x4e6>
2400533e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24005340:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24005344:	2801      	cmp	r0, #1
24005346:	f000 826c 	beq.w	24005822 <HAL_DMA_Start_IT+0x4ea>
2400534a:	2001      	movs	r0, #1
{
2400534c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
2400534e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24005352:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24005356:	4284      	cmp	r4, r0
24005358:	d008      	beq.n	2400536c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400535a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
2400535e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005360:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005364:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24005368:	bc70      	pop	{r4, r5, r6}
2400536a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
2400536c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
2400536e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005372:	4ea2      	ldr	r6, [pc, #648]	; (240055fc <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005374:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005378:	2000      	movs	r0, #0
2400537a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
2400537e:	6820      	ldr	r0, [r4, #0]
24005380:	f020 0001 	bic.w	r0, r0, #1
24005384:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005386:	489e      	ldr	r0, [pc, #632]	; (24005600 <HAL_DMA_Start_IT+0x2c8>)
24005388:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400538c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005390:	42b4      	cmp	r4, r6
24005392:	bf18      	it	ne
24005394:	4284      	cmpne	r4, r0
24005396:	f106 0618 	add.w	r6, r6, #24
2400539a:	bf0c      	ite	eq
2400539c:	2001      	moveq	r0, #1
2400539e:	2000      	movne	r0, #0
240053a0:	42b4      	cmp	r4, r6
240053a2:	bf08      	it	eq
240053a4:	f040 0001 	orreq.w	r0, r0, #1
240053a8:	3618      	adds	r6, #24
240053aa:	42b4      	cmp	r4, r6
240053ac:	bf08      	it	eq
240053ae:	f040 0001 	orreq.w	r0, r0, #1
240053b2:	3618      	adds	r6, #24
240053b4:	42b4      	cmp	r4, r6
240053b6:	bf08      	it	eq
240053b8:	f040 0001 	orreq.w	r0, r0, #1
240053bc:	3618      	adds	r6, #24
240053be:	42b4      	cmp	r4, r6
240053c0:	bf08      	it	eq
240053c2:	f040 0001 	orreq.w	r0, r0, #1
240053c6:	3618      	adds	r6, #24
240053c8:	42b4      	cmp	r4, r6
240053ca:	bf08      	it	eq
240053cc:	f040 0001 	orreq.w	r0, r0, #1
240053d0:	3618      	adds	r6, #24
240053d2:	42b4      	cmp	r4, r6
240053d4:	bf08      	it	eq
240053d6:	f040 0001 	orreq.w	r0, r0, #1
240053da:	f506 7656 	add.w	r6, r6, #856	; 0x358
240053de:	42b4      	cmp	r4, r6
240053e0:	bf08      	it	eq
240053e2:	f040 0001 	orreq.w	r0, r0, #1
240053e6:	3618      	adds	r6, #24
240053e8:	42b4      	cmp	r4, r6
240053ea:	bf08      	it	eq
240053ec:	f040 0001 	orreq.w	r0, r0, #1
240053f0:	3618      	adds	r6, #24
240053f2:	42b4      	cmp	r4, r6
240053f4:	bf08      	it	eq
240053f6:	f040 0001 	orreq.w	r0, r0, #1
240053fa:	3618      	adds	r6, #24
240053fc:	42b4      	cmp	r4, r6
240053fe:	bf08      	it	eq
24005400:	f040 0001 	orreq.w	r0, r0, #1
24005404:	3618      	adds	r6, #24
24005406:	42b4      	cmp	r4, r6
24005408:	bf08      	it	eq
2400540a:	f040 0001 	orreq.w	r0, r0, #1
2400540e:	3618      	adds	r6, #24
24005410:	42b4      	cmp	r4, r6
24005412:	bf08      	it	eq
24005414:	f040 0001 	orreq.w	r0, r0, #1
24005418:	3618      	adds	r6, #24
2400541a:	42b4      	cmp	r4, r6
2400541c:	bf08      	it	eq
2400541e:	f040 0001 	orreq.w	r0, r0, #1
24005422:	3618      	adds	r6, #24
24005424:	42b4      	cmp	r4, r6
24005426:	bf08      	it	eq
24005428:	f040 0001 	orreq.w	r0, r0, #1
2400542c:	4e75      	ldr	r6, [pc, #468]	; (24005604 <HAL_DMA_Start_IT+0x2cc>)
2400542e:	42b4      	cmp	r4, r6
24005430:	bf08      	it	eq
24005432:	f040 0001 	orreq.w	r0, r0, #1
24005436:	3614      	adds	r6, #20
24005438:	42b4      	cmp	r4, r6
2400543a:	bf08      	it	eq
2400543c:	f040 0001 	orreq.w	r0, r0, #1
24005440:	3614      	adds	r6, #20
24005442:	42b4      	cmp	r4, r6
24005444:	bf08      	it	eq
24005446:	f040 0001 	orreq.w	r0, r0, #1
2400544a:	3614      	adds	r6, #20
2400544c:	42b4      	cmp	r4, r6
2400544e:	bf08      	it	eq
24005450:	f040 0001 	orreq.w	r0, r0, #1
24005454:	3614      	adds	r6, #20
24005456:	42b4      	cmp	r4, r6
24005458:	bf08      	it	eq
2400545a:	f040 0001 	orreq.w	r0, r0, #1
2400545e:	3614      	adds	r6, #20
24005460:	42b4      	cmp	r4, r6
24005462:	bf08      	it	eq
24005464:	f040 0001 	orreq.w	r0, r0, #1
24005468:	3614      	adds	r6, #20
2400546a:	42b4      	cmp	r4, r6
2400546c:	bf08      	it	eq
2400546e:	f040 0001 	orreq.w	r0, r0, #1
24005472:	b910      	cbnz	r0, 2400547a <HAL_DMA_Start_IT+0x142>
24005474:	4864      	ldr	r0, [pc, #400]	; (24005608 <HAL_DMA_Start_IT+0x2d0>)
24005476:	4284      	cmp	r4, r0
24005478:	d10a      	bne.n	24005490 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400547a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
2400547e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005480:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005484:	b110      	cbz	r0, 2400548c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005486:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
2400548a:	6044      	str	r4, [r0, #4]
2400548c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005490:	485b      	ldr	r0, [pc, #364]	; (24005600 <HAL_DMA_Start_IT+0x2c8>)
24005492:	4e5a      	ldr	r6, [pc, #360]	; (240055fc <HAL_DMA_Start_IT+0x2c4>)
24005494:	42b4      	cmp	r4, r6
24005496:	bf18      	it	ne
24005498:	4284      	cmpne	r4, r0
2400549a:	f106 0618 	add.w	r6, r6, #24
2400549e:	bf0c      	ite	eq
240054a0:	2001      	moveq	r0, #1
240054a2:	2000      	movne	r0, #0
240054a4:	42b4      	cmp	r4, r6
240054a6:	bf08      	it	eq
240054a8:	f040 0001 	orreq.w	r0, r0, #1
240054ac:	3618      	adds	r6, #24
240054ae:	42b4      	cmp	r4, r6
240054b0:	bf08      	it	eq
240054b2:	f040 0001 	orreq.w	r0, r0, #1
240054b6:	3618      	adds	r6, #24
240054b8:	42b4      	cmp	r4, r6
240054ba:	bf08      	it	eq
240054bc:	f040 0001 	orreq.w	r0, r0, #1
240054c0:	3618      	adds	r6, #24
240054c2:	42b4      	cmp	r4, r6
240054c4:	bf08      	it	eq
240054c6:	f040 0001 	orreq.w	r0, r0, #1
240054ca:	3618      	adds	r6, #24
240054cc:	42b4      	cmp	r4, r6
240054ce:	bf08      	it	eq
240054d0:	f040 0001 	orreq.w	r0, r0, #1
240054d4:	3618      	adds	r6, #24
240054d6:	42b4      	cmp	r4, r6
240054d8:	bf08      	it	eq
240054da:	f040 0001 	orreq.w	r0, r0, #1
240054de:	f506 7656 	add.w	r6, r6, #856	; 0x358
240054e2:	42b4      	cmp	r4, r6
240054e4:	bf08      	it	eq
240054e6:	f040 0001 	orreq.w	r0, r0, #1
240054ea:	3618      	adds	r6, #24
240054ec:	42b4      	cmp	r4, r6
240054ee:	bf08      	it	eq
240054f0:	f040 0001 	orreq.w	r0, r0, #1
240054f4:	3618      	adds	r6, #24
240054f6:	42b4      	cmp	r4, r6
240054f8:	bf08      	it	eq
240054fa:	f040 0001 	orreq.w	r0, r0, #1
240054fe:	3618      	adds	r6, #24
24005500:	42b4      	cmp	r4, r6
24005502:	bf08      	it	eq
24005504:	f040 0001 	orreq.w	r0, r0, #1
24005508:	3618      	adds	r6, #24
2400550a:	42b4      	cmp	r4, r6
2400550c:	bf08      	it	eq
2400550e:	f040 0001 	orreq.w	r0, r0, #1
24005512:	3618      	adds	r6, #24
24005514:	42b4      	cmp	r4, r6
24005516:	bf08      	it	eq
24005518:	f040 0001 	orreq.w	r0, r0, #1
2400551c:	3618      	adds	r6, #24
2400551e:	42b4      	cmp	r4, r6
24005520:	bf08      	it	eq
24005522:	f040 0001 	orreq.w	r0, r0, #1
24005526:	b918      	cbnz	r0, 24005530 <HAL_DMA_Start_IT+0x1f8>
24005528:	4838      	ldr	r0, [pc, #224]	; (2400560c <HAL_DMA_Start_IT+0x2d4>)
2400552a:	4284      	cmp	r4, r0
2400552c:	f040 817b 	bne.w	24005826 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005530:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005534:	f000 041f 	and.w	r4, r0, #31
24005538:	203f      	movs	r0, #63	; 0x3f
2400553a:	40a0      	lsls	r0, r4
2400553c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2400553e:	f8dc 4000 	ldr.w	r4, [ip]
24005542:	6820      	ldr	r0, [r4, #0]
24005544:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
24005548:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400554a:	f8dc 0000 	ldr.w	r0, [ip]
2400554e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005550:	f8dc 3008 	ldr.w	r3, [ip, #8]
24005554:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005556:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400555a:	f000 815b 	beq.w	24005814 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2400555e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005560:	f8dc 3000 	ldr.w	r3, [ip]
24005564:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005566:	f8dc 4000 	ldr.w	r4, [ip]
2400556a:	4b25      	ldr	r3, [pc, #148]	; (24005600 <HAL_DMA_Start_IT+0x2c8>)
2400556c:	4923      	ldr	r1, [pc, #140]	; (240055fc <HAL_DMA_Start_IT+0x2c4>)
2400556e:	4a28      	ldr	r2, [pc, #160]	; (24005610 <HAL_DMA_Start_IT+0x2d8>)
24005570:	428c      	cmp	r4, r1
24005572:	bf18      	it	ne
24005574:	429c      	cmpne	r4, r3
24005576:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400557a:	bf0c      	ite	eq
2400557c:	2301      	moveq	r3, #1
2400557e:	2300      	movne	r3, #0
24005580:	4294      	cmp	r4, r2
24005582:	bf08      	it	eq
24005584:	f043 0301 	orreq.w	r3, r3, #1
24005588:	3230      	adds	r2, #48	; 0x30
2400558a:	428c      	cmp	r4, r1
2400558c:	bf08      	it	eq
2400558e:	f043 0301 	orreq.w	r3, r3, #1
24005592:	3130      	adds	r1, #48	; 0x30
24005594:	4294      	cmp	r4, r2
24005596:	bf08      	it	eq
24005598:	f043 0301 	orreq.w	r3, r3, #1
2400559c:	3230      	adds	r2, #48	; 0x30
2400559e:	428c      	cmp	r4, r1
240055a0:	bf08      	it	eq
240055a2:	f043 0301 	orreq.w	r3, r3, #1
240055a6:	3130      	adds	r1, #48	; 0x30
240055a8:	4294      	cmp	r4, r2
240055aa:	bf08      	it	eq
240055ac:	f043 0301 	orreq.w	r3, r3, #1
240055b0:	f502 725c 	add.w	r2, r2, #880	; 0x370
240055b4:	428c      	cmp	r4, r1
240055b6:	bf08      	it	eq
240055b8:	f043 0301 	orreq.w	r3, r3, #1
240055bc:	f501 715c 	add.w	r1, r1, #880	; 0x370
240055c0:	4294      	cmp	r4, r2
240055c2:	bf08      	it	eq
240055c4:	f043 0301 	orreq.w	r3, r3, #1
240055c8:	3230      	adds	r2, #48	; 0x30
240055ca:	428c      	cmp	r4, r1
240055cc:	bf08      	it	eq
240055ce:	f043 0301 	orreq.w	r3, r3, #1
240055d2:	3130      	adds	r1, #48	; 0x30
240055d4:	4294      	cmp	r4, r2
240055d6:	bf08      	it	eq
240055d8:	f043 0301 	orreq.w	r3, r3, #1
240055dc:	3230      	adds	r2, #48	; 0x30
240055de:	428c      	cmp	r4, r1
240055e0:	bf08      	it	eq
240055e2:	f043 0301 	orreq.w	r3, r3, #1
240055e6:	3130      	adds	r1, #48	; 0x30
240055e8:	4294      	cmp	r4, r2
240055ea:	bf08      	it	eq
240055ec:	f043 0301 	orreq.w	r3, r3, #1
240055f0:	3230      	adds	r2, #48	; 0x30
240055f2:	428c      	cmp	r4, r1
240055f4:	bf08      	it	eq
240055f6:	f043 0301 	orreq.w	r3, r3, #1
240055fa:	e00b      	b.n	24005614 <HAL_DMA_Start_IT+0x2dc>
240055fc:	40020028 	.word	0x40020028
24005600:	40020010 	.word	0x40020010
24005604:	58025408 	.word	0x58025408
24005608:	58025494 	.word	0x58025494
2400560c:	400204b8 	.word	0x400204b8
24005610:	40020040 	.word	0x40020040
24005614:	4294      	cmp	r4, r2
24005616:	bf08      	it	eq
24005618:	f043 0301 	orreq.w	r3, r3, #1
2400561c:	b91b      	cbnz	r3, 24005626 <HAL_DMA_Start_IT+0x2ee>
2400561e:	4b9b      	ldr	r3, [pc, #620]	; (2400588c <HAL_DMA_Start_IT+0x554>)
24005620:	429c      	cmp	r4, r3
24005622:	f040 8143 	bne.w	240058ac <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24005626:	6823      	ldr	r3, [r4, #0]
24005628:	f023 031e 	bic.w	r3, r3, #30
2400562c:	f043 0316 	orr.w	r3, r3, #22
24005630:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005632:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005636:	b12b      	cbz	r3, 24005644 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24005638:	f8dc 2000 	ldr.w	r2, [ip]
2400563c:	6813      	ldr	r3, [r2, #0]
2400563e:	f043 0308 	orr.w	r3, r3, #8
24005642:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005644:	f8dc 4000 	ldr.w	r4, [ip]
24005648:	4b91      	ldr	r3, [pc, #580]	; (24005890 <HAL_DMA_Start_IT+0x558>)
2400564a:	4992      	ldr	r1, [pc, #584]	; (24005894 <HAL_DMA_Start_IT+0x55c>)
2400564c:	4a92      	ldr	r2, [pc, #584]	; (24005898 <HAL_DMA_Start_IT+0x560>)
2400564e:	428c      	cmp	r4, r1
24005650:	bf18      	it	ne
24005652:	429c      	cmpne	r4, r3
24005654:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005658:	bf0c      	ite	eq
2400565a:	2301      	moveq	r3, #1
2400565c:	2300      	movne	r3, #0
2400565e:	4294      	cmp	r4, r2
24005660:	bf08      	it	eq
24005662:	f043 0301 	orreq.w	r3, r3, #1
24005666:	3230      	adds	r2, #48	; 0x30
24005668:	428c      	cmp	r4, r1
2400566a:	bf08      	it	eq
2400566c:	f043 0301 	orreq.w	r3, r3, #1
24005670:	3130      	adds	r1, #48	; 0x30
24005672:	4294      	cmp	r4, r2
24005674:	bf08      	it	eq
24005676:	f043 0301 	orreq.w	r3, r3, #1
2400567a:	3230      	adds	r2, #48	; 0x30
2400567c:	428c      	cmp	r4, r1
2400567e:	bf08      	it	eq
24005680:	f043 0301 	orreq.w	r3, r3, #1
24005684:	3130      	adds	r1, #48	; 0x30
24005686:	4294      	cmp	r4, r2
24005688:	bf08      	it	eq
2400568a:	f043 0301 	orreq.w	r3, r3, #1
2400568e:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005692:	428c      	cmp	r4, r1
24005694:	bf08      	it	eq
24005696:	f043 0301 	orreq.w	r3, r3, #1
2400569a:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400569e:	4294      	cmp	r4, r2
240056a0:	bf08      	it	eq
240056a2:	f043 0301 	orreq.w	r3, r3, #1
240056a6:	3230      	adds	r2, #48	; 0x30
240056a8:	428c      	cmp	r4, r1
240056aa:	bf08      	it	eq
240056ac:	f043 0301 	orreq.w	r3, r3, #1
240056b0:	3130      	adds	r1, #48	; 0x30
240056b2:	4294      	cmp	r4, r2
240056b4:	bf08      	it	eq
240056b6:	f043 0301 	orreq.w	r3, r3, #1
240056ba:	3230      	adds	r2, #48	; 0x30
240056bc:	428c      	cmp	r4, r1
240056be:	bf08      	it	eq
240056c0:	f043 0301 	orreq.w	r3, r3, #1
240056c4:	3130      	adds	r1, #48	; 0x30
240056c6:	4294      	cmp	r4, r2
240056c8:	bf08      	it	eq
240056ca:	f043 0301 	orreq.w	r3, r3, #1
240056ce:	3230      	adds	r2, #48	; 0x30
240056d0:	428c      	cmp	r4, r1
240056d2:	bf08      	it	eq
240056d4:	f043 0301 	orreq.w	r3, r3, #1
240056d8:	3130      	adds	r1, #48	; 0x30
240056da:	4294      	cmp	r4, r2
240056dc:	bf08      	it	eq
240056de:	f043 0301 	orreq.w	r3, r3, #1
240056e2:	4a6e      	ldr	r2, [pc, #440]	; (2400589c <HAL_DMA_Start_IT+0x564>)
240056e4:	428c      	cmp	r4, r1
240056e6:	bf08      	it	eq
240056e8:	f043 0301 	orreq.w	r3, r3, #1
240056ec:	496c      	ldr	r1, [pc, #432]	; (240058a0 <HAL_DMA_Start_IT+0x568>)
240056ee:	4294      	cmp	r4, r2
240056f0:	bf08      	it	eq
240056f2:	f043 0301 	orreq.w	r3, r3, #1
240056f6:	3228      	adds	r2, #40	; 0x28
240056f8:	428c      	cmp	r4, r1
240056fa:	bf08      	it	eq
240056fc:	f043 0301 	orreq.w	r3, r3, #1
24005700:	3128      	adds	r1, #40	; 0x28
24005702:	4294      	cmp	r4, r2
24005704:	bf08      	it	eq
24005706:	f043 0301 	orreq.w	r3, r3, #1
2400570a:	3228      	adds	r2, #40	; 0x28
2400570c:	428c      	cmp	r4, r1
2400570e:	bf08      	it	eq
24005710:	f043 0301 	orreq.w	r3, r3, #1
24005714:	3128      	adds	r1, #40	; 0x28
24005716:	4294      	cmp	r4, r2
24005718:	bf08      	it	eq
2400571a:	f043 0301 	orreq.w	r3, r3, #1
2400571e:	3228      	adds	r2, #40	; 0x28
24005720:	428c      	cmp	r4, r1
24005722:	bf08      	it	eq
24005724:	f043 0301 	orreq.w	r3, r3, #1
24005728:	4294      	cmp	r4, r2
2400572a:	bf08      	it	eq
2400572c:	f043 0301 	orreq.w	r3, r3, #1
24005730:	b913      	cbnz	r3, 24005738 <HAL_DMA_Start_IT+0x400>
24005732:	4b5c      	ldr	r3, [pc, #368]	; (240058a4 <HAL_DMA_Start_IT+0x56c>)
24005734:	429c      	cmp	r4, r3
24005736:	d111      	bne.n	2400575c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24005738:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
2400573c:	681a      	ldr	r2, [r3, #0]
2400573e:	03d2      	lsls	r2, r2, #15
24005740:	d503      	bpl.n	2400574a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24005742:	681a      	ldr	r2, [r3, #0]
24005744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005748:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400574a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
2400574e:	b11b      	cbz	r3, 24005758 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24005750:	681a      	ldr	r2, [r3, #0]
24005752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005756:	601a      	str	r2, [r3, #0]
24005758:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
2400575c:	4b4c      	ldr	r3, [pc, #304]	; (24005890 <HAL_DMA_Start_IT+0x558>)
2400575e:	494d      	ldr	r1, [pc, #308]	; (24005894 <HAL_DMA_Start_IT+0x55c>)
24005760:	4a4d      	ldr	r2, [pc, #308]	; (24005898 <HAL_DMA_Start_IT+0x560>)
24005762:	428c      	cmp	r4, r1
24005764:	bf18      	it	ne
24005766:	429c      	cmpne	r4, r3
24005768:	484f      	ldr	r0, [pc, #316]	; (240058a8 <HAL_DMA_Start_IT+0x570>)
2400576a:	f101 0160 	add.w	r1, r1, #96	; 0x60
2400576e:	bf0c      	ite	eq
24005770:	2301      	moveq	r3, #1
24005772:	2300      	movne	r3, #0
24005774:	4294      	cmp	r4, r2
24005776:	bf08      	it	eq
24005778:	f043 0301 	orreq.w	r3, r3, #1
2400577c:	3230      	adds	r2, #48	; 0x30
2400577e:	4284      	cmp	r4, r0
24005780:	bf08      	it	eq
24005782:	f043 0301 	orreq.w	r3, r3, #1
24005786:	3060      	adds	r0, #96	; 0x60
24005788:	4294      	cmp	r4, r2
2400578a:	bf08      	it	eq
2400578c:	f043 0301 	orreq.w	r3, r3, #1
24005790:	3230      	adds	r2, #48	; 0x30
24005792:	428c      	cmp	r4, r1
24005794:	bf08      	it	eq
24005796:	f043 0301 	orreq.w	r3, r3, #1
2400579a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
2400579e:	4294      	cmp	r4, r2
240057a0:	bf08      	it	eq
240057a2:	f043 0301 	orreq.w	r3, r3, #1
240057a6:	f502 725c 	add.w	r2, r2, #880	; 0x370
240057aa:	4284      	cmp	r4, r0
240057ac:	bf08      	it	eq
240057ae:	f043 0301 	orreq.w	r3, r3, #1
240057b2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
240057b6:	4294      	cmp	r4, r2
240057b8:	bf08      	it	eq
240057ba:	f043 0301 	orreq.w	r3, r3, #1
240057be:	3230      	adds	r2, #48	; 0x30
240057c0:	428c      	cmp	r4, r1
240057c2:	bf08      	it	eq
240057c4:	f043 0301 	orreq.w	r3, r3, #1
240057c8:	3160      	adds	r1, #96	; 0x60
240057ca:	4294      	cmp	r4, r2
240057cc:	bf08      	it	eq
240057ce:	f043 0301 	orreq.w	r3, r3, #1
240057d2:	3230      	adds	r2, #48	; 0x30
240057d4:	4284      	cmp	r4, r0
240057d6:	bf08      	it	eq
240057d8:	f043 0301 	orreq.w	r3, r3, #1
240057dc:	4294      	cmp	r4, r2
240057de:	bf08      	it	eq
240057e0:	f043 0301 	orreq.w	r3, r3, #1
240057e4:	3230      	adds	r2, #48	; 0x30
240057e6:	428c      	cmp	r4, r1
240057e8:	bf08      	it	eq
240057ea:	f043 0301 	orreq.w	r3, r3, #1
240057ee:	4294      	cmp	r4, r2
240057f0:	bf08      	it	eq
240057f2:	f043 0301 	orreq.w	r3, r3, #1
240057f6:	b933      	cbnz	r3, 24005806 <HAL_DMA_Start_IT+0x4ce>
240057f8:	3060      	adds	r0, #96	; 0x60
240057fa:	1a20      	subs	r0, r4, r0
240057fc:	fab0 f080 	clz	r0, r0
24005800:	0940      	lsrs	r0, r0, #5
24005802:	2800      	cmp	r0, #0
24005804:	d03d      	beq.n	24005882 <HAL_DMA_Start_IT+0x54a>
24005806:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24005808:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
2400580a:	f043 0301 	orr.w	r3, r3, #1
2400580e:	6023      	str	r3, [r4, #0]
}
24005810:	bc70      	pop	{r4, r5, r6}
24005812:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005814:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24005816:	f8dc 3000 	ldr.w	r3, [ip]
2400581a:	60d9      	str	r1, [r3, #12]
2400581c:	e6a3      	b.n	24005566 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
2400581e:	2001      	movs	r0, #1
24005820:	4770      	bx	lr
  __HAL_LOCK(hdma);
24005822:	2002      	movs	r0, #2
}
24005824:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24005826:	481d      	ldr	r0, [pc, #116]	; (2400589c <HAL_DMA_Start_IT+0x564>)
24005828:	4e1d      	ldr	r6, [pc, #116]	; (240058a0 <HAL_DMA_Start_IT+0x568>)
2400582a:	42b4      	cmp	r4, r6
2400582c:	bf18      	it	ne
2400582e:	4284      	cmpne	r4, r0
24005830:	f106 0614 	add.w	r6, r6, #20
24005834:	bf0c      	ite	eq
24005836:	2001      	moveq	r0, #1
24005838:	2000      	movne	r0, #0
2400583a:	42b4      	cmp	r4, r6
2400583c:	bf08      	it	eq
2400583e:	f040 0001 	orreq.w	r0, r0, #1
24005842:	3614      	adds	r6, #20
24005844:	42b4      	cmp	r4, r6
24005846:	bf08      	it	eq
24005848:	f040 0001 	orreq.w	r0, r0, #1
2400584c:	3614      	adds	r6, #20
2400584e:	42b4      	cmp	r4, r6
24005850:	bf08      	it	eq
24005852:	f040 0001 	orreq.w	r0, r0, #1
24005856:	3614      	adds	r6, #20
24005858:	42b4      	cmp	r4, r6
2400585a:	bf08      	it	eq
2400585c:	f040 0001 	orreq.w	r0, r0, #1
24005860:	3614      	adds	r6, #20
24005862:	42b4      	cmp	r4, r6
24005864:	bf08      	it	eq
24005866:	f040 0001 	orreq.w	r0, r0, #1
2400586a:	b910      	cbnz	r0, 24005872 <HAL_DMA_Start_IT+0x53a>
2400586c:	480d      	ldr	r0, [pc, #52]	; (240058a4 <HAL_DMA_Start_IT+0x56c>)
2400586e:	4284      	cmp	r4, r0
24005870:	d11c      	bne.n	240058ac <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005872:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005876:	f000 041f 	and.w	r4, r0, #31
2400587a:	2001      	movs	r0, #1
2400587c:	40a0      	lsls	r0, r4
2400587e:	6068      	str	r0, [r5, #4]
24005880:	e663      	b.n	2400554a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
24005882:	6823      	ldr	r3, [r4, #0]
24005884:	f043 0301 	orr.w	r3, r3, #1
24005888:	6023      	str	r3, [r4, #0]
2400588a:	e56d      	b.n	24005368 <HAL_DMA_Start_IT+0x30>
2400588c:	400204b8 	.word	0x400204b8
24005890:	40020010 	.word	0x40020010
24005894:	40020028 	.word	0x40020028
24005898:	40020040 	.word	0x40020040
2400589c:	58025408 	.word	0x58025408
240058a0:	5802541c 	.word	0x5802541c
240058a4:	58025494 	.word	0x58025494
240058a8:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
240058ac:	6823      	ldr	r3, [r4, #0]
240058ae:	f023 030e 	bic.w	r3, r3, #14
240058b2:	f043 030a 	orr.w	r3, r3, #10
240058b6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
240058b8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
240058bc:	2b00      	cmp	r3, #0
240058be:	f43f aec1 	beq.w	24005644 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
240058c2:	f8dc 2000 	ldr.w	r2, [ip]
240058c6:	6813      	ldr	r3, [r2, #0]
240058c8:	f043 0304 	orr.w	r3, r3, #4
240058cc:	6013      	str	r3, [r2, #0]
240058ce:	e6b9      	b.n	24005644 <HAL_DMA_Start_IT+0x30c>

240058d0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
240058d0:	2800      	cmp	r0, #0
240058d2:	d065      	beq.n	240059a0 <HAL_DMA_Abort_IT+0xd0>
{
240058d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
240058d8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
240058dc:	4603      	mov	r3, r0
240058de:	2a02      	cmp	r2, #2
240058e0:	d159      	bne.n	24005996 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240058e2:	6801      	ldr	r1, [r0, #0]
240058e4:	4883      	ldr	r0, [pc, #524]	; (24005af4 <HAL_DMA_Abort_IT+0x224>)
240058e6:	4281      	cmp	r1, r0
240058e8:	d04b      	beq.n	24005982 <HAL_DMA_Abort_IT+0xb2>
240058ea:	4c83      	ldr	r4, [pc, #524]	; (24005af8 <HAL_DMA_Abort_IT+0x228>)
240058ec:	42a1      	cmp	r1, r4
240058ee:	d048      	beq.n	24005982 <HAL_DMA_Abort_IT+0xb2>
240058f0:	f8df a228 	ldr.w	sl, [pc, #552]	; 24005b1c <HAL_DMA_Abort_IT+0x24c>
240058f4:	f8df b214 	ldr.w	fp, [pc, #532]	; 24005b0c <HAL_DMA_Abort_IT+0x23c>
240058f8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 24005b20 <HAL_DMA_Abort_IT+0x250>
240058fc:	4559      	cmp	r1, fp
240058fe:	bf18      	it	ne
24005900:	4551      	cmpne	r1, sl
24005902:	f8df 8220 	ldr.w	r8, [pc, #544]	; 24005b24 <HAL_DMA_Abort_IT+0x254>
24005906:	f8df e220 	ldr.w	lr, [pc, #544]	; 24005b28 <HAL_DMA_Abort_IT+0x258>
2400590a:	bf0c      	ite	eq
2400590c:	2201      	moveq	r2, #1
2400590e:	2200      	movne	r2, #0
24005910:	f8df c218 	ldr.w	ip, [pc, #536]	; 24005b2c <HAL_DMA_Abort_IT+0x25c>
24005914:	4549      	cmp	r1, r9
24005916:	bf08      	it	eq
24005918:	f042 0201 	orreq.w	r2, r2, #1
2400591c:	4d77      	ldr	r5, [pc, #476]	; (24005afc <HAL_DMA_Abort_IT+0x22c>)
2400591e:	4f78      	ldr	r7, [pc, #480]	; (24005b00 <HAL_DMA_Abort_IT+0x230>)
24005920:	4541      	cmp	r1, r8
24005922:	bf08      	it	eq
24005924:	f042 0201 	orreq.w	r2, r2, #1
24005928:	4e76      	ldr	r6, [pc, #472]	; (24005b04 <HAL_DMA_Abort_IT+0x234>)
2400592a:	4571      	cmp	r1, lr
2400592c:	bf08      	it	eq
2400592e:	f042 0201 	orreq.w	r2, r2, #1
24005932:	4561      	cmp	r1, ip
24005934:	bf08      	it	eq
24005936:	f042 0201 	orreq.w	r2, r2, #1
2400593a:	42a9      	cmp	r1, r5
2400593c:	bf08      	it	eq
2400593e:	f042 0201 	orreq.w	r2, r2, #1
24005942:	3518      	adds	r5, #24
24005944:	42a9      	cmp	r1, r5
24005946:	bf08      	it	eq
24005948:	f042 0201 	orreq.w	r2, r2, #1
2400594c:	3518      	adds	r5, #24
2400594e:	42a9      	cmp	r1, r5
24005950:	bf08      	it	eq
24005952:	f042 0201 	orreq.w	r2, r2, #1
24005956:	3518      	adds	r5, #24
24005958:	42a9      	cmp	r1, r5
2400595a:	bf08      	it	eq
2400595c:	f042 0201 	orreq.w	r2, r2, #1
24005960:	3548      	adds	r5, #72	; 0x48
24005962:	42b9      	cmp	r1, r7
24005964:	bf08      	it	eq
24005966:	f042 0201 	orreq.w	r2, r2, #1
2400596a:	42b1      	cmp	r1, r6
2400596c:	bf08      	it	eq
2400596e:	f042 0201 	orreq.w	r2, r2, #1
24005972:	42a9      	cmp	r1, r5
24005974:	bf08      	it	eq
24005976:	f042 0201 	orreq.w	r2, r2, #1
2400597a:	b912      	cbnz	r2, 24005982 <HAL_DMA_Abort_IT+0xb2>
2400597c:	4a62      	ldr	r2, [pc, #392]	; (24005b08 <HAL_DMA_Abort_IT+0x238>)
2400597e:	4291      	cmp	r1, r2
24005980:	d110      	bne.n	240059a4 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
24005982:	2204      	movs	r2, #4
  return HAL_OK;
24005984:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
24005986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
2400598a:	680b      	ldr	r3, [r1, #0]
2400598c:	f023 0301 	bic.w	r3, r3, #1
24005990:	600b      	str	r3, [r1, #0]
}
24005992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005996:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24005998:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400599a:	655a      	str	r2, [r3, #84]	; 0x54
}
2400599c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
240059a0:	2001      	movs	r0, #1
}
240059a2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240059a4:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240059a6:	4c54      	ldr	r4, [pc, #336]	; (24005af8 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240059a8:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240059ac:	4857      	ldr	r0, [pc, #348]	; (24005b0c <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240059ae:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
240059b0:	6819      	ldr	r1, [r3, #0]
240059b2:	680a      	ldr	r2, [r1, #0]
240059b4:	f022 0201 	bic.w	r2, r2, #1
240059b8:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240059ba:	4a4e      	ldr	r2, [pc, #312]	; (24005af4 <HAL_DMA_Abort_IT+0x224>)
240059bc:	6819      	ldr	r1, [r3, #0]
240059be:	42a1      	cmp	r1, r4
240059c0:	bf18      	it	ne
240059c2:	4291      	cmpne	r1, r2
240059c4:	f104 0430 	add.w	r4, r4, #48	; 0x30
240059c8:	bf0c      	ite	eq
240059ca:	2201      	moveq	r2, #1
240059cc:	2200      	movne	r2, #0
240059ce:	4281      	cmp	r1, r0
240059d0:	bf08      	it	eq
240059d2:	f042 0201 	orreq.w	r2, r2, #1
240059d6:	3030      	adds	r0, #48	; 0x30
240059d8:	42a1      	cmp	r1, r4
240059da:	bf08      	it	eq
240059dc:	f042 0201 	orreq.w	r2, r2, #1
240059e0:	3430      	adds	r4, #48	; 0x30
240059e2:	4281      	cmp	r1, r0
240059e4:	bf08      	it	eq
240059e6:	f042 0201 	orreq.w	r2, r2, #1
240059ea:	3030      	adds	r0, #48	; 0x30
240059ec:	42a1      	cmp	r1, r4
240059ee:	bf08      	it	eq
240059f0:	f042 0201 	orreq.w	r2, r2, #1
240059f4:	3430      	adds	r4, #48	; 0x30
240059f6:	4281      	cmp	r1, r0
240059f8:	bf08      	it	eq
240059fa:	f042 0201 	orreq.w	r2, r2, #1
240059fe:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005a02:	42a1      	cmp	r1, r4
24005a04:	bf08      	it	eq
24005a06:	f042 0201 	orreq.w	r2, r2, #1
24005a0a:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005a0e:	4281      	cmp	r1, r0
24005a10:	bf08      	it	eq
24005a12:	f042 0201 	orreq.w	r2, r2, #1
24005a16:	3030      	adds	r0, #48	; 0x30
24005a18:	42a1      	cmp	r1, r4
24005a1a:	bf08      	it	eq
24005a1c:	f042 0201 	orreq.w	r2, r2, #1
24005a20:	3430      	adds	r4, #48	; 0x30
24005a22:	4281      	cmp	r1, r0
24005a24:	bf08      	it	eq
24005a26:	f042 0201 	orreq.w	r2, r2, #1
24005a2a:	3030      	adds	r0, #48	; 0x30
24005a2c:	42a1      	cmp	r1, r4
24005a2e:	bf08      	it	eq
24005a30:	f042 0201 	orreq.w	r2, r2, #1
24005a34:	3430      	adds	r4, #48	; 0x30
24005a36:	4281      	cmp	r1, r0
24005a38:	bf08      	it	eq
24005a3a:	f042 0201 	orreq.w	r2, r2, #1
24005a3e:	3030      	adds	r0, #48	; 0x30
24005a40:	42a1      	cmp	r1, r4
24005a42:	bf08      	it	eq
24005a44:	f042 0201 	orreq.w	r2, r2, #1
24005a48:	3430      	adds	r4, #48	; 0x30
24005a4a:	4281      	cmp	r1, r0
24005a4c:	bf08      	it	eq
24005a4e:	f042 0201 	orreq.w	r2, r2, #1
24005a52:	482f      	ldr	r0, [pc, #188]	; (24005b10 <HAL_DMA_Abort_IT+0x240>)
24005a54:	42a1      	cmp	r1, r4
24005a56:	bf08      	it	eq
24005a58:	f042 0201 	orreq.w	r2, r2, #1
24005a5c:	4c2d      	ldr	r4, [pc, #180]	; (24005b14 <HAL_DMA_Abort_IT+0x244>)
24005a5e:	4281      	cmp	r1, r0
24005a60:	bf08      	it	eq
24005a62:	f042 0201 	orreq.w	r2, r2, #1
24005a66:	3028      	adds	r0, #40	; 0x28
24005a68:	42a1      	cmp	r1, r4
24005a6a:	bf08      	it	eq
24005a6c:	f042 0201 	orreq.w	r2, r2, #1
24005a70:	3428      	adds	r4, #40	; 0x28
24005a72:	4281      	cmp	r1, r0
24005a74:	bf08      	it	eq
24005a76:	f042 0201 	orreq.w	r2, r2, #1
24005a7a:	3028      	adds	r0, #40	; 0x28
24005a7c:	42a1      	cmp	r1, r4
24005a7e:	bf08      	it	eq
24005a80:	f042 0201 	orreq.w	r2, r2, #1
24005a84:	3428      	adds	r4, #40	; 0x28
24005a86:	4281      	cmp	r1, r0
24005a88:	bf08      	it	eq
24005a8a:	f042 0201 	orreq.w	r2, r2, #1
24005a8e:	3028      	adds	r0, #40	; 0x28
24005a90:	42a1      	cmp	r1, r4
24005a92:	bf08      	it	eq
24005a94:	f042 0201 	orreq.w	r2, r2, #1
24005a98:	4281      	cmp	r1, r0
24005a9a:	bf08      	it	eq
24005a9c:	f042 0201 	orreq.w	r2, r2, #1
24005aa0:	b912      	cbnz	r2, 24005aa8 <HAL_DMA_Abort_IT+0x1d8>
24005aa2:	4a1d      	ldr	r2, [pc, #116]	; (24005b18 <HAL_DMA_Abort_IT+0x248>)
24005aa4:	4291      	cmp	r1, r2
24005aa6:	d117      	bne.n	24005ad8 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005aa8:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005aaa:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005aac:	6801      	ldr	r1, [r0, #0]
24005aae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005ab2:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005ab4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005ab8:	f001 011f 	and.w	r1, r1, #31
24005abc:	408a      	lsls	r2, r1
24005abe:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005ac0:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24005ac4:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24005ac6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24005ac8:	b132      	cbz	r2, 24005ad8 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005aca:	6811      	ldr	r1, [r2, #0]
24005acc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005ad0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005ad2:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
24005ad6:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
24005ad8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24005ada:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24005adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24005ade:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24005ae2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24005ae6:	b11a      	cbz	r2, 24005af0 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
24005ae8:	4618      	mov	r0, r3
24005aea:	4790      	blx	r2
  return HAL_OK;
24005aec:	4620      	mov	r0, r4
24005aee:	e755      	b.n	2400599c <HAL_DMA_Abort_IT+0xcc>
24005af0:	4610      	mov	r0, r2
24005af2:	e753      	b.n	2400599c <HAL_DMA_Abort_IT+0xcc>
24005af4:	40020010 	.word	0x40020010
24005af8:	40020028 	.word	0x40020028
24005afc:	40020410 	.word	0x40020410
24005b00:	40020470 	.word	0x40020470
24005b04:	40020488 	.word	0x40020488
24005b08:	400204b8 	.word	0x400204b8
24005b0c:	40020040 	.word	0x40020040
24005b10:	58025408 	.word	0x58025408
24005b14:	5802541c 	.word	0x5802541c
24005b18:	58025494 	.word	0x58025494
24005b1c:	40020058 	.word	0x40020058
24005b20:	40020070 	.word	0x40020070
24005b24:	40020088 	.word	0x40020088
24005b28:	400200a0 	.word	0x400200a0
24005b2c:	400200b8 	.word	0x400200b8

24005b30 <HAL_DMA_IRQHandler>:
{
24005b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
24005b34:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24005b36:	4b9e      	ldr	r3, [pc, #632]	; (24005db0 <HAL_DMA_IRQHandler+0x280>)
{
24005b38:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005b3a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
24005b3c:	681e      	ldr	r6, [r3, #0]
{
24005b3e:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
24005b40:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005b42:	6803      	ldr	r3, [r0, #0]
24005b44:	4a9b      	ldr	r2, [pc, #620]	; (24005db4 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
24005b46:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005b48:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
24005b4a:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005b4c:	d048      	beq.n	24005be0 <HAL_DMA_IRQHandler+0xb0>
24005b4e:	3218      	adds	r2, #24
24005b50:	4293      	cmp	r3, r2
24005b52:	d045      	beq.n	24005be0 <HAL_DMA_IRQHandler+0xb0>
24005b54:	3218      	adds	r2, #24
24005b56:	4f98      	ldr	r7, [pc, #608]	; (24005db8 <HAL_DMA_IRQHandler+0x288>)
24005b58:	42bb      	cmp	r3, r7
24005b5a:	bf18      	it	ne
24005b5c:	4293      	cmpne	r3, r2
24005b5e:	f107 0718 	add.w	r7, r7, #24
24005b62:	bf0c      	ite	eq
24005b64:	2201      	moveq	r2, #1
24005b66:	2200      	movne	r2, #0
24005b68:	42bb      	cmp	r3, r7
24005b6a:	bf08      	it	eq
24005b6c:	f042 0201 	orreq.w	r2, r2, #1
24005b70:	3718      	adds	r7, #24
24005b72:	42bb      	cmp	r3, r7
24005b74:	bf08      	it	eq
24005b76:	f042 0201 	orreq.w	r2, r2, #1
24005b7a:	3718      	adds	r7, #24
24005b7c:	42bb      	cmp	r3, r7
24005b7e:	bf08      	it	eq
24005b80:	f042 0201 	orreq.w	r2, r2, #1
24005b84:	3718      	adds	r7, #24
24005b86:	42bb      	cmp	r3, r7
24005b88:	bf08      	it	eq
24005b8a:	f042 0201 	orreq.w	r2, r2, #1
24005b8e:	f507 7756 	add.w	r7, r7, #856	; 0x358
24005b92:	42bb      	cmp	r3, r7
24005b94:	bf08      	it	eq
24005b96:	f042 0201 	orreq.w	r2, r2, #1
24005b9a:	3718      	adds	r7, #24
24005b9c:	42bb      	cmp	r3, r7
24005b9e:	bf08      	it	eq
24005ba0:	f042 0201 	orreq.w	r2, r2, #1
24005ba4:	3718      	adds	r7, #24
24005ba6:	42bb      	cmp	r3, r7
24005ba8:	bf08      	it	eq
24005baa:	f042 0201 	orreq.w	r2, r2, #1
24005bae:	3718      	adds	r7, #24
24005bb0:	42bb      	cmp	r3, r7
24005bb2:	bf08      	it	eq
24005bb4:	f042 0201 	orreq.w	r2, r2, #1
24005bb8:	3718      	adds	r7, #24
24005bba:	42bb      	cmp	r3, r7
24005bbc:	bf08      	it	eq
24005bbe:	f042 0201 	orreq.w	r2, r2, #1
24005bc2:	3718      	adds	r7, #24
24005bc4:	42bb      	cmp	r3, r7
24005bc6:	bf08      	it	eq
24005bc8:	f042 0201 	orreq.w	r2, r2, #1
24005bcc:	3718      	adds	r7, #24
24005bce:	42bb      	cmp	r3, r7
24005bd0:	bf08      	it	eq
24005bd2:	f042 0201 	orreq.w	r2, r2, #1
24005bd6:	b91a      	cbnz	r2, 24005be0 <HAL_DMA_IRQHandler+0xb0>
24005bd8:	4a78      	ldr	r2, [pc, #480]	; (24005dbc <HAL_DMA_IRQHandler+0x28c>)
24005bda:	4293      	cmp	r3, r2
24005bdc:	f040 82b3 	bne.w	24006146 <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005be0:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
24005be4:	2208      	movs	r2, #8
24005be6:	f000 011f 	and.w	r1, r0, #31
24005bea:	408a      	lsls	r2, r1
24005bec:	4222      	tst	r2, r4
24005bee:	f040 81a5 	bne.w	24005f3c <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005bf2:	fa24 f201 	lsr.w	r2, r4, r1
24005bf6:	07d2      	lsls	r2, r2, #31
24005bf8:	d511      	bpl.n	24005c1e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005bfa:	695a      	ldr	r2, [r3, #20]
24005bfc:	0612      	lsls	r2, r2, #24
24005bfe:	f140 8269 	bpl.w	240060d4 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005c02:	2301      	movs	r3, #1
24005c04:	fa03 f101 	lsl.w	r1, r3, r1
24005c08:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005c0a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c0e:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005c12:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c16:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005c1a:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c1e:	f04f 0c04 	mov.w	ip, #4
24005c22:	fa0c fc01 	lsl.w	ip, ip, r1
24005c26:	ea1c 0f04 	tst.w	ip, r4
24005c2a:	d062      	beq.n	24005cf2 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005c2c:	f8d8 2000 	ldr.w	r2, [r8]
24005c30:	4f60      	ldr	r7, [pc, #384]	; (24005db4 <HAL_DMA_IRQHandler+0x284>)
24005c32:	4b63      	ldr	r3, [pc, #396]	; (24005dc0 <HAL_DMA_IRQHandler+0x290>)
24005c34:	429a      	cmp	r2, r3
24005c36:	bf18      	it	ne
24005c38:	42ba      	cmpne	r2, r7
24005c3a:	f103 0318 	add.w	r3, r3, #24
24005c3e:	bf0c      	ite	eq
24005c40:	2701      	moveq	r7, #1
24005c42:	2700      	movne	r7, #0
24005c44:	429a      	cmp	r2, r3
24005c46:	bf08      	it	eq
24005c48:	f047 0701 	orreq.w	r7, r7, #1
24005c4c:	3318      	adds	r3, #24
24005c4e:	429a      	cmp	r2, r3
24005c50:	bf08      	it	eq
24005c52:	f047 0701 	orreq.w	r7, r7, #1
24005c56:	3318      	adds	r3, #24
24005c58:	429a      	cmp	r2, r3
24005c5a:	bf08      	it	eq
24005c5c:	f047 0701 	orreq.w	r7, r7, #1
24005c60:	3318      	adds	r3, #24
24005c62:	429a      	cmp	r2, r3
24005c64:	bf08      	it	eq
24005c66:	f047 0701 	orreq.w	r7, r7, #1
24005c6a:	3318      	adds	r3, #24
24005c6c:	429a      	cmp	r2, r3
24005c6e:	bf08      	it	eq
24005c70:	f047 0701 	orreq.w	r7, r7, #1
24005c74:	3318      	adds	r3, #24
24005c76:	429a      	cmp	r2, r3
24005c78:	bf08      	it	eq
24005c7a:	f047 0701 	orreq.w	r7, r7, #1
24005c7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005c82:	429a      	cmp	r2, r3
24005c84:	bf08      	it	eq
24005c86:	f047 0701 	orreq.w	r7, r7, #1
24005c8a:	3318      	adds	r3, #24
24005c8c:	429a      	cmp	r2, r3
24005c8e:	bf08      	it	eq
24005c90:	f047 0701 	orreq.w	r7, r7, #1
24005c94:	3318      	adds	r3, #24
24005c96:	429a      	cmp	r2, r3
24005c98:	bf08      	it	eq
24005c9a:	f047 0701 	orreq.w	r7, r7, #1
24005c9e:	3318      	adds	r3, #24
24005ca0:	429a      	cmp	r2, r3
24005ca2:	bf08      	it	eq
24005ca4:	f047 0701 	orreq.w	r7, r7, #1
24005ca8:	3318      	adds	r3, #24
24005caa:	429a      	cmp	r2, r3
24005cac:	bf08      	it	eq
24005cae:	f047 0701 	orreq.w	r7, r7, #1
24005cb2:	3318      	adds	r3, #24
24005cb4:	429a      	cmp	r2, r3
24005cb6:	bf08      	it	eq
24005cb8:	f047 0701 	orreq.w	r7, r7, #1
24005cbc:	3318      	adds	r3, #24
24005cbe:	429a      	cmp	r2, r3
24005cc0:	bf08      	it	eq
24005cc2:	f047 0701 	orreq.w	r7, r7, #1
24005cc6:	4613      	mov	r3, r2
24005cc8:	b91f      	cbnz	r7, 24005cd2 <HAL_DMA_IRQHandler+0x1a2>
24005cca:	4f3c      	ldr	r7, [pc, #240]	; (24005dbc <HAL_DMA_IRQHandler+0x28c>)
24005ccc:	42ba      	cmp	r2, r7
24005cce:	f040 8277 	bne.w	240061c0 <HAL_DMA_IRQHandler+0x690>
24005cd2:	681a      	ldr	r2, [r3, #0]
24005cd4:	0797      	lsls	r7, r2, #30
24005cd6:	f140 8209 	bpl.w	240060ec <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005cda:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005cde:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005ce2:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005ce6:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cea:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005cee:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cf2:	f04f 0c10 	mov.w	ip, #16
24005cf6:	fa0c fc01 	lsl.w	ip, ip, r1
24005cfa:	ea1c 0f04 	tst.w	ip, r4
24005cfe:	d079      	beq.n	24005df4 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005d00:	f8d8 2000 	ldr.w	r2, [r8]
24005d04:	4f2b      	ldr	r7, [pc, #172]	; (24005db4 <HAL_DMA_IRQHandler+0x284>)
24005d06:	4b2e      	ldr	r3, [pc, #184]	; (24005dc0 <HAL_DMA_IRQHandler+0x290>)
24005d08:	429a      	cmp	r2, r3
24005d0a:	bf18      	it	ne
24005d0c:	42ba      	cmpne	r2, r7
24005d0e:	f103 0318 	add.w	r3, r3, #24
24005d12:	bf0c      	ite	eq
24005d14:	2701      	moveq	r7, #1
24005d16:	2700      	movne	r7, #0
24005d18:	429a      	cmp	r2, r3
24005d1a:	bf08      	it	eq
24005d1c:	f047 0701 	orreq.w	r7, r7, #1
24005d20:	3318      	adds	r3, #24
24005d22:	429a      	cmp	r2, r3
24005d24:	bf08      	it	eq
24005d26:	f047 0701 	orreq.w	r7, r7, #1
24005d2a:	3318      	adds	r3, #24
24005d2c:	429a      	cmp	r2, r3
24005d2e:	bf08      	it	eq
24005d30:	f047 0701 	orreq.w	r7, r7, #1
24005d34:	3318      	adds	r3, #24
24005d36:	429a      	cmp	r2, r3
24005d38:	bf08      	it	eq
24005d3a:	f047 0701 	orreq.w	r7, r7, #1
24005d3e:	3318      	adds	r3, #24
24005d40:	429a      	cmp	r2, r3
24005d42:	bf08      	it	eq
24005d44:	f047 0701 	orreq.w	r7, r7, #1
24005d48:	3318      	adds	r3, #24
24005d4a:	429a      	cmp	r2, r3
24005d4c:	bf08      	it	eq
24005d4e:	f047 0701 	orreq.w	r7, r7, #1
24005d52:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005d56:	429a      	cmp	r2, r3
24005d58:	bf08      	it	eq
24005d5a:	f047 0701 	orreq.w	r7, r7, #1
24005d5e:	3318      	adds	r3, #24
24005d60:	429a      	cmp	r2, r3
24005d62:	bf08      	it	eq
24005d64:	f047 0701 	orreq.w	r7, r7, #1
24005d68:	3318      	adds	r3, #24
24005d6a:	429a      	cmp	r2, r3
24005d6c:	bf08      	it	eq
24005d6e:	f047 0701 	orreq.w	r7, r7, #1
24005d72:	3318      	adds	r3, #24
24005d74:	429a      	cmp	r2, r3
24005d76:	bf08      	it	eq
24005d78:	f047 0701 	orreq.w	r7, r7, #1
24005d7c:	3318      	adds	r3, #24
24005d7e:	429a      	cmp	r2, r3
24005d80:	bf08      	it	eq
24005d82:	f047 0701 	orreq.w	r7, r7, #1
24005d86:	3318      	adds	r3, #24
24005d88:	429a      	cmp	r2, r3
24005d8a:	bf08      	it	eq
24005d8c:	f047 0701 	orreq.w	r7, r7, #1
24005d90:	3318      	adds	r3, #24
24005d92:	429a      	cmp	r2, r3
24005d94:	bf08      	it	eq
24005d96:	f047 0701 	orreq.w	r7, r7, #1
24005d9a:	4613      	mov	r3, r2
24005d9c:	b91f      	cbnz	r7, 24005da6 <HAL_DMA_IRQHandler+0x276>
24005d9e:	4f07      	ldr	r7, [pc, #28]	; (24005dbc <HAL_DMA_IRQHandler+0x28c>)
24005da0:	42ba      	cmp	r2, r7
24005da2:	f040 814b 	bne.w	2400603c <HAL_DMA_IRQHandler+0x50c>
24005da6:	681a      	ldr	r2, [r3, #0]
24005da8:	0710      	lsls	r0, r2, #28
24005daa:	f140 818c 	bpl.w	240060c6 <HAL_DMA_IRQHandler+0x596>
24005dae:	e009      	b.n	24005dc4 <HAL_DMA_IRQHandler+0x294>
24005db0:	20000750 	.word	0x20000750
24005db4:	40020010 	.word	0x40020010
24005db8:	40020058 	.word	0x40020058
24005dbc:	400204b8 	.word	0x400204b8
24005dc0:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005dc4:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005dc8:	f8d8 3000 	ldr.w	r3, [r8]
24005dcc:	681a      	ldr	r2, [r3, #0]
24005dce:	0352      	lsls	r2, r2, #13
24005dd0:	f100 8195 	bmi.w	240060fe <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005dd4:	681a      	ldr	r2, [r3, #0]
24005dd6:	05d7      	lsls	r7, r2, #23
24005dd8:	d403      	bmi.n	24005de2 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005dda:	681a      	ldr	r2, [r3, #0]
24005ddc:	f022 0208 	bic.w	r2, r2, #8
24005de0:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24005de2:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005de6:	b10b      	cbz	r3, 24005dec <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
24005de8:	4640      	mov	r0, r8
24005dea:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005dec:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
24005df0:	f001 011f 	and.w	r1, r1, #31
24005df4:	2320      	movs	r3, #32
24005df6:	fa03 f101 	lsl.w	r1, r3, r1
24005dfa:	4221      	tst	r1, r4
24005dfc:	d069      	beq.n	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005dfe:	f8d8 3000 	ldr.w	r3, [r8]
24005e02:	4a97      	ldr	r2, [pc, #604]	; (24006060 <HAL_DMA_IRQHandler+0x530>)
24005e04:	4c97      	ldr	r4, [pc, #604]	; (24006064 <HAL_DMA_IRQHandler+0x534>)
24005e06:	42a3      	cmp	r3, r4
24005e08:	bf18      	it	ne
24005e0a:	4293      	cmpne	r3, r2
24005e0c:	f104 0418 	add.w	r4, r4, #24
24005e10:	bf0c      	ite	eq
24005e12:	2201      	moveq	r2, #1
24005e14:	2200      	movne	r2, #0
24005e16:	42a3      	cmp	r3, r4
24005e18:	bf08      	it	eq
24005e1a:	f042 0201 	orreq.w	r2, r2, #1
24005e1e:	3418      	adds	r4, #24
24005e20:	42a3      	cmp	r3, r4
24005e22:	bf08      	it	eq
24005e24:	f042 0201 	orreq.w	r2, r2, #1
24005e28:	3418      	adds	r4, #24
24005e2a:	42a3      	cmp	r3, r4
24005e2c:	bf08      	it	eq
24005e2e:	f042 0201 	orreq.w	r2, r2, #1
24005e32:	3418      	adds	r4, #24
24005e34:	42a3      	cmp	r3, r4
24005e36:	bf08      	it	eq
24005e38:	f042 0201 	orreq.w	r2, r2, #1
24005e3c:	3418      	adds	r4, #24
24005e3e:	42a3      	cmp	r3, r4
24005e40:	bf08      	it	eq
24005e42:	f042 0201 	orreq.w	r2, r2, #1
24005e46:	3418      	adds	r4, #24
24005e48:	42a3      	cmp	r3, r4
24005e4a:	bf08      	it	eq
24005e4c:	f042 0201 	orreq.w	r2, r2, #1
24005e50:	f504 7456 	add.w	r4, r4, #856	; 0x358
24005e54:	42a3      	cmp	r3, r4
24005e56:	bf08      	it	eq
24005e58:	f042 0201 	orreq.w	r2, r2, #1
24005e5c:	3418      	adds	r4, #24
24005e5e:	42a3      	cmp	r3, r4
24005e60:	bf08      	it	eq
24005e62:	f042 0201 	orreq.w	r2, r2, #1
24005e66:	3418      	adds	r4, #24
24005e68:	42a3      	cmp	r3, r4
24005e6a:	bf08      	it	eq
24005e6c:	f042 0201 	orreq.w	r2, r2, #1
24005e70:	3418      	adds	r4, #24
24005e72:	42a3      	cmp	r3, r4
24005e74:	bf08      	it	eq
24005e76:	f042 0201 	orreq.w	r2, r2, #1
24005e7a:	3418      	adds	r4, #24
24005e7c:	42a3      	cmp	r3, r4
24005e7e:	bf08      	it	eq
24005e80:	f042 0201 	orreq.w	r2, r2, #1
24005e84:	3418      	adds	r4, #24
24005e86:	42a3      	cmp	r3, r4
24005e88:	bf08      	it	eq
24005e8a:	f042 0201 	orreq.w	r2, r2, #1
24005e8e:	3418      	adds	r4, #24
24005e90:	42a3      	cmp	r3, r4
24005e92:	bf08      	it	eq
24005e94:	f042 0201 	orreq.w	r2, r2, #1
24005e98:	b91a      	cbnz	r2, 24005ea2 <HAL_DMA_IRQHandler+0x372>
24005e9a:	4a73      	ldr	r2, [pc, #460]	; (24006068 <HAL_DMA_IRQHandler+0x538>)
24005e9c:	4293      	cmp	r3, r2
24005e9e:	f040 80da 	bne.w	24006056 <HAL_DMA_IRQHandler+0x526>
24005ea2:	681b      	ldr	r3, [r3, #0]
24005ea4:	06dc      	lsls	r4, r3, #27
24005ea6:	d514      	bpl.n	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005ea8:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24005eaa:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
24005eae:	2b04      	cmp	r3, #4
24005eb0:	f000 80de 	beq.w	24006070 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005eb4:	f8d8 3000 	ldr.w	r3, [r8]
24005eb8:	681a      	ldr	r2, [r3, #0]
24005eba:	0352      	lsls	r2, r2, #13
24005ebc:	f140 8129 	bpl.w	24006112 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005ec0:	681b      	ldr	r3, [r3, #0]
24005ec2:	031b      	lsls	r3, r3, #12
24005ec4:	f140 8134 	bpl.w	24006130 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
24005ec8:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24005ecc:	b10b      	cbz	r3, 24005ed2 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
24005ece:	4640      	mov	r0, r8
24005ed0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005ed2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005ed6:	2b00      	cmp	r3, #0
24005ed8:	f000 80f2 	beq.w	240060c0 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005edc:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005ee0:	07df      	lsls	r7, r3, #31
24005ee2:	d521      	bpl.n	24005f28 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
24005ee4:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
24005ee8:	2104      	movs	r1, #4
24005eea:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24005eee:	6813      	ldr	r3, [r2, #0]
24005ef0:	f023 0301 	bic.w	r3, r3, #1
24005ef4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24005ef6:	4b5d      	ldr	r3, [pc, #372]	; (2400606c <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005ef8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
24005efc:	fba3 3606 	umull	r3, r6, r3, r6
24005f00:	0ab6      	lsrs	r6, r6, #10
24005f02:	e002      	b.n	24005f0a <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005f04:	6813      	ldr	r3, [r2, #0]
24005f06:	07dd      	lsls	r5, r3, #31
24005f08:	d504      	bpl.n	24005f14 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
24005f0a:	9b01      	ldr	r3, [sp, #4]
24005f0c:	3301      	adds	r3, #1
24005f0e:	42b3      	cmp	r3, r6
24005f10:	9301      	str	r3, [sp, #4]
24005f12:	d9f7      	bls.n	24005f04 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005f14:	6813      	ldr	r3, [r2, #0]
24005f16:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24005f18:	bf4c      	ite	mi
24005f1a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24005f1c:	2301      	movpl	r3, #1
24005f1e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24005f22:	2300      	movs	r3, #0
24005f24:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24005f28:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
24005f2c:	2b00      	cmp	r3, #0
24005f2e:	f000 80c7 	beq.w	240060c0 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
24005f32:	4640      	mov	r0, r8
}
24005f34:	b002      	add	sp, #8
24005f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
24005f3a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005f3c:	681a      	ldr	r2, [r3, #0]
24005f3e:	0752      	lsls	r2, r2, #29
24005f40:	d514      	bpl.n	24005f6c <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24005f42:	681a      	ldr	r2, [r3, #0]
24005f44:	f022 0204 	bic.w	r2, r2, #4
24005f48:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005f4a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24005f4e:	f003 021f 	and.w	r2, r3, #31
24005f52:	2308      	movs	r3, #8
24005f54:	4093      	lsls	r3, r2
24005f56:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005f58:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005f5c:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005f60:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005f64:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005f68:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005f6c:	fa24 f301 	lsr.w	r3, r4, r1
24005f70:	07df      	lsls	r7, r3, #31
24005f72:	f57f ae54 	bpl.w	24005c1e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005f76:	f8d8 2000 	ldr.w	r2, [r8]
24005f7a:	4f39      	ldr	r7, [pc, #228]	; (24006060 <HAL_DMA_IRQHandler+0x530>)
24005f7c:	4b39      	ldr	r3, [pc, #228]	; (24006064 <HAL_DMA_IRQHandler+0x534>)
24005f7e:	429a      	cmp	r2, r3
24005f80:	bf18      	it	ne
24005f82:	42ba      	cmpne	r2, r7
24005f84:	f103 0318 	add.w	r3, r3, #24
24005f88:	bf0c      	ite	eq
24005f8a:	2701      	moveq	r7, #1
24005f8c:	2700      	movne	r7, #0
24005f8e:	429a      	cmp	r2, r3
24005f90:	bf08      	it	eq
24005f92:	f047 0701 	orreq.w	r7, r7, #1
24005f96:	3318      	adds	r3, #24
24005f98:	429a      	cmp	r2, r3
24005f9a:	bf08      	it	eq
24005f9c:	f047 0701 	orreq.w	r7, r7, #1
24005fa0:	3318      	adds	r3, #24
24005fa2:	429a      	cmp	r2, r3
24005fa4:	bf08      	it	eq
24005fa6:	f047 0701 	orreq.w	r7, r7, #1
24005faa:	3318      	adds	r3, #24
24005fac:	429a      	cmp	r2, r3
24005fae:	bf08      	it	eq
24005fb0:	f047 0701 	orreq.w	r7, r7, #1
24005fb4:	3318      	adds	r3, #24
24005fb6:	429a      	cmp	r2, r3
24005fb8:	bf08      	it	eq
24005fba:	f047 0701 	orreq.w	r7, r7, #1
24005fbe:	3318      	adds	r3, #24
24005fc0:	429a      	cmp	r2, r3
24005fc2:	bf08      	it	eq
24005fc4:	f047 0701 	orreq.w	r7, r7, #1
24005fc8:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005fcc:	429a      	cmp	r2, r3
24005fce:	bf08      	it	eq
24005fd0:	f047 0701 	orreq.w	r7, r7, #1
24005fd4:	3318      	adds	r3, #24
24005fd6:	429a      	cmp	r2, r3
24005fd8:	bf08      	it	eq
24005fda:	f047 0701 	orreq.w	r7, r7, #1
24005fde:	3318      	adds	r3, #24
24005fe0:	429a      	cmp	r2, r3
24005fe2:	bf08      	it	eq
24005fe4:	f047 0701 	orreq.w	r7, r7, #1
24005fe8:	3318      	adds	r3, #24
24005fea:	429a      	cmp	r2, r3
24005fec:	bf08      	it	eq
24005fee:	f047 0701 	orreq.w	r7, r7, #1
24005ff2:	3318      	adds	r3, #24
24005ff4:	429a      	cmp	r2, r3
24005ff6:	bf08      	it	eq
24005ff8:	f047 0701 	orreq.w	r7, r7, #1
24005ffc:	3318      	adds	r3, #24
24005ffe:	429a      	cmp	r2, r3
24006000:	bf08      	it	eq
24006002:	f047 0701 	orreq.w	r7, r7, #1
24006006:	3318      	adds	r3, #24
24006008:	429a      	cmp	r2, r3
2400600a:	bf08      	it	eq
2400600c:	f047 0701 	orreq.w	r7, r7, #1
24006010:	4613      	mov	r3, r2
24006012:	2f00      	cmp	r7, #0
24006014:	f47f adf1 	bne.w	24005bfa <HAL_DMA_IRQHandler+0xca>
24006018:	4f13      	ldr	r7, [pc, #76]	; (24006068 <HAL_DMA_IRQHandler+0x538>)
2400601a:	42ba      	cmp	r2, r7
2400601c:	f43f aded 	beq.w	24005bfa <HAL_DMA_IRQHandler+0xca>
24006020:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006022:	2304      	movs	r3, #4
24006024:	408b      	lsls	r3, r1
24006026:	4223      	tst	r3, r4
24006028:	f040 80ca 	bne.w	240061c0 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400602c:	f04f 0c10 	mov.w	ip, #16
24006030:	fa0c fc01 	lsl.w	ip, ip, r1
24006034:	ea14 0f0c 	tst.w	r4, ip
24006038:	f43f aedc 	beq.w	24005df4 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
2400603c:	6813      	ldr	r3, [r2, #0]
2400603e:	0759      	lsls	r1, r3, #29
24006040:	f53f aec0 	bmi.w	24005dc4 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006044:	f000 0e1f 	and.w	lr, r0, #31
24006048:	2120      	movs	r1, #32
2400604a:	fa01 f10e 	lsl.w	r1, r1, lr
2400604e:	420c      	tst	r4, r1
24006050:	f43f af3f 	beq.w	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24006054:	4613      	mov	r3, r2
24006056:	681b      	ldr	r3, [r3, #0]
24006058:	0798      	lsls	r0, r3, #30
2400605a:	f57f af3a 	bpl.w	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
2400605e:	e723      	b.n	24005ea8 <HAL_DMA_IRQHandler+0x378>
24006060:	40020010 	.word	0x40020010
24006064:	40020028 	.word	0x40020028
24006068:	400204b8 	.word	0x400204b8
2400606c:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006070:	f8d8 2000 	ldr.w	r2, [r8]
24006074:	6813      	ldr	r3, [r2, #0]
24006076:	f023 0316 	bic.w	r3, r3, #22
2400607a:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2400607c:	f8d8 2000 	ldr.w	r2, [r8]
24006080:	6953      	ldr	r3, [r2, #20]
24006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24006086:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006088:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
2400608c:	2b00      	cmp	r3, #0
2400608e:	d055      	beq.n	2400613c <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006090:	f8d8 2000 	ldr.w	r2, [r8]
24006094:	6813      	ldr	r3, [r2, #0]
24006096:	f023 0308 	bic.w	r3, r3, #8
2400609a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400609c:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
240060a0:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
240060a2:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240060a4:	f002 021f 	and.w	r2, r2, #31
240060a8:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
240060aa:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240060ac:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
240060ae:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
240060b2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
240060b6:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
240060ba:	2b00      	cmp	r3, #0
240060bc:	f47f af39 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
}
240060c0:	b002      	add	sp, #8
240060c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060c6:	2220      	movs	r2, #32
240060c8:	fa02 f101 	lsl.w	r1, r2, r1
240060cc:	420c      	tst	r4, r1
240060ce:	f47f aee8 	bne.w	24005ea2 <HAL_DMA_IRQHandler+0x372>
240060d2:	e6fe      	b.n	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060d4:	f04f 0c04 	mov.w	ip, #4
240060d8:	fa0c fc01 	lsl.w	ip, ip, r1
240060dc:	ea14 0f0c 	tst.w	r4, ip
240060e0:	f43f ae07 	beq.w	24005cf2 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240060e4:	681a      	ldr	r2, [r3, #0]
240060e6:	0797      	lsls	r7, r2, #30
240060e8:	f53f adf7 	bmi.w	24005cda <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060ec:	f04f 0c10 	mov.w	ip, #16
240060f0:	fa0c fc01 	lsl.w	ip, ip, r1
240060f4:	ea14 0f0c 	tst.w	r4, ip
240060f8:	f47f ae55 	bne.w	24005da6 <HAL_DMA_IRQHandler+0x276>
240060fc:	e67a      	b.n	24005df4 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
240060fe:	681b      	ldr	r3, [r3, #0]
24006100:	031b      	lsls	r3, r3, #12
24006102:	f57f ae6e 	bpl.w	24005de2 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
24006106:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
2400610a:	2b00      	cmp	r3, #0
2400610c:	f47f ae6c 	bne.w	24005de8 <HAL_DMA_IRQHandler+0x2b8>
24006110:	e66c      	b.n	24005dec <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24006112:	681a      	ldr	r2, [r3, #0]
24006114:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24006118:	f47f aed6 	bne.w	24005ec8 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
2400611c:	6819      	ldr	r1, [r3, #0]
2400611e:	f021 0110 	bic.w	r1, r1, #16
24006122:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24006124:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24006126:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
2400612a:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
2400612e:	e6cb      	b.n	24005ec8 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
24006130:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24006134:	2b00      	cmp	r3, #0
24006136:	f47f aeca 	bne.w	24005ece <HAL_DMA_IRQHandler+0x39e>
2400613a:	e6ca      	b.n	24005ed2 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2400613c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24006140:	2b00      	cmp	r3, #0
24006142:	d1a5      	bne.n	24006090 <HAL_DMA_IRQHandler+0x560>
24006144:	e7aa      	b.n	2400609c <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24006146:	4aa0      	ldr	r2, [pc, #640]	; (240063c8 <HAL_DMA_IRQHandler+0x898>)
24006148:	4ca0      	ldr	r4, [pc, #640]	; (240063cc <HAL_DMA_IRQHandler+0x89c>)
2400614a:	42a3      	cmp	r3, r4
2400614c:	bf18      	it	ne
2400614e:	4293      	cmpne	r3, r2
24006150:	f104 0414 	add.w	r4, r4, #20
24006154:	bf0c      	ite	eq
24006156:	2201      	moveq	r2, #1
24006158:	2200      	movne	r2, #0
2400615a:	42a3      	cmp	r3, r4
2400615c:	bf08      	it	eq
2400615e:	f042 0201 	orreq.w	r2, r2, #1
24006162:	3414      	adds	r4, #20
24006164:	42a3      	cmp	r3, r4
24006166:	bf08      	it	eq
24006168:	f042 0201 	orreq.w	r2, r2, #1
2400616c:	3414      	adds	r4, #20
2400616e:	42a3      	cmp	r3, r4
24006170:	bf08      	it	eq
24006172:	f042 0201 	orreq.w	r2, r2, #1
24006176:	3414      	adds	r4, #20
24006178:	42a3      	cmp	r3, r4
2400617a:	bf08      	it	eq
2400617c:	f042 0201 	orreq.w	r2, r2, #1
24006180:	3414      	adds	r4, #20
24006182:	42a3      	cmp	r3, r4
24006184:	bf08      	it	eq
24006186:	f042 0201 	orreq.w	r2, r2, #1
2400618a:	b912      	cbnz	r2, 24006192 <HAL_DMA_IRQHandler+0x662>
2400618c:	4a90      	ldr	r2, [pc, #576]	; (240063d0 <HAL_DMA_IRQHandler+0x8a0>)
2400618e:	4293      	cmp	r3, r2
24006190:	d196      	bne.n	240060c0 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24006192:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
24006196:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24006198:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
2400619a:	f004 041f 	and.w	r4, r4, #31
2400619e:	40a6      	lsls	r6, r4
240061a0:	420e      	tst	r6, r1
240061a2:	d019      	beq.n	240061d8 <HAL_DMA_IRQHandler+0x6a8>
240061a4:	0750      	lsls	r0, r2, #29
240061a6:	d517      	bpl.n	240061d8 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240061a8:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
240061aa:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240061ac:	d549      	bpl.n	24006242 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
240061ae:	03d2      	lsls	r2, r2, #15
240061b0:	f100 809f 	bmi.w	240062f2 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
240061b4:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
240061b8:	2b00      	cmp	r3, #0
240061ba:	f47f aeba 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
240061be:	e77f      	b.n	240060c0 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240061c0:	f000 011f 	and.w	r1, r0, #31
240061c4:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240061c8:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240061ca:	fa0c fc01 	lsl.w	ip, ip, r1
240061ce:	ea14 0f0c 	tst.w	r4, ip
240061d2:	f47f af33 	bne.w	2400603c <HAL_DMA_IRQHandler+0x50c>
240061d6:	e60d      	b.n	24005df4 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
240061d8:	2602      	movs	r6, #2
240061da:	40a6      	lsls	r6, r4
240061dc:	420e      	tst	r6, r1
240061de:	d00e      	beq.n	240061fe <HAL_DMA_IRQHandler+0x6ce>
240061e0:	0797      	lsls	r7, r2, #30
240061e2:	d50c      	bpl.n	240061fe <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
240061e4:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240061e6:	0415      	lsls	r5, r2, #16
240061e8:	f140 8089 	bpl.w	240062fe <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
240061ec:	03d4      	lsls	r4, r2, #15
240061ee:	f100 80e4 	bmi.w	240063ba <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
240061f2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
240061f6:	2b00      	cmp	r3, #0
240061f8:	f47f ae9b 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
240061fc:	e760      	b.n	240060c0 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
240061fe:	2608      	movs	r6, #8
24006200:	fa06 f404 	lsl.w	r4, r6, r4
24006204:	420c      	tst	r4, r1
24006206:	f43f af5b 	beq.w	240060c0 <HAL_DMA_IRQHandler+0x590>
2400620a:	0711      	lsls	r1, r2, #28
2400620c:	f57f af58 	bpl.w	240060c0 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006210:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006212:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006214:	f021 010e 	bic.w	r1, r1, #14
24006218:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
2400621a:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400621c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24006220:	f003 031f 	and.w	r3, r3, #31
24006224:	fa02 f303 	lsl.w	r3, r2, r3
24006228:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
2400622a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
2400622e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24006232:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24006236:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
2400623a:	2b00      	cmp	r3, #0
2400623c:	f47f ae79 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
24006240:	e73e      	b.n	240060c0 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006242:	0693      	lsls	r3, r2, #26
24006244:	d455      	bmi.n	240062f2 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006246:	f8d8 2000 	ldr.w	r2, [r8]
2400624a:	4b62      	ldr	r3, [pc, #392]	; (240063d4 <HAL_DMA_IRQHandler+0x8a4>)
2400624c:	4c62      	ldr	r4, [pc, #392]	; (240063d8 <HAL_DMA_IRQHandler+0x8a8>)
2400624e:	4963      	ldr	r1, [pc, #396]	; (240063dc <HAL_DMA_IRQHandler+0x8ac>)
24006250:	42a2      	cmp	r2, r4
24006252:	bf18      	it	ne
24006254:	429a      	cmpne	r2, r3
24006256:	f104 0430 	add.w	r4, r4, #48	; 0x30
2400625a:	bf0c      	ite	eq
2400625c:	2301      	moveq	r3, #1
2400625e:	2300      	movne	r3, #0
24006260:	428a      	cmp	r2, r1
24006262:	bf08      	it	eq
24006264:	f043 0301 	orreq.w	r3, r3, #1
24006268:	3130      	adds	r1, #48	; 0x30
2400626a:	42a2      	cmp	r2, r4
2400626c:	bf08      	it	eq
2400626e:	f043 0301 	orreq.w	r3, r3, #1
24006272:	3430      	adds	r4, #48	; 0x30
24006274:	428a      	cmp	r2, r1
24006276:	bf08      	it	eq
24006278:	f043 0301 	orreq.w	r3, r3, #1
2400627c:	3130      	adds	r1, #48	; 0x30
2400627e:	42a2      	cmp	r2, r4
24006280:	bf08      	it	eq
24006282:	f043 0301 	orreq.w	r3, r3, #1
24006286:	3430      	adds	r4, #48	; 0x30
24006288:	428a      	cmp	r2, r1
2400628a:	bf08      	it	eq
2400628c:	f043 0301 	orreq.w	r3, r3, #1
24006290:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006294:	42a2      	cmp	r2, r4
24006296:	bf08      	it	eq
24006298:	f043 0301 	orreq.w	r3, r3, #1
2400629c:	f504 745c 	add.w	r4, r4, #880	; 0x370
240062a0:	428a      	cmp	r2, r1
240062a2:	bf08      	it	eq
240062a4:	f043 0301 	orreq.w	r3, r3, #1
240062a8:	3130      	adds	r1, #48	; 0x30
240062aa:	42a2      	cmp	r2, r4
240062ac:	bf08      	it	eq
240062ae:	f043 0301 	orreq.w	r3, r3, #1
240062b2:	3430      	adds	r4, #48	; 0x30
240062b4:	428a      	cmp	r2, r1
240062b6:	bf08      	it	eq
240062b8:	f043 0301 	orreq.w	r3, r3, #1
240062bc:	3130      	adds	r1, #48	; 0x30
240062be:	42a2      	cmp	r2, r4
240062c0:	bf08      	it	eq
240062c2:	f043 0301 	orreq.w	r3, r3, #1
240062c6:	3430      	adds	r4, #48	; 0x30
240062c8:	428a      	cmp	r2, r1
240062ca:	bf08      	it	eq
240062cc:	f043 0301 	orreq.w	r3, r3, #1
240062d0:	3130      	adds	r1, #48	; 0x30
240062d2:	42a2      	cmp	r2, r4
240062d4:	bf08      	it	eq
240062d6:	f043 0301 	orreq.w	r3, r3, #1
240062da:	428a      	cmp	r2, r1
240062dc:	bf08      	it	eq
240062de:	f043 0301 	orreq.w	r3, r3, #1
240062e2:	b913      	cbnz	r3, 240062ea <HAL_DMA_IRQHandler+0x7ba>
240062e4:	4b3e      	ldr	r3, [pc, #248]	; (240063e0 <HAL_DMA_IRQHandler+0x8b0>)
240062e6:	429a      	cmp	r2, r3
240062e8:	d17c      	bne.n	240063e4 <HAL_DMA_IRQHandler+0x8b4>
240062ea:	6813      	ldr	r3, [r2, #0]
240062ec:	f023 0308 	bic.w	r3, r3, #8
240062f0:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
240062f2:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
240062f6:	2b00      	cmp	r3, #0
240062f8:	f47f ae1b 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
240062fc:	e6e0      	b.n	240060c0 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240062fe:	0690      	lsls	r0, r2, #26
24006300:	d45b      	bmi.n	240063ba <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006302:	f8d8 2000 	ldr.w	r2, [r8]
24006306:	4b33      	ldr	r3, [pc, #204]	; (240063d4 <HAL_DMA_IRQHandler+0x8a4>)
24006308:	4c33      	ldr	r4, [pc, #204]	; (240063d8 <HAL_DMA_IRQHandler+0x8a8>)
2400630a:	4934      	ldr	r1, [pc, #208]	; (240063dc <HAL_DMA_IRQHandler+0x8ac>)
2400630c:	42a2      	cmp	r2, r4
2400630e:	bf18      	it	ne
24006310:	429a      	cmpne	r2, r3
24006312:	f104 0430 	add.w	r4, r4, #48	; 0x30
24006316:	bf0c      	ite	eq
24006318:	2301      	moveq	r3, #1
2400631a:	2300      	movne	r3, #0
2400631c:	428a      	cmp	r2, r1
2400631e:	bf08      	it	eq
24006320:	f043 0301 	orreq.w	r3, r3, #1
24006324:	3130      	adds	r1, #48	; 0x30
24006326:	42a2      	cmp	r2, r4
24006328:	bf08      	it	eq
2400632a:	f043 0301 	orreq.w	r3, r3, #1
2400632e:	3430      	adds	r4, #48	; 0x30
24006330:	428a      	cmp	r2, r1
24006332:	bf08      	it	eq
24006334:	f043 0301 	orreq.w	r3, r3, #1
24006338:	3130      	adds	r1, #48	; 0x30
2400633a:	42a2      	cmp	r2, r4
2400633c:	bf08      	it	eq
2400633e:	f043 0301 	orreq.w	r3, r3, #1
24006342:	3430      	adds	r4, #48	; 0x30
24006344:	428a      	cmp	r2, r1
24006346:	bf08      	it	eq
24006348:	f043 0301 	orreq.w	r3, r3, #1
2400634c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006350:	42a2      	cmp	r2, r4
24006352:	bf08      	it	eq
24006354:	f043 0301 	orreq.w	r3, r3, #1
24006358:	f504 745c 	add.w	r4, r4, #880	; 0x370
2400635c:	428a      	cmp	r2, r1
2400635e:	bf08      	it	eq
24006360:	f043 0301 	orreq.w	r3, r3, #1
24006364:	3130      	adds	r1, #48	; 0x30
24006366:	42a2      	cmp	r2, r4
24006368:	bf08      	it	eq
2400636a:	f043 0301 	orreq.w	r3, r3, #1
2400636e:	3430      	adds	r4, #48	; 0x30
24006370:	428a      	cmp	r2, r1
24006372:	bf08      	it	eq
24006374:	f043 0301 	orreq.w	r3, r3, #1
24006378:	3130      	adds	r1, #48	; 0x30
2400637a:	42a2      	cmp	r2, r4
2400637c:	bf08      	it	eq
2400637e:	f043 0301 	orreq.w	r3, r3, #1
24006382:	3430      	adds	r4, #48	; 0x30
24006384:	428a      	cmp	r2, r1
24006386:	bf08      	it	eq
24006388:	f043 0301 	orreq.w	r3, r3, #1
2400638c:	3130      	adds	r1, #48	; 0x30
2400638e:	42a2      	cmp	r2, r4
24006390:	bf08      	it	eq
24006392:	f043 0301 	orreq.w	r3, r3, #1
24006396:	428a      	cmp	r2, r1
24006398:	bf08      	it	eq
2400639a:	f043 0301 	orreq.w	r3, r3, #1
2400639e:	b913      	cbnz	r3, 240063a6 <HAL_DMA_IRQHandler+0x876>
240063a0:	4b0f      	ldr	r3, [pc, #60]	; (240063e0 <HAL_DMA_IRQHandler+0x8b0>)
240063a2:	429a      	cmp	r2, r3
240063a4:	d123      	bne.n	240063ee <HAL_DMA_IRQHandler+0x8be>
240063a6:	6813      	ldr	r3, [r2, #0]
240063a8:	f023 0314 	bic.w	r3, r3, #20
240063ac:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
240063ae:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
240063b0:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
240063b2:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
240063b6:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
240063ba:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
240063be:	2b00      	cmp	r3, #0
240063c0:	f47f adb7 	bne.w	24005f32 <HAL_DMA_IRQHandler+0x402>
240063c4:	e67c      	b.n	240060c0 <HAL_DMA_IRQHandler+0x590>
240063c6:	bf00      	nop
240063c8:	58025408 	.word	0x58025408
240063cc:	5802541c 	.word	0x5802541c
240063d0:	58025494 	.word	0x58025494
240063d4:	40020010 	.word	0x40020010
240063d8:	40020028 	.word	0x40020028
240063dc:	40020040 	.word	0x40020040
240063e0:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
240063e4:	6813      	ldr	r3, [r2, #0]
240063e6:	f023 0304 	bic.w	r3, r3, #4
240063ea:	6013      	str	r3, [r2, #0]
240063ec:	e781      	b.n	240062f2 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
240063ee:	6813      	ldr	r3, [r2, #0]
240063f0:	f023 030a 	bic.w	r3, r3, #10
240063f4:	6013      	str	r3, [r2, #0]
240063f6:	e7da      	b.n	240063ae <HAL_DMA_IRQHandler+0x87e>

240063f8 <HAL_DMA_GetState>:
  return hdma->State;
240063f8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
240063fc:	4770      	bx	lr
240063fe:	bf00      	nop

24006400 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24006400:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24006402:	4770      	bx	lr

24006404 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006404:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24006406:	7a0a      	ldrb	r2, [r1, #8]
{
24006408:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
2400640a:	2a01      	cmp	r2, #1
2400640c:	d02e      	beq.n	2400646c <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
2400640e:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24006410:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24006412:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
24006416:	2801      	cmp	r0, #1
24006418:	b2c2      	uxtb	r2, r0
2400641a:	d122      	bne.n	24006462 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
2400641c:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
24006420:	2801      	cmp	r0, #1
24006422:	d026      	beq.n	24006472 <HAL_DMAEx_ConfigMuxSync+0x6e>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24006424:	6e18      	ldr	r0, [r3, #96]	; 0x60
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24006426:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hdma);
2400642a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
2400642e:	6802      	ldr	r2, [r0, #0]
24006430:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24006434:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006436:	68ca      	ldr	r2, [r1, #12]
24006438:	6e1e      	ldr	r6, [r3, #96]	; 0x60
2400643a:	1e50      	subs	r0, r2, #1
2400643c:	7a0a      	ldrb	r2, [r1, #8]
2400643e:	f891 e009 	ldrb.w	lr, [r1, #9]
24006442:	0412      	lsls	r2, r2, #16
24006444:	6831      	ldr	r1, [r6, #0]
24006446:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
2400644a:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400644c:	b2c9      	uxtb	r1, r1
2400644e:	430a      	orrs	r2, r1
24006450:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006454:	4322      	orrs	r2, r4
24006456:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
2400645a:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
2400645c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24006460:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006462:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
24006466:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006468:	655a      	str	r2, [r3, #84]	; 0x54
}
2400646a:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
2400646c:	e9d1 5400 	ldrd	r5, r4, [r1]
24006470:	e7cf      	b.n	24006412 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24006472:	2002      	movs	r0, #2
}
24006474:	bd70      	pop	{r4, r5, r6, pc}
24006476:	bf00      	nop

24006478 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24006478:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
2400647a:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
2400647e:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24006480:	6812      	ldr	r2, [r2, #0]
24006482:	421a      	tst	r2, r3
24006484:	d00e      	beq.n	240064a4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006486:	6e02      	ldr	r2, [r0, #96]	; 0x60
24006488:	6813      	ldr	r3, [r2, #0]
2400648a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400648e:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24006490:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24006494:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006496:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24006498:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
2400649a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400649e:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
240064a0:	b102      	cbz	r2, 240064a4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240064a2:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240064a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240064a6:	b1ab      	cbz	r3, 240064d4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240064a8:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
240064ac:	6809      	ldr	r1, [r1, #0]
240064ae:	4211      	tst	r1, r2
240064b0:	d010      	beq.n	240064d4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240064b2:	681a      	ldr	r2, [r3, #0]
240064b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240064b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240064ba:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
240064be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240064c0:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
240064c2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240064c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
240064c8:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
240064ca:	b11a      	cbz	r2, 240064d4 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240064cc:	4620      	mov	r0, r4
      }
    }
  }
}
240064ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
240064d2:	4710      	bx	r2
}
240064d4:	bd10      	pop	{r4, pc}
240064d6:	bf00      	nop

240064d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240064d8:	680b      	ldr	r3, [r1, #0]
240064da:	2b00      	cmp	r3, #0
240064dc:	f000 811a 	beq.w	24006714 <HAL_GPIO_Init+0x23c>
240064e0:	f04f 0c00 	mov.w	ip, #0
{
240064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
240064e8:	4662      	mov	r2, ip
{
240064ea:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240064ec:	4d94      	ldr	r5, [pc, #592]	; (24006740 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240064ee:	4f95      	ldr	r7, [pc, #596]	; (24006744 <HAL_GPIO_Init+0x26c>)
240064f0:	f8df 8268 	ldr.w	r8, [pc, #616]	; 2400675c <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
240064f4:	f04f 0901 	mov.w	r9, #1
240064f8:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
240064fc:	ea19 0e03 	ands.w	lr, r9, r3
24006500:	f000 80c2 	beq.w	24006688 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006504:	684b      	ldr	r3, [r1, #4]
24006506:	f003 0303 	and.w	r3, r3, #3
2400650a:	1e5c      	subs	r4, r3, #1
2400650c:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400650e:	f04f 0403 	mov.w	r4, #3
24006512:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006516:	f240 80c1 	bls.w	2400669c <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400651a:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400651c:	2b03      	cmp	r3, #3
2400651e:	d026      	beq.n	2400656e <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24006520:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24006522:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24006526:	688b      	ldr	r3, [r1, #8]
24006528:	fa03 f30c 	lsl.w	r3, r3, ip
2400652c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24006530:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24006532:	684b      	ldr	r3, [r1, #4]
24006534:	f003 0303 	and.w	r3, r3, #3
24006538:	2b02      	cmp	r3, #2
2400653a:	d118      	bne.n	2400656e <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2400653c:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
24006540:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006544:	ea4f 0b83 	mov.w	fp, r3, lsl #2
24006548:	230f      	movs	r3, #15
2400654a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
2400654e:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
24006552:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006556:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400655a:	690b      	ldr	r3, [r1, #16]
2400655c:	fa03 f30b 	lsl.w	r3, r3, fp
24006560:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
24006564:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006568:	684b      	ldr	r3, [r1, #4]
2400656a:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
2400656e:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006572:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24006576:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400657a:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
2400657c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400657e:	684b      	ldr	r3, [r1, #4]
24006580:	f413 3f40 	tst.w	r3, #196608	; 0x30000
24006584:	d07f      	beq.n	24006686 <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006586:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
2400658a:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400658e:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006592:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006594:	f043 0302 	orr.w	r3, r3, #2
24006598:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400659c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240065a0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
240065a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240065a8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240065ac:	f003 0302 	and.w	r3, r3, #2
240065b0:	9301      	str	r3, [sp, #4]
240065b2:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240065b4:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
240065b8:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240065bc:	fa03 f309 	lsl.w	r3, r3, r9
240065c0:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240065c4:	d02b      	beq.n	2400661e <HAL_GPIO_Init+0x146>
240065c6:	4540      	cmp	r0, r8
240065c8:	f000 8088 	beq.w	240066dc <HAL_GPIO_Init+0x204>
240065cc:	4e5e      	ldr	r6, [pc, #376]	; (24006748 <HAL_GPIO_Init+0x270>)
240065ce:	42b0      	cmp	r0, r6
240065d0:	f000 808b 	beq.w	240066ea <HAL_GPIO_Init+0x212>
240065d4:	4e5d      	ldr	r6, [pc, #372]	; (2400674c <HAL_GPIO_Init+0x274>)
240065d6:	42b0      	cmp	r0, r6
240065d8:	d079      	beq.n	240066ce <HAL_GPIO_Init+0x1f6>
240065da:	4e5d      	ldr	r6, [pc, #372]	; (24006750 <HAL_GPIO_Init+0x278>)
240065dc:	42b0      	cmp	r0, r6
240065de:	f000 8092 	beq.w	24006706 <HAL_GPIO_Init+0x22e>
240065e2:	4e5c      	ldr	r6, [pc, #368]	; (24006754 <HAL_GPIO_Init+0x27c>)
240065e4:	42b0      	cmp	r0, r6
240065e6:	f000 8096 	beq.w	24006716 <HAL_GPIO_Init+0x23e>
240065ea:	4e5b      	ldr	r6, [pc, #364]	; (24006758 <HAL_GPIO_Init+0x280>)
240065ec:	42b0      	cmp	r0, r6
240065ee:	f000 8083 	beq.w	240066f8 <HAL_GPIO_Init+0x220>
240065f2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 24006760 <HAL_GPIO_Init+0x288>
240065f6:	4550      	cmp	r0, sl
240065f8:	f000 8094 	beq.w	24006724 <HAL_GPIO_Init+0x24c>
240065fc:	f8df a164 	ldr.w	sl, [pc, #356]	; 24006764 <HAL_GPIO_Init+0x28c>
24006600:	4550      	cmp	r0, sl
24006602:	f000 8096 	beq.w	24006732 <HAL_GPIO_Init+0x25a>
24006606:	f8df a160 	ldr.w	sl, [pc, #352]	; 24006768 <HAL_GPIO_Init+0x290>
2400660a:	4550      	cmp	r0, sl
2400660c:	bf0c      	ite	eq
2400660e:	f04f 0a09 	moveq.w	sl, #9
24006612:	f04f 0a0a 	movne.w	sl, #10
24006616:	fa0a f909 	lsl.w	r9, sl, r9
2400661a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
2400661e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24006620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006624:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
24006626:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
2400662a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
2400662c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006630:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24006632:	bf54      	ite	pl
24006634:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006636:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
2400663a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400663e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
24006640:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24006644:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006648:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
2400664a:	bf54      	ite	pl
2400664c:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400664e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24006652:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006656:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
24006658:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400665c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006660:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
24006662:	bf54      	ite	pl
24006664:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006666:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
2400666a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2400666e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
24006670:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006674:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
24006676:	bf54      	ite	pl
24006678:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
2400667a:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400667e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
24006682:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006686:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
24006688:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400668a:	f10c 0c02 	add.w	ip, ip, #2
2400668e:	fa33 f402 	lsrs.w	r4, r3, r2
24006692:	f47f af2f 	bne.w	240064f4 <HAL_GPIO_Init+0x1c>
  }
}
24006696:	b003      	add	sp, #12
24006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
2400669c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400669e:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240066a2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240066a4:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240066a6:	fa03 f30c 	lsl.w	r3, r3, ip
240066aa:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
240066ae:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240066b0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
240066b2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240066b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240066ba:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240066be:	4093      	lsls	r3, r2
240066c0:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
240066c4:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
240066c6:	684b      	ldr	r3, [r1, #4]
240066c8:	f003 0303 	and.w	r3, r3, #3
240066cc:	e726      	b.n	2400651c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240066ce:	f04f 0a03 	mov.w	sl, #3
240066d2:	fa0a f909 	lsl.w	r9, sl, r9
240066d6:	ea43 0309 	orr.w	r3, r3, r9
240066da:	e7a0      	b.n	2400661e <HAL_GPIO_Init+0x146>
240066dc:	f04f 0a01 	mov.w	sl, #1
240066e0:	fa0a f909 	lsl.w	r9, sl, r9
240066e4:	ea43 0309 	orr.w	r3, r3, r9
240066e8:	e799      	b.n	2400661e <HAL_GPIO_Init+0x146>
240066ea:	f04f 0a02 	mov.w	sl, #2
240066ee:	fa0a f909 	lsl.w	r9, sl, r9
240066f2:	ea43 0309 	orr.w	r3, r3, r9
240066f6:	e792      	b.n	2400661e <HAL_GPIO_Init+0x146>
240066f8:	f04f 0a06 	mov.w	sl, #6
240066fc:	fa0a f909 	lsl.w	r9, sl, r9
24006700:	ea43 0309 	orr.w	r3, r3, r9
24006704:	e78b      	b.n	2400661e <HAL_GPIO_Init+0x146>
24006706:	f04f 0a04 	mov.w	sl, #4
2400670a:	fa0a f909 	lsl.w	r9, sl, r9
2400670e:	ea43 0309 	orr.w	r3, r3, r9
24006712:	e784      	b.n	2400661e <HAL_GPIO_Init+0x146>
24006714:	4770      	bx	lr
24006716:	f04f 0a05 	mov.w	sl, #5
2400671a:	fa0a f909 	lsl.w	r9, sl, r9
2400671e:	ea43 0309 	orr.w	r3, r3, r9
24006722:	e77c      	b.n	2400661e <HAL_GPIO_Init+0x146>
24006724:	f04f 0a07 	mov.w	sl, #7
24006728:	fa0a f909 	lsl.w	r9, sl, r9
2400672c:	ea43 0309 	orr.w	r3, r3, r9
24006730:	e775      	b.n	2400661e <HAL_GPIO_Init+0x146>
24006732:	f04f 0a08 	mov.w	sl, #8
24006736:	fa0a f909 	lsl.w	r9, sl, r9
2400673a:	ea43 0309 	orr.w	r3, r3, r9
2400673e:	e76e      	b.n	2400661e <HAL_GPIO_Init+0x146>
24006740:	58024400 	.word	0x58024400
24006744:	58020000 	.word	0x58020000
24006748:	58020800 	.word	0x58020800
2400674c:	58020c00 	.word	0x58020c00
24006750:	58021000 	.word	0x58021000
24006754:	58021400 	.word	0x58021400
24006758:	58021800 	.word	0x58021800
2400675c:	58020400 	.word	0x58020400
24006760:	58021c00 	.word	0x58021c00
24006764:	58022000 	.word	0x58022000
24006768:	58022400 	.word	0x58022400

2400676c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2400676c:	6903      	ldr	r3, [r0, #16]
2400676e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24006770:	bf14      	ite	ne
24006772:	2001      	movne	r0, #1
24006774:	2000      	moveq	r0, #0
24006776:	4770      	bx	lr

24006778 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24006778:	b902      	cbnz	r2, 2400677c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400677a:	0409      	lsls	r1, r1, #16
2400677c:	6181      	str	r1, [r0, #24]
  }
}
2400677e:	4770      	bx	lr

24006780 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
24006780:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
24006782:	ea01 0203 	and.w	r2, r1, r3
24006786:	ea21 0103 	bic.w	r1, r1, r3
2400678a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
2400678e:	6181      	str	r1, [r0, #24]
}
24006790:	4770      	bx	lr
24006792:	bf00      	nop

24006794 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006798:	6803      	ldr	r3, [r0, #0]
{
2400679a:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400679c:	699a      	ldr	r2, [r3, #24]
2400679e:	0694      	lsls	r4, r2, #26
240067a0:	d46d      	bmi.n	2400687e <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
240067a2:	4605      	mov	r5, r0
240067a4:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240067a6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
240067aa:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240067ac:	f014 0410 	ands.w	r4, r4, #16
240067b0:	d068      	beq.n	24006884 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
240067b2:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240067b4:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
240067b8:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240067ba:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
240067bc:	46b2      	mov	sl, r6
240067be:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240067c0:	699a      	ldr	r2, [r3, #24]
240067c2:	d161      	bne.n	24006888 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
240067c4:	0690      	lsls	r0, r2, #26
240067c6:	f100 8085 	bmi.w	240068d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240067ca:	f1ba 0f00 	cmp.w	sl, #0
240067ce:	d105      	bne.n	240067dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
240067d0:	699c      	ldr	r4, [r3, #24]
240067d2:	06a1      	lsls	r1, r4, #26
240067d4:	d5fc      	bpl.n	240067d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240067d6:	2220      	movs	r2, #32
240067d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
240067da:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
240067dc:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
240067e0:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
240067e2:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240067e4:	05d0      	lsls	r0, r2, #23
240067e6:	d535      	bpl.n	24006854 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240067e8:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240067ec:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
240067ee:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240067f2:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240067f4:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240067f6:	d505      	bpl.n	24006804 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240067f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
240067fc:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006800:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006802:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006804:	0597      	lsls	r7, r2, #22
24006806:	d505      	bpl.n	24006814 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006808:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
2400680c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006810:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006812:	682b      	ldr	r3, [r5, #0]
24006814:	699a      	ldr	r2, [r3, #24]
24006816:	0790      	lsls	r0, r2, #30
24006818:	d502      	bpl.n	24006820 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
2400681a:	2200      	movs	r2, #0
2400681c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400681e:	682b      	ldr	r3, [r5, #0]
24006820:	699a      	ldr	r2, [r3, #24]
24006822:	07d1      	lsls	r1, r2, #31
24006824:	d404      	bmi.n	24006830 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006826:	699a      	ldr	r2, [r3, #24]
24006828:	f042 0201 	orr.w	r2, r2, #1
2400682c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400682e:	682b      	ldr	r3, [r5, #0]
24006830:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006832:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24006834:	4835      	ldr	r0, [pc, #212]	; (2400690c <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
24006836:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24006838:	4002      	ands	r2, r0
      return HAL_ERROR;
2400683a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
2400683c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
2400683e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24006840:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006844:	431c      	orrs	r4, r3
24006846:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006848:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400684c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
24006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006854:	0550      	lsls	r0, r2, #21
24006856:	d4cf      	bmi.n	240067f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006858:	0596      	lsls	r6, r2, #22
2400685a:	d4d5      	bmi.n	24006808 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
2400685c:	2900      	cmp	r1, #0
2400685e:	d1d9      	bne.n	24006814 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006860:	f7fe f938 	bl	24004ad4 <HAL_GetTick>
24006864:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006868:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400686a:	42b8      	cmp	r0, r7
2400686c:	d800      	bhi.n	24006870 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
2400686e:	b91f      	cbnz	r7, 24006878 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006870:	699a      	ldr	r2, [r3, #24]
24006872:	f012 0220 	ands.w	r2, r2, #32
24006876:	d032      	beq.n	240068de <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006878:	699a      	ldr	r2, [r3, #24]
2400687a:	0692      	lsls	r2, r2, #26
2400687c:	d595      	bpl.n	240067aa <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
2400687e:	2000      	movs	r0, #0
}
24006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
24006884:	4621      	mov	r1, r4
24006886:	e7ac      	b.n	240067e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006888:	0692      	lsls	r2, r2, #26
2400688a:	d423      	bmi.n	240068d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
2400688c:	f1ba 0f00 	cmp.w	sl, #0
24006890:	d1a4      	bne.n	240067dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006892:	f7fe f91f 	bl	24004ad4 <HAL_GetTick>
24006896:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006898:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400689a:	4287      	cmp	r7, r0
2400689c:	d301      	bcc.n	240068a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
2400689e:	2f00      	cmp	r7, #0
240068a0:	d18d      	bne.n	240067be <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240068a2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240068a4:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240068a8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240068aa:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240068ac:	0409      	lsls	r1, r1, #16
240068ae:	d503      	bpl.n	240068b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
240068b0:	0441      	lsls	r1, r0, #17
240068b2:	d401      	bmi.n	240068b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
240068b4:	2a20      	cmp	r2, #32
240068b6:	d11f      	bne.n	240068f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240068b8:	699a      	ldr	r2, [r3, #24]
240068ba:	0690      	lsls	r0, r2, #26
240068bc:	f53f af7f 	bmi.w	240067be <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240068c0:	f7fe f908 	bl	24004ad4 <HAL_GetTick>
240068c4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240068c6:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240068c8:	2819      	cmp	r0, #25
240068ca:	d9f5      	bls.n	240068b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240068cc:	2620      	movs	r6, #32
              status = HAL_ERROR;
240068ce:	f04f 0a01 	mov.w	sl, #1
240068d2:	e774      	b.n	240067be <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
240068d4:	f1ba 0f00 	cmp.w	sl, #0
240068d8:	f43f af7d 	beq.w	240067d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
240068dc:	e77e      	b.n	240067dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240068de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240068e0:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
240068e2:	2001      	movs	r0, #1
240068e4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240068e8:	430b      	orrs	r3, r1
240068ea:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240068ec:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240068f0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
240068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
240068f8:	685a      	ldr	r2, [r3, #4]
240068fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
240068fe:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006900:	f7fe f8e8 	bl	24004ad4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006904:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24006906:	4604      	mov	r4, r0
24006908:	e7d6      	b.n	240068b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
2400690a:	bf00      	nop
2400690c:	fe00e800 	.word	0xfe00e800

24006910 <HAL_I2C_Init>:
  if (hi2c == NULL)
24006910:	2800      	cmp	r0, #0
24006912:	d056      	beq.n	240069c2 <HAL_I2C_Init+0xb2>
{
24006914:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24006916:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400691a:	4604      	mov	r4, r0
2400691c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006920:	2b00      	cmp	r3, #0
24006922:	d049      	beq.n	240069b8 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24006924:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24006926:	2324      	movs	r3, #36	; 0x24
24006928:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
2400692c:	6813      	ldr	r3, [r2, #0]
2400692e:	f023 0301 	bic.w	r3, r3, #1
24006932:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24006934:	e9d4 2300 	ldrd	r2, r3, [r4]
24006938:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
2400693c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400693e:	6822      	ldr	r2, [r4, #0]
24006940:	6893      	ldr	r3, [r2, #8]
24006942:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006946:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006948:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400694a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400694c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400694e:	68a3      	ldr	r3, [r4, #8]
24006950:	bf0c      	ite	eq
24006952:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24006956:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
2400695a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400695c:	68e3      	ldr	r3, [r4, #12]
2400695e:	2b02      	cmp	r3, #2
24006960:	d103      	bne.n	2400696a <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24006962:	6823      	ldr	r3, [r4, #0]
24006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006968:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400696a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
2400696c:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006970:	4b15      	ldr	r3, [pc, #84]	; (240069c8 <HAL_I2C_Init+0xb8>)
24006972:	6851      	ldr	r1, [r2, #4]
24006974:	430b      	orrs	r3, r1
24006976:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24006978:	6822      	ldr	r2, [r4, #0]
2400697a:	68d3      	ldr	r3, [r2, #12]
2400697c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006980:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24006982:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006984:	6821      	ldr	r1, [r4, #0]
24006986:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
2400698a:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400698c:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400698e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
24006992:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006994:	6821      	ldr	r1, [r4, #0]
24006996:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
2400699a:	4303      	orrs	r3, r0
  return HAL_OK;
2400699c:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400699e:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
240069a0:	6821      	ldr	r1, [r4, #0]
240069a2:	680b      	ldr	r3, [r1, #0]
240069a4:	f043 0301 	orr.w	r3, r3, #1
240069a8:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240069aa:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
240069ac:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
240069b0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
240069b2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
240069b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
240069b8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
240069bc:	f7fc fae8 	bl	24002f90 <HAL_I2C_MspInit>
240069c0:	e7b0      	b.n	24006924 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
240069c2:	2001      	movs	r0, #1
}
240069c4:	4770      	bx	lr
240069c6:	bf00      	nop
240069c8:	02008000 	.word	0x02008000

240069cc <HAL_I2C_Master_Transmit>:
{
240069cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240069d0:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
240069d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
240069d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
240069d8:	2b20      	cmp	r3, #32
240069da:	d12c      	bne.n	24006a36 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
240069dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240069e0:	4683      	mov	fp, r0
240069e2:	2b01      	cmp	r3, #1
240069e4:	d027      	beq.n	24006a36 <HAL_I2C_Master_Transmit+0x6a>
240069e6:	2301      	movs	r3, #1
240069e8:	468a      	mov	sl, r1
240069ea:	4616      	mov	r6, r2
240069ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
240069f0:	f7fe f870 	bl	24004ad4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240069f4:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
240069f8:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240069fa:	699a      	ldr	r2, [r3, #24]
240069fc:	0417      	lsls	r7, r2, #16
240069fe:	d51d      	bpl.n	24006a3c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006a00:	f7fe f868 	bl	24004ad4 <HAL_GetTick>
24006a04:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006a08:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006a0c:	2819      	cmp	r0, #25
24006a0e:	d9f4      	bls.n	240069fa <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006a10:	699a      	ldr	r2, [r3, #24]
24006a12:	0410      	lsls	r0, r2, #16
24006a14:	d5f1      	bpl.n	240069fa <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006a16:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006a1a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006a1c:	2200      	movs	r2, #0
      return HAL_ERROR;
24006a1e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006a20:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
24006a22:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006a26:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006a2a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006a2e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
24006a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24006a36:	2002      	movs	r0, #2
}
24006a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006a3c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006a3e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
24006a40:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006a44:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006a48:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
24006a4a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006a4e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006a52:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24006a56:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006a5a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24006a5e:	b292      	uxth	r2, r2
24006a60:	2aff      	cmp	r2, #255	; 0xff
24006a62:	d87e      	bhi.n	24006b62 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
24006a64:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24006a68:	48ad      	ldr	r0, [pc, #692]	; (24006d20 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
24006a6a:	b292      	uxth	r2, r2
24006a6c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24006a70:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
24006a72:	6859      	ldr	r1, [r3, #4]
24006a74:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24006a76:	f3ca 0109 	ubfx	r1, sl, #0, #10
24006a7a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006a7e:	4301      	orrs	r1, r0
24006a80:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24006a84:	49a7      	ldr	r1, [pc, #668]	; (24006d24 <HAL_I2C_Master_Transmit+0x358>)
24006a86:	4311      	orrs	r1, r2
24006a88:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006a8a:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
24006a8e:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006a92:	b29b      	uxth	r3, r3
24006a94:	2b00      	cmp	r3, #0
24006a96:	f000 8107 	beq.w	24006ca8 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24006a9a:	f8db 3000 	ldr.w	r3, [fp]
24006a9e:	699c      	ldr	r4, [r3, #24]
24006aa0:	f014 0402 	ands.w	r4, r4, #2
24006aa4:	f040 80c5 	bne.w	24006c32 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24006aa8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006aaa:	f012 0210 	ands.w	r2, r2, #16
24006aae:	f000 808d 	beq.w	24006bcc <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006ab2:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24006ab4:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24006ab6:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006ab8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006aba:	f8db 3000 	ldr.w	r3, [fp]
24006abe:	1c69      	adds	r1, r5, #1
24006ac0:	699a      	ldr	r2, [r3, #24]
24006ac2:	f040 8085 	bne.w	24006bd0 <HAL_I2C_Master_Transmit+0x204>
24006ac6:	0690      	lsls	r0, r2, #26
24006ac8:	f100 8106 	bmi.w	24006cd8 <HAL_I2C_Master_Transmit+0x30c>
24006acc:	b937      	cbnz	r7, 24006adc <HAL_I2C_Master_Transmit+0x110>
24006ace:	699a      	ldr	r2, [r3, #24]
24006ad0:	0691      	lsls	r1, r2, #26
24006ad2:	d5fc      	bpl.n	24006ace <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006ad4:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24006ad8:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24006adc:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
24006ae0:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
24006ae2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006ae4:	05ce      	lsls	r6, r1, #23
24006ae6:	d54b      	bpl.n	24006b80 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006ae8:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006aec:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006aee:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006af2:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006af4:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006af8:	d506      	bpl.n	24006b08 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006afa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006afe:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006b02:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006b04:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006b08:	0589      	lsls	r1, r1, #22
24006b0a:	d506      	bpl.n	24006b1a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006b10:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006b14:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006b16:	f8db 3000 	ldr.w	r3, [fp]
24006b1a:	6999      	ldr	r1, [r3, #24]
24006b1c:	078e      	lsls	r6, r1, #30
24006b1e:	d503      	bpl.n	24006b28 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
24006b20:	2100      	movs	r1, #0
24006b22:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006b24:	f8db 3000 	ldr.w	r3, [fp]
24006b28:	6999      	ldr	r1, [r3, #24]
24006b2a:	07cd      	lsls	r5, r1, #31
24006b2c:	d405      	bmi.n	24006b3a <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006b2e:	6999      	ldr	r1, [r3, #24]
24006b30:	f041 0101 	orr.w	r1, r1, #1
24006b34:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24006b36:	f8db 3000 	ldr.w	r3, [fp]
24006b3a:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006b3c:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
24006b3e:	487a      	ldr	r0, [pc, #488]	; (24006d28 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
24006b40:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
24006b42:	4001      	ands	r1, r0
        return HAL_ERROR;
24006b44:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006b46:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006b48:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24006b4c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006b50:	431a      	orrs	r2, r3
24006b52:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006b56:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006b5a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
24006b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006b62:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006b64:	496e      	ldr	r1, [pc, #440]	; (24006d20 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006b66:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006b6a:	685a      	ldr	r2, [r3, #4]
24006b6c:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24006b6e:	f3ca 0109 	ubfx	r1, sl, #0, #10
24006b72:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006b76:	4311      	orrs	r1, r2
24006b78:	4a6c      	ldr	r2, [pc, #432]	; (24006d2c <HAL_I2C_Master_Transmit+0x360>)
24006b7a:	430a      	orrs	r2, r1
24006b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24006b7e:	e784      	b.n	24006a8a <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006b80:	054c      	lsls	r4, r1, #21
24006b82:	d4ba      	bmi.n	24006afa <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006b84:	058f      	lsls	r7, r1, #22
24006b86:	d4c1      	bmi.n	24006b0c <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
24006b88:	2800      	cmp	r0, #0
24006b8a:	d1c6      	bne.n	24006b1a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
24006b8c:	1c6a      	adds	r2, r5, #1
24006b8e:	d086      	beq.n	24006a9e <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006b90:	f7fd ffa0 	bl	24004ad4 <HAL_GetTick>
24006b94:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006b98:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006b9c:	4285      	cmp	r5, r0
24006b9e:	d302      	bcc.n	24006ba6 <HAL_I2C_Master_Transmit+0x1da>
24006ba0:	2d00      	cmp	r5, #0
24006ba2:	f47f af7c 	bne.w	24006a9e <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006ba6:	699a      	ldr	r2, [r3, #24]
24006ba8:	f012 0202 	ands.w	r2, r2, #2
24006bac:	f47f af77 	bne.w	24006a9e <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006bb0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006bb4:	2120      	movs	r1, #32
        return HAL_ERROR;
24006bb6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006bb8:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006bbc:	430b      	orrs	r3, r1
24006bbe:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006bc2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006bc6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
24006bca:	e735      	b.n	24006a38 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24006bcc:	4610      	mov	r0, r2
24006bce:	e788      	b.n	24006ae2 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006bd0:	0692      	lsls	r2, r2, #26
24006bd2:	f100 8081 	bmi.w	24006cd8 <HAL_I2C_Master_Transmit+0x30c>
24006bd6:	2f00      	cmp	r7, #0
24006bd8:	d180      	bne.n	24006adc <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006bda:	f7fd ff7b 	bl	24004ad4 <HAL_GetTick>
24006bde:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006be0:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006be4:	4285      	cmp	r5, r0
24006be6:	d302      	bcc.n	24006bee <HAL_I2C_Master_Transmit+0x222>
24006be8:	2d00      	cmp	r5, #0
24006bea:	f47f af68 	bne.w	24006abe <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006bee:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006bf0:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006bf4:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24006bf6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006bf8:	0409      	lsls	r1, r1, #16
24006bfa:	d50c      	bpl.n	24006c16 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24006bfc:	0441      	lsls	r1, r0, #17
24006bfe:	d40a      	bmi.n	24006c16 <HAL_I2C_Master_Transmit+0x24a>
24006c00:	2a20      	cmp	r2, #32
24006c02:	d008      	beq.n	24006c16 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006c04:	685a      	ldr	r2, [r3, #4]
24006c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006c0a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006c0c:	f7fd ff62 	bl	24004ad4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006c10:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24006c14:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006c16:	699a      	ldr	r2, [r3, #24]
24006c18:	0690      	lsls	r0, r2, #26
24006c1a:	f53f af50 	bmi.w	24006abe <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006c1e:	f7fd ff59 	bl	24004ad4 <HAL_GetTick>
24006c22:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006c24:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006c28:	2819      	cmp	r0, #25
24006c2a:	d9f4      	bls.n	24006c16 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006c2c:	2420      	movs	r4, #32
              status = HAL_ERROR;
24006c2e:	2701      	movs	r7, #1
24006c30:	e745      	b.n	24006abe <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24006c32:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
24006c36:	7812      	ldrb	r2, [r2, #0]
24006c38:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006c3a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
24006c3e:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
24006c42:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
24006c44:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
24006c48:	3b01      	subs	r3, #1
      hi2c->XferCount--;
24006c4a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24006c4c:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006c4e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
24006c50:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006c54:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006c58:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006c5c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
24006c5e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006c62:	2a00      	cmp	r2, #0
24006c64:	f43f af13 	beq.w	24006a8e <HAL_I2C_Master_Transmit+0xc2>
24006c68:	2b00      	cmp	r3, #0
24006c6a:	f47f af10 	bne.w	24006a8e <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006c6e:	f8db 2000 	ldr.w	r2, [fp]
24006c72:	1c6c      	adds	r4, r5, #1
24006c74:	d134      	bne.n	24006ce0 <HAL_I2C_Master_Transmit+0x314>
24006c76:	6993      	ldr	r3, [r2, #24]
24006c78:	0618      	lsls	r0, r3, #24
24006c7a:	d5fc      	bpl.n	24006c76 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006c7c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006c80:	b29b      	uxth	r3, r3
24006c82:	2bff      	cmp	r3, #255	; 0xff
24006c84:	d958      	bls.n	24006d38 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006c86:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006c88:	4929      	ldr	r1, [pc, #164]	; (24006d30 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006c8a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006c8e:	6853      	ldr	r3, [r2, #4]
24006c90:	400b      	ands	r3, r1
24006c92:	4928      	ldr	r1, [pc, #160]	; (24006d34 <HAL_I2C_Master_Transmit+0x368>)
24006c94:	ea4a 0303 	orr.w	r3, sl, r3
24006c98:	4319      	orrs	r1, r3
24006c9a:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
24006c9c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006ca0:	b29b      	uxth	r3, r3
24006ca2:	2b00      	cmp	r3, #0
24006ca4:	f47f aef9 	bne.w	24006a9a <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24006ca8:	4642      	mov	r2, r8
24006caa:	4629      	mov	r1, r5
24006cac:	4658      	mov	r0, fp
24006cae:	f7ff fd71 	bl	24006794 <I2C_WaitOnSTOPFlagUntilTimeout>
24006cb2:	2800      	cmp	r0, #0
24006cb4:	d151      	bne.n	24006d5a <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cb6:	f8db 3000 	ldr.w	r3, [fp]
24006cba:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24006cbc:	4c1a      	ldr	r4, [pc, #104]	; (24006d28 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cbe:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24006cc0:	f8db 1000 	ldr.w	r1, [fp]
24006cc4:	684b      	ldr	r3, [r1, #4]
24006cc6:	4023      	ands	r3, r4
24006cc8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24006cca:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006cce:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24006cd2:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24006cd6:	e6af      	b.n	24006a38 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24006cd8:	2f00      	cmp	r7, #0
24006cda:	f43f aefb 	beq.w	24006ad4 <HAL_I2C_Master_Transmit+0x108>
24006cde:	e6fd      	b.n	24006adc <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006ce0:	6993      	ldr	r3, [r2, #24]
24006ce2:	0619      	lsls	r1, r3, #24
24006ce4:	d4ca      	bmi.n	24006c7c <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006ce6:	f7fd fef5 	bl	24004ad4 <HAL_GetTick>
24006cea:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006cee:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006cf2:	4285      	cmp	r5, r0
24006cf4:	d301      	bcc.n	24006cfa <HAL_I2C_Master_Transmit+0x32e>
24006cf6:	2d00      	cmp	r5, #0
24006cf8:	d1bb      	bne.n	24006c72 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006cfa:	6993      	ldr	r3, [r2, #24]
24006cfc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
24006d00:	d1b7      	bne.n	24006c72 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006d02:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006d06:	2120      	movs	r1, #32
          return HAL_ERROR;
24006d08:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006d0a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006d0e:	430a      	orrs	r2, r1
24006d10:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006d14:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006d18:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24006d1c:	e68c      	b.n	24006a38 <HAL_I2C_Master_Transmit+0x6c>
24006d1e:	bf00      	nop
24006d20:	fc009800 	.word	0xfc009800
24006d24:	02002000 	.word	0x02002000
24006d28:	fe00e800 	.word	0xfe00e800
24006d2c:	01ff2000 	.word	0x01ff2000
24006d30:	fc009c00 	.word	0xfc009c00
24006d34:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
24006d38:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24006d3c:	4808      	ldr	r0, [pc, #32]	; (24006d60 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
24006d3e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24006d40:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
24006d42:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006d46:	6853      	ldr	r3, [r2, #4]
24006d48:	4003      	ands	r3, r0
24006d4a:	ea4a 0303 	orr.w	r3, sl, r3
24006d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24006d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24006d56:	6053      	str	r3, [r2, #4]
}
24006d58:	e699      	b.n	24006a8e <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
24006d5a:	2001      	movs	r0, #1
24006d5c:	e66c      	b.n	24006a38 <HAL_I2C_Master_Transmit+0x6c>
24006d5e:	bf00      	nop
24006d60:	fc009c00 	.word	0xfc009c00

24006d64 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
24006d64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006d68:	2b20      	cmp	r3, #32
24006d6a:	d126      	bne.n	24006dba <HAL_I2C_Slave_Receive_IT+0x56>
{
24006d6c:	b4f0      	push	{r4, r5, r6, r7}
24006d6e:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
24006d70:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006d74:	2b01      	cmp	r3, #1
24006d76:	d022      	beq.n	24006dbe <HAL_I2C_Slave_Receive_IT+0x5a>
24006d78:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006d7a:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006d7c:	4e11      	ldr	r6, [pc, #68]	; (24006dc4 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
24006d7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006d82:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006d84:	4f10      	ldr	r7, [pc, #64]	; (24006dc8 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006d86:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006d8a:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
24006d8c:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006d90:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006d92:	686c      	ldr	r4, [r5, #4]
24006d94:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24006d98:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
24006d9a:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
24006d9c:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
24006d9e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006da0:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006da2:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24006da4:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006da6:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24006da8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
24006dac:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006dae:	680a      	ldr	r2, [r1, #0]
24006db0:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24006db4:	600a      	str	r2, [r1, #0]
}
24006db6:	bcf0      	pop	{r4, r5, r6, r7}
24006db8:	4770      	bx	lr
    return HAL_BUSY;
24006dba:	2002      	movs	r0, #2
}
24006dbc:	4770      	bx	lr
    return HAL_BUSY;
24006dbe:	2002      	movs	r0, #2
}
24006dc0:	bcf0      	pop	{r4, r5, r6, r7}
24006dc2:	4770      	bx	lr
24006dc4:	ffff0000 	.word	0xffff0000
24006dc8:	24007265 	.word	0x24007265

24006dcc <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006dcc:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
24006dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006dd0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006dd2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24006dd4:	b103      	cbz	r3, 24006dd8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24006dd6:	4718      	bx	r3
}
24006dd8:	4770      	bx	lr
24006dda:	bf00      	nop

24006ddc <HAL_I2C_SlaveTxCpltCallback>:
24006ddc:	4770      	bx	lr
24006dde:	bf00      	nop

24006de0 <I2C_ITSlaveSeqCplt>:
{
24006de0:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006de2:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006de4:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006de6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006de8:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006dec:	0451      	lsls	r1, r2, #17
24006dee:	d50c      	bpl.n	24006e0a <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006df0:	681a      	ldr	r2, [r3, #0]
24006df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006df6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006df8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006dfc:	2b29      	cmp	r3, #41	; 0x29
24006dfe:	d00e      	beq.n	24006e1e <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24006e00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006e04:	2b2a      	cmp	r3, #42	; 0x2a
24006e06:	d024      	beq.n	24006e52 <I2C_ITSlaveSeqCplt+0x72>
}
24006e08:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006e0a:	0412      	lsls	r2, r2, #16
24006e0c:	d5f4      	bpl.n	24006df8 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006e0e:	681a      	ldr	r2, [r3, #0]
24006e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006e14:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006e16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006e1a:	2b29      	cmp	r3, #41	; 0x29
24006e1c:	d1f0      	bne.n	24006e00 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006e1e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006e20:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e22:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006e24:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006e28:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006e2c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e2e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e32:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e34:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006e38:	2a28      	cmp	r2, #40	; 0x28
24006e3a:	bf0c      	ite	eq
24006e3c:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24006e40:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e44:	4013      	ands	r3, r2
24006e46:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006e48:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006e4c:	f7ff ffc6 	bl	24006ddc <HAL_I2C_SlaveTxCpltCallback>
}
24006e50:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006e52:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006e54:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e56:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006e58:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006e5c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006e60:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e62:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e66:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e68:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006e6c:	2a28      	cmp	r2, #40	; 0x28
24006e6e:	bf0c      	ite	eq
24006e70:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24006e74:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e78:	4013      	ands	r3, r2
24006e7a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006e7c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006e80:	f02c fb4e 	bl	24033520 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006e84:	bd08      	pop	{r3, pc}
24006e86:	bf00      	nop

24006e88 <HAL_I2C_AddrCallback>:
}
24006e88:	4770      	bx	lr
24006e8a:	bf00      	nop

24006e8c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006e8c:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24006e8e:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006e90:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006e92:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24006e94:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006e96:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006e98:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006e9a:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24006e9c:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006ea0:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24006ea4:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006ea6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006eaa:	d10f      	bne.n	24006ecc <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006eac:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006eb0:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006eb4:	f013 0306 	ands.w	r3, r3, #6
24006eb8:	d106      	bne.n	24006ec8 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24006eba:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006ebc:	3501      	adds	r5, #1
24006ebe:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24006ec0:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006ec2:	2d02      	cmp	r5, #2
24006ec4:	d00c      	beq.n	24006ee0 <I2C_ITAddrCplt.part.0+0x54>
}
24006ec6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006ec8:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ecc:	6823      	ldr	r3, [r4, #0]
24006ece:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24006ed2:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24006ed4:	2300      	movs	r3, #0
24006ed6:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006eda:	f7ff ffd5 	bl	24006e88 <HAL_I2C_AddrCallback>
}
24006ede:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006ee0:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24006ee2:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006ee4:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24006ee6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006eea:	f7ff ffcd 	bl	24006e88 <HAL_I2C_AddrCallback>
}
24006eee:	bd70      	pop	{r4, r5, r6, pc}

24006ef0 <HAL_I2C_ListenCpltCallback>:
24006ef0:	4770      	bx	lr
24006ef2:	bf00      	nop

24006ef4 <HAL_I2C_AbortCpltCallback>:
24006ef4:	4770      	bx	lr
24006ef6:	bf00      	nop

24006ef8 <I2C_DMAAbort>:
{
24006ef8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24006efa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24006efc:	6b83      	ldr	r3, [r0, #56]	; 0x38
24006efe:	b10b      	cbz	r3, 24006f04 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24006f00:	2200      	movs	r2, #0
24006f02:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24006f04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24006f06:	b10b      	cbz	r3, 24006f0c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24006f08:	2200      	movs	r2, #0
24006f0a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006f0c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006f10:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006f12:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006f16:	d005      	beq.n	24006f24 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24006f18:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006f1a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006f1e:	f02c fb2b 	bl	24033578 <__HAL_I2C_ErrorCallback_veneer>
}
24006f22:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006f24:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24006f26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006f2a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006f2e:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006f30:	f7ff ffe0 	bl	24006ef4 <HAL_I2C_AbortCpltCallback>
}
24006f34:	bd08      	pop	{r3, pc}
24006f36:	bf00      	nop

24006f38 <I2C_ITError>:
{
24006f38:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006f3a:	4a5d      	ldr	r2, [pc, #372]	; (240070b0 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006f3c:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006f3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006f42:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006f44:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006f48:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006f4a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24006f4c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24006f4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006f50:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24006f52:	ea41 0102 	orr.w	r1, r1, r2
24006f56:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006f58:	d874      	bhi.n	24007044 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f5a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f5e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f62:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f66:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f68:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f6c:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f6e:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f70:	bf14      	ite	ne
24006f72:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24006f76:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f7a:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006f7c:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f80:	bf18      	it	ne
24006f82:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f86:	4013      	ands	r3, r2
24006f88:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006f8a:	4b4a      	ldr	r3, [pc, #296]	; (240070b4 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006f8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006f90:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006f92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24006f94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006f96:	b118      	cbz	r0, 24006fa0 <I2C_ITError+0x68>
24006f98:	2b11      	cmp	r3, #17
24006f9a:	d01e      	beq.n	24006fda <I2C_ITError+0xa2>
24006f9c:	2b21      	cmp	r3, #33	; 0x21
24006f9e:	d01c      	beq.n	24006fda <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24006fa0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006fa2:	b118      	cbz	r0, 24006fac <I2C_ITError+0x74>
24006fa4:	2b12      	cmp	r3, #18
24006fa6:	d030      	beq.n	2400700a <I2C_ITError+0xd2>
24006fa8:	2b22      	cmp	r3, #34	; 0x22
24006faa:	d02e      	beq.n	2400700a <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006fac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006fb0:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006fb2:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006fb6:	d006      	beq.n	24006fc6 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24006fb8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24006fba:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006fbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006fc0:	f02c fada 	bl	24033578 <__HAL_I2C_ErrorCallback_veneer>
}
24006fc4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006fc6:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24006fc8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006fca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006fce:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006fd2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006fd4:	f7ff ff8e 	bl	24006ef4 <HAL_I2C_AbortCpltCallback>
}
24006fd8:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24006fda:	6823      	ldr	r3, [r4, #0]
24006fdc:	681a      	ldr	r2, [r3, #0]
24006fde:	0451      	lsls	r1, r2, #17
24006fe0:	d460      	bmi.n	240070a4 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006fe2:	f7ff fa09 	bl	240063f8 <HAL_DMA_GetState>
24006fe6:	2801      	cmp	r0, #1
24006fe8:	d0e0      	beq.n	24006fac <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006fea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24006fec:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006fee:	4932      	ldr	r1, [pc, #200]	; (240070b8 <I2C_ITError+0x180>)
24006ff0:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006ff2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24006ff6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006ff8:	f7fe fc6a 	bl	240058d0 <HAL_DMA_Abort_IT>
24006ffc:	2800      	cmp	r0, #0
24006ffe:	d0e1      	beq.n	24006fc4 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007000:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24007002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007006:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007008:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400700a:	6823      	ldr	r3, [r4, #0]
2400700c:	681a      	ldr	r2, [r3, #0]
2400700e:	0412      	lsls	r2, r2, #16
24007010:	d504      	bpl.n	2400701c <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24007012:	681a      	ldr	r2, [r3, #0]
24007014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007018:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400701a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400701c:	f7ff f9ec 	bl	240063f8 <HAL_DMA_GetState>
24007020:	2801      	cmp	r0, #1
24007022:	d0c3      	beq.n	24006fac <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24007024:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24007026:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24007028:	4923      	ldr	r1, [pc, #140]	; (240070b8 <I2C_ITError+0x180>)
2400702a:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
2400702c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24007030:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007032:	f7fe fc4d 	bl	240058d0 <HAL_DMA_Abort_IT>
24007036:	2800      	cmp	r0, #0
24007038:	d0c4      	beq.n	24006fc4 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400703a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
2400703c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24007040:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007042:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007044:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007046:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400704a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400704e:	6813      	ldr	r3, [r2, #0]
24007050:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007054:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007056:	6803      	ldr	r3, [r0, #0]
24007058:	699a      	ldr	r2, [r3, #24]
2400705a:	0792      	lsls	r2, r2, #30
2400705c:	d501      	bpl.n	24007062 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
2400705e:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007060:	6803      	ldr	r3, [r0, #0]
24007062:	699a      	ldr	r2, [r3, #24]
24007064:	07d6      	lsls	r6, r2, #31
24007066:	d403      	bmi.n	24007070 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007068:	699a      	ldr	r2, [r3, #24]
2400706a:	f042 0201 	orr.w	r2, r2, #1
2400706e:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24007070:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24007074:	2b60      	cmp	r3, #96	; 0x60
24007076:	d012      	beq.n	2400709e <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24007078:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400707a:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
2400707c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24007080:	699a      	ldr	r2, [r3, #24]
24007082:	0695      	lsls	r5, r2, #26
24007084:	d50b      	bpl.n	2400709e <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24007086:	699a      	ldr	r2, [r3, #24]
24007088:	06d0      	lsls	r0, r2, #27
2400708a:	d506      	bpl.n	2400709a <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400708c:	2210      	movs	r2, #16
2400708e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007090:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007092:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007094:	f042 0204 	orr.w	r2, r2, #4
24007098:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400709a:	2220      	movs	r2, #32
2400709c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
2400709e:	2300      	movs	r3, #0
240070a0:	6363      	str	r3, [r4, #52]	; 0x34
240070a2:	e776      	b.n	24006f92 <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240070a4:	681a      	ldr	r2, [r3, #0]
240070a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
240070aa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
240070ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
240070ae:	e798      	b.n	24006fe2 <I2C_ITError+0xaa>
240070b0:	ffff0000 	.word	0xffff0000
240070b4:	24007265 	.word	0x24007265
240070b8:	24006ef9 	.word	0x24006ef9

240070bc <I2C_ITSlaveCplt>:
{
240070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240070be:	6802      	ldr	r2, [r0, #0]
{
240070c0:	460d      	mov	r5, r1
240070c2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
240070c4:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
240070c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240070ca:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
240070cc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240070d0:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
240070d2:	2b21      	cmp	r3, #33	; 0x21
240070d4:	d16f      	bne.n	240071b6 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070d6:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070d8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070dc:	6802      	ldr	r2, [r0, #0]
240070de:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
240070e2:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240070e4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240070e6:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
240070e8:	485c      	ldr	r0, [pc, #368]	; (2400725c <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240070ea:	6853      	ldr	r3, [r2, #4]
240070ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240070f0:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
240070f2:	6822      	ldr	r2, [r4, #0]
240070f4:	6853      	ldr	r3, [r2, #4]
240070f6:	4003      	ands	r3, r0
240070f8:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240070fa:	6823      	ldr	r3, [r4, #0]
240070fc:	699a      	ldr	r2, [r3, #24]
240070fe:	0797      	lsls	r7, r2, #30
24007100:	d502      	bpl.n	24007108 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
24007102:	2200      	movs	r2, #0
24007104:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007106:	6823      	ldr	r3, [r4, #0]
24007108:	699a      	ldr	r2, [r3, #24]
2400710a:	07d6      	lsls	r6, r2, #31
2400710c:	d403      	bmi.n	24007116 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400710e:	699a      	ldr	r2, [r3, #24]
24007110:	f042 0201 	orr.w	r2, r2, #1
24007114:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24007116:	0448      	lsls	r0, r1, #17
24007118:	d558      	bpl.n	240071cc <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400711a:	6822      	ldr	r2, [r4, #0]
2400711c:	6813      	ldr	r3, [r2, #0]
2400711e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24007122:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24007124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007126:	b11b      	cbz	r3, 24007130 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24007128:	681a      	ldr	r2, [r3, #0]
2400712a:	6853      	ldr	r3, [r2, #4]
2400712c:	b29b      	uxth	r3, r3
2400712e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24007130:	076a      	lsls	r2, r5, #29
24007132:	d50a      	bpl.n	2400714a <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007134:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
24007136:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400713a:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400713c:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400713e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007140:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007142:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007144:	3301      	adds	r3, #1
24007146:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007148:	bb72      	cbnz	r2, 240071a8 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
2400714a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400714c:	b29b      	uxth	r3, r3
2400714e:	b11b      	cbz	r3, 24007158 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007150:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007152:	f043 0304 	orr.w	r3, r3, #4
24007156:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007158:	2700      	movs	r7, #0
2400715a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400715e:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24007160:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007162:	2e00      	cmp	r6, #0
24007164:	d13d      	bne.n	240071e2 <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24007166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007168:	4d3d      	ldr	r5, [pc, #244]	; (24007260 <I2C_ITSlaveCplt+0x1a4>)
2400716a:	42ab      	cmp	r3, r5
2400716c:	d10e      	bne.n	2400718c <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400716e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007172:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24007174:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007178:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
2400717a:	f04f 0320 	mov.w	r3, #32
2400717e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007182:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007184:	d066      	beq.n	24007254 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24007186:	f7ff fe29 	bl	24006ddc <HAL_I2C_SlaveTxCpltCallback>
}
2400718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
2400718c:	4620      	mov	r0, r4
2400718e:	f7ff fe27 	bl	24006de0 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24007192:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007194:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24007196:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24007198:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400719c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
240071a0:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
240071a2:	f7ff fea5 	bl	24006ef0 <HAL_I2C_ListenCpltCallback>
}
240071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
240071a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240071aa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240071ac:	3b01      	subs	r3, #1
      hi2c->XferSize--;
240071ae:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240071b0:	b29b      	uxth	r3, r3
240071b2:	8563      	strh	r3, [r4, #42]	; 0x2a
240071b4:	e7c9      	b.n	2400714a <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
240071b6:	2b22      	cmp	r3, #34	; 0x22
240071b8:	d195      	bne.n	240070e6 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240071ba:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240071bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240071c0:	6802      	ldr	r2, [r0, #0]
240071c2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
240071c6:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
240071c8:	6323      	str	r3, [r4, #48]	; 0x30
240071ca:	e78c      	b.n	240070e6 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
240071cc:	0409      	lsls	r1, r1, #16
240071ce:	d5af      	bpl.n	24007130 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
240071d0:	6822      	ldr	r2, [r4, #0]
240071d2:	6813      	ldr	r3, [r2, #0]
240071d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240071d8:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
240071da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240071dc:	2b00      	cmp	r3, #0
240071de:	d1a3      	bne.n	24007128 <I2C_ITSlaveCplt+0x6c>
240071e0:	e7a6      	b.n	24007130 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
240071e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
240071e4:	4620      	mov	r0, r4
240071e6:	f7ff fea7 	bl	24006f38 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
240071ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240071ee:	2b28      	cmp	r3, #40	; 0x28
240071f0:	d1cb      	bne.n	2400718a <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
240071f2:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240071f4:	4a1a      	ldr	r2, [pc, #104]	; (24007260 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
240071f6:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240071f8:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
240071fa:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
240071fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007200:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
24007202:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007206:	d512      	bpl.n	2400722e <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007208:	6822      	ldr	r2, [r4, #0]
2400720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400720c:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400720e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007212:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007214:	3301      	adds	r3, #1
24007216:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007218:	b14a      	cbz	r2, 2400722e <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
2400721a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
2400721c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400721e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24007220:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007222:	b29b      	uxth	r3, r3
24007224:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007226:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007228:	f043 0304 	orr.w	r3, r3, #4
2400722c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400722e:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007230:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007232:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24007236:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007238:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400723c:	6813      	ldr	r3, [r2, #0]
2400723e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24007242:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007244:	6823      	ldr	r3, [r4, #0]
24007246:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24007248:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
2400724a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
2400724e:	f7ff fe4f 	bl	24006ef0 <HAL_I2C_ListenCpltCallback>
}
24007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007254:	f02c f964 	bl	24033520 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24007258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400725a:	bf00      	nop
2400725c:	fe00e800 	.word	0xfe00e800
24007260:	ffff0000 	.word	0xffff0000

24007264 <I2C_Slave_ISR_IT>:
{
24007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24007266:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
2400726a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
2400726c:	2b01      	cmp	r3, #1
2400726e:	d07f      	beq.n	24007370 <I2C_Slave_ISR_IT+0x10c>
24007270:	4617      	mov	r7, r2
24007272:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007274:	068a      	lsls	r2, r1, #26
24007276:	4604      	mov	r4, r0
24007278:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
2400727a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400727e:	d501      	bpl.n	24007284 <I2C_Slave_ISR_IT+0x20>
24007280:	06bb      	lsls	r3, r7, #26
24007282:	d461      	bmi.n	24007348 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007284:	06ea      	lsls	r2, r5, #27
24007286:	d51b      	bpl.n	240072c0 <I2C_Slave_ISR_IT+0x5c>
24007288:	06fb      	lsls	r3, r7, #27
2400728a:	d519      	bpl.n	240072c0 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
2400728c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
2400728e:	b29b      	uxth	r3, r3
24007290:	2b00      	cmp	r3, #0
24007292:	d15e      	bne.n	24007352 <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24007294:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24007298:	2a28      	cmp	r2, #40	; 0x28
2400729a:	d102      	bne.n	240072a2 <I2C_Slave_ISR_IT+0x3e>
2400729c:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
240072a0:	d07f      	beq.n	240073a2 <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
240072a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240072a6:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
240072a8:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240072aa:	6823      	ldr	r3, [r4, #0]
240072ac:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
240072ae:	d102      	bne.n	240072b6 <I2C_Slave_ISR_IT+0x52>
240072b0:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
240072b4:	d162      	bne.n	2400737c <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
240072b6:	2300      	movs	r3, #0
  return HAL_OK;
240072b8:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
240072ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
240072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
240072c0:	076a      	lsls	r2, r5, #29
240072c2:	d40d      	bmi.n	240072e0 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
240072c4:	0728      	lsls	r0, r5, #28
240072c6:	d529      	bpl.n	2400731c <I2C_Slave_ISR_IT+0xb8>
240072c8:	0739      	lsls	r1, r7, #28
240072ca:	d527      	bpl.n	2400731c <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
240072cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240072d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
240072d4:	2b28      	cmp	r3, #40	; 0x28
240072d6:	d060      	beq.n	2400739a <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
240072d8:	6823      	ldr	r3, [r4, #0]
240072da:	2208      	movs	r2, #8
240072dc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
240072de:	e7ea      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
240072e0:	077b      	lsls	r3, r7, #29
240072e2:	d5ef      	bpl.n	240072c4 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
240072e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240072e6:	b29b      	uxth	r3, r3
240072e8:	b16b      	cbz	r3, 24007306 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
240072ea:	6822      	ldr	r2, [r4, #0]
240072ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
240072ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
240072f0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
240072f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
240072f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240072f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240072f8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
240072fa:	3101      	adds	r1, #1
      hi2c->XferSize--;
240072fc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240072fe:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007300:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007302:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007304:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24007306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007308:	b29b      	uxth	r3, r3
2400730a:	2b00      	cmp	r3, #0
2400730c:	d1d3      	bne.n	240072b6 <I2C_Slave_ISR_IT+0x52>
2400730e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24007312:	d0d0      	beq.n	240072b6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
24007314:	4620      	mov	r0, r4
24007316:	f7ff fd63 	bl	24006de0 <I2C_ITSlaveSeqCplt>
2400731a:	e7cc      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400731c:	07aa      	lsls	r2, r5, #30
2400731e:	d5ca      	bpl.n	240072b6 <I2C_Slave_ISR_IT+0x52>
24007320:	07bb      	lsls	r3, r7, #30
24007322:	d5c8      	bpl.n	240072b6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
24007324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007326:	b29b      	uxth	r3, r3
24007328:	b323      	cbz	r3, 24007374 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400732a:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400732c:	6823      	ldr	r3, [r4, #0]
2400732e:	7812      	ldrb	r2, [r2, #0]
24007330:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24007332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24007334:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007336:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007338:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
2400733a:	3101      	adds	r1, #1
      hi2c->XferSize--;
2400733c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400733e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007340:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007342:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007344:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007346:	e7b6      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24007348:	f7ff feb8 	bl	240070bc <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400734c:	06ea      	lsls	r2, r5, #27
2400734e:	d5b7      	bpl.n	240072c0 <I2C_Slave_ISR_IT+0x5c>
24007350:	e79a      	b.n	24007288 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007352:	6823      	ldr	r3, [r4, #0]
24007354:	2210      	movs	r2, #16
24007356:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007358:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400735a:	f043 0304 	orr.w	r3, r3, #4
2400735e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24007360:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007364:	d1a7      	bne.n	240072b6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24007366:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007368:	4620      	mov	r0, r4
2400736a:	f7ff fde5 	bl	24006f38 <I2C_ITError>
2400736e:	e7a2      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
24007370:	2002      	movs	r0, #2
}
24007372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24007374:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007378:	d19d      	bne.n	240072b6 <I2C_Slave_ISR_IT+0x52>
2400737a:	e7cb      	b.n	24007314 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400737c:	6823      	ldr	r3, [r4, #0]
2400737e:	699a      	ldr	r2, [r3, #24]
24007380:	0790      	lsls	r0, r2, #30
24007382:	d502      	bpl.n	2400738a <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
24007384:	2200      	movs	r2, #0
24007386:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007388:	6823      	ldr	r3, [r4, #0]
2400738a:	699a      	ldr	r2, [r3, #24]
2400738c:	07d1      	lsls	r1, r2, #31
2400738e:	d4c1      	bmi.n	24007314 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007390:	699a      	ldr	r2, [r3, #24]
24007392:	f042 0201 	orr.w	r2, r2, #1
24007396:	619a      	str	r2, [r3, #24]
24007398:	e7bc      	b.n	24007314 <I2C_Slave_ISR_IT+0xb0>
2400739a:	4620      	mov	r0, r4
2400739c:	f7ff fd76 	bl	24006e8c <I2C_ITAddrCplt.part.0>
240073a0:	e789      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240073a2:	4918      	ldr	r1, [pc, #96]	; (24007404 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
240073a4:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
240073a6:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
240073a8:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240073aa:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
240073ac:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
240073ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
240073b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
240073b6:	d512      	bpl.n	240073de <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
240073b8:	6822      	ldr	r2, [r4, #0]
240073ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
240073bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
240073be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
240073c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
240073c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
240073c4:	3301      	adds	r3, #1
240073c6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
240073c8:	b14a      	cbz	r2, 240073de <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
240073ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240073cc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240073ce:	3b01      	subs	r3, #1
      hi2c->XferSize--;
240073d0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240073d2:	b29b      	uxth	r3, r3
240073d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240073d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
240073d8:	f043 0304 	orr.w	r3, r3, #4
240073dc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240073de:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240073e0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240073e2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
240073e6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240073e8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240073ec:	6813      	ldr	r3, [r2, #0]
240073ee:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240073f2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240073f4:	6823      	ldr	r3, [r4, #0]
240073f6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
240073f8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
240073fa:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
240073fe:	f7ff fd77 	bl	24006ef0 <HAL_I2C_ListenCpltCallback>
}
24007402:	e758      	b.n	240072b6 <I2C_Slave_ISR_IT+0x52>
24007404:	ffff0000 	.word	0xffff0000

24007408 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007408:	6803      	ldr	r3, [r0, #0]
{
2400740a:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400740c:	699a      	ldr	r2, [r3, #24]
2400740e:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24007410:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24007412:	f412 7f80 	tst.w	r2, #256	; 0x100
24007416:	d032      	beq.n	2400747e <HAL_I2C_ER_IRQHandler+0x76>
24007418:	f011 0f80 	tst.w	r1, #128	; 0x80
2400741c:	d021      	beq.n	24007462 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400741e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007420:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007424:	f041 0101 	orr.w	r1, r1, #1
24007428:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400742a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400742c:	0553      	lsls	r3, r2, #21
2400742e:	d507      	bpl.n	24007440 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007430:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007432:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007434:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007438:	f041 0108 	orr.w	r1, r1, #8
2400743c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400743e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007440:	0592      	lsls	r2, r2, #22
24007442:	d507      	bpl.n	24007454 <HAL_I2C_ER_IRQHandler+0x4c>
24007444:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007446:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007448:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400744c:	f043 0302 	orr.w	r3, r3, #2
24007450:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007452:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007454:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007456:	f011 0f0b 	tst.w	r1, #11
2400745a:	d10c      	bne.n	24007476 <HAL_I2C_ER_IRQHandler+0x6e>
}
2400745c:	f85d 4b04 	ldr.w	r4, [sp], #4
24007460:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007462:	0553      	lsls	r3, r2, #21
24007464:	d4f6      	bmi.n	24007454 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007466:	0593      	lsls	r3, r2, #22
24007468:	d5f4      	bpl.n	24007454 <HAL_I2C_ER_IRQHandler+0x4c>
2400746a:	060a      	lsls	r2, r1, #24
2400746c:	d4eb      	bmi.n	24007446 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
2400746e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007470:	f011 0f0b 	tst.w	r1, #11
24007474:	d0f2      	beq.n	2400745c <HAL_I2C_ER_IRQHandler+0x54>
}
24007476:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
2400747a:	f7ff bd5d 	b.w	24006f38 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400747e:	f412 6f80 	tst.w	r2, #1024	; 0x400
24007482:	d0f0      	beq.n	24007466 <HAL_I2C_ER_IRQHandler+0x5e>
24007484:	0609      	lsls	r1, r1, #24
24007486:	d5e5      	bpl.n	24007454 <HAL_I2C_ER_IRQHandler+0x4c>
24007488:	e7d3      	b.n	24007432 <HAL_I2C_ER_IRQHandler+0x2a>
2400748a:	bf00      	nop

2400748c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400748c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007490:	2a20      	cmp	r2, #32
24007492:	d129      	bne.n	240074e8 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
24007494:	4603      	mov	r3, r0
{
24007496:	b500      	push	{lr}
24007498:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400749c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240074a0:	2a01      	cmp	r2, #1
240074a2:	d023      	beq.n	240074ec <HAL_I2CEx_ConfigAnalogFilter+0x60>
240074a4:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240074a6:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240074a8:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240074b0:	2224      	movs	r2, #36	; 0x24
240074b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240074b6:	6802      	ldr	r2, [r0, #0]
240074b8:	f022 0201 	bic.w	r2, r2, #1
240074bc:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240074be:	6818      	ldr	r0, [r3, #0]
240074c0:	6802      	ldr	r2, [r0, #0]
240074c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
240074c6:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
240074c8:	6818      	ldr	r0, [r3, #0]
240074ca:	6802      	ldr	r2, [r0, #0]
240074cc:	4311      	orrs	r1, r2
240074ce:	6001      	str	r1, [r0, #0]

    return HAL_OK;
240074d0:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
240074d2:	6819      	ldr	r1, [r3, #0]
240074d4:	680a      	ldr	r2, [r1, #0]
240074d6:	f042 0201 	orr.w	r2, r2, #1
240074da:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
240074dc:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240074e0:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
240074e4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
240074e8:	2002      	movs	r0, #2
}
240074ea:	4770      	bx	lr
    return HAL_BUSY;
240074ec:	2002      	movs	r0, #2
}
240074ee:	f85d fb04 	ldr.w	pc, [sp], #4
240074f2:	bf00      	nop

240074f4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240074f4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240074f8:	2a20      	cmp	r2, #32
240074fa:	d127      	bne.n	2400754c <HAL_I2CEx_ConfigDigitalFilter+0x58>
240074fc:	4603      	mov	r3, r0
{
240074fe:	b500      	push	{lr}
24007500:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007504:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007508:	2a01      	cmp	r2, #1
2400750a:	d021      	beq.n	24007550 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
2400750c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400750e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007510:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007518:	2224      	movs	r2, #36	; 0x24
2400751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
2400751e:	6802      	ldr	r2, [r0, #0]
24007520:	f022 0201 	bic.w	r2, r2, #1
24007524:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
24007526:	6818      	ldr	r0, [r3, #0]
24007528:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
2400752a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
2400752e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
24007532:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24007534:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
24007536:	6819      	ldr	r1, [r3, #0]
24007538:	680a      	ldr	r2, [r1, #0]
2400753a:	f042 0201 	orr.w	r2, r2, #1
2400753e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007540:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007544:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007548:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
2400754c:	2002      	movs	r0, #2
}
2400754e:	4770      	bx	lr
    return HAL_BUSY;
24007550:	2002      	movs	r0, #2
}
24007552:	f85d fb04 	ldr.w	pc, [sp], #4
24007556:	bf00      	nop

24007558 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007558:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2400755a:	4c10      	ldr	r4, [pc, #64]	; (2400759c <HAL_PWREx_ConfigSupply+0x44>)
2400755c:	68e3      	ldr	r3, [r4, #12]
2400755e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007562:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007564:	d105      	bne.n	24007572 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007566:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2400756a:	1a18      	subs	r0, r3, r0
2400756c:	bf18      	it	ne
2400756e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24007570:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24007572:	f023 0307 	bic.w	r3, r3, #7
24007576:	4318      	orrs	r0, r3
24007578:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
2400757a:	f7fd faab 	bl	24004ad4 <HAL_GetTick>
2400757e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007580:	e005      	b.n	2400758e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24007582:	f7fd faa7 	bl	24004ad4 <HAL_GetTick>
24007586:	1b40      	subs	r0, r0, r5
24007588:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
2400758c:	d804      	bhi.n	24007598 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2400758e:	6863      	ldr	r3, [r4, #4]
24007590:	049b      	lsls	r3, r3, #18
24007592:	d5f6      	bpl.n	24007582 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24007594:	2000      	movs	r0, #0
}
24007596:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24007598:	2001      	movs	r0, #1
}
2400759a:	bd38      	pop	{r3, r4, r5, pc}
2400759c:	58024800 	.word	0x58024800

240075a0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240075a0:	4b3b      	ldr	r3, [pc, #236]	; (24007690 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
240075a2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240075a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240075a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240075a8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
240075aa:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240075ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240075b0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240075b4:	d038      	beq.n	24007628 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240075b6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240075ba:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240075be:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240075c2:	fb05 f101 	mul.w	r1, r5, r1
240075c6:	2a01      	cmp	r2, #1
240075c8:	ee07 1a90 	vmov	s15, r1
240075cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
240075d0:	d002      	beq.n	240075d8 <HAL_RCC_GetSysClockFreq.part.0+0x38>
240075d2:	2a02      	cmp	r2, #2
240075d4:	d04e      	beq.n	24007674 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
240075d6:	b34a      	cbz	r2, 2400762c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240075d8:	ee07 0a90 	vmov	s15, r0
240075dc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 24007694 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
240075e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240075e6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
240075ea:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24007698 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
240075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
240075f2:	ee06 3a90 	vmov	s13, r3
240075f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240075fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240075fe:	ee76 6a85 	vadd.f32	s13, s13, s10
24007602:	eee7 6a25 	vfma.f32	s13, s14, s11
24007606:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400760a:	4b21      	ldr	r3, [pc, #132]	; (24007690 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
2400760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400760e:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007612:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007614:	ee07 3a90 	vmov	s15, r3
24007618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400761c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007624:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24007628:	bc30      	pop	{r4, r5}
2400762a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400762c:	681a      	ldr	r2, [r3, #0]
2400762e:	0692      	lsls	r2, r2, #26
24007630:	d527      	bpl.n	24007682 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007632:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007634:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007638:	4a18      	ldr	r2, [pc, #96]	; (2400769c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400763a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007640:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007648:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24007698 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
2400764c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007650:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007652:	ee06 3a90 	vmov	s13, r3
24007656:	ee05 2a90 	vmov	s11, r2
2400765a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400765e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007662:	ee76 6a86 	vadd.f32	s13, s13, s12
24007666:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400766a:	eee7 6a05 	vfma.f32	s13, s14, s10
2400766e:	ee66 6a26 	vmul.f32	s13, s12, s13
24007672:	e7ca      	b.n	2400760a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007674:	ee07 0a90 	vmov	s15, r0
24007678:	eddf 6a09 	vldr	s13, [pc, #36]	; 240076a0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
2400767c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007680:	e7b0      	b.n	240075e4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007682:	ee07 0a90 	vmov	s15, r0
24007686:	eddf 6a07 	vldr	s13, [pc, #28]	; 240076a4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
2400768a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400768e:	e7a9      	b.n	240075e4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
24007690:	58024400 	.word	0x58024400
24007694:	4a742400 	.word	0x4a742400
24007698:	39000000 	.word	0x39000000
2400769c:	03d09000 	.word	0x03d09000
240076a0:	4b742400 	.word	0x4b742400
240076a4:	4c742400 	.word	0x4c742400

240076a8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
240076a8:	2800      	cmp	r0, #0
240076aa:	f000 81ef 	beq.w	24007a8c <HAL_RCC_OscConfig+0x3e4>
{
240076ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240076b0:	6803      	ldr	r3, [r0, #0]
240076b2:	4604      	mov	r4, r0
240076b4:	07d9      	lsls	r1, r3, #31
240076b6:	d52e      	bpl.n	24007716 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240076b8:	49a4      	ldr	r1, [pc, #656]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
240076ba:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240076bc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240076be:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240076c2:	2a10      	cmp	r2, #16
240076c4:	f000 8107 	beq.w	240078d6 <HAL_RCC_OscConfig+0x22e>
240076c8:	2a18      	cmp	r2, #24
240076ca:	f000 80ff 	beq.w	240078cc <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240076ce:	6863      	ldr	r3, [r4, #4]
240076d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240076d4:	f000 812a 	beq.w	2400792c <HAL_RCC_OscConfig+0x284>
240076d8:	2b00      	cmp	r3, #0
240076da:	f040 8188 	bne.w	240079ee <HAL_RCC_OscConfig+0x346>
240076de:	4b9b      	ldr	r3, [pc, #620]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
240076e0:	681a      	ldr	r2, [r3, #0]
240076e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240076e6:	601a      	str	r2, [r3, #0]
240076e8:	681a      	ldr	r2, [r3, #0]
240076ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240076ee:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
240076f0:	6863      	ldr	r3, [r4, #4]
240076f2:	2b00      	cmp	r3, #0
240076f4:	f000 815c 	beq.w	240079b0 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
240076f8:	f7fd f9ec 	bl	24004ad4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240076fc:	4e93      	ldr	r6, [pc, #588]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
240076fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007700:	e005      	b.n	2400770e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007702:	f7fd f9e7 	bl	24004ad4 <HAL_GetTick>
24007706:	1b40      	subs	r0, r0, r5
24007708:	2864      	cmp	r0, #100	; 0x64
2400770a:	f200 814f 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400770e:	6833      	ldr	r3, [r6, #0]
24007710:	039b      	lsls	r3, r3, #14
24007712:	d5f6      	bpl.n	24007702 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007714:	6823      	ldr	r3, [r4, #0]
24007716:	079d      	lsls	r5, r3, #30
24007718:	f100 808a 	bmi.w	24007830 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400771c:	06d9      	lsls	r1, r3, #27
2400771e:	d533      	bpl.n	24007788 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007720:	4a8a      	ldr	r2, [pc, #552]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
24007722:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007724:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007726:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2400772a:	2b08      	cmp	r3, #8
2400772c:	f000 80e3 	beq.w	240078f6 <HAL_RCC_OscConfig+0x24e>
24007730:	2b18      	cmp	r3, #24
24007732:	f000 80db 	beq.w	240078ec <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007736:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007738:	4d84      	ldr	r5, [pc, #528]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2400773a:	2b00      	cmp	r3, #0
2400773c:	f000 8176 	beq.w	24007a2c <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
24007740:	682b      	ldr	r3, [r5, #0]
24007742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007746:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007748:	f7fd f9c4 	bl	24004ad4 <HAL_GetTick>
2400774c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400774e:	e005      	b.n	2400775c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007750:	f7fd f9c0 	bl	24004ad4 <HAL_GetTick>
24007754:	1b80      	subs	r0, r0, r6
24007756:	2802      	cmp	r0, #2
24007758:	f200 8128 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400775c:	682b      	ldr	r3, [r5, #0]
2400775e:	05db      	lsls	r3, r3, #23
24007760:	d5f6      	bpl.n	24007750 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007762:	f7fd f9cf 	bl	24004b04 <HAL_GetREVID>
24007766:	f241 0303 	movw	r3, #4099	; 0x1003
2400776a:	4298      	cmp	r0, r3
2400776c:	f200 8266 	bhi.w	24007c3c <HAL_RCC_OscConfig+0x594>
24007770:	6a22      	ldr	r2, [r4, #32]
24007772:	686b      	ldr	r3, [r5, #4]
24007774:	2a20      	cmp	r2, #32
24007776:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400777a:	bf0c      	ite	eq
2400777c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24007780:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24007784:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007786:	6823      	ldr	r3, [r4, #0]
24007788:	071d      	lsls	r5, r3, #28
2400778a:	d516      	bpl.n	240077ba <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2400778c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
2400778e:	4d6f      	ldr	r5, [pc, #444]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007790:	2b00      	cmp	r3, #0
24007792:	f000 811b 	beq.w	240079cc <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
24007796:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007798:	f043 0301 	orr.w	r3, r3, #1
2400779c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
2400779e:	f7fd f999 	bl	24004ad4 <HAL_GetTick>
240077a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240077a4:	e005      	b.n	240077b2 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240077a6:	f7fd f995 	bl	24004ad4 <HAL_GetTick>
240077aa:	1b80      	subs	r0, r0, r6
240077ac:	2802      	cmp	r0, #2
240077ae:	f200 80fd 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240077b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240077b4:	0798      	lsls	r0, r3, #30
240077b6:	d5f6      	bpl.n	240077a6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
240077b8:	6823      	ldr	r3, [r4, #0]
240077ba:	069a      	lsls	r2, r3, #26
240077bc:	d516      	bpl.n	240077ec <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240077be:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
240077c0:	4d62      	ldr	r5, [pc, #392]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240077c2:	2b00      	cmp	r3, #0
240077c4:	f000 8121 	beq.w	24007a0a <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
240077c8:	682b      	ldr	r3, [r5, #0]
240077ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240077ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240077d0:	f7fd f980 	bl	24004ad4 <HAL_GetTick>
240077d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240077d6:	e005      	b.n	240077e4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
240077d8:	f7fd f97c 	bl	24004ad4 <HAL_GetTick>
240077dc:	1b80      	subs	r0, r0, r6
240077de:	2802      	cmp	r0, #2
240077e0:	f200 80e4 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240077e4:	682b      	ldr	r3, [r5, #0]
240077e6:	049f      	lsls	r7, r3, #18
240077e8:	d5f6      	bpl.n	240077d8 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
240077ea:	6823      	ldr	r3, [r4, #0]
240077ec:	0759      	lsls	r1, r3, #29
240077ee:	f100 80a3 	bmi.w	24007938 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240077f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
240077f4:	b1d0      	cbz	r0, 2400782c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240077f6:	4d55      	ldr	r5, [pc, #340]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
240077f8:	692b      	ldr	r3, [r5, #16]
240077fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
240077fe:	2b18      	cmp	r3, #24
24007800:	f000 81b6 	beq.w	24007b70 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24007804:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007806:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400780c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400780e:	f000 8149 	beq.w	24007aa4 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
24007812:	f7fd f95f 	bl	24004ad4 <HAL_GetTick>
24007816:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007818:	e005      	b.n	24007826 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400781a:	f7fd f95b 	bl	24004ad4 <HAL_GetTick>
2400781e:	1b00      	subs	r0, r0, r4
24007820:	2802      	cmp	r0, #2
24007822:	f200 80c3 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007826:	682b      	ldr	r3, [r5, #0]
24007828:	019b      	lsls	r3, r3, #6
2400782a:	d4f6      	bmi.n	2400781a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
2400782c:	2000      	movs	r0, #0
}
2400782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007830:	4a46      	ldr	r2, [pc, #280]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
24007832:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007834:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007836:	f013 0338 	ands.w	r3, r3, #56	; 0x38
2400783a:	d12d      	bne.n	24007898 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400783c:	4b43      	ldr	r3, [pc, #268]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
2400783e:	68e2      	ldr	r2, [r4, #12]
24007840:	681b      	ldr	r3, [r3, #0]
24007842:	0759      	lsls	r1, r3, #29
24007844:	d501      	bpl.n	2400784a <HAL_RCC_OscConfig+0x1a2>
24007846:	2a00      	cmp	r2, #0
24007848:	d04e      	beq.n	240078e8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400784a:	4d40      	ldr	r5, [pc, #256]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
2400784c:	682b      	ldr	r3, [r5, #0]
2400784e:	f023 0319 	bic.w	r3, r3, #25
24007852:	4313      	orrs	r3, r2
24007854:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007856:	f7fd f93d 	bl	24004ad4 <HAL_GetTick>
2400785a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400785c:	e005      	b.n	2400786a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400785e:	f7fd f939 	bl	24004ad4 <HAL_GetTick>
24007862:	1b80      	subs	r0, r0, r6
24007864:	2802      	cmp	r0, #2
24007866:	f200 80a1 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400786a:	682b      	ldr	r3, [r5, #0]
2400786c:	075b      	lsls	r3, r3, #29
2400786e:	d5f6      	bpl.n	2400785e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007870:	f7fd f948 	bl	24004b04 <HAL_GetREVID>
24007874:	f241 0303 	movw	r3, #4099	; 0x1003
24007878:	4298      	cmp	r0, r3
2400787a:	f200 80fe 	bhi.w	24007a7a <HAL_RCC_OscConfig+0x3d2>
2400787e:	6922      	ldr	r2, [r4, #16]
24007880:	686b      	ldr	r3, [r5, #4]
24007882:	2a40      	cmp	r2, #64	; 0x40
24007884:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007888:	bf0c      	ite	eq
2400788a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
2400788e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24007892:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007894:	6823      	ldr	r3, [r4, #0]
24007896:	e741      	b.n	2400771c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007898:	2b18      	cmp	r3, #24
2400789a:	f000 80ea 	beq.w	24007a72 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400789e:	4d2b      	ldr	r5, [pc, #172]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240078a0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240078a2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240078a4:	2a00      	cmp	r2, #0
240078a6:	f000 80d3 	beq.w	24007a50 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240078aa:	f023 0319 	bic.w	r3, r3, #25
240078ae:	4313      	orrs	r3, r2
240078b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240078b2:	f7fd f90f 	bl	24004ad4 <HAL_GetTick>
240078b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240078b8:	e004      	b.n	240078c4 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240078ba:	f7fd f90b 	bl	24004ad4 <HAL_GetTick>
240078be:	1b80      	subs	r0, r0, r6
240078c0:	2802      	cmp	r0, #2
240078c2:	d873      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240078c4:	682b      	ldr	r3, [r5, #0]
240078c6:	075f      	lsls	r7, r3, #29
240078c8:	d5f7      	bpl.n	240078ba <HAL_RCC_OscConfig+0x212>
240078ca:	e7d1      	b.n	24007870 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240078cc:	f001 0103 	and.w	r1, r1, #3
240078d0:	2902      	cmp	r1, #2
240078d2:	f47f aefc 	bne.w	240076ce <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240078d6:	4a1d      	ldr	r2, [pc, #116]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
240078d8:	6812      	ldr	r2, [r2, #0]
240078da:	0392      	lsls	r2, r2, #14
240078dc:	f57f af1b 	bpl.w	24007716 <HAL_RCC_OscConfig+0x6e>
240078e0:	6862      	ldr	r2, [r4, #4]
240078e2:	2a00      	cmp	r2, #0
240078e4:	f47f af17 	bne.w	24007716 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
240078e8:	2001      	movs	r0, #1
}
240078ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240078ec:	f002 0203 	and.w	r2, r2, #3
240078f0:	2a01      	cmp	r2, #1
240078f2:	f47f af20 	bne.w	24007736 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
240078f6:	4b15      	ldr	r3, [pc, #84]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
240078f8:	681b      	ldr	r3, [r3, #0]
240078fa:	05da      	lsls	r2, r3, #23
240078fc:	d502      	bpl.n	24007904 <HAL_RCC_OscConfig+0x25c>
240078fe:	69e3      	ldr	r3, [r4, #28]
24007900:	2b80      	cmp	r3, #128	; 0x80
24007902:	d1f1      	bne.n	240078e8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007904:	f7fd f8fe 	bl	24004b04 <HAL_GetREVID>
24007908:	f241 0303 	movw	r3, #4099	; 0x1003
2400790c:	4298      	cmp	r0, r3
2400790e:	f200 80bf 	bhi.w	24007a90 <HAL_RCC_OscConfig+0x3e8>
24007912:	6a22      	ldr	r2, [r4, #32]
24007914:	2a20      	cmp	r2, #32
24007916:	f000 81ad 	beq.w	24007c74 <HAL_RCC_OscConfig+0x5cc>
2400791a:	490c      	ldr	r1, [pc, #48]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
2400791c:	684b      	ldr	r3, [r1, #4]
2400791e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007922:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24007926:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007928:	6823      	ldr	r3, [r4, #0]
2400792a:	e72d      	b.n	24007788 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400792c:	4a07      	ldr	r2, [pc, #28]	; (2400794c <HAL_RCC_OscConfig+0x2a4>)
2400792e:	6813      	ldr	r3, [r2, #0]
24007930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007934:	6013      	str	r3, [r2, #0]
24007936:	e6db      	b.n	240076f0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24007938:	4d05      	ldr	r5, [pc, #20]	; (24007950 <HAL_RCC_OscConfig+0x2a8>)
2400793a:	682b      	ldr	r3, [r5, #0]
2400793c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007940:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24007942:	f7fd f8c7 	bl	24004ad4 <HAL_GetTick>
24007946:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007948:	e009      	b.n	2400795e <HAL_RCC_OscConfig+0x2b6>
2400794a:	bf00      	nop
2400794c:	58024400 	.word	0x58024400
24007950:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007954:	f7fd f8be 	bl	24004ad4 <HAL_GetTick>
24007958:	1b80      	subs	r0, r0, r6
2400795a:	2864      	cmp	r0, #100	; 0x64
2400795c:	d826      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400795e:	682b      	ldr	r3, [r5, #0]
24007960:	05da      	lsls	r2, r3, #23
24007962:	d5f7      	bpl.n	24007954 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007964:	68a3      	ldr	r3, [r4, #8]
24007966:	2b01      	cmp	r3, #1
24007968:	f000 8171 	beq.w	24007c4e <HAL_RCC_OscConfig+0x5a6>
2400796c:	2b00      	cmp	r3, #0
2400796e:	f040 8174 	bne.w	24007c5a <HAL_RCC_OscConfig+0x5b2>
24007972:	4baa      	ldr	r3, [pc, #680]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
24007974:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007976:	f022 0201 	bic.w	r2, r2, #1
2400797a:	671a      	str	r2, [r3, #112]	; 0x70
2400797c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400797e:	f022 0204 	bic.w	r2, r2, #4
24007982:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24007984:	68a3      	ldr	r3, [r4, #8]
24007986:	2b00      	cmp	r3, #0
24007988:	f000 8140 	beq.w	24007c0c <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
2400798c:	f7fd f8a2 	bl	24004ad4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007990:	4ea2      	ldr	r6, [pc, #648]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007992:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007996:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007998:	e004      	b.n	240079a4 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400799a:	f7fd f89b 	bl	24004ad4 <HAL_GetTick>
2400799e:	1b40      	subs	r0, r0, r5
240079a0:	42b8      	cmp	r0, r7
240079a2:	d803      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240079a4:	6f33      	ldr	r3, [r6, #112]	; 0x70
240079a6:	079b      	lsls	r3, r3, #30
240079a8:	d5f7      	bpl.n	2400799a <HAL_RCC_OscConfig+0x2f2>
240079aa:	e722      	b.n	240077f2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
240079ac:	2003      	movs	r0, #3
}
240079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
240079b0:	f7fd f890 	bl	24004ad4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240079b4:	4e99      	ldr	r6, [pc, #612]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
240079b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240079b8:	e004      	b.n	240079c4 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240079ba:	f7fd f88b 	bl	24004ad4 <HAL_GetTick>
240079be:	1b40      	subs	r0, r0, r5
240079c0:	2864      	cmp	r0, #100	; 0x64
240079c2:	d8f3      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240079c4:	6833      	ldr	r3, [r6, #0]
240079c6:	039f      	lsls	r7, r3, #14
240079c8:	d4f7      	bmi.n	240079ba <HAL_RCC_OscConfig+0x312>
240079ca:	e6a3      	b.n	24007714 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
240079cc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240079ce:	f023 0301 	bic.w	r3, r3, #1
240079d2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
240079d4:	f7fd f87e 	bl	24004ad4 <HAL_GetTick>
240079d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240079da:	e004      	b.n	240079e6 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240079dc:	f7fd f87a 	bl	24004ad4 <HAL_GetTick>
240079e0:	1b80      	subs	r0, r0, r6
240079e2:	2802      	cmp	r0, #2
240079e4:	d8e2      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
240079e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240079e8:	0799      	lsls	r1, r3, #30
240079ea:	d4f7      	bmi.n	240079dc <HAL_RCC_OscConfig+0x334>
240079ec:	e6e4      	b.n	240077b8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240079ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240079f2:	4b8a      	ldr	r3, [pc, #552]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
240079f4:	681a      	ldr	r2, [r3, #0]
240079f6:	f47f ae74 	bne.w	240076e2 <HAL_RCC_OscConfig+0x3a>
240079fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
240079fe:	601a      	str	r2, [r3, #0]
24007a00:	681a      	ldr	r2, [r3, #0]
24007a02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007a06:	601a      	str	r2, [r3, #0]
24007a08:	e672      	b.n	240076f0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24007a0a:	682b      	ldr	r3, [r5, #0]
24007a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24007a10:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24007a12:	f7fd f85f 	bl	24004ad4 <HAL_GetTick>
24007a16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007a18:	e004      	b.n	24007a24 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007a1a:	f7fd f85b 	bl	24004ad4 <HAL_GetTick>
24007a1e:	1b80      	subs	r0, r0, r6
24007a20:	2802      	cmp	r0, #2
24007a22:	d8c3      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007a24:	682b      	ldr	r3, [r5, #0]
24007a26:	0498      	lsls	r0, r3, #18
24007a28:	d4f7      	bmi.n	24007a1a <HAL_RCC_OscConfig+0x372>
24007a2a:	e6de      	b.n	240077ea <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24007a2c:	682b      	ldr	r3, [r5, #0]
24007a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24007a32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007a34:	f7fd f84e 	bl	24004ad4 <HAL_GetTick>
24007a38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007a3a:	e004      	b.n	24007a46 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007a3c:	f7fd f84a 	bl	24004ad4 <HAL_GetTick>
24007a40:	1b80      	subs	r0, r0, r6
24007a42:	2802      	cmp	r0, #2
24007a44:	d8b2      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007a46:	682b      	ldr	r3, [r5, #0]
24007a48:	05df      	lsls	r7, r3, #23
24007a4a:	d4f7      	bmi.n	24007a3c <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007a4c:	6823      	ldr	r3, [r4, #0]
24007a4e:	e69b      	b.n	24007788 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
24007a50:	f023 0301 	bic.w	r3, r3, #1
24007a54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007a56:	f7fd f83d 	bl	24004ad4 <HAL_GetTick>
24007a5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007a5c:	e004      	b.n	24007a68 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007a5e:	f7fd f839 	bl	24004ad4 <HAL_GetTick>
24007a62:	1b80      	subs	r0, r0, r6
24007a64:	2802      	cmp	r0, #2
24007a66:	d8a1      	bhi.n	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007a68:	682b      	ldr	r3, [r5, #0]
24007a6a:	0758      	lsls	r0, r3, #29
24007a6c:	d4f7      	bmi.n	24007a5e <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007a6e:	6823      	ldr	r3, [r4, #0]
24007a70:	e654      	b.n	2400771c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007a72:	0790      	lsls	r0, r2, #30
24007a74:	f47f af13 	bne.w	2400789e <HAL_RCC_OscConfig+0x1f6>
24007a78:	e6e0      	b.n	2400783c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007a7a:	686b      	ldr	r3, [r5, #4]
24007a7c:	6922      	ldr	r2, [r4, #16]
24007a7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24007a82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007a86:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007a88:	6823      	ldr	r3, [r4, #0]
24007a8a:	e647      	b.n	2400771c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24007a8c:	2001      	movs	r0, #1
}
24007a8e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007a90:	4a62      	ldr	r2, [pc, #392]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
24007a92:	6a21      	ldr	r1, [r4, #32]
24007a94:	68d3      	ldr	r3, [r2, #12]
24007a96:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007a9a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24007a9e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007aa0:	6823      	ldr	r3, [r4, #0]
24007aa2:	e671      	b.n	24007788 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24007aa4:	f7fd f816 	bl	24004ad4 <HAL_GetTick>
24007aa8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007aaa:	e005      	b.n	24007ab8 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007aac:	f7fd f812 	bl	24004ad4 <HAL_GetTick>
24007ab0:	1b80      	subs	r0, r0, r6
24007ab2:	2802      	cmp	r0, #2
24007ab4:	f63f af7a 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007ab8:	682b      	ldr	r3, [r5, #0]
24007aba:	0199      	lsls	r1, r3, #6
24007abc:	d4f6      	bmi.n	24007aac <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007abe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24007ac0:	4b57      	ldr	r3, [pc, #348]	; (24007c20 <HAL_RCC_OscConfig+0x578>)
24007ac2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24007ac4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007ac6:	4957      	ldr	r1, [pc, #348]	; (24007c24 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007ac8:	4e54      	ldr	r6, [pc, #336]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007aca:	4313      	orrs	r3, r2
24007acc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007ace:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24007ad2:	62ab      	str	r3, [r5, #40]	; 0x28
24007ad4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24007ad8:	3b01      	subs	r3, #1
24007ada:	3a01      	subs	r2, #1
24007adc:	025b      	lsls	r3, r3, #9
24007ade:	0412      	lsls	r2, r2, #16
24007ae0:	b29b      	uxth	r3, r3
24007ae2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007ae6:	4313      	orrs	r3, r2
24007ae8:	6b22      	ldr	r2, [r4, #48]	; 0x30
24007aea:	3a01      	subs	r2, #1
24007aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007af0:	4313      	orrs	r3, r2
24007af2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24007af4:	3a01      	subs	r2, #1
24007af6:	0612      	lsls	r2, r2, #24
24007af8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007afc:	4313      	orrs	r3, r2
24007afe:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24007b00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b02:	f023 0301 	bic.w	r3, r3, #1
24007b06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007b08:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24007b0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24007b0c:	4011      	ands	r1, r2
24007b0e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
24007b12:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24007b14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
24007b18:	f023 030c 	bic.w	r3, r3, #12
24007b1c:	4313      	orrs	r3, r2
24007b1e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24007b20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b22:	6c62      	ldr	r2, [r4, #68]	; 0x44
24007b24:	f023 0302 	bic.w	r3, r3, #2
24007b28:	4313      	orrs	r3, r2
24007b2a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24007b2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007b32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007b34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007b3a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24007b3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24007b42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24007b44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007b46:	f043 0301 	orr.w	r3, r3, #1
24007b4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24007b4c:	682b      	ldr	r3, [r5, #0]
24007b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24007b52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007b54:	f7fc ffbe 	bl	24004ad4 <HAL_GetTick>
24007b58:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007b5a:	e005      	b.n	24007b68 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007b5c:	f7fc ffba 	bl	24004ad4 <HAL_GetTick>
24007b60:	1b00      	subs	r0, r0, r4
24007b62:	2802      	cmp	r0, #2
24007b64:	f63f af22 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007b68:	6833      	ldr	r3, [r6, #0]
24007b6a:	019a      	lsls	r2, r3, #6
24007b6c:	d5f6      	bpl.n	24007b5c <HAL_RCC_OscConfig+0x4b4>
24007b6e:	e65d      	b.n	2400782c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007b70:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
24007b72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24007b74:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007b76:	f43f ae5a 	beq.w	2400782e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007b7a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007b7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24007b80:	428b      	cmp	r3, r1
24007b82:	f47f aeb1 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007b86:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007b8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007b8c:	429a      	cmp	r2, r3
24007b8e:	f47f aeab 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007b92:	6b23      	ldr	r3, [r4, #48]	; 0x30
24007b94:	f3c6 0208 	ubfx	r2, r6, #0, #9
24007b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007b9a:	429a      	cmp	r2, r3
24007b9c:	f47f aea4 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007ba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
24007ba2:	f3c6 2246 	ubfx	r2, r6, #9, #7
24007ba6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007ba8:	429a      	cmp	r2, r3
24007baa:	f47f ae9d 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007bb0:	f3c6 4206 	ubfx	r2, r6, #16, #7
24007bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007bb6:	429a      	cmp	r2, r3
24007bb8:	f47f ae96 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24007bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24007bbe:	f3c6 6606 	ubfx	r6, r6, #24, #7
24007bc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007bc4:	429e      	cmp	r6, r3
24007bc6:	f47f ae8f 	bne.w	240078e8 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007bca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007bcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007bce:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007bd2:	429a      	cmp	r2, r3
24007bd4:	f43f ae2a 	beq.w	2400782c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
24007bd8:	4a10      	ldr	r2, [pc, #64]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
24007bda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007bdc:	f023 0301 	bic.w	r3, r3, #1
24007be0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
24007be2:	f7fc ff77 	bl	24004ad4 <HAL_GetTick>
24007be6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24007be8:	f7fc ff74 	bl	24004ad4 <HAL_GetTick>
24007bec:	42a8      	cmp	r0, r5
24007bee:	d0fb      	beq.n	24007be8 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007bf0:	4a0a      	ldr	r2, [pc, #40]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
24007bf2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007bf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24007bf6:	4b0b      	ldr	r3, [pc, #44]	; (24007c24 <HAL_RCC_OscConfig+0x57c>)
24007bf8:	6b54      	ldr	r4, [r2, #52]	; 0x34
24007bfa:	4023      	ands	r3, r4
24007bfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24007c00:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24007c02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007c04:	f043 0301 	orr.w	r3, r3, #1
24007c08:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24007c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24007c0c:	f7fc ff62 	bl	24004ad4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007c10:	4e02      	ldr	r6, [pc, #8]	; (24007c1c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007c12:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007c16:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007c18:	e00c      	b.n	24007c34 <HAL_RCC_OscConfig+0x58c>
24007c1a:	bf00      	nop
24007c1c:	58024400 	.word	0x58024400
24007c20:	fffffc0c 	.word	0xfffffc0c
24007c24:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007c28:	f7fc ff54 	bl	24004ad4 <HAL_GetTick>
24007c2c:	1b40      	subs	r0, r0, r5
24007c2e:	42b8      	cmp	r0, r7
24007c30:	f63f aebc 	bhi.w	240079ac <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007c34:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007c36:	0798      	lsls	r0, r3, #30
24007c38:	d4f6      	bmi.n	24007c28 <HAL_RCC_OscConfig+0x580>
24007c3a:	e5da      	b.n	240077f2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007c3c:	68eb      	ldr	r3, [r5, #12]
24007c3e:	6a22      	ldr	r2, [r4, #32]
24007c40:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007c44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007c48:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007c4a:	6823      	ldr	r3, [r4, #0]
24007c4c:	e59c      	b.n	24007788 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007c4e:	4a0e      	ldr	r2, [pc, #56]	; (24007c88 <HAL_RCC_OscConfig+0x5e0>)
24007c50:	6f13      	ldr	r3, [r2, #112]	; 0x70
24007c52:	f043 0301 	orr.w	r3, r3, #1
24007c56:	6713      	str	r3, [r2, #112]	; 0x70
24007c58:	e694      	b.n	24007984 <HAL_RCC_OscConfig+0x2dc>
24007c5a:	2b05      	cmp	r3, #5
24007c5c:	4b0a      	ldr	r3, [pc, #40]	; (24007c88 <HAL_RCC_OscConfig+0x5e0>)
24007c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007c60:	f47f ae89 	bne.w	24007976 <HAL_RCC_OscConfig+0x2ce>
24007c64:	f042 0204 	orr.w	r2, r2, #4
24007c68:	671a      	str	r2, [r3, #112]	; 0x70
24007c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007c6c:	f042 0201 	orr.w	r2, r2, #1
24007c70:	671a      	str	r2, [r3, #112]	; 0x70
24007c72:	e687      	b.n	24007984 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007c74:	4a04      	ldr	r2, [pc, #16]	; (24007c88 <HAL_RCC_OscConfig+0x5e0>)
24007c76:	6853      	ldr	r3, [r2, #4]
24007c78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007c7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24007c80:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007c82:	6823      	ldr	r3, [r4, #0]
24007c84:	e580      	b.n	24007788 <HAL_RCC_OscConfig+0xe0>
24007c86:	bf00      	nop
24007c88:	58024400 	.word	0x58024400

24007c8c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c8c:	4a47      	ldr	r2, [pc, #284]	; (24007dac <HAL_RCC_GetSysClockFreq+0x120>)
24007c8e:	6913      	ldr	r3, [r2, #16]
24007c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c94:	2b10      	cmp	r3, #16
24007c96:	d004      	beq.n	24007ca2 <HAL_RCC_GetSysClockFreq+0x16>
24007c98:	2b18      	cmp	r3, #24
24007c9a:	d00d      	beq.n	24007cb8 <HAL_RCC_GetSysClockFreq+0x2c>
24007c9c:	b11b      	cbz	r3, 24007ca6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
24007c9e:	4844      	ldr	r0, [pc, #272]	; (24007db0 <HAL_RCC_GetSysClockFreq+0x124>)
24007ca0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007ca2:	4844      	ldr	r0, [pc, #272]	; (24007db4 <HAL_RCC_GetSysClockFreq+0x128>)
24007ca4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007ca6:	6813      	ldr	r3, [r2, #0]
24007ca8:	0699      	lsls	r1, r3, #26
24007caa:	d54a      	bpl.n	24007d42 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cac:	6813      	ldr	r3, [r2, #0]
24007cae:	4842      	ldr	r0, [pc, #264]	; (24007db8 <HAL_RCC_GetSysClockFreq+0x12c>)
24007cb0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007cb4:	40d8      	lsrs	r0, r3
24007cb6:	4770      	bx	lr
{
24007cb8:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007cba:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007cbc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007cbe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
24007cc0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007cc4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007cc6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007cca:	d038      	beq.n	24007d3e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007ccc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007cd0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007cd4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007cd8:	fb05 f101 	mul.w	r1, r5, r1
24007cdc:	2b01      	cmp	r3, #1
24007cde:	ee07 1a90 	vmov	s15, r1
24007ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24007ce6:	d002      	beq.n	24007cee <HAL_RCC_GetSysClockFreq+0x62>
24007ce8:	2b02      	cmp	r3, #2
24007cea:	d02c      	beq.n	24007d46 <HAL_RCC_GetSysClockFreq+0xba>
24007cec:	b393      	cbz	r3, 24007d54 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007cee:	ee07 0a90 	vmov	s15, r0
24007cf2:	eddf 6a32 	vldr	s13, [pc, #200]	; 24007dbc <HAL_RCC_GetSysClockFreq+0x130>
24007cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
24007cfc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24007d00:	eddf 5a2f 	vldr	s11, [pc, #188]	; 24007dc0 <HAL_RCC_GetSysClockFreq+0x134>
24007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007d08:	ee06 3a90 	vmov	s13, r3
24007d0c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24007d10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007d14:	ee76 6a85 	vadd.f32	s13, s13, s10
24007d18:	eee7 6a25 	vfma.f32	s13, s14, s11
24007d1c:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007d20:	4b22      	ldr	r3, [pc, #136]	; (24007dac <HAL_RCC_GetSysClockFreq+0x120>)
24007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007d24:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007d28:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007d2a:	ee07 3a90 	vmov	s15, r3
24007d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007d3a:	ee17 0a90 	vmov	r0, s15
}
24007d3e:	bc30      	pop	{r4, r5}
24007d40:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
24007d42:	481d      	ldr	r0, [pc, #116]	; (24007db8 <HAL_RCC_GetSysClockFreq+0x12c>)
}
24007d44:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d46:	ee07 0a90 	vmov	s15, r0
24007d4a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 24007dc4 <HAL_RCC_GetSysClockFreq+0x138>
24007d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007d52:	e7d2      	b.n	24007cfa <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007d54:	6813      	ldr	r3, [r2, #0]
24007d56:	069b      	lsls	r3, r3, #26
24007d58:	d520      	bpl.n	24007d9c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d5a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d5c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d60:	4915      	ldr	r1, [pc, #84]	; (24007db8 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d62:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24007d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d68:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007d70:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24007dc0 <HAL_RCC_GetSysClockFreq+0x134>
24007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d78:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d7a:	ee06 3a90 	vmov	s13, r3
24007d7e:	ee05 1a90 	vmov	s11, r1
24007d82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007d86:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007d8a:	ee76 6a86 	vadd.f32	s13, s13, s12
24007d8e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24007d92:	eee7 6a05 	vfma.f32	s13, s14, s10
24007d96:	ee66 6a26 	vmul.f32	s13, s12, s13
24007d9a:	e7c1      	b.n	24007d20 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007d9c:	ee07 0a90 	vmov	s15, r0
24007da0:	eddf 6a09 	vldr	s13, [pc, #36]	; 24007dc8 <HAL_RCC_GetSysClockFreq+0x13c>
24007da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007da8:	e7a7      	b.n	24007cfa <HAL_RCC_GetSysClockFreq+0x6e>
24007daa:	bf00      	nop
24007dac:	58024400 	.word	0x58024400
24007db0:	003d0900 	.word	0x003d0900
24007db4:	00f42400 	.word	0x00f42400
24007db8:	03d09000 	.word	0x03d09000
24007dbc:	4a742400 	.word	0x4a742400
24007dc0:	39000000 	.word	0x39000000
24007dc4:	4b742400 	.word	0x4b742400
24007dc8:	4c742400 	.word	0x4c742400

24007dcc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24007dcc:	2800      	cmp	r0, #0
24007dce:	f000 811a 	beq.w	24008006 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007dd2:	4a92      	ldr	r2, [pc, #584]	; (2400801c <HAL_RCC_ClockConfig+0x250>)
{
24007dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007dd8:	6813      	ldr	r3, [r2, #0]
24007dda:	4604      	mov	r4, r0
24007ddc:	460d      	mov	r5, r1
24007dde:	f003 030f 	and.w	r3, r3, #15
24007de2:	428b      	cmp	r3, r1
24007de4:	d20c      	bcs.n	24007e00 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007de6:	6813      	ldr	r3, [r2, #0]
24007de8:	f023 030f 	bic.w	r3, r3, #15
24007dec:	430b      	orrs	r3, r1
24007dee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007df0:	6813      	ldr	r3, [r2, #0]
24007df2:	f003 030f 	and.w	r3, r3, #15
24007df6:	428b      	cmp	r3, r1
24007df8:	d002      	beq.n	24007e00 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24007dfa:	2001      	movs	r0, #1
}
24007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007e00:	6823      	ldr	r3, [r4, #0]
24007e02:	075f      	lsls	r7, r3, #29
24007e04:	d50c      	bpl.n	24007e20 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007e06:	4986      	ldr	r1, [pc, #536]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007e08:	6920      	ldr	r0, [r4, #16]
24007e0a:	698a      	ldr	r2, [r1, #24]
24007e0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007e10:	4290      	cmp	r0, r2
24007e12:	d905      	bls.n	24007e20 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007e14:	698b      	ldr	r3, [r1, #24]
24007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007e1a:	4303      	orrs	r3, r0
24007e1c:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007e1e:	6823      	ldr	r3, [r4, #0]
24007e20:	071e      	lsls	r6, r3, #28
24007e22:	d50c      	bpl.n	24007e3e <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007e24:	497e      	ldr	r1, [pc, #504]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007e26:	6960      	ldr	r0, [r4, #20]
24007e28:	69ca      	ldr	r2, [r1, #28]
24007e2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007e2e:	4290      	cmp	r0, r2
24007e30:	d905      	bls.n	24007e3e <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007e32:	69cb      	ldr	r3, [r1, #28]
24007e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007e38:	4303      	orrs	r3, r0
24007e3a:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007e3c:	6823      	ldr	r3, [r4, #0]
24007e3e:	06d8      	lsls	r0, r3, #27
24007e40:	d50c      	bpl.n	24007e5c <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007e42:	4977      	ldr	r1, [pc, #476]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007e44:	69a0      	ldr	r0, [r4, #24]
24007e46:	69ca      	ldr	r2, [r1, #28]
24007e48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007e4c:	4290      	cmp	r0, r2
24007e4e:	d905      	bls.n	24007e5c <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007e50:	69cb      	ldr	r3, [r1, #28]
24007e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007e56:	4303      	orrs	r3, r0
24007e58:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007e5a:	6823      	ldr	r3, [r4, #0]
24007e5c:	0699      	lsls	r1, r3, #26
24007e5e:	d50c      	bpl.n	24007e7a <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007e60:	496f      	ldr	r1, [pc, #444]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007e62:	69e0      	ldr	r0, [r4, #28]
24007e64:	6a0a      	ldr	r2, [r1, #32]
24007e66:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007e6a:	4290      	cmp	r0, r2
24007e6c:	d905      	bls.n	24007e7a <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007e6e:	6a0b      	ldr	r3, [r1, #32]
24007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007e74:	4303      	orrs	r3, r0
24007e76:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007e78:	6823      	ldr	r3, [r4, #0]
24007e7a:	079a      	lsls	r2, r3, #30
24007e7c:	f140 8083 	bpl.w	24007f86 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007e80:	4867      	ldr	r0, [pc, #412]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007e82:	68e1      	ldr	r1, [r4, #12]
24007e84:	6982      	ldr	r2, [r0, #24]
24007e86:	f002 020f 	and.w	r2, r2, #15
24007e8a:	4291      	cmp	r1, r2
24007e8c:	f240 80a9 	bls.w	24007fe2 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007e90:	6983      	ldr	r3, [r0, #24]
24007e92:	f023 030f 	bic.w	r3, r3, #15
24007e96:	4319      	orrs	r1, r3
24007e98:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007e9a:	6823      	ldr	r3, [r4, #0]
24007e9c:	07df      	lsls	r7, r3, #31
24007e9e:	d474      	bmi.n	24007f8a <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007ea0:	079f      	lsls	r7, r3, #30
24007ea2:	d507      	bpl.n	24007eb4 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007ea4:	4a5e      	ldr	r2, [pc, #376]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007ea6:	68e1      	ldr	r1, [r4, #12]
24007ea8:	6993      	ldr	r3, [r2, #24]
24007eaa:	f003 030f 	and.w	r3, r3, #15
24007eae:	428b      	cmp	r3, r1
24007eb0:	f200 80a0 	bhi.w	24007ff4 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007eb4:	4a59      	ldr	r2, [pc, #356]	; (2400801c <HAL_RCC_ClockConfig+0x250>)
24007eb6:	6813      	ldr	r3, [r2, #0]
24007eb8:	f003 030f 	and.w	r3, r3, #15
24007ebc:	42ab      	cmp	r3, r5
24007ebe:	d909      	bls.n	24007ed4 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007ec0:	6813      	ldr	r3, [r2, #0]
24007ec2:	f023 030f 	bic.w	r3, r3, #15
24007ec6:	432b      	orrs	r3, r5
24007ec8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007eca:	6813      	ldr	r3, [r2, #0]
24007ecc:	f003 030f 	and.w	r3, r3, #15
24007ed0:	42ab      	cmp	r3, r5
24007ed2:	d192      	bne.n	24007dfa <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007ed4:	6823      	ldr	r3, [r4, #0]
24007ed6:	075e      	lsls	r6, r3, #29
24007ed8:	d50c      	bpl.n	24007ef4 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007eda:	4951      	ldr	r1, [pc, #324]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007edc:	6920      	ldr	r0, [r4, #16]
24007ede:	698a      	ldr	r2, [r1, #24]
24007ee0:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007ee4:	4290      	cmp	r0, r2
24007ee6:	d205      	bcs.n	24007ef4 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007ee8:	698b      	ldr	r3, [r1, #24]
24007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007eee:	4303      	orrs	r3, r0
24007ef0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007ef2:	6823      	ldr	r3, [r4, #0]
24007ef4:	071d      	lsls	r5, r3, #28
24007ef6:	d50c      	bpl.n	24007f12 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007ef8:	4949      	ldr	r1, [pc, #292]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007efa:	6960      	ldr	r0, [r4, #20]
24007efc:	69ca      	ldr	r2, [r1, #28]
24007efe:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007f02:	4290      	cmp	r0, r2
24007f04:	d205      	bcs.n	24007f12 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007f06:	69cb      	ldr	r3, [r1, #28]
24007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007f0c:	4303      	orrs	r3, r0
24007f0e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007f10:	6823      	ldr	r3, [r4, #0]
24007f12:	06d8      	lsls	r0, r3, #27
24007f14:	d50c      	bpl.n	24007f30 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007f16:	4942      	ldr	r1, [pc, #264]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007f18:	69a0      	ldr	r0, [r4, #24]
24007f1a:	69ca      	ldr	r2, [r1, #28]
24007f1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007f20:	4290      	cmp	r0, r2
24007f22:	d205      	bcs.n	24007f30 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007f24:	69cb      	ldr	r3, [r1, #28]
24007f26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007f2a:	4303      	orrs	r3, r0
24007f2c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007f2e:	6823      	ldr	r3, [r4, #0]
24007f30:	0699      	lsls	r1, r3, #26
24007f32:	d50b      	bpl.n	24007f4c <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007f34:	4a3a      	ldr	r2, [pc, #232]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007f36:	69e1      	ldr	r1, [r4, #28]
24007f38:	6a13      	ldr	r3, [r2, #32]
24007f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007f3e:	4299      	cmp	r1, r3
24007f40:	d204      	bcs.n	24007f4c <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007f42:	6a13      	ldr	r3, [r2, #32]
24007f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007f48:	430b      	orrs	r3, r1
24007f4a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007f4c:	f7ff fe9e 	bl	24007c8c <HAL_RCC_GetSysClockFreq>
24007f50:	4a33      	ldr	r2, [pc, #204]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007f52:	4603      	mov	r3, r0
24007f54:	4833      	ldr	r0, [pc, #204]	; (24008024 <HAL_RCC_ClockConfig+0x258>)
24007f56:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007f58:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007f5a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
24007f5e:	4d32      	ldr	r5, [pc, #200]	; (24008028 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007f60:	f002 020f 	and.w	r2, r2, #15
24007f64:	4c31      	ldr	r4, [pc, #196]	; (2400802c <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007f66:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007f68:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007f6a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
24007f6e:	4830      	ldr	r0, [pc, #192]	; (24008030 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007f70:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007f74:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
24007f76:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
24007f78:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007f7a:	40d3      	lsrs	r3, r2
24007f7c:	6023      	str	r3, [r4, #0]
}
24007f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24007f82:	f7fc bd45 	b.w	24004a10 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007f86:	07db      	lsls	r3, r3, #31
24007f88:	d594      	bpl.n	24007eb4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24007f8a:	4a25      	ldr	r2, [pc, #148]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007f8c:	68a1      	ldr	r1, [r4, #8]
24007f8e:	6993      	ldr	r3, [r2, #24]
24007f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24007f94:	430b      	orrs	r3, r1
24007f96:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007f98:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007f9a:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007f9c:	2902      	cmp	r1, #2
24007f9e:	d034      	beq.n	2400800a <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24007fa0:	2903      	cmp	r1, #3
24007fa2:	d02d      	beq.n	24008000 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24007fa4:	2901      	cmp	r1, #1
24007fa6:	d035      	beq.n	24008014 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007fa8:	075b      	lsls	r3, r3, #29
24007faa:	f57f af26 	bpl.w	24007dfa <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007fae:	4e1c      	ldr	r6, [pc, #112]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007fb0:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007fb4:	6933      	ldr	r3, [r6, #16]
24007fb6:	f023 0307 	bic.w	r3, r3, #7
24007fba:	430b      	orrs	r3, r1
24007fbc:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24007fbe:	f7fc fd89 	bl	24004ad4 <HAL_GetTick>
24007fc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007fc4:	e004      	b.n	24007fd0 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007fc6:	f7fc fd85 	bl	24004ad4 <HAL_GetTick>
24007fca:	1bc0      	subs	r0, r0, r7
24007fcc:	4540      	cmp	r0, r8
24007fce:	d81f      	bhi.n	24008010 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007fd0:	6933      	ldr	r3, [r6, #16]
24007fd2:	6862      	ldr	r2, [r4, #4]
24007fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007fd8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24007fdc:	d1f3      	bne.n	24007fc6 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007fde:	6823      	ldr	r3, [r4, #0]
24007fe0:	e75e      	b.n	24007ea0 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007fe2:	07da      	lsls	r2, r3, #31
24007fe4:	d4d1      	bmi.n	24007f8a <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007fe6:	4a0e      	ldr	r2, [pc, #56]	; (24008020 <HAL_RCC_ClockConfig+0x254>)
24007fe8:	6993      	ldr	r3, [r2, #24]
24007fea:	f003 030f 	and.w	r3, r3, #15
24007fee:	428b      	cmp	r3, r1
24007ff0:	f67f af60 	bls.w	24007eb4 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007ff4:	6993      	ldr	r3, [r2, #24]
24007ff6:	f023 030f 	bic.w	r3, r3, #15
24007ffa:	4319      	orrs	r1, r3
24007ffc:	6191      	str	r1, [r2, #24]
24007ffe:	e759      	b.n	24007eb4 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008000:	0198      	lsls	r0, r3, #6
24008002:	d4d4      	bmi.n	24007fae <HAL_RCC_ClockConfig+0x1e2>
24008004:	e6f9      	b.n	24007dfa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24008006:	2001      	movs	r0, #1
}
24008008:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400800a:	039e      	lsls	r6, r3, #14
2400800c:	d4cf      	bmi.n	24007fae <HAL_RCC_ClockConfig+0x1e2>
2400800e:	e6f4      	b.n	24007dfa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24008010:	2003      	movs	r0, #3
24008012:	e6f3      	b.n	24007dfc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008014:	05da      	lsls	r2, r3, #23
24008016:	d4ca      	bmi.n	24007fae <HAL_RCC_ClockConfig+0x1e2>
24008018:	e6ef      	b.n	24007dfa <HAL_RCC_ClockConfig+0x2e>
2400801a:	bf00      	nop
2400801c:	52002000 	.word	0x52002000
24008020:	58024400 	.word	0x58024400
24008024:	2401a63c 	.word	0x2401a63c
24008028:	20000750 	.word	0x20000750
2400802c:	20000754 	.word	0x20000754
24008030:	2000075c 	.word	0x2000075c

24008034 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008034:	4a18      	ldr	r2, [pc, #96]	; (24008098 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24008036:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008038:	6913      	ldr	r3, [r2, #16]
2400803a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400803e:	2b10      	cmp	r3, #16
24008040:	d01a      	beq.n	24008078 <HAL_RCC_GetHCLKFreq+0x44>
24008042:	2b18      	cmp	r3, #24
24008044:	d023      	beq.n	2400808e <HAL_RCC_GetHCLKFreq+0x5a>
24008046:	b1cb      	cbz	r3, 2400807c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24008048:	4814      	ldr	r0, [pc, #80]	; (2400809c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400804a:	4b13      	ldr	r3, [pc, #76]	; (24008098 <HAL_RCC_GetHCLKFreq+0x64>)
2400804c:	4914      	ldr	r1, [pc, #80]	; (240080a0 <HAL_RCC_GetHCLKFreq+0x6c>)
2400804e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008050:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008052:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008056:	4c13      	ldr	r4, [pc, #76]	; (240080a4 <HAL_RCC_GetHCLKFreq+0x70>)
24008058:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400805c:	4d12      	ldr	r5, [pc, #72]	; (240080a8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400805e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008060:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008062:	f002 021f 	and.w	r2, r2, #31
24008066:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400806a:	f003 001f 	and.w	r0, r3, #31
2400806e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24008072:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008074:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24008076:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008078:	480c      	ldr	r0, [pc, #48]	; (240080ac <HAL_RCC_GetHCLKFreq+0x78>)
2400807a:	e7e6      	b.n	2400804a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400807c:	6813      	ldr	r3, [r2, #0]
2400807e:	069b      	lsls	r3, r3, #26
24008080:	d508      	bpl.n	24008094 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008082:	6812      	ldr	r2, [r2, #0]
24008084:	480a      	ldr	r0, [pc, #40]	; (240080b0 <HAL_RCC_GetHCLKFreq+0x7c>)
24008086:	f3c2 02c1 	ubfx	r2, r2, #3, #2
2400808a:	40d0      	lsrs	r0, r2
2400808c:	e7dd      	b.n	2400804a <HAL_RCC_GetHCLKFreq+0x16>
2400808e:	f7ff fa87 	bl	240075a0 <HAL_RCC_GetSysClockFreq.part.0>
24008092:	e7da      	b.n	2400804a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008094:	4806      	ldr	r0, [pc, #24]	; (240080b0 <HAL_RCC_GetHCLKFreq+0x7c>)
24008096:	e7d8      	b.n	2400804a <HAL_RCC_GetHCLKFreq+0x16>
24008098:	58024400 	.word	0x58024400
2400809c:	003d0900 	.word	0x003d0900
240080a0:	2401a63c 	.word	0x2401a63c
240080a4:	20000754 	.word	0x20000754
240080a8:	20000750 	.word	0x20000750
240080ac:	00f42400 	.word	0x00f42400
240080b0:	03d09000 	.word	0x03d09000

240080b4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240080b4:	4a1c      	ldr	r2, [pc, #112]	; (24008128 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
240080b6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240080b8:	6913      	ldr	r3, [r2, #16]
240080ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
240080be:	2b10      	cmp	r3, #16
240080c0:	d021      	beq.n	24008106 <HAL_RCC_GetPCLK1Freq+0x52>
240080c2:	2b18      	cmp	r3, #24
240080c4:	d02b      	beq.n	2400811e <HAL_RCC_GetPCLK1Freq+0x6a>
240080c6:	b303      	cbz	r3, 2400810a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
240080c8:	4818      	ldr	r0, [pc, #96]	; (2400812c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240080ca:	4a17      	ldr	r2, [pc, #92]	; (24008128 <HAL_RCC_GetPCLK1Freq+0x74>)
240080cc:	4918      	ldr	r1, [pc, #96]	; (24008130 <HAL_RCC_GetPCLK1Freq+0x7c>)
240080ce:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
240080d0:	4d18      	ldr	r5, [pc, #96]	; (24008134 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240080d2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080d6:	4c18      	ldr	r4, [pc, #96]	; (24008138 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240080d8:	5ccb      	ldrb	r3, [r1, r3]
240080da:	f003 031f 	and.w	r3, r3, #31
240080de:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080e2:	6990      	ldr	r0, [r2, #24]
240080e4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
240080e8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080ea:	5c08      	ldrb	r0, [r1, r0]
240080ec:	f000 001f 	and.w	r0, r0, #31
240080f0:	40c3      	lsrs	r3, r0
240080f2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
240080f4:	69d2      	ldr	r2, [r2, #28]
240080f6:	f3c2 1202 	ubfx	r2, r2, #4, #3
240080fa:	5c88      	ldrb	r0, [r1, r2]
240080fc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24008100:	fa23 f000 	lsr.w	r0, r3, r0
24008104:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008106:	480d      	ldr	r0, [pc, #52]	; (2400813c <HAL_RCC_GetPCLK1Freq+0x88>)
24008108:	e7df      	b.n	240080ca <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400810a:	6813      	ldr	r3, [r2, #0]
2400810c:	069b      	lsls	r3, r3, #26
2400810e:	d509      	bpl.n	24008124 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008110:	6810      	ldr	r0, [r2, #0]
24008112:	4b0b      	ldr	r3, [pc, #44]	; (24008140 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008114:	f3c0 00c1 	ubfx	r0, r0, #3, #2
24008118:	fa23 f000 	lsr.w	r0, r3, r0
2400811c:	e7d5      	b.n	240080ca <HAL_RCC_GetPCLK1Freq+0x16>
2400811e:	f7ff fa3f 	bl	240075a0 <HAL_RCC_GetSysClockFreq.part.0>
24008122:	e7d2      	b.n	240080ca <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008124:	4806      	ldr	r0, [pc, #24]	; (24008140 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008126:	e7d0      	b.n	240080ca <HAL_RCC_GetPCLK1Freq+0x16>
24008128:	58024400 	.word	0x58024400
2400812c:	003d0900 	.word	0x003d0900
24008130:	2401a63c 	.word	0x2401a63c
24008134:	20000750 	.word	0x20000750
24008138:	20000754 	.word	0x20000754
2400813c:	00f42400 	.word	0x00f42400
24008140:	03d09000 	.word	0x03d09000

24008144 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24008146:	4c3a      	ldr	r4, [pc, #232]	; (24008230 <RCCEx_PLL2_Config+0xec>)
24008148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400814a:	f003 0303 	and.w	r3, r3, #3
2400814e:	2b03      	cmp	r3, #3
24008150:	d067      	beq.n	24008222 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24008152:	6823      	ldr	r3, [r4, #0]
24008154:	4606      	mov	r6, r0
24008156:	460f      	mov	r7, r1
24008158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2400815c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400815e:	f7fc fcb9 	bl	24004ad4 <HAL_GetTick>
24008162:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008164:	e004      	b.n	24008170 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24008166:	f7fc fcb5 	bl	24004ad4 <HAL_GetTick>
2400816a:	1b43      	subs	r3, r0, r5
2400816c:	2b02      	cmp	r3, #2
2400816e:	d856      	bhi.n	2400821e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24008170:	6823      	ldr	r3, [r4, #0]
24008172:	011a      	lsls	r2, r3, #4
24008174:	d4f7      	bmi.n	24008166 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24008176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008178:	6832      	ldr	r2, [r6, #0]
2400817a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
2400817e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24008182:	62a3      	str	r3, [r4, #40]	; 0x28
24008184:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24008188:	3b01      	subs	r3, #1
2400818a:	3a01      	subs	r2, #1
2400818c:	025b      	lsls	r3, r3, #9
2400818e:	0412      	lsls	r2, r2, #16
24008190:	b29b      	uxth	r3, r3
24008192:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24008196:	4313      	orrs	r3, r2
24008198:	6872      	ldr	r2, [r6, #4]
2400819a:	3a01      	subs	r2, #1
2400819c:	f3c2 0208 	ubfx	r2, r2, #0, #9
240081a0:	4313      	orrs	r3, r2
240081a2:	6932      	ldr	r2, [r6, #16]
240081a4:	3a01      	subs	r2, #1
240081a6:	0612      	lsls	r2, r2, #24
240081a8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240081ac:	4313      	orrs	r3, r2
240081ae:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
240081b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240081b2:	6972      	ldr	r2, [r6, #20]
240081b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
240081b8:	4313      	orrs	r3, r2
240081ba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240081bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240081be:	69b3      	ldr	r3, [r6, #24]
240081c0:	f022 0220 	bic.w	r2, r2, #32
240081c4:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240081c6:	4b1b      	ldr	r3, [pc, #108]	; (24008234 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240081c8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
240081ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240081cc:	f022 0210 	bic.w	r2, r2, #16
240081d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240081d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
240081d4:	69f2      	ldr	r2, [r6, #28]
240081d6:	400b      	ands	r3, r1
240081d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240081dc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
240081de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240081e0:	f043 0310 	orr.w	r3, r3, #16
240081e4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240081e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240081e8:	b1ef      	cbz	r7, 24008226 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240081ea:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240081ec:	bf0c      	ite	eq
240081ee:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240081f2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
240081f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
240081f8:	4c0d      	ldr	r4, [pc, #52]	; (24008230 <RCCEx_PLL2_Config+0xec>)
240081fa:	6823      	ldr	r3, [r4, #0]
240081fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24008200:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008202:	f7fc fc67 	bl	24004ad4 <HAL_GetTick>
24008206:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008208:	e004      	b.n	24008214 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400820a:	f7fc fc63 	bl	24004ad4 <HAL_GetTick>
2400820e:	1b40      	subs	r0, r0, r5
24008210:	2802      	cmp	r0, #2
24008212:	d804      	bhi.n	2400821e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008214:	6823      	ldr	r3, [r4, #0]
24008216:	011b      	lsls	r3, r3, #4
24008218:	d5f7      	bpl.n	2400820a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
2400821a:	2000      	movs	r0, #0
}
2400821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400821e:	2003      	movs	r0, #3
}
24008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008222:	2001      	movs	r0, #1
}
24008224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24008226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400822a:	62e3      	str	r3, [r4, #44]	; 0x2c
2400822c:	e7e4      	b.n	240081f8 <RCCEx_PLL2_Config+0xb4>
2400822e:	bf00      	nop
24008230:	58024400 	.word	0x58024400
24008234:	ffff0007 	.word	0xffff0007

24008238 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400823a:	4c3a      	ldr	r4, [pc, #232]	; (24008324 <RCCEx_PLL3_Config+0xec>)
2400823c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400823e:	f003 0303 	and.w	r3, r3, #3
24008242:	2b03      	cmp	r3, #3
24008244:	d067      	beq.n	24008316 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24008246:	6823      	ldr	r3, [r4, #0]
24008248:	4606      	mov	r6, r0
2400824a:	460f      	mov	r7, r1
2400824c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24008250:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008252:	f7fc fc3f 	bl	24004ad4 <HAL_GetTick>
24008256:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24008258:	e004      	b.n	24008264 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400825a:	f7fc fc3b 	bl	24004ad4 <HAL_GetTick>
2400825e:	1b43      	subs	r3, r0, r5
24008260:	2b02      	cmp	r3, #2
24008262:	d856      	bhi.n	24008312 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24008264:	6823      	ldr	r3, [r4, #0]
24008266:	009a      	lsls	r2, r3, #2
24008268:	d4f7      	bmi.n	2400825a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2400826a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400826c:	6832      	ldr	r2, [r6, #0]
2400826e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24008272:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24008276:	62a3      	str	r3, [r4, #40]	; 0x28
24008278:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
2400827c:	3b01      	subs	r3, #1
2400827e:	3a01      	subs	r2, #1
24008280:	025b      	lsls	r3, r3, #9
24008282:	0412      	lsls	r2, r2, #16
24008284:	b29b      	uxth	r3, r3
24008286:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400828a:	4313      	orrs	r3, r2
2400828c:	6872      	ldr	r2, [r6, #4]
2400828e:	3a01      	subs	r2, #1
24008290:	f3c2 0208 	ubfx	r2, r2, #0, #9
24008294:	4313      	orrs	r3, r2
24008296:	6932      	ldr	r2, [r6, #16]
24008298:	3a01      	subs	r2, #1
2400829a:	0612      	lsls	r2, r2, #24
2400829c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240082a0:	4313      	orrs	r3, r2
240082a2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240082a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240082a6:	6972      	ldr	r2, [r6, #20]
240082a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
240082ac:	4313      	orrs	r3, r2
240082ae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240082b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240082b2:	69b3      	ldr	r3, [r6, #24]
240082b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
240082b8:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240082ba:	4b1b      	ldr	r3, [pc, #108]	; (24008328 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240082bc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
240082be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240082c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240082c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240082c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
240082c8:	69f2      	ldr	r2, [r6, #28]
240082ca:	400b      	ands	r3, r1
240082cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240082d0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240082d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240082d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240082d8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240082da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240082dc:	b1ef      	cbz	r7, 2400831a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240082de:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
240082e0:	bf0c      	ite	eq
240082e2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240082e6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
240082ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
240082ec:	4c0d      	ldr	r4, [pc, #52]	; (24008324 <RCCEx_PLL3_Config+0xec>)
240082ee:	6823      	ldr	r3, [r4, #0]
240082f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
240082f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240082f6:	f7fc fbed 	bl	24004ad4 <HAL_GetTick>
240082fa:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240082fc:	e004      	b.n	24008308 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240082fe:	f7fc fbe9 	bl	24004ad4 <HAL_GetTick>
24008302:	1b40      	subs	r0, r0, r5
24008304:	2802      	cmp	r0, #2
24008306:	d804      	bhi.n	24008312 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008308:	6823      	ldr	r3, [r4, #0]
2400830a:	009b      	lsls	r3, r3, #2
2400830c:	d5f7      	bpl.n	240082fe <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
2400830e:	2000      	movs	r0, #0
}
24008310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008312:	2003      	movs	r0, #3
}
24008314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008316:	2001      	movs	r0, #1
}
24008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400831a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400831e:	62e3      	str	r3, [r4, #44]	; 0x2c
24008320:	e7e4      	b.n	240082ec <RCCEx_PLL3_Config+0xb4>
24008322:	bf00      	nop
24008324:	58024400 	.word	0x58024400
24008328:	ffff0007 	.word	0xffff0007

2400832c <HAL_RCCEx_PeriphCLKConfig>:
{
2400832c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008330:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24008334:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008336:	011d      	lsls	r5, r3, #4
24008338:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
2400833c:	d521      	bpl.n	24008382 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400833e:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008344:	f000 8572 	beq.w	24008e2c <HAL_RCCEx_PeriphCLKConfig+0xb00>
24008348:	d80e      	bhi.n	24008368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
2400834a:	2900      	cmp	r1, #0
2400834c:	f000 85cd 	beq.w	24008eea <HAL_RCCEx_PeriphCLKConfig+0xbbe>
24008350:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008354:	f040 85c6 	bne.w	24008ee4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008358:	2102      	movs	r1, #2
2400835a:	3008      	adds	r0, #8
2400835c:	f7ff fef2 	bl	24008144 <RCCEx_PLL2_Config>
24008360:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008362:	b966      	cbnz	r6, 2400837e <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008364:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24008366:	e003      	b.n	24008370 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008368:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400836c:	f040 85ba 	bne.w	24008ee4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008370:	4aa3      	ldr	r2, [pc, #652]	; (24008600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008372:	2600      	movs	r6, #0
24008374:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008376:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400837a:	4319      	orrs	r1, r3
2400837c:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400837e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008382:	05d8      	lsls	r0, r3, #23
24008384:	d50a      	bpl.n	2400839c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24008386:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008388:	2904      	cmp	r1, #4
2400838a:	d806      	bhi.n	2400839a <HAL_RCCEx_PeriphCLKConfig+0x6e>
2400838c:	e8df f011 	tbh	[pc, r1, lsl #1]
24008390:	055f0558 	.word	0x055f0558
24008394:	030e0576 	.word	0x030e0576
24008398:	030e      	.short	0x030e
2400839a:	2601      	movs	r6, #1
2400839c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400839e:	0599      	lsls	r1, r3, #22
240083a0:	d517      	bpl.n	240083d2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
240083a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240083a4:	2980      	cmp	r1, #128	; 0x80
240083a6:	f000 8570 	beq.w	24008e8a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
240083aa:	f200 80e1 	bhi.w	24008570 <HAL_RCCEx_PeriphCLKConfig+0x244>
240083ae:	2900      	cmp	r1, #0
240083b0:	f000 8442 	beq.w	24008c38 <HAL_RCCEx_PeriphCLKConfig+0x90c>
240083b4:	2940      	cmp	r1, #64	; 0x40
240083b6:	f040 80e2 	bne.w	2400857e <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240083ba:	2100      	movs	r1, #0
240083bc:	f104 0008 	add.w	r0, r4, #8
240083c0:	f7ff fec0 	bl	24008144 <RCCEx_PLL2_Config>
240083c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240083c6:	2d00      	cmp	r5, #0
240083c8:	f000 83f4 	beq.w	24008bb4 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240083cc:	462e      	mov	r6, r5
240083ce:	e9d4 3200 	ldrd	r3, r2, [r4]
240083d2:	055f      	lsls	r7, r3, #21
240083d4:	d51a      	bpl.n	2400840c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
240083d6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
240083da:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
240083de:	f000 851d 	beq.w	24008e1c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
240083e2:	f200 80cf 	bhi.w	24008584 <HAL_RCCEx_PeriphCLKConfig+0x258>
240083e6:	2900      	cmp	r1, #0
240083e8:	f000 842d 	beq.w	24008c46 <HAL_RCCEx_PeriphCLKConfig+0x91a>
240083ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240083f0:	f040 80d0 	bne.w	24008594 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240083f4:	2100      	movs	r1, #0
240083f6:	f104 0008 	add.w	r0, r4, #8
240083fa:	f7ff fea3 	bl	24008144 <RCCEx_PLL2_Config>
240083fe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008400:	2d00      	cmp	r5, #0
24008402:	f000 83f6 	beq.w	24008bf2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008406:	462e      	mov	r6, r5
24008408:	e9d4 3200 	ldrd	r3, r2, [r4]
2400840c:	0518      	lsls	r0, r3, #20
2400840e:	d51a      	bpl.n	24008446 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24008410:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008414:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008418:	f000 8528 	beq.w	24008e6c <HAL_RCCEx_PeriphCLKConfig+0xb40>
2400841c:	f200 80bd 	bhi.w	2400859a <HAL_RCCEx_PeriphCLKConfig+0x26e>
24008420:	2900      	cmp	r1, #0
24008422:	f000 8403 	beq.w	24008c2c <HAL_RCCEx_PeriphCLKConfig+0x900>
24008426:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
2400842a:	f040 80be 	bne.w	240085aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400842e:	2100      	movs	r1, #0
24008430:	f104 0008 	add.w	r0, r4, #8
24008434:	f7ff fe86 	bl	24008144 <RCCEx_PLL2_Config>
24008438:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400843a:	2d00      	cmp	r5, #0
2400843c:	f000 83af 	beq.w	24008b9e <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008440:	462e      	mov	r6, r5
24008442:	e9d4 3200 	ldrd	r3, r2, [r4]
24008446:	0199      	lsls	r1, r3, #6
24008448:	d51a      	bpl.n	24008480 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
2400844a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400844c:	2920      	cmp	r1, #32
2400844e:	f000 84b0 	beq.w	24008db2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
24008452:	f200 80ad 	bhi.w	240085b0 <HAL_RCCEx_PeriphCLKConfig+0x284>
24008456:	b139      	cbz	r1, 24008468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008458:	2910      	cmp	r1, #16
2400845a:	f040 80ac 	bne.w	240085b6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400845e:	4a68      	ldr	r2, [pc, #416]	; (24008600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008460:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008466:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008468:	2d00      	cmp	r5, #0
2400846a:	f040 8414 	bne.w	24008c96 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
2400846e:	4a64      	ldr	r2, [pc, #400]	; (24008600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008470:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008472:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008474:	f023 0330 	bic.w	r3, r3, #48	; 0x30
24008478:	430b      	orrs	r3, r1
2400847a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400847c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008480:	04df      	lsls	r7, r3, #19
24008482:	d519      	bpl.n	240084b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008484:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008486:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
2400848a:	f000 84e7 	beq.w	24008e5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
2400848e:	f200 8095 	bhi.w	240085bc <HAL_RCCEx_PeriphCLKConfig+0x290>
24008492:	2900      	cmp	r1, #0
24008494:	f000 83c4 	beq.w	24008c20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
24008498:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
2400849c:	f040 8096 	bne.w	240085cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240084a0:	2100      	movs	r1, #0
240084a2:	f104 0008 	add.w	r0, r4, #8
240084a6:	f7ff fe4d 	bl	24008144 <RCCEx_PLL2_Config>
240084aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240084ac:	2d00      	cmp	r5, #0
240084ae:	f000 838b 	beq.w	24008bc8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240084b2:	462e      	mov	r6, r5
240084b4:	e9d4 3200 	ldrd	r3, r2, [r4]
240084b8:	0498      	lsls	r0, r3, #18
240084ba:	d51d      	bpl.n	240084f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
240084bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
240084be:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
240084c2:	f000 8462 	beq.w	24008d8a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
240084c6:	f200 8084 	bhi.w	240085d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
240084ca:	b149      	cbz	r1, 240084e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240084cc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
240084d0:	f040 8088 	bne.w	240085e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240084d4:	2101      	movs	r1, #1
240084d6:	f104 0008 	add.w	r0, r4, #8
240084da:	f7ff fe33 	bl	24008144 <RCCEx_PLL2_Config>
240084de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240084e0:	2d00      	cmp	r5, #0
240084e2:	f040 83e7 	bne.w	24008cb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
240084e6:	4a46      	ldr	r2, [pc, #280]	; (24008600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240084e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
240084ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
240084ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
240084f0:	430b      	orrs	r3, r1
240084f2:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240084f4:	e9d4 3200 	ldrd	r3, r2, [r4]
240084f8:	0459      	lsls	r1, r3, #17
240084fa:	d51d      	bpl.n	24008538 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
240084fc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008500:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008504:	f000 844b 	beq.w	24008d9e <HAL_RCCEx_PeriphCLKConfig+0xa72>
24008508:	d86f      	bhi.n	240085ea <HAL_RCCEx_PeriphCLKConfig+0x2be>
2400850a:	b141      	cbz	r1, 2400851e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400850c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008510:	d173      	bne.n	240085fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008512:	2101      	movs	r1, #1
24008514:	f104 0008 	add.w	r0, r4, #8
24008518:	f7ff fe14 	bl	24008144 <RCCEx_PLL2_Config>
2400851c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400851e:	2d00      	cmp	r5, #0
24008520:	f040 83d0 	bne.w	24008cc4 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008524:	4a36      	ldr	r2, [pc, #216]	; (24008600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008526:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
2400852a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400852c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008530:	430b      	orrs	r3, r1
24008532:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008534:	e9d4 3200 	ldrd	r3, r2, [r4]
24008538:	041f      	lsls	r7, r3, #16
2400853a:	d50d      	bpl.n	24008558 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
2400853c:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400853e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008542:	f000 8419 	beq.w	24008d78 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
24008546:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400854a:	f000 8237 	beq.w	240089bc <HAL_RCCEx_PeriphCLKConfig+0x690>
2400854e:	2900      	cmp	r1, #0
24008550:	f000 823a 	beq.w	240089c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
24008554:	2601      	movs	r6, #1
24008556:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008558:	01d8      	lsls	r0, r3, #7
2400855a:	d55f      	bpl.n	2400861c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
2400855c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400855e:	2903      	cmp	r1, #3
24008560:	f200 84ee 	bhi.w	24008f40 <HAL_RCCEx_PeriphCLKConfig+0xc14>
24008564:	e8df f011 	tbh	[pc, r1, lsl #1]
24008568:	04390054 	.word	0x04390054
2400856c:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
24008570:	29c0      	cmp	r1, #192	; 0xc0
24008572:	f43f af28 	beq.w	240083c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
24008576:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400857a:	f43f af24 	beq.w	240083c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
2400857e:	2601      	movs	r6, #1
24008580:	4635      	mov	r5, r6
24008582:	e726      	b.n	240083d2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
24008584:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24008588:	f43f af3a 	beq.w	24008400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
2400858c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24008590:	f43f af36 	beq.w	24008400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008594:	2601      	movs	r6, #1
24008596:	4635      	mov	r5, r6
24008598:	e738      	b.n	2400840c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
2400859a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
2400859e:	f43f af4c 	beq.w	2400843a <HAL_RCCEx_PeriphCLKConfig+0x10e>
240085a2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
240085a6:	f43f af48 	beq.w	2400843a <HAL_RCCEx_PeriphCLKConfig+0x10e>
240085aa:	2601      	movs	r6, #1
240085ac:	4635      	mov	r5, r6
240085ae:	e74a      	b.n	24008446 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
240085b0:	2930      	cmp	r1, #48	; 0x30
240085b2:	f43f af59 	beq.w	24008468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
240085b6:	2601      	movs	r6, #1
240085b8:	4635      	mov	r5, r6
240085ba:	e761      	b.n	24008480 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
240085bc:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
240085c0:	f43f af74 	beq.w	240084ac <HAL_RCCEx_PeriphCLKConfig+0x180>
240085c4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240085c8:	f43f af70 	beq.w	240084ac <HAL_RCCEx_PeriphCLKConfig+0x180>
240085cc:	2601      	movs	r6, #1
240085ce:	4635      	mov	r5, r6
240085d0:	e772      	b.n	240084b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
240085d2:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
240085d6:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
240085da:	d081      	beq.n	240084e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240085dc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
240085e0:	f43f af7e 	beq.w	240084e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240085e4:	2601      	movs	r6, #1
240085e6:	4635      	mov	r5, r6
240085e8:	e786      	b.n	240084f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
240085ea:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
240085ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
240085f2:	d094      	beq.n	2400851e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
240085f4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
240085f8:	d091      	beq.n	2400851e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
240085fa:	2601      	movs	r6, #1
240085fc:	4635      	mov	r5, r6
240085fe:	e79b      	b.n	24008538 <HAL_RCCEx_PeriphCLKConfig+0x20c>
24008600:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008604:	2102      	movs	r1, #2
24008606:	f104 0008 	add.w	r0, r4, #8
2400860a:	f7ff fd9b 	bl	24008144 <RCCEx_PLL2_Config>
2400860e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008610:	2d00      	cmp	r5, #0
24008612:	f000 8345 	beq.w	24008ca0 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008616:	462e      	mov	r6, r5
24008618:	e9d4 3200 	ldrd	r3, r2, [r4]
2400861c:	0259      	lsls	r1, r3, #9
2400861e:	f100 826c 	bmi.w	24008afa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008622:	07d8      	lsls	r0, r3, #31
24008624:	d52f      	bpl.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
24008626:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008628:	2928      	cmp	r1, #40	; 0x28
2400862a:	d82a      	bhi.n	24008682 <HAL_RCCEx_PeriphCLKConfig+0x356>
2400862c:	e8df f011 	tbh	[pc, r1, lsl #1]
24008630:	0029020a 	.word	0x0029020a
24008634:	00290029 	.word	0x00290029
24008638:	00290029 	.word	0x00290029
2400863c:	00290029 	.word	0x00290029
24008640:	0029044a 	.word	0x0029044a
24008644:	00290029 	.word	0x00290029
24008648:	00290029 	.word	0x00290029
2400864c:	00290029 	.word	0x00290029
24008650:	00290204 	.word	0x00290204
24008654:	00290029 	.word	0x00290029
24008658:	00290029 	.word	0x00290029
2400865c:	00290029 	.word	0x00290029
24008660:	0029020a 	.word	0x0029020a
24008664:	00290029 	.word	0x00290029
24008668:	00290029 	.word	0x00290029
2400866c:	00290029 	.word	0x00290029
24008670:	0029020a 	.word	0x0029020a
24008674:	00290029 	.word	0x00290029
24008678:	00290029 	.word	0x00290029
2400867c:	00290029 	.word	0x00290029
24008680:	020a      	.short	0x020a
24008682:	2601      	movs	r6, #1
24008684:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008686:	0799      	lsls	r1, r3, #30
24008688:	d517      	bpl.n	240086ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400868a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400868c:	2905      	cmp	r1, #5
2400868e:	f200 845f 	bhi.w	24008f50 <HAL_RCCEx_PeriphCLKConfig+0xc24>
24008692:	e8df f011 	tbh	[pc, r1, lsl #1]
24008696:	000c      	.short	0x000c
24008698:	0006040c 	.word	0x0006040c
2400869c:	000c000c 	.word	0x000c000c
240086a0:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240086a2:	2101      	movs	r1, #1
240086a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240086a8:	f7ff fdc6 	bl	24008238 <RCCEx_PLL3_Config>
240086ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240086ae:	2d00      	cmp	r5, #0
240086b0:	f000 82d8 	beq.w	24008c64 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240086b4:	462e      	mov	r6, r5
240086b6:	e9d4 3200 	ldrd	r3, r2, [r4]
240086ba:	075f      	lsls	r7, r3, #29
240086bc:	d518      	bpl.n	240086f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
240086be:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
240086c2:	2905      	cmp	r1, #5
240086c4:	f200 8440 	bhi.w	24008f48 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
240086c8:	e8df f011 	tbh	[pc, r1, lsl #1]
240086cc:	03e7000c 	.word	0x03e7000c
240086d0:	000c0006 	.word	0x000c0006
240086d4:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240086d8:	2101      	movs	r1, #1
240086da:	f104 0028 	add.w	r0, r4, #40	; 0x28
240086de:	f7ff fdab 	bl	24008238 <RCCEx_PLL3_Config>
240086e2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240086e4:	2d00      	cmp	r5, #0
240086e6:	f000 82c7 	beq.w	24008c78 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240086ea:	462e      	mov	r6, r5
240086ec:	e9d4 3200 	ldrd	r3, r2, [r4]
240086f0:	0698      	lsls	r0, r3, #26
240086f2:	d51f      	bpl.n	24008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
240086f4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
240086f8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240086fc:	f000 8363 	beq.w	24008dc6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
24008700:	f200 811c 	bhi.w	2400893c <HAL_RCCEx_PeriphCLKConfig+0x610>
24008704:	b149      	cbz	r1, 2400871a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008706:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400870a:	f040 8121 	bne.w	24008950 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400870e:	2100      	movs	r1, #0
24008710:	f104 0008 	add.w	r0, r4, #8
24008714:	f7ff fd16 	bl	24008144 <RCCEx_PLL2_Config>
24008718:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400871a:	2d00      	cmp	r5, #0
2400871c:	f040 82b7 	bne.w	24008c8e <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24008720:	4ab0      	ldr	r2, [pc, #704]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008722:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008726:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008728:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400872c:	430b      	orrs	r3, r1
2400872e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008730:	e9d4 3200 	ldrd	r3, r2, [r4]
24008734:	0659      	lsls	r1, r3, #25
24008736:	d51f      	bpl.n	24008778 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008738:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
2400873c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24008740:	f000 8306 	beq.w	24008d50 <HAL_RCCEx_PeriphCLKConfig+0xa24>
24008744:	f200 8107 	bhi.w	24008956 <HAL_RCCEx_PeriphCLKConfig+0x62a>
24008748:	b149      	cbz	r1, 2400875e <HAL_RCCEx_PeriphCLKConfig+0x432>
2400874a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
2400874e:	f040 810c 	bne.w	2400896a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008752:	2100      	movs	r1, #0
24008754:	f104 0008 	add.w	r0, r4, #8
24008758:	f7ff fcf4 	bl	24008144 <RCCEx_PLL2_Config>
2400875c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400875e:	2d00      	cmp	r5, #0
24008760:	f040 82b4 	bne.w	24008ccc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24008764:	4a9f      	ldr	r2, [pc, #636]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008766:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
2400876a:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400876c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
24008770:	430b      	orrs	r3, r1
24008772:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008774:	e9d4 3200 	ldrd	r3, r2, [r4]
24008778:	061f      	lsls	r7, r3, #24
2400877a:	d51f      	bpl.n	240087bc <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
2400877c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008780:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008784:	f000 82ee 	beq.w	24008d64 <HAL_RCCEx_PeriphCLKConfig+0xa38>
24008788:	f200 80f2 	bhi.w	24008970 <HAL_RCCEx_PeriphCLKConfig+0x644>
2400878c:	b149      	cbz	r1, 240087a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
2400878e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008792:	f040 80f7 	bne.w	24008984 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008796:	2100      	movs	r1, #0
24008798:	f104 0008 	add.w	r0, r4, #8
2400879c:	f7ff fcd2 	bl	24008144 <RCCEx_PLL2_Config>
240087a0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240087a2:	2d00      	cmp	r5, #0
240087a4:	f040 828a 	bne.w	24008cbc <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
240087a8:	4a8e      	ldr	r2, [pc, #568]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240087aa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240087ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
240087b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
240087b4:	430b      	orrs	r3, r1
240087b6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
240087b8:	e9d4 3200 	ldrd	r3, r2, [r4]
240087bc:	0718      	lsls	r0, r3, #28
240087be:	d50d      	bpl.n	240087dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
240087c0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
240087c4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
240087c8:	f000 8310 	beq.w	24008dec <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240087cc:	4985      	ldr	r1, [pc, #532]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240087ce:	6d4b      	ldr	r3, [r1, #84]	; 0x54
240087d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
240087d4:	4313      	orrs	r3, r2
240087d6:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
240087d8:	e9d4 3200 	ldrd	r3, r2, [r4]
240087dc:	06d9      	lsls	r1, r3, #27
240087de:	d50d      	bpl.n	240087fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
240087e0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
240087e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240087e8:	f000 830c 	beq.w	24008e04 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240087ec:	497d      	ldr	r1, [pc, #500]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240087ee:	6d8b      	ldr	r3, [r1, #88]	; 0x58
240087f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240087f4:	4313      	orrs	r3, r2
240087f6:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240087f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240087fc:	031f      	lsls	r7, r3, #12
240087fe:	d50e      	bpl.n	2400881e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
24008800:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008804:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008808:	f000 8102 	beq.w	24008a10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
2400880c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008810:	f000 8104 	beq.w	24008a1c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
24008814:	2900      	cmp	r1, #0
24008816:	f000 8290 	beq.w	24008d3a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
2400881a:	2601      	movs	r6, #1
2400881c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400881e:	0358      	lsls	r0, r3, #13
24008820:	d50f      	bpl.n	24008842 <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
24008822:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008826:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400882a:	f000 80dd 	beq.w	240089e8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
2400882e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24008832:	f000 80df 	beq.w	240089f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
24008836:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2400883a:	f000 8275 	beq.w	24008d28 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
2400883e:	2601      	movs	r6, #1
24008840:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008842:	03d9      	lsls	r1, r3, #15
24008844:	d509      	bpl.n	2400885a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
24008846:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008848:	2900      	cmp	r1, #0
2400884a:	f000 8258 	beq.w	24008cfe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
2400884e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008852:	f000 81d9 	beq.w	24008c08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
24008856:	2601      	movs	r6, #1
24008858:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400885a:	009f      	lsls	r7, r3, #2
2400885c:	f100 80ff 	bmi.w	24008a5e <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008860:	0398      	lsls	r0, r3, #14
24008862:	d50e      	bpl.n	24008882 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
24008864:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008868:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400886c:	f000 823e 	beq.w	24008cec <HAL_RCCEx_PeriphCLKConfig+0x9c0>
24008870:	f240 808b 	bls.w	2400898a <HAL_RCCEx_PeriphCLKConfig+0x65e>
24008874:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24008878:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400887c:	f000 8088 	beq.w	24008990 <HAL_RCCEx_PeriphCLKConfig+0x664>
24008880:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008882:	02d9      	lsls	r1, r3, #11
24008884:	d508      	bpl.n	24008898 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24008886:	4a57      	ldr	r2, [pc, #348]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008888:	6f61      	ldr	r1, [r4, #116]	; 0x74
2400888a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400888c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008890:	430b      	orrs	r3, r1
24008892:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24008894:	e9d4 3200 	ldrd	r3, r2, [r4]
24008898:	00df      	lsls	r7, r3, #3
2400889a:	d509      	bpl.n	240088b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
2400889c:	4a51      	ldr	r2, [pc, #324]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400889e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
240088a2:	6913      	ldr	r3, [r2, #16]
240088a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240088a8:	430b      	orrs	r3, r1
240088aa:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240088ac:	e9d4 3200 	ldrd	r3, r2, [r4]
240088b0:	029d      	lsls	r5, r3, #10
240088b2:	d508      	bpl.n	240088c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240088b4:	4a4b      	ldr	r2, [pc, #300]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240088b6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
240088b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
240088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240088be:	430b      	orrs	r3, r1
240088c0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240088c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240088c6:	0058      	lsls	r0, r3, #1
240088c8:	d50b      	bpl.n	240088e2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240088ca:	4b46      	ldr	r3, [pc, #280]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240088cc:	691a      	ldr	r2, [r3, #16]
240088ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240088d2:	611a      	str	r2, [r3, #16]
240088d4:	691a      	ldr	r2, [r3, #16]
240088d6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
240088da:	430a      	orrs	r2, r1
240088dc:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240088de:	e9d4 3200 	ldrd	r3, r2, [r4]
240088e2:	2b00      	cmp	r3, #0
240088e4:	da08      	bge.n	240088f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240088e6:	4a3f      	ldr	r2, [pc, #252]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240088e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
240088ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240088ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
240088f0:	430b      	orrs	r3, r1
240088f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
240088f4:	e9d4 3200 	ldrd	r3, r2, [r4]
240088f8:	0219      	lsls	r1, r3, #8
240088fa:	d508      	bpl.n	2400890e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
240088fc:	4a39      	ldr	r2, [pc, #228]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240088fe:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24008902:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008904:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24008908:	430b      	orrs	r3, r1
2400890a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2400890c:	6862      	ldr	r2, [r4, #4]
2400890e:	07d3      	lsls	r3, r2, #31
24008910:	f100 80b1 	bmi.w	24008a76 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008914:	0797      	lsls	r7, r2, #30
24008916:	f100 80bb 	bmi.w	24008a90 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400891a:	0755      	lsls	r5, r2, #29
2400891c:	f100 80c5 	bmi.w	24008aaa <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008920:	0710      	lsls	r0, r2, #28
24008922:	f100 80cf 	bmi.w	24008ac4 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008926:	06d1      	lsls	r1, r2, #27
24008928:	f100 80d9 	bmi.w	24008ade <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400892c:	0692      	lsls	r2, r2, #26
2400892e:	f100 812a 	bmi.w	24008b86 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
24008932:	1e30      	subs	r0, r6, #0
24008934:	bf18      	it	ne
24008936:	2001      	movne	r0, #1
}
24008938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
2400893c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008944:	f43f aee9 	beq.w	2400871a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008948:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
2400894c:	f43f aee5 	beq.w	2400871a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008950:	2601      	movs	r6, #1
24008952:	4635      	mov	r5, r6
24008954:	e6ee      	b.n	24008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008956:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
2400895a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400895e:	f43f aefe 	beq.w	2400875e <HAL_RCCEx_PeriphCLKConfig+0x432>
24008962:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008966:	f43f aefa 	beq.w	2400875e <HAL_RCCEx_PeriphCLKConfig+0x432>
2400896a:	2601      	movs	r6, #1
2400896c:	4635      	mov	r5, r6
2400896e:	e703      	b.n	24008778 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008970:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24008974:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24008978:	f43f af13 	beq.w	240087a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
2400897c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24008980:	f43f af0f 	beq.w	240087a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
24008984:	2601      	movs	r6, #1
24008986:	4635      	mov	r5, r6
24008988:	e718      	b.n	240087bc <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
2400898a:	2900      	cmp	r1, #0
2400898c:	f47f af78 	bne.w	24008880 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
24008990:	2d00      	cmp	r5, #0
24008992:	f040 81c5 	bne.w	24008d20 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24008996:	4a13      	ldr	r2, [pc, #76]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008998:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
2400899c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400899e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240089a2:	430b      	orrs	r3, r1
240089a4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240089a6:	e9d4 3200 	ldrd	r3, r2, [r4]
240089aa:	e76a      	b.n	24008882 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
240089ac:	4635      	mov	r5, r6
    if (ret == HAL_OK)
240089ae:	2d00      	cmp	r5, #0
240089b0:	f000 8114 	beq.w	24008bdc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240089b4:	462e      	mov	r6, r5
240089b6:	e9d4 3200 	ldrd	r3, r2, [r4]
240089ba:	e4f0      	b.n	2400839e <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240089bc:	2101      	movs	r1, #1
240089be:	f104 0008 	add.w	r0, r4, #8
240089c2:	f7ff fbbf 	bl	24008144 <RCCEx_PLL2_Config>
240089c6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089c8:	2d00      	cmp	r5, #0
240089ca:	f040 8147 	bne.w	24008c5c <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
240089ce:	4a05      	ldr	r2, [pc, #20]	; (240089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240089d0:	6f21      	ldr	r1, [r4, #112]	; 0x70
240089d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
240089d4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
240089d8:	430b      	orrs	r3, r1
240089da:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240089dc:	e9d4 3200 	ldrd	r3, r2, [r4]
240089e0:	e5ba      	b.n	24008558 <HAL_RCCEx_PeriphCLKConfig+0x22c>
240089e2:	bf00      	nop
240089e4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240089e8:	2101      	movs	r1, #1
240089ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089ee:	f7ff fc23 	bl	24008238 <RCCEx_PLL3_Config>
240089f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089f4:	2d00      	cmp	r5, #0
240089f6:	f040 8171 	bne.w	24008cdc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
240089fa:	4aba      	ldr	r2, [pc, #744]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240089fc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008a00:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008a02:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24008a06:	430b      	orrs	r3, r1
24008a08:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008a0a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a0e:	e718      	b.n	24008842 <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008a10:	2102      	movs	r1, #2
24008a12:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a16:	f7ff fc0f 	bl	24008238 <RCCEx_PLL3_Config>
24008a1a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a1c:	2d00      	cmp	r5, #0
24008a1e:	f040 8159 	bne.w	24008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24008a22:	4ab0      	ldr	r2, [pc, #704]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008a24:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008a28:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008a2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
24008a2e:	430b      	orrs	r3, r1
24008a30:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008a32:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a36:	e6f2      	b.n	2400881e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008a38:	2101      	movs	r1, #1
24008a3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a3e:	f7ff fbfb 	bl	24008238 <RCCEx_PLL3_Config>
24008a42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a44:	2d00      	cmp	r5, #0
24008a46:	f040 8105 	bne.w	24008c54 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24008a4a:	4aa6      	ldr	r2, [pc, #664]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008a4c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008a4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008a50:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24008a54:	430b      	orrs	r3, r1
24008a56:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008a58:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a5c:	e613      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a5e:	2102      	movs	r1, #2
24008a60:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a64:	f7ff fbe8 	bl	24008238 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008a68:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a6c:	2800      	cmp	r0, #0
24008a6e:	f43f aef7 	beq.w	24008860 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
24008a72:	2601      	movs	r6, #1
24008a74:	e6f4      	b.n	24008860 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a76:	2100      	movs	r1, #0
24008a78:	f104 0008 	add.w	r0, r4, #8
24008a7c:	f7ff fb62 	bl	24008144 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008a80:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008a82:	2800      	cmp	r0, #0
24008a84:	f43f af46 	beq.w	24008914 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008a88:	0797      	lsls	r7, r2, #30
24008a8a:	4606      	mov	r6, r0
24008a8c:	f57f af45 	bpl.w	2400891a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008a90:	2101      	movs	r1, #1
24008a92:	f104 0008 	add.w	r0, r4, #8
24008a96:	f7ff fb55 	bl	24008144 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008a9a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008a9c:	2800      	cmp	r0, #0
24008a9e:	f43f af3c 	beq.w	2400891a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008aa2:	0755      	lsls	r5, r2, #29
24008aa4:	4606      	mov	r6, r0
24008aa6:	f57f af3b 	bpl.w	24008920 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008aaa:	2102      	movs	r1, #2
24008aac:	f104 0008 	add.w	r0, r4, #8
24008ab0:	f7ff fb48 	bl	24008144 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008ab4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008ab6:	2800      	cmp	r0, #0
24008ab8:	f43f af32 	beq.w	24008920 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008abc:	4606      	mov	r6, r0
24008abe:	0710      	lsls	r0, r2, #28
24008ac0:	f57f af31 	bpl.w	24008926 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008ac4:	2100      	movs	r1, #0
24008ac6:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008aca:	f7ff fbb5 	bl	24008238 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008ace:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008ad0:	2800      	cmp	r0, #0
24008ad2:	f43f af28 	beq.w	24008926 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008ad6:	06d1      	lsls	r1, r2, #27
24008ad8:	4606      	mov	r6, r0
24008ada:	f57f af27 	bpl.w	2400892c <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008ade:	f104 0528 	add.w	r5, r4, #40	; 0x28
24008ae2:	2101      	movs	r1, #1
24008ae4:	4628      	mov	r0, r5
24008ae6:	f7ff fba7 	bl	24008238 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008aea:	2800      	cmp	r0, #0
24008aec:	f000 812e 	beq.w	24008d4c <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008af0:	6863      	ldr	r3, [r4, #4]
24008af2:	069b      	lsls	r3, r3, #26
24008af4:	d550      	bpl.n	24008b98 <HAL_RCCEx_PeriphCLKConfig+0x86c>
24008af6:	4606      	mov	r6, r0
24008af8:	e047      	b.n	24008b8a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24008afa:	4f7b      	ldr	r7, [pc, #492]	; (24008ce8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
24008afc:	683b      	ldr	r3, [r7, #0]
24008afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008b02:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24008b04:	f7fb ffe6 	bl	24004ad4 <HAL_GetTick>
24008b08:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008b0a:	e006      	b.n	24008b1a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008b0c:	f7fb ffe2 	bl	24004ad4 <HAL_GetTick>
24008b10:	eba0 0008 	sub.w	r0, r0, r8
24008b14:	2864      	cmp	r0, #100	; 0x64
24008b16:	f200 81df 	bhi.w	24008ed8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008b1a:	683b      	ldr	r3, [r7, #0]
24008b1c:	05da      	lsls	r2, r3, #23
24008b1e:	d5f5      	bpl.n	24008b0c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
24008b20:	2d00      	cmp	r5, #0
24008b22:	f040 8208 	bne.w	24008f36 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24008b26:	4b6f      	ldr	r3, [pc, #444]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008b28:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008b2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008b2e:	4051      	eors	r1, r2
24008b30:	f411 7f40 	tst.w	r1, #768	; 0x300
24008b34:	d00d      	beq.n	24008b52 <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24008b38:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008b3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24008b3e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
24008b42:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24008b44:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008b46:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24008b4a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24008b4c:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24008b4e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008b52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008b56:	f000 81d0 	beq.w	24008efa <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008b5a:	f402 7340 	and.w	r3, r2, #768	; 0x300
24008b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24008b62:	f000 81de 	beq.w	24008f22 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
24008b66:	4a5f      	ldr	r2, [pc, #380]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008b68:	6913      	ldr	r3, [r2, #16]
24008b6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
24008b6e:	6113      	str	r3, [r2, #16]
24008b70:	4a5c      	ldr	r2, [pc, #368]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008b72:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
24008b76:	6f11      	ldr	r1, [r2, #112]	; 0x70
24008b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
24008b7c:	430b      	orrs	r3, r1
24008b7e:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008b80:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b84:	e54d      	b.n	24008622 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008b86:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008b8a:	2102      	movs	r1, #2
24008b8c:	4628      	mov	r0, r5
24008b8e:	f7ff fb53 	bl	24008238 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008b92:	2800      	cmp	r0, #0
24008b94:	f43f aecd 	beq.w	24008932 <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
24008b98:	2001      	movs	r0, #1
}
24008b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24008b9e:	4a51      	ldr	r2, [pc, #324]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008ba0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008ba4:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008ba6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
24008baa:	430b      	orrs	r3, r1
24008bac:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008bae:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bb2:	e448      	b.n	24008446 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24008bb4:	4a4b      	ldr	r2, [pc, #300]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008bb6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008bb8:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008bba:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
24008bbe:	430b      	orrs	r3, r1
24008bc0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008bc2:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bc6:	e404      	b.n	240083d2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24008bc8:	4a46      	ldr	r2, [pc, #280]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008bca:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008bcc:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24008bd2:	430b      	orrs	r3, r1
24008bd4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008bd6:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bda:	e46d      	b.n	240084b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008bdc:	4a41      	ldr	r2, [pc, #260]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008bde:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008be0:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008be2:	f023 0307 	bic.w	r3, r3, #7
24008be6:	430b      	orrs	r3, r1
24008be8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008bea:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bee:	f7ff bbd6 	b.w	2400839e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24008bf2:	4a3c      	ldr	r2, [pc, #240]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008bf4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008bf8:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008bfa:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
24008bfe:	430b      	orrs	r3, r1
24008c00:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008c02:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c06:	e401      	b.n	2400840c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008c08:	2102      	movs	r1, #2
24008c0a:	f104 0008 	add.w	r0, r4, #8
24008c0e:	f7ff fa99 	bl	24008144 <RCCEx_PLL2_Config>
24008c12:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008c14:	2d00      	cmp	r5, #0
24008c16:	d079      	beq.n	24008d0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008c18:	462e      	mov	r6, r5
24008c1a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c1e:	e61c      	b.n	2400885a <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008c20:	4a30      	ldr	r2, [pc, #192]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008c28:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008c2a:	e43f      	b.n	240084ac <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008c2c:	4a2d      	ldr	r2, [pc, #180]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c2e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008c34:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008c36:	e400      	b.n	2400843a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008c38:	4a2a      	ldr	r2, [pc, #168]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008c40:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008c42:	f7ff bbc0 	b.w	240083c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008c46:	4a27      	ldr	r2, [pc, #156]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008c50:	f7ff bbd6 	b.w	24008400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008c54:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c58:	462e      	mov	r6, r5
24008c5a:	e514      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008c5c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c60:	462e      	mov	r6, r5
24008c62:	e479      	b.n	24008558 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24008c64:	4a1f      	ldr	r2, [pc, #124]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c66:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008c68:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008c6a:	f023 0307 	bic.w	r3, r3, #7
24008c6e:	430b      	orrs	r3, r1
24008c70:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008c72:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c76:	e520      	b.n	240086ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24008c78:	4a1a      	ldr	r2, [pc, #104]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008c7a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008c7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008c80:	f023 0307 	bic.w	r3, r3, #7
24008c84:	430b      	orrs	r3, r1
24008c86:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008c88:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c8c:	e530      	b.n	240086f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008c8e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c92:	462e      	mov	r6, r5
24008c94:	e54e      	b.n	24008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008c96:	e9d4 3200 	ldrd	r3, r2, [r4]
24008c9a:	462e      	mov	r6, r5
24008c9c:	f7ff bbf0 	b.w	24008480 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24008ca0:	4a10      	ldr	r2, [pc, #64]	; (24008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008ca2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24008ca4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008ca6:	f023 0303 	bic.w	r3, r3, #3
24008caa:	430b      	orrs	r3, r1
24008cac:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008cae:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cb2:	e4b3      	b.n	2400861c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008cb4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cb8:	462e      	mov	r6, r5
24008cba:	e41d      	b.n	240084f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008cbc:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cc0:	462e      	mov	r6, r5
24008cc2:	e57b      	b.n	240087bc <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cc8:	462e      	mov	r6, r5
24008cca:	e435      	b.n	24008538 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008ccc:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cd0:	462e      	mov	r6, r5
24008cd2:	e551      	b.n	24008778 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008cd4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cd8:	462e      	mov	r6, r5
24008cda:	e5a0      	b.n	2400881e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008cdc:	e9d4 3200 	ldrd	r3, r2, [r4]
24008ce0:	462e      	mov	r6, r5
24008ce2:	e5ae      	b.n	24008842 <HAL_RCCEx_PeriphCLKConfig+0x516>
24008ce4:	58024400 	.word	0x58024400
24008ce8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008cec:	4a9a      	ldr	r2, [pc, #616]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008cee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008cf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008cf6:	2d00      	cmp	r5, #0
24008cf8:	f43f ae4d 	beq.w	24008996 <HAL_RCCEx_PeriphCLKConfig+0x66a>
24008cfc:	e010      	b.n	24008d20 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008cfe:	4a96      	ldr	r2, [pc, #600]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008d00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d06:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008d08:	2d00      	cmp	r5, #0
24008d0a:	d185      	bne.n	24008c18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24008d0c:	4a92      	ldr	r2, [pc, #584]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008d0e:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008d10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24008d16:	430b      	orrs	r3, r1
24008d18:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008d1a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d1e:	e59c      	b.n	2400885a <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008d20:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d24:	462e      	mov	r6, r5
24008d26:	e5ac      	b.n	24008882 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d28:	4a8b      	ldr	r2, [pc, #556]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d30:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008d32:	2d00      	cmp	r5, #0
24008d34:	f43f ae61 	beq.w	240089fa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
24008d38:	e7d0      	b.n	24008cdc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008d3a:	f104 0008 	add.w	r0, r4, #8
24008d3e:	f7ff fa01 	bl	24008144 <RCCEx_PLL2_Config>
24008d42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d44:	2d00      	cmp	r5, #0
24008d46:	f43f ae6c 	beq.w	24008a22 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
24008d4a:	e7c3      	b.n	24008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008d4c:	6862      	ldr	r2, [r4, #4]
24008d4e:	e5ed      	b.n	2400892c <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008d50:	2102      	movs	r1, #2
24008d52:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008d56:	f7ff fa6f 	bl	24008238 <RCCEx_PLL3_Config>
24008d5a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d5c:	2d00      	cmp	r5, #0
24008d5e:	f43f ad01 	beq.w	24008764 <HAL_RCCEx_PeriphCLKConfig+0x438>
24008d62:	e7b3      	b.n	24008ccc <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008d64:	2102      	movs	r1, #2
24008d66:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008d6a:	f7ff fa65 	bl	24008238 <RCCEx_PLL3_Config>
24008d6e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d70:	2d00      	cmp	r5, #0
24008d72:	f43f ad19 	beq.w	240087a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
24008d76:	e7a1      	b.n	24008cbc <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d78:	4a77      	ldr	r2, [pc, #476]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008d7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008d82:	2d00      	cmp	r5, #0
24008d84:	f43f ae23 	beq.w	240089ce <HAL_RCCEx_PeriphCLKConfig+0x6a2>
24008d88:	e768      	b.n	24008c5c <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008d8a:	2101      	movs	r1, #1
24008d8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008d90:	f7ff fa52 	bl	24008238 <RCCEx_PLL3_Config>
24008d94:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d96:	2d00      	cmp	r5, #0
24008d98:	f43f aba5 	beq.w	240084e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
24008d9c:	e78a      	b.n	24008cb4 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008d9e:	2101      	movs	r1, #1
24008da0:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008da4:	f7ff fa48 	bl	24008238 <RCCEx_PLL3_Config>
24008da8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008daa:	2d00      	cmp	r5, #0
24008dac:	f43f abba 	beq.w	24008524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24008db0:	e788      	b.n	24008cc4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008db2:	2102      	movs	r1, #2
24008db4:	f104 0008 	add.w	r0, r4, #8
24008db8:	f7ff f9c4 	bl	24008144 <RCCEx_PLL2_Config>
24008dbc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008dbe:	2d00      	cmp	r5, #0
24008dc0:	f43f ab55 	beq.w	2400846e <HAL_RCCEx_PeriphCLKConfig+0x142>
24008dc4:	e767      	b.n	24008c96 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008dc6:	2102      	movs	r1, #2
24008dc8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008dcc:	f7ff fa34 	bl	24008238 <RCCEx_PLL3_Config>
24008dd0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008dd2:	2d00      	cmp	r5, #0
24008dd4:	f43f aca4 	beq.w	24008720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
24008dd8:	e759      	b.n	24008c8e <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008dda:	4a5f      	ldr	r2, [pc, #380]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008de2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008de4:	2d00      	cmp	r5, #0
24008de6:	f43f af5b 	beq.w	24008ca0 <HAL_RCCEx_PeriphCLKConfig+0x974>
24008dea:	e414      	b.n	24008616 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008dec:	2102      	movs	r1, #2
24008dee:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008df2:	f7ff fa21 	bl	24008238 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008df6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008dfa:	2800      	cmp	r0, #0
24008dfc:	f43f ace6 	beq.w	240087cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
24008e00:	2601      	movs	r6, #1
24008e02:	e4e3      	b.n	240087cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008e04:	2102      	movs	r1, #2
24008e06:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e0a:	f7ff fa15 	bl	24008238 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008e0e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008e12:	2800      	cmp	r0, #0
24008e14:	f43f acea 	beq.w	240087ec <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
24008e18:	2601      	movs	r6, #1
24008e1a:	e4e7      	b.n	240087ec <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008e1c:	2100      	movs	r1, #0
24008e1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e22:	f7ff fa09 	bl	24008238 <RCCEx_PLL3_Config>
24008e26:	4605      	mov	r5, r0
        break;
24008e28:	f7ff baea 	b.w	24008400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008e2c:	2102      	movs	r1, #2
24008e2e:	3028      	adds	r0, #40	; 0x28
24008e30:	f7ff fa02 	bl	24008238 <RCCEx_PLL3_Config>
24008e34:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008e36:	2e00      	cmp	r6, #0
24008e38:	f43f aa94 	beq.w	24008364 <HAL_RCCEx_PeriphCLKConfig+0x38>
24008e3c:	f7ff ba9f 	b.w	2400837e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008e40:	4a45      	ldr	r2, [pc, #276]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
24008e42:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008e44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008e4c:	e5af      	b.n	240089ae <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008e4e:	2100      	movs	r1, #0
24008e50:	f104 0008 	add.w	r0, r4, #8
24008e54:	f7ff f976 	bl	24008144 <RCCEx_PLL2_Config>
24008e58:	4605      	mov	r5, r0
        break;
24008e5a:	e5a8      	b.n	240089ae <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008e5c:	2100      	movs	r1, #0
24008e5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e62:	f7ff f9e9 	bl	24008238 <RCCEx_PLL3_Config>
24008e66:	4605      	mov	r5, r0
        break;
24008e68:	f7ff bb20 	b.w	240084ac <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008e6c:	2100      	movs	r1, #0
24008e6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e72:	f7ff f9e1 	bl	24008238 <RCCEx_PLL3_Config>
24008e76:	4605      	mov	r5, r0
        break;
24008e78:	f7ff badf 	b.w	2400843a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008e7c:	2100      	movs	r1, #0
24008e7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e82:	f7ff f9d9 	bl	24008238 <RCCEx_PLL3_Config>
24008e86:	4605      	mov	r5, r0
        break;
24008e88:	e591      	b.n	240089ae <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008e8a:	2100      	movs	r1, #0
24008e8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008e90:	f7ff f9d2 	bl	24008238 <RCCEx_PLL3_Config>
24008e94:	4605      	mov	r5, r0
        break;
24008e96:	f7ff ba96 	b.w	240083c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008e9a:	2101      	movs	r1, #1
24008e9c:	f104 0008 	add.w	r0, r4, #8
24008ea0:	f7ff f950 	bl	24008144 <RCCEx_PLL2_Config>
24008ea4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ea6:	2d00      	cmp	r5, #0
24008ea8:	f43f aee6 	beq.w	24008c78 <HAL_RCCEx_PeriphCLKConfig+0x94c>
24008eac:	e41d      	b.n	240086ea <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008eae:	2101      	movs	r1, #1
24008eb0:	f104 0008 	add.w	r0, r4, #8
24008eb4:	f7ff f946 	bl	24008144 <RCCEx_PLL2_Config>
24008eb8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008eba:	2d00      	cmp	r5, #0
24008ebc:	f43f aed2 	beq.w	24008c64 <HAL_RCCEx_PeriphCLKConfig+0x938>
24008ec0:	f7ff bbf8 	b.w	240086b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008ec4:	2101      	movs	r1, #1
24008ec6:	f104 0008 	add.w	r0, r4, #8
24008eca:	f7ff f93b 	bl	24008144 <RCCEx_PLL2_Config>
24008ece:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ed0:	2d00      	cmp	r5, #0
24008ed2:	f43f adba 	beq.w	24008a4a <HAL_RCCEx_PeriphCLKConfig+0x71e>
24008ed6:	e6bd      	b.n	24008c54 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
24008ed8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008eda:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
24008ede:	4635      	mov	r5, r6
24008ee0:	f7ff bb9f 	b.w	24008622 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008ee4:	2601      	movs	r6, #1
24008ee6:	f7ff ba4c 	b.w	24008382 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008eea:	4a1b      	ldr	r2, [pc, #108]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008ef4:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008ef6:	f7ff ba3b 	b.w	24008370 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24008efa:	f7fb fdeb 	bl	24004ad4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008efe:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
24008f02:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008f04:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008f08:	e004      	b.n	24008f14 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008f0a:	f7fb fde3 	bl	24004ad4 <HAL_GetTick>
24008f0e:	1bc0      	subs	r0, r0, r7
24008f10:	4548      	cmp	r0, r9
24008f12:	d8e1      	bhi.n	24008ed8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008f14:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24008f18:	079b      	lsls	r3, r3, #30
24008f1a:	d5f6      	bpl.n	24008f0a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008f1c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008f20:	e61b      	b.n	24008b5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
24008f22:	490d      	ldr	r1, [pc, #52]	; (24008f58 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008f24:	4b0d      	ldr	r3, [pc, #52]	; (24008f5c <HAL_RCCEx_PeriphCLKConfig+0xc30>)
24008f26:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24008f2a:	690a      	ldr	r2, [r1, #16]
24008f2c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24008f30:	4313      	orrs	r3, r2
24008f32:	610b      	str	r3, [r1, #16]
24008f34:	e61c      	b.n	24008b70 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008f36:	e9d4 3200 	ldrd	r3, r2, [r4]
24008f3a:	462e      	mov	r6, r5
24008f3c:	f7ff bb71 	b.w	24008622 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
24008f40:	2601      	movs	r6, #1
24008f42:	4635      	mov	r5, r6
24008f44:	f7ff bb6a 	b.w	2400861c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008f48:	2601      	movs	r6, #1
24008f4a:	4635      	mov	r5, r6
24008f4c:	f7ff bbd0 	b.w	240086f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008f50:	2601      	movs	r6, #1
24008f52:	4635      	mov	r5, r6
24008f54:	f7ff bbb1 	b.w	240086ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
24008f58:	58024400 	.word	0x58024400
24008f5c:	00ffffcf 	.word	0x00ffffcf

24008f60 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008f60:	4b4f      	ldr	r3, [pc, #316]	; (240090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
24008f62:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008f64:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008f66:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008f68:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
24008f6a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008f6e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008f72:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
24008f74:	d05c      	beq.n	24009030 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008f76:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008f7a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008f7e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008f82:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008f86:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008f88:	ee07 4a90 	vmov	s15, r4
24008f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008f90:	d003      	beq.n	24008f9a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
24008f92:	2902      	cmp	r1, #2
24008f94:	d075      	beq.n	24009082 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
24008f96:	2900      	cmp	r1, #0
24008f98:	d04f      	beq.n	2400903a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008f9a:	ee07 2a90 	vmov	s15, r2
24008f9e:	eddf 6a41 	vldr	s13, [pc, #260]	; 240090a4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
24008fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24008fa8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008fac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 240090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008fb4:	ee06 3a90 	vmov	s13, r3
24008fb8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008fbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008fc0:	ee76 6a85 	vadd.f32	s13, s13, s10
24008fc4:	eee7 6a25 	vfma.f32	s13, s14, s11
24008fc8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008fcc:	4a34      	ldr	r2, [pc, #208]	; (240090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
24008fce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008fd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008fd4:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008fd8:	ee07 3a10 	vmov	s14, r3
24008fdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008fe0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008fe2:	ee37 7a06 	vadd.f32	s14, s14, s12
24008fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008fee:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24008ff2:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008ff4:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008ff8:	ee07 3a10 	vmov	s14, r3
24008ffc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009000:	ee37 7a06 	vadd.f32	s14, s14, s12
24009004:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400900c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009010:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009012:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009016:	ee07 3a90 	vmov	s15, r3
2400901a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400901e:	ee77 7a86 	vadd.f32	s15, s15, s12
24009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009026:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400902a:	ed80 7a02 	vstr	s14, [r0, #8]
}
2400902e:	4770      	bx	lr
24009030:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24009032:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24009036:	6082      	str	r2, [r0, #8]
}
24009038:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400903a:	6819      	ldr	r1, [r3, #0]
2400903c:	0689      	lsls	r1, r1, #26
2400903e:	d527      	bpl.n	24009090 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009040:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009042:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009046:	4919      	ldr	r1, [pc, #100]	; (240090ac <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009048:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400904e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009056:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240090a8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400905a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400905e:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009060:	ee06 3a90 	vmov	s13, r3
24009064:	ee05 1a90 	vmov	s11, r1
24009068:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400906c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009070:	ee76 6a86 	vadd.f32	s13, s13, s12
24009074:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24009078:	eee7 6a05 	vfma.f32	s13, s14, s10
2400907c:	ee66 6a26 	vmul.f32	s13, s12, s13
24009080:	e7a4      	b.n	24008fcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009082:	ee07 2a90 	vmov	s15, r2
24009086:	eddf 6a0a 	vldr	s13, [pc, #40]	; 240090b0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
2400908a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400908e:	e78a      	b.n	24008fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009090:	ee07 2a90 	vmov	s15, r2
24009094:	eddf 6a07 	vldr	s13, [pc, #28]	; 240090b4 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24009098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400909c:	e783      	b.n	24008fa6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
2400909e:	bf00      	nop
240090a0:	58024400 	.word	0x58024400
240090a4:	4a742400 	.word	0x4a742400
240090a8:	39000000 	.word	0x39000000
240090ac:	03d09000 	.word	0x03d09000
240090b0:	4b742400 	.word	0x4b742400
240090b4:	4c742400 	.word	0x4c742400

240090b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090b8:	4b4f      	ldr	r3, [pc, #316]	; (240091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
240090ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
240090be:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
240090c0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
240090c2:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
240090c6:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240090ca:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
240090cc:	d05c      	beq.n	24009188 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240090ce:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
240090d2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090d6:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240090da:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
240090de:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240090e0:	ee07 4a90 	vmov	s15, r4
240090e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
240090e8:	d003      	beq.n	240090f2 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
240090ea:	2902      	cmp	r1, #2
240090ec:	d075      	beq.n	240091da <HAL_RCCEx_GetPLL3ClockFreq+0x122>
240090ee:	2900      	cmp	r1, #0
240090f0:	d04f      	beq.n	24009192 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240090f2:	ee07 2a90 	vmov	s15, r2
240090f6:	eddf 6a41 	vldr	s13, [pc, #260]	; 240091fc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
240090fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24009100:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24009104:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24009200 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24009108:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400910c:	ee06 3a90 	vmov	s13, r3
24009110:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24009114:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009118:	ee76 6a85 	vadd.f32	s13, s13, s10
2400911c:	eee7 6a25 	vfma.f32	s13, s14, s11
24009120:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24009124:	4a34      	ldr	r2, [pc, #208]	; (240091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
24009126:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400912a:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400912c:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009130:	ee07 3a10 	vmov	s14, r3
24009134:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24009138:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400913a:	ee37 7a06 	vadd.f32	s14, s14, s12
2400913e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009146:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2400914a:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400914c:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009150:	ee07 3a10 	vmov	s14, r3
24009154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009158:	ee37 7a06 	vadd.f32	s14, s14, s12
2400915c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009164:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24009168:	6c13      	ldr	r3, [r2, #64]	; 0x40
2400916a:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400916e:	ee07 3a90 	vmov	s15, r3
24009172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009176:	ee77 7a86 	vadd.f32	s15, s15, s12
2400917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400917e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009182:	ed80 7a02 	vstr	s14, [r0, #8]
}
24009186:	4770      	bx	lr
24009188:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2400918a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400918e:	6082      	str	r2, [r0, #8]
}
24009190:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009192:	6819      	ldr	r1, [r3, #0]
24009194:	0689      	lsls	r1, r1, #26
24009196:	d527      	bpl.n	240091e8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009198:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400919a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400919e:	4919      	ldr	r1, [pc, #100]	; (24009204 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240091a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091a6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240091aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091ae:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009200 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
240091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091b6:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240091b8:	ee06 3a90 	vmov	s13, r3
240091bc:	ee05 1a90 	vmov	s11, r1
240091c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240091c4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240091c8:	ee76 6a86 	vadd.f32	s13, s13, s12
240091cc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240091d0:	eee7 6a05 	vfma.f32	s13, s14, s10
240091d4:	ee66 6a26 	vmul.f32	s13, s12, s13
240091d8:	e7a4      	b.n	24009124 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240091da:	ee07 2a90 	vmov	s15, r2
240091de:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24009208 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
240091e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091e6:	e78a      	b.n	240090fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240091e8:	ee07 2a90 	vmov	s15, r2
240091ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 2400920c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
240091f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091f4:	e783      	b.n	240090fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
240091f6:	bf00      	nop
240091f8:	58024400 	.word	0x58024400
240091fc:	4a742400 	.word	0x4a742400
24009200:	39000000 	.word	0x39000000
24009204:	03d09000 	.word	0x03d09000
24009208:	4b742400 	.word	0x4b742400
2400920c:	4c742400 	.word	0x4c742400

24009210 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009210:	4b4f      	ldr	r3, [pc, #316]	; (24009350 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
24009212:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009214:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24009216:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009218:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
2400921a:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400921e:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009222:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
24009224:	d05c      	beq.n	240092e0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009226:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400922a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400922e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009232:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24009236:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009238:	ee07 4a90 	vmov	s15, r4
2400923c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009240:	d07e      	beq.n	24009340 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
24009242:	2902      	cmp	r1, #2
24009244:	d075      	beq.n	24009332 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
24009246:	2900      	cmp	r1, #0
24009248:	d04f      	beq.n	240092ea <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400924a:	ee07 2a90 	vmov	s15, r2
2400924e:	eddf 6a41 	vldr	s13, [pc, #260]	; 24009354 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
24009252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24009258:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400925c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24009358 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24009260:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009264:	ee06 3a90 	vmov	s13, r3
24009268:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400926c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24009270:	ee76 6a85 	vadd.f32	s13, s13, s10
24009274:	eee7 6a25 	vfma.f32	s13, s14, s11
24009278:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400927c:	4a34      	ldr	r2, [pc, #208]	; (24009350 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
2400927e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009282:	6b13      	ldr	r3, [r2, #48]	; 0x30
24009284:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009288:	ee07 3a10 	vmov	s14, r3
2400928c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24009290:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24009292:	ee37 7a06 	vadd.f32	s14, s14, s12
24009296:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400929a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400929e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
240092a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
240092a4:	f3c3 4306 	ubfx	r3, r3, #16, #7
240092a8:	ee07 3a10 	vmov	s14, r3
240092ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240092b0:	ee37 7a06 	vadd.f32	s14, s14, s12
240092b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
240092b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240092bc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
240092c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
240092c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
240092c6:	ee07 3a90 	vmov	s15, r3
240092ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240092ce:	ee77 7a86 	vadd.f32	s15, s15, s12
240092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240092d6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240092da:	ed80 7a02 	vstr	s14, [r0, #8]
}
240092de:	4770      	bx	lr
240092e0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
240092e2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
240092e6:	6082      	str	r2, [r0, #8]
}
240092e8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240092ea:	6819      	ldr	r1, [r3, #0]
240092ec:	0689      	lsls	r1, r1, #26
240092ee:	d5ac      	bpl.n	2400924a <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092f0:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240092f2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092f6:	4919      	ldr	r1, [pc, #100]	; (2400935c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240092f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092fe:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009306:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009358 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
2400930a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400930e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009310:	ee06 3a90 	vmov	s13, r3
24009314:	ee05 1a90 	vmov	s11, r1
24009318:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400931c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24009320:	ee76 6a86 	vadd.f32	s13, s13, s12
24009324:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24009328:	eee7 6a05 	vfma.f32	s13, s14, s10
2400932c:	ee66 6a26 	vmul.f32	s13, s12, s13
24009330:	e7a4      	b.n	2400927c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009332:	ee07 2a90 	vmov	s15, r2
24009336:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24009360 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
2400933a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400933e:	e78a      	b.n	24009256 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009340:	ee07 2a90 	vmov	s15, r2
24009344:	eddf 6a07 	vldr	s13, [pc, #28]	; 24009364 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
24009348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400934c:	e783      	b.n	24009256 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
2400934e:	bf00      	nop
24009350:	58024400 	.word	0x58024400
24009354:	4c742400 	.word	0x4c742400
24009358:	39000000 	.word	0x39000000
2400935c:	03d09000 	.word	0x03d09000
24009360:	4b742400 	.word	0x4b742400
24009364:	4a742400 	.word	0x4a742400

24009368 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009368:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
2400936c:	430b      	orrs	r3, r1
{
2400936e:	b500      	push	{lr}
24009370:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009372:	f000 8084 	beq.w	2400947e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24009376:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
2400937a:	430b      	orrs	r3, r1
2400937c:	d039      	beq.n	240093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400937e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24009382:	430b      	orrs	r3, r1
24009384:	f000 80e6 	beq.w	24009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24009388:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
2400938c:	430b      	orrs	r3, r1
2400938e:	f000 8089 	beq.w	240094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24009392:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24009396:	430b      	orrs	r3, r1
24009398:	d061      	beq.n	2400945e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2400939a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400939e:	430b      	orrs	r3, r1
240093a0:	f000 8112 	beq.w	240095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
240093a4:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
240093a8:	430b      	orrs	r3, r1
240093aa:	f000 80a3 	beq.w	240094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
240093ae:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
240093b2:	430b      	orrs	r3, r1
240093b4:	f000 80fa 	beq.w	240095ac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
240093b8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
240093bc:	430b      	orrs	r3, r1
240093be:	f000 8143 	beq.w	24009648 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
240093c2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
240093c6:	ea50 0301 	orrs.w	r3, r0, r1
240093ca:	d137      	bne.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
240093cc:	4a99      	ldr	r2, [pc, #612]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240093ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
240093d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
240093d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240093d8:	f000 8083 	beq.w	240094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240093dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240093e0:	f000 8156 	beq.w	24009690 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240093e4:	bb53      	cbnz	r3, 2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240093e6:	6810      	ldr	r0, [r2, #0]
240093e8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240093ec:	d044      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
240093ee:	4892      	ldr	r0, [pc, #584]	; (24009638 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
240093f0:	e042      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
240093f2:	4a90      	ldr	r2, [pc, #576]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240093f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
240093f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
240093fa:	2b80      	cmp	r3, #128	; 0x80
240093fc:	f000 80a5 	beq.w	2400954a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009400:	d920      	bls.n	24009444 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
24009402:	2bc0      	cmp	r3, #192	; 0xc0
24009404:	d037      	beq.n	24009476 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400940a:	d117      	bne.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400940c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400940e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009414:	0749      	lsls	r1, r1, #29
24009416:	d502      	bpl.n	2400941e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24009418:	2b00      	cmp	r3, #0
2400941a:	f000 80c1 	beq.w	240095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400941e:	4a85      	ldr	r2, [pc, #532]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009420:	6812      	ldr	r2, [r2, #0]
24009422:	05d0      	lsls	r0, r2, #23
24009424:	d503      	bpl.n	2400942e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
24009426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400942a:	f000 8101 	beq.w	24009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400942e:	4a81      	ldr	r2, [pc, #516]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009430:	6812      	ldr	r2, [r2, #0]
24009432:	0391      	lsls	r1, r2, #14
24009434:	d502      	bpl.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400943a:	d0d8      	beq.n	240093ee <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
2400943c:	2000      	movs	r0, #0
}
2400943e:	b005      	add	sp, #20
24009440:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009444:	2b00      	cmp	r3, #0
24009446:	d04c      	beq.n	240094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009448:	2b40      	cmp	r3, #64	; 0x40
2400944a:	d1f7      	bne.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400944c:	6810      	ldr	r0, [r2, #0]
2400944e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009452:	d011      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009454:	a801      	add	r0, sp, #4
24009456:	f7ff fd83 	bl	24008f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400945a:	9801      	ldr	r0, [sp, #4]
2400945c:	e00c      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400945e:	4a75      	ldr	r2, [pc, #468]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009460:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009462:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400946a:	d06e      	beq.n	2400954a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400946c:	d937      	bls.n	240094de <HAL_RCCEx_GetPeriphCLKFreq+0x176>
2400946e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24009472:	f040 8087 	bne.w	24009584 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009476:	4871      	ldr	r0, [pc, #452]	; (2400963c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009478:	b005      	add	sp, #20
2400947a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2400947e:	4b6d      	ldr	r3, [pc, #436]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009482:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24009486:	2b04      	cmp	r3, #4
24009488:	d8d8      	bhi.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400948a:	a201      	add	r2, pc, #4	; (adr r2, 24009490 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
2400948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24009490:	24009533 	.word	0x24009533
24009494:	2400950f 	.word	0x2400950f
24009498:	2400951f 	.word	0x2400951f
2400949c:	24009477 	.word	0x24009477
240094a0:	2400951b 	.word	0x2400951b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
240094a4:	4a63      	ldr	r2, [pc, #396]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240094a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240094a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
240094ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240094b0:	d04b      	beq.n	2400954a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240094b2:	d944      	bls.n	2400953e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
240094b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240094b8:	d0dd      	beq.n	24009476 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240094ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240094be:	d1bd      	bne.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240094c0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240094c2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240094c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240094c8:	0752      	lsls	r2, r2, #29
240094ca:	d5a8      	bpl.n	2400941e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
240094cc:	2b00      	cmp	r3, #0
240094ce:	d1a6      	bne.n	2400941e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240094d0:	4b58      	ldr	r3, [pc, #352]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240094d2:	485b      	ldr	r0, [pc, #364]	; (24009640 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
240094d4:	681b      	ldr	r3, [r3, #0]
240094d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240094da:	40d8      	lsrs	r0, r3
240094dc:	e7cc      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
240094de:	2b00      	cmp	r3, #0
240094e0:	d154      	bne.n	2400958c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240094e2:	6810      	ldr	r0, [r2, #0]
240094e4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240094e8:	d0c6      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240094ea:	a801      	add	r0, sp, #4
240094ec:	f7ff fe90 	bl	24009210 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240094f0:	9802      	ldr	r0, [sp, #8]
240094f2:	e7c1      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
240094f4:	4a4f      	ldr	r2, [pc, #316]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240094f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240094f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
240094fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009500:	f000 80d0 	beq.w	240096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24009504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009508:	d0da      	beq.n	240094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400950a:	2b00      	cmp	r3, #0
2400950c:	d196      	bne.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400950e:	4b49      	ldr	r3, [pc, #292]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009510:	6818      	ldr	r0, [r3, #0]
24009512:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009516:	d0af      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009518:	e79c      	b.n	24009454 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400951a:	4a46      	ldr	r2, [pc, #280]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400951c:	e776      	b.n	2400940c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400951e:	4b45      	ldr	r3, [pc, #276]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009520:	6818      	ldr	r0, [r3, #0]
24009522:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009526:	d0a7      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009528:	a801      	add	r0, sp, #4
2400952a:	f7ff fdc5 	bl	240090b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400952e:	9801      	ldr	r0, [sp, #4]
24009530:	e7a2      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009532:	4b40      	ldr	r3, [pc, #256]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009534:	6818      	ldr	r0, [r3, #0]
24009536:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400953a:	d09d      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400953c:	e7d5      	b.n	240094ea <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400953e:	2b00      	cmp	r3, #0
24009540:	d0cf      	beq.n	240094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24009546:	d081      	beq.n	2400944c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009548:	e778      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400954a:	6810      	ldr	r0, [r2, #0]
2400954c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009550:	d092      	beq.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009552:	e7e9      	b.n	24009528 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24009554:	4a37      	ldr	r2, [pc, #220]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009556:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009558:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
2400955c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24009560:	d0f3      	beq.n	2400954a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009562:	d806      	bhi.n	24009572 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009564:	2b00      	cmp	r3, #0
24009566:	d0bc      	beq.n	240094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2400956c:	f43f af6e 	beq.w	2400944c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009570:	e764      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009572:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24009576:	f43f af7e 	beq.w	24009476 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400957a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400957e:	f43f af45 	beq.w	2400940c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
24009582:	e75b      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
24009584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009588:	d09a      	beq.n	240094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400958a:	e757      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400958c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24009590:	f43f af5c 	beq.w	2400944c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009594:	e752      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009596:	6810      	ldr	r0, [r2, #0]
24009598:	f010 0004 	ands.w	r0, r0, #4
2400959c:	f43f af6c 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240095a0:	6813      	ldr	r3, [r2, #0]
240095a2:	4827      	ldr	r0, [pc, #156]	; (24009640 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
240095a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240095a8:	40d8      	lsrs	r0, r3
240095aa:	e765      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
240095ac:	4b21      	ldr	r3, [pc, #132]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240095ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
240095b0:	03d2      	lsls	r2, r2, #15
240095b2:	d5bf      	bpl.n	24009534 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240095b4:	6818      	ldr	r0, [r3, #0]
240095b6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240095ba:	f43f af5d 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240095be:	a801      	add	r0, sp, #4
240095c0:	f7ff fcce 	bl	24008f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
240095c4:	9803      	ldr	r0, [sp, #12]
240095c6:	e757      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
240095c8:	4a1a      	ldr	r2, [pc, #104]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240095ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
240095cc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
240095d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240095d4:	d0df      	beq.n	24009596 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
240095d6:	d810      	bhi.n	240095fa <HAL_RCCEx_GetPeriphCLKFreq+0x292>
240095d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240095dc:	d058      	beq.n	24009690 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240095de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240095e2:	d118      	bne.n	24009616 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240095e4:	4b13      	ldr	r3, [pc, #76]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240095e6:	6818      	ldr	r0, [r3, #0]
240095e8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240095ec:	f43f af44 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240095f0:	a801      	add	r0, sp, #4
240095f2:	f7ff fd61 	bl	240090b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
240095f6:	9802      	ldr	r0, [sp, #8]
240095f8:	e73e      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
240095fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240095fe:	d012      	beq.n	24009626 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
24009600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009604:	f47f af1a 	bne.w	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009608:	4b0a      	ldr	r3, [pc, #40]	; (24009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400960a:	6818      	ldr	r0, [r3, #0]
2400960c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009610:	f43f af32 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009614:	e6eb      	b.n	240093ee <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009616:	2b00      	cmp	r3, #0
24009618:	f47f af10 	bne.w	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
2400961c:	b005      	add	sp, #20
2400961e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24009622:	f7fe bd47 	b.w	240080b4 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009626:	6810      	ldr	r0, [r2, #0]
24009628:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400962c:	f43f af24 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
24009630:	4804      	ldr	r0, [pc, #16]	; (24009644 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
24009632:	e721      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009634:	58024400 	.word	0x58024400
24009638:	00f42400 	.word	0x00f42400
2400963c:	00bb8000 	.word	0x00bb8000
24009640:	03d09000 	.word	0x03d09000
24009644:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24009648:	4b28      	ldr	r3, [pc, #160]	; (240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400964c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
24009650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009654:	d037      	beq.n	240096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24009656:	d814      	bhi.n	24009682 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24009658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400965c:	d03f      	beq.n	240096de <HAL_RCCEx_GetPeriphCLKFreq+0x376>
2400965e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009662:	d0bf      	beq.n	240095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009664:	2b00      	cmp	r3, #0
24009666:	f47f aee9 	bne.w	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
2400966a:	f7fe fce3 	bl	24008034 <HAL_RCC_GetHCLKFreq>
2400966e:	4b1f      	ldr	r3, [pc, #124]	; (240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009670:	4a1f      	ldr	r2, [pc, #124]	; (240096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
24009672:	6a1b      	ldr	r3, [r3, #32]
24009674:	f3c3 1302 	ubfx	r3, r3, #4, #3
24009678:	5cd3      	ldrb	r3, [r2, r3]
2400967a:	f003 031f 	and.w	r3, r3, #31
2400967e:	40d8      	lsrs	r0, r3
        break;
24009680:	e6fa      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24009682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009686:	d017      	beq.n	240096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24009688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2400968c:	d0bc      	beq.n	24009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400968e:	e6d5      	b.n	2400943c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009690:	6810      	ldr	r0, [r2, #0]
24009692:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009696:	f43f aeef 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400969a:	a801      	add	r0, sp, #4
2400969c:	f7ff fc60 	bl	24008f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
240096a0:	9802      	ldr	r0, [sp, #8]
240096a2:	e6e9      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240096a4:	6810      	ldr	r0, [r2, #0]
240096a6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240096aa:	f43f aee5 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240096ae:	a801      	add	r0, sp, #4
240096b0:	f7ff fd02 	bl	240090b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
240096b4:	9803      	ldr	r0, [sp, #12]
240096b6:	e6df      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240096b8:	4b0c      	ldr	r3, [pc, #48]	; (240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240096ba:	6818      	ldr	r0, [r3, #0]
240096bc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
240096c0:	f43f aeda 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240096c4:	e7b4      	b.n	24009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240096c6:	4b09      	ldr	r3, [pc, #36]	; (240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240096c8:	6818      	ldr	r0, [r3, #0]
240096ca:	f010 0004 	ands.w	r0, r0, #4
240096ce:	f43f aed3 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240096d2:	681b      	ldr	r3, [r3, #0]
240096d4:	4807      	ldr	r0, [pc, #28]	; (240096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
240096d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240096da:	40d8      	lsrs	r0, r3
240096dc:	e6cc      	b.n	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240096de:	4b03      	ldr	r3, [pc, #12]	; (240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240096e0:	6818      	ldr	r0, [r3, #0]
240096e2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240096e6:	f43f aec7 	beq.w	24009478 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240096ea:	e7d6      	b.n	2400969a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
240096ec:	58024400 	.word	0x58024400
240096f0:	2401a63c 	.word	0x2401a63c
240096f4:	03d09000 	.word	0x03d09000

240096f8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
240096f8:	2800      	cmp	r0, #0
240096fa:	d03c      	beq.n	24009776 <HAL_RNG_Init+0x7e>
{
240096fc:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
240096fe:	7a43      	ldrb	r3, [r0, #9]
24009700:	4604      	mov	r4, r0
24009702:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009706:	2b00      	cmp	r3, #0
24009708:	d031      	beq.n	2400976e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400970a:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
2400970c:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400970e:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
24009710:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009712:	6813      	ldr	r3, [r2, #0]
24009714:	f023 0320 	bic.w	r3, r3, #32
24009718:	430b      	orrs	r3, r1
2400971a:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
2400971c:	6822      	ldr	r2, [r4, #0]
2400971e:	6813      	ldr	r3, [r2, #0]
24009720:	f043 0304 	orr.w	r3, r3, #4
24009724:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24009726:	6823      	ldr	r3, [r4, #0]
24009728:	685b      	ldr	r3, [r3, #4]
2400972a:	0658      	lsls	r0, r3, #25
2400972c:	d503      	bpl.n	24009736 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400972e:	2304      	movs	r3, #4
    return HAL_ERROR;
24009730:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
24009732:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009734:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009736:	f7fb f9cd 	bl	24004ad4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400973a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
2400973c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400973e:	685b      	ldr	r3, [r3, #4]
24009740:	0759      	lsls	r1, r3, #29
24009742:	d50e      	bpl.n	24009762 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009744:	f7fb f9c6 	bl	24004ad4 <HAL_GetTick>
24009748:	1b43      	subs	r3, r0, r5
2400974a:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400974c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400974e:	d9f6      	bls.n	2400973e <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009750:	685a      	ldr	r2, [r3, #4]
24009752:	0752      	lsls	r2, r2, #29
24009754:	d5f3      	bpl.n	2400973e <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
24009756:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009758:	2302      	movs	r3, #2
        return HAL_ERROR;
2400975a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
2400975c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400975e:	60e3      	str	r3, [r4, #12]
}
24009760:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009762:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009764:	2201      	movs	r2, #1
  return HAL_OK;
24009766:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009768:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400976a:	60e3      	str	r3, [r4, #12]
}
2400976c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400976e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
24009770:	f7fa fcce 	bl	24004110 <HAL_RNG_MspInit>
24009774:	e7c9      	b.n	2400970a <HAL_RNG_Init+0x12>
    return HAL_ERROR;
24009776:	2001      	movs	r0, #1
}
24009778:	4770      	bx	lr
2400977a:	bf00      	nop

2400977c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
2400977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400977e:	7a03      	ldrb	r3, [r0, #8]
24009780:	2b01      	cmp	r3, #1
24009782:	d027      	beq.n	240097d4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24009784:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24009786:	2201      	movs	r2, #1
24009788:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
2400978a:	4293      	cmp	r3, r2
2400978c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400978e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
24009790:	d006      	beq.n	240097a0 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009792:	2304      	movs	r3, #4
    status = HAL_ERROR;
24009794:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009796:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24009798:	2300      	movs	r3, #0
2400979a:	7223      	strb	r3, [r4, #8]

  return status;
}
2400979c:	4630      	mov	r0, r6
2400979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
240097a0:	2302      	movs	r3, #2
240097a2:	460d      	mov	r5, r1
240097a4:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
240097a6:	f7fb f995 	bl	24004ad4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240097aa:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
240097ac:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240097ae:	685a      	ldr	r2, [r3, #4]
240097b0:	07d2      	lsls	r2, r2, #31
240097b2:	d412      	bmi.n	240097da <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240097b4:	f7fb f98e 	bl	24004ad4 <HAL_GetTick>
240097b8:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240097ba:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240097bc:	2802      	cmp	r0, #2
240097be:	d9f6      	bls.n	240097ae <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240097c0:	685a      	ldr	r2, [r3, #4]
240097c2:	f012 0201 	ands.w	r2, r2, #1
240097c6:	d1f2      	bne.n	240097ae <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
240097c8:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240097ca:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
240097cc:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
240097ce:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240097d0:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
240097d2:	e7e3      	b.n	2400979c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
240097d4:	2602      	movs	r6, #2
}
240097d6:	4630      	mov	r0, r6
240097d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
240097da:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
240097dc:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
240097de:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
240097e0:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
240097e2:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
240097e4:	7262      	strb	r2, [r4, #9]
240097e6:	e7d7      	b.n	24009798 <HAL_RNG_GenerateRandomNumber+0x1c>

240097e8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
240097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240097ea:	4ba6      	ldr	r3, [pc, #664]	; (24009a84 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
240097ec:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240097ee:	6802      	ldr	r2, [r0, #0]
240097f0:	429a      	cmp	r2, r3
240097f2:	d01c      	beq.n	2400982e <HAL_SAI_Init.part.0+0x46>
240097f4:	3320      	adds	r3, #32
240097f6:	429a      	cmp	r2, r3
240097f8:	d019      	beq.n	2400982e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240097fa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
240097fe:	429a      	cmp	r2, r3
24009800:	d04d      	beq.n	2400989e <HAL_SAI_Init.part.0+0xb6>
24009802:	3320      	adds	r3, #32
24009804:	429a      	cmp	r2, r3
24009806:	d04a      	beq.n	2400989e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009808:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400980c:	429a      	cmp	r2, r3
2400980e:	f000 8134 	beq.w	24009a7a <HAL_SAI_Init.part.0+0x292>
24009812:	3320      	adds	r3, #32
24009814:	429a      	cmp	r2, r3
24009816:	f000 8130 	beq.w	24009a7a <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
2400981a:	4b9b      	ldr	r3, [pc, #620]	; (24009a88 <HAL_SAI_Init.part.0+0x2a0>)
2400981c:	429a      	cmp	r2, r3
2400981e:	f000 812e 	beq.w	24009a7e <HAL_SAI_Init.part.0+0x296>
24009822:	3320      	adds	r3, #32
24009824:	429a      	cmp	r2, r3
24009826:	f000 812a 	beq.w	24009a7e <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2400982a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
2400982c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400982e:	4e97      	ldr	r6, [pc, #604]	; (24009a8c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009830:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24009834:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009838:	2b00      	cmp	r3, #0
2400983a:	d037      	beq.n	240098ac <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400983c:	4b94      	ldr	r3, [pc, #592]	; (24009a90 <HAL_SAI_Init.part.0+0x2a8>)
2400983e:	4995      	ldr	r1, [pc, #596]	; (24009a94 <HAL_SAI_Init.part.0+0x2ac>)
24009840:	681b      	ldr	r3, [r3, #0]
24009842:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24009846:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009848:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400984a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400984e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009850:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24009852:	2b00      	cmp	r3, #0
24009854:	d031      	beq.n	240098ba <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009856:	6822      	ldr	r2, [r4, #0]
    count--;
24009858:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400985a:	6815      	ldr	r5, [r2, #0]
2400985c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
24009860:	d1f7      	bne.n	24009852 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
24009862:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
24009864:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
24009866:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
24009868:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
2400986c:	f000 8156 	beq.w	24009b1c <HAL_SAI_Init.part.0+0x334>
24009870:	4293      	cmp	r3, r2
24009872:	bf19      	ittee	ne
24009874:	4610      	movne	r0, r2
24009876:	2103      	movne	r1, #3
24009878:	2123      	moveq	r1, #35	; 0x23
2400987a:	2022      	moveq	r0, #34	; 0x22
2400987c:	bf15      	itete	ne
2400987e:	2701      	movne	r7, #1
24009880:	2721      	moveq	r7, #33	; 0x21
24009882:	2200      	movne	r2, #0
24009884:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
24009886:	68a3      	ldr	r3, [r4, #8]
24009888:	3b01      	subs	r3, #1
2400988a:	2b04      	cmp	r3, #4
2400988c:	f200 8181 	bhi.w	24009b92 <HAL_SAI_Init.part.0+0x3aa>
24009890:	e8df f013 	tbh	[pc, r3, lsl #1]
24009894:	001c00e8 	.word	0x001c00e8
24009898:	001b00ef 	.word	0x001b00ef
2400989c:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
2400989e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
240098a2:	4e7d      	ldr	r6, [pc, #500]	; (24009a98 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
240098a4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
240098a8:	2b00      	cmp	r3, #0
240098aa:	d1c7      	bne.n	2400983c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
240098ac:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
240098ae:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
240098b2:	f7fa fc95 	bl	240041e0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
240098b6:	6822      	ldr	r2, [r4, #0]
240098b8:	e7c0      	b.n	2400983c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240098ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
240098be:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240098c4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
240098c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
240098ca:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
240098cc:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
240098d0:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
240098d2:	6a23      	ldr	r3, [r4, #32]
240098d4:	2b00      	cmp	r3, #0
240098d6:	d04a      	beq.n	2400996e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
240098d8:	6823      	ldr	r3, [r4, #0]
240098da:	4a6a      	ldr	r2, [pc, #424]	; (24009a84 <HAL_SAI_Init.part.0+0x29c>)
240098dc:	4293      	cmp	r3, r2
240098de:	f000 8131 	beq.w	24009b44 <HAL_SAI_Init.part.0+0x35c>
240098e2:	486e      	ldr	r0, [pc, #440]	; (24009a9c <HAL_SAI_Init.part.0+0x2b4>)
240098e4:	1a18      	subs	r0, r3, r0
240098e6:	fab0 f080 	clz	r0, r0
240098ea:	0940      	lsrs	r0, r0, #5
240098ec:	2800      	cmp	r0, #0
240098ee:	f040 8129 	bne.w	24009b44 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240098f2:	4a6b      	ldr	r2, [pc, #428]	; (24009aa0 <HAL_SAI_Init.part.0+0x2b8>)
240098f4:	4293      	cmp	r3, r2
240098f6:	f000 8133 	beq.w	24009b60 <HAL_SAI_Init.part.0+0x378>
240098fa:	3220      	adds	r2, #32
240098fc:	4293      	cmp	r3, r2
240098fe:	f000 812f 	beq.w	24009b60 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009902:	4a68      	ldr	r2, [pc, #416]	; (24009aa4 <HAL_SAI_Init.part.0+0x2bc>)
24009904:	4293      	cmp	r3, r2
24009906:	f000 8124 	beq.w	24009b52 <HAL_SAI_Init.part.0+0x36a>
2400990a:	3220      	adds	r2, #32
2400990c:	4293      	cmp	r3, r2
2400990e:	f000 8120 	beq.w	24009b52 <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
24009912:	4a5d      	ldr	r2, [pc, #372]	; (24009a88 <HAL_SAI_Init.part.0+0x2a0>)
24009914:	4293      	cmp	r3, r2
24009916:	f000 8133 	beq.w	24009b80 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
2400991a:	4a63      	ldr	r2, [pc, #396]	; (24009aa8 <HAL_SAI_Init.part.0+0x2c0>)
2400991c:	4293      	cmp	r3, r2
2400991e:	f000 8129 	beq.w	24009b74 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24009922:	69a3      	ldr	r3, [r4, #24]
24009924:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009928:	f000 80fd 	beq.w	24009b26 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400992c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400992e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009932:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009934:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009938:	ea4f 0340 	mov.w	r3, r0, lsl #1
2400993c:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400993e:	bf0c      	ite	eq
24009940:	2202      	moveq	r2, #2
24009942:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009944:	fb00 f202 	mul.w	r2, r0, r2
24009948:	0212      	lsls	r2, r2, #8
2400994a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400994e:	4a57      	ldr	r2, [pc, #348]	; (24009aac <HAL_SAI_Init.part.0+0x2c4>)
24009950:	fba2 0203 	umull	r0, r2, r2, r3
24009954:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009956:	eb02 0082 	add.w	r0, r2, r2, lsl #2
2400995a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400995e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
24009960:	bf08      	it	eq
24009962:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009964:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009966:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009968:	d101      	bne.n	2400996e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2400996a:	0852      	lsrs	r2, r2, #1
2400996c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400996e:	6863      	ldr	r3, [r4, #4]
24009970:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009974:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009976:	f040 80cc 	bne.w	24009b12 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400997a:	2b01      	cmp	r3, #1
2400997c:	bf14      	ite	ne
2400997e:	f44f 7500 	movne.w	r5, #512	; 0x200
24009982:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009984:	f7fb f8be 	bl	24004b04 <HAL_GetREVID>
24009988:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400998c:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400998e:	f0c0 80ac 	bcc.w	24009aea <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009992:	6811      	ldr	r1, [r2, #0]
24009994:	4b46      	ldr	r3, [pc, #280]	; (24009ab0 <HAL_SAI_Init.part.0+0x2c8>)
24009996:	400b      	ands	r3, r1
24009998:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400999a:	6c62      	ldr	r2, [r4, #68]	; 0x44
2400999c:	e9d4 1300 	ldrd	r1, r3, [r4]
240099a0:	431a      	orrs	r2, r3
240099a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240099a4:	431a      	orrs	r2, r3
240099a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
240099a8:	431a      	orrs	r2, r3
240099aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240099ac:	431a      	orrs	r2, r3
240099ae:	6963      	ldr	r3, [r4, #20]
240099b0:	431a      	orrs	r2, r3
240099b2:	69a3      	ldr	r3, [r4, #24]
240099b4:	431a      	orrs	r2, r3
240099b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240099b8:	431a      	orrs	r2, r3
240099ba:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240099bc:	431a      	orrs	r2, r3
240099be:	680b      	ldr	r3, [r1, #0]
240099c0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240099c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240099c4:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
240099c8:	4b3a      	ldr	r3, [pc, #232]	; (24009ab4 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240099ca:	433a      	orrs	r2, r7
240099cc:	432a      	orrs	r2, r5
240099ce:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
240099d0:	6822      	ldr	r2, [r4, #0]
240099d2:	6851      	ldr	r1, [r2, #4]
240099d4:	400b      	ands	r3, r1
240099d6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
240099d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
240099da:	69e3      	ldr	r3, [r4, #28]
240099dc:	6822      	ldr	r2, [r4, #0]
240099de:	430b      	orrs	r3, r1
240099e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
240099e2:	430b      	orrs	r3, r1
240099e4:	6851      	ldr	r1, [r2, #4]
240099e6:	430b      	orrs	r3, r1
240099e8:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
240099ea:	6822      	ldr	r2, [r4, #0]
240099ec:	4b32      	ldr	r3, [pc, #200]	; (24009ab8 <HAL_SAI_Init.part.0+0x2d0>)
240099ee:	6891      	ldr	r1, [r2, #8]
240099f0:	400b      	ands	r3, r1
240099f2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
240099f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240099f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
240099f8:	6821      	ldr	r1, [r4, #0]
240099fa:	4313      	orrs	r3, r2
240099fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
240099fe:	6888      	ldr	r0, [r1, #8]
24009a00:	4313      	orrs	r3, r2
24009a02:	6d62      	ldr	r2, [r4, #84]	; 0x54
24009a04:	4303      	orrs	r3, r0
24009a06:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009a08:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009a0c:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24009a0e:	6da2      	ldr	r2, [r4, #88]	; 0x58
24009a10:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
24009a16:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009a18:	6822      	ldr	r2, [r4, #0]
24009a1a:	68d3      	ldr	r3, [r2, #12]
24009a1c:	4003      	ands	r3, r0
24009a1e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009a20:	6821      	ldr	r1, [r4, #0]
24009a22:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
24009a26:	68ca      	ldr	r2, [r1, #12]
24009a28:	4303      	orrs	r3, r0
24009a2a:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009a2c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009a32:	6f22      	ldr	r2, [r4, #112]	; 0x70
24009a34:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009a36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009a3a:	4a12      	ldr	r2, [pc, #72]	; (24009a84 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009a3c:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009a3e:	6823      	ldr	r3, [r4, #0]
24009a40:	4293      	cmp	r3, r2
24009a42:	d03f      	beq.n	24009ac4 <HAL_SAI_Init.part.0+0x2dc>
24009a44:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009a48:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009a4c:	4293      	cmp	r3, r2
24009a4e:	d039      	beq.n	24009ac4 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009a50:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
24009a52:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009a54:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
24009a58:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
24009a5a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
24009a5e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
24009a64:	f44f 6780 	mov.w	r7, #1024	; 0x400
24009a68:	e732      	b.n	240098d0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24009a6a:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009a6c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24009a70:	e72e      	b.n	240098d0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
24009a72:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009a74:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24009a78:	e72a      	b.n	240098d0 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
24009a7a:	4e10      	ldr	r6, [pc, #64]	; (24009abc <HAL_SAI_Init.part.0+0x2d4>)
24009a7c:	e6d8      	b.n	24009830 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
24009a7e:	4e10      	ldr	r6, [pc, #64]	; (24009ac0 <HAL_SAI_Init.part.0+0x2d8>)
24009a80:	e6d6      	b.n	24009830 <HAL_SAI_Init.part.0+0x48>
24009a82:	bf00      	nop
24009a84:	40015804 	.word	0x40015804
24009a88:	58005404 	.word	0x58005404
24009a8c:	40015800 	.word	0x40015800
24009a90:	20000750 	.word	0x20000750
24009a94:	95cbec1b 	.word	0x95cbec1b
24009a98:	40015c00 	.word	0x40015c00
24009a9c:	40015824 	.word	0x40015824
24009aa0:	40015c04 	.word	0x40015c04
24009aa4:	40016004 	.word	0x40016004
24009aa8:	58005424 	.word	0x58005424
24009aac:	cccccccd 	.word	0xcccccccd
24009ab0:	f005c010 	.word	0xf005c010
24009ab4:	ffff1ff0 	.word	0xffff1ff0
24009ab8:	fff88000 	.word	0xfff88000
24009abc:	40016000 	.word	0x40016000
24009ac0:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
24009ac4:	6c73      	ldr	r3, [r6, #68]	; 0x44
24009ac6:	f023 0301 	bic.w	r3, r3, #1
24009aca:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
24009acc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24009ad0:	2b01      	cmp	r3, #1
24009ad2:	d1bd      	bne.n	24009a50 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009ad4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
24009ad8:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009ada:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24009ade:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
24009ae0:	6c73      	ldr	r3, [r6, #68]	; 0x44
24009ae2:	f043 0301 	orr.w	r3, r3, #1
24009ae6:	6473      	str	r3, [r6, #68]	; 0x44
24009ae8:	e7b2      	b.n	24009a50 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009aea:	6811      	ldr	r1, [r2, #0]
24009aec:	4b2a      	ldr	r3, [pc, #168]	; (24009b98 <HAL_SAI_Init.part.0+0x3b0>)
24009aee:	400b      	ands	r3, r1
24009af0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009af2:	6c62      	ldr	r2, [r4, #68]	; 0x44
24009af4:	e9d4 1300 	ldrd	r1, r3, [r4]
24009af8:	431a      	orrs	r2, r3
24009afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24009afc:	431a      	orrs	r2, r3
24009afe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24009b00:	431a      	orrs	r2, r3
24009b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009b04:	431a      	orrs	r2, r3
24009b06:	6963      	ldr	r3, [r4, #20]
24009b08:	431a      	orrs	r2, r3
24009b0a:	69a3      	ldr	r3, [r4, #24]
24009b0c:	431a      	orrs	r2, r3
24009b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24009b10:	e754      	b.n	240099bc <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
24009b12:	2b01      	cmp	r3, #1
24009b14:	bf08      	it	eq
24009b16:	f44f 7500 	moveq.w	r5, #512	; 0x200
24009b1a:	e733      	b.n	24009984 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
24009b1c:	2113      	movs	r1, #19
24009b1e:	2012      	movs	r0, #18
24009b20:	2711      	movs	r7, #17
24009b22:	2210      	movs	r2, #16
24009b24:	e6af      	b.n	24009886 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009b26:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009b28:	2904      	cmp	r1, #4
24009b2a:	d030      	beq.n	24009b8e <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
24009b2c:	2908      	cmp	r1, #8
24009b2e:	d01e      	beq.n	24009b6e <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
24009b30:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
24009b32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24009b36:	0043      	lsls	r3, r0, #1
24009b38:	6a20      	ldr	r0, [r4, #32]
24009b3a:	fb00 f202 	mul.w	r2, r0, r2
24009b3e:	fbb3 f3f2 	udiv	r3, r3, r2
24009b42:	e704      	b.n	2400994e <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24009b44:	f44f 7080 	mov.w	r0, #256	; 0x100
24009b48:	2100      	movs	r1, #0
24009b4a:	f7ff fc0d 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009b4e:	6823      	ldr	r3, [r4, #0]
24009b50:	e6cf      	b.n	240098f2 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
24009b52:	f44f 7000 	mov.w	r0, #512	; 0x200
24009b56:	2100      	movs	r1, #0
24009b58:	f7ff fc06 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
24009b5c:	6823      	ldr	r3, [r4, #0]
24009b5e:	e6d8      	b.n	24009912 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
24009b60:	f44f 7000 	mov.w	r0, #512	; 0x200
24009b64:	2100      	movs	r1, #0
24009b66:	f7ff fbff 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009b6a:	6823      	ldr	r3, [r4, #0]
24009b6c:	e6c9      	b.n	24009902 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
24009b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
24009b72:	e7de      	b.n	24009b32 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
24009b74:	2100      	movs	r1, #0
24009b76:	f44f 6000 	mov.w	r0, #2048	; 0x800
24009b7a:	f7ff fbf5 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
24009b7e:	e6d0      	b.n	24009922 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24009b80:	f44f 6080 	mov.w	r0, #1024	; 0x400
24009b84:	2100      	movs	r1, #0
24009b86:	f7ff fbef 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
24009b8a:	6823      	ldr	r3, [r4, #0]
24009b8c:	e6c5      	b.n	2400991a <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
24009b8e:	2240      	movs	r2, #64	; 0x40
24009b90:	e7cf      	b.n	24009b32 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
24009b92:	2700      	movs	r7, #0
24009b94:	e69c      	b.n	240098d0 <HAL_SAI_Init.part.0+0xe8>
24009b96:	bf00      	nop
24009b98:	f805c010 	.word	0xf805c010

24009b9c <HAL_SAI_InitProtocol>:
  switch (protocol)
24009b9c:	2902      	cmp	r1, #2
{
24009b9e:	b538      	push	{r3, r4, r5, lr}
24009ba0:	4604      	mov	r4, r0
  switch (protocol)
24009ba2:	d935      	bls.n	24009c10 <HAL_SAI_InitProtocol+0x74>
24009ba4:	1ec8      	subs	r0, r1, #3
24009ba6:	2801      	cmp	r0, #1
24009ba8:	d830      	bhi.n	24009c0c <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009baa:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009bac:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009bae:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009bb0:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
24009bb2:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
24009bb4:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24009bb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009bba:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009bbc:	6860      	ldr	r0, [r4, #4]
24009bbe:	f030 0002 	bics.w	r0, r0, #2
24009bc2:	bf0c      	ite	eq
24009bc4:	2501      	moveq	r5, #1
24009bc6:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
24009bc8:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009bca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
24009bce:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
24009bd0:	bf0c      	ite	eq
24009bd2:	2001      	moveq	r0, #1
24009bd4:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009bd6:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24009bd8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
24009bdc:	65a0      	str	r0, [r4, #88]	; 0x58
24009bde:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
24009be0:	2a03      	cmp	r2, #3
24009be2:	d813      	bhi.n	24009c0c <HAL_SAI_InitProtocol+0x70>
24009be4:	e8df f002 	tbb	[pc, r2]
24009be8:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24009bec:	6823      	ldr	r3, [r4, #0]
24009bee:	4a47      	ldr	r2, [pc, #284]	; (24009d0c <HAL_SAI_InitProtocol+0x170>)
24009bf0:	4293      	cmp	r3, r2
24009bf2:	d005      	beq.n	24009c00 <HAL_SAI_InitProtocol+0x64>
24009bf4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009bf8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009bfc:	4293      	cmp	r3, r2
24009bfe:	d105      	bne.n	24009c0c <HAL_SAI_InitProtocol+0x70>
24009c00:	6863      	ldr	r3, [r4, #4]
24009c02:	2b01      	cmp	r3, #1
24009c04:	d102      	bne.n	24009c0c <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24009c06:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009c08:	2b00      	cmp	r3, #0
24009c0a:	d037      	beq.n	24009c7c <HAL_SAI_InitProtocol+0xe0>
}
24009c0c:	2001      	movs	r0, #1
24009c0e:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009c10:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009c12:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009c14:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009c16:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
24009c18:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009c1a:	6860      	ldr	r0, [r4, #4]
24009c1c:	f030 0002 	bics.w	r0, r0, #2
24009c20:	bf14      	ite	ne
24009c22:	2001      	movne	r0, #1
24009c24:	2000      	moveq	r0, #0
24009c26:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
24009c28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
24009c2c:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24009c2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009c32:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
24009c34:	f013 0001 	ands.w	r0, r3, #1
24009c38:	d1e8      	bne.n	24009c0c <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
24009c3a:	b949      	cbnz	r1, 24009c50 <HAL_SAI_InitProtocol+0xb4>
24009c3c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
24009c40:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
24009c44:	2a03      	cmp	r2, #3
24009c46:	d8e1      	bhi.n	24009c0c <HAL_SAI_InitProtocol+0x70>
24009c48:	e8df f002 	tbb	[pc, r2]
24009c4c:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
24009c50:	6660      	str	r0, [r4, #100]	; 0x64
24009c52:	f44f 3000 	mov.w	r0, #131072	; 0x20000
24009c56:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
24009c58:	2a03      	cmp	r2, #3
24009c5a:	d8d7      	bhi.n	24009c0c <HAL_SAI_InitProtocol+0x70>
24009c5c:	e8df f002 	tbb	[pc, r2]
24009c60:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009c64:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009c66:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009c68:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009c6a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009c6c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009c6e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009c70:	f7fa ff48 	bl	24004b04 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
24009c74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24009c78:	2b01      	cmp	r3, #1
24009c7a:	d0b7      	beq.n	24009bec <HAL_SAI_InitProtocol+0x50>
24009c7c:	4620      	mov	r0, r4
}
24009c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24009c82:	f7ff bdb1 	b.w	240097e8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009c86:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009c88:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009c8a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009c8c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009c8e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009c90:	e7ee      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009c92:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009c94:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009c96:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009c98:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009c9a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009c9c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009c9e:	e7e7      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009ca0:	21e0      	movs	r1, #224	; 0xe0
24009ca2:	e7f7      	b.n	24009c94 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009ca4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009ca6:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009ca8:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009caa:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009cac:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009cae:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009cb0:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009cb2:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009cb6:	e7db      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009cb8:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009cba:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009cbc:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009cbe:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009cc0:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009cc4:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009cc6:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009cca:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009ccc:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009cce:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009cd0:	d1ce      	bne.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
24009cd2:	2308      	movs	r3, #8
24009cd4:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009cd6:	e7cb      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009cd8:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009cda:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009cdc:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009cde:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009ce2:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009ce4:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009ce8:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009cea:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009cee:	d1bf      	bne.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
24009cf0:	2310      	movs	r3, #16
24009cf2:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009cf4:	e7bc      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009cf6:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009cf8:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009cfa:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009cfc:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009cfe:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009d00:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009d02:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009d04:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009d08:	e7b2      	b.n	24009c70 <HAL_SAI_InitProtocol+0xd4>
24009d0a:	bf00      	nop
24009d0c:	40015804 	.word	0x40015804

24009d10 <HAL_SAI_Transmit_DMA>:
{
24009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24009d14:	460f      	mov	r7, r1
24009d16:	4604      	mov	r4, r0
24009d18:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
24009d1a:	f7fa fedb 	bl	24004ad4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
24009d1e:	2f00      	cmp	r7, #0
24009d20:	d06b      	beq.n	24009dfa <HAL_SAI_Transmit_DMA+0xea>
24009d22:	fab5 f885 	clz	r8, r5
24009d26:	ea4f 1858 	mov.w	r8, r8, lsr #5
24009d2a:	2d00      	cmp	r5, #0
24009d2c:	d065      	beq.n	24009dfa <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
24009d2e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24009d32:	2b01      	cmp	r3, #1
24009d34:	fa5f f983 	uxtb.w	r9, r3
24009d38:	d15a      	bne.n	24009df0 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
24009d3a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
24009d3e:	2b01      	cmp	r3, #1
24009d40:	d056      	beq.n	24009df0 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
24009d42:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009d44:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009d48:	4a3c      	ldr	r2, [pc, #240]	; (24009e3c <HAL_SAI_Transmit_DMA+0x12c>)
24009d4a:	4606      	mov	r6, r0
    hsai->XferSize = Size;
24009d4c:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
24009d50:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
24009d52:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
24009d56:	f365 431f 	bfi	r3, r5, #16, #16
24009d5a:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009d5c:	2312      	movs	r3, #18
24009d5e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009d62:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009d66:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009d68:	4a35      	ldr	r2, [pc, #212]	; (24009e40 <HAL_SAI_Transmit_DMA+0x130>)
24009d6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
24009d70:	4a34      	ldr	r2, [pc, #208]	; (24009e44 <HAL_SAI_Transmit_DMA+0x134>)
24009d72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009d76:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
24009d78:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009d7c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
24009d80:	6822      	ldr	r2, [r4, #0]
24009d82:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
24009d86:	321c      	adds	r2, #28
24009d88:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24009d8a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
24009d8e:	f7fb fad3 	bl	24005338 <HAL_DMA_Start_IT>
24009d92:	2800      	cmp	r0, #0
24009d94:	d13f      	bne.n	24009e16 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009d98:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009d9a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009d9c:	d032      	beq.n	24009e04 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009d9e:	2205      	movs	r2, #5
24009da0:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009da2:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009da4:	2b01      	cmp	r3, #1
24009da6:	bf98      	it	ls
24009da8:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009daa:	6821      	ldr	r1, [r4, #0]
24009dac:	690b      	ldr	r3, [r1, #16]
24009dae:	4313      	orrs	r3, r2
24009db0:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009db2:	6822      	ldr	r2, [r4, #0]
24009db4:	6813      	ldr	r3, [r2, #0]
24009db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009dba:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009dbc:	e005      	b.n	24009dca <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
24009dbe:	f7fa fe89 	bl	24004ad4 <HAL_GetTick>
24009dc2:	1b83      	subs	r3, r0, r6
24009dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24009dc8:	d82a      	bhi.n	24009e20 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009dca:	6822      	ldr	r2, [r4, #0]
24009dcc:	6955      	ldr	r5, [r2, #20]
24009dce:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
24009dd2:	d0f4      	beq.n	24009dbe <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009dd4:	6813      	ldr	r3, [r2, #0]
24009dd6:	03db      	lsls	r3, r3, #15
24009dd8:	d403      	bmi.n	24009de2 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
24009dda:	6813      	ldr	r3, [r2, #0]
24009ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009de0:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
24009de2:	2300      	movs	r3, #0
    return HAL_OK;
24009de4:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
24009de6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009dea:	4648      	mov	r0, r9
24009dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
24009df0:	f04f 0902 	mov.w	r9, #2
}
24009df4:	4648      	mov	r0, r9
24009df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
24009dfa:	f04f 0901 	mov.w	r9, #1
}
24009dfe:	4648      	mov	r0, r9
24009e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009e04:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009e08:	2a01      	cmp	r2, #1
24009e0a:	bf0b      	itete	eq
24009e0c:	2215      	moveq	r2, #21
24009e0e:	2205      	movne	r2, #5
24009e10:	2171      	moveq	r1, #113	; 0x71
24009e12:	2161      	movne	r1, #97	; 0x61
24009e14:	e7c5      	b.n	24009da2 <HAL_SAI_Transmit_DMA+0x92>
}
24009e16:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
24009e18:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
24009e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009e20:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
24009e24:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
24009e28:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
24009e30:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009e32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24009e3a:	bf00      	nop
24009e3c:	24009f95 	.word	0x24009f95
24009e40:	24009f31 	.word	0x24009f31
24009e44:	2400a019 	.word	0x2400a019

24009e48 <HAL_SAI_Receive_DMA>:
{
24009e48:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
24009e4a:	2900      	cmp	r1, #0
24009e4c:	d059      	beq.n	24009f02 <HAL_SAI_Receive_DMA+0xba>
24009e4e:	fab2 f582 	clz	r5, r2
24009e52:	096d      	lsrs	r5, r5, #5
24009e54:	2a00      	cmp	r2, #0
24009e56:	d054      	beq.n	24009f02 <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
24009e58:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
24009e5c:	4604      	mov	r4, r0
24009e5e:	2b01      	cmp	r3, #1
24009e60:	b2de      	uxtb	r6, r3
24009e62:	d14b      	bne.n	24009efc <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
24009e64:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
24009e68:	2b01      	cmp	r3, #1
24009e6a:	d047      	beq.n	24009efc <HAL_SAI_Receive_DMA+0xb4>
    hsai->XferSize = Size;
24009e6c:	462b      	mov	r3, r5
    hsai->pBuffPtr = pData;
24009e6e:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009e70:	2122      	movs	r1, #34	; 0x22
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009e72:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
24009e76:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
24009e7a:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009e7e:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
24009e82:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009e86:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    hsai->XferSize = Size;
24009e8a:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009e8c:	4b25      	ldr	r3, [pc, #148]	; (24009f24 <HAL_SAI_Receive_DMA+0xdc>)
24009e8e:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009e90:	4a25      	ldr	r2, [pc, #148]	; (24009f28 <HAL_SAI_Receive_DMA+0xe0>)
24009e92:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009e96:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009e98:	4a24      	ldr	r2, [pc, #144]	; (24009f2c <HAL_SAI_Receive_DMA+0xe4>)
24009e9a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009e9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009ea0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009ea4:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
24009ea6:	6801      	ldr	r1, [r0, #0]
24009ea8:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
24009eac:	6f82      	ldr	r2, [r0, #120]	; 0x78
24009eae:	311c      	adds	r1, #28
24009eb0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
24009eb4:	f7fb fa40 	bl	24005338 <HAL_DMA_Start_IT>
24009eb8:	bb30      	cbnz	r0, 24009f08 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009ebc:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009ebe:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009ec0:	d026      	beq.n	24009f10 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009ec2:	2205      	movs	r2, #5
24009ec4:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009ec6:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009ec8:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009eca:	2b01      	cmp	r3, #1
24009ecc:	bf98      	it	ls
24009ece:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009ed0:	690b      	ldr	r3, [r1, #16]
24009ed2:	4313      	orrs	r3, r2
24009ed4:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009ed6:	6822      	ldr	r2, [r4, #0]
24009ed8:	6813      	ldr	r3, [r2, #0]
24009eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009ede:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009ee0:	6823      	ldr	r3, [r4, #0]
24009ee2:	681a      	ldr	r2, [r3, #0]
24009ee4:	03d2      	lsls	r2, r2, #15
24009ee6:	d403      	bmi.n	24009ef0 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
24009ee8:	681a      	ldr	r2, [r3, #0]
24009eea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24009eee:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
24009ef0:	2300      	movs	r3, #0
    return HAL_OK;
24009ef2:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
24009ef4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009ef8:	4630      	mov	r0, r6
24009efa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
24009efc:	2602      	movs	r6, #2
}
24009efe:	4630      	mov	r0, r6
24009f00:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
24009f02:	2601      	movs	r6, #1
}
24009f04:	4630      	mov	r0, r6
24009f06:	bd70      	pop	{r4, r5, r6, pc}
24009f08:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
24009f0a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
24009f0e:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009f10:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009f14:	2a01      	cmp	r2, #1
24009f16:	bf0b      	itete	eq
24009f18:	2215      	moveq	r2, #21
24009f1a:	2205      	movne	r2, #5
24009f1c:	2071      	moveq	r0, #113	; 0x71
24009f1e:	2061      	movne	r0, #97	; 0x61
24009f20:	e7d1      	b.n	24009ec6 <HAL_SAI_Receive_DMA+0x7e>
24009f22:	bf00      	nop
24009f24:	2400a00d 	.word	0x2400a00d
24009f28:	24009fa5 	.word	0x24009fa5
24009f2c:	2400a019 	.word	0x2400a019

24009f30 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24009f30:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009f32:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009f34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009f3a:	d01b      	beq.n	24009f74 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009f3c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009f3e:	2300      	movs	r3, #0
24009f40:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009f44:	6813      	ldr	r3, [r2, #0]
24009f46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009f4a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009f4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
24009f4e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009f50:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009f52:	d012      	beq.n	24009f7a <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009f54:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009f58:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009f5c:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009f5e:	3b02      	subs	r3, #2
24009f60:	2b01      	cmp	r3, #1
24009f62:	bf98      	it	ls
24009f64:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009f66:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009f68:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009f6c:	4013      	ands	r3, r2
24009f6e:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009f70:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24009f74:	f029 fae0 	bl	24033538 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
24009f78:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009f7a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009f7e:	2a01      	cmp	r2, #1
24009f80:	bf0b      	itete	eq
24009f82:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009f86:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009f8a:	f06f 0215 	mvneq.w	r2, #21
24009f8e:	f06f 0205 	mvnne.w	r2, #5
24009f92:	e7e3      	b.n	24009f5c <SAI_DMATxCplt+0x2c>

24009f94 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009f94:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24009f96:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009f98:	f029 fac6 	bl	24033528 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
24009f9c:	bd08      	pop	{r3, pc}
24009f9e:	bf00      	nop

24009fa0 <HAL_SAI_RxCpltCallback>:
24009fa0:	4770      	bx	lr
24009fa2:	bf00      	nop

24009fa4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
24009fa4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009fa6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009fa8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009fae:	d01b      	beq.n	24009fe8 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009fb0:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009fb2:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009fb4:	6813      	ldr	r3, [r2, #0]
24009fb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009fba:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009fbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
24009fbe:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009fc2:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009fc4:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009fc6:	d012      	beq.n	24009fee <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009fc8:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009fcc:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009fd0:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009fd2:	3b02      	subs	r3, #2
24009fd4:	2b01      	cmp	r3, #1
24009fd6:	bf98      	it	ls
24009fd8:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009fda:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009fdc:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009fe0:	4013      	ands	r3, r2
24009fe2:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009fe4:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24009fe8:	f7ff ffda 	bl	24009fa0 <HAL_SAI_RxCpltCallback>
#endif
}
24009fec:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009fee:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009ff2:	2a01      	cmp	r2, #1
24009ff4:	bf0b      	itete	eq
24009ff6:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009ffa:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009ffe:	f06f 0215 	mvneq.w	r2, #21
2400a002:	f06f 0205 	mvnne.w	r2, #5
2400a006:	e7e3      	b.n	24009fd0 <SAI_DMARxCplt+0x2c>

2400a008 <HAL_SAI_RxHalfCpltCallback>:
2400a008:	4770      	bx	lr
2400a00a:	bf00      	nop

2400a00c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400a00c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400a00e:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400a010:	f7ff fffa 	bl	2400a008 <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400a014:	bd08      	pop	{r3, pc}
2400a016:	bf00      	nop

2400a018 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400a018:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a01a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400a01c:	f7fc f9f0 	bl	24006400 <HAL_DMA_GetError>
2400a020:	2802      	cmp	r0, #2
2400a022:	d025      	beq.n	2400a070 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a024:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a028:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a02a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a02e:	4b14      	ldr	r3, [pc, #80]	; (2400a080 <SAI_DMAError+0x68>)
2400a030:	4814      	ldr	r0, [pc, #80]	; (2400a084 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a032:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a036:	680a      	ldr	r2, [r1, #0]
2400a038:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2400a03c:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a03e:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
2400a040:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a042:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
2400a046:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a048:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400a04a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a04e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a050:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400a052:	b173      	cbz	r3, 2400a072 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a054:	6822      	ldr	r2, [r4, #0]
    count--;
2400a056:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a058:	6812      	ldr	r2, [r2, #0]
2400a05a:	03d2      	lsls	r2, r2, #15
2400a05c:	d4f9      	bmi.n	2400a052 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400a05e:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400a060:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400a062:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400a064:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400a068:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400a06c:	f029 fa90 	bl	24033590 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
2400a070:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a072:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a07a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400a07e:	e7ee      	b.n	2400a05e <SAI_DMAError+0x46>
2400a080:	20000750 	.word	0x20000750
2400a084:	95cbec1b 	.word	0x95cbec1b

2400a088 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
2400a088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a08c:	4605      	mov	r5, r0
2400a08e:	b086      	sub	sp, #24
2400a090:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a092:	f7fa fd1f 	bl	24004ad4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a096:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400a098:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a09a:	6828      	ldr	r0, [r5, #0]
2400a09c:	f001 fd38 	bl	2400bb10 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a0a0:	4604      	mov	r4, r0
2400a0a2:	b118      	cbz	r0, 2400a0ac <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400a0a4:	4620      	mov	r0, r4
2400a0a6:	b006      	add	sp, #24
2400a0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400a0ac:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a0ae:	6828      	ldr	r0, [r5, #0]
2400a0b0:	0409      	lsls	r1, r1, #16
2400a0b2:	f002 fa87 	bl	2400c5c4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a0b6:	4604      	mov	r4, r0
2400a0b8:	2800      	cmp	r0, #0
2400a0ba:	d1f3      	bne.n	2400a0a4 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a0bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a0c0:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a0c2:	4669      	mov	r1, sp
2400a0c4:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a0c6:	e9cd 2300 	strd	r2, r3, [sp]
2400a0ca:	2230      	movs	r2, #48	; 0x30
2400a0cc:	2302      	movs	r3, #2
2400a0ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400a0d2:	2200      	movs	r2, #0
2400a0d4:	2301      	movs	r3, #1
2400a0d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a0da:	f001 fd03 	bl	2400bae4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400a0de:	6828      	ldr	r0, [r5, #0]
2400a0e0:	f002 fbf6 	bl	2400c8d0 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a0e4:	4604      	mov	r4, r0
2400a0e6:	2800      	cmp	r0, #0
2400a0e8:	d1dc      	bne.n	2400a0a4 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400a0ea:	4682      	mov	sl, r0
2400a0ec:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a0ee:	f240 582a 	movw	r8, #1322	; 0x52a
2400a0f2:	e004      	b.n	2400a0fe <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a0f4:	f7fa fcee 	bl	24004ad4 <HAL_GetTick>
2400a0f8:	1b83      	subs	r3, r0, r6
2400a0fa:	3301      	adds	r3, #1
2400a0fc:	d024      	beq.n	2400a148 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a0fe:	6828      	ldr	r0, [r5, #0]
2400a100:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a102:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a106:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a108:	d10c      	bne.n	2400a124 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a10a:	0319      	lsls	r1, r3, #12
2400a10c:	d4f2      	bmi.n	2400a0f4 <SD_FindSCR+0x6c>
2400a10e:	2c00      	cmp	r4, #0
2400a110:	d1f0      	bne.n	2400a0f4 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400a112:	f001 fccd 	bl	2400bab0 <SDMMC_ReadFIFO>
2400a116:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a118:	6828      	ldr	r0, [r5, #0]
      index++;
2400a11a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a11c:	f001 fcc8 	bl	2400bab0 <SDMMC_ReadFIFO>
2400a120:	4682      	mov	sl, r0
      index++;
2400a122:	e7e7      	b.n	2400a0f4 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a124:	071a      	lsls	r2, r3, #28
2400a126:	d416      	bmi.n	2400a156 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a128:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a12a:	079b      	lsls	r3, r3, #30
2400a12c:	d40f      	bmi.n	2400a14e <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a12e:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400a130:	f014 0420 	ands.w	r4, r4, #32
2400a134:	d113      	bne.n	2400a15e <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a136:	fa9a f28a 	rev.w	r2, sl
2400a13a:	fa99 f389 	rev.w	r3, r9
2400a13e:	490a      	ldr	r1, [pc, #40]	; (2400a168 <SD_FindSCR+0xe0>)
2400a140:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400a142:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400a146:	e7ad      	b.n	2400a0a4 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400a148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400a14c:	e7aa      	b.n	2400a0a4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a14e:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a150:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a152:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a154:	e7a6      	b.n	2400a0a4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a156:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a158:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a15a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a15c:	e7a2      	b.n	2400a0a4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a15e:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400a160:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a162:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400a164:	e79e      	b.n	2400a0a4 <SD_FindSCR+0x1c>
2400a166:	bf00      	nop
2400a168:	18000f3a 	.word	0x18000f3a

2400a16c <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a170:	4604      	mov	r4, r0
2400a172:	b096      	sub	sp, #88	; 0x58
2400a174:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
2400a176:	f7fa fcad 	bl	24004ad4 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a17a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400a17c:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a17e:	6820      	ldr	r0, [r4, #0]
2400a180:	f001 fcac 	bl	2400badc <SDMMC_GetResponse>
2400a184:	0182      	lsls	r2, r0, #6
2400a186:	d45c      	bmi.n	2400a242 <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a188:	2140      	movs	r1, #64	; 0x40
2400a18a:	6820      	ldr	r0, [r4, #0]
2400a18c:	f001 fcc0 	bl	2400bb10 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a190:	4603      	mov	r3, r0
2400a192:	b1e8      	cbz	r0, 2400a1d0 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400a194:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a196:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a198:	6820      	ldr	r0, [r4, #0]
2400a19a:	4956      	ldr	r1, [pc, #344]	; (2400a2f4 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
2400a19c:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a19e:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
2400a1a0:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
2400a1a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
2400a1a4:	4303      	orrs	r3, r0
2400a1a6:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a1a8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a1ac:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a1b0:	6820      	ldr	r0, [r4, #0]
2400a1b2:	f001 fcad 	bl	2400bb10 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a1b6:	b138      	cbz	r0, 2400a1c8 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
2400a1b8:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a1ba:	6822      	ldr	r2, [r4, #0]
2400a1bc:	494d      	ldr	r1, [pc, #308]	; (2400a2f4 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
2400a1be:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a1c0:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400a1c2:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a1c4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a1c8:	4630      	mov	r0, r6
2400a1ca:	b016      	add	sp, #88	; 0x58
2400a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a1d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a1d2:	6820      	ldr	r0, [r4, #0]
2400a1d4:	0409      	lsls	r1, r1, #16
2400a1d6:	f002 f9f5 	bl	2400c5c4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a1da:	4603      	mov	r3, r0
2400a1dc:	2800      	cmp	r0, #0
2400a1de:	d1d9      	bne.n	2400a194 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a1e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a1e4:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a1e6:	4669      	mov	r1, sp
2400a1e8:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a1ea:	e9cd 2300 	strd	r2, r3, [sp]
2400a1ee:	2260      	movs	r2, #96	; 0x60
2400a1f0:	2302      	movs	r3, #2
2400a1f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400a1f6:	2301      	movs	r3, #1
2400a1f8:	2200      	movs	r2, #0
2400a1fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a1fe:	f001 fc71 	bl	2400bae4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400a202:	6820      	ldr	r0, [r4, #0]
2400a204:	f002 fd88 	bl	2400cd18 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a208:	4603      	mov	r3, r0
2400a20a:	2800      	cmp	r0, #0
2400a20c:	d1c2      	bne.n	2400a194 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
2400a20e:	ae06      	add	r6, sp, #24
2400a210:	e004      	b.n	2400a21c <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a212:	f7fa fc5f 	bl	24004ad4 <HAL_GetTick>
2400a216:	1bc0      	subs	r0, r0, r7
2400a218:	3001      	adds	r0, #1
2400a21a:	d016      	beq.n	2400a24a <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a21c:	6820      	ldr	r0, [r4, #0]
2400a21e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a220:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a224:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a226:	d113      	bne.n	2400a250 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a228:	041b      	lsls	r3, r3, #16
2400a22a:	d5f2      	bpl.n	2400a212 <HAL_SD_GetCardStatus.part.0+0xa6>
2400a22c:	f106 0820 	add.w	r8, r6, #32
2400a230:	e000      	b.n	2400a234 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a232:	6820      	ldr	r0, [r4, #0]
2400a234:	f001 fc3c 	bl	2400bab0 <SDMMC_ReadFIFO>
2400a238:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400a23c:	4546      	cmp	r6, r8
2400a23e:	d1f8      	bne.n	2400a232 <HAL_SD_GetCardStatus.part.0+0xc6>
2400a240:	e7e7      	b.n	2400a212 <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a242:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a244:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400a248:	e7a7      	b.n	2400a19a <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
2400a24a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400a24e:	e7a3      	b.n	2400a198 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a250:	0719      	lsls	r1, r3, #28
2400a252:	d448      	bmi.n	2400a2e6 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a254:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a256:	079a      	lsls	r2, r3, #30
2400a258:	d447      	bmi.n	2400a2ea <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a25a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a25c:	069b      	lsls	r3, r3, #26
2400a25e:	d50a      	bpl.n	2400a276 <HAL_SD_GetCardStatus.part.0+0x10a>
2400a260:	e045      	b.n	2400a2ee <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a262:	f001 fc25 	bl	2400bab0 <SDMMC_ReadFIFO>
2400a266:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a26a:	f7fa fc33 	bl	24004ad4 <HAL_GetTick>
2400a26e:	1bc0      	subs	r0, r0, r7
2400a270:	3001      	adds	r0, #1
2400a272:	d0ea      	beq.n	2400a24a <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400a274:	6820      	ldr	r0, [r4, #0]
2400a276:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a278:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
2400a27c:	d1f1      	bne.n	2400a262 <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a27e:	4a1e      	ldr	r2, [pc, #120]	; (2400a2f8 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
2400a280:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400a282:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a284:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400a286:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400a28a:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400a28c:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400a290:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400a292:	0a1a      	lsrs	r2, r3, #8
2400a294:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400a298:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400a29c:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400a2a0:	b292      	uxth	r2, r2
2400a2a2:	ba09      	rev	r1, r1
2400a2a4:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a2a6:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a2a8:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a2aa:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a2ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a2b0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a2b4:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a2b6:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a2ba:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a2bc:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400a2c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400a2c4:	b2d0      	uxtb	r0, r2
2400a2c6:	4303      	orrs	r3, r0
2400a2c8:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400a2ca:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400a2ce:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400a2d0:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400a2d4:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a2d6:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a2da:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a2de:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a2e0:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a2e2:	74a9      	strb	r1, [r5, #18]
2400a2e4:	e762      	b.n	2400a1ac <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a2e6:	2308      	movs	r3, #8
2400a2e8:	e757      	b.n	2400a19a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a2ea:	2302      	movs	r3, #2
2400a2ec:	e755      	b.n	2400a19a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
2400a2ee:	2320      	movs	r3, #32
2400a2f0:	e753      	b.n	2400a19a <HAL_SD_GetCardStatus.part.0+0x2e>
2400a2f2:	bf00      	nop
2400a2f4:	1fe00fff 	.word	0x1fe00fff
2400a2f8:	18000f3a 	.word	0x18000f3a

2400a2fc <HAL_SD_ReadBlocks>:
{
2400a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a300:	460d      	mov	r5, r1
2400a302:	b087      	sub	sp, #28
2400a304:	4604      	mov	r4, r0
2400a306:	4692      	mov	sl, r2
2400a308:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
2400a30a:	f7fa fbe3 	bl	24004ad4 <HAL_GetTick>
  if (NULL == pData)
2400a30e:	2d00      	cmp	r5, #0
2400a310:	f000 8093 	beq.w	2400a43a <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
2400a314:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a318:	2b01      	cmp	r3, #1
2400a31a:	fa5f f983 	uxtb.w	r9, r3
2400a31e:	d17b      	bne.n	2400a418 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a320:	eb0a 0307 	add.w	r3, sl, r7
2400a324:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a326:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a328:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a32a:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a32c:	f200 808f 	bhi.w	2400a44e <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
2400a330:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a332:	f04f 0b02 	mov.w	fp, #2
2400a336:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400a338:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a33c:	6823      	ldr	r3, [r4, #0]
2400a33e:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a340:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a342:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a344:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a346:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a348:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a34c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a354:	bf18      	it	ne
2400a356:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a35a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a35c:	027b      	lsls	r3, r7, #9
2400a35e:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a360:	2390      	movs	r3, #144	; 0x90
2400a362:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a366:	f001 fbbd 	bl	2400bae4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a36a:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a36c:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a36e:	68d3      	ldr	r3, [r2, #12]
2400a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a374:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a376:	d959      	bls.n	2400a42c <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a378:	4651      	mov	r1, sl
2400a37a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400a37c:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a380:	f001 fd12 	bl	2400bda8 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a384:	2800      	cmp	r0, #0
2400a386:	d16a      	bne.n	2400a45e <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
2400a388:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a38c:	e005      	b.n	2400a39a <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a38e:	f7fa fba1 	bl	24004ad4 <HAL_GetTick>
2400a392:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400a394:	1b80      	subs	r0, r0, r6
2400a396:	4298      	cmp	r0, r3
2400a398:	d22c      	bcs.n	2400a3f4 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a39a:	6820      	ldr	r0, [r4, #0]
2400a39c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a39e:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400a3a2:	d168      	bne.n	2400a476 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400a3a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a3a6:	041a      	lsls	r2, r3, #16
2400a3a8:	d5f1      	bpl.n	2400a38e <HAL_SD_ReadBlocks+0x92>
2400a3aa:	f1bb 0f1f 	cmp.w	fp, #31
2400a3ae:	d9ee      	bls.n	2400a38e <HAL_SD_ReadBlocks+0x92>
2400a3b0:	f105 0804 	add.w	r8, r5, #4
2400a3b4:	f105 0a24 	add.w	sl, r5, #36	; 0x24
2400a3b8:	e000      	b.n	2400a3bc <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400a3ba:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
2400a3bc:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
2400a3c0:	f001 fb76 	bl	2400bab0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400a3c4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400a3c8:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
2400a3ca:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400a3cc:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
2400a3d0:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400a3d4:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400a3d8:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400a3dc:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
2400a3e0:	d1eb      	bne.n	2400a3ba <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a3e2:	f7fa fb77 	bl	24004ad4 <HAL_GetTick>
2400a3e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400a3e8:	1b80      	subs	r0, r0, r6
          tempbuff++;
2400a3ea:	3520      	adds	r5, #32
        dataremaining -= 32U;
2400a3ec:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a3f0:	4298      	cmp	r0, r3
2400a3f2:	d3d2      	bcc.n	2400a39a <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a3f4:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
2400a3f6:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a3fa:	4842      	ldr	r0, [pc, #264]	; (2400a504 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
2400a3fc:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400a3fe:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a400:	6398      	str	r0, [r3, #56]	; 0x38
}
2400a402:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400a404:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a40a:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a40c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a410:	62e2      	str	r2, [r4, #44]	; 0x2c
}
2400a412:	b007      	add	sp, #28
2400a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a418:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a41a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a41e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a422:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a424:	4648      	mov	r0, r9
2400a426:	b007      	add	sp, #28
2400a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a42c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a42e:	4651      	mov	r1, sl
2400a430:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a432:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a434:	f001 fc12 	bl	2400bc5c <SDMMC_CmdReadSingleBlock>
2400a438:	e7a4      	b.n	2400a384 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a43a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a43c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a444:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a446:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a448:	b007      	add	sp, #28
2400a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a450:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a456:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a458:	b007      	add	sp, #28
2400a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a45e:	6823      	ldr	r3, [r4, #0]
2400a460:	4a28      	ldr	r2, [pc, #160]	; (2400a504 <HAL_SD_ReadBlocks+0x208>)
2400a462:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a464:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a466:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a468:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a46a:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a46c:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a46e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a472:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a474:	e7d6      	b.n	2400a424 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a476:	68c3      	ldr	r3, [r0, #12]
2400a478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a47c:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a47e:	6820      	ldr	r0, [r4, #0]
2400a480:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a482:	05db      	lsls	r3, r3, #23
2400a484:	d509      	bpl.n	2400a49a <HAL_SD_ReadBlocks+0x19e>
2400a486:	2f01      	cmp	r7, #1
2400a488:	d907      	bls.n	2400a49a <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a48a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a48c:	2b03      	cmp	r3, #3
2400a48e:	d004      	beq.n	2400a49a <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a490:	f001 fe7c 	bl	2400c18c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a494:	2800      	cmp	r0, #0
2400a496:	d1e2      	bne.n	2400a45e <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a498:	6820      	ldr	r0, [r4, #0]
2400a49a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a49c:	f013 0308 	ands.w	r3, r3, #8
2400a4a0:	d112      	bne.n	2400a4c8 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a4a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a4a4:	f012 0202 	ands.w	r2, r2, #2
2400a4a8:	d11a      	bne.n	2400a4e0 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a4aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a4ac:	f013 0320 	ands.w	r3, r3, #32
2400a4b0:	d021      	beq.n	2400a4f6 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4b2:	4b14      	ldr	r3, [pc, #80]	; (2400a504 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a4b4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4b6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400a4b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a4ba:	f043 0320 	orr.w	r3, r3, #32
2400a4be:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a4c0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a4c4:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a4c6:	e7ad      	b.n	2400a424 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4c8:	4b0e      	ldr	r3, [pc, #56]	; (2400a504 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a4ca:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4cc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a4ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a4d0:	f043 0308 	orr.w	r3, r3, #8
2400a4d4:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a4d6:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a4d8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a4dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a4de:	e7a1      	b.n	2400a424 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4e0:	4a08      	ldr	r2, [pc, #32]	; (2400a504 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a4e2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4e4:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a4e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a4e8:	f042 0202 	orr.w	r2, r2, #2
2400a4ec:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a4ee:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a4f2:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a4f4:	e796      	b.n	2400a424 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a4f6:	4904      	ldr	r1, [pc, #16]	; (2400a508 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
2400a4f8:	2201      	movs	r2, #1
    return HAL_OK;
2400a4fa:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a4fc:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a4fe:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a502:	e78f      	b.n	2400a424 <HAL_SD_ReadBlocks+0x128>
2400a504:	1fe00fff 	.word	0x1fe00fff
2400a508:	18000f3a 	.word	0x18000f3a

2400a50c <HAL_SD_WriteBlocks>:
{
2400a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a510:	460d      	mov	r5, r1
2400a512:	b089      	sub	sp, #36	; 0x24
2400a514:	4604      	mov	r4, r0
2400a516:	4692      	mov	sl, r2
2400a518:	461f      	mov	r7, r3
2400a51a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400a51e:	f7fa fad9 	bl	24004ad4 <HAL_GetTick>
  if (NULL == pData)
2400a522:	2d00      	cmp	r5, #0
2400a524:	d07c      	beq.n	2400a620 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
2400a526:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a52a:	2b01      	cmp	r3, #1
2400a52c:	fa5f f983 	uxtb.w	r9, r3
2400a530:	d166      	bne.n	2400a600 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a532:	eb0a 0307 	add.w	r3, sl, r7
2400a536:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a538:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a53a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a53c:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a53e:	d879      	bhi.n	2400a634 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
2400a540:	2303      	movs	r3, #3
2400a542:	4606      	mov	r6, r0
2400a544:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a548:	6823      	ldr	r3, [r4, #0]
2400a54a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a54c:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a54e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a550:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a552:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400a554:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a558:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a55c:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a55e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a562:	bf18      	it	ne
2400a564:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a568:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a56a:	027b      	lsls	r3, r7, #9
2400a56c:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400a56e:	2390      	movs	r3, #144	; 0x90
2400a570:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a572:	f001 fab7 	bl	2400bae4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a576:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a578:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a57a:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a57c:	68d3      	ldr	r3, [r2, #12]
2400a57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a582:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a584:	d946      	bls.n	2400a614 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a586:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a588:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a58a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a58c:	f001 fd58 	bl	2400c040 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a590:	2800      	cmp	r0, #0
2400a592:	d157      	bne.n	2400a644 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
2400a594:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a598:	e004      	b.n	2400a5a4 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a59a:	f7fa fa9b 	bl	24004ad4 <HAL_GetTick>
2400a59e:	1b80      	subs	r0, r0, r6
2400a5a0:	4540      	cmp	r0, r8
2400a5a2:	d21d      	bcs.n	2400a5e0 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a5a4:	6820      	ldr	r0, [r4, #0]
2400a5a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a5a8:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400a5ac:	d156      	bne.n	2400a65c <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400a5ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a5b0:	045a      	lsls	r2, r3, #17
2400a5b2:	d5f2      	bpl.n	2400a59a <HAL_SD_WriteBlocks+0x8e>
2400a5b4:	f1bb 0f1f 	cmp.w	fp, #31
2400a5b8:	d9ef      	bls.n	2400a59a <HAL_SD_WriteBlocks+0x8e>
2400a5ba:	f105 0a20 	add.w	sl, r5, #32
2400a5be:	e000      	b.n	2400a5c2 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a5c0:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a5c6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a5c8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a5ca:	f001 fa75 	bl	2400bab8 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400a5ce:	4555      	cmp	r5, sl
2400a5d0:	d1f6      	bne.n	2400a5c0 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a5d2:	f7fa fa7f 	bl	24004ad4 <HAL_GetTick>
2400a5d6:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
2400a5d8:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a5dc:	4540      	cmp	r0, r8
2400a5de:	d3e1      	bcc.n	2400a5a4 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5e0:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
2400a5e2:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5e6:	4841      	ldr	r0, [pc, #260]	; (2400a6ec <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
2400a5e8:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
2400a5ea:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5ec:	6388      	str	r0, [r1, #56]	; 0x38
}
2400a5ee:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
2400a5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400a5f2:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a5f4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
2400a5fa:	b009      	add	sp, #36	; 0x24
2400a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a600:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a602:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a60a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a60c:	4648      	mov	r0, r9
2400a60e:	b009      	add	sp, #36	; 0x24
2400a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a614:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a616:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a618:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a61a:	f001 fc6b 	bl	2400bef4 <SDMMC_CmdWriteSingleBlock>
2400a61e:	e7b7      	b.n	2400a590 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a620:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a622:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a626:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a62a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a62c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a62e:	b009      	add	sp, #36	; 0x24
2400a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a634:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a636:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a63c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a63e:	b009      	add	sp, #36	; 0x24
2400a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a644:	6823      	ldr	r3, [r4, #0]
2400a646:	4a29      	ldr	r2, [pc, #164]	; (2400a6ec <HAL_SD_WriteBlocks+0x1e0>)
2400a648:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a64a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a64e:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a650:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a652:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a654:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a658:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a65a:	e7d7      	b.n	2400a60c <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a65c:	68c3      	ldr	r3, [r0, #12]
2400a65e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a662:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a664:	6820      	ldr	r0, [r4, #0]
2400a666:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a668:	05db      	lsls	r3, r3, #23
2400a66a:	d509      	bpl.n	2400a680 <HAL_SD_WriteBlocks+0x174>
2400a66c:	2f01      	cmp	r7, #1
2400a66e:	d907      	bls.n	2400a680 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a672:	2b03      	cmp	r3, #3
2400a674:	d004      	beq.n	2400a680 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a676:	f001 fd89 	bl	2400c18c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a67a:	2800      	cmp	r0, #0
2400a67c:	d1e2      	bne.n	2400a644 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a67e:	6820      	ldr	r0, [r4, #0]
2400a680:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a682:	f013 0308 	ands.w	r3, r3, #8
2400a686:	d112      	bne.n	2400a6ae <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a688:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a68a:	f012 0202 	ands.w	r2, r2, #2
2400a68e:	d11a      	bne.n	2400a6c6 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400a690:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a692:	f013 0310 	ands.w	r3, r3, #16
2400a696:	d021      	beq.n	2400a6dc <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a698:	4b14      	ldr	r3, [pc, #80]	; (2400a6ec <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a69a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a69c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400a69e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a6a0:	f043 0310 	orr.w	r3, r3, #16
2400a6a4:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a6a6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a6aa:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a6ac:	e7ae      	b.n	2400a60c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a6ae:	4b0f      	ldr	r3, [pc, #60]	; (2400a6ec <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a6b0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a6b2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a6b6:	f043 0308 	orr.w	r3, r3, #8
2400a6ba:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a6bc:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a6be:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a6c2:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a6c4:	e7a2      	b.n	2400a60c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a6c6:	4a09      	ldr	r2, [pc, #36]	; (2400a6ec <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a6c8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a6ca:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a6cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a6ce:	f042 0202 	orr.w	r2, r2, #2
2400a6d2:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a6d4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a6d8:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a6da:	e797      	b.n	2400a60c <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a6dc:	4904      	ldr	r1, [pc, #16]	; (2400a6f0 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
2400a6de:	2201      	movs	r2, #1
    return HAL_OK;
2400a6e0:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a6e2:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a6e4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a6e8:	e790      	b.n	2400a60c <HAL_SD_WriteBlocks+0x100>
2400a6ea:	bf00      	nop
2400a6ec:	1fe00fff 	.word	0x1fe00fff
2400a6f0:	18000f3a 	.word	0x18000f3a

2400a6f4 <HAL_SD_GetCardCSD>:
{
2400a6f4:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a6f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a6f8:	f04f 0c00 	mov.w	ip, #0
{
2400a6fc:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a6fe:	0f92      	lsrs	r2, r2, #30
2400a700:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400a702:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400a704:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400a708:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400a70a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400a70e:	f002 0203 	and.w	r2, r2, #3
2400a712:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400a714:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400a718:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400a71a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400a71e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400a720:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400a724:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400a726:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a728:	0d12      	lsrs	r2, r2, #20
2400a72a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400a72c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400a730:	f002 020f 	and.w	r2, r2, #15
2400a734:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400a736:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a738:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a73c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400a73e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a740:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a744:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400a746:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a748:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a74c:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400a74e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a750:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a754:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a756:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400a75a:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400a75c:	2a00      	cmp	r2, #0
2400a75e:	f040 808a 	bne.w	2400a876 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400a762:	f640 72fc 	movw	r2, #4092	; 0xffc
2400a766:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
2400a76a:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400a76e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400a772:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400a774:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a776:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400a77a:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400a77c:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400a780:	f002 0207 	and.w	r2, r2, #7
2400a784:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400a786:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a788:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400a78c:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400a78e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a790:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400a794:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400a796:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a798:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400a79c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400a79e:	690a      	ldr	r2, [r1, #16]
2400a7a0:	3201      	adds	r2, #1
2400a7a2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a7a4:	7e08      	ldrb	r0, [r1, #24]
2400a7a6:	f000 0007 	and.w	r0, r0, #7
2400a7aa:	3002      	adds	r0, #2
2400a7ac:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a7ae:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a7b0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a7b2:	f891 c008 	ldrb.w	ip, [r1, #8]
2400a7b6:	f00c 0c0f 	and.w	ip, ip, #15
2400a7ba:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a7be:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a7c2:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
2400a7c4:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a7c8:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
2400a7cc:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a7d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
2400a7d2:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400a7d4:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a7d8:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a7dc:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400a7de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a7e0:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400a7e4:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400a7e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a7e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400a7ec:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400a7ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a7f0:	0fd2      	lsrs	r2, r2, #31
2400a7f2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400a7f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a7f6:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400a7fa:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400a7fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a7fe:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400a802:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400a804:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a806:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400a80a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400a80c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a80e:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400a812:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400a816:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400a81a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400a81e:	ea02 020c 	and.w	r2, r2, ip
2400a822:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400a826:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a828:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a82c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400a830:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a832:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a836:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400a83a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a83c:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a840:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400a844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a846:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a84a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400a84e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a850:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400a854:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400a858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a85a:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400a85e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400a862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400a864:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400a868:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400a86c:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400a870:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a874:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a876:	2a01      	cmp	r2, #1
2400a878:	d112      	bne.n	2400a8a0 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a87a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a87c:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400a880:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a884:	0412      	lsls	r2, r2, #16
2400a886:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400a88a:	ea42 020c 	orr.w	r2, r2, ip
2400a88e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a890:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400a892:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a894:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a896:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a898:	0292      	lsls	r2, r2, #10
2400a89a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400a89c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a89e:	e797      	b.n	2400a7d0 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a8a0:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a8a2:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a8a4:	4805      	ldr	r0, [pc, #20]	; (2400a8bc <HAL_SD_GetCardCSD+0x1c8>)
2400a8a6:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400a8a8:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a8ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400a8b0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a8b2:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400a8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a8ba:	4770      	bx	lr
2400a8bc:	1fe00fff 	.word	0x1fe00fff

2400a8c0 <HAL_SD_InitCard>:
{
2400a8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a8c2:	2200      	movs	r2, #0
{
2400a8c4:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a8c6:	2300      	movs	r3, #0
{
2400a8c8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a8ca:	2100      	movs	r1, #0
2400a8cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a8d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400a8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a8d8:	f7fe fd46 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400a8dc:	b940      	cbnz	r0, 2400a8f0 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400a8de:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a8e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400a8e4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a8e8:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a8ea:	4630      	mov	r0, r6
2400a8ec:	b015      	add	sp, #84	; 0x54
2400a8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a8f0:	0a06      	lsrs	r6, r0, #8
2400a8f2:	4b8f      	ldr	r3, [pc, #572]	; (2400ab30 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400a8f4:	aa07      	add	r2, sp, #28
2400a8f6:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a8f8:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400a8fc:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a8fe:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400a900:	9608      	str	r6, [sp, #32]
2400a902:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a906:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a90a:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a90c:	6820      	ldr	r0, [r4, #0]
2400a90e:	f001 f8b3 	bl	2400ba78 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400a912:	6820      	ldr	r0, [r4, #0]
2400a914:	f001 f8d6 	bl	2400bac4 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400a918:	4b86      	ldr	r3, [pc, #536]	; (2400ab34 <HAL_SD_InitCard+0x274>)
2400a91a:	429d      	cmp	r5, r3
2400a91c:	d902      	bls.n	2400a924 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400a91e:	0076      	lsls	r6, r6, #1
2400a920:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400a924:	4884      	ldr	r0, [pc, #528]	; (2400ab38 <HAL_SD_InitCard+0x278>)
2400a926:	fbb0 f0f5 	udiv	r0, r0, r5
2400a92a:	3001      	adds	r0, #1
2400a92c:	f7fa f8d8 	bl	24004ae0 <HAL_Delay>
  __IO uint32_t count = 0U;
2400a930:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a932:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400a934:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a936:	f001 fdd9 	bl	2400c4ec <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a93a:	4605      	mov	r5, r0
2400a93c:	b140      	cbz	r0, 2400a950 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400a93e:	2601      	movs	r6, #1
2400a940:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400a944:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400a946:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a948:	431d      	orrs	r5, r3
2400a94a:	6365      	str	r5, [r4, #52]	; 0x34
}
2400a94c:	b015      	add	sp, #84	; 0x54
2400a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400a950:	6820      	ldr	r0, [r4, #0]
2400a952:	f001 fdf7 	bl	2400c544 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400a956:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400a95a:	d06c      	beq.n	2400aa36 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400a95c:	2301      	movs	r3, #1
2400a95e:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a960:	2100      	movs	r1, #0
2400a962:	6820      	ldr	r0, [r4, #0]
2400a964:	f001 fe2e 	bl	2400c5c4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a968:	bb08      	cbnz	r0, 2400a9ae <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a96a:	9b03      	ldr	r3, [sp, #12]
2400a96c:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400a970:	42b3      	cmp	r3, r6
2400a972:	f200 80d6 	bhi.w	2400ab22 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a976:	4f71      	ldr	r7, [pc, #452]	; (2400ab3c <HAL_SD_InitCard+0x27c>)
2400a978:	e00b      	b.n	2400a992 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a97a:	6820      	ldr	r0, [r4, #0]
2400a97c:	f001 f8ae 	bl	2400badc <SDMMC_GetResponse>
    count++;
2400a980:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a982:	2800      	cmp	r0, #0
    count++;
2400a984:	f103 0301 	add.w	r3, r3, #1
2400a988:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a98a:	9b03      	ldr	r3, [sp, #12]
2400a98c:	db12      	blt.n	2400a9b4 <HAL_SD_InitCard+0xf4>
2400a98e:	42b3      	cmp	r3, r6
2400a990:	d810      	bhi.n	2400a9b4 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a992:	2100      	movs	r1, #0
2400a994:	6820      	ldr	r0, [r4, #0]
2400a996:	f001 fe15 	bl	2400c5c4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a99a:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400a99c:	4605      	mov	r5, r0
2400a99e:	2800      	cmp	r0, #0
2400a9a0:	d1cd      	bne.n	2400a93e <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a9a2:	6820      	ldr	r0, [r4, #0]
2400a9a4:	f001 feb4 	bl	2400c710 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a9a8:	4601      	mov	r1, r0
2400a9aa:	2800      	cmp	r0, #0
2400a9ac:	d0e5      	beq.n	2400a97a <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a9ae:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400a9b2:	e7c4      	b.n	2400a93e <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a9b4:	9a03      	ldr	r2, [sp, #12]
2400a9b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400a9ba:	429a      	cmp	r2, r3
2400a9bc:	f200 80ab 	bhi.w	2400ab16 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400a9c0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
2400a9c4:	d043      	beq.n	2400aa4e <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400a9c6:	2301      	movs	r3, #1
2400a9c8:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400a9ca:	2300      	movs	r3, #0
2400a9cc:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400a9d0:	f7fa f880 	bl	24004ad4 <HAL_GetTick>
2400a9d4:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400a9d6:	6820      	ldr	r0, [r4, #0]
2400a9d8:	f001 f87c 	bl	2400bad4 <SDMMC_GetPowerState>
2400a9dc:	2800      	cmp	r0, #0
2400a9de:	d038      	beq.n	2400aa52 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a9e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a9e2:	2b03      	cmp	r3, #3
2400a9e4:	d140      	bne.n	2400aa68 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a9e6:	2104      	movs	r1, #4
2400a9e8:	6820      	ldr	r0, [r4, #0]
2400a9ea:	f001 f877 	bl	2400badc <SDMMC_GetResponse>
2400a9ee:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a9f0:	a909      	add	r1, sp, #36	; 0x24
2400a9f2:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a9f4:	0d1b      	lsrs	r3, r3, #20
2400a9f6:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a9f8:	f7ff fe7c 	bl	2400a6f4 <HAL_SD_GetCardCSD>
2400a9fc:	4606      	mov	r6, r0
2400a9fe:	2800      	cmp	r0, #0
2400aa00:	f040 808c 	bne.w	2400ab1c <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400aa04:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400aa06:	6820      	ldr	r0, [r4, #0]
2400aa08:	0409      	lsls	r1, r1, #16
2400aa0a:	f001 fcc9 	bl	2400c3a0 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa0e:	bb10      	cbnz	r0, 2400aa56 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400aa10:	f44f 7100 	mov.w	r1, #512	; 0x200
2400aa14:	6820      	ldr	r0, [r4, #0]
2400aa16:	f001 f87b 	bl	2400bb10 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa1a:	2800      	cmp	r0, #0
2400aa1c:	f43f af65 	beq.w	2400a8ea <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aa20:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400aa22:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aa24:	4946      	ldr	r1, [pc, #280]	; (2400ab40 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400aa26:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400aa28:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400aa2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400aa2c:	4310      	orrs	r0, r2
2400aa2e:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400aa30:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400aa34:	e759      	b.n	2400a8ea <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400aa36:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400aa38:	6820      	ldr	r0, [r4, #0]
2400aa3a:	f001 fd57 	bl	2400c4ec <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aa3e:	4605      	mov	r5, r0
2400aa40:	2800      	cmp	r0, #0
2400aa42:	f47f af7c 	bne.w	2400a93e <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400aa46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400aa48:	2b01      	cmp	r3, #1
2400aa4a:	d18e      	bne.n	2400a96a <HAL_SD_InitCard+0xaa>
2400aa4c:	e788      	b.n	2400a960 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
2400aa4e:	63a0      	str	r0, [r4, #56]	; 0x38
2400aa50:	e7bb      	b.n	2400a9ca <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400aa52:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400aa56:	2601      	movs	r6, #1
2400aa58:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400aa5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aa5e:	4318      	orrs	r0, r3
2400aa60:	6360      	str	r0, [r4, #52]	; 0x34
}
2400aa62:	4630      	mov	r0, r6
2400aa64:	b015      	add	sp, #84	; 0x54
2400aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400aa68:	6820      	ldr	r0, [r4, #0]
2400aa6a:	f001 ffd9 	bl	2400ca20 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aa6e:	2800      	cmp	r0, #0
2400aa70:	d1f1      	bne.n	2400aa56 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aa72:	4601      	mov	r1, r0
2400aa74:	6820      	ldr	r0, [r4, #0]
2400aa76:	f001 f831 	bl	2400badc <SDMMC_GetResponse>
2400aa7a:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aa7c:	2104      	movs	r1, #4
2400aa7e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aa80:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aa82:	f001 f82b 	bl	2400badc <SDMMC_GetResponse>
2400aa86:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400aa88:	2108      	movs	r1, #8
2400aa8a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aa8c:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400aa8e:	f001 f825 	bl	2400badc <SDMMC_GetResponse>
2400aa92:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400aa94:	210c      	movs	r1, #12
2400aa96:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400aa98:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400aa9a:	f001 f81f 	bl	2400badc <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aa9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400aaa0:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aaa2:	2b03      	cmp	r3, #3
2400aaa4:	d09f      	beq.n	2400a9e6 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400aaa6:	f241 3687 	movw	r6, #4999	; 0x1387
2400aaaa:	e009      	b.n	2400aac0 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400aaac:	6820      	ldr	r0, [r4, #0]
2400aaae:	f002 f835 	bl	2400cb1c <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400aab2:	2800      	cmp	r0, #0
2400aab4:	d1cf      	bne.n	2400aa56 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400aab6:	f7fa f80d 	bl	24004ad4 <HAL_GetTick>
2400aaba:	1b43      	subs	r3, r0, r5
2400aabc:	42b3      	cmp	r3, r6
2400aabe:	d827      	bhi.n	2400ab10 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
2400aac0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400aac4:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400aac8:	2b00      	cmp	r3, #0
2400aaca:	d0ef      	beq.n	2400aaac <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aacc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400aace:	2a03      	cmp	r2, #3
2400aad0:	d089      	beq.n	2400a9e6 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aad2:	0419      	lsls	r1, r3, #16
2400aad4:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400aad6:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aad8:	f001 ffe0 	bl	2400ca9c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aadc:	2800      	cmp	r0, #0
2400aade:	d1ba      	bne.n	2400aa56 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aae0:	4601      	mov	r1, r0
2400aae2:	6820      	ldr	r0, [r4, #0]
2400aae4:	f000 fffa 	bl	2400badc <SDMMC_GetResponse>
2400aae8:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aaea:	2104      	movs	r1, #4
2400aaec:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aaee:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aaf0:	f000 fff4 	bl	2400badc <SDMMC_GetResponse>
2400aaf4:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400aaf6:	2108      	movs	r1, #8
2400aaf8:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400aafa:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400aafc:	f000 ffee 	bl	2400badc <SDMMC_GetResponse>
2400ab00:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ab02:	210c      	movs	r1, #12
2400ab04:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400ab06:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ab08:	f000 ffe8 	bl	2400badc <SDMMC_GetResponse>
2400ab0c:	66a0      	str	r0, [r4, #104]	; 0x68
2400ab0e:	e76a      	b.n	2400a9e6 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
2400ab10:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400ab14:	e79f      	b.n	2400aa56 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400ab16:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400ab1a:	e710      	b.n	2400a93e <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400ab1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400ab20:	e799      	b.n	2400aa56 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400ab22:	9b03      	ldr	r3, [sp, #12]
2400ab24:	42b3      	cmp	r3, r6
2400ab26:	d8f6      	bhi.n	2400ab16 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
2400ab28:	2300      	movs	r3, #0
2400ab2a:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400ab2c:	e74d      	b.n	2400a9ca <HAL_SD_InitCard+0x10a>
2400ab2e:	bf00      	nop
2400ab30:	014f8b59 	.word	0x014f8b59
2400ab34:	000c34ff 	.word	0x000c34ff
2400ab38:	00012110 	.word	0x00012110
2400ab3c:	c1100000 	.word	0xc1100000
2400ab40:	1fe00fff 	.word	0x1fe00fff

2400ab44 <HAL_SD_GetCardInfo>:
{
2400ab44:	4603      	mov	r3, r0
}
2400ab46:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400ab48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400ab4a:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400ab4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400ab4e:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400ab50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400ab52:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400ab54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400ab56:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400ab58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400ab5a:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400ab5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400ab5e:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400ab60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400ab62:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400ab64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400ab66:	61cb      	str	r3, [r1, #28]
}
2400ab68:	4770      	bx	lr
2400ab6a:	bf00      	nop

2400ab6c <HAL_SD_ConfigWideBusOperation>:
{
2400ab6c:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400ab6e:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ab70:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400ab72:	b089      	sub	sp, #36	; 0x24
2400ab74:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ab76:	4293      	cmp	r3, r2
{
2400ab78:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400ab7a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ab7e:	d033      	beq.n	2400abe8 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400ab80:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400ab84:	d030      	beq.n	2400abe8 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400ab86:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400ab8a:	f000 8084 	beq.w	2400ac96 <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400ab8e:	2900      	cmp	r1, #0
2400ab90:	d062      	beq.n	2400ac58 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400ab92:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ab94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400ab98:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400ab9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ab9c:	bb5b      	cbnz	r3, 2400abf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400ab9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400aba2:	2100      	movs	r1, #0
2400aba4:	f7fe fbe0 	bl	24009368 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400aba8:	2800      	cmp	r0, #0
2400abaa:	d03b      	beq.n	2400ac24 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400abac:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400abae:	4b55      	ldr	r3, [pc, #340]	; (2400ad04 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400abb0:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400abb2:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400abb4:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400abb6:	fba3 5300 	umull	r5, r3, r3, r0
2400abba:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400abbc:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400abbe:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400abc2:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400abc4:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400abc8:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400abca:	d238      	bcs.n	2400ac3e <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400abcc:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400abce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400abd2:	d034      	beq.n	2400ac3e <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400abd4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400abd8:	d07f      	beq.n	2400acda <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
2400abda:	bb4a      	cbnz	r2, 2400ac30 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400abdc:	4b4a      	ldr	r3, [pc, #296]	; (2400ad08 <HAL_SD_ConfigWideBusOperation+0x19c>)
2400abde:	4298      	cmp	r0, r3
2400abe0:	f240 8085 	bls.w	2400acee <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400abe4:	9506      	str	r5, [sp, #24]
2400abe6:	e02b      	b.n	2400ac40 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400abe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400abea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400abee:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400abf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400abf2:	2b00      	cmp	r3, #0
2400abf4:	d0d3      	beq.n	2400ab9e <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400abf6:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400abf8:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400abfa:	4a44      	ldr	r2, [pc, #272]	; (2400ad0c <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400abfc:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400abfe:	f44f 7100 	mov.w	r1, #512	; 0x200
2400ac02:	6820      	ldr	r0, [r4, #0]
2400ac04:	f000 ff84 	bl	2400bb10 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac08:	b130      	cbz	r0, 2400ac18 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac0a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400ac0c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ac0e:	4a3f      	ldr	r2, [pc, #252]	; (2400ad0c <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400ac10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400ac12:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ac14:	4318      	orrs	r0, r3
2400ac16:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400ac18:	2301      	movs	r3, #1
}
2400ac1a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400ac1c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400ac20:	b009      	add	sp, #36	; 0x24
2400ac22:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400ac24:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400ac26:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400ac28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400ac2c:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400ac2e:	e7e6      	b.n	2400abfe <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400ac30:	0053      	lsls	r3, r2, #1
2400ac32:	fbb0 f0f3 	udiv	r0, r0, r3
2400ac36:	4b34      	ldr	r3, [pc, #208]	; (2400ad08 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400ac38:	4298      	cmp	r0, r3
2400ac3a:	bf88      	it	hi
2400ac3c:	462a      	movhi	r2, r5
2400ac3e:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400ac40:	aa05      	add	r2, sp, #20
2400ac42:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400ac44:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400ac46:	e892 0003 	ldmia.w	r2, {r0, r1}
2400ac4a:	e88d 0003 	stmia.w	sp, {r0, r1}
2400ac4e:	cb0e      	ldmia	r3, {r1, r2, r3}
2400ac50:	6820      	ldr	r0, [r4, #0]
2400ac52:	f000 ff11 	bl	2400ba78 <SDMMC_Init>
2400ac56:	e7d2      	b.n	2400abfe <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
2400ac58:	2200      	movs	r2, #0
2400ac5a:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ac5c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400ac5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ac62:	f000 ff3b 	bl	2400badc <SDMMC_GetResponse>
2400ac66:	0182      	lsls	r2, r0, #6
2400ac68:	d434      	bmi.n	2400acd4 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400ac6a:	a902      	add	r1, sp, #8
2400ac6c:	4620      	mov	r0, r4
2400ac6e:	f7ff fa0b 	bl	2400a088 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac72:	b960      	cbnz	r0, 2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400ac74:	9b03      	ldr	r3, [sp, #12]
2400ac76:	03db      	lsls	r3, r3, #15
2400ac78:	d536      	bpl.n	2400ace8 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ac7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ac7c:	6820      	ldr	r0, [r4, #0]
2400ac7e:	0409      	lsls	r1, r1, #16
2400ac80:	f001 fca0 	bl	2400c5c4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400ac84:	b918      	cbnz	r0, 2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400ac86:	4601      	mov	r1, r0
2400ac88:	6820      	ldr	r0, [r4, #0]
2400ac8a:	f001 fd7b 	bl	2400c784 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400ac8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ac90:	4318      	orrs	r0, r3
2400ac92:	6360      	str	r0, [r4, #52]	; 0x34
2400ac94:	e7ac      	b.n	2400abf0 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
2400ac96:	2200      	movs	r2, #0
2400ac98:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ac9a:	2100      	movs	r1, #0
2400ac9c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400ac9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400aca2:	f000 ff1b 	bl	2400badc <SDMMC_GetResponse>
2400aca6:	0180      	lsls	r0, r0, #6
2400aca8:	d414      	bmi.n	2400acd4 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400acaa:	a902      	add	r1, sp, #8
2400acac:	4620      	mov	r0, r4
2400acae:	f7ff f9eb 	bl	2400a088 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400acb2:	2800      	cmp	r0, #0
2400acb4:	d1eb      	bne.n	2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400acb6:	9b03      	ldr	r3, [sp, #12]
2400acb8:	0359      	lsls	r1, r3, #13
2400acba:	d515      	bpl.n	2400ace8 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400acbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400acbe:	6820      	ldr	r0, [r4, #0]
2400acc0:	0409      	lsls	r1, r1, #16
2400acc2:	f001 fc7f 	bl	2400c5c4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400acc6:	2800      	cmp	r0, #0
2400acc8:	d1e1      	bne.n	2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400acca:	2102      	movs	r1, #2
2400accc:	6820      	ldr	r0, [r4, #0]
2400acce:	f001 fd59 	bl	2400c784 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400acd2:	e7dc      	b.n	2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400acd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400acd8:	e7d9      	b.n	2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
2400acda:	b95a      	cbnz	r2, 2400acf4 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400acdc:	4a0c      	ldr	r2, [pc, #48]	; (2400ad10 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400acde:	4290      	cmp	r0, r2
2400ace0:	d905      	bls.n	2400acee <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400ace2:	0e5b      	lsrs	r3, r3, #25
2400ace4:	9306      	str	r3, [sp, #24]
2400ace6:	e7ab      	b.n	2400ac40 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400ace8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400acec:	e7cf      	b.n	2400ac8e <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400acee:	2300      	movs	r3, #0
2400acf0:	9306      	str	r3, [sp, #24]
2400acf2:	e7a5      	b.n	2400ac40 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400acf4:	0051      	lsls	r1, r2, #1
2400acf6:	fbb0 f0f1 	udiv	r0, r0, r1
2400acfa:	4905      	ldr	r1, [pc, #20]	; (2400ad10 <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400acfc:	4288      	cmp	r0, r1
2400acfe:	d99e      	bls.n	2400ac3e <HAL_SD_ConfigWideBusOperation+0xd2>
2400ad00:	e7ef      	b.n	2400ace2 <HAL_SD_ConfigWideBusOperation+0x176>
2400ad02:	bf00      	nop
2400ad04:	55e63b89 	.word	0x55e63b89
2400ad08:	017d7840 	.word	0x017d7840
2400ad0c:	1fe00fff 	.word	0x1fe00fff
2400ad10:	02faf080 	.word	0x02faf080

2400ad14 <HAL_SD_Init>:
{
2400ad14:	b5f0      	push	{r4, r5, r6, r7, lr}
2400ad16:	b087      	sub	sp, #28
  if (hsd == NULL)
2400ad18:	2800      	cmp	r0, #0
2400ad1a:	d044      	beq.n	2400ada6 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
2400ad1c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400ad20:	4604      	mov	r4, r0
2400ad22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400ad26:	2b00      	cmp	r3, #0
2400ad28:	d041      	beq.n	2400adae <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400ad2a:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400ad2c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400ad2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400ad32:	f7ff fdc5 	bl	2400a8c0 <HAL_SD_InitCard>
2400ad36:	2800      	cmp	r0, #0
2400ad38:	d135      	bne.n	2400ada6 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400ad3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ad3e:	2b03      	cmp	r3, #3
2400ad40:	d031      	beq.n	2400ada6 <HAL_SD_Init+0x92>
2400ad42:	a901      	add	r1, sp, #4
2400ad44:	4620      	mov	r0, r4
2400ad46:	f7ff fa11 	bl	2400a16c <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400ad4a:	bb60      	cbnz	r0, 2400ada6 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ad4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400ad4e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ad52:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400ad54:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400ad58:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
2400ad5a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ad5c:	d02b      	beq.n	2400adb6 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400ad5e:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400ad60:	68e1      	ldr	r1, [r4, #12]
2400ad62:	4620      	mov	r0, r4
2400ad64:	f7ff ff02 	bl	2400ab6c <HAL_SD_ConfigWideBusOperation>
2400ad68:	4606      	mov	r6, r0
2400ad6a:	b9e0      	cbnz	r0, 2400ada6 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
2400ad6c:	f7f9 feb2 	bl	24004ad4 <HAL_GetTick>
2400ad70:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400ad72:	e00c      	b.n	2400ad8e <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400ad74:	6820      	ldr	r0, [r4, #0]
2400ad76:	4629      	mov	r1, r5
2400ad78:	f000 feb0 	bl	2400badc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400ad7c:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400ad80:	2804      	cmp	r0, #4
2400ad82:	d020      	beq.n	2400adc6 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400ad84:	f7f9 fea6 	bl	24004ad4 <HAL_GetTick>
2400ad88:	1bc3      	subs	r3, r0, r7
2400ad8a:	3301      	adds	r3, #1
2400ad8c:	d021      	beq.n	2400add2 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ad8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ad90:	6820      	ldr	r0, [r4, #0]
2400ad92:	0409      	lsls	r1, r1, #16
2400ad94:	f001 ff1a 	bl	2400cbcc <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ad98:	4605      	mov	r5, r0
2400ad9a:	2800      	cmp	r0, #0
2400ad9c:	d0ea      	beq.n	2400ad74 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
2400ad9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ada0:	4303      	orrs	r3, r0
2400ada2:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400ada4:	e7ee      	b.n	2400ad84 <HAL_SD_Init+0x70>
    return HAL_ERROR;
2400ada6:	2601      	movs	r6, #1
}
2400ada8:	4630      	mov	r0, r6
2400adaa:	b007      	add	sp, #28
2400adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400adae:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400adb0:	f7f9 fafc 	bl	240043ac <HAL_SD_MspInit>
2400adb4:	e7b9      	b.n	2400ad2a <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400adb6:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400adb8:	bf14      	ite	ne
2400adba:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400adbe:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400adc2:	65a3      	str	r3, [r4, #88]	; 0x58
2400adc4:	e7cc      	b.n	2400ad60 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400adc6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400adc8:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400adca:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400adcc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400add0:	e7ea      	b.n	2400ada8 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400add2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400add6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400add8:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400adda:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400addc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400ade0:	e7e2      	b.n	2400ada8 <HAL_SD_Init+0x94>
2400ade2:	bf00      	nop

2400ade4 <HAL_SD_GetCardState>:
{
2400ade4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ade6:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400ade8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400adea:	6800      	ldr	r0, [r0, #0]
2400adec:	0409      	lsls	r1, r1, #16
2400adee:	f001 feed 	bl	2400cbcc <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400adf2:	4601      	mov	r1, r0
2400adf4:	b120      	cbz	r0, 2400ae00 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400adf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400adf8:	2000      	movs	r0, #0
2400adfa:	4319      	orrs	r1, r3
2400adfc:	6361      	str	r1, [r4, #52]	; 0x34
}
2400adfe:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400ae00:	6820      	ldr	r0, [r4, #0]
2400ae02:	f000 fe6b 	bl	2400badc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400ae06:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400ae0a:	bd10      	pop	{r4, pc}

2400ae0c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400ae0c:	b318      	cbz	r0, 2400ae56 <HAL_SDRAM_Init+0x4a>
{
2400ae0e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400ae10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400ae14:	4604      	mov	r4, r0
2400ae16:	460d      	mov	r5, r1
2400ae18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400ae1c:	b1b3      	cbz	r3, 2400ae4c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400ae1e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400ae20:	2302      	movs	r3, #2
2400ae22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400ae26:	f851 0b04 	ldr.w	r0, [r1], #4
2400ae2a:	f000 fd73 	bl	2400b914 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400ae2e:	6862      	ldr	r2, [r4, #4]
2400ae30:	4629      	mov	r1, r5
2400ae32:	6820      	ldr	r0, [r4, #0]
2400ae34:	f000 fdac 	bl	2400b990 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400ae38:	4a08      	ldr	r2, [pc, #32]	; (2400ae5c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400ae3a:	2101      	movs	r1, #1

  return HAL_OK;
2400ae3c:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400ae3e:	6813      	ldr	r3, [r2, #0]
2400ae40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400ae44:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400ae46:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400ae4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400ae4c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400ae50:	f7f7 fe42 	bl	24002ad8 <HAL_SDRAM_MspInit>
2400ae54:	e7e3      	b.n	2400ae1e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400ae56:	2001      	movs	r0, #1
}
2400ae58:	4770      	bx	lr
2400ae5a:	bf00      	nop
2400ae5c:	52004000 	.word	0x52004000

2400ae60 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400ae60:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400ae62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400ae66:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400ae68:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400ae6a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400ae6c:	d004      	beq.n	2400ae78 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400ae6e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400ae72:	2e01      	cmp	r6, #1
2400ae74:	d001      	beq.n	2400ae7a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400ae76:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400ae78:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400ae7a:	2302      	movs	r3, #2
2400ae7c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400ae7e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400ae80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400ae84:	f000 fdd2 	bl	2400ba2c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400ae88:	682b      	ldr	r3, [r5, #0]
2400ae8a:	2b02      	cmp	r3, #2
2400ae8c:	d003      	beq.n	2400ae96 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400ae8e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400ae90:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400ae94:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400ae96:	2305      	movs	r3, #5
  return HAL_OK;
2400ae98:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400ae9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400ae9e:	bd70      	pop	{r4, r5, r6, pc}

2400aea0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400aea0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aea2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aea6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aea8:	2b02      	cmp	r3, #2
2400aeaa:	b2d8      	uxtb	r0, r3
2400aeac:	d005      	beq.n	2400aeba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400aeae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400aeb2:	2b01      	cmp	r3, #1
2400aeb4:	b2dd      	uxtb	r5, r3
2400aeb6:	d001      	beq.n	2400aebc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400aeb8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aeba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aebc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aebe:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aec0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aec4:	f000 fdca 	bl	2400ba5c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400aec8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400aeca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400aece:	bd38      	pop	{r3, r4, r5, pc}

2400aed0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400aed0:	6802      	ldr	r2, [r0, #0]
{
2400aed2:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400aed4:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400aed6:	6991      	ldr	r1, [r2, #24]
2400aed8:	f041 0108 	orr.w	r1, r1, #8
2400aedc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400aede:	6801      	ldr	r1, [r0, #0]
2400aee0:	698a      	ldr	r2, [r1, #24]
2400aee2:	f042 0210 	orr.w	r2, r2, #16
2400aee6:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400aee8:	6801      	ldr	r1, [r0, #0]
2400aeea:	680a      	ldr	r2, [r1, #0]
2400aeec:	f022 0201 	bic.w	r2, r2, #1
2400aef0:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400aef2:	6801      	ldr	r1, [r0, #0]
2400aef4:	4a27      	ldr	r2, [pc, #156]	; (2400af94 <SPI_CloseTransfer+0xc4>)
2400aef6:	690c      	ldr	r4, [r1, #16]
2400aef8:	4022      	ands	r2, r4
2400aefa:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400aefc:	6801      	ldr	r1, [r0, #0]
2400aefe:	688a      	ldr	r2, [r1, #8]
2400af00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400af04:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400af06:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400af0a:	2a04      	cmp	r2, #4
2400af0c:	d001      	beq.n	2400af12 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400af0e:	069c      	lsls	r4, r3, #26
2400af10:	d433      	bmi.n	2400af7a <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400af12:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400af16:	2a03      	cmp	r2, #3
2400af18:	d001      	beq.n	2400af1e <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400af1a:	0659      	lsls	r1, r3, #25
2400af1c:	d421      	bmi.n	2400af62 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400af1e:	059a      	lsls	r2, r3, #22
2400af20:	d50a      	bpl.n	2400af38 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400af22:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400af26:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400af28:	f042 0201 	orr.w	r2, r2, #1
2400af2c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400af30:	698a      	ldr	r2, [r1, #24]
2400af32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400af36:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400af38:	05db      	lsls	r3, r3, #23
2400af3a:	d50a      	bpl.n	2400af52 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400af3c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400af40:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400af42:	f043 0308 	orr.w	r3, r3, #8
2400af46:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400af4a:	6993      	ldr	r3, [r2, #24]
2400af4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400af50:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400af52:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400af54:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400af58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400af5c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400af60:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400af62:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400af66:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400af68:	f042 0204 	orr.w	r2, r2, #4
2400af6c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400af70:	698a      	ldr	r2, [r1, #24]
2400af72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400af76:	618a      	str	r2, [r1, #24]
2400af78:	e7d1      	b.n	2400af1e <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400af7a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400af7e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400af80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400af84:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400af88:	698a      	ldr	r2, [r1, #24]
2400af8a:	f042 0220 	orr.w	r2, r2, #32
2400af8e:	618a      	str	r2, [r1, #24]
2400af90:	e7bf      	b.n	2400af12 <SPI_CloseTransfer+0x42>
2400af92:	bf00      	nop
2400af94:	fffffc90 	.word	0xfffffc90

2400af98 <HAL_SPI_Init>:
  if (hspi == NULL)
2400af98:	2800      	cmp	r0, #0
2400af9a:	f000 80be 	beq.w	2400b11a <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400af9e:	4a62      	ldr	r2, [pc, #392]	; (2400b128 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400afa0:	2100      	movs	r1, #0
{
2400afa2:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400afa4:	6803      	ldr	r3, [r0, #0]
2400afa6:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400afa8:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400afaa:	4293      	cmp	r3, r2
2400afac:	d015      	beq.n	2400afda <HAL_SPI_Init+0x42>
2400afae:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400afb2:	4293      	cmp	r3, r2
2400afb4:	d011      	beq.n	2400afda <HAL_SPI_Init+0x42>
2400afb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400afba:	4293      	cmp	r3, r2
2400afbc:	68c2      	ldr	r2, [r0, #12]
2400afbe:	f000 80a5 	beq.w	2400b10c <HAL_SPI_Init+0x174>
2400afc2:	2a0f      	cmp	r2, #15
2400afc4:	d807      	bhi.n	2400afd6 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400afc6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400afc8:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400afca:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400afcc:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400afce:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400afd2:	2a08      	cmp	r2, #8
2400afd4:	d914      	bls.n	2400b000 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400afd6:	2001      	movs	r0, #1
}
2400afd8:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400afda:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400afdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400afde:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400afe0:	4d51      	ldr	r5, [pc, #324]	; (2400b128 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400afe2:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
2400afe4:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400afe6:	4951      	ldr	r1, [pc, #324]	; (2400b12c <HAL_SPI_Init+0x194>)
2400afe8:	428b      	cmp	r3, r1
2400afea:	bf18      	it	ne
2400afec:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
2400afee:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400aff2:	d003      	beq.n	2400affc <HAL_SPI_Init+0x64>
2400aff4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400aff8:	428b      	cmp	r3, r1
2400affa:	d101      	bne.n	2400b000 <HAL_SPI_Init+0x68>
2400affc:	2a10      	cmp	r2, #16
2400affe:	d8ea      	bhi.n	2400afd6 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400b000:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b004:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400b008:	2a00      	cmp	r2, #0
2400b00a:	d078      	beq.n	2400b0fe <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400b00c:	2202      	movs	r2, #2
2400b00e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400b012:	681a      	ldr	r2, [r3, #0]
2400b014:	f022 0201 	bic.w	r2, r2, #1
2400b018:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b01a:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b01c:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b01e:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b020:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
2400b024:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b026:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b02a:	d058      	beq.n	2400b0de <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400b02c:	0258      	lsls	r0, r3, #9
2400b02e:	d502      	bpl.n	2400b036 <HAL_SPI_Init+0x9e>
2400b030:	68e3      	ldr	r3, [r4, #12]
2400b032:	2b06      	cmp	r3, #6
2400b034:	d84c      	bhi.n	2400b0d0 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b036:	6813      	ldr	r3, [r2, #0]
2400b038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400b03c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400b03e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400b040:	69e3      	ldr	r3, [r4, #28]
2400b042:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400b044:	432b      	orrs	r3, r5
2400b046:	6822      	ldr	r2, [r4, #0]
2400b048:	4303      	orrs	r3, r0
2400b04a:	68e0      	ldr	r0, [r4, #12]
2400b04c:	4303      	orrs	r3, r0
2400b04e:	430b      	orrs	r3, r1
2400b050:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400b052:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400b054:	69a0      	ldr	r0, [r4, #24]
2400b056:	6822      	ldr	r2, [r4, #0]
2400b058:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400b05c:	432b      	orrs	r3, r5
2400b05e:	430b      	orrs	r3, r1
2400b060:	6921      	ldr	r1, [r4, #16]
2400b062:	4303      	orrs	r3, r0
2400b064:	6960      	ldr	r0, [r4, #20]
2400b066:	430b      	orrs	r3, r1
2400b068:	6a21      	ldr	r1, [r4, #32]
2400b06a:	4303      	orrs	r3, r0
2400b06c:	6860      	ldr	r0, [r4, #4]
2400b06e:	430b      	orrs	r3, r1
2400b070:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400b072:	4303      	orrs	r3, r0
2400b074:	68a0      	ldr	r0, [r4, #8]
2400b076:	430b      	orrs	r3, r1
2400b078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b07a:	4303      	orrs	r3, r0
2400b07c:	430b      	orrs	r3, r1
2400b07e:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b080:	430b      	orrs	r3, r1
2400b082:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400b084:	6863      	ldr	r3, [r4, #4]
2400b086:	b96b      	cbnz	r3, 2400b0a4 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400b088:	6822      	ldr	r2, [r4, #0]
2400b08a:	6893      	ldr	r3, [r2, #8]
2400b08c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400b090:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b094:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400b096:	6822      	ldr	r2, [r4, #0]
2400b098:	6893      	ldr	r3, [r2, #8]
2400b09a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400b09e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b0a2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400b0a4:	6822      	ldr	r2, [r4, #0]
2400b0a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b0a8:	f023 0301 	bic.w	r3, r3, #1
2400b0ac:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400b0ae:	6863      	ldr	r3, [r4, #4]
2400b0b0:	025b      	lsls	r3, r3, #9
2400b0b2:	d506      	bpl.n	2400b0c2 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400b0b4:	6822      	ldr	r2, [r4, #0]
2400b0b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400b0b8:	68d3      	ldr	r3, [r2, #12]
2400b0ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400b0be:	430b      	orrs	r3, r1
2400b0c0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b0c2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400b0c4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b0c6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400b0ca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400b0ce:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400b0d0:	6813      	ldr	r3, [r2, #0]
2400b0d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400b0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400b0d8:	4303      	orrs	r3, r0
2400b0da:	6013      	str	r3, [r2, #0]
2400b0dc:	e7af      	b.n	2400b03e <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b0de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b0e2:	d01c      	beq.n	2400b11e <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400b0e4:	2b00      	cmp	r3, #0
2400b0e6:	d1a1      	bne.n	2400b02c <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400b0e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b0ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400b0ee:	d1a2      	bne.n	2400b036 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400b0f0:	6813      	ldr	r3, [r2, #0]
2400b0f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400b0f6:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b0f8:	e9d4 2300 	ldrd	r2, r3, [r4]
2400b0fc:	e796      	b.n	2400b02c <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400b0fe:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400b100:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400b104:	f7f9 fa08 	bl	24004518 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400b108:	6823      	ldr	r3, [r4, #0]
2400b10a:	e77f      	b.n	2400b00c <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b10c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400b10e:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b110:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b112:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400b114:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400b118:	e770      	b.n	2400affc <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400b11a:	2001      	movs	r0, #1
}
2400b11c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b11e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400b120:	2b00      	cmp	r3, #0
2400b122:	d0e5      	beq.n	2400b0f0 <HAL_SPI_Init+0x158>
2400b124:	e784      	b.n	2400b030 <HAL_SPI_Init+0x98>
2400b126:	bf00      	nop
2400b128:	40013000 	.word	0x40013000
2400b12c:	40003800 	.word	0x40003800

2400b130 <HAL_SPI_Receive_DMA>:
{
2400b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
2400b132:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400b136:	2b01      	cmp	r3, #1
2400b138:	f000 80a9 	beq.w	2400b28e <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
2400b13c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b140:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
2400b142:	2201      	movs	r2, #1
2400b144:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
2400b146:	b2de      	uxtb	r6, r3
2400b148:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
2400b14a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400b14e:	f040 8093 	bne.w	2400b278 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
2400b152:	2900      	cmp	r1, #0
2400b154:	f000 808b 	beq.w	2400b26e <HAL_SPI_Receive_DMA+0x13e>
2400b158:	fab5 f385 	clz	r3, r5
2400b15c:	095b      	lsrs	r3, r3, #5
2400b15e:	2d00      	cmp	r5, #0
2400b160:	f000 8085 	beq.w	2400b26e <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400b164:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400b166:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400b168:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400b16a:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
2400b16e:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400b172:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
2400b176:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400b178:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
2400b17c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
2400b180:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b184:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
2400b188:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400b18c:	d07a      	beq.n	2400b284 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
2400b18e:	68d3      	ldr	r3, [r2, #12]
2400b190:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400b194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400b198:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b19a:	68e3      	ldr	r3, [r4, #12]
2400b19c:	2b0f      	cmp	r3, #15
2400b19e:	d861      	bhi.n	2400b264 <HAL_SPI_Receive_DMA+0x134>
2400b1a0:	2b07      	cmp	r3, #7
2400b1a2:	f200 8092 	bhi.w	2400b2ca <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b1a6:	6822      	ldr	r2, [r4, #0]
2400b1a8:	6893      	ldr	r3, [r2, #8]
2400b1aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400b1ae:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400b1b0:	68e3      	ldr	r3, [r4, #12]
2400b1b2:	2b07      	cmp	r3, #7
2400b1b4:	d86e      	bhi.n	2400b294 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b1b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b1b8:	699a      	ldr	r2, [r3, #24]
2400b1ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b1be:	d107      	bne.n	2400b1d0 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b1c0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b1c4:	b292      	uxth	r2, r2
2400b1c6:	3201      	adds	r2, #1
2400b1c8:	0852      	lsrs	r2, r2, #1
2400b1ca:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b1ce:	699a      	ldr	r2, [r3, #24]
2400b1d0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b1d4:	d106      	bne.n	2400b1e4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400b1d6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b1da:	b292      	uxth	r2, r2
2400b1dc:	3203      	adds	r2, #3
2400b1de:	0892      	lsrs	r2, r2, #2
2400b1e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400b1e4:	4a3e      	ldr	r2, [pc, #248]	; (2400b2e0 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400b1e6:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400b1e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400b1ea:	4a3e      	ldr	r2, [pc, #248]	; (2400b2e4 <HAL_SPI_Receive_DMA+0x1b4>)
2400b1ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b1ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b1f0:	4a3d      	ldr	r2, [pc, #244]	; (2400b2e8 <HAL_SPI_Receive_DMA+0x1b8>)
2400b1f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b1f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400b1f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b1f8:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400b1fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400b1fe:	6821      	ldr	r1, [r4, #0]
2400b200:	b29b      	uxth	r3, r3
2400b202:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b204:	3130      	adds	r1, #48	; 0x30
2400b206:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b208:	f7fa f896 	bl	24005338 <HAL_DMA_Start_IT>
2400b20c:	2800      	cmp	r0, #0
2400b20e:	d150      	bne.n	2400b2b2 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b210:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b212:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b214:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b216:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b21c:	4b33      	ldr	r3, [pc, #204]	; (2400b2ec <HAL_SPI_Receive_DMA+0x1bc>)
2400b21e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b222:	bf18      	it	ne
2400b224:	432b      	orrne	r3, r5
2400b226:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b228:	6822      	ldr	r2, [r4, #0]
2400b22a:	6893      	ldr	r3, [r2, #8]
2400b22c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b230:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400b232:	6822      	ldr	r2, [r4, #0]
2400b234:	6913      	ldr	r3, [r2, #16]
2400b236:	f443 7350 	orr.w	r3, r3, #832	; 0x340
2400b23a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b23c:	6822      	ldr	r2, [r4, #0]
2400b23e:	6813      	ldr	r3, [r2, #0]
2400b240:	f043 0301 	orr.w	r3, r3, #1
2400b244:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b246:	6863      	ldr	r3, [r4, #4]
2400b248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b24c:	d104      	bne.n	2400b258 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b24e:	6822      	ldr	r2, [r4, #0]
2400b250:	6813      	ldr	r3, [r2, #0]
2400b252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b256:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b258:	2300      	movs	r3, #0
  return errorcode;
2400b25a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b25c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400b260:	4630      	mov	r0, r6
2400b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b264:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b266:	699b      	ldr	r3, [r3, #24]
2400b268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b26c:	d09b      	beq.n	2400b1a6 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
2400b26e:	2300      	movs	r3, #0
2400b270:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400b274:	4630      	mov	r0, r6
2400b276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400b278:	2300      	movs	r3, #0
    return errorcode;
2400b27a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400b27c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400b280:	4630      	mov	r0, r6
2400b282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
2400b284:	6813      	ldr	r3, [r2, #0]
2400b286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2400b28a:	6013      	str	r3, [r2, #0]
2400b28c:	e785      	b.n	2400b19a <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
2400b28e:	2602      	movs	r6, #2
}
2400b290:	4630      	mov	r0, r6
2400b292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400b294:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b296:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400b298:	d8a4      	bhi.n	2400b1e4 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b29a:	699a      	ldr	r2, [r3, #24]
2400b29c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b2a0:	d1a0      	bne.n	2400b1e4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b2a2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b2a6:	b292      	uxth	r2, r2
2400b2a8:	3201      	adds	r2, #1
2400b2aa:	0852      	lsrs	r2, r2, #1
2400b2ac:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b2b0:	e798      	b.n	2400b1e4 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b2b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b2b6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b2b8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b2bc:	f043 0310 	orr.w	r3, r3, #16
2400b2c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b2c4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b2c8:	e7d4      	b.n	2400b274 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b2ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b2cc:	699b      	ldr	r3, [r3, #24]
2400b2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b2d2:	f43f af68 	beq.w	2400b1a6 <HAL_SPI_Receive_DMA+0x76>
2400b2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b2da:	d1c8      	bne.n	2400b26e <HAL_SPI_Receive_DMA+0x13e>
2400b2dc:	e763      	b.n	2400b1a6 <HAL_SPI_Receive_DMA+0x76>
2400b2de:	bf00      	nop
2400b2e0:	2400b581 	.word	0x2400b581
2400b2e4:	2400b531 	.word	0x2400b531
2400b2e8:	2400b59d 	.word	0x2400b59d
2400b2ec:	ffff0000 	.word	0xffff0000

2400b2f0 <HAL_SPI_TransmitReceive_DMA>:
{
2400b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400b2f4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400b2f6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400b2fa:	2b01      	cmp	r3, #1
2400b2fc:	f000 809a 	beq.w	2400b434 <HAL_SPI_TransmitReceive_DMA+0x144>
2400b300:	2301      	movs	r3, #1
2400b302:	4604      	mov	r4, r0
2400b304:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400b308:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b30c:	2b01      	cmp	r3, #1
2400b30e:	b2de      	uxtb	r6, r3
2400b310:	d158      	bne.n	2400b3c4 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400b312:	2d00      	cmp	r5, #0
2400b314:	bf18      	it	ne
2400b316:	2a00      	cmpne	r2, #0
2400b318:	d04e      	beq.n	2400b3b8 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400b31a:	fab1 f381 	clz	r3, r1
2400b31e:	095b      	lsrs	r3, r3, #5
2400b320:	2900      	cmp	r1, #0
2400b322:	d049      	beq.n	2400b3b8 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400b324:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b326:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400b328:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400b32a:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b32c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400b330:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400b334:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400b338:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400b33c:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400b340:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400b344:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400b348:	68d3      	ldr	r3, [r2, #12]
2400b34a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400b34e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b350:	6802      	ldr	r2, [r0, #0]
2400b352:	6893      	ldr	r3, [r2, #8]
2400b354:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b358:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b35a:	68c3      	ldr	r3, [r0, #12]
2400b35c:	2b0f      	cmp	r3, #15
2400b35e:	d938      	bls.n	2400b3d2 <HAL_SPI_TransmitReceive_DMA+0xe2>
2400b360:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b362:	699a      	ldr	r2, [r3, #24]
2400b364:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b368:	d126      	bne.n	2400b3b8 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b36a:	4a6c      	ldr	r2, [pc, #432]	; (2400b51c <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400b36c:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b370:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400b528 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400b376:	4a6a      	ldr	r2, [pc, #424]	; (2400b520 <HAL_SPI_TransmitReceive_DMA+0x230>)
2400b378:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b37a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b37c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b37e:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400b382:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b384:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400b388:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400b38c:	6821      	ldr	r1, [r4, #0]
2400b38e:	b29b      	uxth	r3, r3
2400b390:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b392:	3130      	adds	r1, #48	; 0x30
2400b394:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b396:	f7f9 ffcf 	bl	24005338 <HAL_DMA_Start_IT>
2400b39a:	4607      	mov	r7, r0
2400b39c:	2800      	cmp	r0, #0
2400b39e:	d04d      	beq.n	2400b43c <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b3a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b3a4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b3a6:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b3aa:	f043 0310 	orr.w	r3, r3, #16
2400b3ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b3b2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b3b6:	e002      	b.n	2400b3be <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400b3b8:	2300      	movs	r3, #0
2400b3ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400b3be:	4630      	mov	r0, r6
2400b3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400b3c4:	2300      	movs	r3, #0
    return errorcode;
2400b3c6:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400b3c8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400b3cc:	4630      	mov	r0, r6
2400b3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b3d2:	2b07      	cmp	r3, #7
2400b3d4:	d87f      	bhi.n	2400b4d6 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b3d6:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400b3d8:	6993      	ldr	r3, [r2, #24]
2400b3da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b3de:	d107      	bne.n	2400b3f0 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b3e0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400b3e4:	b29b      	uxth	r3, r3
2400b3e6:	3301      	adds	r3, #1
2400b3e8:	085b      	lsrs	r3, r3, #1
2400b3ea:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b3ee:	6993      	ldr	r3, [r2, #24]
2400b3f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b3f4:	d106      	bne.n	2400b404 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400b3f6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400b3fa:	b29b      	uxth	r3, r3
2400b3fc:	3303      	adds	r3, #3
2400b3fe:	089b      	lsrs	r3, r3, #2
2400b400:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b404:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b406:	699a      	ldr	r2, [r3, #24]
2400b408:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b40c:	d107      	bne.n	2400b41e <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b40e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b412:	b292      	uxth	r2, r2
2400b414:	3201      	adds	r2, #1
2400b416:	0852      	lsrs	r2, r2, #1
2400b418:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b41c:	699a      	ldr	r2, [r3, #24]
2400b41e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b422:	d1a2      	bne.n	2400b36a <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400b424:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b428:	b292      	uxth	r2, r2
2400b42a:	3203      	adds	r2, #3
2400b42c:	0892      	lsrs	r2, r2, #2
2400b42e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b432:	e79a      	b.n	2400b36a <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400b434:	2602      	movs	r6, #2
}
2400b436:	4630      	mov	r0, r6
2400b438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b43c:	6822      	ldr	r2, [r4, #0]
2400b43e:	6893      	ldr	r3, [r2, #8]
2400b440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b444:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400b446:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b448:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400b44a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b44c:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400b44e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b450:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400b452:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b454:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400b458:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400b45c:	6822      	ldr	r2, [r4, #0]
2400b45e:	b29b      	uxth	r3, r3
2400b460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b462:	3220      	adds	r2, #32
2400b464:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b466:	f7f9 ff67 	bl	24005338 <HAL_DMA_Start_IT>
2400b46a:	bb40      	cbnz	r0, 2400b4be <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b46c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b46e:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b470:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b472:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b478:	4b2a      	ldr	r3, [pc, #168]	; (2400b524 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400b47a:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b47e:	bf18      	it	ne
2400b480:	432b      	orrne	r3, r5
2400b482:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400b484:	6822      	ldr	r2, [r4, #0]
2400b486:	6893      	ldr	r3, [r2, #8]
2400b488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400b48c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400b48e:	6822      	ldr	r2, [r4, #0]
2400b490:	6913      	ldr	r3, [r2, #16]
2400b492:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400b496:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b498:	6822      	ldr	r2, [r4, #0]
2400b49a:	6813      	ldr	r3, [r2, #0]
2400b49c:	f043 0301 	orr.w	r3, r3, #1
2400b4a0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b4a2:	6863      	ldr	r3, [r4, #4]
2400b4a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b4a8:	d104      	bne.n	2400b4b4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b4aa:	6822      	ldr	r2, [r4, #0]
2400b4ac:	6813      	ldr	r3, [r2, #0]
2400b4ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b4b2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b4b4:	2300      	movs	r3, #0
  return errorcode;
2400b4b6:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b4b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400b4bc:	e77f      	b.n	2400b3be <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b4be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b4c2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b4c4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b4c8:	f043 0310 	orr.w	r3, r3, #16
2400b4cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b4d0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b4d4:	e773      	b.n	2400b3be <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b4d6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b4d8:	699a      	ldr	r2, [r3, #24]
2400b4da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b4de:	d003      	beq.n	2400b4e8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400b4e0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b4e4:	f47f af68 	bne.w	2400b3b8 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b4e8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b4ea:	6989      	ldr	r1, [r1, #24]
2400b4ec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b4f0:	d107      	bne.n	2400b502 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b4f2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400b4f6:	b292      	uxth	r2, r2
2400b4f8:	3201      	adds	r2, #1
2400b4fa:	0852      	lsrs	r2, r2, #1
2400b4fc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b500:	699a      	ldr	r2, [r3, #24]
2400b502:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b506:	f47f af30 	bne.w	2400b36a <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b50a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b50e:	b292      	uxth	r2, r2
2400b510:	3201      	adds	r2, #1
2400b512:	0852      	lsrs	r2, r2, #1
2400b514:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b518:	e727      	b.n	2400b36a <HAL_SPI_TransmitReceive_DMA+0x7a>
2400b51a:	bf00      	nop
2400b51c:	2400b58d 	.word	0x2400b58d
2400b520:	2400b559 	.word	0x2400b559
2400b524:	ffff0000 	.word	0xffff0000
2400b528:	2400b59d 	.word	0x2400b59d

2400b52c <HAL_SPI_TxCpltCallback>:
2400b52c:	4770      	bx	lr
2400b52e:	bf00      	nop

2400b530 <SPI_DMAReceiveCplt>:
{
2400b530:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b532:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b534:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b538:	2b07      	cmp	r3, #7
2400b53a:	d009      	beq.n	2400b550 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b53c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b53e:	69db      	ldr	r3, [r3, #28]
2400b540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b544:	d005      	beq.n	2400b552 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b546:	6802      	ldr	r2, [r0, #0]
2400b548:	6913      	ldr	r3, [r2, #16]
2400b54a:	f043 0308 	orr.w	r3, r3, #8
2400b54e:	6113      	str	r3, [r2, #16]
}
2400b550:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400b552:	f027 ffed 	bl	24033530 <__HAL_SPI_RxCpltCallback_veneer>
}
2400b556:	bd08      	pop	{r3, pc}

2400b558 <SPI_DMATransmitReceiveCplt>:
{
2400b558:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b55a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b55c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b560:	2b07      	cmp	r3, #7
2400b562:	d009      	beq.n	2400b578 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b564:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400b566:	69db      	ldr	r3, [r3, #28]
2400b568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b56c:	d005      	beq.n	2400b57a <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b56e:	6802      	ldr	r2, [r0, #0]
2400b570:	6913      	ldr	r3, [r2, #16]
2400b572:	f043 0308 	orr.w	r3, r3, #8
2400b576:	6113      	str	r3, [r2, #16]
}
2400b578:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400b57a:	f027 ffe9 	bl	24033550 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400b57e:	bd08      	pop	{r3, pc}

2400b580 <SPI_DMAHalfReceiveCplt>:
{
2400b580:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400b582:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b584:	f027 fff4 	bl	24033570 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
2400b588:	bd08      	pop	{r3, pc}
2400b58a:	bf00      	nop

2400b58c <SPI_DMAHalfTransmitReceiveCplt>:
{
2400b58c:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400b58e:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b590:	f027 ffd6 	bl	24033540 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400b594:	bd08      	pop	{r3, pc}
2400b596:	bf00      	nop

2400b598 <HAL_SPI_ErrorCallback>:
2400b598:	4770      	bx	lr
2400b59a:	bf00      	nop

2400b59c <SPI_DMAError>:
{
2400b59c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b59e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400b5a0:	f7fa ff2e 	bl	24006400 <HAL_DMA_GetError>
2400b5a4:	2802      	cmp	r0, #2
2400b5a6:	d100      	bne.n	2400b5aa <SPI_DMAError+0xe>
}
2400b5a8:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400b5aa:	6822      	ldr	r2, [r4, #0]
2400b5ac:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b5ae:	6991      	ldr	r1, [r2, #24]
2400b5b0:	f041 0108 	orr.w	r1, r1, #8
2400b5b4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b5b6:	6821      	ldr	r1, [r4, #0]
2400b5b8:	698a      	ldr	r2, [r1, #24]
2400b5ba:	f042 0210 	orr.w	r2, r2, #16
2400b5be:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400b5c0:	6821      	ldr	r1, [r4, #0]
2400b5c2:	680a      	ldr	r2, [r1, #0]
2400b5c4:	f022 0201 	bic.w	r2, r2, #1
2400b5c8:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b5ca:	6821      	ldr	r1, [r4, #0]
2400b5cc:	4a2c      	ldr	r2, [pc, #176]	; (2400b680 <SPI_DMAError+0xe4>)
2400b5ce:	6908      	ldr	r0, [r1, #16]
2400b5d0:	4002      	ands	r2, r0
2400b5d2:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b5d4:	6821      	ldr	r1, [r4, #0]
2400b5d6:	688a      	ldr	r2, [r1, #8]
2400b5d8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b5dc:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b5de:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b5e2:	2a04      	cmp	r2, #4
2400b5e4:	d001      	beq.n	2400b5ea <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b5e6:	0698      	lsls	r0, r3, #26
2400b5e8:	d43d      	bmi.n	2400b666 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b5ea:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b5ee:	2a03      	cmp	r2, #3
2400b5f0:	d001      	beq.n	2400b5f6 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b5f2:	0659      	lsls	r1, r3, #25
2400b5f4:	d42b      	bmi.n	2400b64e <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b5f6:	059a      	lsls	r2, r3, #22
2400b5f8:	d50a      	bpl.n	2400b610 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b5fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b5fe:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b600:	f042 0201 	orr.w	r2, r2, #1
2400b604:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b608:	698a      	ldr	r2, [r1, #24]
2400b60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b60e:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b610:	05db      	lsls	r3, r3, #23
2400b612:	d50a      	bpl.n	2400b62a <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b614:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b618:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b61a:	f043 0308 	orr.w	r3, r3, #8
2400b61e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b622:	6993      	ldr	r3, [r2, #24]
2400b624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b628:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b62a:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400b62c:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400b62e:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400b630:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b634:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b638:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b63c:	f043 0310 	orr.w	r3, r3, #16
2400b640:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b644:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400b648:	f7ff ffa6 	bl	2400b598 <HAL_SPI_ErrorCallback>
}
2400b64c:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b64e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b652:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b654:	f042 0204 	orr.w	r2, r2, #4
2400b658:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b65c:	698a      	ldr	r2, [r1, #24]
2400b65e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b662:	618a      	str	r2, [r1, #24]
2400b664:	e7c7      	b.n	2400b5f6 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b666:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b66a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b66c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b670:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b674:	698a      	ldr	r2, [r1, #24]
2400b676:	f042 0220 	orr.w	r2, r2, #32
2400b67a:	618a      	str	r2, [r1, #24]
2400b67c:	e7b5      	b.n	2400b5ea <SPI_DMAError+0x4e>
2400b67e:	bf00      	nop
2400b680:	fffffc90 	.word	0xfffffc90

2400b684 <SPI_DMAAbortOnError>:
{
2400b684:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400b686:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b688:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400b68a:	2300      	movs	r3, #0
2400b68c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b690:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400b694:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400b698:	f7ff ff7e 	bl	2400b598 <HAL_SPI_ErrorCallback>
}
2400b69c:	bd08      	pop	{r3, pc}
2400b69e:	bf00      	nop

2400b6a0 <HAL_SPI_SuspendCallback>:
2400b6a0:	4770      	bx	lr
2400b6a2:	bf00      	nop

2400b6a4 <HAL_SPI_IRQHandler>:
{
2400b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
2400b6a8:	6806      	ldr	r6, [r0, #0]
{
2400b6aa:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400b6ac:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400b6ae:	6973      	ldr	r3, [r6, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400b6b0:	f8d6 8008 	ldr.w	r8, [r6, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b6b4:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400b6b6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400b6ba:	ea02 0903 	and.w	r9, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400b6be:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b6c0:	d502      	bpl.n	2400b6c8 <HAL_SPI_IRQHandler+0x24>
2400b6c2:	0713      	lsls	r3, r2, #28
2400b6c4:	f100 8091 	bmi.w	2400b7ea <HAL_SPI_IRQHandler+0x146>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400b6c8:	f009 0364 	and.w	r3, r9, #100	; 0x64
2400b6cc:	2b04      	cmp	r3, #4
2400b6ce:	f000 8084 	beq.w	2400b7da <HAL_SPI_IRQHandler+0x136>
  uint32_t handled  = 0UL;
2400b6d2:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400b6d4:	f009 0745 	and.w	r7, r9, #69	; 0x45
2400b6d8:	2f01      	cmp	r7, #1
2400b6da:	d103      	bne.n	2400b6e4 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
2400b6dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b6de:	4620      	mov	r0, r4
2400b6e0:	4798      	blx	r3
    handled = 1UL;
2400b6e2:	463b      	mov	r3, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b6e4:	f009 0226 	and.w	r2, r9, #38	; 0x26
2400b6e8:	2a02      	cmp	r2, #2
2400b6ea:	d066      	beq.n	2400b7ba <HAL_SPI_IRQHandler+0x116>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b6ec:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b6f0:	d144      	bne.n	2400b77c <HAL_SPI_IRQHandler+0xd8>
  if (handled != 0UL)
2400b6f2:	2b00      	cmp	r3, #0
2400b6f4:	d140      	bne.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400b6f6:	f019 0f08 	tst.w	r9, #8
2400b6fa:	d03a      	beq.n	2400b772 <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b6fc:	6822      	ldr	r2, [r4, #0]
2400b6fe:	6993      	ldr	r3, [r2, #24]
2400b700:	f043 0308 	orr.w	r3, r3, #8
2400b704:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b706:	6822      	ldr	r2, [r4, #0]
2400b708:	6993      	ldr	r3, [r2, #24]
2400b70a:	f043 0310 	orr.w	r3, r3, #16
2400b70e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b710:	6822      	ldr	r2, [r4, #0]
2400b712:	6993      	ldr	r3, [r2, #24]
2400b714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b718:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b71a:	6822      	ldr	r2, [r4, #0]
2400b71c:	6913      	ldr	r3, [r2, #16]
2400b71e:	f023 0308 	bic.w	r3, r3, #8
2400b722:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b724:	6823      	ldr	r3, [r4, #0]
2400b726:	689b      	ldr	r3, [r3, #8]
2400b728:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400b72c:	d12f      	bne.n	2400b78e <HAL_SPI_IRQHandler+0xea>
      while (hspi->RxXferCount != 0UL)
2400b72e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b732:	b29b      	uxth	r3, r3
2400b734:	b35b      	cbz	r3, 2400b78e <HAL_SPI_IRQHandler+0xea>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400b736:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b738:	e00f      	b.n	2400b75a <HAL_SPI_IRQHandler+0xb6>
2400b73a:	6823      	ldr	r3, [r4, #0]
2400b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b73e:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b740:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b742:	3204      	adds	r2, #4
2400b744:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400b746:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b74a:	3b01      	subs	r3, #1
2400b74c:	b29b      	uxth	r3, r3
2400b74e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400b752:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b756:	b29b      	uxth	r3, r3
2400b758:	b1cb      	cbz	r3, 2400b78e <HAL_SPI_IRQHandler+0xea>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400b75a:	68e3      	ldr	r3, [r4, #12]
2400b75c:	2b0f      	cmp	r3, #15
2400b75e:	d8ec      	bhi.n	2400b73a <HAL_SPI_IRQHandler+0x96>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400b760:	2b07      	cmp	r3, #7
2400b762:	f240 80c4 	bls.w	2400b8ee <HAL_SPI_IRQHandler+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400b766:	8e33      	ldrh	r3, [r6, #48]	; 0x30
2400b768:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400b76a:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b76c:	3202      	adds	r2, #2
2400b76e:	6662      	str	r2, [r4, #100]	; 0x64
2400b770:	e7e9      	b.n	2400b746 <HAL_SPI_IRQHandler+0xa2>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400b772:	f419 7f58 	tst.w	r9, #864	; 0x360
2400b776:	d140      	bne.n	2400b7fa <HAL_SPI_IRQHandler+0x156>
}
2400b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b77c:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b77e:	2200      	movs	r2, #0
2400b780:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b784:	698a      	ldr	r2, [r1, #24]
2400b786:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400b78a:	618a      	str	r2, [r1, #24]
2400b78c:	e7b1      	b.n	2400b6f2 <HAL_SPI_IRQHandler+0x4e>
    SPI_CloseTransfer(hspi);
2400b78e:	4620      	mov	r0, r4
2400b790:	f7ff fb9e 	bl	2400aed0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400b794:	2301      	movs	r3, #1
2400b796:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b79a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b79e:	2b00      	cmp	r3, #0
2400b7a0:	f040 80a1 	bne.w	2400b8e6 <HAL_SPI_IRQHandler+0x242>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400b7a4:	2d05      	cmp	r5, #5
2400b7a6:	f000 80aa 	beq.w	2400b8fe <HAL_SPI_IRQHandler+0x25a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400b7aa:	2d04      	cmp	r5, #4
2400b7ac:	f000 80aa 	beq.w	2400b904 <HAL_SPI_IRQHandler+0x260>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400b7b0:	2d03      	cmp	r5, #3
2400b7b2:	d1e1      	bne.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
2400b7b4:	f7ff feba 	bl	2400b52c <HAL_SPI_TxCpltCallback>
2400b7b8:	e7de      	b.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
2400b7ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b7bc:	4620      	mov	r0, r4
2400b7be:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b7c0:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b7c4:	d0d8      	beq.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b7c6:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b7c8:	2300      	movs	r3, #0
2400b7ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b7ce:	6993      	ldr	r3, [r2, #24]
2400b7d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b7d4:	6193      	str	r3, [r2, #24]
}
2400b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
2400b7da:	4620      	mov	r0, r4
2400b7dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b7de:	4798      	blx	r3
    hspi->RxISR(hspi);
2400b7e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b7e2:	4620      	mov	r0, r4
2400b7e4:	4798      	blx	r3
    handled = 1UL;
2400b7e6:	2301      	movs	r3, #1
2400b7e8:	e774      	b.n	2400b6d4 <HAL_SPI_IRQHandler+0x30>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b7ea:	69b3      	ldr	r3, [r6, #24]
2400b7ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b7f0:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
2400b7f2:	f7ff ff55 	bl	2400b6a0 <HAL_SPI_SuspendCallback>
}
2400b7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400b7fa:	f019 0f40 	tst.w	r9, #64	; 0x40
2400b7fe:	d00a      	beq.n	2400b816 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b800:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b804:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b806:	f043 0304 	orr.w	r3, r3, #4
2400b80a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b80e:	6993      	ldr	r3, [r2, #24]
2400b810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b814:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400b816:	f419 7f00 	tst.w	r9, #512	; 0x200
2400b81a:	d00a      	beq.n	2400b832 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b81c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b820:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b822:	f043 0301 	orr.w	r3, r3, #1
2400b826:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b82a:	6993      	ldr	r3, [r2, #24]
2400b82c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b830:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400b832:	f419 7f80 	tst.w	r9, #256	; 0x100
2400b836:	d00a      	beq.n	2400b84e <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b838:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b83c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b83e:	f043 0308 	orr.w	r3, r3, #8
2400b842:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b846:	6993      	ldr	r3, [r2, #24]
2400b848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b84c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400b84e:	f019 0f20 	tst.w	r9, #32
2400b852:	d00a      	beq.n	2400b86a <HAL_SPI_IRQHandler+0x1c6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b854:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b858:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b85e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b862:	6993      	ldr	r3, [r2, #24]
2400b864:	f043 0320 	orr.w	r3, r3, #32
2400b868:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b86a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b86e:	2b00      	cmp	r3, #0
2400b870:	d082      	beq.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
2400b872:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b874:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b878:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b87a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b87e:	f023 0301 	bic.w	r3, r3, #1
2400b882:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400b884:	6822      	ldr	r2, [r4, #0]
2400b886:	4b21      	ldr	r3, [pc, #132]	; (2400b90c <HAL_SPI_IRQHandler+0x268>)
2400b888:	6911      	ldr	r1, [r2, #16]
2400b88a:	ea03 0301 	and.w	r3, r3, r1
2400b88e:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b890:	d125      	bne.n	2400b8de <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b892:	6822      	ldr	r2, [r4, #0]
2400b894:	6893      	ldr	r3, [r2, #8]
2400b896:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b89a:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400b89c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b89e:	b15b      	cbz	r3, 2400b8b8 <HAL_SPI_IRQHandler+0x214>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400b8a0:	4a1b      	ldr	r2, [pc, #108]	; (2400b910 <HAL_SPI_IRQHandler+0x26c>)
2400b8a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400b8a4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b8a6:	f7fa f813 	bl	240058d0 <HAL_DMA_Abort_IT>
2400b8aa:	b128      	cbz	r0, 2400b8b8 <HAL_SPI_IRQHandler+0x214>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b8ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b8b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400b8b8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b8ba:	2b00      	cmp	r3, #0
2400b8bc:	f43f af5c 	beq.w	2400b778 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400b8c0:	4a13      	ldr	r2, [pc, #76]	; (2400b910 <HAL_SPI_IRQHandler+0x26c>)
2400b8c2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400b8c4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b8c6:	f7fa f803 	bl	240058d0 <HAL_DMA_Abort_IT>
2400b8ca:	2800      	cmp	r0, #0
2400b8cc:	f43f af54 	beq.w	2400b778 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b8d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b8d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b8dc:	e74c      	b.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
2400b8de:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400b8e0:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400b8e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400b8e6:	f7ff fe57 	bl	2400b598 <HAL_SPI_ErrorCallback>
}
2400b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400b8ee:	6823      	ldr	r3, [r4, #0]
2400b8f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400b8f4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400b8f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b8f8:	3201      	adds	r2, #1
2400b8fa:	6662      	str	r2, [r4, #100]	; 0x64
2400b8fc:	e723      	b.n	2400b746 <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
2400b8fe:	f027 fe27 	bl	24033550 <__HAL_SPI_TxRxCpltCallback_veneer>
2400b902:	e739      	b.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
2400b904:	f027 fe14 	bl	24033530 <__HAL_SPI_RxCpltCallback_veneer>
2400b908:	e736      	b.n	2400b778 <HAL_SPI_IRQHandler+0xd4>
2400b90a:	bf00      	nop
2400b90c:	fffffc94 	.word	0xfffffc94
2400b910:	2400b685 	.word	0x2400b685

2400b914 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b914:	680b      	ldr	r3, [r1, #0]
{
2400b916:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b918:	b9d3      	cbnz	r3, 2400b950 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b91a:	6804      	ldr	r4, [r0, #0]
2400b91c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400b920:	684a      	ldr	r2, [r1, #4]
2400b922:	4023      	ands	r3, r4
2400b924:	4313      	orrs	r3, r2
2400b926:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b92a:	4323      	orrs	r3, r4
2400b92c:	4313      	orrs	r3, r2
2400b92e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400b932:	4323      	orrs	r3, r4
2400b934:	4313      	orrs	r3, r2
2400b936:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400b93a:	4323      	orrs	r3, r4
2400b93c:	4313      	orrs	r3, r2
2400b93e:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400b942:	4323      	orrs	r3, r4
2400b944:	4313      	orrs	r3, r2
2400b946:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400b948:	2000      	movs	r0, #0
2400b94a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b94e:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b950:	6802      	ldr	r2, [r0, #0]
2400b952:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400b956:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400b95a:	4322      	orrs	r2, r4
2400b95c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400b95e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b960:	4b0a      	ldr	r3, [pc, #40]	; (2400b98c <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b962:	4322      	orrs	r2, r4
2400b964:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b966:	6842      	ldr	r2, [r0, #4]
2400b968:	4013      	ands	r3, r2
2400b96a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400b96e:	4323      	orrs	r3, r4
2400b970:	4313      	orrs	r3, r2
2400b972:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400b976:	4323      	orrs	r3, r4
2400b978:	4313      	orrs	r3, r2
2400b97a:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400b97e:	4323      	orrs	r3, r4
2400b980:	4313      	orrs	r3, r2
2400b982:	6043      	str	r3, [r0, #4]
}
2400b984:	2000      	movs	r0, #0
2400b986:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b98a:	4770      	bx	lr
2400b98c:	ffff8000 	.word	0xffff8000

2400b990 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400b990:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400b992:	bb02      	cbnz	r2, 2400b9d6 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b994:	6883      	ldr	r3, [r0, #8]
2400b996:	e9d1 2400 	ldrd	r2, r4, [r1]
2400b99a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b99e:	3c01      	subs	r4, #1
2400b9a0:	3a01      	subs	r2, #1
2400b9a2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400b9a6:	4313      	orrs	r3, r2
2400b9a8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
2400b9ac:	3a01      	subs	r2, #1
2400b9ae:	3c01      	subs	r4, #1
2400b9b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400b9b4:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
2400b9b8:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
2400b9bc:	6989      	ldr	r1, [r1, #24]
2400b9be:	3b01      	subs	r3, #1
2400b9c0:	3c01      	subs	r4, #1
2400b9c2:	3901      	subs	r1, #1
2400b9c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
2400b9c8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
2400b9cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400b9d0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400b9d2:	2000      	movs	r0, #0
2400b9d4:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b9d6:	6885      	ldr	r5, [r0, #8]
2400b9d8:	68ca      	ldr	r2, [r1, #12]
2400b9da:	4b13      	ldr	r3, [pc, #76]	; (2400ba28 <FMC_SDRAM_Timing_Init+0x98>)
2400b9dc:	1e54      	subs	r4, r2, #1
2400b9de:	694a      	ldr	r2, [r1, #20]
2400b9e0:	402b      	ands	r3, r5
2400b9e2:	3a01      	subs	r2, #1
2400b9e4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400b9e8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400b9ec:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400b9ee:	68c3      	ldr	r3, [r0, #12]
2400b9f0:	e9d1 4200 	ldrd	r4, r2, [r1]
2400b9f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b9f8:	3a01      	subs	r2, #1
2400b9fa:	3c01      	subs	r4, #1
2400b9fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400ba00:	ea43 0204 	orr.w	r2, r3, r4
2400ba04:	688c      	ldr	r4, [r1, #8]
2400ba06:	690b      	ldr	r3, [r1, #16]
2400ba08:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
2400ba0c:	6989      	ldr	r1, [r1, #24]
2400ba0e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400ba12:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
2400ba16:	3901      	subs	r1, #1
2400ba18:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400ba1c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400ba20:	60c3      	str	r3, [r0, #12]
}
2400ba22:	2000      	movs	r0, #0
2400ba24:	bd30      	pop	{r4, r5, pc}
2400ba26:	bf00      	nop
2400ba28:	ff0f0fff 	.word	0xff0f0fff

2400ba2c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400ba2c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400ba2e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400ba32:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400ba34:	6900      	ldr	r0, [r0, #16]
2400ba36:	4323      	orrs	r3, r4
2400ba38:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400ba3c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400ba40:	4c05      	ldr	r4, [pc, #20]	; (2400ba58 <FMC_SDRAM_SendCommand+0x2c>)
2400ba42:	3901      	subs	r1, #1
2400ba44:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400ba46:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400ba48:	4323      	orrs	r3, r4
2400ba4a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400ba4e:	6113      	str	r3, [r2, #16]
}
2400ba50:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ba54:	4770      	bx	lr
2400ba56:	bf00      	nop
2400ba58:	ffc00000 	.word	0xffc00000

2400ba5c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400ba5c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400ba5e:	4b05      	ldr	r3, [pc, #20]	; (2400ba74 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400ba60:	2000      	movs	r0, #0
{
2400ba62:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400ba64:	6954      	ldr	r4, [r2, #20]
2400ba66:	4023      	ands	r3, r4
2400ba68:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400ba6c:	6151      	str	r1, [r2, #20]
}
2400ba6e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ba72:	4770      	bx	lr
2400ba74:	ffffc001 	.word	0xffffc001

2400ba78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400ba78:	b084      	sub	sp, #16
2400ba7a:	b410      	push	{r4}
2400ba7c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400ba80:	4614      	mov	r4, r2
{
2400ba82:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400ba86:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400ba88:	9904      	ldr	r1, [sp, #16]
{
2400ba8a:	4602      	mov	r2, r0
             Init.BusWide             | \
2400ba8c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400ba8e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400ba90:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400ba92:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400ba94:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400ba96:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400ba98:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400ba9a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400ba9c:	4903      	ldr	r1, [pc, #12]	; (2400baac <SDMMC_Init+0x34>)
2400ba9e:	4021      	ands	r1, r4
2400baa0:	430b      	orrs	r3, r1
2400baa2:	6053      	str	r3, [r2, #4]
}
2400baa4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400baa8:	b004      	add	sp, #16
2400baaa:	4770      	bx	lr
2400baac:	ffc02c00 	.word	0xffc02c00

2400bab0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400bab0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400bab4:	4770      	bx	lr
2400bab6:	bf00      	nop

2400bab8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400bab8:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400baba:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400babc:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400babe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400bac2:	4770      	bx	lr

2400bac4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400bac4:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400bac6:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400bac8:	681a      	ldr	r2, [r3, #0]
2400baca:	f042 0203 	orr.w	r2, r2, #3
2400bace:	601a      	str	r2, [r3, #0]
}
2400bad0:	4770      	bx	lr
2400bad2:	bf00      	nop

2400bad4 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400bad4:	6800      	ldr	r0, [r0, #0]
}
2400bad6:	f000 0003 	and.w	r0, r0, #3
2400bada:	4770      	bx	lr

2400badc <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400badc:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400bade:	5840      	ldr	r0, [r0, r1]
}
2400bae0:	4770      	bx	lr
2400bae2:	bf00      	nop

2400bae4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400bae4:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400bae6:	680b      	ldr	r3, [r1, #0]
{
2400bae8:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400baea:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400baec:	684b      	ldr	r3, [r1, #4]
2400baee:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400baf0:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400baf2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400baf4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400baf8:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400bafa:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400bafc:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400bb00:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400bb02:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400bb04:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400bb06:	430b      	orrs	r3, r1
2400bb08:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400bb0a:	bc30      	pop	{r4, r5}
2400bb0c:	4770      	bx	lr
2400bb0e:	bf00      	nop

2400bb10 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb10:	4a4c      	ldr	r2, [pc, #304]	; (2400bc44 <SDMMC_CmdBlockLength+0x134>)
2400bb12:	4b4d      	ldr	r3, [pc, #308]	; (2400bc48 <SDMMC_CmdBlockLength+0x138>)
{
2400bb14:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb16:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bb18:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb1a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb1e:	68c1      	ldr	r1, [r0, #12]
2400bb20:	4c4a      	ldr	r4, [pc, #296]	; (2400bc4c <SDMMC_CmdBlockLength+0x13c>)
2400bb22:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb26:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb28:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb2a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb2e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb30:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb34:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
2400bb36:	b14a      	cbz	r2, 2400bb4c <SDMMC_CmdBlockLength+0x3c>
2400bb38:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bb3a:	4945      	ldr	r1, [pc, #276]	; (2400bc50 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
2400bb3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bb3e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bb40:	420a      	tst	r2, r1
2400bb42:	d001      	beq.n	2400bb48 <SDMMC_CmdBlockLength+0x38>
2400bb44:	0492      	lsls	r2, r2, #18
2400bb46:	d507      	bpl.n	2400bb58 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
2400bb48:	1c5c      	adds	r4, r3, #1
2400bb4a:	d1f7      	bne.n	2400bb3c <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bb4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bb50:	4618      	mov	r0, r3
2400bb52:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb56:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bb58:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb5a:	075c      	lsls	r4, r3, #29
2400bb5c:	d43d      	bmi.n	2400bbda <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bb5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb60:	f013 0301 	ands.w	r3, r3, #1
2400bb64:	d134      	bne.n	2400bbd0 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bb66:	4b3b      	ldr	r3, [pc, #236]	; (2400bc54 <SDMMC_CmdBlockLength+0x144>)
2400bb68:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bb6a:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bb6c:	b2db      	uxtb	r3, r3
2400bb6e:	2b10      	cmp	r3, #16
2400bb70:	d131      	bne.n	2400bbd6 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bb72:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bb74:	4b38      	ldr	r3, [pc, #224]	; (2400bc58 <SDMMC_CmdBlockLength+0x148>)
2400bb76:	4013      	ands	r3, r2
2400bb78:	2b00      	cmp	r3, #0
2400bb7a:	d0e9      	beq.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bb7c:	2a00      	cmp	r2, #0
2400bb7e:	db30      	blt.n	2400bbe2 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bb80:	0051      	lsls	r1, r2, #1
2400bb82:	d431      	bmi.n	2400bbe8 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bb84:	0094      	lsls	r4, r2, #2
2400bb86:	d431      	bmi.n	2400bbec <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bb88:	00d0      	lsls	r0, r2, #3
2400bb8a:	d431      	bmi.n	2400bbf0 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bb8c:	0111      	lsls	r1, r2, #4
2400bb8e:	d432      	bmi.n	2400bbf6 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bb90:	0154      	lsls	r4, r2, #5
2400bb92:	d433      	bmi.n	2400bbfc <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bb94:	01d0      	lsls	r0, r2, #7
2400bb96:	d434      	bmi.n	2400bc02 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bb98:	0211      	lsls	r1, r2, #8
2400bb9a:	d435      	bmi.n	2400bc08 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bb9c:	0254      	lsls	r4, r2, #9
2400bb9e:	d436      	bmi.n	2400bc0e <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bba0:	0290      	lsls	r0, r2, #10
2400bba2:	d440      	bmi.n	2400bc26 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bba4:	02d1      	lsls	r1, r2, #11
2400bba6:	d43b      	bmi.n	2400bc20 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bba8:	0354      	lsls	r4, r2, #13
2400bbaa:	d436      	bmi.n	2400bc1a <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bbac:	0390      	lsls	r0, r2, #14
2400bbae:	d431      	bmi.n	2400bc14 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bbb0:	03d1      	lsls	r1, r2, #15
2400bbb2:	d444      	bmi.n	2400bc3e <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bbb4:	0414      	lsls	r4, r2, #16
2400bbb6:	d43f      	bmi.n	2400bc38 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bbb8:	0450      	lsls	r0, r2, #17
2400bbba:	d43a      	bmi.n	2400bc32 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bbbc:	0491      	lsls	r1, r2, #18
2400bbbe:	d435      	bmi.n	2400bc2c <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bbc0:	f012 0f08 	tst.w	r2, #8
2400bbc4:	bf14      	ite	ne
2400bbc6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bbca:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bbce:	e7bf      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bbd0:	2201      	movs	r2, #1
2400bbd2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bbd4:	e7bc      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bbd6:	2301      	movs	r3, #1
2400bbd8:	e7ba      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bbda:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bbdc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bbde:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bbe0:	e7b6      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bbe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bbe6:	e7b3      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bbe8:	2340      	movs	r3, #64	; 0x40
2400bbea:	e7b1      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bbec:	2380      	movs	r3, #128	; 0x80
2400bbee:	e7af      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bbf4:	e7ac      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bbf6:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bbfa:	e7a9      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bbfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bc00:	e7a6      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bc02:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bc06:	e7a3      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bc08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bc0c:	e7a0      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bc0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bc12:	e79d      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bc14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bc18:	e79a      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bc1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bc1e:	e797      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bc20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bc24:	e794      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bc26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bc2a:	e791      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bc2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bc30:	e78e      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bc32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bc36:	e78b      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bc38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bc3c:	e788      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bc3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bc42:	e785      	b.n	2400bb50 <SDMMC_CmdBlockLength+0x40>
2400bc44:	20000750 	.word	0x20000750
2400bc48:	10624dd3 	.word	0x10624dd3
2400bc4c:	fffee0c0 	.word	0xfffee0c0
2400bc50:	00200045 	.word	0x00200045
2400bc54:	002000c5 	.word	0x002000c5
2400bc58:	fdffe008 	.word	0xfdffe008

2400bc5c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc5c:	4a4c      	ldr	r2, [pc, #304]	; (2400bd90 <SDMMC_CmdReadSingleBlock+0x134>)
2400bc5e:	4b4d      	ldr	r3, [pc, #308]	; (2400bd94 <SDMMC_CmdReadSingleBlock+0x138>)
{
2400bc60:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc62:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bc64:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc66:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc6a:	68c1      	ldr	r1, [r0, #12]
2400bc6c:	4c4a      	ldr	r4, [pc, #296]	; (2400bd98 <SDMMC_CmdReadSingleBlock+0x13c>)
2400bc6e:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc74:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc76:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc7a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc80:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bc82:	b14a      	cbz	r2, 2400bc98 <SDMMC_CmdReadSingleBlock+0x3c>
2400bc84:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bc86:	4945      	ldr	r1, [pc, #276]	; (2400bd9c <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bc88:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bc8a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bc8c:	420a      	tst	r2, r1
2400bc8e:	d001      	beq.n	2400bc94 <SDMMC_CmdReadSingleBlock+0x38>
2400bc90:	0492      	lsls	r2, r2, #18
2400bc92:	d507      	bpl.n	2400bca4 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
2400bc94:	1c5c      	adds	r4, r3, #1
2400bc96:	d1f7      	bne.n	2400bc88 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bc98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bc9c:	4618      	mov	r0, r3
2400bc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bca2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bca4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bca6:	075c      	lsls	r4, r3, #29
2400bca8:	d43d      	bmi.n	2400bd26 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bcaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcac:	f013 0301 	ands.w	r3, r3, #1
2400bcb0:	d134      	bne.n	2400bd1c <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bcb2:	4b3b      	ldr	r3, [pc, #236]	; (2400bda0 <SDMMC_CmdReadSingleBlock+0x144>)
2400bcb4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bcb6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bcb8:	b2db      	uxtb	r3, r3
2400bcba:	2b11      	cmp	r3, #17
2400bcbc:	d131      	bne.n	2400bd22 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bcbe:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bcc0:	4b38      	ldr	r3, [pc, #224]	; (2400bda4 <SDMMC_CmdReadSingleBlock+0x148>)
2400bcc2:	4013      	ands	r3, r2
2400bcc4:	2b00      	cmp	r3, #0
2400bcc6:	d0e9      	beq.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bcc8:	2a00      	cmp	r2, #0
2400bcca:	db30      	blt.n	2400bd2e <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bccc:	0051      	lsls	r1, r2, #1
2400bcce:	d431      	bmi.n	2400bd34 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bcd0:	0094      	lsls	r4, r2, #2
2400bcd2:	d431      	bmi.n	2400bd38 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bcd4:	00d0      	lsls	r0, r2, #3
2400bcd6:	d431      	bmi.n	2400bd3c <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bcd8:	0111      	lsls	r1, r2, #4
2400bcda:	d432      	bmi.n	2400bd42 <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bcdc:	0154      	lsls	r4, r2, #5
2400bcde:	d433      	bmi.n	2400bd48 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bce0:	01d0      	lsls	r0, r2, #7
2400bce2:	d434      	bmi.n	2400bd4e <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bce4:	0211      	lsls	r1, r2, #8
2400bce6:	d435      	bmi.n	2400bd54 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bce8:	0254      	lsls	r4, r2, #9
2400bcea:	d436      	bmi.n	2400bd5a <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bcec:	0290      	lsls	r0, r2, #10
2400bcee:	d440      	bmi.n	2400bd72 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bcf0:	02d1      	lsls	r1, r2, #11
2400bcf2:	d43b      	bmi.n	2400bd6c <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bcf4:	0354      	lsls	r4, r2, #13
2400bcf6:	d436      	bmi.n	2400bd66 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bcf8:	0390      	lsls	r0, r2, #14
2400bcfa:	d431      	bmi.n	2400bd60 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bcfc:	03d1      	lsls	r1, r2, #15
2400bcfe:	d444      	bmi.n	2400bd8a <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bd00:	0414      	lsls	r4, r2, #16
2400bd02:	d43f      	bmi.n	2400bd84 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bd04:	0450      	lsls	r0, r2, #17
2400bd06:	d43a      	bmi.n	2400bd7e <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bd08:	0491      	lsls	r1, r2, #18
2400bd0a:	d435      	bmi.n	2400bd78 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bd0c:	f012 0f08 	tst.w	r2, #8
2400bd10:	bf14      	ite	ne
2400bd12:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bd16:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bd1a:	e7bf      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bd1c:	2201      	movs	r2, #1
2400bd1e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bd20:	e7bc      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bd22:	2301      	movs	r3, #1
2400bd24:	e7ba      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bd26:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bd28:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bd2a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bd2c:	e7b6      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bd2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bd32:	e7b3      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bd34:	2340      	movs	r3, #64	; 0x40
2400bd36:	e7b1      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bd38:	2380      	movs	r3, #128	; 0x80
2400bd3a:	e7af      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bd3c:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bd40:	e7ac      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bd42:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bd46:	e7a9      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bd48:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bd4c:	e7a6      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bd4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bd52:	e7a3      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bd54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bd58:	e7a0      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bd5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bd5e:	e79d      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bd60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bd64:	e79a      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bd66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bd6a:	e797      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bd6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bd70:	e794      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bd72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bd76:	e791      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bd78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bd7c:	e78e      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bd7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bd82:	e78b      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bd84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bd88:	e788      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bd8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bd8e:	e785      	b.n	2400bc9c <SDMMC_CmdReadSingleBlock+0x40>
2400bd90:	20000750 	.word	0x20000750
2400bd94:	10624dd3 	.word	0x10624dd3
2400bd98:	fffee0c0 	.word	0xfffee0c0
2400bd9c:	00200045 	.word	0x00200045
2400bda0:	002000c5 	.word	0x002000c5
2400bda4:	fdffe008 	.word	0xfdffe008

2400bda8 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bda8:	4a4c      	ldr	r2, [pc, #304]	; (2400bedc <SDMMC_CmdReadMultiBlock+0x134>)
2400bdaa:	4b4d      	ldr	r3, [pc, #308]	; (2400bee0 <SDMMC_CmdReadMultiBlock+0x138>)
{
2400bdac:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bdb0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdb2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bdb6:	68c1      	ldr	r1, [r0, #12]
2400bdb8:	4c4a      	ldr	r4, [pc, #296]	; (2400bee4 <SDMMC_CmdReadMultiBlock+0x13c>)
2400bdba:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdbe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bdc0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdc2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bdc6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdc8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bdcc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bdce:	b14a      	cbz	r2, 2400bde4 <SDMMC_CmdReadMultiBlock+0x3c>
2400bdd0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bdd2:	4945      	ldr	r1, [pc, #276]	; (2400bee8 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bdd4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bdd6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bdd8:	420a      	tst	r2, r1
2400bdda:	d001      	beq.n	2400bde0 <SDMMC_CmdReadMultiBlock+0x38>
2400bddc:	0492      	lsls	r2, r2, #18
2400bdde:	d507      	bpl.n	2400bdf0 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400bde0:	1c5c      	adds	r4, r3, #1
2400bde2:	d1f7      	bne.n	2400bdd4 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bde4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bde8:	4618      	mov	r0, r3
2400bdea:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bdee:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bdf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bdf2:	075c      	lsls	r4, r3, #29
2400bdf4:	d43d      	bmi.n	2400be72 <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bdf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bdf8:	f013 0301 	ands.w	r3, r3, #1
2400bdfc:	d134      	bne.n	2400be68 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bdfe:	4b3b      	ldr	r3, [pc, #236]	; (2400beec <SDMMC_CmdReadMultiBlock+0x144>)
2400be00:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400be02:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400be04:	b2db      	uxtb	r3, r3
2400be06:	2b12      	cmp	r3, #18
2400be08:	d131      	bne.n	2400be6e <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400be0a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400be0c:	4b38      	ldr	r3, [pc, #224]	; (2400bef0 <SDMMC_CmdReadMultiBlock+0x148>)
2400be0e:	4013      	ands	r3, r2
2400be10:	2b00      	cmp	r3, #0
2400be12:	d0e9      	beq.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400be14:	2a00      	cmp	r2, #0
2400be16:	db30      	blt.n	2400be7a <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400be18:	0051      	lsls	r1, r2, #1
2400be1a:	d431      	bmi.n	2400be80 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400be1c:	0094      	lsls	r4, r2, #2
2400be1e:	d431      	bmi.n	2400be84 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400be20:	00d0      	lsls	r0, r2, #3
2400be22:	d431      	bmi.n	2400be88 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400be24:	0111      	lsls	r1, r2, #4
2400be26:	d432      	bmi.n	2400be8e <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400be28:	0154      	lsls	r4, r2, #5
2400be2a:	d433      	bmi.n	2400be94 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400be2c:	01d0      	lsls	r0, r2, #7
2400be2e:	d434      	bmi.n	2400be9a <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400be30:	0211      	lsls	r1, r2, #8
2400be32:	d435      	bmi.n	2400bea0 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400be34:	0254      	lsls	r4, r2, #9
2400be36:	d436      	bmi.n	2400bea6 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400be38:	0290      	lsls	r0, r2, #10
2400be3a:	d440      	bmi.n	2400bebe <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400be3c:	02d1      	lsls	r1, r2, #11
2400be3e:	d43b      	bmi.n	2400beb8 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400be40:	0354      	lsls	r4, r2, #13
2400be42:	d436      	bmi.n	2400beb2 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400be44:	0390      	lsls	r0, r2, #14
2400be46:	d431      	bmi.n	2400beac <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400be48:	03d1      	lsls	r1, r2, #15
2400be4a:	d444      	bmi.n	2400bed6 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400be4c:	0414      	lsls	r4, r2, #16
2400be4e:	d43f      	bmi.n	2400bed0 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400be50:	0450      	lsls	r0, r2, #17
2400be52:	d43a      	bmi.n	2400beca <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400be54:	0491      	lsls	r1, r2, #18
2400be56:	d435      	bmi.n	2400bec4 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400be58:	f012 0f08 	tst.w	r2, #8
2400be5c:	bf14      	ite	ne
2400be5e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400be62:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400be66:	e7bf      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400be68:	2201      	movs	r2, #1
2400be6a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400be6c:	e7bc      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400be6e:	2301      	movs	r3, #1
2400be70:	e7ba      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400be72:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400be74:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400be76:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400be78:	e7b6      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400be7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400be7e:	e7b3      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400be80:	2340      	movs	r3, #64	; 0x40
2400be82:	e7b1      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400be84:	2380      	movs	r3, #128	; 0x80
2400be86:	e7af      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400be88:	f44f 7380 	mov.w	r3, #256	; 0x100
2400be8c:	e7ac      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400be8e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400be92:	e7a9      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400be98:	e7a6      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400be9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400be9e:	e7a3      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bea4:	e7a0      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400beaa:	e79d      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400beac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400beb0:	e79a      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400beb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400beb6:	e797      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400beb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bebc:	e794      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bec2:	e791      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bec4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bec8:	e78e      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400beca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bece:	e78b      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bed0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bed4:	e788      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bed6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400beda:	e785      	b.n	2400bde8 <SDMMC_CmdReadMultiBlock+0x40>
2400bedc:	20000750 	.word	0x20000750
2400bee0:	10624dd3 	.word	0x10624dd3
2400bee4:	fffee0c0 	.word	0xfffee0c0
2400bee8:	00200045 	.word	0x00200045
2400beec:	002000c5 	.word	0x002000c5
2400bef0:	fdffe008 	.word	0xfdffe008

2400bef4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bef4:	4a4c      	ldr	r2, [pc, #304]	; (2400c028 <SDMMC_CmdWriteSingleBlock+0x134>)
2400bef6:	4b4d      	ldr	r3, [pc, #308]	; (2400c02c <SDMMC_CmdWriteSingleBlock+0x138>)
{
2400bef8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400befa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400befc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400befe:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf02:	68c1      	ldr	r1, [r0, #12]
2400bf04:	4c4a      	ldr	r4, [pc, #296]	; (2400c030 <SDMMC_CmdWriteSingleBlock+0x13c>)
2400bf06:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf0a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf0c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf0e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf12:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bf14:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf18:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bf1a:	b14a      	cbz	r2, 2400bf30 <SDMMC_CmdWriteSingleBlock+0x3c>
2400bf1c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bf1e:	4945      	ldr	r1, [pc, #276]	; (2400c034 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bf20:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bf22:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bf24:	420a      	tst	r2, r1
2400bf26:	d001      	beq.n	2400bf2c <SDMMC_CmdWriteSingleBlock+0x38>
2400bf28:	0492      	lsls	r2, r2, #18
2400bf2a:	d507      	bpl.n	2400bf3c <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
2400bf2c:	1c5c      	adds	r4, r3, #1
2400bf2e:	d1f7      	bne.n	2400bf20 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bf30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bf34:	4618      	mov	r0, r3
2400bf36:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bf3a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bf3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bf3e:	075c      	lsls	r4, r3, #29
2400bf40:	d43d      	bmi.n	2400bfbe <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bf42:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bf44:	f013 0301 	ands.w	r3, r3, #1
2400bf48:	d134      	bne.n	2400bfb4 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bf4a:	4b3b      	ldr	r3, [pc, #236]	; (2400c038 <SDMMC_CmdWriteSingleBlock+0x144>)
2400bf4c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bf4e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bf50:	b2db      	uxtb	r3, r3
2400bf52:	2b18      	cmp	r3, #24
2400bf54:	d131      	bne.n	2400bfba <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bf56:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bf58:	4b38      	ldr	r3, [pc, #224]	; (2400c03c <SDMMC_CmdWriteSingleBlock+0x148>)
2400bf5a:	4013      	ands	r3, r2
2400bf5c:	2b00      	cmp	r3, #0
2400bf5e:	d0e9      	beq.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bf60:	2a00      	cmp	r2, #0
2400bf62:	db30      	blt.n	2400bfc6 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bf64:	0051      	lsls	r1, r2, #1
2400bf66:	d431      	bmi.n	2400bfcc <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bf68:	0094      	lsls	r4, r2, #2
2400bf6a:	d431      	bmi.n	2400bfd0 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bf6c:	00d0      	lsls	r0, r2, #3
2400bf6e:	d431      	bmi.n	2400bfd4 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bf70:	0111      	lsls	r1, r2, #4
2400bf72:	d432      	bmi.n	2400bfda <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bf74:	0154      	lsls	r4, r2, #5
2400bf76:	d433      	bmi.n	2400bfe0 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bf78:	01d0      	lsls	r0, r2, #7
2400bf7a:	d434      	bmi.n	2400bfe6 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bf7c:	0211      	lsls	r1, r2, #8
2400bf7e:	d435      	bmi.n	2400bfec <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bf80:	0254      	lsls	r4, r2, #9
2400bf82:	d436      	bmi.n	2400bff2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bf84:	0290      	lsls	r0, r2, #10
2400bf86:	d440      	bmi.n	2400c00a <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bf88:	02d1      	lsls	r1, r2, #11
2400bf8a:	d43b      	bmi.n	2400c004 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bf8c:	0354      	lsls	r4, r2, #13
2400bf8e:	d436      	bmi.n	2400bffe <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bf90:	0390      	lsls	r0, r2, #14
2400bf92:	d431      	bmi.n	2400bff8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bf94:	03d1      	lsls	r1, r2, #15
2400bf96:	d444      	bmi.n	2400c022 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bf98:	0414      	lsls	r4, r2, #16
2400bf9a:	d43f      	bmi.n	2400c01c <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bf9c:	0450      	lsls	r0, r2, #17
2400bf9e:	d43a      	bmi.n	2400c016 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bfa0:	0491      	lsls	r1, r2, #18
2400bfa2:	d435      	bmi.n	2400c010 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bfa4:	f012 0f08 	tst.w	r2, #8
2400bfa8:	bf14      	ite	ne
2400bfaa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bfae:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bfb2:	e7bf      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bfb4:	2201      	movs	r2, #1
2400bfb6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bfb8:	e7bc      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bfba:	2301      	movs	r3, #1
2400bfbc:	e7ba      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bfbe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bfc0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bfc2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bfc4:	e7b6      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bfc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bfca:	e7b3      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bfcc:	2340      	movs	r3, #64	; 0x40
2400bfce:	e7b1      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bfd0:	2380      	movs	r3, #128	; 0x80
2400bfd2:	e7af      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bfd4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bfd8:	e7ac      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bfda:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bfde:	e7a9      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bfe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bfe4:	e7a6      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bfe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bfea:	e7a3      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bfec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bff0:	e7a0      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bff6:	e79d      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bff8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bffc:	e79a      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c002:	e797      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c008:	e794      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c00a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c00e:	e791      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c010:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c014:	e78e      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c016:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c01a:	e78b      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c01c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c020:	e788      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c022:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c026:	e785      	b.n	2400bf34 <SDMMC_CmdWriteSingleBlock+0x40>
2400c028:	20000750 	.word	0x20000750
2400c02c:	10624dd3 	.word	0x10624dd3
2400c030:	fffee0c0 	.word	0xfffee0c0
2400c034:	00200045 	.word	0x00200045
2400c038:	002000c5 	.word	0x002000c5
2400c03c:	fdffe008 	.word	0xfdffe008

2400c040 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c040:	4a4c      	ldr	r2, [pc, #304]	; (2400c174 <SDMMC_CmdWriteMultiBlock+0x134>)
2400c042:	4b4d      	ldr	r3, [pc, #308]	; (2400c178 <SDMMC_CmdWriteMultiBlock+0x138>)
{
2400c044:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c046:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c048:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c04a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c04e:	68c1      	ldr	r1, [r0, #12]
2400c050:	4c4a      	ldr	r4, [pc, #296]	; (2400c17c <SDMMC_CmdWriteMultiBlock+0x13c>)
2400c052:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c056:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c058:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c05a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c05e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c060:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c064:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c066:	b14a      	cbz	r2, 2400c07c <SDMMC_CmdWriteMultiBlock+0x3c>
2400c068:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c06a:	4945      	ldr	r1, [pc, #276]	; (2400c180 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400c06c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c06e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c070:	420a      	tst	r2, r1
2400c072:	d001      	beq.n	2400c078 <SDMMC_CmdWriteMultiBlock+0x38>
2400c074:	0492      	lsls	r2, r2, #18
2400c076:	d507      	bpl.n	2400c088 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
2400c078:	1c5c      	adds	r4, r3, #1
2400c07a:	d1f7      	bne.n	2400c06c <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c07c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c080:	4618      	mov	r0, r3
2400c082:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c086:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c088:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c08a:	075c      	lsls	r4, r3, #29
2400c08c:	d43d      	bmi.n	2400c10a <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c08e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c090:	f013 0301 	ands.w	r3, r3, #1
2400c094:	d134      	bne.n	2400c100 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c096:	4b3b      	ldr	r3, [pc, #236]	; (2400c184 <SDMMC_CmdWriteMultiBlock+0x144>)
2400c098:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c09a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c09c:	b2db      	uxtb	r3, r3
2400c09e:	2b19      	cmp	r3, #25
2400c0a0:	d131      	bne.n	2400c106 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c0a2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c0a4:	4b38      	ldr	r3, [pc, #224]	; (2400c188 <SDMMC_CmdWriteMultiBlock+0x148>)
2400c0a6:	4013      	ands	r3, r2
2400c0a8:	2b00      	cmp	r3, #0
2400c0aa:	d0e9      	beq.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c0ac:	2a00      	cmp	r2, #0
2400c0ae:	db30      	blt.n	2400c112 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c0b0:	0051      	lsls	r1, r2, #1
2400c0b2:	d431      	bmi.n	2400c118 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c0b4:	0094      	lsls	r4, r2, #2
2400c0b6:	d431      	bmi.n	2400c11c <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c0b8:	00d0      	lsls	r0, r2, #3
2400c0ba:	d431      	bmi.n	2400c120 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c0bc:	0111      	lsls	r1, r2, #4
2400c0be:	d432      	bmi.n	2400c126 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c0c0:	0154      	lsls	r4, r2, #5
2400c0c2:	d433      	bmi.n	2400c12c <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c0c4:	01d0      	lsls	r0, r2, #7
2400c0c6:	d434      	bmi.n	2400c132 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c0c8:	0211      	lsls	r1, r2, #8
2400c0ca:	d435      	bmi.n	2400c138 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c0cc:	0254      	lsls	r4, r2, #9
2400c0ce:	d436      	bmi.n	2400c13e <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c0d0:	0290      	lsls	r0, r2, #10
2400c0d2:	d440      	bmi.n	2400c156 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c0d4:	02d1      	lsls	r1, r2, #11
2400c0d6:	d43b      	bmi.n	2400c150 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c0d8:	0354      	lsls	r4, r2, #13
2400c0da:	d436      	bmi.n	2400c14a <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c0dc:	0390      	lsls	r0, r2, #14
2400c0de:	d431      	bmi.n	2400c144 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c0e0:	03d1      	lsls	r1, r2, #15
2400c0e2:	d444      	bmi.n	2400c16e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c0e4:	0414      	lsls	r4, r2, #16
2400c0e6:	d43f      	bmi.n	2400c168 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c0e8:	0450      	lsls	r0, r2, #17
2400c0ea:	d43a      	bmi.n	2400c162 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c0ec:	0491      	lsls	r1, r2, #18
2400c0ee:	d435      	bmi.n	2400c15c <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c0f0:	f012 0f08 	tst.w	r2, #8
2400c0f4:	bf14      	ite	ne
2400c0f6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c0fa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c0fe:	e7bf      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c100:	2201      	movs	r2, #1
2400c102:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c104:	e7bc      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c106:	2301      	movs	r3, #1
2400c108:	e7ba      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c10a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c10c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c10e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c110:	e7b6      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c116:	e7b3      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c118:	2340      	movs	r3, #64	; 0x40
2400c11a:	e7b1      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c11c:	2380      	movs	r3, #128	; 0x80
2400c11e:	e7af      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c120:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c124:	e7ac      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c126:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c12a:	e7a9      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c130:	e7a6      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c132:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c136:	e7a3      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c13c:	e7a0      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c13e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c142:	e79d      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c144:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c148:	e79a      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c14a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c14e:	e797      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c154:	e794      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c156:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c15a:	e791      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c15c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c160:	e78e      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c162:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c166:	e78b      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c168:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c16c:	e788      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c16e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c172:	e785      	b.n	2400c080 <SDMMC_CmdWriteMultiBlock+0x40>
2400c174:	20000750 	.word	0x20000750
2400c178:	10624dd3 	.word	0x10624dd3
2400c17c:	fffee0c0 	.word	0xfffee0c0
2400c180:	00200045 	.word	0x00200045
2400c184:	002000c5 	.word	0x002000c5
2400c188:	fdffe008 	.word	0xfdffe008

2400c18c <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c18c:	4b7d      	ldr	r3, [pc, #500]	; (2400c384 <SDMMC_CmdStopTransfer+0x1f8>)
2400c18e:	497e      	ldr	r1, [pc, #504]	; (2400c388 <SDMMC_CmdStopTransfer+0x1fc>)
{
2400c190:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c192:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400c194:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c196:	4b7d      	ldr	r3, [pc, #500]	; (2400c38c <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c198:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c19c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c19e:	4d7c      	ldr	r5, [pc, #496]	; (2400c390 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c1a0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1a4:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c1a6:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c1a8:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1aa:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c1ae:	f021 0140 	bic.w	r1, r1, #64	; 0x40
2400c1b2:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1b4:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400c1b8:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1ba:	68c4      	ldr	r4, [r0, #12]
2400c1bc:	4023      	ands	r3, r4
2400c1be:	4319      	orrs	r1, r3
2400c1c0:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400c1c2:	b14a      	cbz	r2, 2400c1d8 <SDMMC_CmdStopTransfer+0x4c>
2400c1c4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c1c6:	4973      	ldr	r1, [pc, #460]	; (2400c394 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
2400c1c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c1ca:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c1cc:	420a      	tst	r2, r1
2400c1ce:	d001      	beq.n	2400c1d4 <SDMMC_CmdStopTransfer+0x48>
2400c1d0:	0492      	lsls	r2, r2, #18
2400c1d2:	d50a      	bpl.n	2400c1ea <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400c1d4:	1c5c      	adds	r4, r3, #1
2400c1d6:	d1f7      	bne.n	2400c1c8 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c1d8:	68c2      	ldr	r2, [r0, #12]
2400c1da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400c1de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c1e2:	60c2      	str	r2, [r0, #12]
}
2400c1e4:	4618      	mov	r0, r3
2400c1e6:	bc30      	pop	{r4, r5}
2400c1e8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c1ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c1ec:	075b      	lsls	r3, r3, #29
2400c1ee:	d454      	bmi.n	2400c29a <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c1f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c1f2:	f013 0301 	ands.w	r3, r3, #1
2400c1f6:	d13c      	bne.n	2400c272 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c1f8:	4a67      	ldr	r2, [pc, #412]	; (2400c398 <SDMMC_CmdStopTransfer+0x20c>)
2400c1fa:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c1fc:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c1fe:	b2d2      	uxtb	r2, r2
2400c200:	2a0c      	cmp	r2, #12
2400c202:	d144      	bne.n	2400c28e <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
2400c204:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c206:	4965      	ldr	r1, [pc, #404]	; (2400c39c <SDMMC_CmdStopTransfer+0x210>)
2400c208:	4011      	ands	r1, r2
2400c20a:	2900      	cmp	r1, #0
2400c20c:	d038      	beq.n	2400c280 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c20e:	2a00      	cmp	r2, #0
2400c210:	db36      	blt.n	2400c280 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c212:	0055      	lsls	r5, r2, #1
2400c214:	d448      	bmi.n	2400c2a8 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c216:	0094      	lsls	r4, r2, #2
2400c218:	d44c      	bmi.n	2400c2b4 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c21a:	00d1      	lsls	r1, r2, #3
2400c21c:	d450      	bmi.n	2400c2c0 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c21e:	0113      	lsls	r3, r2, #4
2400c220:	d455      	bmi.n	2400c2ce <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c222:	0155      	lsls	r5, r2, #5
2400c224:	d45a      	bmi.n	2400c2dc <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c226:	01d4      	lsls	r4, r2, #7
2400c228:	d466      	bmi.n	2400c2f8 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c22a:	0211      	lsls	r1, r2, #8
2400c22c:	d45d      	bmi.n	2400c2ea <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c22e:	0253      	lsls	r3, r2, #9
2400c230:	d470      	bmi.n	2400c314 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c232:	0295      	lsls	r5, r2, #10
2400c234:	d467      	bmi.n	2400c306 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c236:	02d4      	lsls	r4, r2, #11
2400c238:	f100 8081 	bmi.w	2400c33e <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c23c:	0351      	lsls	r1, r2, #13
2400c23e:	d477      	bmi.n	2400c330 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c240:	0393      	lsls	r3, r2, #14
2400c242:	d46e      	bmi.n	2400c322 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c244:	03d5      	lsls	r5, r2, #15
2400c246:	f100 8096 	bmi.w	2400c376 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c24a:	0414      	lsls	r4, r2, #16
2400c24c:	f100 8085 	bmi.w	2400c35a <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c250:	0451      	lsls	r1, r2, #17
2400c252:	d47b      	bmi.n	2400c34c <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c254:	0493      	lsls	r3, r2, #18
2400c256:	f100 8087 	bmi.w	2400c368 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400c25a:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c25e:	68c2      	ldr	r2, [r0, #12]
2400c260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400c264:	bf14      	ite	ne
2400c266:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c26a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c26e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c270:	e7b8      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c272:	2201      	movs	r2, #1
2400c274:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c276:	68c2      	ldr	r2, [r0, #12]
2400c278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c27c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c27e:	e7b1      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c280:	68c2      	ldr	r2, [r0, #12]
2400c282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c286:	60c2      	str	r2, [r0, #12]
}
2400c288:	4618      	mov	r0, r3
2400c28a:	bc30      	pop	{r4, r5}
2400c28c:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c28e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c290:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c296:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c298:	e7a4      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c29a:	2304      	movs	r3, #4
2400c29c:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c29e:	68c2      	ldr	r2, [r0, #12]
2400c2a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2a4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2a6:	e79d      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2a8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c2aa:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2b0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2b2:	e797      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2b4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c2b6:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2bc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2be:	e791      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2c0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2ca:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2cc:	e78a      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2ce:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c2d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2d8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2da:	e783      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2dc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2e6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2e8:	e77c      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2ea:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c2f4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c2f6:	e775      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2f8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c2fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c302:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c304:	e76e      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c306:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c30c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c310:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c312:	e767      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c314:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c31a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c31e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c320:	e760      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c322:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c32c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c32e:	e759      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c330:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c33a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c33c:	e752      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c33e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
2400c340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c348:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c34a:	e74b      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c34c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c34e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c356:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c358:	e744      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c35a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c35c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c364:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c366:	e73d      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c368:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400c36a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c36e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c372:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c374:	e736      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c376:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c378:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c37c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400c380:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c382:	e72f      	b.n	2400c1e4 <SDMMC_CmdStopTransfer+0x58>
2400c384:	20000750 	.word	0x20000750
2400c388:	10624dd3 	.word	0x10624dd3
2400c38c:	fffee0c0 	.word	0xfffee0c0
2400c390:	05f5e100 	.word	0x05f5e100
2400c394:	00200045 	.word	0x00200045
2400c398:	002000c5 	.word	0x002000c5
2400c39c:	fdffe008 	.word	0xfdffe008

2400c3a0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3a0:	4a4c      	ldr	r2, [pc, #304]	; (2400c4d4 <SDMMC_CmdSelDesel+0x134>)
2400c3a2:	4b4d      	ldr	r3, [pc, #308]	; (2400c4d8 <SDMMC_CmdSelDesel+0x138>)
{
2400c3a4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3a6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c3a8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3aa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3ae:	68c1      	ldr	r1, [r0, #12]
2400c3b0:	4c4a      	ldr	r4, [pc, #296]	; (2400c4dc <SDMMC_CmdSelDesel+0x13c>)
2400c3b2:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3b6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3b8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3ba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3be:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3c0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3c4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c3c6:	b14a      	cbz	r2, 2400c3dc <SDMMC_CmdSelDesel+0x3c>
2400c3c8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c3ca:	4945      	ldr	r1, [pc, #276]	; (2400c4e0 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
2400c3cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c3ce:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c3d0:	420a      	tst	r2, r1
2400c3d2:	d001      	beq.n	2400c3d8 <SDMMC_CmdSelDesel+0x38>
2400c3d4:	0492      	lsls	r2, r2, #18
2400c3d6:	d507      	bpl.n	2400c3e8 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
2400c3d8:	1c5c      	adds	r4, r3, #1
2400c3da:	d1f7      	bne.n	2400c3cc <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c3dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c3e0:	4618      	mov	r0, r3
2400c3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c3e6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c3e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c3ea:	075c      	lsls	r4, r3, #29
2400c3ec:	d43d      	bmi.n	2400c46a <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c3ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c3f0:	f013 0301 	ands.w	r3, r3, #1
2400c3f4:	d134      	bne.n	2400c460 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c3f6:	4b3b      	ldr	r3, [pc, #236]	; (2400c4e4 <SDMMC_CmdSelDesel+0x144>)
2400c3f8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c3fa:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c3fc:	b2db      	uxtb	r3, r3
2400c3fe:	2b07      	cmp	r3, #7
2400c400:	d131      	bne.n	2400c466 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c402:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c404:	4b38      	ldr	r3, [pc, #224]	; (2400c4e8 <SDMMC_CmdSelDesel+0x148>)
2400c406:	4013      	ands	r3, r2
2400c408:	2b00      	cmp	r3, #0
2400c40a:	d0e9      	beq.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c40c:	2a00      	cmp	r2, #0
2400c40e:	db30      	blt.n	2400c472 <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c410:	0051      	lsls	r1, r2, #1
2400c412:	d431      	bmi.n	2400c478 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c414:	0094      	lsls	r4, r2, #2
2400c416:	d431      	bmi.n	2400c47c <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c418:	00d0      	lsls	r0, r2, #3
2400c41a:	d431      	bmi.n	2400c480 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c41c:	0111      	lsls	r1, r2, #4
2400c41e:	d432      	bmi.n	2400c486 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c420:	0154      	lsls	r4, r2, #5
2400c422:	d433      	bmi.n	2400c48c <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c424:	01d0      	lsls	r0, r2, #7
2400c426:	d434      	bmi.n	2400c492 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c428:	0211      	lsls	r1, r2, #8
2400c42a:	d435      	bmi.n	2400c498 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c42c:	0254      	lsls	r4, r2, #9
2400c42e:	d436      	bmi.n	2400c49e <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c430:	0290      	lsls	r0, r2, #10
2400c432:	d440      	bmi.n	2400c4b6 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c434:	02d1      	lsls	r1, r2, #11
2400c436:	d43b      	bmi.n	2400c4b0 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c438:	0354      	lsls	r4, r2, #13
2400c43a:	d436      	bmi.n	2400c4aa <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c43c:	0390      	lsls	r0, r2, #14
2400c43e:	d431      	bmi.n	2400c4a4 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c440:	03d1      	lsls	r1, r2, #15
2400c442:	d444      	bmi.n	2400c4ce <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c444:	0414      	lsls	r4, r2, #16
2400c446:	d43f      	bmi.n	2400c4c8 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c448:	0450      	lsls	r0, r2, #17
2400c44a:	d43a      	bmi.n	2400c4c2 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c44c:	0491      	lsls	r1, r2, #18
2400c44e:	d435      	bmi.n	2400c4bc <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c450:	f012 0f08 	tst.w	r2, #8
2400c454:	bf14      	ite	ne
2400c456:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c45a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c45e:	e7bf      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c460:	2201      	movs	r2, #1
2400c462:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c464:	e7bc      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c466:	2301      	movs	r3, #1
2400c468:	e7ba      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c46a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c46c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c46e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c470:	e7b6      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c476:	e7b3      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c478:	2340      	movs	r3, #64	; 0x40
2400c47a:	e7b1      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c47c:	2380      	movs	r3, #128	; 0x80
2400c47e:	e7af      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c480:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c484:	e7ac      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c486:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c48a:	e7a9      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c48c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c490:	e7a6      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c492:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c496:	e7a3      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c49c:	e7a0      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c49e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c4a2:	e79d      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c4a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c4a8:	e79a      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c4aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c4ae:	e797      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c4b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c4b4:	e794      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c4b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c4ba:	e791      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c4bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c4c0:	e78e      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c4c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c4c6:	e78b      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c4c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c4cc:	e788      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c4ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c4d2:	e785      	b.n	2400c3e0 <SDMMC_CmdSelDesel+0x40>
2400c4d4:	20000750 	.word	0x20000750
2400c4d8:	10624dd3 	.word	0x10624dd3
2400c4dc:	fffee0c0 	.word	0xfffee0c0
2400c4e0:	00200045 	.word	0x00200045
2400c4e4:	002000c5 	.word	0x002000c5
2400c4e8:	fdffe008 	.word	0xfdffe008

2400c4ec <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4ec:	4b11      	ldr	r3, [pc, #68]	; (2400c534 <SDMMC_CmdGoIdleState+0x48>)
{
2400c4ee:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4f0:	4a11      	ldr	r2, [pc, #68]	; (2400c538 <SDMMC_CmdGoIdleState+0x4c>)
{
2400c4f2:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4f4:	4c11      	ldr	r4, [pc, #68]	; (2400c53c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400c4f6:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4f8:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400c4fa:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4fc:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c500:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c502:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c506:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c508:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c50a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c50e:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c512:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c514:	e002      	b.n	2400c51c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400c516:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400c518:	0612      	lsls	r2, r2, #24
2400c51a:	d405      	bmi.n	2400c528 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400c51c:	3b01      	subs	r3, #1
2400c51e:	d2fa      	bcs.n	2400c516 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c520:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c524:	bc30      	pop	{r4, r5}
2400c526:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c528:	4b05      	ldr	r3, [pc, #20]	; (2400c540 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400c52a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c52c:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c52e:	bc30      	pop	{r4, r5}
2400c530:	4770      	bx	lr
2400c532:	bf00      	nop
2400c534:	20000750 	.word	0x20000750
2400c538:	fffee0c0 	.word	0xfffee0c0
2400c53c:	10624dd3 	.word	0x10624dd3
2400c540:	002000c5 	.word	0x002000c5

2400c544 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c544:	4a1c      	ldr	r2, [pc, #112]	; (2400c5b8 <SDMMC_CmdOperCond+0x74>)
{
2400c546:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c548:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c54c:	481b      	ldr	r0, [pc, #108]	; (2400c5bc <SDMMC_CmdOperCond+0x78>)
{
2400c54e:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c550:	4c1b      	ldr	r4, [pc, #108]	; (2400c5c0 <SDMMC_CmdOperCond+0x7c>)
2400c552:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c554:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c556:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c55a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c55e:	68cc      	ldr	r4, [r1, #12]
2400c560:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c562:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c564:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c566:	f241 3088 	movw	r0, #5000	; 0x1388
2400c56a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c56e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c570:	b14a      	cbz	r2, 2400c586 <SDMMC_CmdOperCond+0x42>
2400c572:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c574:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c576:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c578:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c57c:	d001      	beq.n	2400c582 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c57e:	0490      	lsls	r0, r2, #18
2400c580:	d506      	bpl.n	2400c590 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400c582:	1c5c      	adds	r4, r3, #1
2400c584:	d1f6      	bne.n	2400c574 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c586:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c58a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c58e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c590:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c592:	075a      	lsls	r2, r3, #29
2400c594:	d40c      	bmi.n	2400c5b0 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c596:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c598:	f010 0001 	ands.w	r0, r0, #1
2400c59c:	d105      	bne.n	2400c5aa <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400c59e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c5a0:	065b      	lsls	r3, r3, #25
2400c5a2:	d5f2      	bpl.n	2400c58a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400c5a4:	2340      	movs	r3, #64	; 0x40
2400c5a6:	638b      	str	r3, [r1, #56]	; 0x38
2400c5a8:	e7ef      	b.n	2400c58a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c5aa:	2301      	movs	r3, #1
2400c5ac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c5ae:	e7ec      	b.n	2400c58a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5b0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5b2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5b4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5b6:	e7e8      	b.n	2400c58a <SDMMC_CmdOperCond+0x46>
2400c5b8:	20000750 	.word	0x20000750
2400c5bc:	fffee0c0 	.word	0xfffee0c0
2400c5c0:	10624dd3 	.word	0x10624dd3

2400c5c4 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5c4:	4a4c      	ldr	r2, [pc, #304]	; (2400c6f8 <SDMMC_CmdAppCommand+0x134>)
2400c5c6:	4b4d      	ldr	r3, [pc, #308]	; (2400c6fc <SDMMC_CmdAppCommand+0x138>)
{
2400c5c8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c5cc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5ce:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5d2:	68c1      	ldr	r1, [r0, #12]
2400c5d4:	4c4a      	ldr	r4, [pc, #296]	; (2400c700 <SDMMC_CmdAppCommand+0x13c>)
2400c5d6:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5dc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5de:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5e2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c5e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5e8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c5ea:	b14a      	cbz	r2, 2400c600 <SDMMC_CmdAppCommand+0x3c>
2400c5ec:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c5ee:	4945      	ldr	r1, [pc, #276]	; (2400c704 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
2400c5f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c5f2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c5f4:	420a      	tst	r2, r1
2400c5f6:	d001      	beq.n	2400c5fc <SDMMC_CmdAppCommand+0x38>
2400c5f8:	0492      	lsls	r2, r2, #18
2400c5fa:	d507      	bpl.n	2400c60c <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
2400c5fc:	1c5c      	adds	r4, r3, #1
2400c5fe:	d1f7      	bne.n	2400c5f0 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c604:	4618      	mov	r0, r3
2400c606:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c60a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c60c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c60e:	075c      	lsls	r4, r3, #29
2400c610:	d43d      	bmi.n	2400c68e <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c612:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c614:	f013 0301 	ands.w	r3, r3, #1
2400c618:	d134      	bne.n	2400c684 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c61a:	4b3b      	ldr	r3, [pc, #236]	; (2400c708 <SDMMC_CmdAppCommand+0x144>)
2400c61c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c61e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c620:	b2db      	uxtb	r3, r3
2400c622:	2b37      	cmp	r3, #55	; 0x37
2400c624:	d131      	bne.n	2400c68a <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c626:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c628:	4b38      	ldr	r3, [pc, #224]	; (2400c70c <SDMMC_CmdAppCommand+0x148>)
2400c62a:	4013      	ands	r3, r2
2400c62c:	2b00      	cmp	r3, #0
2400c62e:	d0e9      	beq.n	2400c604 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c630:	2a00      	cmp	r2, #0
2400c632:	db30      	blt.n	2400c696 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c634:	0051      	lsls	r1, r2, #1
2400c636:	d431      	bmi.n	2400c69c <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c638:	0094      	lsls	r4, r2, #2
2400c63a:	d431      	bmi.n	2400c6a0 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c63c:	00d0      	lsls	r0, r2, #3
2400c63e:	d431      	bmi.n	2400c6a4 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c640:	0111      	lsls	r1, r2, #4
2400c642:	d432      	bmi.n	2400c6aa <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c644:	0154      	lsls	r4, r2, #5
2400c646:	d433      	bmi.n	2400c6b0 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c648:	01d0      	lsls	r0, r2, #7
2400c64a:	d434      	bmi.n	2400c6b6 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c64c:	0211      	lsls	r1, r2, #8
2400c64e:	d435      	bmi.n	2400c6bc <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c650:	0254      	lsls	r4, r2, #9
2400c652:	d436      	bmi.n	2400c6c2 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c654:	0290      	lsls	r0, r2, #10
2400c656:	d440      	bmi.n	2400c6da <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c658:	02d1      	lsls	r1, r2, #11
2400c65a:	d43b      	bmi.n	2400c6d4 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c65c:	0354      	lsls	r4, r2, #13
2400c65e:	d436      	bmi.n	2400c6ce <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c660:	0390      	lsls	r0, r2, #14
2400c662:	d431      	bmi.n	2400c6c8 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c664:	03d1      	lsls	r1, r2, #15
2400c666:	d444      	bmi.n	2400c6f2 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c668:	0414      	lsls	r4, r2, #16
2400c66a:	d43f      	bmi.n	2400c6ec <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c66c:	0450      	lsls	r0, r2, #17
2400c66e:	d43a      	bmi.n	2400c6e6 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c670:	0491      	lsls	r1, r2, #18
2400c672:	d435      	bmi.n	2400c6e0 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c674:	f012 0f08 	tst.w	r2, #8
2400c678:	bf14      	ite	ne
2400c67a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c67e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c682:	e7bf      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c684:	2201      	movs	r2, #1
2400c686:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c688:	e7bc      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c68a:	2301      	movs	r3, #1
2400c68c:	e7ba      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c68e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c690:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c692:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c694:	e7b6      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c69a:	e7b3      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c69c:	2340      	movs	r3, #64	; 0x40
2400c69e:	e7b1      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c6a0:	2380      	movs	r3, #128	; 0x80
2400c6a2:	e7af      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c6a8:	e7ac      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c6aa:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c6ae:	e7a9      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c6b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c6b4:	e7a6      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c6b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c6ba:	e7a3      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c6c0:	e7a0      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c6c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c6c6:	e79d      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c6c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c6cc:	e79a      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c6ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c6d2:	e797      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c6d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c6d8:	e794      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c6da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c6de:	e791      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c6e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c6e4:	e78e      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c6e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c6ea:	e78b      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c6ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c6f0:	e788      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c6f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c6f6:	e785      	b.n	2400c604 <SDMMC_CmdAppCommand+0x40>
2400c6f8:	20000750 	.word	0x20000750
2400c6fc:	10624dd3 	.word	0x10624dd3
2400c700:	fffee0c0 	.word	0xfffee0c0
2400c704:	00200045 	.word	0x00200045
2400c708:	002000c5 	.word	0x002000c5
2400c70c:	fdffe008 	.word	0xfdffe008

2400c710 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c710:	4a18      	ldr	r2, [pc, #96]	; (2400c774 <SDMMC_CmdAppOperCommand+0x64>)
2400c712:	4b19      	ldr	r3, [pc, #100]	; (2400c778 <SDMMC_CmdAppOperCommand+0x68>)
{
2400c714:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c716:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c718:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c71a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c71e:	68c1      	ldr	r1, [r0, #12]
2400c720:	4c16      	ldr	r4, [pc, #88]	; (2400c77c <SDMMC_CmdAppOperCommand+0x6c>)
2400c722:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c726:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c728:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c72a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c72e:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c730:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c734:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c736:	b14a      	cbz	r2, 2400c74c <SDMMC_CmdAppOperCommand+0x3c>
2400c738:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c73a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c73c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c73e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c742:	d001      	beq.n	2400c748 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c744:	0492      	lsls	r2, r2, #18
2400c746:	d507      	bpl.n	2400c758 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
2400c748:	1c59      	adds	r1, r3, #1
2400c74a:	d1f6      	bne.n	2400c73a <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c74c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c750:	4618      	mov	r0, r3
2400c752:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c756:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c758:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c75a:	f013 0304 	ands.w	r3, r3, #4
2400c75e:	d105      	bne.n	2400c76c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c760:	4a07      	ldr	r2, [pc, #28]	; (2400c780 <SDMMC_CmdAppOperCommand+0x70>)
2400c762:	6382      	str	r2, [r0, #56]	; 0x38
}
2400c764:	4618      	mov	r0, r3
2400c766:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c76a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c76c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c76e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c770:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c772:	e7ed      	b.n	2400c750 <SDMMC_CmdAppOperCommand+0x40>
2400c774:	20000750 	.word	0x20000750
2400c778:	10624dd3 	.word	0x10624dd3
2400c77c:	fffee0c0 	.word	0xfffee0c0
2400c780:	002000c5 	.word	0x002000c5

2400c784 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c784:	4a4c      	ldr	r2, [pc, #304]	; (2400c8b8 <SDMMC_CmdBusWidth+0x134>)
2400c786:	4b4d      	ldr	r3, [pc, #308]	; (2400c8bc <SDMMC_CmdBusWidth+0x138>)
{
2400c788:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c78a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c78c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c78e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c792:	68c1      	ldr	r1, [r0, #12]
2400c794:	4c4a      	ldr	r4, [pc, #296]	; (2400c8c0 <SDMMC_CmdBusWidth+0x13c>)
2400c796:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c79a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c79c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c79e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7a2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7a4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c7a8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c7aa:	b14a      	cbz	r2, 2400c7c0 <SDMMC_CmdBusWidth+0x3c>
2400c7ac:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c7ae:	4945      	ldr	r1, [pc, #276]	; (2400c8c4 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
2400c7b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c7b2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c7b4:	420a      	tst	r2, r1
2400c7b6:	d001      	beq.n	2400c7bc <SDMMC_CmdBusWidth+0x38>
2400c7b8:	0492      	lsls	r2, r2, #18
2400c7ba:	d507      	bpl.n	2400c7cc <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
2400c7bc:	1c5c      	adds	r4, r3, #1
2400c7be:	d1f7      	bne.n	2400c7b0 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c7c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c7c4:	4618      	mov	r0, r3
2400c7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c7ca:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c7cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c7ce:	075c      	lsls	r4, r3, #29
2400c7d0:	d43d      	bmi.n	2400c84e <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c7d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c7d4:	f013 0301 	ands.w	r3, r3, #1
2400c7d8:	d134      	bne.n	2400c844 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c7da:	4b3b      	ldr	r3, [pc, #236]	; (2400c8c8 <SDMMC_CmdBusWidth+0x144>)
2400c7dc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c7de:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c7e0:	b2db      	uxtb	r3, r3
2400c7e2:	2b06      	cmp	r3, #6
2400c7e4:	d131      	bne.n	2400c84a <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c7e6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c7e8:	4b38      	ldr	r3, [pc, #224]	; (2400c8cc <SDMMC_CmdBusWidth+0x148>)
2400c7ea:	4013      	ands	r3, r2
2400c7ec:	2b00      	cmp	r3, #0
2400c7ee:	d0e9      	beq.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c7f0:	2a00      	cmp	r2, #0
2400c7f2:	db30      	blt.n	2400c856 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c7f4:	0051      	lsls	r1, r2, #1
2400c7f6:	d431      	bmi.n	2400c85c <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c7f8:	0094      	lsls	r4, r2, #2
2400c7fa:	d431      	bmi.n	2400c860 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c7fc:	00d0      	lsls	r0, r2, #3
2400c7fe:	d431      	bmi.n	2400c864 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c800:	0111      	lsls	r1, r2, #4
2400c802:	d432      	bmi.n	2400c86a <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c804:	0154      	lsls	r4, r2, #5
2400c806:	d433      	bmi.n	2400c870 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c808:	01d0      	lsls	r0, r2, #7
2400c80a:	d434      	bmi.n	2400c876 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c80c:	0211      	lsls	r1, r2, #8
2400c80e:	d435      	bmi.n	2400c87c <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c810:	0254      	lsls	r4, r2, #9
2400c812:	d436      	bmi.n	2400c882 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c814:	0290      	lsls	r0, r2, #10
2400c816:	d440      	bmi.n	2400c89a <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c818:	02d1      	lsls	r1, r2, #11
2400c81a:	d43b      	bmi.n	2400c894 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c81c:	0354      	lsls	r4, r2, #13
2400c81e:	d436      	bmi.n	2400c88e <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c820:	0390      	lsls	r0, r2, #14
2400c822:	d431      	bmi.n	2400c888 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c824:	03d1      	lsls	r1, r2, #15
2400c826:	d444      	bmi.n	2400c8b2 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c828:	0414      	lsls	r4, r2, #16
2400c82a:	d43f      	bmi.n	2400c8ac <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c82c:	0450      	lsls	r0, r2, #17
2400c82e:	d43a      	bmi.n	2400c8a6 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c830:	0491      	lsls	r1, r2, #18
2400c832:	d435      	bmi.n	2400c8a0 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c834:	f012 0f08 	tst.w	r2, #8
2400c838:	bf14      	ite	ne
2400c83a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c83e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c842:	e7bf      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c844:	2201      	movs	r2, #1
2400c846:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c848:	e7bc      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c84a:	2301      	movs	r3, #1
2400c84c:	e7ba      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c84e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c850:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c852:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c854:	e7b6      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c85a:	e7b3      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c85c:	2340      	movs	r3, #64	; 0x40
2400c85e:	e7b1      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c860:	2380      	movs	r3, #128	; 0x80
2400c862:	e7af      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c864:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c868:	e7ac      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c86a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c86e:	e7a9      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c870:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c874:	e7a6      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c876:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c87a:	e7a3      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c880:	e7a0      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c886:	e79d      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c888:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c88c:	e79a      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c88e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c892:	e797      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c898:	e794      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c89a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c89e:	e791      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c8a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c8a4:	e78e      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c8a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c8aa:	e78b      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c8ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c8b0:	e788      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c8b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c8b6:	e785      	b.n	2400c7c4 <SDMMC_CmdBusWidth+0x40>
2400c8b8:	20000750 	.word	0x20000750
2400c8bc:	10624dd3 	.word	0x10624dd3
2400c8c0:	fffee0c0 	.word	0xfffee0c0
2400c8c4:	00200045 	.word	0x00200045
2400c8c8:	002000c5 	.word	0x002000c5
2400c8cc:	fdffe008 	.word	0xfdffe008

2400c8d0 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8d0:	4a4d      	ldr	r2, [pc, #308]	; (2400ca08 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400c8d2:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8d4:	494d      	ldr	r1, [pc, #308]	; (2400ca0c <SDMMC_CmdSendSCR+0x13c>)
{
2400c8d6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8d8:	4c4d      	ldr	r4, [pc, #308]	; (2400ca10 <SDMMC_CmdSendSCR+0x140>)
2400c8da:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c8dc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8de:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8e2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8e6:	68c4      	ldr	r4, [r0, #12]
2400c8e8:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8ec:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ee:	f241 3188 	movw	r1, #5000	; 0x1388
2400c8f2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8f6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c8f8:	b14a      	cbz	r2, 2400c90e <SDMMC_CmdSendSCR+0x3e>
2400c8fa:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c8fc:	4945      	ldr	r1, [pc, #276]	; (2400ca14 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400c8fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c900:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c902:	420a      	tst	r2, r1
2400c904:	d001      	beq.n	2400c90a <SDMMC_CmdSendSCR+0x3a>
2400c906:	0492      	lsls	r2, r2, #18
2400c908:	d507      	bpl.n	2400c91a <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400c90a:	1c5c      	adds	r4, r3, #1
2400c90c:	d1f7      	bne.n	2400c8fe <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c90e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c912:	4618      	mov	r0, r3
2400c914:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c918:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c91a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c91c:	075c      	lsls	r4, r3, #29
2400c91e:	d43d      	bmi.n	2400c99c <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c920:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c922:	f013 0301 	ands.w	r3, r3, #1
2400c926:	d134      	bne.n	2400c992 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c928:	4b3b      	ldr	r3, [pc, #236]	; (2400ca18 <SDMMC_CmdSendSCR+0x148>)
2400c92a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c92c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c92e:	b2db      	uxtb	r3, r3
2400c930:	2b33      	cmp	r3, #51	; 0x33
2400c932:	d131      	bne.n	2400c998 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c934:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c936:	4b39      	ldr	r3, [pc, #228]	; (2400ca1c <SDMMC_CmdSendSCR+0x14c>)
2400c938:	4013      	ands	r3, r2
2400c93a:	2b00      	cmp	r3, #0
2400c93c:	d0e9      	beq.n	2400c912 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c93e:	2a00      	cmp	r2, #0
2400c940:	db30      	blt.n	2400c9a4 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c942:	0051      	lsls	r1, r2, #1
2400c944:	d431      	bmi.n	2400c9aa <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c946:	0094      	lsls	r4, r2, #2
2400c948:	d431      	bmi.n	2400c9ae <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c94a:	00d0      	lsls	r0, r2, #3
2400c94c:	d431      	bmi.n	2400c9b2 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c94e:	0111      	lsls	r1, r2, #4
2400c950:	d432      	bmi.n	2400c9b8 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c952:	0154      	lsls	r4, r2, #5
2400c954:	d433      	bmi.n	2400c9be <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c956:	01d0      	lsls	r0, r2, #7
2400c958:	d434      	bmi.n	2400c9c4 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c95a:	0211      	lsls	r1, r2, #8
2400c95c:	d435      	bmi.n	2400c9ca <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c95e:	0254      	lsls	r4, r2, #9
2400c960:	d436      	bmi.n	2400c9d0 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c962:	0290      	lsls	r0, r2, #10
2400c964:	d440      	bmi.n	2400c9e8 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c966:	02d1      	lsls	r1, r2, #11
2400c968:	d43b      	bmi.n	2400c9e2 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c96a:	0354      	lsls	r4, r2, #13
2400c96c:	d436      	bmi.n	2400c9dc <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c96e:	0390      	lsls	r0, r2, #14
2400c970:	d431      	bmi.n	2400c9d6 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c972:	03d1      	lsls	r1, r2, #15
2400c974:	d444      	bmi.n	2400ca00 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c976:	0414      	lsls	r4, r2, #16
2400c978:	d43f      	bmi.n	2400c9fa <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c97a:	0450      	lsls	r0, r2, #17
2400c97c:	d43a      	bmi.n	2400c9f4 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c97e:	0491      	lsls	r1, r2, #18
2400c980:	d435      	bmi.n	2400c9ee <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c982:	f012 0f08 	tst.w	r2, #8
2400c986:	bf14      	ite	ne
2400c988:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c98c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c990:	e7bf      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c992:	2201      	movs	r2, #1
2400c994:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c996:	e7bc      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c998:	2301      	movs	r3, #1
2400c99a:	e7ba      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c99c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c99e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c9a0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c9a2:	e7b6      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c9a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c9a8:	e7b3      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c9aa:	2340      	movs	r3, #64	; 0x40
2400c9ac:	e7b1      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c9ae:	2380      	movs	r3, #128	; 0x80
2400c9b0:	e7af      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c9b2:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c9b6:	e7ac      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c9b8:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c9bc:	e7a9      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c9c2:	e7a6      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c9c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c9c8:	e7a3      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c9ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c9ce:	e7a0      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c9d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c9d4:	e79d      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c9d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c9da:	e79a      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c9dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c9e0:	e797      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400c9e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c9e6:	e794      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c9e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c9ec:	e791      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400c9ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c9f2:	e78e      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c9f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c9f8:	e78b      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c9fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c9fe:	e788      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ca00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ca04:	e785      	b.n	2400c912 <SDMMC_CmdSendSCR+0x42>
2400ca06:	bf00      	nop
2400ca08:	20000750 	.word	0x20000750
2400ca0c:	fffee0c0 	.word	0xfffee0c0
2400ca10:	10624dd3 	.word	0x10624dd3
2400ca14:	00200045 	.word	0x00200045
2400ca18:	002000c5 	.word	0x002000c5
2400ca1c:	fdffe008 	.word	0xfdffe008

2400ca20 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca20:	4a1a      	ldr	r2, [pc, #104]	; (2400ca8c <SDMMC_CmdSendCID+0x6c>)
{
2400ca22:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400ca24:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca26:	481a      	ldr	r0, [pc, #104]	; (2400ca90 <SDMMC_CmdSendCID+0x70>)
{
2400ca28:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca2a:	4c1a      	ldr	r4, [pc, #104]	; (2400ca94 <SDMMC_CmdSendCID+0x74>)
2400ca2c:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400ca2e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca30:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca34:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca38:	68cc      	ldr	r4, [r1, #12]
2400ca3a:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca3c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca3e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca40:	f241 3088 	movw	r0, #5000	; 0x1388
2400ca44:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca48:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400ca4a:	b14a      	cbz	r2, 2400ca60 <SDMMC_CmdSendCID+0x40>
2400ca4c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400ca4e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400ca50:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ca52:	f012 0f45 	tst.w	r2, #69	; 0x45
2400ca56:	d001      	beq.n	2400ca5c <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400ca58:	0492      	lsls	r2, r2, #18
2400ca5a:	d506      	bpl.n	2400ca6a <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400ca5c:	1c58      	adds	r0, r3, #1
2400ca5e:	d1f6      	bne.n	2400ca4e <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400ca60:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400ca64:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ca68:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ca6a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400ca6c:	075b      	lsls	r3, r3, #29
2400ca6e:	d409      	bmi.n	2400ca84 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ca70:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400ca72:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ca76:	bf14      	ite	ne
2400ca78:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ca7a:	4b07      	ldreq	r3, [pc, #28]	; (2400ca98 <SDMMC_CmdSendCID+0x78>)
2400ca7c:	638b      	str	r3, [r1, #56]	; 0x38
}
2400ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ca82:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ca84:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ca86:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ca88:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ca8a:	e7eb      	b.n	2400ca64 <SDMMC_CmdSendCID+0x44>
2400ca8c:	20000750 	.word	0x20000750
2400ca90:	fffee0c0 	.word	0xfffee0c0
2400ca94:	10624dd3 	.word	0x10624dd3
2400ca98:	002000c5 	.word	0x002000c5

2400ca9c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400ca9c:	4a1b      	ldr	r2, [pc, #108]	; (2400cb0c <SDMMC_CmdSendCSD+0x70>)
{
2400ca9e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400caa0:	4b1b      	ldr	r3, [pc, #108]	; (2400cb10 <SDMMC_CmdSendCSD+0x74>)
2400caa2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400caa4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400caa8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400caac:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cab0:	4818      	ldr	r0, [pc, #96]	; (2400cb14 <SDMMC_CmdSendCSD+0x78>)
2400cab2:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cab6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cab8:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400caba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cabe:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cac0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cac4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cac8:	1e53      	subs	r3, r2, #1
2400caca:	b14a      	cbz	r2, 2400cae0 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400cacc:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cad0:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cad2:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cad6:	d001      	beq.n	2400cadc <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cad8:	0492      	lsls	r2, r2, #18
2400cada:	d504      	bpl.n	2400cae6 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400cadc:	1c59      	adds	r1, r3, #1
2400cade:	d1f5      	bne.n	2400cacc <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cae0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cae4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cae6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400caea:	075b      	lsls	r3, r3, #29
2400caec:	d409      	bmi.n	2400cb02 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400caee:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400caf2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400caf6:	bf14      	ite	ne
2400caf8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cafa:	4b07      	ldreq	r3, [pc, #28]	; (2400cb18 <SDMMC_CmdSendCSD+0x7c>)
2400cafc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400cb00:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cb02:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cb04:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cb06:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cb0a:	4770      	bx	lr
2400cb0c:	20000750 	.word	0x20000750
2400cb10:	10624dd3 	.word	0x10624dd3
2400cb14:	fffee0c0 	.word	0xfffee0c0
2400cb18:	002000c5 	.word	0x002000c5

2400cb1c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400cb1c:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb1e:	4a27      	ldr	r2, [pc, #156]	; (2400cbbc <SDMMC_CmdSetRelAdd+0xa0>)
{
2400cb20:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400cb22:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb24:	4c26      	ldr	r4, [pc, #152]	; (2400cbc0 <SDMMC_CmdSetRelAdd+0xa4>)
2400cb26:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb28:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb2a:	401c      	ands	r4, r3
2400cb2c:	f241 1303 	movw	r3, #4355	; 0x1103
2400cb30:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb32:	4c24      	ldr	r4, [pc, #144]	; (2400cbc4 <SDMMC_CmdSetRelAdd+0xa8>)
2400cb34:	fba4 4202 	umull	r4, r2, r4, r2
2400cb38:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb3c:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb3e:	0a52      	lsrs	r2, r2, #9
2400cb40:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400cb44:	b14a      	cbz	r2, 2400cb5a <SDMMC_CmdSetRelAdd+0x3e>
2400cb46:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400cb48:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400cb4a:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cb4c:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cb50:	d001      	beq.n	2400cb56 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cb52:	0492      	lsls	r2, r2, #18
2400cb54:	d507      	bpl.n	2400cb66 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400cb56:	1c5c      	adds	r4, r3, #1
2400cb58:	d1f6      	bne.n	2400cb48 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400cb5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400cb5e:	4618      	mov	r0, r3
2400cb60:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cb64:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cb66:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cb68:	075c      	lsls	r4, r3, #29
2400cb6a:	d41c      	bmi.n	2400cba6 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cb6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cb6e:	f013 0301 	ands.w	r3, r3, #1
2400cb72:	d113      	bne.n	2400cb9c <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400cb74:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cb76:	b2db      	uxtb	r3, r3
2400cb78:	2b03      	cmp	r3, #3
2400cb7a:	d112      	bne.n	2400cba2 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cb7c:	4b12      	ldr	r3, [pc, #72]	; (2400cbc8 <SDMMC_CmdSetRelAdd+0xac>)
2400cb7e:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400cb80:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400cb82:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400cb86:	d015      	beq.n	2400cbb4 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400cb88:	0451      	lsls	r1, r2, #17
2400cb8a:	d410      	bmi.n	2400cbae <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cb8c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400cb90:	bf14      	ite	ne
2400cb92:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400cb96:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400cb9a:	e7e0      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cb9c:	2201      	movs	r2, #1
2400cb9e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cba0:	e7dd      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cba2:	2301      	movs	r3, #1
2400cba4:	e7db      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cba6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cba8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cbaa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cbac:	e7d7      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cbae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400cbb2:	e7d4      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400cbb4:	0c12      	lsrs	r2, r2, #16
2400cbb6:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400cbb8:	e7d1      	b.n	2400cb5e <SDMMC_CmdSetRelAdd+0x42>
2400cbba:	bf00      	nop
2400cbbc:	20000750 	.word	0x20000750
2400cbc0:	fffee0c0 	.word	0xfffee0c0
2400cbc4:	10624dd3 	.word	0x10624dd3
2400cbc8:	002000c5 	.word	0x002000c5

2400cbcc <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbcc:	4a4c      	ldr	r2, [pc, #304]	; (2400cd00 <SDMMC_CmdSendStatus+0x134>)
2400cbce:	4b4d      	ldr	r3, [pc, #308]	; (2400cd04 <SDMMC_CmdSendStatus+0x138>)
{
2400cbd0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbd2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cbd4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbd6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbda:	68c1      	ldr	r1, [r0, #12]
2400cbdc:	4c4a      	ldr	r4, [pc, #296]	; (2400cd08 <SDMMC_CmdSendStatus+0x13c>)
2400cbde:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbe2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbe4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbe6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbea:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cbec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbf0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400cbf2:	b14a      	cbz	r2, 2400cc08 <SDMMC_CmdSendStatus+0x3c>
2400cbf4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cbf6:	4945      	ldr	r1, [pc, #276]	; (2400cd0c <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400cbf8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400cbfa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cbfc:	420a      	tst	r2, r1
2400cbfe:	d001      	beq.n	2400cc04 <SDMMC_CmdSendStatus+0x38>
2400cc00:	0492      	lsls	r2, r2, #18
2400cc02:	d507      	bpl.n	2400cc14 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400cc04:	1c5c      	adds	r4, r3, #1
2400cc06:	d1f7      	bne.n	2400cbf8 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400cc08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400cc0c:	4618      	mov	r0, r3
2400cc0e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cc12:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cc14:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc16:	075c      	lsls	r4, r3, #29
2400cc18:	d43d      	bmi.n	2400cc96 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cc1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cc1c:	f013 0301 	ands.w	r3, r3, #1
2400cc20:	d134      	bne.n	2400cc8c <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cc22:	4b3b      	ldr	r3, [pc, #236]	; (2400cd10 <SDMMC_CmdSendStatus+0x144>)
2400cc24:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cc26:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cc28:	b2db      	uxtb	r3, r3
2400cc2a:	2b0d      	cmp	r3, #13
2400cc2c:	d131      	bne.n	2400cc92 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400cc2e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cc30:	4b38      	ldr	r3, [pc, #224]	; (2400cd14 <SDMMC_CmdSendStatus+0x148>)
2400cc32:	4013      	ands	r3, r2
2400cc34:	2b00      	cmp	r3, #0
2400cc36:	d0e9      	beq.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cc38:	2a00      	cmp	r2, #0
2400cc3a:	db30      	blt.n	2400cc9e <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cc3c:	0051      	lsls	r1, r2, #1
2400cc3e:	d431      	bmi.n	2400cca4 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cc40:	0094      	lsls	r4, r2, #2
2400cc42:	d431      	bmi.n	2400cca8 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cc44:	00d0      	lsls	r0, r2, #3
2400cc46:	d431      	bmi.n	2400ccac <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cc48:	0111      	lsls	r1, r2, #4
2400cc4a:	d432      	bmi.n	2400ccb2 <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cc4c:	0154      	lsls	r4, r2, #5
2400cc4e:	d433      	bmi.n	2400ccb8 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cc50:	01d0      	lsls	r0, r2, #7
2400cc52:	d434      	bmi.n	2400ccbe <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cc54:	0211      	lsls	r1, r2, #8
2400cc56:	d435      	bmi.n	2400ccc4 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cc58:	0254      	lsls	r4, r2, #9
2400cc5a:	d436      	bmi.n	2400ccca <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cc5c:	0290      	lsls	r0, r2, #10
2400cc5e:	d440      	bmi.n	2400cce2 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cc60:	02d1      	lsls	r1, r2, #11
2400cc62:	d43b      	bmi.n	2400ccdc <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cc64:	0354      	lsls	r4, r2, #13
2400cc66:	d436      	bmi.n	2400ccd6 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cc68:	0390      	lsls	r0, r2, #14
2400cc6a:	d431      	bmi.n	2400ccd0 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cc6c:	03d1      	lsls	r1, r2, #15
2400cc6e:	d444      	bmi.n	2400ccfa <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cc70:	0414      	lsls	r4, r2, #16
2400cc72:	d43f      	bmi.n	2400ccf4 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cc74:	0450      	lsls	r0, r2, #17
2400cc76:	d43a      	bmi.n	2400ccee <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cc78:	0491      	lsls	r1, r2, #18
2400cc7a:	d435      	bmi.n	2400cce8 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cc7c:	f012 0f08 	tst.w	r2, #8
2400cc80:	bf14      	ite	ne
2400cc82:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400cc86:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400cc8a:	e7bf      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cc8c:	2201      	movs	r2, #1
2400cc8e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cc90:	e7bc      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cc92:	2301      	movs	r3, #1
2400cc94:	e7ba      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc96:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc98:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc9a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc9c:	e7b6      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cc9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cca2:	e7b3      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cca4:	2340      	movs	r3, #64	; 0x40
2400cca6:	e7b1      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cca8:	2380      	movs	r3, #128	; 0x80
2400ccaa:	e7af      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ccac:	f44f 7380 	mov.w	r3, #256	; 0x100
2400ccb0:	e7ac      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ccb2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ccb6:	e7a9      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ccb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ccbc:	e7a6      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ccbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ccc2:	e7a3      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ccc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ccc8:	e7a0      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ccca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ccce:	e79d      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ccd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ccd4:	e79a      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ccd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ccda:	e797      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400ccdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400cce0:	e794      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400cce6:	e791      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400cce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ccec:	e78e      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ccee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ccf2:	e78b      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ccf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ccf8:	e788      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ccfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ccfe:	e785      	b.n	2400cc0c <SDMMC_CmdSendStatus+0x40>
2400cd00:	20000750 	.word	0x20000750
2400cd04:	10624dd3 	.word	0x10624dd3
2400cd08:	fffee0c0 	.word	0xfffee0c0
2400cd0c:	00200045 	.word	0x00200045
2400cd10:	002000c5 	.word	0x002000c5
2400cd14:	fdffe008 	.word	0xfdffe008

2400cd18 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd18:	4a4d      	ldr	r2, [pc, #308]	; (2400ce50 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400cd1a:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd1c:	494d      	ldr	r1, [pc, #308]	; (2400ce54 <SDMMC_CmdStatusRegister+0x13c>)
{
2400cd1e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd20:	4c4d      	ldr	r4, [pc, #308]	; (2400ce58 <SDMMC_CmdStatusRegister+0x140>)
2400cd22:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cd24:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd26:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd2a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd2e:	68c4      	ldr	r4, [r0, #12]
2400cd30:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd32:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd34:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd36:	f241 3188 	movw	r1, #5000	; 0x1388
2400cd3a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd3e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400cd40:	b14a      	cbz	r2, 2400cd56 <SDMMC_CmdStatusRegister+0x3e>
2400cd42:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cd44:	4945      	ldr	r1, [pc, #276]	; (2400ce5c <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400cd46:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400cd48:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cd4a:	420a      	tst	r2, r1
2400cd4c:	d001      	beq.n	2400cd52 <SDMMC_CmdStatusRegister+0x3a>
2400cd4e:	0492      	lsls	r2, r2, #18
2400cd50:	d507      	bpl.n	2400cd62 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400cd52:	1c5c      	adds	r4, r3, #1
2400cd54:	d1f7      	bne.n	2400cd46 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400cd56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400cd5a:	4618      	mov	r0, r3
2400cd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cd60:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cd62:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cd64:	075c      	lsls	r4, r3, #29
2400cd66:	d43d      	bmi.n	2400cde4 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cd68:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400cd6a:	f013 0301 	ands.w	r3, r3, #1
2400cd6e:	d134      	bne.n	2400cdda <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cd70:	4b3b      	ldr	r3, [pc, #236]	; (2400ce60 <SDMMC_CmdStatusRegister+0x148>)
2400cd72:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cd74:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cd76:	b2db      	uxtb	r3, r3
2400cd78:	2b0d      	cmp	r3, #13
2400cd7a:	d131      	bne.n	2400cde0 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400cd7c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cd7e:	4b39      	ldr	r3, [pc, #228]	; (2400ce64 <SDMMC_CmdStatusRegister+0x14c>)
2400cd80:	4013      	ands	r3, r2
2400cd82:	2b00      	cmp	r3, #0
2400cd84:	d0e9      	beq.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cd86:	2a00      	cmp	r2, #0
2400cd88:	db30      	blt.n	2400cdec <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cd8a:	0051      	lsls	r1, r2, #1
2400cd8c:	d431      	bmi.n	2400cdf2 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cd8e:	0094      	lsls	r4, r2, #2
2400cd90:	d431      	bmi.n	2400cdf6 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cd92:	00d0      	lsls	r0, r2, #3
2400cd94:	d431      	bmi.n	2400cdfa <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cd96:	0111      	lsls	r1, r2, #4
2400cd98:	d432      	bmi.n	2400ce00 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cd9a:	0154      	lsls	r4, r2, #5
2400cd9c:	d433      	bmi.n	2400ce06 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cd9e:	01d0      	lsls	r0, r2, #7
2400cda0:	d434      	bmi.n	2400ce0c <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cda2:	0211      	lsls	r1, r2, #8
2400cda4:	d435      	bmi.n	2400ce12 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cda6:	0254      	lsls	r4, r2, #9
2400cda8:	d436      	bmi.n	2400ce18 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cdaa:	0290      	lsls	r0, r2, #10
2400cdac:	d440      	bmi.n	2400ce30 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cdae:	02d1      	lsls	r1, r2, #11
2400cdb0:	d43b      	bmi.n	2400ce2a <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cdb2:	0354      	lsls	r4, r2, #13
2400cdb4:	d436      	bmi.n	2400ce24 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cdb6:	0390      	lsls	r0, r2, #14
2400cdb8:	d431      	bmi.n	2400ce1e <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cdba:	03d1      	lsls	r1, r2, #15
2400cdbc:	d444      	bmi.n	2400ce48 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cdbe:	0414      	lsls	r4, r2, #16
2400cdc0:	d43f      	bmi.n	2400ce42 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cdc2:	0450      	lsls	r0, r2, #17
2400cdc4:	d43a      	bmi.n	2400ce3c <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cdc6:	0491      	lsls	r1, r2, #18
2400cdc8:	d435      	bmi.n	2400ce36 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cdca:	f012 0f08 	tst.w	r2, #8
2400cdce:	bf14      	ite	ne
2400cdd0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400cdd4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400cdd8:	e7bf      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cdda:	2201      	movs	r2, #1
2400cddc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cdde:	e7bc      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cde0:	2301      	movs	r3, #1
2400cde2:	e7ba      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cde4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cde6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cde8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cdea:	e7b6      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cdec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400cdf0:	e7b3      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cdf2:	2340      	movs	r3, #64	; 0x40
2400cdf4:	e7b1      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cdf6:	2380      	movs	r3, #128	; 0x80
2400cdf8:	e7af      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cdfa:	f44f 7380 	mov.w	r3, #256	; 0x100
2400cdfe:	e7ac      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ce00:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ce04:	e7a9      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ce06:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ce0a:	e7a6      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ce0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ce10:	e7a3      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ce12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ce16:	e7a0      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ce18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ce1c:	e79d      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ce1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ce22:	e79a      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ce24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ce28:	e797      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400ce2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400ce2e:	e794      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ce30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ce34:	e791      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400ce36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ce3a:	e78e      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ce3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ce40:	e78b      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ce42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ce46:	e788      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ce48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ce4c:	e785      	b.n	2400cd5a <SDMMC_CmdStatusRegister+0x42>
2400ce4e:	bf00      	nop
2400ce50:	20000750 	.word	0x20000750
2400ce54:	fffee0c0 	.word	0xfffee0c0
2400ce58:	10624dd3 	.word	0x10624dd3
2400ce5c:	00200045 	.word	0x00200045
2400ce60:	002000c5 	.word	0x002000c5
2400ce64:	fdffe008 	.word	0xfdffe008

2400ce68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400ce68:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400ce6a:	4903      	ldr	r1, [pc, #12]	; (2400ce78 <MX_FATFS_Init+0x10>)
2400ce6c:	4803      	ldr	r0, [pc, #12]	; (2400ce7c <MX_FATFS_Init+0x14>)
2400ce6e:	f003 f86d 	bl	2400ff4c <FATFS_LinkDriver>
2400ce72:	4b03      	ldr	r3, [pc, #12]	; (2400ce80 <MX_FATFS_Init+0x18>)
2400ce74:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400ce76:	bd08      	pop	{r3, pc}
2400ce78:	2001b408 	.word	0x2001b408
2400ce7c:	2401a654 	.word	0x2401a654
2400ce80:	2001b40c 	.word	0x2001b40c

2400ce84 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400ce84:	2000      	movs	r0, #0
2400ce86:	4770      	bx	lr

2400ce88 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400ce88:	b510      	push	{r4, lr}
2400ce8a:	4694      	mov	ip, r2
2400ce8c:	b082      	sub	sp, #8
2400ce8e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400ce90:	460a      	mov	r2, r1
2400ce92:	4663      	mov	r3, ip
2400ce94:	4601      	mov	r1, r0
2400ce96:	9400      	str	r4, [sp, #0]
2400ce98:	4803      	ldr	r0, [pc, #12]	; (2400cea8 <BSP_SD_ReadBlocks+0x20>)
2400ce9a:	f7fd fa2f 	bl	2400a2fc <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400ce9e:	3800      	subs	r0, #0
2400cea0:	bf18      	it	ne
2400cea2:	2001      	movne	r0, #1
2400cea4:	b002      	add	sp, #8
2400cea6:	bd10      	pop	{r4, pc}
2400cea8:	2001ac84 	.word	0x2001ac84

2400ceac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400ceac:	b510      	push	{r4, lr}
2400ceae:	4694      	mov	ip, r2
2400ceb0:	b082      	sub	sp, #8
2400ceb2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400ceb4:	460a      	mov	r2, r1
2400ceb6:	4663      	mov	r3, ip
2400ceb8:	4601      	mov	r1, r0
2400ceba:	9400      	str	r4, [sp, #0]
2400cebc:	4803      	ldr	r0, [pc, #12]	; (2400cecc <BSP_SD_WriteBlocks+0x20>)
2400cebe:	f7fd fb25 	bl	2400a50c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400cec2:	3800      	subs	r0, #0
2400cec4:	bf18      	it	ne
2400cec6:	2001      	movne	r0, #1
2400cec8:	b002      	add	sp, #8
2400ceca:	bd10      	pop	{r4, pc}
2400cecc:	2001ac84 	.word	0x2001ac84

2400ced0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400ced0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400ced2:	4803      	ldr	r0, [pc, #12]	; (2400cee0 <BSP_SD_GetCardState+0x10>)
2400ced4:	f7fd ff86 	bl	2400ade4 <HAL_SD_GetCardState>
}
2400ced8:	3804      	subs	r0, #4
2400ceda:	bf18      	it	ne
2400cedc:	2001      	movne	r0, #1
2400cede:	bd08      	pop	{r3, pc}
2400cee0:	2001ac84 	.word	0x2001ac84

2400cee4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400cee4:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400cee6:	4801      	ldr	r0, [pc, #4]	; (2400ceec <BSP_SD_GetCardInfo+0x8>)
2400cee8:	f7fd be2c 	b.w	2400ab44 <HAL_SD_GetCardInfo>
2400ceec:	2001ac84 	.word	0x2001ac84

2400cef0 <BSP_SD_Init>:
{
2400cef0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400cef2:	f7f6 fa5b 	bl	240033ac <BSP_SD_IsDetected>
2400cef6:	2801      	cmp	r0, #1
2400cef8:	d001      	beq.n	2400cefe <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cefa:	2002      	movs	r0, #2
}
2400cefc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400cefe:	4807      	ldr	r0, [pc, #28]	; (2400cf1c <BSP_SD_Init+0x2c>)
2400cf00:	f7fd ff08 	bl	2400ad14 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400cf04:	2800      	cmp	r0, #0
2400cf06:	d1f9      	bne.n	2400cefc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400cf08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400cf0c:	4803      	ldr	r0, [pc, #12]	; (2400cf1c <BSP_SD_Init+0x2c>)
2400cf0e:	f7fd fe2d 	bl	2400ab6c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cf12:	3800      	subs	r0, #0
2400cf14:	bf18      	it	ne
2400cf16:	2001      	movne	r0, #1
}
2400cf18:	bd08      	pop	{r3, pc}
2400cf1a:	bf00      	nop
2400cf1c:	2001ac84 	.word	0x2001ac84

2400cf20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400cf20:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400cf22:	4c0a      	ldr	r4, [pc, #40]	; (2400cf4c <SD_initialize+0x2c>)
2400cf24:	2501      	movs	r5, #1
2400cf26:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400cf28:	f7ff ffe2 	bl	2400cef0 <BSP_SD_Init>
2400cf2c:	b108      	cbz	r0, 2400cf32 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400cf2e:	7820      	ldrb	r0, [r4, #0]
}
2400cf30:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400cf32:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cf34:	f7ff ffcc 	bl	2400ced0 <BSP_SD_GetCardState>
2400cf38:	b918      	cbnz	r0, 2400cf42 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400cf3a:	7823      	ldrb	r3, [r4, #0]
2400cf3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cf40:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cf42:	7823      	ldrb	r3, [r4, #0]
2400cf44:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400cf46:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cf48:	7820      	ldrb	r0, [r4, #0]
}
2400cf4a:	bd38      	pop	{r3, r4, r5, pc}
2400cf4c:	20000760 	.word	0x20000760

2400cf50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400cf50:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400cf52:	2301      	movs	r3, #1
2400cf54:	4c05      	ldr	r4, [pc, #20]	; (2400cf6c <SD_status+0x1c>)
2400cf56:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cf58:	f7ff ffba 	bl	2400ced0 <BSP_SD_GetCardState>
2400cf5c:	b918      	cbnz	r0, 2400cf66 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400cf5e:	7823      	ldrb	r3, [r4, #0]
2400cf60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cf64:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cf66:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400cf68:	bd10      	pop	{r4, pc}
2400cf6a:	bf00      	nop
2400cf6c:	20000760 	.word	0x20000760

2400cf70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400cf70:	b508      	push	{r3, lr}
2400cf72:	4608      	mov	r0, r1
2400cf74:	4611      	mov	r1, r2
2400cf76:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400cf78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cf7c:	f7ff ff84 	bl	2400ce88 <BSP_SD_ReadBlocks>
2400cf80:	b108      	cbz	r0, 2400cf86 <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400cf82:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400cf84:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400cf86:	f7ff ffa3 	bl	2400ced0 <BSP_SD_GetCardState>
2400cf8a:	2800      	cmp	r0, #0
2400cf8c:	d0fa      	beq.n	2400cf84 <SD_read+0x14>
2400cf8e:	f7ff ff9f 	bl	2400ced0 <BSP_SD_GetCardState>
2400cf92:	2800      	cmp	r0, #0
2400cf94:	d1f7      	bne.n	2400cf86 <SD_read+0x16>
2400cf96:	e7f5      	b.n	2400cf84 <SD_read+0x14>

2400cf98 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cf98:	4b18      	ldr	r3, [pc, #96]	; (2400cffc <SD_ioctl+0x64>)
{
2400cf9a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cf9c:	7818      	ldrb	r0, [r3, #0]
{
2400cf9e:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cfa0:	f010 0401 	ands.w	r4, r0, #1
2400cfa4:	d106      	bne.n	2400cfb4 <SD_ioctl+0x1c>
2400cfa6:	4615      	mov	r5, r2

  switch (cmd)
2400cfa8:	2903      	cmp	r1, #3
2400cfaa:	d824      	bhi.n	2400cff6 <SD_ioctl+0x5e>
2400cfac:	e8df f001 	tbb	[pc, r1]
2400cfb0:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cfb4:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400cfb6:	4620      	mov	r0, r4
2400cfb8:	b00b      	add	sp, #44	; 0x2c
2400cfba:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400cfbc:	460c      	mov	r4, r1
}
2400cfbe:	4620      	mov	r0, r4
2400cfc0:	b00b      	add	sp, #44	; 0x2c
2400cfc2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cfc4:	a801      	add	r0, sp, #4
2400cfc6:	f7ff ff8d 	bl	2400cee4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cfca:	9b07      	ldr	r3, [sp, #28]
}
2400cfcc:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cfce:	602b      	str	r3, [r5, #0]
}
2400cfd0:	b00b      	add	sp, #44	; 0x2c
2400cfd2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cfd4:	a801      	add	r0, sp, #4
2400cfd6:	f7ff ff85 	bl	2400cee4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cfda:	9b08      	ldr	r3, [sp, #32]
}
2400cfdc:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cfde:	802b      	strh	r3, [r5, #0]
}
2400cfe0:	b00b      	add	sp, #44	; 0x2c
2400cfe2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cfe4:	a801      	add	r0, sp, #4
2400cfe6:	f7ff ff7d 	bl	2400cee4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cfea:	9b08      	ldr	r3, [sp, #32]
}
2400cfec:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cfee:	0a5b      	lsrs	r3, r3, #9
2400cff0:	602b      	str	r3, [r5, #0]
}
2400cff2:	b00b      	add	sp, #44	; 0x2c
2400cff4:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400cff6:	2404      	movs	r4, #4
2400cff8:	e7dd      	b.n	2400cfb6 <SD_ioctl+0x1e>
2400cffa:	bf00      	nop
2400cffc:	20000760 	.word	0x20000760

2400d000 <SD_write>:
{
2400d000:	b508      	push	{r3, lr}
2400d002:	4608      	mov	r0, r1
2400d004:	4611      	mov	r1, r2
2400d006:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400d008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d00c:	f7ff ff4e 	bl	2400ceac <BSP_SD_WriteBlocks>
2400d010:	b108      	cbz	r0, 2400d016 <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400d012:	2001      	movs	r0, #1
}
2400d014:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d016:	f7ff ff5b 	bl	2400ced0 <BSP_SD_GetCardState>
2400d01a:	2800      	cmp	r0, #0
2400d01c:	d0fa      	beq.n	2400d014 <SD_write+0x14>
2400d01e:	f7ff ff57 	bl	2400ced0 <BSP_SD_GetCardState>
2400d022:	2800      	cmp	r0, #0
2400d024:	d1f7      	bne.n	2400d016 <SD_write+0x16>
2400d026:	e7f5      	b.n	2400d014 <SD_write+0x14>

2400d028 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400d028:	4b03      	ldr	r3, [pc, #12]	; (2400d038 <disk_status+0x10>)
2400d02a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d02e:	4403      	add	r3, r0
2400d030:	6852      	ldr	r2, [r2, #4]
2400d032:	7a18      	ldrb	r0, [r3, #8]
2400d034:	6853      	ldr	r3, [r2, #4]
2400d036:	4718      	bx	r3
2400d038:	2001b638 	.word	0x2001b638

2400d03c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400d03c:	4b07      	ldr	r3, [pc, #28]	; (2400d05c <disk_initialize+0x20>)
2400d03e:	5c1a      	ldrb	r2, [r3, r0]
2400d040:	b952      	cbnz	r2, 2400d058 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d042:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d046:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400d048:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d04c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400d04e:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d052:	7a08      	ldrb	r0, [r1, #8]
2400d054:	6813      	ldr	r3, [r2, #0]
2400d056:	4718      	bx	r3
  }
  return stat;
}
2400d058:	2000      	movs	r0, #0
2400d05a:	4770      	bx	lr
2400d05c:	2001b638 	.word	0x2001b638

2400d060 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400d060:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d062:	4c05      	ldr	r4, [pc, #20]	; (2400d078 <disk_read+0x18>)
2400d064:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400d068:	4404      	add	r4, r0
2400d06a:	686d      	ldr	r5, [r5, #4]
2400d06c:	7a20      	ldrb	r0, [r4, #8]
2400d06e:	68ac      	ldr	r4, [r5, #8]
2400d070:	46a4      	mov	ip, r4
  return res;
}
2400d072:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d074:	4760      	bx	ip
2400d076:	bf00      	nop
2400d078:	2001b638 	.word	0x2001b638

2400d07c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400d07c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d07e:	4c05      	ldr	r4, [pc, #20]	; (2400d094 <disk_write+0x18>)
2400d080:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400d084:	4404      	add	r4, r0
2400d086:	686d      	ldr	r5, [r5, #4]
2400d088:	7a20      	ldrb	r0, [r4, #8]
2400d08a:	68ec      	ldr	r4, [r5, #12]
2400d08c:	46a4      	mov	ip, r4
  return res;
}
2400d08e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d090:	4760      	bx	ip
2400d092:	bf00      	nop
2400d094:	2001b638 	.word	0x2001b638

2400d098 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400d098:	4b04      	ldr	r3, [pc, #16]	; (2400d0ac <disk_ioctl+0x14>)
2400d09a:	eb03 0c00 	add.w	ip, r3, r0
2400d09e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400d0a2:	685b      	ldr	r3, [r3, #4]
2400d0a4:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400d0a8:	691b      	ldr	r3, [r3, #16]
2400d0aa:	4718      	bx	r3
2400d0ac:	2001b638 	.word	0x2001b638

2400d0b0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400d0b0:	4b26      	ldr	r3, [pc, #152]	; (2400d14c <inc_lock+0x9c>)
{
2400d0b2:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400d0b4:	681a      	ldr	r2, [r3, #0]
2400d0b6:	6805      	ldr	r5, [r0, #0]
2400d0b8:	4295      	cmp	r5, r2
2400d0ba:	d01b      	beq.n	2400d0f4 <inc_lock+0x44>
2400d0bc:	691c      	ldr	r4, [r3, #16]
2400d0be:	42ac      	cmp	r4, r5
2400d0c0:	d006      	beq.n	2400d0d0 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d0c2:	b30a      	cbz	r2, 2400d108 <inc_lock+0x58>
2400d0c4:	2c00      	cmp	r4, #0
2400d0c6:	d036      	beq.n	2400d136 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400d0c8:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400d0ca:	4620      	mov	r0, r4
2400d0cc:	bcf0      	pop	{r4, r5, r6, r7}
2400d0ce:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400d0d0:	695e      	ldr	r6, [r3, #20]
2400d0d2:	6887      	ldr	r7, [r0, #8]
2400d0d4:	42be      	cmp	r6, r7
2400d0d6:	d1f4      	bne.n	2400d0c2 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400d0d8:	699e      	ldr	r6, [r3, #24]
2400d0da:	6947      	ldr	r7, [r0, #20]
2400d0dc:	42be      	cmp	r6, r7
2400d0de:	d1f0      	bne.n	2400d0c2 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d0e0:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d0e2:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400d0e6:	bb49      	cbnz	r1, 2400d13c <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d0e8:	0111      	lsls	r1, r2, #4
	return i + 1;
2400d0ea:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d0ec:	8982      	ldrh	r2, [r0, #12]
2400d0ee:	3201      	adds	r2, #1
2400d0f0:	b292      	uxth	r2, r2
2400d0f2:	e01b      	b.n	2400d12c <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
2400d0f4:	6884      	ldr	r4, [r0, #8]
2400d0f6:	685e      	ldr	r6, [r3, #4]
2400d0f8:	42a6      	cmp	r6, r4
2400d0fa:	d1df      	bne.n	2400d0bc <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400d0fc:	689c      	ldr	r4, [r3, #8]
2400d0fe:	6946      	ldr	r6, [r0, #20]
2400d100:	42a6      	cmp	r6, r4
2400d102:	d1db      	bne.n	2400d0bc <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d104:	2200      	movs	r2, #0
2400d106:	e7ec      	b.n	2400d0e2 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d108:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d10a:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400d10c:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400d110:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400d114:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400d116:	6945      	ldr	r5, [r0, #20]
2400d118:	6880      	ldr	r0, [r0, #8]
2400d11a:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
2400d11e:	f04f 0000 	mov.w	r0, #0
2400d122:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d124:	bf14      	ite	ne
2400d126:	f44f 7280 	movne.w	r2, #256	; 0x100
2400d12a:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d12c:	440b      	add	r3, r1
}
2400d12e:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d130:	819a      	strh	r2, [r3, #12]
}
2400d132:	bcf0      	pop	{r4, r5, r6, r7}
2400d134:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d136:	2402      	movs	r4, #2
2400d138:	2201      	movs	r2, #1
2400d13a:	e7e6      	b.n	2400d10a <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d13c:	8980      	ldrh	r0, [r0, #12]
2400d13e:	0111      	lsls	r1, r2, #4
2400d140:	2800      	cmp	r0, #0
2400d142:	d1c1      	bne.n	2400d0c8 <inc_lock+0x18>
	return i + 1;
2400d144:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d146:	f44f 7280 	mov.w	r2, #256	; 0x100
2400d14a:	e7ef      	b.n	2400d12c <inc_lock+0x7c>
2400d14c:	2001b414 	.word	0x2001b414

2400d150 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400d150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400d154:	440a      	add	r2, r1
2400d156:	460d      	mov	r5, r1
2400d158:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d15a:	4f37      	ldr	r7, [pc, #220]	; (2400d238 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400d15c:	42aa      	cmp	r2, r5
2400d15e:	d012      	beq.n	2400d186 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d160:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d164:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d168:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d16c:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d170:	2919      	cmp	r1, #25
2400d172:	d9f3      	bls.n	2400d15c <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d174:	2c7f      	cmp	r4, #127	; 0x7f
2400d176:	bf88      	it	hi
2400d178:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400d17c:	2c00      	cmp	r4, #0
2400d17e:	d1ed      	bne.n	2400d15c <pattern_matching+0xc>
2400d180:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400d182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d186:	1e1f      	subs	r7, r3, #0
2400d188:	f896 8000 	ldrb.w	r8, [r6]
2400d18c:	bf18      	it	ne
2400d18e:	2701      	movne	r7, #1
2400d190:	f1b8 0f00 	cmp.w	r8, #0
2400d194:	d100      	bne.n	2400d198 <pattern_matching+0x48>
2400d196:	bb8f      	cbnz	r7, 2400d1fc <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d198:	4c27      	ldr	r4, [pc, #156]	; (2400d238 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d19a:	4630      	mov	r0, r6
{
2400d19c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d19e:	46a9      	mov	r9, r5
2400d1a0:	e010      	b.n	2400d1c4 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d1a2:	3a20      	subs	r2, #32
2400d1a4:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d1a6:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d1aa:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d1ae:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d1b0:	f1bc 0f19 	cmp.w	ip, #25
2400d1b4:	d815      	bhi.n	2400d1e2 <pattern_matching+0x92>
2400d1b6:	3b20      	subs	r3, #32
2400d1b8:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400d1ba:	4293      	cmp	r3, r2
2400d1bc:	d118      	bne.n	2400d1f0 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400d1be:	b1eb      	cbz	r3, 2400d1fc <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400d1c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400d1c4:	2b3f      	cmp	r3, #63	; 0x3f
2400d1c6:	d01c      	beq.n	2400d202 <pattern_matching+0xb2>
2400d1c8:	2b2a      	cmp	r3, #42	; 0x2a
2400d1ca:	d01a      	beq.n	2400d202 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d1cc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d1d0:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d1d2:	2919      	cmp	r1, #25
2400d1d4:	d9e5      	bls.n	2400d1a2 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d1d6:	2a7f      	cmp	r2, #127	; 0x7f
2400d1d8:	d9e5      	bls.n	2400d1a6 <pattern_matching+0x56>
2400d1da:	4423      	add	r3, r4
2400d1dc:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400d1e0:	e7e1      	b.n	2400d1a6 <pattern_matching+0x56>
2400d1e2:	2b7f      	cmp	r3, #127	; 0x7f
2400d1e4:	d9e9      	bls.n	2400d1ba <pattern_matching+0x6a>
2400d1e6:	4421      	add	r1, r4
2400d1e8:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400d1ec:	4293      	cmp	r3, r2
2400d1ee:	d0e6      	beq.n	2400d1be <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d1f0:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400d1f2:	2b00      	cmp	r3, #0
2400d1f4:	d0c4      	beq.n	2400d180 <pattern_matching+0x30>
2400d1f6:	2f00      	cmp	r7, #0
2400d1f8:	d1cf      	bne.n	2400d19a <pattern_matching+0x4a>
2400d1fa:	e7c1      	b.n	2400d180 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d1fc:	2001      	movs	r0, #1
}
2400d1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400d202:	4601      	mov	r1, r0
				nm = nx = 0;
2400d204:	2300      	movs	r3, #0
2400d206:	f811 cb01 	ldrb.w	ip, [r1], #1
2400d20a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400d20c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d210:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400d212:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400d216:	bf0c      	ite	eq
2400d218:	3201      	addeq	r2, #1
2400d21a:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400d21c:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400d220:	d0f4      	beq.n	2400d20c <pattern_matching+0xbc>
2400d222:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d226:	d0f1      	beq.n	2400d20c <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400d228:	4649      	mov	r1, r9
2400d22a:	f7ff ff91 	bl	2400d150 <pattern_matching>
2400d22e:	2800      	cmp	r0, #0
2400d230:	d1e4      	bne.n	2400d1fc <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400d232:	f899 3000 	ldrb.w	r3, [r9]
2400d236:	e7db      	b.n	2400d1f0 <pattern_matching+0xa0>
2400d238:	2401a67c 	.word	0x2401a67c

2400d23c <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400d23c:	2300      	movs	r3, #0
{
2400d23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400d242:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400d246:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400d248:	69c2      	ldr	r2, [r0, #28]
2400d24a:	2a00      	cmp	r2, #0
2400d24c:	d063      	beq.n	2400d316 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400d24e:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400d250:	4604      	mov	r4, r0
2400d252:	460d      	mov	r5, r1
2400d254:	3201      	adds	r2, #1
2400d256:	d01f      	beq.n	2400d298 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d258:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400d25c:	8818      	ldrh	r0, [r3, #0]
2400d25e:	2800      	cmp	r0, #0
2400d260:	d063      	beq.n	2400d32a <get_fileinfo+0xee>
2400d262:	f101 0715 	add.w	r7, r1, #21
2400d266:	2601      	movs	r6, #1
2400d268:	e000      	b.n	2400d26c <get_fileinfo+0x30>
2400d26a:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400d26c:	2100      	movs	r1, #0
2400d26e:	f002 fe91 	bl	2400ff94 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d272:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400d274:	2800      	cmp	r0, #0
2400d276:	d058      	beq.n	2400d32a <get_fileinfo+0xee>
2400d278:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400d27c:	d055      	beq.n	2400d32a <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400d27e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d282:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400d286:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400d28a:	2800      	cmp	r0, #0
2400d28c:	d1ed      	bne.n	2400d26a <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d28e:	442e      	add	r6, r5
2400d290:	2300      	movs	r3, #0
2400d292:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d294:	7da8      	ldrb	r0, [r5, #22]
2400d296:	e000      	b.n	2400d29a <get_fileinfo+0x5e>
2400d298:	4618      	mov	r0, r3
	i = j = 0;
2400d29a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400d29e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400d2a0:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400d2a2:	6a21      	ldr	r1, [r4, #32]
2400d2a4:	5c8b      	ldrb	r3, [r1, r2]
2400d2a6:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400d2a8:	2b20      	cmp	r3, #32
2400d2aa:	d01b      	beq.n	2400d2e4 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400d2ac:	2b05      	cmp	r3, #5
2400d2ae:	bf08      	it	eq
2400d2b0:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400d2b2:	2a09      	cmp	r2, #9
2400d2b4:	d031      	beq.n	2400d31a <get_fileinfo+0xde>
		fno->altname[j] = c;
2400d2b6:	eb05 010c 	add.w	r1, r5, ip
2400d2ba:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400d2bc:	b980      	cbnz	r0, 2400d2e0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400d2be:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400d2c2:	2e19      	cmp	r6, #25
2400d2c4:	d80b      	bhi.n	2400d2de <get_fileinfo+0xa2>
2400d2c6:	6a26      	ldr	r6, [r4, #32]
2400d2c8:	2a08      	cmp	r2, #8
2400d2ca:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400d2ce:	bf8c      	ite	hi
2400d2d0:	2610      	movhi	r6, #16
2400d2d2:	2608      	movls	r6, #8
2400d2d4:	ea1e 0f06 	tst.w	lr, r6
2400d2d8:	d001      	beq.n	2400d2de <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400d2da:	3320      	adds	r3, #32
2400d2dc:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400d2de:	758b      	strb	r3, [r1, #22]
		j++;
2400d2e0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400d2e4:	2a0b      	cmp	r2, #11
2400d2e6:	d1dc      	bne.n	2400d2a2 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400d2e8:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400d2ec:	b928      	cbnz	r0, 2400d2fa <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400d2ee:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400d2f0:	6a23      	ldr	r3, [r4, #32]
2400d2f2:	7b1b      	ldrb	r3, [r3, #12]
2400d2f4:	2b00      	cmp	r3, #0
2400d2f6:	bf08      	it	eq
2400d2f8:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400d2fa:	2300      	movs	r3, #0
2400d2fc:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400d2fe:	6a23      	ldr	r3, [r4, #32]
2400d300:	7adb      	ldrb	r3, [r3, #11]
2400d302:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400d304:	6a23      	ldr	r3, [r4, #32]
2400d306:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400d308:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400d30a:	6a23      	ldr	r3, [r4, #32]
2400d30c:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400d310:	0c1a      	lsrs	r2, r3, #16
2400d312:	80eb      	strh	r3, [r5, #6]
2400d314:	80aa      	strh	r2, [r5, #4]
}
2400d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400d31a:	eb05 010c 	add.w	r1, r5, ip
2400d31e:	b900      	cbnz	r0, 2400d322 <get_fileinfo+0xe6>
2400d320:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400d322:	f10c 0c01 	add.w	ip, ip, #1
2400d326:	724f      	strb	r7, [r1, #9]
2400d328:	e7c5      	b.n	2400d2b6 <get_fileinfo+0x7a>
			i = j = 0;
2400d32a:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d32c:	2300      	movs	r3, #0
2400d32e:	442e      	add	r6, r5
2400d330:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d332:	7da8      	ldrb	r0, [r5, #22]
2400d334:	e7b1      	b.n	2400d29a <get_fileinfo+0x5e>
2400d336:	bf00      	nop

2400d338 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400d338:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d33a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400d33e:	2300      	movs	r3, #0
{
2400d340:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d342:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d344:	70c3      	strb	r3, [r0, #3]
2400d346:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d348:	d00c      	beq.n	2400d364 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d34a:	460d      	mov	r5, r1
2400d34c:	460a      	mov	r2, r1
2400d34e:	2301      	movs	r3, #1
2400d350:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400d354:	7840      	ldrb	r0, [r0, #1]
2400d356:	f7ff fe83 	bl	2400d060 <disk_read>
2400d35a:	b110      	cbz	r0, 2400d362 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400d35c:	2004      	movs	r0, #4
			fs->winsect = sector;
2400d35e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400d360:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400d362:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400d364:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d368:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400d36c:	429a      	cmp	r2, r3
2400d36e:	d11a      	bne.n	2400d3a6 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400d370:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400d374:	2be9      	cmp	r3, #233	; 0xe9
2400d376:	d007      	beq.n	2400d388 <check_fs+0x50>
2400d378:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d37a:	4a0d      	ldr	r2, [pc, #52]	; (2400d3b0 <check_fs+0x78>)
2400d37c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400d380:	4293      	cmp	r3, r2
2400d382:	d001      	beq.n	2400d388 <check_fs+0x50>
	return 2;
2400d384:	2002      	movs	r0, #2
}
2400d386:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400d388:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400d38c:	4a09      	ldr	r2, [pc, #36]	; (2400d3b4 <check_fs+0x7c>)
2400d38e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400d392:	4293      	cmp	r3, r2
2400d394:	d009      	beq.n	2400d3aa <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400d396:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400d39a:	4b07      	ldr	r3, [pc, #28]	; (2400d3b8 <check_fs+0x80>)
2400d39c:	4298      	cmp	r0, r3
2400d39e:	bf14      	ite	ne
2400d3a0:	2002      	movne	r0, #2
2400d3a2:	2000      	moveq	r0, #0
}
2400d3a4:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400d3a6:	2003      	movs	r0, #3
}
2400d3a8:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400d3aa:	2000      	movs	r0, #0
}
2400d3ac:	bd70      	pop	{r4, r5, r6, pc}
2400d3ae:	bf00      	nop
2400d3b0:	009000eb 	.word	0x009000eb
2400d3b4:	00544146 	.word	0x00544146
2400d3b8:	33544146 	.word	0x33544146

2400d3bc <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400d3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d3be:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400d3c0:	b083      	sub	sp, #12
2400d3c2:	4604      	mov	r4, r0
2400d3c4:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d3c6:	b973      	cbnz	r3, 2400d3e6 <move_window.part.0+0x2a>
2400d3c8:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d3cc:	2301      	movs	r3, #1
2400d3ce:	462a      	mov	r2, r5
2400d3d0:	7860      	ldrb	r0, [r4, #1]
2400d3d2:	f7ff fe45 	bl	2400d060 <disk_read>
2400d3d6:	b910      	cbnz	r0, 2400d3de <move_window.part.0+0x22>
			fs->winsect = sector;
2400d3d8:	6325      	str	r5, [r4, #48]	; 0x30
}
2400d3da:	b003      	add	sp, #12
2400d3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400d3de:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400d3e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400d3e4:	e7f8      	b.n	2400d3d8 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400d3e6:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d3e8:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400d3ec:	2301      	movs	r3, #1
2400d3ee:	7840      	ldrb	r0, [r0, #1]
2400d3f0:	4632      	mov	r2, r6
2400d3f2:	9101      	str	r1, [sp, #4]
2400d3f4:	f7ff fe42 	bl	2400d07c <disk_write>
2400d3f8:	b9b8      	cbnz	r0, 2400d42a <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d3fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400d3fc:	69e3      	ldr	r3, [r4, #28]
2400d3fe:	1ab2      	subs	r2, r6, r2
2400d400:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400d402:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d404:	429a      	cmp	r2, r3
2400d406:	d2e1      	bcs.n	2400d3cc <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d408:	78a7      	ldrb	r7, [r4, #2]
2400d40a:	2f01      	cmp	r7, #1
2400d40c:	d801      	bhi.n	2400d412 <move_window.part.0+0x56>
2400d40e:	e7dd      	b.n	2400d3cc <move_window.part.0+0x10>
					wsect += fs->fsize;
2400d410:	69e3      	ldr	r3, [r4, #28]
2400d412:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d414:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d416:	2301      	movs	r3, #1
2400d418:	7860      	ldrb	r0, [r4, #1]
2400d41a:	4632      	mov	r2, r6
2400d41c:	9101      	str	r1, [sp, #4]
2400d41e:	f7ff fe2d 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d422:	2f01      	cmp	r7, #1
2400d424:	9901      	ldr	r1, [sp, #4]
2400d426:	d1f3      	bne.n	2400d410 <move_window.part.0+0x54>
2400d428:	e7d0      	b.n	2400d3cc <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400d42a:	2001      	movs	r0, #1
}
2400d42c:	b003      	add	sp, #12
2400d42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400d430 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400d430:	2300      	movs	r3, #0
{
2400d432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400d436:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400d438:	6804      	ldr	r4, [r0, #0]
2400d43a:	b18c      	cbz	r4, 2400d460 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d43c:	7825      	ldrb	r5, [r4, #0]
2400d43e:	2d1f      	cmp	r5, #31
2400d440:	d912      	bls.n	2400d468 <find_volume+0x38>
2400d442:	2d3a      	cmp	r5, #58	; 0x3a
2400d444:	d010      	beq.n	2400d468 <find_volume+0x38>
2400d446:	46a4      	mov	ip, r4
2400d448:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400d44c:	2b1f      	cmp	r3, #31
2400d44e:	d90d      	bls.n	2400d46c <find_volume+0x3c>
2400d450:	2b3a      	cmp	r3, #58	; 0x3a
2400d452:	d1f9      	bne.n	2400d448 <find_volume+0x18>
			i = *tp++ - '0';
2400d454:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400d456:	45a4      	cmp	ip, r4
2400d458:	d102      	bne.n	2400d460 <find_volume+0x30>
2400d45a:	2d30      	cmp	r5, #48	; 0x30
2400d45c:	f000 80da 	beq.w	2400d614 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400d460:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400d462:	4620      	mov	r0, r4
2400d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d468:	462b      	mov	r3, r5
2400d46a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400d46c:	2b3a      	cmp	r3, #58	; 0x3a
2400d46e:	d0f1      	beq.n	2400d454 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400d470:	4ba6      	ldr	r3, [pc, #664]	; (2400d70c <find_volume+0x2dc>)
2400d472:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d474:	2d00      	cmp	r5, #0
2400d476:	f000 80c9 	beq.w	2400d60c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400d47a:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400d47c:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400d480:	782b      	ldrb	r3, [r5, #0]
2400d482:	b17b      	cbz	r3, 2400d4a4 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400d484:	7868      	ldrb	r0, [r5, #1]
2400d486:	f7ff fdcf 	bl	2400d028 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400d48a:	07c1      	lsls	r1, r0, #31
2400d48c:	d40a      	bmi.n	2400d4a4 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400d48e:	2c00      	cmp	r4, #0
2400d490:	f000 80ab 	beq.w	2400d5ea <find_volume+0x1ba>
2400d494:	f010 0404 	ands.w	r4, r0, #4
2400d498:	f000 80a7 	beq.w	2400d5ea <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400d49c:	240a      	movs	r4, #10
}
2400d49e:	4620      	mov	r0, r4
2400d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400d4a4:	2000      	movs	r0, #0
2400d4a6:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400d4a8:	f7ff fdc8 	bl	2400d03c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400d4ac:	07c2      	lsls	r2, r0, #31
2400d4ae:	f100 809f 	bmi.w	2400d5f0 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400d4b2:	b10c      	cbz	r4, 2400d4b8 <find_volume+0x88>
2400d4b4:	0743      	lsls	r3, r0, #29
2400d4b6:	d4f1      	bmi.n	2400d49c <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400d4b8:	2100      	movs	r1, #0
2400d4ba:	4628      	mov	r0, r5
2400d4bc:	f7ff ff3c 	bl	2400d338 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400d4c0:	2802      	cmp	r0, #2
2400d4c2:	d077      	beq.n	2400d5b4 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d4c4:	2804      	cmp	r0, #4
2400d4c6:	f000 809f 	beq.w	2400d608 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d4ca:	2801      	cmp	r0, #1
2400d4cc:	f200 808c 	bhi.w	2400d5e8 <find_volume+0x1b8>
	bsect = 0;
2400d4d0:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400d4d2:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400d4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400d4da:	f040 8085 	bne.w	2400d5e8 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400d4de:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400d4e2:	b902      	cbnz	r2, 2400d4e6 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400d4e4:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d4e6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400d4ea:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d4ec:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d4ee:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d4f0:	2901      	cmp	r1, #1
2400d4f2:	d879      	bhi.n	2400d5e8 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400d4f4:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400d4f8:	b288      	uxth	r0, r1
2400d4fa:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400d4fc:	2800      	cmp	r0, #0
2400d4fe:	d073      	beq.n	2400d5e8 <find_volume+0x1b8>
2400d500:	1e48      	subs	r0, r1, #1
2400d502:	4208      	tst	r0, r1
2400d504:	d170      	bne.n	2400d5e8 <find_volume+0x1b8>
	rv = ptr[1];
2400d506:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d50a:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d50e:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d512:	d169      	bne.n	2400d5e8 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400d514:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400d518:	b900      	cbnz	r0, 2400d51c <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400d51a:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400d51c:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400d520:	2f00      	cmp	r7, #0
2400d522:	d061      	beq.n	2400d5e8 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400d524:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400d528:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400d52c:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400d52e:	42b0      	cmp	r0, r6
2400d530:	d35a      	bcc.n	2400d5e8 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d532:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d536:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d538:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d53c:	d354      	bcc.n	2400d5e8 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400d53e:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400d542:	4288      	cmp	r0, r1
2400d544:	f200 8084 	bhi.w	2400d650 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400d548:	f640 71f5 	movw	r1, #4085	; 0xff5
2400d54c:	4288      	cmp	r0, r1
2400d54e:	f200 80a3 	bhi.w	2400d698 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d552:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d554:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d556:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d558:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d55a:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d55c:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d55e:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d560:	f1bc 0f00 	cmp.w	ip, #0
2400d564:	d040      	beq.n	2400d5e8 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d566:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400d56a:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d56e:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d570:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400d574:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d576:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d578:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400d57c:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400d580:	d332      	bcc.n	2400d5e8 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d586:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d588:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400d58c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400d58e:	4960      	ldr	r1, [pc, #384]	; (2400d710 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400d590:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d592:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d594:	485f      	ldr	r0, [pc, #380]	; (2400d714 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d596:	4a60      	ldr	r2, [pc, #384]	; (2400d718 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400d598:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d59a:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d59c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d59e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d5a0:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400d5a2:	800b      	strh	r3, [r1, #0]
2400d5a4:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d5a6:	f000 8086 	beq.w	2400d6b6 <find_volume+0x286>
2400d5aa:	6913      	ldr	r3, [r2, #16]
2400d5ac:	429d      	cmp	r5, r3
2400d5ae:	d06f      	beq.n	2400d690 <find_volume+0x260>
	return FR_OK;
2400d5b0:	2400      	movs	r4, #0
2400d5b2:	e01a      	b.n	2400d5ea <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d5b4:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400d5b8:	b10e      	cbz	r6, 2400d5be <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400d5ba:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d5be:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400d5c2:	b10c      	cbz	r4, 2400d5c8 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400d5c4:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d5c8:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400d5cc:	b303      	cbz	r3, 2400d610 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400d5ce:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d5d2:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400d5d6:	b10f      	cbz	r7, 2400d5dc <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400d5d8:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d5dc:	b9f6      	cbnz	r6, 2400d61c <find_volume+0x1ec>
2400d5de:	bb2c      	cbnz	r4, 2400d62c <find_volume+0x1fc>
2400d5e0:	f1b8 0f00 	cmp.w	r8, #0
2400d5e4:	d12c      	bne.n	2400d640 <find_volume+0x210>
2400d5e6:	b93f      	cbnz	r7, 2400d5f8 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d5e8:	240d      	movs	r4, #13
}
2400d5ea:	4620      	mov	r0, r4
2400d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400d5f0:	2403      	movs	r4, #3
}
2400d5f2:	4620      	mov	r0, r4
2400d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d5f8:	4639      	mov	r1, r7
2400d5fa:	4628      	mov	r0, r5
2400d5fc:	f7ff fe9c 	bl	2400d338 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d600:	2801      	cmp	r0, #1
2400d602:	d95b      	bls.n	2400d6bc <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d604:	2804      	cmp	r0, #4
2400d606:	d1ef      	bne.n	2400d5e8 <find_volume+0x1b8>
2400d608:	2401      	movs	r4, #1
2400d60a:	e7ee      	b.n	2400d5ea <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d60c:	240c      	movs	r4, #12
2400d60e:	e7ec      	b.n	2400d5ea <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d610:	4698      	mov	r8, r3
2400d612:	e7de      	b.n	2400d5d2 <find_volume+0x1a2>
					*path = ++tt;
2400d614:	f10c 0301 	add.w	r3, ip, #1
2400d618:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400d61a:	e729      	b.n	2400d470 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d61c:	4631      	mov	r1, r6
2400d61e:	4628      	mov	r0, r5
2400d620:	f7ff fe8a 	bl	2400d338 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d624:	2801      	cmp	r0, #1
2400d626:	d8da      	bhi.n	2400d5de <find_volume+0x1ae>
2400d628:	4634      	mov	r4, r6
2400d62a:	e752      	b.n	2400d4d2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d62c:	4621      	mov	r1, r4
2400d62e:	4628      	mov	r0, r5
2400d630:	f7ff fe82 	bl	2400d338 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d634:	2801      	cmp	r0, #1
2400d636:	f67f af4c 	bls.w	2400d4d2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d63a:	f1b8 0f00 	cmp.w	r8, #0
2400d63e:	d0d2      	beq.n	2400d5e6 <find_volume+0x1b6>
2400d640:	4641      	mov	r1, r8
2400d642:	4628      	mov	r0, r5
2400d644:	f7ff fe78 	bl	2400d338 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d648:	2801      	cmp	r0, #1
2400d64a:	d8cc      	bhi.n	2400d5e6 <find_volume+0x1b6>
2400d64c:	4644      	mov	r4, r8
2400d64e:	e740      	b.n	2400d4d2 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
2400d650:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d654:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d656:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d658:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d65a:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d65e:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d660:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400d662:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400d664:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d666:	d1bf      	bne.n	2400d5e8 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400d668:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400d66a:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d66c:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400d670:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d672:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400d676:	d3b7      	bcc.n	2400d5e8 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d678:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d67c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d680:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d682:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400d684:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d686:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d68a:	d019      	beq.n	2400d6c0 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d68c:	2003      	movs	r0, #3
2400d68e:	e77e      	b.n	2400d58e <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d690:	2300      	movs	r3, #0
	return FR_OK;
2400d692:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d694:	6113      	str	r3, [r2, #16]
2400d696:	e7a8      	b.n	2400d5ea <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d698:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d69a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d69c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d69e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d6a0:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d6a2:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d6a4:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d6a6:	f1bc 0f00 	cmp.w	ip, #0
2400d6aa:	d09d      	beq.n	2400d5e8 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d6ac:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d6ae:	0049      	lsls	r1, r1, #1
2400d6b0:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d6b2:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
2400d6b4:	e760      	b.n	2400d578 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d6b6:	2300      	movs	r3, #0
2400d6b8:	6013      	str	r3, [r2, #0]
2400d6ba:	e776      	b.n	2400d5aa <find_volume+0x17a>
2400d6bc:	463c      	mov	r4, r7
2400d6be:	e708      	b.n	2400d4d2 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d6c0:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d6c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2400d6c4:	4299      	cmp	r1, r3
2400d6c6:	d004      	beq.n	2400d6d2 <find_volume+0x2a2>
2400d6c8:	4628      	mov	r0, r5
2400d6ca:	f7ff fe77 	bl	2400d3bc <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d6ce:	2800      	cmp	r0, #0
2400d6d0:	d1dc      	bne.n	2400d68c <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d6d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d6d6:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400d6da:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d6dc:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
2400d6de:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d6e0:	d1d4      	bne.n	2400d68c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d6e2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400d6e4:	4b0d      	ldr	r3, [pc, #52]	; (2400d71c <find_volume+0x2ec>)
2400d6e6:	429a      	cmp	r2, r3
2400d6e8:	d1d0      	bne.n	2400d68c <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d6ea:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400d6ee:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d6f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400d6f6:	3320      	adds	r3, #32
2400d6f8:	429a      	cmp	r2, r3
2400d6fa:	d1c7      	bne.n	2400d68c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d6fc:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d700:	2003      	movs	r0, #3
2400d702:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2400d706:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400d70a:	e740      	b.n	2400d58e <find_volume+0x15e>
2400d70c:	2001b410 	.word	0x2001b410
2400d710:	2001b434 	.word	0x2001b434
2400d714:	2001b438 	.word	0x2001b438
2400d718:	2001b414 	.word	0x2001b414
2400d71c:	41615252 	.word	0x41615252

2400d720 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
2400d724:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d726:	4604      	mov	r4, r0
2400d728:	460d      	mov	r5, r1
2400d72a:	4616      	mov	r6, r2
		switch (fs->fs_type) {
2400d72c:	2b02      	cmp	r3, #2
2400d72e:	d006      	beq.n	2400d73e <put_fat.part.0+0x1e>
2400d730:	2b03      	cmp	r3, #3
2400d732:	d052      	beq.n	2400d7da <put_fat.part.0+0xba>
2400d734:	2b01      	cmp	r3, #1
2400d736:	d01b      	beq.n	2400d770 <put_fat.part.0+0x50>
2400d738:	2002      	movs	r0, #2
}
2400d73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d73e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d740:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d742:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d746:	4299      	cmp	r1, r3
2400d748:	d003      	beq.n	2400d752 <put_fat.part.0+0x32>
2400d74a:	f7ff fe37 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400d74e:	2800      	cmp	r0, #0
2400d750:	d1f3      	bne.n	2400d73a <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d752:	006d      	lsls	r5, r5, #1
2400d754:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400d758:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
2400d75c:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d75e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400d762:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d764:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
2400d766:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
2400d768:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
2400d76a:	70e3      	strb	r3, [r4, #3]
}
2400d76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
2400d770:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d774:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d776:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d778:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d77c:	4299      	cmp	r1, r3
2400d77e:	d003      	beq.n	2400d788 <put_fat.part.0+0x68>
2400d780:	f7ff fe1c 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400d784:	2800      	cmp	r0, #0
2400d786:	d1d8      	bne.n	2400d73a <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d788:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400d78a:	f107 0801 	add.w	r8, r7, #1
2400d78e:	f104 0934 	add.w	r9, r4, #52	; 0x34
2400d792:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d796:	d542      	bpl.n	2400d81e <put_fat.part.0+0xfe>
2400d798:	f819 3007 	ldrb.w	r3, [r9, r7]
2400d79c:	f003 030f 	and.w	r3, r3, #15
2400d7a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
2400d7a4:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
2400d7a8:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d7aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d7ac:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d7ae:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d7b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d7b4:	4299      	cmp	r1, r3
2400d7b6:	d004      	beq.n	2400d7c2 <put_fat.part.0+0xa2>
2400d7b8:	4620      	mov	r0, r4
2400d7ba:	f7ff fdff 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400d7be:	2800      	cmp	r0, #0
2400d7c0:	d1bb      	bne.n	2400d73a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d7c2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d7c6:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2400d7ca:	44c8      	add	r8, r9
			fs->wflag = 1;
2400d7cc:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d7ce:	f888 2000 	strb.w	r2, [r8]
			break;
2400d7d2:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d7d4:	70e3      	strb	r3, [r4, #3]
}
2400d7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d7da:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d7dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d7de:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d7e2:	4299      	cmp	r1, r3
2400d7e4:	d003      	beq.n	2400d7ee <put_fat.part.0+0xce>
2400d7e6:	f7ff fde9 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400d7ea:	2800      	cmp	r0, #0
2400d7ec:	d1a5      	bne.n	2400d73a <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d7ee:	00ad      	lsls	r5, r5, #2
2400d7f0:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400d7f4:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2400d7f8:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d7fc:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d7fe:	1941      	adds	r1, r0, r5
2400d800:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d804:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2400d806:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d808:	5542      	strb	r2, [r0, r5]
2400d80a:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400d80c:	708b      	strb	r3, [r1, #2]
2400d80e:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
2400d810:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400d812:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
2400d814:	70ca      	strb	r2, [r1, #3]
			break;
2400d816:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d818:	70e3      	strb	r3, [r4, #3]
}
2400d81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d81e:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
2400d822:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d824:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d826:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d828:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d82c:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d82e:	4299      	cmp	r1, r3
2400d830:	d005      	beq.n	2400d83e <put_fat.part.0+0x11e>
2400d832:	4620      	mov	r0, r4
2400d834:	f7ff fdc2 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400d838:	2800      	cmp	r0, #0
2400d83a:	f47f af7e 	bne.w	2400d73a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d83e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d842:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2400d846:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d848:	f898 3000 	ldrb.w	r3, [r8]
2400d84c:	f023 060f 	bic.w	r6, r3, #15
2400d850:	4332      	orrs	r2, r6
2400d852:	e7bb      	b.n	2400d7cc <put_fat.part.0+0xac>

2400d854 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d854:	2901      	cmp	r1, #1
2400d856:	d90e      	bls.n	2400d876 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400d858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d85a:	6983      	ldr	r3, [r0, #24]
2400d85c:	460c      	mov	r4, r1
2400d85e:	4605      	mov	r5, r0
2400d860:	4299      	cmp	r1, r3
2400d862:	d206      	bcs.n	2400d872 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400d864:	7803      	ldrb	r3, [r0, #0]
2400d866:	2b02      	cmp	r3, #2
2400d868:	d03e      	beq.n	2400d8e8 <get_fat.isra.0+0x94>
2400d86a:	2b03      	cmp	r3, #3
2400d86c:	d02b      	beq.n	2400d8c6 <get_fat.isra.0+0x72>
2400d86e:	2b01      	cmp	r3, #1
2400d870:	d003      	beq.n	2400d87a <get_fat.isra.0+0x26>
2400d872:	2001      	movs	r0, #1
}
2400d874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400d876:	2001      	movs	r0, #1
}
2400d878:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
2400d87a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d87e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d880:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d882:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d886:	4291      	cmp	r1, r2
2400d888:	d004      	beq.n	2400d894 <get_fat.isra.0+0x40>
2400d88a:	f7ff fd97 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d88e:	bba0      	cbnz	r0, 2400d8fa <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d890:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d892:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400d894:	1c77      	adds	r7, r6, #1
2400d896:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d89a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400d89e:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8a0:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400d8a2:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8a6:	d003      	beq.n	2400d8b0 <get_fat.isra.0+0x5c>
2400d8a8:	4628      	mov	r0, r5
2400d8aa:	f7ff fd87 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8ae:	bb20      	cbnz	r0, 2400d8fa <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
2400d8b0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d8b4:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400d8b6:	443d      	add	r5, r7
2400d8b8:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400d8bc:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d8c0:	d524      	bpl.n	2400d90c <get_fat.isra.0+0xb8>
2400d8c2:	0900      	lsrs	r0, r0, #4
}
2400d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d8c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d8ca:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8ce:	4299      	cmp	r1, r3
2400d8d0:	d002      	beq.n	2400d8d8 <get_fat.isra.0+0x84>
2400d8d2:	f7ff fd73 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d8d6:	b980      	cbnz	r0, 2400d8fa <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d8d8:	00a4      	lsls	r4, r4, #2
2400d8da:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d8de:	4425      	add	r5, r4
2400d8e0:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d8e2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d8e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d8ec:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d8f0:	4299      	cmp	r1, r3
2400d8f2:	d005      	beq.n	2400d900 <get_fat.isra.0+0xac>
2400d8f4:	f7ff fd62 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d8f8:	b110      	cbz	r0, 2400d900 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400d8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400d8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d900:	0064      	lsls	r4, r4, #1
2400d902:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400d906:	4425      	add	r5, r4
2400d908:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2400d90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d90c:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
2400d910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d912:	bf00      	nop

2400d914 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
2400d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d918:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d91a:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d91c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d91e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d922:	d22d      	bcs.n	2400d980 <dir_next.constprop.0+0x6c>
2400d924:	b363      	cbz	r3, 2400d980 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d926:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400d92a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d92c:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d92e:	b137      	cbz	r7, 2400d93e <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d930:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
2400d932:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400d934:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d936:	443e      	add	r6, r7
2400d938:	6226      	str	r6, [r4, #32]
}
2400d93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
2400d93e:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400d940:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400d942:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400d944:	b1f9      	cbz	r1, 2400d986 <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d946:	8973      	ldrh	r3, [r6, #10]
2400d948:	3b01      	subs	r3, #1
2400d94a:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
2400d94e:	d1ef      	bne.n	2400d930 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d950:	4630      	mov	r0, r6
2400d952:	f7ff ff7f 	bl	2400d854 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d956:	2801      	cmp	r0, #1
2400d958:	d91d      	bls.n	2400d996 <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d95a:	1c43      	adds	r3, r0, #1
2400d95c:	d01d      	beq.n	2400d99a <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d95e:	69b3      	ldr	r3, [r6, #24]
2400d960:	4298      	cmp	r0, r3
2400d962:	d214      	bcs.n	2400d98e <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d964:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d966:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d968:	69b3      	ldr	r3, [r6, #24]
2400d96a:	3b02      	subs	r3, #2
2400d96c:	4298      	cmp	r0, r3
2400d96e:	d204      	bcs.n	2400d97a <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
2400d970:	f8b6 800a 	ldrh.w	r8, [r6, #10]
2400d974:	6af3      	ldr	r3, [r6, #44]	; 0x2c
2400d976:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
2400d97a:	f8c4 801c 	str.w	r8, [r4, #28]
2400d97e:	e7d7      	b.n	2400d930 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d980:	2004      	movs	r0, #4
}
2400d982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d986:	8933      	ldrh	r3, [r6, #8]
2400d988:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400d98c:	d8d0      	bhi.n	2400d930 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
2400d98e:	2300      	movs	r3, #0
2400d990:	2004      	movs	r0, #4
2400d992:	61e3      	str	r3, [r4, #28]
2400d994:	e7d1      	b.n	2400d93a <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d996:	2002      	movs	r0, #2
2400d998:	e7cf      	b.n	2400d93a <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d99a:	2001      	movs	r0, #1
2400d99c:	e7cd      	b.n	2400d93a <dir_next.constprop.0+0x26>
2400d99e:	bf00      	nop

2400d9a0 <dir_read.constprop.0>:
FRESULT dir_read (
2400d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400d9a4:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400d9a6:	b083      	sub	sp, #12
2400d9a8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d9aa:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
2400d9ac:	2e00      	cmp	r6, #0
2400d9ae:	d05e      	beq.n	2400da6e <dir_read.constprop.0+0xce>
	BYTE ord = 0xFF, sum = 0xFF;
2400d9b0:	f04f 0aff 	mov.w	sl, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d9b4:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400d9b8:	46d0      	mov	r8, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d9ba:	6b3d      	ldr	r5, [r7, #48]	; 0x30
2400d9bc:	42b5      	cmp	r5, r6
2400d9be:	d014      	beq.n	2400d9ea <dir_read.constprop.0+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d9c0:	78fb      	ldrb	r3, [r7, #3]
2400d9c2:	2b00      	cmp	r3, #0
2400d9c4:	f040 80cb 	bne.w	2400db5e <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d9c8:	2301      	movs	r3, #1
2400d9ca:	4632      	mov	r2, r6
2400d9cc:	4649      	mov	r1, r9
2400d9ce:	7878      	ldrb	r0, [r7, #1]
2400d9d0:	f7ff fb46 	bl	2400d060 <disk_read>
2400d9d4:	b140      	cbz	r0, 2400d9e8 <dir_read.constprop.0+0x48>
			fs->winsect = sector;
2400d9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400d9da:	2001      	movs	r0, #1
			fs->winsect = sector;
2400d9dc:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400d9de:	2300      	movs	r3, #0
2400d9e0:	61e3      	str	r3, [r4, #28]
}
2400d9e2:	b003      	add	sp, #12
2400d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400d9e8:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400d9ea:	6a21      	ldr	r1, [r4, #32]
2400d9ec:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400d9ee:	2a00      	cmp	r2, #0
2400d9f0:	d03d      	beq.n	2400da6e <dir_read.constprop.0+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d9f2:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d9f4:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400d9fa:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d9fc:	d005      	beq.n	2400da0a <dir_read.constprop.0+0x6a>
2400d9fe:	2a2e      	cmp	r2, #46	; 0x2e
2400da00:	d003      	beq.n	2400da0a <dir_read.constprop.0+0x6a>
2400da02:	f023 0020 	bic.w	r0, r3, #32
2400da06:	2808      	cmp	r0, #8
2400da08:	d138      	bne.n	2400da7c <dir_read.constprop.0+0xdc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400da0a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400da0e:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400da10:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400da12:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400da14:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400da18:	d229      	bcs.n	2400da6e <dir_read.constprop.0+0xce>
2400da1a:	b346      	cbz	r6, 2400da6e <dir_read.constprop.0+0xce>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400da1c:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400da20:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400da22:	bb32      	cbnz	r2, 2400da72 <dir_read.constprop.0+0xd2>
		dp->sect++;				/* Next sector */
2400da24:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400da26:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400da28:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400da2a:	b961      	cbnz	r1, 2400da46 <dir_read.constprop.0+0xa6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400da2c:	891a      	ldrh	r2, [r3, #8]
2400da2e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400da32:	d91c      	bls.n	2400da6e <dir_read.constprop.0+0xce>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400da34:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400da36:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400da38:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400da3a:	2e00      	cmp	r6, #0
2400da3c:	d1bd      	bne.n	2400d9ba <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400da3e:	2000      	movs	r0, #0
}
2400da40:	b003      	add	sp, #12
2400da42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400da46:	895a      	ldrh	r2, [r3, #10]
2400da48:	3a01      	subs	r2, #1
2400da4a:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
2400da4e:	d1f1      	bne.n	2400da34 <dir_read.constprop.0+0x94>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400da50:	4618      	mov	r0, r3
2400da52:	9301      	str	r3, [sp, #4]
2400da54:	f7ff fefe 	bl	2400d854 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400da58:	2801      	cmp	r0, #1
2400da5a:	f240 80b4 	bls.w	2400dbc6 <dir_read.constprop.0+0x226>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400da5e:	1c43      	adds	r3, r0, #1
2400da60:	f000 8084 	beq.w	2400db6c <dir_read.constprop.0+0x1cc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400da64:	9b01      	ldr	r3, [sp, #4]
2400da66:	699a      	ldr	r2, [r3, #24]
2400da68:	4290      	cmp	r0, r2
2400da6a:	f0c0 80a0 	bcc.w	2400dbae <dir_read.constprop.0+0x20e>
	FRESULT res = FR_NO_FILE;
2400da6e:	2004      	movs	r0, #4
2400da70:	e7b5      	b.n	2400d9de <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400da72:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400da74:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400da76:	441a      	add	r2, r3
2400da78:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
2400da7a:	e79e      	b.n	2400d9ba <dir_read.constprop.0+0x1a>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400da7c:	2b0f      	cmp	r3, #15
2400da7e:	f040 80aa 	bne.w	2400dbd6 <dir_read.constprop.0+0x236>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400da82:	0650      	lsls	r0, r2, #25
2400da84:	d574      	bpl.n	2400db70 <dir_read.constprop.0+0x1d0>
						dp->blk_ofs = dp->dptr;
2400da86:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400da88:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400da8c:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400da90:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400da92:	7b4b      	ldrb	r3, [r1, #13]
2400da94:	4553      	cmp	r3, sl
2400da96:	d1b8      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400da98:	8b4b      	ldrh	r3, [r1, #26]
2400da9a:	2b00      	cmp	r3, #0
2400da9c:	d1b5      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400da9e:	780b      	ldrb	r3, [r1, #0]
2400daa0:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400daa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400daa8:	3b01      	subs	r3, #1
2400daaa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400daae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dab2:	2bfe      	cmp	r3, #254	; 0xfe
2400dab4:	d8a9      	bhi.n	2400da0a <dir_read.constprop.0+0x6a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dab6:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dab8:	1c5a      	adds	r2, r3, #1
2400daba:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400dabe:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400dac2:	2800      	cmp	r0, #0
2400dac4:	f040 8090 	bne.w	2400dbe8 <dir_read.constprop.0+0x248>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dacc:	429e      	cmp	r6, r3
2400dace:	d19c      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400dad0:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dad8:	459e      	cmp	lr, r3
2400dada:	d196      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400dadc:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dae4:	459c      	cmp	ip, r3
2400dae6:	d190      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400dae8:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400daec:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400daf0:	429e      	cmp	r6, r3
2400daf2:	d18a      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400daf4:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400daf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dafc:	459c      	cmp	ip, r3
2400dafe:	d184      	bne.n	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db00:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db04:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db08:	459e      	cmp	lr, r3
2400db0a:	f47f af7e 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db0e:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db10:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db14:	429e      	cmp	r6, r3
2400db16:	f47f af78 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db1a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db22:	459c      	cmp	ip, r3
2400db24:	f47f af71 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db28:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db2e:	429e      	cmp	r6, r3
2400db30:	f47f af6b 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db34:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db38:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db3c:	459c      	cmp	ip, r3
2400db3e:	f47f af64 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db42:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db44:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db48:	429e      	cmp	r6, r3
2400db4a:	f47f af5e 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400db4e:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db52:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db56:	459c      	cmp	ip, r3
2400db58:	f000 80ca 	beq.w	2400dcf0 <dir_read.constprop.0+0x350>
2400db5c:	e755      	b.n	2400da0a <dir_read.constprop.0+0x6a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400db5e:	2301      	movs	r3, #1
2400db60:	462a      	mov	r2, r5
2400db62:	4649      	mov	r1, r9
2400db64:	7878      	ldrb	r0, [r7, #1]
2400db66:	f7ff fa89 	bl	2400d07c <disk_write>
2400db6a:	b128      	cbz	r0, 2400db78 <dir_read.constprop.0+0x1d8>
	FRESULT res = FR_NO_FILE;
2400db6c:	2001      	movs	r0, #1
2400db6e:	e736      	b.n	2400d9de <dir_read.constprop.0+0x3e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400db70:	4542      	cmp	r2, r8
2400db72:	f47f af4a 	bne.w	2400da0a <dir_read.constprop.0+0x6a>
2400db76:	e78c      	b.n	2400da92 <dir_read.constprop.0+0xf2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400db7a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400db7c:	1aea      	subs	r2, r5, r3
2400db7e:	69fb      	ldr	r3, [r7, #28]
2400db80:	429a      	cmp	r2, r3
2400db82:	f4bf af21 	bcs.w	2400d9c8 <dir_read.constprop.0+0x28>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400db86:	f897 b002 	ldrb.w	fp, [r7, #2]
2400db8a:	f1bb 0f01 	cmp.w	fp, #1
2400db8e:	d801      	bhi.n	2400db94 <dir_read.constprop.0+0x1f4>
2400db90:	e71a      	b.n	2400d9c8 <dir_read.constprop.0+0x28>
					wsect += fs->fsize;
2400db92:	69fb      	ldr	r3, [r7, #28]
2400db94:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400db96:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400db9a:	2301      	movs	r3, #1
2400db9c:	4649      	mov	r1, r9
2400db9e:	462a      	mov	r2, r5
2400dba0:	7878      	ldrb	r0, [r7, #1]
2400dba2:	f7ff fa6b 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dba6:	f1bb 0f01 	cmp.w	fp, #1
2400dbaa:	d1f2      	bne.n	2400db92 <dir_read.constprop.0+0x1f2>
2400dbac:	e70c      	b.n	2400d9c8 <dir_read.constprop.0+0x28>
				dp->clust = clst;		/* Initialize data for new cluster */
2400dbae:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400dbb0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dbb2:	699a      	ldr	r2, [r3, #24]
2400dbb4:	3a02      	subs	r2, #2
2400dbb6:	4290      	cmp	r0, r2
2400dbb8:	d207      	bcs.n	2400dbca <dir_read.constprop.0+0x22a>
	return clst * fs->csize + fs->database;
2400dbba:	895a      	ldrh	r2, [r3, #10]
2400dbbc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400dbbe:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400dbc2:	61e6      	str	r6, [r4, #28]
2400dbc4:	e736      	b.n	2400da34 <dir_read.constprop.0+0x94>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400dbc6:	2002      	movs	r0, #2
2400dbc8:	e709      	b.n	2400d9de <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dbca:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400dbcc:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400dbd0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dbd2:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400dbd4:	e733      	b.n	2400da3e <dir_read.constprop.0+0x9e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400dbd6:	f1b8 0f00 	cmp.w	r8, #0
2400dbda:	f000 8096 	beq.w	2400dd0a <dir_read.constprop.0+0x36a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400dbde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400dbe2:	2000      	movs	r0, #0
2400dbe4:	6323      	str	r3, [r4, #48]	; 0x30
2400dbe6:	e6fc      	b.n	2400d9e2 <dir_read.constprop.0+0x42>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dbe8:	2aff      	cmp	r2, #255	; 0xff
2400dbea:	f000 80d8 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dbee:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400dbf2:	0050      	lsls	r0, r2, #1
2400dbf4:	f8b1 e005 	ldrh.w	lr, [r1, #5]
2400dbf8:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400dbfa:	2e00      	cmp	r6, #0
2400dbfc:	f43f af6a 	beq.w	2400dad4 <dir_read.constprop.0+0x134>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc00:	2aff      	cmp	r2, #255	; 0xff
2400dc02:	f000 80cc 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc06:	4428      	add	r0, r5
2400dc08:	1cda      	adds	r2, r3, #3
2400dc0a:	f8a0 e002 	strh.w	lr, [r0, #2]
2400dc0e:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
2400dc12:	f1be 0f00 	cmp.w	lr, #0
2400dc16:	f43f af63 	beq.w	2400dae0 <dir_read.constprop.0+0x140>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc1a:	2aff      	cmp	r2, #255	; 0xff
2400dc1c:	f000 80bf 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc20:	f8a0 c004 	strh.w	ip, [r0, #4]
2400dc24:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400dc26:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400dc2a:	f1bc 0f00 	cmp.w	ip, #0
2400dc2e:	f43f af5d 	beq.w	2400daec <dir_read.constprop.0+0x14c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc32:	2aff      	cmp	r2, #255	; 0xff
2400dc34:	f000 80b3 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc38:	80c6      	strh	r6, [r0, #6]
2400dc3a:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400dc3c:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
2400dc40:	2e00      	cmp	r6, #0
2400dc42:	f43f af59 	beq.w	2400daf8 <dir_read.constprop.0+0x158>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc46:	2aff      	cmp	r2, #255	; 0xff
2400dc48:	f000 80a9 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc4c:	f8a0 c008 	strh.w	ip, [r0, #8]
2400dc50:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400dc52:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
2400dc56:	f1bc 0f00 	cmp.w	ip, #0
2400dc5a:	f43f af53 	beq.w	2400db04 <dir_read.constprop.0+0x164>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc5e:	2aff      	cmp	r2, #255	; 0xff
2400dc60:	f000 809d 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc64:	f8a0 e00a 	strh.w	lr, [r0, #10]
2400dc68:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400dc6a:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400dc6c:	f1be 0f00 	cmp.w	lr, #0
2400dc70:	f43f af4e 	beq.w	2400db10 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc74:	2aff      	cmp	r2, #255	; 0xff
2400dc76:	f000 8092 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc7a:	8186      	strh	r6, [r0, #12]
2400dc7c:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400dc80:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
2400dc84:	2e00      	cmp	r6, #0
2400dc86:	f43f af4a 	beq.w	2400db1e <dir_read.constprop.0+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc8a:	2aff      	cmp	r2, #255	; 0xff
2400dc8c:	f000 8087 	beq.w	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc90:	f8a0 c00e 	strh.w	ip, [r0, #14]
2400dc94:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400dc98:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400dc9a:	f1bc 0f00 	cmp.w	ip, #0
2400dc9e:	f43f af44 	beq.w	2400db2a <dir_read.constprop.0+0x18a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dca2:	2aff      	cmp	r2, #255	; 0xff
2400dca4:	d07b      	beq.n	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dca6:	8206      	strh	r6, [r0, #16]
2400dca8:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400dcac:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
2400dcb0:	2e00      	cmp	r6, #0
2400dcb2:	f43f af41 	beq.w	2400db38 <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dcb6:	2aff      	cmp	r2, #255	; 0xff
2400dcb8:	f43f aea7 	beq.w	2400da0a <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcbc:	f8a0 c012 	strh.w	ip, [r0, #18]
2400dcc0:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400dcc4:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400dcc6:	f1bc 0f00 	cmp.w	ip, #0
2400dcca:	f43f af3b 	beq.w	2400db44 <dir_read.constprop.0+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dcce:	2aff      	cmp	r2, #255	; 0xff
2400dcd0:	d065      	beq.n	2400dd9e <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcd2:	8286      	strh	r6, [r0, #20]
2400dcd4:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400dcd8:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
2400dcdc:	2e00      	cmp	r6, #0
2400dcde:	f43f af38 	beq.w	2400db52 <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dce2:	2aff      	cmp	r2, #255	; 0xff
2400dce4:	f43f ae91 	beq.w	2400da0a <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dce8:	f103 020d 	add.w	r2, r3, #13
2400dcec:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400dcf0:	780b      	ldrb	r3, [r1, #0]
2400dcf2:	0659      	lsls	r1, r3, #25
2400dcf4:	d504      	bpl.n	2400dd00 <dir_read.constprop.0+0x360>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400dcf6:	2aff      	cmp	r2, #255	; 0xff
2400dcf8:	d051      	beq.n	2400dd9e <dir_read.constprop.0+0x3fe>
		lfnbuf[i] = 0;
2400dcfa:	2300      	movs	r3, #0
2400dcfc:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd00:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
2400dd04:	fa5f f888 	uxtb.w	r8, r8
2400dd08:	e681      	b.n	2400da0e <dir_read.constprop.0+0x6e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400dd0a:	780a      	ldrb	r2, [r1, #0]
2400dd0c:	01d3      	lsls	r3, r2, #7
2400dd0e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400dd12:	784a      	ldrb	r2, [r1, #1]
2400dd14:	441a      	add	r2, r3
2400dd16:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd1a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd1e:	788a      	ldrb	r2, [r1, #2]
2400dd20:	fa52 f283 	uxtab	r2, r2, r3
2400dd24:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd28:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd2c:	78ca      	ldrb	r2, [r1, #3]
2400dd2e:	fa52 f283 	uxtab	r2, r2, r3
2400dd32:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd36:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd3a:	790a      	ldrb	r2, [r1, #4]
2400dd3c:	fa52 f283 	uxtab	r2, r2, r3
2400dd40:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd44:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd48:	794a      	ldrb	r2, [r1, #5]
2400dd4a:	fa52 f283 	uxtab	r2, r2, r3
2400dd4e:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd52:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd56:	798a      	ldrb	r2, [r1, #6]
2400dd58:	fa52 f283 	uxtab	r2, r2, r3
2400dd5c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd64:	79ca      	ldrb	r2, [r1, #7]
2400dd66:	fa52 f283 	uxtab	r2, r2, r3
2400dd6a:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd6e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd72:	7a0a      	ldrb	r2, [r1, #8]
2400dd74:	fa52 f283 	uxtab	r2, r2, r3
2400dd78:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd7c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd80:	7a4a      	ldrb	r2, [r1, #9]
2400dd82:	7a89      	ldrb	r1, [r1, #10]
2400dd84:	fa52 f283 	uxtab	r2, r2, r3
2400dd88:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dd8c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dd90:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400dd94:	b2db      	uxtb	r3, r3
2400dd96:	459a      	cmp	sl, r3
2400dd98:	f47f af21 	bne.w	2400dbde <dir_read.constprop.0+0x23e>
2400dd9c:	e64f      	b.n	2400da3e <dir_read.constprop.0+0x9e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd9e:	4690      	mov	r8, r2
2400dda0:	e635      	b.n	2400da0e <dir_read.constprop.0+0x6e>
2400dda2:	bf00      	nop

2400dda4 <sync_fs>:
{
2400dda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400dda6:	78c3      	ldrb	r3, [r0, #3]
{
2400dda8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ddaa:	b95b      	cbnz	r3, 2400ddc4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400ddac:	7823      	ldrb	r3, [r4, #0]
2400ddae:	2b03      	cmp	r3, #3
2400ddb0:	d029      	beq.n	2400de06 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400ddb2:	2200      	movs	r2, #0
2400ddb4:	7860      	ldrb	r0, [r4, #1]
2400ddb6:	4611      	mov	r1, r2
2400ddb8:	f7ff f96e 	bl	2400d098 <disk_ioctl>
			res = FR_DISK_ERR;
2400ddbc:	3800      	subs	r0, #0
2400ddbe:	bf18      	it	ne
2400ddc0:	2001      	movne	r0, #1
}
2400ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400ddc4:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ddc6:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400ddca:	2301      	movs	r3, #1
2400ddcc:	7840      	ldrb	r0, [r0, #1]
2400ddce:	462a      	mov	r2, r5
2400ddd0:	4639      	mov	r1, r7
2400ddd2:	f7ff f953 	bl	2400d07c <disk_write>
2400ddd6:	2800      	cmp	r0, #0
2400ddd8:	d150      	bne.n	2400de7c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ddda:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400dddc:	69e3      	ldr	r3, [r4, #28]
2400ddde:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400dde0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dde2:	429a      	cmp	r2, r3
2400dde4:	d2e2      	bcs.n	2400ddac <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dde6:	78a6      	ldrb	r6, [r4, #2]
2400dde8:	2e01      	cmp	r6, #1
2400ddea:	d801      	bhi.n	2400ddf0 <sync_fs+0x4c>
2400ddec:	e7de      	b.n	2400ddac <sync_fs+0x8>
					wsect += fs->fsize;
2400ddee:	69e3      	ldr	r3, [r4, #28]
2400ddf0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ddf2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ddf4:	2301      	movs	r3, #1
2400ddf6:	4639      	mov	r1, r7
2400ddf8:	462a      	mov	r2, r5
2400ddfa:	7860      	ldrb	r0, [r4, #1]
2400ddfc:	f7ff f93e 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de00:	2e01      	cmp	r6, #1
2400de02:	d1f4      	bne.n	2400ddee <sync_fs+0x4a>
2400de04:	e7d2      	b.n	2400ddac <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400de06:	7925      	ldrb	r5, [r4, #4]
2400de08:	2d01      	cmp	r5, #1
2400de0a:	d1d2      	bne.n	2400ddb2 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400de0c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400de10:	f44f 7200 	mov.w	r2, #512	; 0x200
2400de14:	2100      	movs	r1, #0
2400de16:	4630      	mov	r0, r6
2400de18:	f00a f8c6 	bl	24017fa8 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400de1c:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400de20:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400de22:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400de24:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400de28:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400de2a:	4815      	ldr	r0, [pc, #84]	; (2400de80 <sync_fs+0xdc>)
2400de2c:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
2400de30:	6360      	str	r0, [r4, #52]	; 0x34
2400de32:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2400de36:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400de3a:	3020      	adds	r0, #32
2400de3c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400de40:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400de42:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2400de46:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400de48:	0e12      	lsrs	r2, r2, #24
2400de4a:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400de4e:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
2400de50:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
2400de54:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
2400de56:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400de58:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400de5c:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400de5e:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
2400de62:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400de64:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
2400de66:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400de68:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
2400de6c:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400de70:	7860      	ldrb	r0, [r4, #1]
2400de72:	f7ff f903 	bl	2400d07c <disk_write>
			fs->fsi_flag = 0;
2400de76:	2300      	movs	r3, #0
2400de78:	7123      	strb	r3, [r4, #4]
2400de7a:	e79a      	b.n	2400ddb2 <sync_fs+0xe>
			res = FR_DISK_ERR;
2400de7c:	2001      	movs	r0, #1
}
2400de7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400de80:	41615252 	.word	0x41615252

2400de84 <create_chain>:
{
2400de84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400de88:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
2400de8a:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
2400de8c:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
2400de90:	2900      	cmp	r1, #0
2400de92:	f040 80b4 	bne.w	2400dffe <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400de96:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400de9a:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400de9e:	b9ce      	cbnz	r6, 2400ded4 <create_chain+0x50>
2400dea0:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
2400dea2:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400dea4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400dea6:	429c      	cmp	r4, r3
2400dea8:	d318      	bcc.n	2400dedc <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
2400deaa:	2e01      	cmp	r6, #1
2400deac:	f000 80a3 	beq.w	2400dff6 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400deb0:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
2400deb4:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400deb6:	69ab      	ldr	r3, [r5, #24]
2400deb8:	42a3      	cmp	r3, r4
2400deba:	d907      	bls.n	2400decc <create_chain+0x48>
		switch (fs->fs_type) {
2400debc:	782b      	ldrb	r3, [r5, #0]
2400debe:	2b02      	cmp	r3, #2
2400dec0:	f000 8088 	beq.w	2400dfd4 <create_chain+0x150>
2400dec4:	2b03      	cmp	r3, #3
2400dec6:	d044      	beq.n	2400df52 <create_chain+0xce>
2400dec8:	2b01      	cmp	r3, #1
2400deca:	d00c      	beq.n	2400dee6 <create_chain+0x62>
2400decc:	2401      	movs	r4, #1
}
2400dece:	4620      	mov	r0, r4
2400ded0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400ded4:	42b3      	cmp	r3, r6
2400ded6:	bf98      	it	ls
2400ded8:	2601      	movls	r6, #1
2400deda:	e7e2      	b.n	2400dea2 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dedc:	2c01      	cmp	r4, #1
2400dede:	f8da 5000 	ldr.w	r5, [sl]
2400dee2:	d9f3      	bls.n	2400decc <create_chain+0x48>
2400dee4:	e7e7      	b.n	2400deb6 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2400dee6:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400deea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400deec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400deee:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400def2:	4291      	cmp	r1, r2
2400def4:	d005      	beq.n	2400df02 <create_chain+0x7e>
2400def6:	4628      	mov	r0, r5
2400def8:	f7ff fa60 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400defc:	bb20      	cbnz	r0, 2400df48 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400defe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df00:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400df02:	f107 0b01 	add.w	fp, r7, #1
2400df06:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df0a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400df0e:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df10:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400df12:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df16:	d003      	beq.n	2400df20 <create_chain+0x9c>
2400df18:	4628      	mov	r0, r5
2400df1a:	f7ff fa4f 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df1e:	b998      	cbnz	r0, 2400df48 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400df20:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400df24:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400df26:	445d      	add	r5, fp
2400df28:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
2400df2c:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400df30:	d575      	bpl.n	2400e01e <create_chain+0x19a>
2400df32:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
2400df34:	b30b      	cbz	r3, 2400df7a <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400df36:	2b01      	cmp	r3, #1
2400df38:	d0c8      	beq.n	2400decc <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2400df3a:	42a6      	cmp	r6, r4
2400df3c:	d05b      	beq.n	2400dff6 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400df3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400df42:	e7af      	b.n	2400dea4 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400df44:	2801      	cmp	r0, #1
2400df46:	d1c1      	bne.n	2400decc <create_chain+0x48>
2400df48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400df4c:	4620      	mov	r0, r4
2400df4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400df52:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400df56:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400df5a:	4299      	cmp	r1, r3
2400df5c:	d004      	beq.n	2400df68 <create_chain+0xe4>
2400df5e:	4628      	mov	r0, r5
2400df60:	f7ff fa2c 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400df64:	2800      	cmp	r0, #0
2400df66:	d1ef      	bne.n	2400df48 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400df68:	00a3      	lsls	r3, r4, #2
2400df6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400df6e:	441d      	add	r5, r3
2400df70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400df72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400df76:	2b00      	cmp	r3, #0
2400df78:	d1dd      	bne.n	2400df36 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400df7a:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400df7e:	42a3      	cmp	r3, r4
2400df80:	d9a4      	bls.n	2400decc <create_chain+0x48>
2400df82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400df86:	4621      	mov	r1, r4
2400df88:	4648      	mov	r0, r9
2400df8a:	f7ff fbc9 	bl	2400d720 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400df8e:	b970      	cbnz	r0, 2400dfae <create_chain+0x12a>
2400df90:	f1b8 0f00 	cmp.w	r8, #0
2400df94:	d00b      	beq.n	2400dfae <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400df96:	f1b8 0f01 	cmp.w	r8, #1
2400df9a:	d097      	beq.n	2400decc <create_chain+0x48>
2400df9c:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400dfa0:	4598      	cmp	r8, r3
2400dfa2:	d293      	bcs.n	2400decc <create_chain+0x48>
2400dfa4:	4622      	mov	r2, r4
2400dfa6:	4641      	mov	r1, r8
2400dfa8:	4648      	mov	r0, r9
2400dfaa:	f7ff fbb9 	bl	2400d720 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400dfae:	2800      	cmp	r0, #0
2400dfb0:	d1c8      	bne.n	2400df44 <create_chain+0xc0>
		fs->last_clst = ncl;
2400dfb2:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400dfb6:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
2400dfba:	3b02      	subs	r3, #2
2400dfbc:	429a      	cmp	r2, r3
2400dfbe:	d802      	bhi.n	2400dfc6 <create_chain+0x142>
2400dfc0:	3a01      	subs	r2, #1
2400dfc2:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
2400dfc6:	f899 3004 	ldrb.w	r3, [r9, #4]
2400dfca:	f043 0301 	orr.w	r3, r3, #1
2400dfce:	f889 3004 	strb.w	r3, [r9, #4]
2400dfd2:	e77c      	b.n	2400dece <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dfd4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dfd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dfd8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dfdc:	4299      	cmp	r1, r3
2400dfde:	d004      	beq.n	2400dfea <create_chain+0x166>
2400dfe0:	4628      	mov	r0, r5
2400dfe2:	f7ff f9eb 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dfe6:	2800      	cmp	r0, #0
2400dfe8:	d1ae      	bne.n	2400df48 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400dfea:	0063      	lsls	r3, r4, #1
2400dfec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400dff0:	441d      	add	r5, r3
2400dff2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
2400dff4:	e79e      	b.n	2400df34 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
2400dff6:	2400      	movs	r4, #0
}
2400dff8:	4620      	mov	r0, r4
2400dffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400dffe:	4648      	mov	r0, r9
2400e000:	f7ff fc28 	bl	2400d854 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e004:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400e006:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e008:	f67f af60 	bls.w	2400decc <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400e00c:	1c41      	adds	r1, r0, #1
2400e00e:	d09b      	beq.n	2400df48 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400e010:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400e014:	4283      	cmp	r3, r0
2400e016:	f63f af5a 	bhi.w	2400dece <create_chain+0x4a>
2400e01a:	4646      	mov	r6, r8
2400e01c:	e741      	b.n	2400dea2 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e01e:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400e022:	e787      	b.n	2400df34 <create_chain+0xb0>

2400e024 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e024:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400e028:	d274      	bcs.n	2400e114 <dir_sdi+0xf0>
2400e02a:	06ca      	lsls	r2, r1, #27
{
2400e02c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400e030:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e032:	d151      	bne.n	2400e0d8 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400e034:	6885      	ldr	r5, [r0, #8]
2400e036:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
2400e038:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
2400e03c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e03e:	2d00      	cmp	r5, #0
2400e040:	d04d      	beq.n	2400e0de <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e042:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400e046:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e04a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e04e:	f0c0 808e 	bcc.w	2400e16e <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e052:	2d01      	cmp	r5, #1
2400e054:	d040      	beq.n	2400e0d8 <dir_sdi+0xb4>
2400e056:	4647      	mov	r7, r8
2400e058:	e03b      	b.n	2400e0d2 <dir_sdi+0xae>
		switch (fs->fs_type) {
2400e05a:	783b      	ldrb	r3, [r7, #0]
2400e05c:	2b02      	cmp	r3, #2
2400e05e:	d073      	beq.n	2400e148 <dir_sdi+0x124>
2400e060:	2b03      	cmp	r3, #3
2400e062:	d05f      	beq.n	2400e124 <dir_sdi+0x100>
2400e064:	2b01      	cmp	r3, #1
2400e066:	d137      	bne.n	2400e0d8 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
2400e068:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e070:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e074:	4291      	cmp	r1, r2
2400e076:	d006      	beq.n	2400e086 <dir_sdi+0x62>
2400e078:	4638      	mov	r0, r7
2400e07a:	f7ff f99f 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e07e:	2800      	cmp	r0, #0
2400e080:	d172      	bne.n	2400e168 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e086:	f10a 0b01 	add.w	fp, sl, #1
2400e08a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e08e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e092:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e094:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e096:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e09a:	d004      	beq.n	2400e0a6 <dir_sdi+0x82>
2400e09c:	4638      	mov	r0, r7
2400e09e:	f7ff f98d 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0a2:	2800      	cmp	r0, #0
2400e0a4:	d160      	bne.n	2400e168 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e0a6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
2400e0aa:	445f      	add	r7, fp
2400e0ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400e0b0:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e0b4:	07eb      	lsls	r3, r5, #31
2400e0b6:	d568      	bpl.n	2400e18a <dir_sdi+0x166>
2400e0b8:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400e0bc:	2d01      	cmp	r5, #1
2400e0be:	d90b      	bls.n	2400e0d8 <dir_sdi+0xb4>
2400e0c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e0c4:	42ab      	cmp	r3, r5
2400e0c6:	d907      	bls.n	2400e0d8 <dir_sdi+0xb4>
			ofs -= csz;
2400e0c8:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e0cc:	45a1      	cmp	r9, r4
2400e0ce:	d850      	bhi.n	2400e172 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400e0d0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e0d2:	69bb      	ldr	r3, [r7, #24]
2400e0d4:	42ab      	cmp	r3, r5
2400e0d6:	d8c0      	bhi.n	2400e05a <dir_sdi+0x36>
		switch (fs->fs_type) {
2400e0d8:	2002      	movs	r0, #2
}
2400e0da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e0de:	f898 3000 	ldrb.w	r3, [r8]
2400e0e2:	2b02      	cmp	r3, #2
2400e0e4:	d818      	bhi.n	2400e118 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400e0e6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400e0ea:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400e0ee:	d9f3      	bls.n	2400e0d8 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
2400e0f0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
2400e0f4:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400e0f6:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e0f8:	2a00      	cmp	r2, #0
2400e0fa:	d0ed      	beq.n	2400e0d8 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e0fc:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400e100:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400e104:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
2400e108:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e10a:	4443      	add	r3, r8
2400e10c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
2400e110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
2400e114:	2002      	movs	r0, #2
}
2400e116:	4770      	bx	lr
		clst = fs->dirbase;
2400e118:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400e11c:	2b00      	cmp	r3, #0
2400e11e:	d0e2      	beq.n	2400e0e6 <dir_sdi+0xc2>
2400e120:	461d      	mov	r5, r3
2400e122:	e78e      	b.n	2400e042 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e124:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e128:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e12c:	4299      	cmp	r1, r3
2400e12e:	d003      	beq.n	2400e138 <dir_sdi+0x114>
2400e130:	4638      	mov	r0, r7
2400e132:	f7ff f943 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e136:	b9b8      	cbnz	r0, 2400e168 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e138:	00ad      	lsls	r5, r5, #2
2400e13a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e13e:	442f      	add	r7, r5
2400e140:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e142:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400e146:	e7b9      	b.n	2400e0bc <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e148:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e14c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e150:	4299      	cmp	r1, r3
2400e152:	d003      	beq.n	2400e15c <dir_sdi+0x138>
2400e154:	4638      	mov	r0, r7
2400e156:	f7ff f931 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e15a:	b928      	cbnz	r0, 2400e168 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e15c:	006d      	lsls	r5, r5, #1
2400e15e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
2400e162:	442f      	add	r7, r5
2400e164:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
2400e166:	e7a9      	b.n	2400e0bc <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400e168:	2001      	movs	r0, #1
}
2400e16a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e16e:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e172:	3b02      	subs	r3, #2
	clst -= 2;
2400e174:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e176:	4299      	cmp	r1, r3
2400e178:	d20a      	bcs.n	2400e190 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
2400e17a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
2400e17e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
2400e182:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
2400e186:	61f2      	str	r2, [r6, #28]
2400e188:	e7b5      	b.n	2400e0f6 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e18a:	f3ca 050b 	ubfx	r5, sl, #0, #12
2400e18e:	e795      	b.n	2400e0bc <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
2400e190:	2300      	movs	r3, #0
2400e192:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e196:	e79f      	b.n	2400e0d8 <dir_sdi+0xb4>

2400e198 <dir_find>:
{
2400e198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e19c:	2100      	movs	r1, #0
{
2400e19e:	b085      	sub	sp, #20
2400e1a0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e1a2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e1a6:	f7ff ff3d 	bl	2400e024 <dir_sdi>
	if (res != FR_OK) return res;
2400e1aa:	4607      	mov	r7, r0
2400e1ac:	b9e8      	cbnz	r0, 2400e1ea <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e1ae:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400e1b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400e1b6:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e1b8:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e1ba:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1bc:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400e1c0:	42b5      	cmp	r5, r6
2400e1c2:	d018      	beq.n	2400e1f6 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e1c4:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e1c8:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e1cc:	2b00      	cmp	r3, #0
2400e1ce:	f040 8088 	bne.w	2400e2e2 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e1d2:	2301      	movs	r3, #1
2400e1d4:	4632      	mov	r2, r6
2400e1d6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e1da:	f7fe ff41 	bl	2400d060 <disk_read>
2400e1de:	b140      	cbz	r0, 2400e1f2 <dir_find+0x5a>
			fs->winsect = sector;
2400e1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e1e4:	2701      	movs	r7, #1
			fs->winsect = sector;
2400e1e6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400e1ea:	4638      	mov	r0, r7
2400e1ec:	b005      	add	sp, #20
2400e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e1f2:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400e1f6:	6a26      	ldr	r6, [r4, #32]
2400e1f8:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e1fa:	b34d      	cbz	r5, 2400e250 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e1fc:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e1fe:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e200:	f002 033f 	and.w	r3, r2, #63	; 0x3f
2400e204:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e206:	d004      	beq.n	2400e212 <dir_find+0x7a>
2400e208:	0717      	lsls	r7, r2, #28
2400e20a:	d526      	bpl.n	2400e25a <dir_find+0xc2>
2400e20c:	2b0f      	cmp	r3, #15
2400e20e:	f000 8094 	beq.w	2400e33a <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e216:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400e21a:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e21c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e21e:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e220:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e222:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e226:	d213      	bcs.n	2400e250 <dir_find+0xb8>
2400e228:	b196      	cbz	r6, 2400e250 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e22a:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400e22e:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e230:	b94b      	cbnz	r3, 2400e246 <dir_find+0xae>
		dp->sect++;				/* Next sector */
2400e232:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400e234:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e236:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e238:	2900      	cmp	r1, #0
2400e23a:	d15e      	bne.n	2400e2fa <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e23c:	893a      	ldrh	r2, [r7, #8]
2400e23e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400e242:	f240 8134 	bls.w	2400e4ae <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e246:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e248:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e24a:	443b      	add	r3, r7
2400e24c:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400e24e:	e7b5      	b.n	2400e1bc <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e250:	2704      	movs	r7, #4
}
2400e252:	4638      	mov	r0, r7
2400e254:	b005      	add	sp, #20
2400e256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400e25a:	2b0f      	cmp	r3, #15
2400e25c:	d06d      	beq.n	2400e33a <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e25e:	f1ba 0f00 	cmp.w	sl, #0
2400e262:	f000 80d6 	beq.w	2400e412 <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e266:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
2400e26a:	f01a 0a01 	ands.w	sl, sl, #1
2400e26e:	d1d0      	bne.n	2400e212 <dir_find+0x7a>
	} while (--cnt && r == 0);
2400e270:	7832      	ldrb	r2, [r6, #0]
2400e272:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400e276:	429a      	cmp	r2, r3
2400e278:	d1cb      	bne.n	2400e212 <dir_find+0x7a>
2400e27a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400e27e:	7873      	ldrb	r3, [r6, #1]
2400e280:	429a      	cmp	r2, r3
2400e282:	d1c6      	bne.n	2400e212 <dir_find+0x7a>
2400e284:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400e288:	78b3      	ldrb	r3, [r6, #2]
2400e28a:	429a      	cmp	r2, r3
2400e28c:	d1c1      	bne.n	2400e212 <dir_find+0x7a>
2400e28e:	78f2      	ldrb	r2, [r6, #3]
2400e290:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400e294:	429a      	cmp	r2, r3
2400e296:	d1bc      	bne.n	2400e212 <dir_find+0x7a>
2400e298:	7932      	ldrb	r2, [r6, #4]
2400e29a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400e29e:	429a      	cmp	r2, r3
2400e2a0:	d1b7      	bne.n	2400e212 <dir_find+0x7a>
2400e2a2:	7972      	ldrb	r2, [r6, #5]
2400e2a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400e2a8:	429a      	cmp	r2, r3
2400e2aa:	d1b2      	bne.n	2400e212 <dir_find+0x7a>
2400e2ac:	79b2      	ldrb	r2, [r6, #6]
2400e2ae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400e2b2:	429a      	cmp	r2, r3
2400e2b4:	d1ad      	bne.n	2400e212 <dir_find+0x7a>
2400e2b6:	79f2      	ldrb	r2, [r6, #7]
2400e2b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400e2bc:	429a      	cmp	r2, r3
2400e2be:	d1a8      	bne.n	2400e212 <dir_find+0x7a>
2400e2c0:	7a32      	ldrb	r2, [r6, #8]
2400e2c2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400e2c6:	429a      	cmp	r2, r3
2400e2c8:	d1a3      	bne.n	2400e212 <dir_find+0x7a>
2400e2ca:	7a72      	ldrb	r2, [r6, #9]
2400e2cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400e2d0:	429a      	cmp	r2, r3
2400e2d2:	d19e      	bne.n	2400e212 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e2d4:	7ab2      	ldrb	r2, [r6, #10]
2400e2d6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400e2da:	429a      	cmp	r2, r3
2400e2dc:	d199      	bne.n	2400e212 <dir_find+0x7a>
2400e2de:	4657      	mov	r7, sl
2400e2e0:	e783      	b.n	2400e1ea <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e2e2:	2301      	movs	r3, #1
2400e2e4:	462a      	mov	r2, r5
2400e2e6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e2ea:	9100      	str	r1, [sp, #0]
2400e2ec:	f7fe fec6 	bl	2400d07c <disk_write>
2400e2f0:	9900      	ldr	r1, [sp, #0]
2400e2f2:	2800      	cmp	r0, #0
2400e2f4:	d06d      	beq.n	2400e3d2 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e2f6:	2701      	movs	r7, #1
2400e2f8:	e777      	b.n	2400e1ea <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e2fa:	897a      	ldrh	r2, [r7, #10]
2400e2fc:	3a01      	subs	r2, #1
2400e2fe:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400e302:	d1a0      	bne.n	2400e246 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e304:	4638      	mov	r0, r7
2400e306:	9300      	str	r3, [sp, #0]
2400e308:	f7ff faa4 	bl	2400d854 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e30c:	2801      	cmp	r0, #1
2400e30e:	f240 80d2 	bls.w	2400e4b6 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e312:	1c43      	adds	r3, r0, #1
2400e314:	d0ef      	beq.n	2400e2f6 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e316:	69ba      	ldr	r2, [r7, #24]
2400e318:	4290      	cmp	r0, r2
2400e31a:	f080 80c8 	bcs.w	2400e4ae <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e31e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e320:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e322:	69ba      	ldr	r2, [r7, #24]
2400e324:	9b00      	ldr	r3, [sp, #0]
2400e326:	3a02      	subs	r2, #2
2400e328:	4290      	cmp	r0, r2
2400e32a:	f080 80c6 	bcs.w	2400e4ba <dir_find+0x322>
	return clst * fs->csize + fs->database;
2400e32e:	897a      	ldrh	r2, [r7, #10]
2400e330:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400e332:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400e336:	61e6      	str	r6, [r4, #28]
2400e338:	e785      	b.n	2400e246 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400e33a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400e33e:	0658      	lsls	r0, r3, #25
2400e340:	f53f af6c 	bmi.w	2400e21c <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400e344:	0669      	lsls	r1, r5, #25
2400e346:	d53f      	bpl.n	2400e3c8 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e348:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400e34a:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e34e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e352:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e354:	7b73      	ldrb	r3, [r6, #13]
2400e356:	454b      	cmp	r3, r9
2400e358:	d138      	bne.n	2400e3cc <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400e35a:	8b73      	ldrh	r3, [r6, #26]
2400e35c:	bbb3      	cbnz	r3, 2400e3cc <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e35e:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e360:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e362:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e366:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400e36a:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400e4e4 <dir_find+0x34c>
2400e36e:	9502      	str	r5, [sp, #8]
2400e370:	4615      	mov	r5, r2
2400e372:	3f01      	subs	r7, #1
2400e374:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e378:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e37a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400e37e:	f8cd 8000 	str.w	r8, [sp]
2400e382:	9401      	str	r4, [sp, #4]
2400e384:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e388:	e010      	b.n	2400e3ac <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400e38a:	2ffe      	cmp	r7, #254	; 0xfe
2400e38c:	4620      	mov	r0, r4
2400e38e:	d816      	bhi.n	2400e3be <dir_find+0x226>
2400e390:	f001 fe1e 	bl	2400ffd0 <ff_wtoupper>
2400e394:	4680      	mov	r8, r0
2400e396:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400e39a:	3701      	adds	r7, #1
2400e39c:	f001 fe18 	bl	2400ffd0 <ff_wtoupper>
2400e3a0:	4580      	cmp	r8, r0
2400e3a2:	4621      	mov	r1, r4
2400e3a4:	d10b      	bne.n	2400e3be <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e3a6:	45d3      	cmp	fp, sl
2400e3a8:	f000 8089 	beq.w	2400e4be <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400e3ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
2400e3b0:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400e3b2:	2900      	cmp	r1, #0
2400e3b4:	d1e9      	bne.n	2400e38a <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e3b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e3ba:	429c      	cmp	r4, r3
2400e3bc:	d0f3      	beq.n	2400e3a6 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e3be:	e9dd 8400 	ldrd	r8, r4, [sp]
2400e3c2:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400e3c6:	e729      	b.n	2400e21c <dir_find+0x84>
2400e3c8:	45aa      	cmp	sl, r5
2400e3ca:	d0c3      	beq.n	2400e354 <dir_find+0x1bc>
2400e3cc:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400e3d0:	e724      	b.n	2400e21c <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e3d2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e3d6:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e3da:	1aea      	subs	r2, r5, r3
2400e3dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e3e0:	429a      	cmp	r2, r3
2400e3e2:	f4bf aef6 	bcs.w	2400e1d2 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e3e6:	f898 7002 	ldrb.w	r7, [r8, #2]
2400e3ea:	2f01      	cmp	r7, #1
2400e3ec:	f67f aef1 	bls.w	2400e1d2 <dir_find+0x3a>
2400e3f0:	468b      	mov	fp, r1
2400e3f2:	e001      	b.n	2400e3f8 <dir_find+0x260>
					wsect += fs->fsize;
2400e3f4:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e3f8:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e3fa:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e3fc:	2301      	movs	r3, #1
2400e3fe:	4659      	mov	r1, fp
2400e400:	462a      	mov	r2, r5
2400e402:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e406:	f7fe fe39 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e40a:	2f01      	cmp	r7, #1
2400e40c:	d1f2      	bne.n	2400e3f4 <dir_find+0x25c>
2400e40e:	4659      	mov	r1, fp
2400e410:	e6df      	b.n	2400e1d2 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e412:	7830      	ldrb	r0, [r6, #0]
2400e414:	7872      	ldrb	r2, [r6, #1]
2400e416:	01c1      	lsls	r1, r0, #7
2400e418:	78b3      	ldrb	r3, [r6, #2]
2400e41a:	f896 b003 	ldrb.w	fp, [r6, #3]
2400e41e:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
2400e422:	7937      	ldrb	r7, [r6, #4]
2400e424:	f896 e005 	ldrb.w	lr, [r6, #5]
2400e428:	4411      	add	r1, r2
2400e42a:	f896 c006 	ldrb.w	ip, [r6, #6]
2400e42e:	7a32      	ldrb	r2, [r6, #8]
2400e430:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e434:	7a75      	ldrb	r5, [r6, #9]
2400e436:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e43a:	fa53 f180 	uxtab	r1, r3, r0
2400e43e:	79f3      	ldrb	r3, [r6, #7]
2400e440:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e444:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e448:	7ab1      	ldrb	r1, [r6, #10]
2400e44a:	fa5b fb80 	uxtab	fp, fp, r0
2400e44e:	f3cb 0046 	ubfx	r0, fp, #1, #7
2400e452:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
2400e456:	fa57 f780 	uxtab	r7, r7, r0
2400e45a:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e45e:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e462:	fa5e f080 	uxtab	r0, lr, r0
2400e466:	f3c0 0746 	ubfx	r7, r0, #1, #7
2400e46a:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
2400e46e:	fa5c f780 	uxtab	r7, ip, r0
2400e472:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e476:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e47a:	fa53 f080 	uxtab	r0, r3, r0
2400e47e:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400e482:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
2400e486:	fa52 f383 	uxtab	r3, r2, r3
2400e48a:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e48e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
2400e492:	fa55 f283 	uxtab	r2, r5, r3
2400e496:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e49a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e49e:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e4a2:	b2db      	uxtb	r3, r3
2400e4a4:	4599      	cmp	r9, r3
2400e4a6:	f47f aede 	bne.w	2400e266 <dir_find+0xce>
2400e4aa:	4657      	mov	r7, sl
2400e4ac:	e69d      	b.n	2400e1ea <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
2400e4ae:	2300      	movs	r3, #0
2400e4b0:	2704      	movs	r7, #4
2400e4b2:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400e4b4:	e699      	b.n	2400e1ea <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e4b6:	2702      	movs	r7, #2
2400e4b8:	e697      	b.n	2400e1ea <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e4ba:	461e      	mov	r6, r3
2400e4bc:	e73b      	b.n	2400e336 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e4be:	7833      	ldrb	r3, [r6, #0]
2400e4c0:	f8dd 8000 	ldr.w	r8, [sp]
2400e4c4:	065a      	lsls	r2, r3, #25
2400e4c6:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
2400e4ca:	d500      	bpl.n	2400e4ce <dir_find+0x336>
2400e4cc:	b919      	cbnz	r1, 2400e4d6 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e4ce:	3d01      	subs	r5, #1
2400e4d0:	fa5f fa85 	uxtb.w	sl, r5
2400e4d4:	e6a2      	b.n	2400e21c <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e4d6:	9b03      	ldr	r3, [sp, #12]
2400e4d8:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400e4dc:	2b00      	cmp	r3, #0
2400e4de:	d0f6      	beq.n	2400e4ce <dir_find+0x336>
2400e4e0:	e774      	b.n	2400e3cc <dir_find+0x234>
2400e4e2:	bf00      	nop
2400e4e4:	2401a6fc 	.word	0x2401a6fc

2400e4e8 <follow_path>:
{
2400e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e4ec:	780b      	ldrb	r3, [r1, #0]
{
2400e4ee:	b083      	sub	sp, #12
2400e4f0:	4688      	mov	r8, r1
2400e4f2:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e4f4:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400e4f6:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e4fa:	d103      	bne.n	2400e504 <follow_path+0x1c>
2400e4fc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400e500:	2b2f      	cmp	r3, #47	; 0x2f
2400e502:	d0fb      	beq.n	2400e4fc <follow_path+0x14>
2400e504:	2b5c      	cmp	r3, #92	; 0x5c
2400e506:	d0f9      	beq.n	2400e4fc <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400e508:	2100      	movs	r1, #0
2400e50a:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400e50c:	f898 3000 	ldrb.w	r3, [r8]
2400e510:	2b1f      	cmp	r3, #31
2400e512:	f240 8148 	bls.w	2400e7a6 <follow_path+0x2be>
2400e516:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400e518:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e51a:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400e51c:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400e51e:	d929      	bls.n	2400e574 <follow_path+0x8c>
2400e520:	f1a5 0902 	sub.w	r9, r5, #2
2400e524:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400e526:	2401      	movs	r4, #1
2400e528:	e008      	b.n	2400e53c <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400e52a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400e52e:	1c63      	adds	r3, r4, #1
2400e530:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400e534:	281f      	cmp	r0, #31
2400e536:	f240 80f7 	bls.w	2400e728 <follow_path+0x240>
		w = p[si++];					/* Get a character */
2400e53a:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400e53c:	282f      	cmp	r0, #47	; 0x2f
2400e53e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400e542:	d01d      	beq.n	2400e580 <follow_path+0x98>
2400e544:	285c      	cmp	r0, #92	; 0x5c
2400e546:	d01b      	beq.n	2400e580 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400e548:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400e54c:	d00e      	beq.n	2400e56c <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400e54e:	2101      	movs	r1, #1
2400e550:	f001 fd20 	bl	2400ff94 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400e554:	b150      	cbz	r0, 2400e56c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400e556:	287f      	cmp	r0, #127	; 0x7f
2400e558:	d8e7      	bhi.n	2400e52a <follow_path+0x42>
	while (*str && *str != chr) str++;
2400e55a:	2322      	movs	r3, #34	; 0x22
2400e55c:	4aa5      	ldr	r2, [pc, #660]	; (2400e7f4 <follow_path+0x30c>)
2400e55e:	e003      	b.n	2400e568 <follow_path+0x80>
2400e560:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400e564:	2b00      	cmp	r3, #0
2400e566:	d0e0      	beq.n	2400e52a <follow_path+0x42>
2400e568:	4298      	cmp	r0, r3
2400e56a:	d1f9      	bne.n	2400e560 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e56c:	2006      	movs	r0, #6
}
2400e56e:	b003      	add	sp, #12
2400e570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400e574:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e576:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400e578:	802b      	strh	r3, [r5, #0]
}
2400e57a:	b003      	add	sp, #12
2400e57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e580:	f818 3004 	ldrb.w	r3, [r8, r4]
2400e584:	eb08 0204 	add.w	r2, r8, r4
2400e588:	2b5c      	cmp	r3, #92	; 0x5c
2400e58a:	d002      	beq.n	2400e592 <follow_path+0xaa>
2400e58c:	2b2f      	cmp	r3, #47	; 0x2f
2400e58e:	f040 811f 	bne.w	2400e7d0 <follow_path+0x2e8>
2400e592:	1c63      	adds	r3, r4, #1
2400e594:	4443      	add	r3, r8
2400e596:	4698      	mov	r8, r3
2400e598:	f813 2b01 	ldrb.w	r2, [r3], #1
2400e59c:	2a2f      	cmp	r2, #47	; 0x2f
2400e59e:	d0fa      	beq.n	2400e596 <follow_path+0xae>
2400e5a0:	2a5c      	cmp	r2, #92	; 0x5c
2400e5a2:	d0f8      	beq.n	2400e596 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e5a4:	f1ba 0f00 	cmp.w	sl, #0
2400e5a8:	d0e4      	beq.n	2400e574 <follow_path+0x8c>
2400e5aa:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e5ac:	2400      	movs	r4, #0
2400e5ae:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400e5b2:	e002      	b.n	2400e5ba <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e5b4:	f1ba 0a01 	subs.w	sl, sl, #1
2400e5b8:	d0dc      	beq.n	2400e574 <follow_path+0x8c>
		w = lfn[di - 1];
2400e5ba:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400e5be:	2b20      	cmp	r3, #32
2400e5c0:	d0f8      	beq.n	2400e5b4 <follow_path+0xcc>
2400e5c2:	2b2e      	cmp	r3, #46	; 0x2e
2400e5c4:	d0f6      	beq.n	2400e5b4 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400e5c6:	2320      	movs	r3, #32
2400e5c8:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400e5cc:	2100      	movs	r1, #0
2400e5ce:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400e5d2:	627a      	str	r2, [r7, #36]	; 0x24
2400e5d4:	62ba      	str	r2, [r7, #40]	; 0x28
2400e5d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2400e5da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
2400e5de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e5e2:	8828      	ldrh	r0, [r5, #0]
2400e5e4:	282e      	cmp	r0, #46	; 0x2e
2400e5e6:	d002      	beq.n	2400e5ee <follow_path+0x106>
2400e5e8:	4298      	cmp	r0, r3
2400e5ea:	f040 80e5 	bne.w	2400e7b8 <follow_path+0x2d0>
2400e5ee:	462a      	mov	r2, r5
2400e5f0:	2300      	movs	r3, #0
2400e5f2:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400e5f6:	461c      	mov	r4, r3
2400e5f8:	3301      	adds	r3, #1
2400e5fa:	2820      	cmp	r0, #32
2400e5fc:	d0f9      	beq.n	2400e5f2 <follow_path+0x10a>
2400e5fe:	282e      	cmp	r0, #46	; 0x2e
2400e600:	d0f7      	beq.n	2400e5f2 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
2400e602:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400e604:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400e608:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400e60c:	2a2e      	cmp	r2, #46	; 0x2e
2400e60e:	d002      	beq.n	2400e616 <follow_path+0x12e>
2400e610:	f1ba 0a01 	subs.w	sl, sl, #1
2400e614:	d1f8      	bne.n	2400e608 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2400e616:	b3b0      	cbz	r0, 2400e686 <follow_path+0x19e>
2400e618:	2208      	movs	r2, #8
2400e61a:	4641      	mov	r1, r8
2400e61c:	2300      	movs	r3, #0
2400e61e:	46b8      	mov	r8, r7
2400e620:	462f      	mov	r7, r5
2400e622:	4615      	mov	r5, r2
2400e624:	4699      	mov	r9, r3
2400e626:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400e628:	2820      	cmp	r0, #32
2400e62a:	d003      	beq.n	2400e634 <follow_path+0x14c>
2400e62c:	282e      	cmp	r0, #46	; 0x2e
2400e62e:	d14d      	bne.n	2400e6cc <follow_path+0x1e4>
2400e630:	45a2      	cmp	sl, r4
2400e632:	d04b      	beq.n	2400e6cc <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
2400e634:	f046 0603 	orr.w	r6, r6, #3
2400e638:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400e63a:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400e63e:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400e640:	2800      	cmp	r0, #0
2400e642:	d1f1      	bne.n	2400e628 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e644:	4647      	mov	r7, r8
2400e646:	4690      	mov	r8, r2
2400e648:	462a      	mov	r2, r5
2400e64a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400e64e:	29e5      	cmp	r1, #229	; 0xe5
2400e650:	d102      	bne.n	2400e658 <follow_path+0x170>
2400e652:	2105      	movs	r1, #5
2400e654:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e658:	2a08      	cmp	r2, #8
2400e65a:	f000 8093 	beq.w	2400e784 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e65e:	f003 020c 	and.w	r2, r3, #12
2400e662:	2a0c      	cmp	r2, #12
2400e664:	d065      	beq.n	2400e732 <follow_path+0x24a>
2400e666:	f003 0303 	and.w	r3, r3, #3
2400e66a:	2b03      	cmp	r3, #3
2400e66c:	d061      	beq.n	2400e732 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e66e:	07b1      	lsls	r1, r6, #30
2400e670:	d409      	bmi.n	2400e686 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400e672:	2b01      	cmp	r3, #1
2400e674:	d102      	bne.n	2400e67c <follow_path+0x194>
2400e676:	f046 0610 	orr.w	r6, r6, #16
2400e67a:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400e67c:	2a04      	cmp	r2, #4
2400e67e:	d102      	bne.n	2400e686 <follow_path+0x19e>
2400e680:	f046 0608 	orr.w	r6, r6, #8
2400e684:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400e686:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e688:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e68c:	f7ff fd84 	bl	2400e198 <dir_find>
			ns = dp->fn[NSFLAG];
2400e690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e694:	2800      	cmp	r0, #0
2400e696:	d158      	bne.n	2400e74a <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400e698:	075a      	lsls	r2, r3, #29
2400e69a:	f53f af68 	bmi.w	2400e56e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400e69e:	79bb      	ldrb	r3, [r7, #6]
2400e6a0:	06db      	lsls	r3, r3, #27
2400e6a2:	f140 8097 	bpl.w	2400e7d4 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e6a6:	697a      	ldr	r2, [r7, #20]
2400e6a8:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400e6ac:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e6b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400e6b4:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e6b6:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400e6b8:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400e6ba:	d102      	bne.n	2400e6c2 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400e6bc:	8a9b      	ldrh	r3, [r3, #20]
2400e6be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e6c2:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e6c4:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400e6c6:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400e6ca:	e725      	b.n	2400e518 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400e6cc:	454d      	cmp	r5, r9
2400e6ce:	d91c      	bls.n	2400e70a <follow_path+0x222>
2400e6d0:	ebaa 0104 	sub.w	r1, sl, r4
2400e6d4:	fab1 f181 	clz	r1, r1
2400e6d8:	0949      	lsrs	r1, r1, #5
2400e6da:	b9b1      	cbnz	r1, 2400e70a <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
2400e6dc:	287f      	cmp	r0, #127	; 0x7f
2400e6de:	d83c      	bhi.n	2400e75a <follow_path+0x272>
	while (*str && *str != chr) str++;
2400e6e0:	212b      	movs	r1, #43	; 0x2b
2400e6e2:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400e7fc <follow_path+0x314>
2400e6e6:	e003      	b.n	2400e6f0 <follow_path+0x208>
2400e6e8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400e6ec:	2900      	cmp	r1, #0
2400e6ee:	d052      	beq.n	2400e796 <follow_path+0x2ae>
2400e6f0:	4281      	cmp	r1, r0
2400e6f2:	d1f9      	bne.n	2400e6e8 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e6f4:	f046 0603 	orr.w	r6, r6, #3
2400e6f8:	205f      	movs	r0, #95	; 0x5f
2400e6fa:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400e6fc:	eb08 0109 	add.w	r1, r8, r9
2400e700:	f109 0901 	add.w	r9, r9, #1
2400e704:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400e708:	e797      	b.n	2400e63a <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2400e70a:	2d0b      	cmp	r5, #11
2400e70c:	d064      	beq.n	2400e7d8 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400e70e:	45a2      	cmp	sl, r4
2400e710:	d003      	beq.n	2400e71a <follow_path+0x232>
2400e712:	f046 0603 	orr.w	r6, r6, #3
2400e716:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400e718:	d394      	bcc.n	2400e644 <follow_path+0x15c>
			b <<= 2; continue;
2400e71a:	009b      	lsls	r3, r3, #2
2400e71c:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400e71e:	250b      	movs	r5, #11
2400e720:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400e724:	b2db      	uxtb	r3, r3
2400e726:	e788      	b.n	2400e63a <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2400e728:	46a2      	mov	sl, r4
2400e72a:	4498      	add	r8, r3
2400e72c:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e72e:	2404      	movs	r4, #4
2400e730:	e73d      	b.n	2400e5ae <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e732:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400e736:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e738:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e73a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e73e:	f7ff fd2b 	bl	2400e198 <dir_find>
			ns = dp->fn[NSFLAG];
2400e742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e746:	2800      	cmp	r0, #0
2400e748:	d0a6      	beq.n	2400e698 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400e74a:	2804      	cmp	r0, #4
2400e74c:	f47f af0f 	bne.w	2400e56e <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e750:	f013 0f04 	tst.w	r3, #4
2400e754:	bf08      	it	eq
2400e756:	2005      	moveq	r0, #5
2400e758:	e709      	b.n	2400e56e <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400e75a:	e9cd 3200 	strd	r3, r2, [sp]
2400e75e:	f001 fc19 	bl	2400ff94 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e762:	e9dd 3200 	ldrd	r3, r2, [sp]
2400e766:	b918      	cbnz	r0, 2400e770 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
2400e768:	f046 0602 	orr.w	r6, r6, #2
2400e76c:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e76e:	e7c1      	b.n	2400e6f4 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e770:	4921      	ldr	r1, [pc, #132]	; (2400e7f8 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400e772:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e776:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
2400e778:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e77a:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e77e:	2800      	cmp	r0, #0
2400e780:	d0b8      	beq.n	2400e6f4 <follow_path+0x20c>
2400e782:	e7ad      	b.n	2400e6e0 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
2400e784:	009b      	lsls	r3, r3, #2
2400e786:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e78a:	2a0c      	cmp	r2, #12
2400e78c:	d0d1      	beq.n	2400e732 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e78e:	07b0      	lsls	r0, r6, #30
2400e790:	f57f af74 	bpl.w	2400e67c <follow_path+0x194>
2400e794:	e777      	b.n	2400e686 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
2400e796:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400e79a:	2919      	cmp	r1, #25
2400e79c:	d80f      	bhi.n	2400e7be <follow_path+0x2d6>
					b |= 2;
2400e79e:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400e7a2:	b2c0      	uxtb	r0, r0
2400e7a4:	e7aa      	b.n	2400e6fc <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
2400e7a6:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400e7a8:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400e7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400e7ae:	b003      	add	sp, #12
2400e7b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400e7b4:	f7ff bc36 	b.w	2400e024 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e7b8:	4626      	mov	r6, r4
2400e7ba:	2401      	movs	r4, #1
2400e7bc:	e722      	b.n	2400e604 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
2400e7be:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400e7c2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400e7c4:	bf9c      	itt	ls
2400e7c6:	3820      	subls	r0, #32
2400e7c8:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400e7cc:	b2c0      	uxtb	r0, r0
2400e7ce:	e795      	b.n	2400e6fc <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e7d0:	4690      	mov	r8, r2
2400e7d2:	e6e7      	b.n	2400e5a4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e7d4:	2005      	movs	r0, #5
2400e7d6:	e6ca      	b.n	2400e56e <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400e7d8:	4647      	mov	r7, r8
2400e7da:	4690      	mov	r8, r2
2400e7dc:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e7e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400e7e4:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e7e6:	2ae5      	cmp	r2, #229	; 0xe5
2400e7e8:	f47f af39 	bne.w	2400e65e <follow_path+0x176>
2400e7ec:	2205      	movs	r2, #5
2400e7ee:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e7f2:	e734      	b.n	2400e65e <follow_path+0x176>
2400e7f4:	2401a668 	.word	0x2401a668
2400e7f8:	2401a67c 	.word	0x2401a67c
2400e7fc:	2401a674 	.word	0x2401a674

2400e800 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e800:	2901      	cmp	r1, #1
{
2400e802:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400e806:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400e808:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e80a:	d90f      	bls.n	2400e82c <remove_chain+0x2c>
2400e80c:	69ab      	ldr	r3, [r5, #24]
2400e80e:	428b      	cmp	r3, r1
2400e810:	d90c      	bls.n	2400e82c <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400e812:	4606      	mov	r6, r0
2400e814:	4611      	mov	r1, r2
2400e816:	b962      	cbnz	r2, 2400e832 <remove_chain+0x32>
2400e818:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e81a:	429c      	cmp	r4, r3
2400e81c:	d206      	bcs.n	2400e82c <remove_chain+0x2c>
		switch (fs->fs_type) {
2400e81e:	783b      	ldrb	r3, [r7, #0]
2400e820:	2b02      	cmp	r3, #2
2400e822:	d072      	beq.n	2400e90a <remove_chain+0x10a>
2400e824:	2b03      	cmp	r3, #3
2400e826:	d05d      	beq.n	2400e8e4 <remove_chain+0xe4>
2400e828:	2b01      	cmp	r3, #1
2400e82a:	d010      	beq.n	2400e84e <remove_chain+0x4e>
2400e82c:	2002      	movs	r0, #2
}
2400e82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e832:	4293      	cmp	r3, r2
2400e834:	d9fa      	bls.n	2400e82c <remove_chain+0x2c>
2400e836:	2a01      	cmp	r2, #1
2400e838:	d0f8      	beq.n	2400e82c <remove_chain+0x2c>
2400e83a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400e83e:	4628      	mov	r0, r5
2400e840:	f7fe ff6e 	bl	2400d720 <put_fat.part.0>
		if (res != FR_OK) return res;
2400e844:	2800      	cmp	r0, #0
2400e846:	d1f2      	bne.n	2400e82e <remove_chain+0x2e>
2400e848:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e84a:	69bb      	ldr	r3, [r7, #24]
2400e84c:	e7e5      	b.n	2400e81a <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
2400e84e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e856:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e85a:	4291      	cmp	r1, r2
2400e85c:	d006      	beq.n	2400e86c <remove_chain+0x6c>
2400e85e:	4638      	mov	r0, r7
2400e860:	f7fe fdac 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e864:	2800      	cmp	r0, #0
2400e866:	d161      	bne.n	2400e92c <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e86c:	f108 0901 	add.w	r9, r8, #1
2400e870:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e874:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e878:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e87a:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e87c:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e880:	d004      	beq.n	2400e88c <remove_chain+0x8c>
2400e882:	4638      	mov	r0, r7
2400e884:	f7fe fd9a 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e888:	2800      	cmp	r0, #0
2400e88a:	d14f      	bne.n	2400e92c <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e88c:	f3c9 0908 	ubfx	r9, r9, #0, #9
2400e890:	444f      	add	r7, r9
2400e892:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400e896:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e89a:	07e3      	lsls	r3, r4, #31
2400e89c:	d548      	bpl.n	2400e930 <remove_chain+0x130>
2400e89e:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
2400e8a2:	f1b8 0f00 	cmp.w	r8, #0
2400e8a6:	d046      	beq.n	2400e936 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400e8a8:	f1b8 0f01 	cmp.w	r8, #1
2400e8ac:	d0be      	beq.n	2400e82c <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e8ae:	69ab      	ldr	r3, [r5, #24]
2400e8b0:	42a3      	cmp	r3, r4
2400e8b2:	d9bb      	bls.n	2400e82c <remove_chain+0x2c>
2400e8b4:	2200      	movs	r2, #0
2400e8b6:	4621      	mov	r1, r4
2400e8b8:	4628      	mov	r0, r5
2400e8ba:	f7fe ff31 	bl	2400d720 <put_fat.part.0>
			if (res != FR_OK) return res;
2400e8be:	2800      	cmp	r0, #0
2400e8c0:	d1b5      	bne.n	2400e82e <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400e8c2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400e8c6:	1e91      	subs	r1, r2, #2
2400e8c8:	428b      	cmp	r3, r1
2400e8ca:	d205      	bcs.n	2400e8d8 <remove_chain+0xd8>
			fs->free_clst++;
2400e8cc:	3301      	adds	r3, #1
2400e8ce:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400e8d0:	792b      	ldrb	r3, [r5, #4]
2400e8d2:	f043 0301 	orr.w	r3, r3, #1
2400e8d6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400e8d8:	4542      	cmp	r2, r8
2400e8da:	d92c      	bls.n	2400e936 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e8dc:	6837      	ldr	r7, [r6, #0]
2400e8de:	4644      	mov	r4, r8
2400e8e0:	69bb      	ldr	r3, [r7, #24]
2400e8e2:	e79a      	b.n	2400e81a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e8e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e8e8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e8ec:	4299      	cmp	r1, r3
2400e8ee:	d003      	beq.n	2400e8f8 <remove_chain+0xf8>
2400e8f0:	4638      	mov	r0, r7
2400e8f2:	f7fe fd63 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e8f6:	b9c8      	cbnz	r0, 2400e92c <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e8f8:	00a3      	lsls	r3, r4, #2
2400e8fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e8fe:	441f      	add	r7, r3
2400e900:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e904:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2400e908:	e7cb      	b.n	2400e8a2 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e90a:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e90e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e912:	4299      	cmp	r1, r3
2400e914:	d003      	beq.n	2400e91e <remove_chain+0x11e>
2400e916:	4638      	mov	r0, r7
2400e918:	f7fe fd50 	bl	2400d3bc <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e91c:	b930      	cbnz	r0, 2400e92c <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e91e:	0063      	lsls	r3, r4, #1
2400e920:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e924:	441f      	add	r7, r3
2400e926:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2400e92a:	e7ba      	b.n	2400e8a2 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400e92c:	2001      	movs	r0, #1
2400e92e:	e77e      	b.n	2400e82e <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e930:	f3c8 080b 	ubfx	r8, r8, #0, #12
2400e934:	e7b5      	b.n	2400e8a2 <remove_chain+0xa2>
	return FR_OK;
2400e936:	2000      	movs	r0, #0
2400e938:	e779      	b.n	2400e82e <remove_chain+0x2e>
2400e93a:	bf00      	nop

2400e93c <dir_register>:
{
2400e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e940:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400e944:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e946:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
2400e94a:	930a      	str	r3, [sp, #40]	; 0x28
2400e94c:	f040 8358 	bne.w	2400f000 <dir_register+0x6c4>
	FATFS *fs = dp->obj.fs;
2400e950:	6803      	ldr	r3, [r0, #0]
2400e952:	4682      	mov	sl, r0
2400e954:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400e956:	68db      	ldr	r3, [r3, #12]
2400e958:	881f      	ldrh	r7, [r3, #0]
2400e95a:	b12f      	cbz	r7, 2400e968 <dir_register+0x2c>
2400e95c:	4617      	mov	r7, r2
2400e95e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400e962:	3701      	adds	r7, #1
2400e964:	2a00      	cmp	r2, #0
2400e966:	d1fa      	bne.n	2400e95e <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
2400e968:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
2400e96c:	ab12      	add	r3, sp, #72	; 0x48
2400e96e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
2400e972:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400e976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400e978:	07d8      	lsls	r0, r3, #31
2400e97a:	f100 8097 	bmi.w	2400eaac <dir_register+0x170>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e97e:	f013 0302 	ands.w	r3, r3, #2
2400e982:	f8dd 9004 	ldr.w	r9, [sp, #4]
2400e986:	f000 829f 	beq.w	2400eec8 <dir_register+0x58c>
2400e98a:	4a75      	ldr	r2, [pc, #468]	; (2400eb60 <dir_register+0x224>)
2400e98c:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
2400e990:	2100      	movs	r1, #0
2400e992:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e994:	fba2 2303 	umull	r2, r3, r2, r3
2400e998:	089b      	lsrs	r3, r3, #2
2400e99a:	9302      	str	r3, [sp, #8]
2400e99c:	3301      	adds	r3, #1
2400e99e:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400e9a0:	f7ff fb40 	bl	2400e024 <dir_sdi>
	if (res == FR_OK) {
2400e9a4:	4683      	mov	fp, r0
2400e9a6:	2800      	cmp	r0, #0
2400e9a8:	f040 8299 	bne.w	2400eede <dir_register+0x5a2>
			res = move_window(fs, dp->sect);
2400e9ac:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
2400e9b0:	4680      	mov	r8, r0
						fs->wflag = 1;
2400e9b2:	9006      	str	r0, [sp, #24]
2400e9b4:	e029      	b.n	2400ea0a <dir_register+0xce>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e9b6:	fab3 f283 	clz	r2, r3
2400e9ba:	0952      	lsrs	r2, r2, #5
2400e9bc:	b3a3      	cbz	r3, 2400ea28 <dir_register+0xec>
				n = 0;					/* Not a blank entry. Restart to search */
2400e9be:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e9c0:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e9c4:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e9c8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e9ca:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e9ce:	f080 81ee 	bcs.w	2400edae <dir_register+0x472>
2400e9d2:	2900      	cmp	r1, #0
2400e9d4:	f000 81eb 	beq.w	2400edae <dir_register+0x472>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e9d8:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400e9dc:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e9e0:	b967      	cbnz	r7, 2400e9fc <dir_register+0xc0>
		dp->sect++;				/* Next sector */
2400e9e2:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
2400e9e4:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2400e9e8:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
2400e9ec:	2b00      	cmp	r3, #0
2400e9ee:	f040 82cd 	bne.w	2400ef8c <dir_register+0x650>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e9f2:	8922      	ldrh	r2, [r4, #8]
2400e9f4:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400e9f8:	f240 83bc 	bls.w	2400f174 <dir_register+0x838>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e9fc:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ea00:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
2400ea02:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ea06:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ea0a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
2400ea0e:	428b      	cmp	r3, r1
2400ea10:	d005      	beq.n	2400ea1e <dir_register+0xe2>
2400ea12:	4648      	mov	r0, r9
2400ea14:	f7fe fcd2 	bl	2400d3bc <move_window.part.0>
			if (res != FR_OK) break;
2400ea18:	2800      	cmp	r0, #0
2400ea1a:	f040 83b3 	bne.w	2400f184 <dir_register+0x848>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400ea1e:	f8da 3020 	ldr.w	r3, [sl, #32]
2400ea22:	781b      	ldrb	r3, [r3, #0]
2400ea24:	2be5      	cmp	r3, #229	; 0xe5
2400ea26:	d1c6      	bne.n	2400e9b6 <dir_register+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400ea28:	f108 0801 	add.w	r8, r8, #1
2400ea2c:	9b03      	ldr	r3, [sp, #12]
2400ea2e:	4543      	cmp	r3, r8
2400ea30:	d1c6      	bne.n	2400e9c0 <dir_register+0x84>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400ea32:	9b02      	ldr	r3, [sp, #8]
2400ea34:	f8dd b018 	ldr.w	fp, [sp, #24]
2400ea38:	2b00      	cmp	r3, #0
2400ea3a:	f040 82ec 	bne.w	2400f016 <dir_register+0x6da>
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ea3e:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
2400ea40:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ea44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400ea46:	4299      	cmp	r1, r3
2400ea48:	d005      	beq.n	2400ea56 <dir_register+0x11a>
2400ea4a:	9801      	ldr	r0, [sp, #4]
2400ea4c:	f7fe fcb6 	bl	2400d3bc <move_window.part.0>
		if (res == FR_OK) {
2400ea50:	2800      	cmp	r0, #0
2400ea52:	f040 82db 	bne.w	2400f00c <dir_register+0x6d0>
		*d++ = (BYTE)val;
2400ea56:	2220      	movs	r2, #32
2400ea58:	2100      	movs	r1, #0
2400ea5a:	f8da 0020 	ldr.w	r0, [sl, #32]
2400ea5e:	f009 faa3 	bl	24017fa8 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400ea62:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400ea66:	f10a 0225 	add.w	r2, sl, #37	; 0x25
2400ea6a:	1a9a      	subs	r2, r3, r2
2400ea6c:	2a02      	cmp	r2, #2
2400ea6e:	f240 8486 	bls.w	2400f37e <dir_register+0xa42>
			*d++ = *s++;
2400ea72:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
2400ea76:	601a      	str	r2, [r3, #0]
2400ea78:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
2400ea7c:	605a      	str	r2, [r3, #4]
2400ea7e:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
2400ea82:	4658      	mov	r0, fp
			*d++ = *s++;
2400ea84:	721a      	strb	r2, [r3, #8]
2400ea86:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
2400ea8a:	725a      	strb	r2, [r3, #9]
2400ea8c:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
2400ea90:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400ea92:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400ea94:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
2400ea98:	f8da 1020 	ldr.w	r1, [sl, #32]
2400ea9c:	f003 0318 	and.w	r3, r3, #24
2400eaa0:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
2400eaa2:	9b01      	ldr	r3, [sp, #4]
2400eaa4:	70da      	strb	r2, [r3, #3]
}
2400eaa6:	b013      	add	sp, #76	; 0x4c
2400eaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400eaac:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
2400eaae:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
2400eab2:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2400eab6:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400eab8:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eabc:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
2400eac0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
2400eac4:	9208      	str	r2, [sp, #32]
2400eac6:	9303      	str	r3, [sp, #12]
2400eac8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
2400eacc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
2400ead0:	9305      	str	r3, [sp, #20]
2400ead2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2400ead6:	9207      	str	r2, [sp, #28]
2400ead8:	9304      	str	r3, [sp, #16]
2400eada:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
2400eade:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
2400eae2:	9302      	str	r3, [sp, #8]
2400eae4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eae8:	4693      	mov	fp, r2
2400eaea:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
2400eaec:	9306      	str	r3, [sp, #24]
2400eaee:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
2400eaf2:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
2400eaf6:	4c1b      	ldr	r4, [pc, #108]	; (2400eb64 <dir_register+0x228>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eaf8:	461f      	mov	r7, r3
			*d++ = *s++;
2400eafa:	9109      	str	r1, [sp, #36]	; 0x24
2400eafc:	9b03      	ldr	r3, [sp, #12]
2400eafe:	2100      	movs	r1, #0
2400eb00:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400eb02:	2e05      	cmp	r6, #5
			*d++ = *s++;
2400eb04:	f363 0107 	bfi	r1, r3, #0, #8
2400eb08:	9b05      	ldr	r3, [sp, #20]
2400eb0a:	f363 210f 	bfi	r1, r3, #8, #8
2400eb0e:	9b04      	ldr	r3, [sp, #16]
2400eb10:	f363 4117 	bfi	r1, r3, #16, #8
2400eb14:	9b02      	ldr	r3, [sp, #8]
2400eb16:	f363 611f 	bfi	r1, r3, #24, #8
2400eb1a:	9b06      	ldr	r3, [sp, #24]
2400eb1c:	f363 0207 	bfi	r2, r3, #0, #8
2400eb20:	9b08      	ldr	r3, [sp, #32]
2400eb22:	f367 220f 	bfi	r2, r7, #8, #8
2400eb26:	f363 4217 	bfi	r2, r3, #16, #8
2400eb2a:	9b07      	ldr	r3, [sp, #28]
2400eb2c:	f363 621f 	bfi	r2, r3, #24, #8
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400eb30:	9b01      	ldr	r3, [sp, #4]
2400eb32:	68d8      	ldr	r0, [r3, #12]
			*d++ = *s++;
2400eb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400eb36:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2400eb3a:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
2400eb3e:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
2400eb42:	e9ca 1209 	strd	r1, r2, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400eb46:	f240 8138 	bls.w	2400edba <dir_register+0x47e>
		while (*lfn) {	/* Create a CRC */
2400eb4a:	8802      	ldrh	r2, [r0, #0]
2400eb4c:	2a00      	cmp	r2, #0
2400eb4e:	f000 8134 	beq.w	2400edba <dir_register+0x47e>
				sr = (sr << 1) + (wc & 1);
2400eb52:	f002 0101 	and.w	r1, r2, #1
2400eb56:	4684      	mov	ip, r0
				wc >>= 1;
2400eb58:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400eb5a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb5e:	e00d      	b.n	2400eb7c <dir_register+0x240>
2400eb60:	4ec4ec4f 	.word	0x4ec4ec4f
2400eb64:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
2400eb68:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb6c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400eb70:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400eb74:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb78:	bf18      	it	ne
2400eb7a:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
2400eb7c:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400eb80:	0893      	lsrs	r3, r2, #2
2400eb82:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400eb84:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb88:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400eb8a:	f003 0301 	and.w	r3, r3, #1
2400eb8e:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb92:	bf48      	it	mi
2400eb94:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
2400eb98:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400eb9a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eb9e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400eba2:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400eba6:	bf18      	it	ne
2400eba8:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
2400ebaa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebae:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ebb0:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400ebb4:	bf48      	it	mi
2400ebb6:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400ebb8:	f003 0301 	and.w	r3, r3, #1
2400ebbc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebc0:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ebc2:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400ebc6:	bf48      	it	mi
2400ebc8:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400ebca:	f000 0001 	and.w	r0, r0, #1
2400ebce:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebd2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ebd4:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400ebd8:	bf48      	it	mi
2400ebda:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400ebdc:	f001 0101 	and.w	r1, r1, #1
2400ebe0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebe4:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ebe6:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400ebea:	bf48      	it	mi
2400ebec:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400ebee:	f003 0301 	and.w	r3, r3, #1
2400ebf2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebf6:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ebf8:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400ebfc:	bf48      	it	mi
2400ebfe:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400ec00:	f000 0001 	and.w	r0, r0, #1
2400ec04:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec08:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ec0a:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400ec0e:	bf48      	it	mi
2400ec10:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400ec12:	f001 0101 	and.w	r1, r1, #1
2400ec16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec1a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ec1c:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400ec20:	bf48      	it	mi
2400ec22:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400ec24:	f003 0301 	and.w	r3, r3, #1
2400ec28:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec2c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ec2e:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400ec32:	bf48      	it	mi
2400ec34:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400ec36:	f000 0001 	and.w	r0, r0, #1
2400ec3a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec3e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ec40:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400ec44:	bf48      	it	mi
2400ec46:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400ec48:	f001 0101 	and.w	r1, r1, #1
2400ec4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec50:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ec52:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400ec56:	bf48      	it	mi
2400ec58:	4060      	eormi	r0, r4
				wc >>= 1;
2400ec5a:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
2400ec5c:	f003 0301 	and.w	r3, r3, #1
2400ec60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec64:	0400      	lsls	r0, r0, #16
2400ec66:	bf48      	it	mi
2400ec68:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400ec6a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec6e:	0408      	lsls	r0, r1, #16
2400ec70:	bf48      	it	mi
2400ec72:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400ec74:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec78:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
2400ec7a:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400ec7e:	bf48      	it	mi
2400ec80:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
2400ec84:	2a00      	cmp	r2, #0
2400ec86:	f47f af6f 	bne.w	2400eb68 <dir_register+0x22c>
		c = (BYTE)((seq % 16) + '0');
2400ec8a:	f00e 010f 	and.w	r1, lr, #15
2400ec8e:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ec92:	2a39      	cmp	r2, #57	; 0x39
2400ec94:	bf88      	it	hi
2400ec96:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ec9a:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400ec9e:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400eca2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
2400eca6:	f240 8156 	bls.w	2400ef56 <dir_register+0x61a>
		c = (BYTE)((seq % 16) + '0');
2400ecaa:	f001 000f 	and.w	r0, r1, #15
2400ecae:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ecb2:	2a39      	cmp	r2, #57	; 0x39
2400ecb4:	bf88      	it	hi
2400ecb6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ecba:	290f      	cmp	r1, #15
		seq /= 16;
2400ecbc:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400ecc0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
2400ecc4:	f240 814d 	bls.w	2400ef62 <dir_register+0x626>
		c = (BYTE)((seq % 16) + '0');
2400ecc8:	f000 010f 	and.w	r1, r0, #15
2400eccc:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ecd0:	2a39      	cmp	r2, #57	; 0x39
2400ecd2:	bf88      	it	hi
2400ecd4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ecd8:	280f      	cmp	r0, #15
		seq /= 16;
2400ecda:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400ecde:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
2400ece2:	f240 8144 	bls.w	2400ef6e <dir_register+0x632>
		c = (BYTE)((seq % 16) + '0');
2400ece6:	f001 000f 	and.w	r0, r1, #15
2400ecea:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ecee:	2a39      	cmp	r2, #57	; 0x39
2400ecf0:	bf88      	it	hi
2400ecf2:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ecf6:	290f      	cmp	r1, #15
		seq /= 16;
2400ecf8:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400ecfc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
2400ed00:	f240 816c 	bls.w	2400efdc <dir_register+0x6a0>
		c = (BYTE)((seq % 16) + '0');
2400ed04:	f000 010f 	and.w	r1, r0, #15
2400ed08:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ed0c:	2a39      	cmp	r2, #57	; 0x39
2400ed0e:	bf88      	it	hi
2400ed10:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ed14:	280f      	cmp	r0, #15
		seq /= 16;
2400ed16:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400ed1a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
2400ed1e:	f240 8163 	bls.w	2400efe8 <dir_register+0x6ac>
		c = (BYTE)((seq % 16) + '0');
2400ed22:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400ed26:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400ed2a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ed2e:	2a39      	cmp	r2, #57	; 0x39
2400ed30:	bf88      	it	hi
2400ed32:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ed36:	290f      	cmp	r1, #15
		ns[i--] = c;
2400ed38:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
2400ed3c:	f240 815a 	bls.w	2400eff4 <dir_register+0x6b8>
		c = (BYTE)((seq % 16) + '0');
2400ed40:	f00e 010f 	and.w	r1, lr, #15
2400ed44:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ed48:	2a39      	cmp	r2, #57	; 0x39
2400ed4a:	bf88      	it	hi
2400ed4c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ed50:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400ed54:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
2400ed58:	f240 810f 	bls.w	2400ef7a <dir_register+0x63e>
		ns[i--] = c;
2400ed5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400ed60:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ed64:	2200      	movs	r2, #0
2400ed66:	e002      	b.n	2400ed6e <dir_register+0x432>
2400ed68:	3201      	adds	r2, #1
2400ed6a:	4562      	cmp	r2, ip
2400ed6c:	d003      	beq.n	2400ed76 <dir_register+0x43a>
2400ed6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400ed72:	2b20      	cmp	r3, #32
2400ed74:	d1f8      	bne.n	2400ed68 <dir_register+0x42c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ed76:	f1bc 0f07 	cmp.w	ip, #7
2400ed7a:	d920      	bls.n	2400edbe <dir_register+0x482>
2400ed7c:	1c50      	adds	r0, r2, #1
2400ed7e:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400ed82:	2807      	cmp	r0, #7
2400ed84:	d809      	bhi.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ed86:	1c42      	adds	r2, r0, #1
2400ed88:	2120      	movs	r1, #32
2400ed8a:	2a08      	cmp	r2, #8
2400ed8c:	f1c0 0208 	rsb	r2, r0, #8
2400ed90:	4428      	add	r0, r5
2400ed92:	bf88      	it	hi
2400ed94:	2201      	movhi	r2, #1
2400ed96:	f009 f907 	bl	24017fa8 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ed9a:	4650      	mov	r0, sl
2400ed9c:	f7ff f9fc 	bl	2400e198 <dir_find>
			if (res != FR_OK) break;
2400eda0:	2800      	cmp	r0, #0
2400eda2:	f040 8083 	bne.w	2400eeac <dir_register+0x570>
		for (n = 1; n < 100; n++) {
2400eda6:	3601      	adds	r6, #1
2400eda8:	2e64      	cmp	r6, #100	; 0x64
2400edaa:	f47f aea7 	bne.w	2400eafc <dir_register+0x1c0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400edae:	f04f 0b07 	mov.w	fp, #7
}
2400edb2:	4658      	mov	r0, fp
2400edb4:	b013      	add	sp, #76	; 0x4c
2400edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400edba:	46b6      	mov	lr, r6
2400edbc:	e765      	b.n	2400ec8a <dir_register+0x34e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400edbe:	f10c 0348 	add.w	r3, ip, #72	; 0x48
2400edc2:	f10c 0c01 	add.w	ip, ip, #1
2400edc6:	eb0d 0103 	add.w	r1, sp, r3
2400edca:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400edce:	54a9      	strb	r1, [r5, r2]
2400edd0:	3201      	adds	r2, #1
	} while (j < 8);
2400edd2:	2a07      	cmp	r2, #7
2400edd4:	d8e1      	bhi.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400edd6:	f1bc 0f08 	cmp.w	ip, #8
2400edda:	f000 8085 	beq.w	2400eee8 <dir_register+0x5ac>
2400edde:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
2400ede2:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ede4:	f102 0001 	add.w	r0, r2, #1
2400ede8:	eb0d 0103 	add.w	r1, sp, r3
2400edec:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400edf0:	54a9      	strb	r1, [r5, r2]
2400edf2:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400edf6:	d0d0      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400edf8:	2908      	cmp	r1, #8
2400edfa:	d07d      	beq.n	2400eef8 <dir_register+0x5bc>
2400edfc:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
2400ee00:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee02:	eb0d 0103 	add.w	r1, sp, r3
2400ee06:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee0a:	5429      	strb	r1, [r5, r0]
2400ee0c:	f10c 0102 	add.w	r1, ip, #2
2400ee10:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400ee14:	d0c1      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee16:	2908      	cmp	r1, #8
2400ee18:	d076      	beq.n	2400ef08 <dir_register+0x5cc>
2400ee1a:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
2400ee1e:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee20:	eb0d 0103 	add.w	r1, sp, r3
2400ee24:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee28:	5429      	strb	r1, [r5, r0]
2400ee2a:	f10c 0103 	add.w	r1, ip, #3
2400ee2e:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400ee32:	d0b2      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee34:	2908      	cmp	r1, #8
2400ee36:	d06f      	beq.n	2400ef18 <dir_register+0x5dc>
2400ee38:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
2400ee3c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee3e:	eb0d 0103 	add.w	r1, sp, r3
2400ee42:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee46:	5429      	strb	r1, [r5, r0]
2400ee48:	f10c 0104 	add.w	r1, ip, #4
2400ee4c:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400ee50:	d0a3      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee52:	2908      	cmp	r1, #8
2400ee54:	d068      	beq.n	2400ef28 <dir_register+0x5ec>
2400ee56:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
2400ee5a:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee5c:	eb0d 0103 	add.w	r1, sp, r3
2400ee60:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee64:	5429      	strb	r1, [r5, r0]
2400ee66:	f10c 0105 	add.w	r1, ip, #5
2400ee6a:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400ee6e:	d094      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee70:	2908      	cmp	r1, #8
2400ee72:	d061      	beq.n	2400ef38 <dir_register+0x5fc>
2400ee74:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
2400ee78:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee7a:	eb0d 0103 	add.w	r1, sp, r3
2400ee7e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee82:	5429      	strb	r1, [r5, r0]
2400ee84:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400ee88:	d087      	beq.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee8a:	f1bc 0f01 	cmp.w	ip, #1
2400ee8e:	d15b      	bne.n	2400ef48 <dir_register+0x60c>
2400ee90:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
2400ee94:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee96:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
2400ee98:	f47f af7f 	bne.w	2400ed9a <dir_register+0x45e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ee9c:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee9e:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400eea2:	f7ff f979 	bl	2400e198 <dir_find>
			if (res != FR_OK) break;
2400eea6:	2800      	cmp	r0, #0
2400eea8:	f43f af7d 	beq.w	2400eda6 <dir_register+0x46a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400eeac:	2804      	cmp	r0, #4
2400eeae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
2400eeb0:	4683      	mov	fp, r0
2400eeb2:	f47f af7e 	bne.w	2400edb2 <dir_register+0x476>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400eeb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2400eeb8:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
2400eebc:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400eec0:	f013 0302 	ands.w	r3, r3, #2
2400eec4:	f47f ad61 	bne.w	2400e98a <dir_register+0x4e>
2400eec8:	9302      	str	r3, [sp, #8]
2400eeca:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
2400eecc:	2100      	movs	r1, #0
2400eece:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400eed0:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400eed2:	f7ff f8a7 	bl	2400e024 <dir_sdi>
	if (res == FR_OK) {
2400eed6:	4683      	mov	fp, r0
2400eed8:	2800      	cmp	r0, #0
2400eeda:	f43f ad67 	beq.w	2400e9ac <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400eede:	f1bb 0f04 	cmp.w	fp, #4
2400eee2:	f43f af64 	beq.w	2400edae <dir_register+0x472>
2400eee6:	e764      	b.n	2400edb2 <dir_register+0x476>
	} while (j < 8);
2400eee8:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eeea:	f102 0001 	add.w	r0, r2, #1
2400eeee:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400eef2:	f47f af48 	bne.w	2400ed86 <dir_register+0x44a>
2400eef6:	e750      	b.n	2400ed9a <dir_register+0x45e>
2400eef8:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eefa:	f805 9000 	strb.w	r9, [r5, r0]
2400eefe:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400ef02:	f47f af40 	bne.w	2400ed86 <dir_register+0x44a>
2400ef06:	e748      	b.n	2400ed9a <dir_register+0x45e>
2400ef08:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef0a:	f805 9000 	strb.w	r9, [r5, r0]
2400ef0e:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400ef12:	f47f af38 	bne.w	2400ed86 <dir_register+0x44a>
2400ef16:	e740      	b.n	2400ed9a <dir_register+0x45e>
2400ef18:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef1a:	f805 9000 	strb.w	r9, [r5, r0]
2400ef1e:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400ef22:	f47f af30 	bne.w	2400ed86 <dir_register+0x44a>
2400ef26:	e738      	b.n	2400ed9a <dir_register+0x45e>
2400ef28:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef2a:	f805 9000 	strb.w	r9, [r5, r0]
2400ef2e:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400ef32:	f47f af28 	bne.w	2400ed86 <dir_register+0x44a>
2400ef36:	e730      	b.n	2400ed9a <dir_register+0x45e>
2400ef38:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef3a:	f805 9000 	strb.w	r9, [r5, r0]
2400ef3e:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400ef42:	f47f af20 	bne.w	2400ed86 <dir_register+0x44a>
2400ef46:	e728      	b.n	2400ed9a <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef48:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
2400ef4c:	2a00      	cmp	r2, #0
2400ef4e:	f47f af24 	bne.w	2400ed9a <dir_register+0x45e>
2400ef52:	2007      	movs	r0, #7
2400ef54:	e717      	b.n	2400ed86 <dir_register+0x44a>
	ns[i] = '~';
2400ef56:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ef58:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400ef5c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ef60:	e6fe      	b.n	2400ed60 <dir_register+0x424>
	ns[i] = '~';
2400ef62:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ef64:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400ef68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ef6c:	e6f8      	b.n	2400ed60 <dir_register+0x424>
	ns[i] = '~';
2400ef6e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ef70:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400ef74:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ef78:	e6f2      	b.n	2400ed60 <dir_register+0x424>
	ns[i] = '~';
2400ef7a:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef7c:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400ef80:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef84:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
2400ef88:	4662      	mov	r2, ip
2400ef8a:	e728      	b.n	2400edde <dir_register+0x4a2>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400ef8c:	8962      	ldrh	r2, [r4, #10]
2400ef8e:	3a01      	subs	r2, #1
2400ef90:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400ef94:	f47f ad32 	bne.w	2400e9fc <dir_register+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ef98:	4619      	mov	r1, r3
2400ef9a:	4620      	mov	r0, r4
2400ef9c:	f7fe fc5a 	bl	2400d854 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400efa0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400efa2:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400efa4:	f240 8205 	bls.w	2400f3b2 <dir_register+0xa76>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400efa8:	1c42      	adds	r2, r0, #1
2400efaa:	f000 80dd 	beq.w	2400f168 <dir_register+0x82c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400efae:	69a3      	ldr	r3, [r4, #24]
2400efb0:	4298      	cmp	r0, r3
2400efb2:	f080 80e9 	bcs.w	2400f188 <dir_register+0x84c>
	clst -= 2;
2400efb6:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400efba:	f104 0634 	add.w	r6, r4, #52	; 0x34
2400efbe:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
2400efc0:	f8ca 3018 	str.w	r3, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400efc4:	69a3      	ldr	r3, [r4, #24]
2400efc6:	3b02      	subs	r3, #2
2400efc8:	455b      	cmp	r3, fp
2400efca:	f240 813a 	bls.w	2400f242 <dir_register+0x906>
	return clst * fs->csize + fs->database;
2400efce:	8963      	ldrh	r3, [r4, #10]
2400efd0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400efd2:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
2400efd6:	f8ca 101c 	str.w	r1, [sl, #28]
2400efda:	e511      	b.n	2400ea00 <dir_register+0xc4>
	ns[i] = '~';
2400efdc:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400efde:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400efe2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400efe6:	e6bb      	b.n	2400ed60 <dir_register+0x424>
	ns[i] = '~';
2400efe8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400efea:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400efee:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eff2:	e6b5      	b.n	2400ed60 <dir_register+0x424>
	ns[i] = '~';
2400eff4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eff6:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400effa:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400effe:	e6af      	b.n	2400ed60 <dir_register+0x424>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f000:	f04f 0b06 	mov.w	fp, #6
}
2400f004:	4658      	mov	r0, fp
2400f006:	b013      	add	sp, #76	; 0x4c
2400f008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400f00c:	4683      	mov	fp, r0
2400f00e:	4658      	mov	r0, fp
2400f010:	b013      	add	sp, #76	; 0x4c
2400f012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400f016:	f8da 1014 	ldr.w	r1, [sl, #20]
2400f01a:	4650      	mov	r0, sl
2400f01c:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
2400f020:	f7ff f800 	bl	2400e024 <dir_sdi>
		if (res == FR_OK) {
2400f024:	4605      	mov	r5, r0
2400f026:	2800      	cmp	r0, #0
2400f028:	f040 8109 	bne.w	2400f23e <dir_register+0x902>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f02c:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f030:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f034:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
2400f038:	01cb      	lsls	r3, r1, #7
2400f03a:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
2400f03e:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400f042:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
2400f046:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
2400f04a:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
2400f04e:	1919      	adds	r1, r3, r4
2400f050:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
2400f054:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
2400f058:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f05c:	f3c1 0346 	ubfx	r3, r1, #1, #7
2400f060:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
2400f064:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
2400f068:	fa50 f383 	uxtab	r3, r0, r3
2400f06c:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
2400f070:	f3c3 0146 	ubfx	r1, r3, #1, #7
2400f074:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
2400f078:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
2400f07c:	fa52 f283 	uxtab	r2, r2, r3
2400f080:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f084:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f088:	fa58 f883 	uxtab	r8, r8, r3
2400f08c:	f3c8 0346 	ubfx	r3, r8, #1, #7
2400f090:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
2400f094:	fa5e fe83 	uxtab	lr, lr, r3
2400f098:	f3ce 0346 	ubfx	r3, lr, #1, #7
2400f09c:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
2400f0a0:	fa5c fc83 	uxtab	ip, ip, r3
2400f0a4:	f3cc 0346 	ubfx	r3, ip, #1, #7
2400f0a8:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
2400f0ac:	fa57 f783 	uxtab	r7, r7, r3
2400f0b0:	f3c7 0346 	ubfx	r3, r7, #1, #7
2400f0b4:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
2400f0b8:	fa56 f683 	uxtab	r6, r6, r3
2400f0bc:	f3c6 0346 	ubfx	r3, r6, #1, #7
2400f0c0:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
2400f0c4:	9e01      	ldr	r6, [sp, #4]
2400f0c6:	fa50 f083 	uxtab	r0, r0, r3
2400f0ca:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400f0ce:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
2400f0d2:	fa51 f180 	uxtab	r1, r1, r0
2400f0d6:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
2400f0da:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f0de:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400f0e0:	4299      	cmp	r1, r3
2400f0e2:	d004      	beq.n	2400f0ee <dir_register+0x7b2>
2400f0e4:	4630      	mov	r0, r6
2400f0e6:	f7fe f969 	bl	2400d3bc <move_window.part.0>
				if (res != FR_OK) break;
2400f0ea:	2800      	cmp	r0, #0
2400f0ec:	d18e      	bne.n	2400f00c <dir_register+0x6d0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400f0ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
2400f0f2:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f0f4:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400f0f6:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f0fa:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400f0fe:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f102:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f106:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
2400f10a:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f10c:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
2400f10e:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f110:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400f114:	ea4f 2c17 	mov.w	ip, r7, lsr #8
2400f118:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
2400f11a:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f11e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f122:	2f00      	cmp	r7, #0
2400f124:	f040 808f 	bne.w	2400f246 <dir_register+0x90a>
	*ptr++ = (BYTE)val; val >>= 8;
2400f128:	f8a3 4003 	strh.w	r4, [r3, #3]
2400f12c:	f8a3 4005 	strh.w	r4, [r3, #5]
2400f130:	f8a3 4007 	strh.w	r4, [r3, #7]
2400f134:	f8a3 4009 	strh.w	r4, [r3, #9]
2400f138:	81dc      	strh	r4, [r3, #14]
2400f13a:	821c      	strh	r4, [r3, #16]
2400f13c:	825c      	strh	r4, [r3, #18]
2400f13e:	829c      	strh	r4, [r3, #20]
2400f140:	82dc      	strh	r4, [r3, #22]
2400f142:	831c      	strh	r4, [r3, #24]
2400f144:	839c      	strh	r4, [r3, #28]
2400f146:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f148:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400f14c:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
2400f14e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400f150:	4650      	mov	r0, sl
				fs->wflag = 1;
2400f152:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400f154:	f7fe fbde 	bl	2400d914 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
2400f158:	2800      	cmp	r0, #0
2400f15a:	f47f af57 	bne.w	2400f00c <dir_register+0x6d0>
2400f15e:	9b02      	ldr	r3, [sp, #8]
2400f160:	3b01      	subs	r3, #1
2400f162:	9302      	str	r3, [sp, #8]
2400f164:	d1b9      	bne.n	2400f0da <dir_register+0x79e>
2400f166:	e46a      	b.n	2400ea3e <dir_register+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400f168:	f04f 0b01 	mov.w	fp, #1
}
2400f16c:	4658      	mov	r0, fp
2400f16e:	b013      	add	sp, #76	; 0x4c
2400f170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400f174:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
2400f178:	f8ca 301c 	str.w	r3, [sl, #28]
}
2400f17c:	4658      	mov	r0, fp
2400f17e:	b013      	add	sp, #76	; 0x4c
2400f180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400f184:	4683      	mov	fp, r0
2400f186:	e6aa      	b.n	2400eede <dir_register+0x5a2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400f188:	f8da 1018 	ldr.w	r1, [sl, #24]
2400f18c:	4650      	mov	r0, sl
2400f18e:	f7fe fe79 	bl	2400de84 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400f192:	4603      	mov	r3, r0
2400f194:	9004      	str	r0, [sp, #16]
2400f196:	2800      	cmp	r0, #0
2400f198:	f43f ae09 	beq.w	2400edae <dir_register+0x472>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400f19c:	2801      	cmp	r0, #1
2400f19e:	f000 8108 	beq.w	2400f3b2 <dir_register+0xa76>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400f1a2:	3301      	adds	r3, #1
2400f1a4:	d0e0      	beq.n	2400f168 <dir_register+0x82c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400f1a6:	78e3      	ldrb	r3, [r4, #3]
2400f1a8:	2b00      	cmp	r3, #0
2400f1aa:	f040 810d 	bne.w	2400f3c8 <dir_register+0xa8c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f1ae:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400f1b2:	f44f 7200 	mov.w	r2, #512	; 0x200
2400f1b6:	2100      	movs	r1, #0
2400f1b8:	4630      	mov	r0, r6
2400f1ba:	f008 fef5 	bl	24017fa8 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1be:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
2400f1c0:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1c2:	3b02      	subs	r3, #2
	clst -= 2;
2400f1c4:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1c8:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
2400f1ca:	8963      	ldrh	r3, [r4, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1cc:	f080 80fa 	bcs.w	2400f3c4 <dir_register+0xa88>
	return clst * fs->csize + fs->database;
2400f1d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400f1d2:	fb0b 2203 	mla	r2, fp, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400f1d6:	6322      	str	r2, [r4, #48]	; 0x30
2400f1d8:	2b00      	cmp	r3, #0
2400f1da:	f000 80f0 	beq.w	2400f3be <dir_register+0xa82>
2400f1de:	2300      	movs	r3, #0
2400f1e0:	e9cd 5707 	strd	r5, r7, [sp, #28]
2400f1e4:	4617      	mov	r7, r2
2400f1e6:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
2400f1e8:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f1ec:	463a      	mov	r2, r7
2400f1ee:	4631      	mov	r1, r6
2400f1f0:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
2400f1f2:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f1f4:	2301      	movs	r3, #1
2400f1f6:	f7fd ff41 	bl	2400d07c <disk_write>
2400f1fa:	2800      	cmp	r0, #0
2400f1fc:	d1b4      	bne.n	2400f168 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
2400f200:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f202:	1af8      	subs	r0, r7, r3
2400f204:	69e3      	ldr	r3, [r4, #28]
2400f206:	4298      	cmp	r0, r3
2400f208:	d20e      	bcs.n	2400f228 <dir_register+0x8ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f20a:	78a5      	ldrb	r5, [r4, #2]
2400f20c:	2d01      	cmp	r5, #1
2400f20e:	d801      	bhi.n	2400f214 <dir_register+0x8d8>
2400f210:	e00a      	b.n	2400f228 <dir_register+0x8ec>
					wsect += fs->fsize;
2400f212:	69e3      	ldr	r3, [r4, #28]
2400f214:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f216:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400f218:	2301      	movs	r3, #1
2400f21a:	4631      	mov	r1, r6
2400f21c:	463a      	mov	r2, r7
2400f21e:	7860      	ldrb	r0, [r4, #1]
2400f220:	f7fd ff2c 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f224:	2d01      	cmp	r5, #1
2400f226:	d1f4      	bne.n	2400f212 <dir_register+0x8d6>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400f228:	9a05      	ldr	r2, [sp, #20]
2400f22a:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400f22c:	1c50      	adds	r0, r2, #1
2400f22e:	8965      	ldrh	r5, [r4, #10]
2400f230:	1c5f      	adds	r7, r3, #1
2400f232:	42a8      	cmp	r0, r5
2400f234:	6327      	str	r7, [r4, #48]	; 0x30
2400f236:	f080 80bf 	bcs.w	2400f3b8 <dir_register+0xa7c>
2400f23a:	9005      	str	r0, [sp, #20]
2400f23c:	e7d4      	b.n	2400f1e8 <dir_register+0x8ac>
2400f23e:	4683      	mov	fp, r0
2400f240:	e5b7      	b.n	2400edb2 <dir_register+0x476>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f242:	2100      	movs	r1, #0
2400f244:	e6c7      	b.n	2400efd6 <dir_register+0x69a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f246:	42a7      	cmp	r7, r4
2400f248:	f43f af6e 	beq.w	2400f128 <dir_register+0x7ec>
2400f24c:	3201      	adds	r2, #1
2400f24e:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
2400f252:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400f254:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f258:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
2400f25a:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f25e:	2f00      	cmp	r7, #0
2400f260:	f43f af64 	beq.w	2400f12c <dir_register+0x7f0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f264:	42a7      	cmp	r7, r4
2400f266:	f43f af61 	beq.w	2400f12c <dir_register+0x7f0>
2400f26a:	440a      	add	r2, r1
2400f26c:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
2400f26e:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f272:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
2400f274:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f278:	2f00      	cmp	r7, #0
2400f27a:	f43f af59 	beq.w	2400f130 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f27e:	42a7      	cmp	r7, r4
2400f280:	f43f af56 	beq.w	2400f130 <dir_register+0x7f4>
2400f284:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
2400f286:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f28a:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
2400f28c:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f290:	2f00      	cmp	r7, #0
2400f292:	f43f af4f 	beq.w	2400f134 <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f296:	42a7      	cmp	r7, r4
2400f298:	f43f af4c 	beq.w	2400f134 <dir_register+0x7f8>
2400f29c:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
2400f29e:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f2a2:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
2400f2a4:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f2a8:	2f00      	cmp	r7, #0
2400f2aa:	f43f af45 	beq.w	2400f138 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2ae:	42a7      	cmp	r7, r4
2400f2b0:	f43f af42 	beq.w	2400f138 <dir_register+0x7fc>
2400f2b4:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
2400f2b6:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f2ba:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
2400f2bc:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f2c0:	2f00      	cmp	r7, #0
2400f2c2:	f43f af3a 	beq.w	2400f13a <dir_register+0x7fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2c6:	42a7      	cmp	r7, r4
2400f2c8:	f43f af37 	beq.w	2400f13a <dir_register+0x7fe>
2400f2cc:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
2400f2ce:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f2d2:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
2400f2d4:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f2d8:	2f00      	cmp	r7, #0
2400f2da:	f43f af2f 	beq.w	2400f13c <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2de:	42a7      	cmp	r7, r4
2400f2e0:	f43f af2c 	beq.w	2400f13c <dir_register+0x800>
2400f2e4:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f2e6:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f2ea:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
2400f2ec:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f2f0:	2f00      	cmp	r7, #0
2400f2f2:	f43f af24 	beq.w	2400f13e <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2f6:	42a7      	cmp	r7, r4
2400f2f8:	f43f af21 	beq.w	2400f13e <dir_register+0x802>
2400f2fc:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400f2fe:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f302:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
2400f304:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f308:	2f00      	cmp	r7, #0
2400f30a:	f43f af19 	beq.w	2400f140 <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f30e:	42a7      	cmp	r7, r4
2400f310:	f43f af16 	beq.w	2400f140 <dir_register+0x804>
2400f314:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400f316:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f31a:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
2400f31c:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f320:	2f00      	cmp	r7, #0
2400f322:	f43f af0e 	beq.w	2400f142 <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f326:	42a7      	cmp	r7, r4
2400f328:	f43f af0b 	beq.w	2400f142 <dir_register+0x806>
2400f32c:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
2400f32e:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f332:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
2400f334:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f338:	2f00      	cmp	r7, #0
2400f33a:	f43f af03 	beq.w	2400f144 <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f33e:	42a7      	cmp	r7, r4
2400f340:	f43f af00 	beq.w	2400f144 <dir_register+0x808>
2400f344:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
2400f346:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400f34a:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
2400f34c:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f350:	2f00      	cmp	r7, #0
2400f352:	f43f aef8 	beq.w	2400f146 <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f356:	42a7      	cmp	r7, r4
2400f358:	f43f aef5 	beq.w	2400f146 <dir_register+0x80a>
2400f35c:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f35e:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400f360:	779a      	strb	r2, [r3, #30]
2400f362:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f364:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
2400f366:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400f368:	f64f 72fd 	movw	r2, #65533	; 0xfffd
2400f36c:	4297      	cmp	r7, r2
2400f36e:	f63f aeeb 	bhi.w	2400f148 <dir_register+0x80c>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f372:	4461      	add	r1, ip
2400f374:	8b4a      	ldrh	r2, [r1, #26]
2400f376:	2a00      	cmp	r2, #0
2400f378:	f47f aee8 	bne.w	2400f14c <dir_register+0x810>
2400f37c:	e6e4      	b.n	2400f148 <dir_register+0x80c>
			*d++ = *s++;
2400f37e:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
2400f382:	701a      	strb	r2, [r3, #0]
2400f384:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
2400f388:	705a      	strb	r2, [r3, #1]
2400f38a:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
2400f38e:	709a      	strb	r2, [r3, #2]
2400f390:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400f394:	70da      	strb	r2, [r3, #3]
2400f396:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
2400f39a:	711a      	strb	r2, [r3, #4]
2400f39c:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
2400f3a0:	715a      	strb	r2, [r3, #5]
2400f3a2:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
2400f3a6:	719a      	strb	r2, [r3, #6]
2400f3a8:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
2400f3ac:	71da      	strb	r2, [r3, #7]
2400f3ae:	f7ff bb66 	b.w	2400ea7e <dir_register+0x142>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400f3b2:	f04f 0b02 	mov.w	fp, #2
2400f3b6:	e4fc      	b.n	2400edb2 <dir_register+0x476>
					fs->winsect -= n;							/* Restore window offset */
2400f3b8:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
2400f3bc:	1a9a      	subs	r2, r3, r2
2400f3be:	9b04      	ldr	r3, [sp, #16]
2400f3c0:	6322      	str	r2, [r4, #48]	; 0x30
2400f3c2:	e5fd      	b.n	2400efc0 <dir_register+0x684>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f3c4:	2200      	movs	r2, #0
2400f3c6:	e706      	b.n	2400f1d6 <dir_register+0x89a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f3c8:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
2400f3cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f3ce:	2301      	movs	r3, #1
2400f3d0:	7860      	ldrb	r0, [r4, #1]
2400f3d2:	4631      	mov	r1, r6
2400f3d4:	9205      	str	r2, [sp, #20]
2400f3d6:	f7fd fe51 	bl	2400d07c <disk_write>
2400f3da:	2800      	cmp	r0, #0
2400f3dc:	f47f aec4 	bne.w	2400f168 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400f3e2:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
2400f3e4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f3e6:	1ad1      	subs	r1, r2, r3
2400f3e8:	69e3      	ldr	r3, [r4, #28]
2400f3ea:	4299      	cmp	r1, r3
2400f3ec:	f4bf aee1 	bcs.w	2400f1b2 <dir_register+0x876>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f3f0:	f894 b002 	ldrb.w	fp, [r4, #2]
2400f3f4:	f1bb 0f01 	cmp.w	fp, #1
2400f3f8:	f67f aedb 	bls.w	2400f1b2 <dir_register+0x876>
2400f3fc:	4631      	mov	r1, r6
2400f3fe:	462e      	mov	r6, r5
2400f400:	4625      	mov	r5, r4
2400f402:	4614      	mov	r4, r2
2400f404:	e000      	b.n	2400f408 <dir_register+0xacc>
					wsect += fs->fsize;
2400f406:	69eb      	ldr	r3, [r5, #28]
2400f408:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f40a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400f40e:	2301      	movs	r3, #1
2400f410:	7868      	ldrb	r0, [r5, #1]
2400f412:	4622      	mov	r2, r4
2400f414:	9105      	str	r1, [sp, #20]
2400f416:	f7fd fe31 	bl	2400d07c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f41a:	f1bb 0f01 	cmp.w	fp, #1
2400f41e:	9905      	ldr	r1, [sp, #20]
2400f420:	d1f1      	bne.n	2400f406 <dir_register+0xaca>
2400f422:	462c      	mov	r4, r5
2400f424:	4635      	mov	r5, r6
2400f426:	460e      	mov	r6, r1
2400f428:	e6c3      	b.n	2400f1b2 <dir_register+0x876>
2400f42a:	bf00      	nop

2400f42c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400f42c:	b510      	push	{r4, lr}
2400f42e:	b082      	sub	sp, #8
2400f430:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400f434:	b1a1      	cbz	r1, 2400f460 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f436:	f891 c000 	ldrb.w	ip, [r1]
2400f43a:	f1bc 0f1f 	cmp.w	ip, #31
2400f43e:	d912      	bls.n	2400f466 <f_mount+0x3a>
2400f440:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400f444:	d00f      	beq.n	2400f466 <f_mount+0x3a>
2400f446:	4608      	mov	r0, r1
2400f448:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400f44c:	2b1f      	cmp	r3, #31
2400f44e:	d90c      	bls.n	2400f46a <f_mount+0x3e>
2400f450:	2b3a      	cmp	r3, #58	; 0x3a
2400f452:	d1f9      	bne.n	2400f448 <f_mount+0x1c>
			i = *tp++ - '0';
2400f454:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400f456:	4288      	cmp	r0, r1
2400f458:	d102      	bne.n	2400f460 <f_mount+0x34>
2400f45a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400f45e:	d006      	beq.n	2400f46e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400f460:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400f462:	b002      	add	sp, #8
2400f464:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f466:	4663      	mov	r3, ip
2400f468:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400f46a:	2b3a      	cmp	r3, #58	; 0x3a
2400f46c:	d0f2      	beq.n	2400f454 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400f46e:	4916      	ldr	r1, [pc, #88]	; (2400f4c8 <f_mount+0x9c>)
2400f470:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400f472:	b143      	cbz	r3, 2400f486 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f474:	4815      	ldr	r0, [pc, #84]	; (2400f4cc <f_mount+0xa0>)
2400f476:	6804      	ldr	r4, [r0, #0]
2400f478:	42a3      	cmp	r3, r4
2400f47a:	d01c      	beq.n	2400f4b6 <f_mount+0x8a>
2400f47c:	6904      	ldr	r4, [r0, #16]
2400f47e:	429c      	cmp	r4, r3
2400f480:	d016      	beq.n	2400f4b0 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
2400f482:	2000      	movs	r0, #0
2400f484:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400f486:	9b01      	ldr	r3, [sp, #4]
2400f488:	b173      	cbz	r3, 2400f4a8 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
2400f48a:	2000      	movs	r0, #0
2400f48c:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
2400f48e:	9b01      	ldr	r3, [sp, #4]
2400f490:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f492:	b1b3      	cbz	r3, 2400f4c2 <f_mount+0x96>
2400f494:	3a01      	subs	r2, #1
2400f496:	bf18      	it	ne
2400f498:	2201      	movne	r2, #1
2400f49a:	b992      	cbnz	r2, 2400f4c2 <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400f49c:	a901      	add	r1, sp, #4
2400f49e:	4668      	mov	r0, sp
2400f4a0:	f7fd ffc6 	bl	2400d430 <find_volume>
}
2400f4a4:	b002      	add	sp, #8
2400f4a6:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f4a8:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400f4aa:	600b      	str	r3, [r1, #0]
}
2400f4ac:	b002      	add	sp, #8
2400f4ae:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f4b0:	2400      	movs	r4, #0
2400f4b2:	6104      	str	r4, [r0, #16]
2400f4b4:	e7e5      	b.n	2400f482 <f_mount+0x56>
2400f4b6:	2400      	movs	r4, #0
2400f4b8:	6004      	str	r4, [r0, #0]
2400f4ba:	6904      	ldr	r4, [r0, #16]
2400f4bc:	429c      	cmp	r4, r3
2400f4be:	d1e0      	bne.n	2400f482 <f_mount+0x56>
2400f4c0:	e7f6      	b.n	2400f4b0 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f4c2:	2000      	movs	r0, #0
}
2400f4c4:	b002      	add	sp, #8
2400f4c6:	bd10      	pop	{r4, pc}
2400f4c8:	2001b410 	.word	0x2001b410
2400f4cc:	2001b414 	.word	0x2001b414

2400f4d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400f4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400f4d4:	b092      	sub	sp, #72	; 0x48
2400f4d6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400f4d8:	2800      	cmp	r0, #0
2400f4da:	f000 80a1 	beq.w	2400f620 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400f4de:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400f4e2:	4616      	mov	r6, r2
2400f4e4:	4604      	mov	r4, r0
2400f4e6:	a903      	add	r1, sp, #12
2400f4e8:	a801      	add	r0, sp, #4
2400f4ea:	463a      	mov	r2, r7
2400f4ec:	f7fd ffa0 	bl	2400d430 <find_volume>
	if (res == FR_OK) {
2400f4f0:	4605      	mov	r5, r0
2400f4f2:	b128      	cbz	r0, 2400f500 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400f4f4:	2300      	movs	r3, #0
2400f4f6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400f4f8:	4628      	mov	r0, r5
2400f4fa:	b012      	add	sp, #72	; 0x48
2400f4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400f500:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f502:	a804      	add	r0, sp, #16
2400f504:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400f506:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f508:	f7fe ffee 	bl	2400e4e8 <follow_path>
		if (res == FR_OK) {
2400f50c:	bb00      	cbnz	r0, 2400f550 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400f50e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400f512:	2b00      	cmp	r3, #0
2400f514:	f2c0 808b 	blt.w	2400f62e <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
2400f518:	4ba7      	ldr	r3, [pc, #668]	; (2400f7b8 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f51a:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f51e:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400f520:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f524:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
2400f526:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400f52a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400f52e:	f1b8 0f00 	cmp.w	r8, #0
2400f532:	f000 80fd 	beq.w	2400f730 <f_open+0x260>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f536:	4580      	cmp	r8, r0
2400f538:	d07b      	beq.n	2400f632 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
2400f53a:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f53e:	f1b8 0f00 	cmp.w	r8, #0
2400f542:	f000 808e 	beq.w	2400f662 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f546:	4580      	cmp	r8, r0
2400f548:	f000 8102 	beq.w	2400f750 <f_open+0x280>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f54c:	2512      	movs	r5, #18
2400f54e:	e7d1      	b.n	2400f4f4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f550:	f016 0f1c 	tst.w	r6, #28
2400f554:	d069      	beq.n	2400f62a <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400f556:	2804      	cmp	r0, #4
2400f558:	d167      	bne.n	2400f62a <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400f55a:	4b97      	ldr	r3, [pc, #604]	; (2400f7b8 <f_open+0x2e8>)
2400f55c:	681a      	ldr	r2, [r3, #0]
2400f55e:	b112      	cbz	r2, 2400f566 <f_open+0x96>
2400f560:	691b      	ldr	r3, [r3, #16]
2400f562:	2b00      	cmp	r3, #0
2400f564:	d1f2      	bne.n	2400f54c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f566:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400f568:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f56c:	f7ff f9e6 	bl	2400e93c <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f570:	2800      	cmp	r0, #0
2400f572:	d15a      	bne.n	2400f62a <f_open+0x15a>
				dw = GET_FATTIME();
2400f574:	f7fd fc86 	bl	2400ce84 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400f578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f57a:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f57e:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f582:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f586:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
2400f58a:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
2400f58c:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
2400f58e:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400f592:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
2400f594:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400f596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f598:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f59a:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
2400f59c:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400f5a0:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
2400f5a2:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f5a6:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400f5aa:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f5ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f5ae:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f5b0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f5b2:	d102      	bne.n	2400f5ba <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f5b4:	8a9a      	ldrh	r2, [r3, #20]
2400f5b6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f5ba:	2200      	movs	r2, #0
2400f5bc:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f5be:	7808      	ldrb	r0, [r1, #0]
2400f5c0:	2803      	cmp	r0, #3
2400f5c2:	d100      	bne.n	2400f5c6 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
2400f5c4:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400f5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f5c8:	2200      	movs	r2, #0
2400f5ca:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400f5cc:	2301      	movs	r3, #1
2400f5ce:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
2400f5d0:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
2400f5d2:	b19e      	cbz	r6, 2400f5fc <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
2400f5d4:	4631      	mov	r1, r6
2400f5d6:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400f5d8:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400f5dc:	f7ff f910 	bl	2400e800 <remove_chain>
						if (res == FR_OK) {
2400f5e0:	bb18      	cbnz	r0, 2400f62a <f_open+0x15a>
							res = move_window(fs, dw);
2400f5e2:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2400f5e6:	4590      	cmp	r8, r2
2400f5e8:	f000 80e2 	beq.w	2400f7b0 <f_open+0x2e0>
2400f5ec:	4618      	mov	r0, r3
2400f5ee:	4641      	mov	r1, r8
2400f5f0:	f7fd fee4 	bl	2400d3bc <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f5f4:	3e01      	subs	r6, #1
2400f5f6:	9b03      	ldr	r3, [sp, #12]
2400f5f8:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f5fa:	b9b0      	cbnz	r0, 2400f62a <f_open+0x15a>
				mode |= FA_MODIFIED;
2400f5fc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f600:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f606:	3900      	subs	r1, #0
2400f608:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f60a:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f60c:	bf18      	it	ne
2400f60e:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400f610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f612:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f614:	f7fd fd4c 	bl	2400d0b0 <inc_lock>
2400f618:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400f61a:	bb70      	cbnz	r0, 2400f67a <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f61c:	2502      	movs	r5, #2
2400f61e:	e769      	b.n	2400f4f4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400f620:	2509      	movs	r5, #9
}
2400f622:	4628      	mov	r0, r5
2400f624:	b012      	add	sp, #72	; 0x48
2400f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400f62a:	4605      	mov	r5, r0
2400f62c:	e762      	b.n	2400f4f4 <f_open+0x24>
				res = FR_INVALID_NAME;
2400f62e:	2506      	movs	r5, #6
2400f630:	e760      	b.n	2400f4f4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f632:	6858      	ldr	r0, [r3, #4]
2400f634:	4560      	cmp	r0, ip
2400f636:	f000 8094 	beq.w	2400f762 <f_open+0x292>
		if (Files[i].fs) {	/* Existing entry */
2400f63a:	6918      	ldr	r0, [r3, #16]
2400f63c:	b188      	cbz	r0, 2400f662 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f63e:	4540      	cmp	r0, r8
2400f640:	d184      	bne.n	2400f54c <f_open+0x7c>
2400f642:	6958      	ldr	r0, [r3, #20]
2400f644:	4560      	cmp	r0, ip
2400f646:	d181      	bne.n	2400f54c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f648:	6998      	ldr	r0, [r3, #24]
2400f64a:	4570      	cmp	r0, lr
2400f64c:	f47f af7e 	bne.w	2400f54c <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f650:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f652:	2a00      	cmp	r2, #0
2400f654:	d163      	bne.n	2400f71e <f_open+0x24e>
2400f656:	eb03 1300 	add.w	r3, r3, r0, lsl #4
2400f65a:	899b      	ldrh	r3, [r3, #12]
2400f65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400f660:	d05d      	beq.n	2400f71e <f_open+0x24e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f662:	f016 0f1c 	tst.w	r6, #28
2400f666:	d04a      	beq.n	2400f6fe <f_open+0x22e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400f668:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f66c:	f013 0f11 	tst.w	r3, #17
2400f670:	d15c      	bne.n	2400f72c <f_open+0x25c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400f672:	0773      	lsls	r3, r6, #29
2400f674:	d555      	bpl.n	2400f722 <f_open+0x252>
2400f676:	2508      	movs	r5, #8
2400f678:	e73c      	b.n	2400f4f4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f67a:	f8dd 900c 	ldr.w	r9, [sp, #12]
2400f67e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f680:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
2400f684:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f686:	2a03      	cmp	r2, #3
2400f688:	d102      	bne.n	2400f690 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f68a:	8a9a      	ldrh	r2, [r3, #20]
2400f68c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f690:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400f692:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400f694:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400f698:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400f69c:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
2400f6a0:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400f6a4:	f8c4 800c 	str.w	r8, [r4, #12]
		*d++ = (BYTE)val;
2400f6a8:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400f6aa:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
2400f6ae:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400f6b0:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400f6b2:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
2400f6b4:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2400f6b6:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2400f6b8:	f008 fc76 	bl	24017fa8 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400f6bc:	06b9      	lsls	r1, r7, #26
2400f6be:	f57f af1b 	bpl.w	2400f4f8 <f_open+0x28>
2400f6c2:	f1b8 0f00 	cmp.w	r8, #0
2400f6c6:	f43f af17 	beq.w	2400f4f8 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400f6ca:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f6ce:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f6d2:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f6d6:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f6da:	d804      	bhi.n	2400f6e6 <f_open+0x216>
2400f6dc:	e047      	b.n	2400f76e <f_open+0x29e>
2400f6de:	1c42      	adds	r2, r0, #1
2400f6e0:	d06c      	beq.n	2400f7bc <f_open+0x2ec>
2400f6e2:	4547      	cmp	r7, r8
2400f6e4:	d26a      	bcs.n	2400f7bc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
2400f6e6:	4631      	mov	r1, r6
2400f6e8:	6820      	ldr	r0, [r4, #0]
2400f6ea:	f7fe f8b3 	bl	2400d854 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400f6ee:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f6f0:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
2400f6f4:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400f6f6:	d8f2      	bhi.n	2400f6de <f_open+0x20e>
2400f6f8:	2502      	movs	r5, #2
				fp->clust = clst;
2400f6fa:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f6fc:	e6fa      	b.n	2400f4f4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400f6fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f702:	06d9      	lsls	r1, r3, #27
2400f704:	d422      	bmi.n	2400f74c <f_open+0x27c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400f706:	07b1      	lsls	r1, r6, #30
2400f708:	d501      	bpl.n	2400f70e <f_open+0x23e>
2400f70a:	07d8      	lsls	r0, r3, #31
2400f70c:	d40e      	bmi.n	2400f72c <f_open+0x25c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f70e:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f712:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f714:	2e00      	cmp	r6, #0
2400f716:	f47f af71 	bne.w	2400f5fc <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f71a:	4611      	mov	r1, r2
2400f71c:	e772      	b.n	2400f604 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f71e:	2510      	movs	r5, #16
2400f720:	e6e8      	b.n	2400f4f4 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f722:	0730      	lsls	r0, r6, #28
2400f724:	f53f af26 	bmi.w	2400f574 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f728:	9b03      	ldr	r3, [sp, #12]
2400f72a:	e76b      	b.n	2400f604 <f_open+0x134>
						res = FR_DENIED;
2400f72c:	2507      	movs	r5, #7
2400f72e:	e6e1      	b.n	2400f4f4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400f730:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f734:	f1b8 0f00 	cmp.w	r8, #0
2400f738:	d093      	beq.n	2400f662 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f73a:	4540      	cmp	r0, r8
2400f73c:	d191      	bne.n	2400f662 <f_open+0x192>
2400f73e:	6958      	ldr	r0, [r3, #20]
2400f740:	4560      	cmp	r0, ip
2400f742:	d18e      	bne.n	2400f662 <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
2400f744:	6998      	ldr	r0, [r3, #24]
2400f746:	4586      	cmp	lr, r0
2400f748:	d18b      	bne.n	2400f662 <f_open+0x192>
2400f74a:	e781      	b.n	2400f650 <f_open+0x180>
					res = FR_NO_FILE;
2400f74c:	2504      	movs	r5, #4
2400f74e:	e6d1      	b.n	2400f4f4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f750:	6958      	ldr	r0, [r3, #20]
2400f752:	4560      	cmp	r0, ip
2400f754:	f47f aefa 	bne.w	2400f54c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f758:	6998      	ldr	r0, [r3, #24]
2400f75a:	4586      	cmp	lr, r0
2400f75c:	f47f aef6 	bne.w	2400f54c <f_open+0x7c>
2400f760:	e776      	b.n	2400f650 <f_open+0x180>
2400f762:	6898      	ldr	r0, [r3, #8]
2400f764:	4570      	cmp	r0, lr
2400f766:	f47f af68 	bne.w	2400f63a <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f76a:	4628      	mov	r0, r5
2400f76c:	e771      	b.n	2400f652 <f_open+0x182>
				fp->clust = clst;
2400f76e:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f770:	f3c8 0308 	ubfx	r3, r8, #0, #9
2400f774:	2b00      	cmp	r3, #0
2400f776:	f43f aebf 	beq.w	2400f4f8 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f77a:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
2400f77c:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f77e:	6983      	ldr	r3, [r0, #24]
2400f780:	3b02      	subs	r3, #2
2400f782:	429e      	cmp	r6, r3
2400f784:	f4bf af4a 	bcs.w	2400f61c <f_open+0x14c>
	return clst * fs->csize + fs->database;
2400f788:	8942      	ldrh	r2, [r0, #10]
2400f78a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2400f78c:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f790:	2a00      	cmp	r2, #0
2400f792:	f43f af43 	beq.w	2400f61c <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f796:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f79a:	4651      	mov	r1, sl
2400f79c:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f79e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f7a0:	7840      	ldrb	r0, [r0, #1]
2400f7a2:	f7fd fc5d 	bl	2400d060 <disk_read>
2400f7a6:	2800      	cmp	r0, #0
2400f7a8:	f43f aea6 	beq.w	2400f4f8 <f_open+0x28>
2400f7ac:	2501      	movs	r5, #1
2400f7ae:	e6a1      	b.n	2400f4f4 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f7b0:	3e01      	subs	r6, #1
2400f7b2:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f7b4:	e722      	b.n	2400f5fc <f_open+0x12c>
2400f7b6:	bf00      	nop
2400f7b8:	2001b414 	.word	0x2001b414
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f7bc:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
2400f7be:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f7c0:	bf0c      	ite	eq
2400f7c2:	2301      	moveq	r3, #1
2400f7c4:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f7c6:	d1d3      	bne.n	2400f770 <f_open+0x2a0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f7c8:	461d      	mov	r5, r3
2400f7ca:	e693      	b.n	2400f4f4 <f_open+0x24>

2400f7cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f7d0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400f7d2:	2300      	movs	r3, #0
{
2400f7d4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400f7d6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f7d8:	b150      	cbz	r0, 2400f7f0 <f_read+0x24>
2400f7da:	6803      	ldr	r3, [r0, #0]
2400f7dc:	4604      	mov	r4, r0
2400f7de:	b13b      	cbz	r3, 2400f7f0 <f_read+0x24>
2400f7e0:	4617      	mov	r7, r2
2400f7e2:	781a      	ldrb	r2, [r3, #0]
2400f7e4:	b122      	cbz	r2, 2400f7f0 <f_read+0x24>
2400f7e6:	460d      	mov	r5, r1
2400f7e8:	88da      	ldrh	r2, [r3, #6]
2400f7ea:	8881      	ldrh	r1, [r0, #4]
2400f7ec:	4291      	cmp	r1, r2
2400f7ee:	d005      	beq.n	2400f7fc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f7f0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400f7f4:	4640      	mov	r0, r8
2400f7f6:	b005      	add	sp, #20
2400f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f7fc:	7858      	ldrb	r0, [r3, #1]
2400f7fe:	f7fd fc13 	bl	2400d028 <disk_status>
2400f802:	07c2      	lsls	r2, r0, #31
2400f804:	d4f4      	bmi.n	2400f7f0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f806:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f80a:	f1b8 0f00 	cmp.w	r8, #0
2400f80e:	d1f1      	bne.n	2400f7f4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f810:	7d23      	ldrb	r3, [r4, #20]
2400f812:	f013 0301 	ands.w	r3, r3, #1
2400f816:	9300      	str	r3, [sp, #0]
2400f818:	f000 80ca 	beq.w	2400f9b0 <f_read+0x1e4>
	remain = fp->obj.objsize - fp->fptr;
2400f81c:	69a3      	ldr	r3, [r4, #24]
2400f81e:	68e2      	ldr	r2, [r4, #12]
2400f820:	1ad2      	subs	r2, r2, r3
2400f822:	4297      	cmp	r7, r2
2400f824:	bf28      	it	cs
2400f826:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
2400f828:	2f00      	cmp	r7, #0
2400f82a:	d0e3      	beq.n	2400f7f4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f82c:	f104 022d 	add.w	r2, r4, #45	; 0x2d
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f830:	46a2      	mov	sl, r4
2400f832:	f8cd 8008 	str.w	r8, [sp, #8]
2400f836:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f838:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f83c:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f840:	2a00      	cmp	r2, #0
2400f842:	d140      	bne.n	2400f8c6 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400f844:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400f848:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400f84a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400f84e:	d06d      	beq.n	2400f92c <f_read+0x160>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400f850:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f852:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f856:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f858:	3b02      	subs	r3, #2
2400f85a:	4298      	cmp	r0, r3
2400f85c:	d273      	bcs.n	2400f946 <f_read+0x17a>
	return clst * fs->csize + fs->database;
2400f85e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f862:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f866:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f86a:	2800      	cmp	r0, #0
2400f86c:	d06b      	beq.n	2400f946 <f_read+0x17a>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f86e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400f872:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f876:	d36d      	bcc.n	2400f954 <f_read+0x188>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f878:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400f87c:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f880:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f882:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f886:	bf88      	it	hi
2400f888:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f88c:	465a      	mov	r2, fp
2400f88e:	4629      	mov	r1, r5
2400f890:	4643      	mov	r3, r8
2400f892:	f7fd fbe5 	bl	2400d060 <disk_read>
2400f896:	2800      	cmp	r0, #0
2400f898:	d171      	bne.n	2400f97e <f_read+0x1b2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f89a:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400f89e:	2a00      	cmp	r2, #0
2400f8a0:	f2c0 8096 	blt.w	2400f9d0 <f_read+0x204>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400f8a4:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f8a8:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400f8aa:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f8ac:	440d      	add	r5, r1
2400f8ae:	440b      	add	r3, r1
2400f8b0:	61a3      	str	r3, [r4, #24]
2400f8b2:	6833      	ldr	r3, [r6, #0]
2400f8b4:	440b      	add	r3, r1
2400f8b6:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400f8b8:	f000 80a0 	beq.w	2400f9fc <f_read+0x230>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f8bc:	69a3      	ldr	r3, [r4, #24]
2400f8be:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f8c2:	2a00      	cmp	r2, #0
2400f8c4:	d0be      	beq.n	2400f844 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f8c6:	1c50      	adds	r0, r2, #1
2400f8c8:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400f8cc:	eb0a 0302 	add.w	r3, sl, r2
2400f8d0:	4450      	add	r0, sl
2400f8d2:	42b9      	cmp	r1, r7
2400f8d4:	eba5 0000 	sub.w	r0, r5, r0
2400f8d8:	bf28      	it	cs
2400f8da:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f8dc:	2802      	cmp	r0, #2
2400f8de:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400f8e2:	d95b      	bls.n	2400f99c <f_read+0x1d0>
2400f8e4:	f1bb 0f07 	cmp.w	fp, #7
2400f8e8:	d958      	bls.n	2400f99c <f_read+0x1d0>
2400f8ea:	f021 0e03 	bic.w	lr, r1, #3
2400f8ee:	461a      	mov	r2, r3
2400f8f0:	4628      	mov	r0, r5
2400f8f2:	449e      	add	lr, r3
			*d++ = *s++;
2400f8f4:	f852 cb04 	ldr.w	ip, [r2], #4
2400f8f8:	4572      	cmp	r2, lr
2400f8fa:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400f8fe:	d1f9      	bne.n	2400f8f4 <f_read+0x128>
2400f900:	f021 0203 	bic.w	r2, r1, #3
2400f904:	4291      	cmp	r1, r2
2400f906:	eb05 0002 	add.w	r0, r5, r2
2400f90a:	eb03 0c02 	add.w	ip, r3, r2
2400f90e:	d0cb      	beq.n	2400f8a8 <f_read+0xdc>
			*d++ = *s++;
2400f910:	5c9b      	ldrb	r3, [r3, r2]
2400f912:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400f914:	ebbb 0202 	subs.w	r2, fp, r2
2400f918:	d0c6      	beq.n	2400f8a8 <f_read+0xdc>
			*d++ = *s++;
2400f91a:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400f91e:	2a01      	cmp	r2, #1
			*d++ = *s++;
2400f920:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400f922:	d0c1      	beq.n	2400f8a8 <f_read+0xdc>
			*d++ = *s++;
2400f924:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400f928:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400f92a:	e7bd      	b.n	2400f8a8 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400f92c:	bb7b      	cbnz	r3, 2400f98e <f_read+0x1c2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400f92e:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f930:	2801      	cmp	r0, #1
2400f932:	d908      	bls.n	2400f946 <f_read+0x17a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f934:	1c43      	adds	r3, r0, #1
2400f936:	d022      	beq.n	2400f97e <f_read+0x1b2>
				fp->clust = clst;				/* Update current cluster */
2400f938:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400f93a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f93c:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400f940:	3b02      	subs	r3, #2
2400f942:	4298      	cmp	r0, r3
2400f944:	d38b      	bcc.n	2400f85e <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f946:	2302      	movs	r3, #2
2400f948:	4698      	mov	r8, r3
2400f94a:	7563      	strb	r3, [r4, #21]
}
2400f94c:	4640      	mov	r0, r8
2400f94e:	b005      	add	sp, #20
2400f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400f954:	6a22      	ldr	r2, [r4, #32]
2400f956:	455a      	cmp	r2, fp
2400f958:	d00b      	beq.n	2400f972 <f_read+0x1a6>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400f95a:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f95e:	2b00      	cmp	r3, #0
2400f960:	db29      	blt.n	2400f9b6 <f_read+0x1ea>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400f962:	2301      	movs	r3, #1
2400f964:	465a      	mov	r2, fp
2400f966:	4651      	mov	r1, sl
2400f968:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f96c:	f7fd fb78 	bl	2400d060 <disk_read>
2400f970:	b928      	cbnz	r0, 2400f97e <f_read+0x1b2>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f972:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400f974:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f978:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f97c:	e7a3      	b.n	2400f8c6 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f97e:	f8dd 8000 	ldr.w	r8, [sp]
2400f982:	2301      	movs	r3, #1
}
2400f984:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f986:	7563      	strb	r3, [r4, #21]
}
2400f988:	b005      	add	sp, #20
2400f98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400f98e:	69e1      	ldr	r1, [r4, #28]
2400f990:	6820      	ldr	r0, [r4, #0]
2400f992:	9203      	str	r2, [sp, #12]
2400f994:	f7fd ff5e 	bl	2400d854 <get_fat.isra.0>
2400f998:	9a03      	ldr	r2, [sp, #12]
2400f99a:	e7c9      	b.n	2400f930 <f_read+0x164>
2400f99c:	1e6a      	subs	r2, r5, #1
2400f99e:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400f9a2:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400f9a6:	4563      	cmp	r3, ip
			*d++ = *s++;
2400f9a8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f9ac:	d1f9      	bne.n	2400f9a2 <f_read+0x1d6>
2400f9ae:	e77b      	b.n	2400f8a8 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f9b0:	f04f 0807 	mov.w	r8, #7
2400f9b4:	e71e      	b.n	2400f7f4 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f9b6:	2301      	movs	r3, #1
2400f9b8:	4651      	mov	r1, sl
2400f9ba:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f9be:	f7fd fb5d 	bl	2400d07c <disk_write>
2400f9c2:	2800      	cmp	r0, #0
2400f9c4:	d1db      	bne.n	2400f97e <f_read+0x1b2>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f9c6:	7d23      	ldrb	r3, [r4, #20]
2400f9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f9cc:	7523      	strb	r3, [r4, #20]
2400f9ce:	e7c8      	b.n	2400f962 <f_read+0x196>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f9d0:	6a22      	ldr	r2, [r4, #32]
2400f9d2:	eba2 0b0b 	sub.w	fp, r2, fp
2400f9d6:	45c3      	cmp	fp, r8
2400f9d8:	f4bf af64 	bcs.w	2400f8a4 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400f9dc:	eb05 224b 	add.w	r2, r5, fp, lsl #9
2400f9e0:	9b01      	ldr	r3, [sp, #4]
2400f9e2:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f9e4:	1ad0      	subs	r0, r2, r3
2400f9e6:	2802      	cmp	r0, #2
2400f9e8:	d90b      	bls.n	2400fa02 <f_read+0x236>
2400f9ea:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400f9ee:	f851 3b04 	ldr.w	r3, [r1], #4
2400f9f2:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400f9f6:	4562      	cmp	r2, ip
2400f9f8:	d1f9      	bne.n	2400f9ee <f_read+0x222>
2400f9fa:	e753      	b.n	2400f8a4 <f_read+0xd8>
2400f9fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400fa00:	e6f8      	b.n	2400f7f4 <f_read+0x28>
2400fa02:	3a01      	subs	r2, #1
2400fa04:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400fa08:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400fa0c:	458c      	cmp	ip, r1
			*d++ = *s++;
2400fa0e:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400fa12:	d1f9      	bne.n	2400fa08 <f_read+0x23c>
2400fa14:	e746      	b.n	2400f8a4 <f_read+0xd8>
2400fa16:	bf00      	nop

2400fa18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400fa1c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400fa1e:	2300      	movs	r3, #0
{
2400fa20:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400fa22:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fa24:	b150      	cbz	r0, 2400fa3c <f_write+0x24>
2400fa26:	6803      	ldr	r3, [r0, #0]
2400fa28:	4604      	mov	r4, r0
2400fa2a:	b13b      	cbz	r3, 2400fa3c <f_write+0x24>
2400fa2c:	4616      	mov	r6, r2
2400fa2e:	781a      	ldrb	r2, [r3, #0]
2400fa30:	b122      	cbz	r2, 2400fa3c <f_write+0x24>
2400fa32:	460d      	mov	r5, r1
2400fa34:	88da      	ldrh	r2, [r3, #6]
2400fa36:	8881      	ldrh	r1, [r0, #4]
2400fa38:	4291      	cmp	r1, r2
2400fa3a:	d005      	beq.n	2400fa48 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400fa3c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400fa40:	4640      	mov	r0, r8
2400fa42:	b005      	add	sp, #20
2400fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fa48:	7858      	ldrb	r0, [r3, #1]
2400fa4a:	f7fd faed 	bl	2400d028 <disk_status>
2400fa4e:	07c0      	lsls	r0, r0, #31
2400fa50:	d4f4      	bmi.n	2400fa3c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400fa52:	f894 8015 	ldrb.w	r8, [r4, #21]
2400fa56:	f1b8 0f00 	cmp.w	r8, #0
2400fa5a:	d1f1      	bne.n	2400fa40 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400fa5c:	7d22      	ldrb	r2, [r4, #20]
2400fa5e:	0791      	lsls	r1, r2, #30
2400fa60:	f140 80e4 	bpl.w	2400fc2c <f_write+0x214>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400fa64:	69a3      	ldr	r3, [r4, #24]
2400fa66:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400fa68:	bf28      	it	cs
2400fa6a:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400fa6c:	2e00      	cmp	r6, #0
2400fa6e:	f000 80cf 	beq.w	2400fc10 <f_write+0x1f8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fa72:	f504 720b 	add.w	r2, r4, #556	; 0x22c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fa76:	46a2      	mov	sl, r4
2400fa78:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fa7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fa7e:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fa82:	2a00      	cmp	r2, #0
2400fa84:	d15e      	bne.n	2400fb44 <f_write+0x12c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400fa86:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400fa8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400fa8e:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400fa92:	d110      	bne.n	2400fab6 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400fa94:	2b00      	cmp	r3, #0
2400fa96:	f040 80b3 	bne.w	2400fc00 <f_write+0x1e8>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400fa9a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400fa9c:	2800      	cmp	r0, #0
2400fa9e:	f000 80c8 	beq.w	2400fc32 <f_write+0x21a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400faa2:	2801      	cmp	r0, #1
2400faa4:	f000 8086 	beq.w	2400fbb4 <f_write+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400faa8:	1c43      	adds	r3, r0, #1
2400faaa:	f000 80a2 	beq.w	2400fbf2 <f_write+0x1da>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400faae:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400fab0:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400fab2:	b903      	cbnz	r3, 2400fab6 <f_write+0x9e>
2400fab4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400fab6:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400faba:	2b00      	cmp	r3, #0
2400fabc:	f2c0 808c 	blt.w	2400fbd8 <f_write+0x1c0>
	clst -= 2;
2400fac0:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fac2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400fac6:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fac8:	3b02      	subs	r3, #2
2400faca:	429a      	cmp	r2, r3
2400facc:	d272      	bcs.n	2400fbb4 <f_write+0x19c>
	return clst * fs->csize + fs->database;
2400face:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400fad2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400fad6:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400fada:	2a00      	cmp	r2, #0
2400fadc:	d06a      	beq.n	2400fbb4 <f_write+0x19c>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400fade:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400fae2:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400fae4:	d36d      	bcc.n	2400fbc2 <f_write+0x1aa>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fae6:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400faea:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400faec:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400faee:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400faf2:	bf88      	it	hi
2400faf4:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400faf8:	4629      	mov	r1, r5
2400fafa:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400fafe:	f7fd fabd 	bl	2400d07c <disk_write>
2400fb02:	2800      	cmp	r0, #0
2400fb04:	d175      	bne.n	2400fbf2 <f_write+0x1da>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400fb06:	6a21      	ldr	r1, [r4, #32]
2400fb08:	9a02      	ldr	r2, [sp, #8]
2400fb0a:	9b03      	ldr	r3, [sp, #12]
2400fb0c:	1a8a      	subs	r2, r1, r2
2400fb0e:	429a      	cmp	r2, r3
2400fb10:	f0c0 80a3 	bcc.w	2400fc5a <f_write+0x242>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400fb14:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400fb18:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400fb1c:	69a3      	ldr	r3, [r4, #24]
2400fb1e:	4615      	mov	r5, r2
2400fb20:	68e2      	ldr	r2, [r4, #12]
2400fb22:	4463      	add	r3, ip
2400fb24:	4293      	cmp	r3, r2
2400fb26:	61a3      	str	r3, [r4, #24]
2400fb28:	bf38      	it	cc
2400fb2a:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
2400fb2c:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400fb30:	60e3      	str	r3, [r4, #12]
2400fb32:	683b      	ldr	r3, [r7, #0]
2400fb34:	4463      	add	r3, ip
2400fb36:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400fb38:	d069      	beq.n	2400fc0e <f_write+0x1f6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fb3a:	69a3      	ldr	r3, [r4, #24]
2400fb3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fb40:	2a00      	cmp	r2, #0
2400fb42:	d0a0      	beq.n	2400fa86 <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fb44:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400fb48:	eb0a 0302 	add.w	r3, sl, r2
2400fb4c:	1c6a      	adds	r2, r5, #1
2400fb4e:	45b4      	cmp	ip, r6
2400fb50:	eba3 0202 	sub.w	r2, r3, r2
2400fb54:	bf28      	it	cs
2400fb56:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fb58:	2a02      	cmp	r2, #2
2400fb5a:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400fb5e:	d95b      	bls.n	2400fc18 <f_write+0x200>
2400fb60:	f1bb 0f07 	cmp.w	fp, #7
2400fb64:	d958      	bls.n	2400fc18 <f_write+0x200>
2400fb66:	f02c 0e03 	bic.w	lr, ip, #3
2400fb6a:	462a      	mov	r2, r5
2400fb6c:	4619      	mov	r1, r3
2400fb6e:	44ae      	add	lr, r5
			*d++ = *s++;
2400fb70:	f852 0b04 	ldr.w	r0, [r2], #4
2400fb74:	4572      	cmp	r2, lr
2400fb76:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
2400fb7a:	d1f9      	bne.n	2400fb70 <f_write+0x158>
2400fb7c:	f02c 0103 	bic.w	r1, ip, #3
2400fb80:	458c      	cmp	ip, r1
2400fb82:	eb03 0001 	add.w	r0, r3, r1
2400fb86:	eb05 0201 	add.w	r2, r5, r1
2400fb8a:	d00e      	beq.n	2400fbaa <f_write+0x192>
			*d++ = *s++;
2400fb8c:	f815 e001 	ldrb.w	lr, [r5, r1]
2400fb90:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400fb94:	ebbb 0101 	subs.w	r1, fp, r1
2400fb98:	d005      	beq.n	2400fba6 <f_write+0x18e>
			*d++ = *s++;
2400fb9a:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400fb9c:	2901      	cmp	r1, #1
			*d++ = *s++;
2400fb9e:	7043      	strb	r3, [r0, #1]
2400fba0:	bf1c      	itt	ne
2400fba2:	7893      	ldrbne	r3, [r2, #2]
2400fba4:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400fba6:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400fbaa:	7d23      	ldrb	r3, [r4, #20]
2400fbac:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400fbb0:	7523      	strb	r3, [r4, #20]
2400fbb2:	e7b3      	b.n	2400fb1c <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400fbb4:	2302      	movs	r3, #2
2400fbb6:	4698      	mov	r8, r3
2400fbb8:	7563      	strb	r3, [r4, #21]
}
2400fbba:	4640      	mov	r0, r8
2400fbbc:	b005      	add	sp, #20
2400fbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400fbc2:	6a23      	ldr	r3, [r4, #32]
2400fbc4:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400fbc6:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400fbc8:	d002      	beq.n	2400fbd0 <f_write+0x1b8>
2400fbca:	68e1      	ldr	r1, [r4, #12]
2400fbcc:	428b      	cmp	r3, r1
2400fbce:	d338      	bcc.n	2400fc42 <f_write+0x22a>
			fp->sect = sect;
2400fbd0:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fbd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fbd6:	e7b5      	b.n	2400fb44 <f_write+0x12c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fbd8:	2301      	movs	r3, #1
2400fbda:	6a22      	ldr	r2, [r4, #32]
2400fbdc:	4651      	mov	r1, sl
2400fbde:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fbe2:	f7fd fa4b 	bl	2400d07c <disk_write>
2400fbe6:	b920      	cbnz	r0, 2400fbf2 <f_write+0x1da>
				fp->flag &= (BYTE)~FA_DIRTY;
2400fbe8:	7d23      	ldrb	r3, [r4, #20]
2400fbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400fbee:	7523      	strb	r3, [r4, #20]
2400fbf0:	e766      	b.n	2400fac0 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fbf2:	2301      	movs	r3, #1
2400fbf4:	4698      	mov	r8, r3
2400fbf6:	7563      	strb	r3, [r4, #21]
}
2400fbf8:	4640      	mov	r0, r8
2400fbfa:	b005      	add	sp, #20
2400fbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400fc00:	69e1      	ldr	r1, [r4, #28]
2400fc02:	4620      	mov	r0, r4
2400fc04:	f7fe f93e 	bl	2400de84 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400fc08:	2800      	cmp	r0, #0
2400fc0a:	f47f af4a 	bne.w	2400faa2 <f_write+0x8a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400fc0e:	7d22      	ldrb	r2, [r4, #20]
2400fc10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400fc14:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400fc16:	e713      	b.n	2400fa40 <f_write+0x28>
2400fc18:	3b01      	subs	r3, #1
2400fc1a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400fc1e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400fc22:	4295      	cmp	r5, r2
			*d++ = *s++;
2400fc24:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400fc28:	d1f9      	bne.n	2400fc1e <f_write+0x206>
2400fc2a:	e7be      	b.n	2400fbaa <f_write+0x192>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400fc2c:	f04f 0807 	mov.w	r8, #7
2400fc30:	e706      	b.n	2400fa40 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400fc32:	4659      	mov	r1, fp
2400fc34:	4620      	mov	r0, r4
2400fc36:	f7fe f925 	bl	2400de84 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400fc3a:	2800      	cmp	r0, #0
2400fc3c:	f47f af31 	bne.w	2400faa2 <f_write+0x8a>
2400fc40:	e7e5      	b.n	2400fc0e <f_write+0x1f6>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400fc42:	2301      	movs	r3, #1
2400fc44:	4651      	mov	r1, sl
2400fc46:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fc4a:	9202      	str	r2, [sp, #8]
2400fc4c:	f7fd fa08 	bl	2400d060 <disk_read>
				fp->fptr < fp->obj.objsize &&
2400fc50:	2800      	cmp	r0, #0
2400fc52:	d1ce      	bne.n	2400fbf2 <f_write+0x1da>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fc54:	69a3      	ldr	r3, [r4, #24]
2400fc56:	9a02      	ldr	r2, [sp, #8]
2400fc58:	e7ba      	b.n	2400fbd0 <f_write+0x1b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400fc5a:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400fc5e:	1c42      	adds	r2, r0, #1
2400fc60:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fc62:	ebaa 0202 	sub.w	r2, sl, r2
2400fc66:	2a02      	cmp	r2, #2
2400fc68:	d90d      	bls.n	2400fc86 <f_write+0x26e>
2400fc6a:	4652      	mov	r2, sl
2400fc6c:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400fc70:	f851 0b04 	ldr.w	r0, [r1], #4
2400fc74:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400fc78:	4562      	cmp	r2, ip
2400fc7a:	d1f9      	bne.n	2400fc70 <f_write+0x258>
					fp->flag &= (BYTE)~FA_DIRTY;
2400fc7c:	7d22      	ldrb	r2, [r4, #20]
2400fc7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400fc82:	7522      	strb	r2, [r4, #20]
2400fc84:	e746      	b.n	2400fb14 <f_write+0xfc>
2400fc86:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400fc8a:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400fc8e:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400fc92:	458c      	cmp	ip, r1
			*d++ = *s++;
2400fc94:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400fc98:	d1f9      	bne.n	2400fc8e <f_write+0x276>
2400fc9a:	e7ef      	b.n	2400fc7c <f_write+0x264>

2400fc9c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fc9c:	b158      	cbz	r0, 2400fcb6 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400fc9e:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fca0:	6803      	ldr	r3, [r0, #0]
2400fca2:	4604      	mov	r4, r0
2400fca4:	b12b      	cbz	r3, 2400fcb2 <f_close+0x16>
2400fca6:	781a      	ldrb	r2, [r3, #0]
2400fca8:	b11a      	cbz	r2, 2400fcb2 <f_close+0x16>
2400fcaa:	8881      	ldrh	r1, [r0, #4]
2400fcac:	88da      	ldrh	r2, [r3, #6]
2400fcae:	4291      	cmp	r1, r2
2400fcb0:	d003      	beq.n	2400fcba <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400fcb2:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400fcb4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400fcb6:	2009      	movs	r0, #9
}
2400fcb8:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fcba:	7858      	ldrb	r0, [r3, #1]
2400fcbc:	f7fd f9b4 	bl	2400d028 <disk_status>
2400fcc0:	07c1      	lsls	r1, r0, #31
2400fcc2:	d4f6      	bmi.n	2400fcb2 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400fcc4:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fcc6:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400fcc8:	065a      	lsls	r2, r3, #25
2400fcca:	d53c      	bpl.n	2400fd46 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400fccc:	061b      	lsls	r3, r3, #24
2400fcce:	d45d      	bmi.n	2400fd8c <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
2400fcd0:	f7fd f8d8 	bl	2400ce84 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400fcd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fcd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
2400fcd8:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400fcda:	4299      	cmp	r1, r3
2400fcdc:	d004      	beq.n	2400fce8 <f_close+0x4c>
2400fcde:	4628      	mov	r0, r5
2400fce0:	f7fd fb6c 	bl	2400d3bc <move_window.part.0>
				if (res == FR_OK) {
2400fce4:	2800      	cmp	r0, #0
2400fce6:	d1e5      	bne.n	2400fcb4 <f_close+0x18>
					dir = fp->dir_ptr;
2400fce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400fcea:	7ad3      	ldrb	r3, [r2, #11]
2400fcec:	f043 0320 	orr.w	r3, r3, #32
2400fcf0:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400fcf2:	68a3      	ldr	r3, [r4, #8]
2400fcf4:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400fcf6:	f3c3 2007 	ubfx	r0, r3, #8, #8
2400fcfa:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
2400fcfc:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
2400fcfe:	7809      	ldrb	r1, [r1, #0]
2400fd00:	2903      	cmp	r1, #3
2400fd02:	d103      	bne.n	2400fd0c <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400fd04:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400fd06:	7513      	strb	r3, [r2, #20]
2400fd08:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
2400fd0a:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
2400fd0c:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
2400fd0e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400fd10:	7596      	strb	r6, [r2, #22]
2400fd12:	0a19      	lsrs	r1, r3, #8
2400fd14:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd16:	7751      	strb	r1, [r2, #29]
2400fd18:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400fd1a:	0e1b      	lsrs	r3, r3, #24
2400fd1c:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
2400fd1e:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd20:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400fd22:	75d3      	strb	r3, [r2, #23]
2400fd24:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400fd26:	0e36      	lsrs	r6, r6, #24
2400fd28:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd2a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
2400fd2c:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
2400fd2e:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
2400fd30:	2301      	movs	r3, #1
2400fd32:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400fd34:	f7fe f836 	bl	2400dda4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400fd38:	7d23      	ldrb	r3, [r4, #20]
2400fd3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400fd3e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400fd40:	2800      	cmp	r0, #0
2400fd42:	d1b7      	bne.n	2400fcb4 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fd44:	6825      	ldr	r5, [r4, #0]
2400fd46:	2d00      	cmp	r5, #0
2400fd48:	d0b3      	beq.n	2400fcb2 <f_close+0x16>
2400fd4a:	782b      	ldrb	r3, [r5, #0]
2400fd4c:	2b00      	cmp	r3, #0
2400fd4e:	d0b0      	beq.n	2400fcb2 <f_close+0x16>
2400fd50:	88a2      	ldrh	r2, [r4, #4]
2400fd52:	88eb      	ldrh	r3, [r5, #6]
2400fd54:	429a      	cmp	r2, r3
2400fd56:	d1ac      	bne.n	2400fcb2 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fd58:	7868      	ldrb	r0, [r5, #1]
2400fd5a:	f7fd f965 	bl	2400d028 <disk_status>
2400fd5e:	f010 0001 	ands.w	r0, r0, #1
2400fd62:	d1a6      	bne.n	2400fcb2 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400fd64:	6923      	ldr	r3, [r4, #16]
2400fd66:	3b01      	subs	r3, #1
2400fd68:	2b01      	cmp	r3, #1
2400fd6a:	d81c      	bhi.n	2400fda6 <f_close+0x10a>
		n = Files[i].ctr;
2400fd6c:	4912      	ldr	r1, [pc, #72]	; (2400fdb8 <f_close+0x11c>)
2400fd6e:	011d      	lsls	r5, r3, #4
2400fd70:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400fd74:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400fd76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400fd7a:	d016      	beq.n	2400fdaa <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
2400fd7c:	b1b2      	cbz	r2, 2400fdac <f_close+0x110>
2400fd7e:	3a01      	subs	r2, #1
2400fd80:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400fd82:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400fd84:	b192      	cbz	r2, 2400fdac <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
2400fd86:	2300      	movs	r3, #0
2400fd88:	6023      	str	r3, [r4, #0]
}
2400fd8a:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400fd8c:	2301      	movs	r3, #1
2400fd8e:	6a22      	ldr	r2, [r4, #32]
2400fd90:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400fd94:	7868      	ldrb	r0, [r5, #1]
2400fd96:	f7fd f971 	bl	2400d07c <disk_write>
2400fd9a:	b950      	cbnz	r0, 2400fdb2 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
2400fd9c:	7d23      	ldrb	r3, [r4, #20]
2400fd9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400fda2:	7523      	strb	r3, [r4, #20]
2400fda4:	e794      	b.n	2400fcd0 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400fda6:	2002      	movs	r0, #2
}
2400fda8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400fdaa:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400fdac:	2300      	movs	r3, #0
2400fdae:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
2400fdb0:	e7e9      	b.n	2400fd86 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400fdb2:	2001      	movs	r0, #1
}
2400fdb4:	bd70      	pop	{r4, r5, r6, pc}
2400fdb6:	bf00      	nop
2400fdb8:	2001b414 	.word	0x2001b414

2400fdbc <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fdbe:	b150      	cbz	r0, 2400fdd6 <f_findnext+0x1a>
2400fdc0:	4605      	mov	r5, r0
2400fdc2:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fdc4:	4c39      	ldr	r4, [pc, #228]	; (2400feac <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fdc6:	682b      	ldr	r3, [r5, #0]
2400fdc8:	b12b      	cbz	r3, 2400fdd6 <f_findnext+0x1a>
2400fdca:	781a      	ldrb	r2, [r3, #0]
2400fdcc:	b11a      	cbz	r2, 2400fdd6 <f_findnext+0x1a>
2400fdce:	88a9      	ldrh	r1, [r5, #4]
2400fdd0:	88da      	ldrh	r2, [r3, #6]
2400fdd2:	4291      	cmp	r1, r2
2400fdd4:	d002      	beq.n	2400fddc <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2400fdd6:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400fdd8:	4638      	mov	r0, r7
2400fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fddc:	7858      	ldrb	r0, [r3, #1]
2400fdde:	f7fd f923 	bl	2400d028 <disk_status>
2400fde2:	07c3      	lsls	r3, r0, #31
2400fde4:	d4f7      	bmi.n	2400fdd6 <f_findnext+0x1a>
		if (!fno) {
2400fde6:	2e00      	cmp	r6, #0
2400fde8:	d058      	beq.n	2400fe9c <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
2400fdea:	4628      	mov	r0, r5
2400fdec:	f7fd fdd8 	bl	2400d9a0 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400fdf0:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400fdf4:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400fdf6:	d1ef      	bne.n	2400fdd8 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
2400fdf8:	4631      	mov	r1, r6
2400fdfa:	4628      	mov	r0, r5
2400fdfc:	f7fd fa1e 	bl	2400d23c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400fe00:	4628      	mov	r0, r5
2400fe02:	f7fd fd87 	bl	2400d914 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400fe06:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400fe0a:	d14d      	bne.n	2400fea8 <f_findnext+0xec>
2400fe0c:	7db3      	ldrb	r3, [r6, #22]
2400fe0e:	2b00      	cmp	r3, #0
2400fe10:	d0e2      	beq.n	2400fdd8 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400fe12:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2400fe16:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2400fe1a:	e00f      	b.n	2400fe3c <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fe1c:	3a20      	subs	r2, #32
2400fe1e:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fe20:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fe24:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fe28:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fe2a:	f1be 0f19 	cmp.w	lr, #25
2400fe2e:	d817      	bhi.n	2400fe60 <f_findnext+0xa4>
2400fe30:	3b20      	subs	r3, #32
2400fe32:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400fe34:	4293      	cmp	r3, r2
2400fe36:	d1c6      	bne.n	2400fdc6 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400fe38:	2b00      	cmp	r3, #0
2400fe3a:	d0cd      	beq.n	2400fdd8 <f_findnext+0x1c>
2400fe3c:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400fe3e:	f81c 3b01 	ldrb.w	r3, [ip], #1
2400fe42:	2b3f      	cmp	r3, #63	; 0x3f
2400fe44:	d012      	beq.n	2400fe6c <f_findnext+0xb0>
2400fe46:	2b2a      	cmp	r3, #42	; 0x2a
2400fe48:	d010      	beq.n	2400fe6c <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fe4a:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fe4e:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fe50:	2819      	cmp	r0, #25
2400fe52:	d9e3      	bls.n	2400fe1c <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fe54:	2a7f      	cmp	r2, #127	; 0x7f
2400fe56:	d9e3      	bls.n	2400fe20 <f_findnext+0x64>
2400fe58:	4423      	add	r3, r4
2400fe5a:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400fe5e:	e7df      	b.n	2400fe20 <f_findnext+0x64>
2400fe60:	2b7f      	cmp	r3, #127	; 0x7f
2400fe62:	d9e7      	bls.n	2400fe34 <f_findnext+0x78>
2400fe64:	4420      	add	r0, r4
2400fe66:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2400fe6a:	e7e3      	b.n	2400fe34 <f_findnext+0x78>
2400fe6c:	4694      	mov	ip, r2
				nm = nx = 0;
2400fe6e:	2300      	movs	r3, #0
2400fe70:	f81c eb01 	ldrb.w	lr, [ip], #1
2400fe74:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400fe76:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400fe7a:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2400fe7c:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400fe80:	bf0c      	ite	eq
2400fe82:	3201      	addeq	r2, #1
2400fe84:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400fe86:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400fe8a:	d0f4      	beq.n	2400fe76 <f_findnext+0xba>
2400fe8c:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2400fe90:	d0f1      	beq.n	2400fe76 <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400fe92:	f7fd f95d 	bl	2400d150 <pattern_matching>
2400fe96:	2800      	cmp	r0, #0
2400fe98:	d095      	beq.n	2400fdc6 <f_findnext+0xa>
2400fe9a:	e79d      	b.n	2400fdd8 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fe9c:	4631      	mov	r1, r6
2400fe9e:	4628      	mov	r0, r5
}
2400fea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fea4:	f7fe b8be 	b.w	2400e024 <dir_sdi>
2400fea8:	4607      	mov	r7, r0
2400feaa:	e795      	b.n	2400fdd8 <f_findnext+0x1c>
2400feac:	2401a67c 	.word	0x2401a67c

2400feb0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400feb0:	b570      	push	{r4, r5, r6, lr}
2400feb2:	b082      	sub	sp, #8
2400feb4:	4615      	mov	r5, r2
2400feb6:	4604      	mov	r4, r0
2400feb8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400feba:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2400febc:	2200      	movs	r2, #0
2400febe:	a901      	add	r1, sp, #4
2400fec0:	4668      	mov	r0, sp
2400fec2:	9500      	str	r5, [sp, #0]
2400fec4:	f7fd fab4 	bl	2400d430 <find_volume>
	if (res == FR_OK) {
2400fec8:	b118      	cbz	r0, 2400fed2 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400feca:	2300      	movs	r3, #0
2400fecc:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400fece:	b002      	add	sp, #8
2400fed0:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400fed2:	e9dd 1300 	ldrd	r1, r3, [sp]
2400fed6:	4620      	mov	r0, r4
		obj->fs = fs;
2400fed8:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400feda:	f7fe fb05 	bl	2400e4e8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400fede:	bb08      	cbnz	r0, 2400ff24 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400fee0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
2400fee4:	2b00      	cmp	r3, #0
2400fee6:	db25      	blt.n	2400ff34 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400fee8:	79a3      	ldrb	r3, [r4, #6]
2400feea:	06db      	lsls	r3, r3, #27
2400feec:	d520      	bpl.n	2400ff30 <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400feee:	9b01      	ldr	r3, [sp, #4]
2400fef0:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2400fef2:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
2400fef4:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
2400fef6:	2803      	cmp	r0, #3
2400fef8:	d102      	bne.n	2400ff00 <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400fefa:	8a89      	ldrh	r1, [r1, #20]
2400fefc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400ff00:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
2400ff02:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400ff04:	2100      	movs	r1, #0
2400ff06:	4620      	mov	r0, r4
				obj->id = fs->id;
2400ff08:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400ff0a:	f7fe f88b 	bl	2400e024 <dir_sdi>
				if (res == FR_OK) {
2400ff0e:	b948      	cbnz	r0, 2400ff24 <f_findfirst+0x74>
					if (obj->sclust) {
2400ff10:	68a3      	ldr	r3, [r4, #8]
2400ff12:	b98b      	cbnz	r3, 2400ff38 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400ff14:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2400ff16:	4631      	mov	r1, r6
2400ff18:	4620      	mov	r0, r4
}
2400ff1a:	b002      	add	sp, #8
2400ff1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2400ff20:	f7ff bf4c 	b.w	2400fdbc <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400ff24:	2804      	cmp	r0, #4
2400ff26:	d1d0      	bne.n	2400feca <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400ff28:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400ff2a:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400ff2c:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2400ff2e:	e7ce      	b.n	2400fece <f_findfirst+0x1e>
					res = FR_NO_PATH;
2400ff30:	2005      	movs	r0, #5
2400ff32:	e7ca      	b.n	2400feca <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400ff34:	9b01      	ldr	r3, [sp, #4]
2400ff36:	e7e4      	b.n	2400ff02 <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400ff38:	4601      	mov	r1, r0
2400ff3a:	4620      	mov	r0, r4
2400ff3c:	f7fd f8b8 	bl	2400d0b0 <inc_lock>
2400ff40:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400ff42:	2800      	cmp	r0, #0
2400ff44:	d1e7      	bne.n	2400ff16 <f_findfirst+0x66>
2400ff46:	2012      	movs	r0, #18
2400ff48:	e7bf      	b.n	2400feca <f_findfirst+0x1a>
2400ff4a:	bf00      	nop

2400ff4c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400ff4c:	4b10      	ldr	r3, [pc, #64]	; (2400ff90 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400ff4e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
2400ff50:	7a5c      	ldrb	r4, [r3, #9]
2400ff52:	b9cc      	cbnz	r4, 2400ff88 <FATFS_LinkDriver+0x3c>
2400ff54:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
2400ff56:	f004 00ff 	and.w	r0, r4, #255	; 0xff
2400ff5a:	7a5c      	ldrb	r4, [r3, #9]
2400ff5c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
2400ff5e:	7a5c      	ldrb	r4, [r3, #9]
2400ff60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2400ff64:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
2400ff66:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2400ff68:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
2400ff6a:	441c      	add	r4, r3
2400ff6c:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
2400ff6e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
2400ff70:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
2400ff72:	b2e4      	uxtb	r4, r4
2400ff74:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2400ff76:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2400ff78:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2400ff7a:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
2400ff7c:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
2400ff7e:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
2400ff80:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
2400ff84:	708b      	strb	r3, [r1, #2]
}
2400ff86:	4770      	bx	lr
  uint8_t ret = 1;
2400ff88:	2001      	movs	r0, #1
}
2400ff8a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ff8e:	4770      	bx	lr
2400ff90:	2001b638 	.word	0x2001b638

2400ff94 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400ff94:	287f      	cmp	r0, #127	; 0x7f
2400ff96:	d912      	bls.n	2400ffbe <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400ff98:	b971      	cbnz	r1, 2400ffb8 <ff_convert+0x24>
2400ff9a:	4b0c      	ldr	r3, [pc, #48]	; (2400ffcc <ff_convert+0x38>)
2400ff9c:	e001      	b.n	2400ffa2 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400ff9e:	2980      	cmp	r1, #128	; 0x80
2400ffa0:	d00c      	beq.n	2400ffbc <ff_convert+0x28>
				if (chr == Tbl[c]) break;
2400ffa2:	f833 2b02 	ldrh.w	r2, [r3], #2
2400ffa6:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
2400ffaa:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
2400ffac:	4282      	cmp	r2, r0
2400ffae:	d1f6      	bne.n	2400ff9e <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2400ffb0:	f10c 0080 	add.w	r0, ip, #128	; 0x80
2400ffb4:	b280      	uxth	r0, r0
2400ffb6:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400ffb8:	28ff      	cmp	r0, #255	; 0xff
2400ffba:	d901      	bls.n	2400ffc0 <ff_convert+0x2c>
2400ffbc:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400ffbe:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400ffc0:	4b02      	ldr	r3, [pc, #8]	; (2400ffcc <ff_convert+0x38>)
2400ffc2:	3880      	subs	r0, #128	; 0x80
2400ffc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400ffc8:	4770      	bx	lr
2400ffca:	bf00      	nop
2400ffcc:	2401a70c 	.word	0x2401a70c

2400ffd0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400ffd0:	4b22      	ldr	r3, [pc, #136]	; (2401005c <ff_wtoupper+0x8c>)
2400ffd2:	4a23      	ldr	r2, [pc, #140]	; (24010060 <ff_wtoupper+0x90>)
2400ffd4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400ffd8:	bf28      	it	cs
2400ffda:	4613      	movcs	r3, r2
{
2400ffdc:	b510      	push	{r4, lr}
2400ffde:	3304      	adds	r3, #4
2400ffe0:	e001      	b.n	2400ffe6 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400ffe2:	3304      	adds	r3, #4
2400ffe4:	b1da      	cbz	r2, 2401001e <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
2400ffe6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
2400ffea:	461c      	mov	r4, r3
2400ffec:	b1b1      	cbz	r1, 2401001c <ff_wtoupper+0x4c>
2400ffee:	4288      	cmp	r0, r1
2400fff0:	d314      	bcc.n	2401001c <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400fff2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2400fff6:	fa5f fc82 	uxtb.w	ip, r2
2400fffa:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
2400fffc:	eb0c 0e01 	add.w	lr, ip, r1
24010000:	4570      	cmp	r0, lr
24010002:	daee      	bge.n	2400ffe2 <ff_wtoupper+0x12>
			switch (cmd) {
24010004:	2a08      	cmp	r2, #8
24010006:	d809      	bhi.n	2401001c <ff_wtoupper+0x4c>
24010008:	e8df f002 	tbb	[pc, r2]
2401000c:	19161005 	.word	0x19161005
24010010:	25221f1c 	.word	0x25221f1c
24010014:	0c          	.byte	0x0c
24010015:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
24010016:	1a41      	subs	r1, r0, r1
24010018:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
2401001c:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
2401001e:	eb04 034c 	add.w	r3, r4, ip, lsl #1
24010022:	e7dc      	b.n	2400ffde <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
24010024:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
24010028:	b280      	uxth	r0, r0
}
2401002a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2401002c:	1a43      	subs	r3, r0, r1
2401002e:	f003 0301 	and.w	r3, r3, #1
24010032:	1ac0      	subs	r0, r0, r3
24010034:	b280      	uxth	r0, r0
}
24010036:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
24010038:	3810      	subs	r0, #16
2401003a:	b280      	uxth	r0, r0
}
2401003c:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2401003e:	3820      	subs	r0, #32
24010040:	b280      	uxth	r0, r0
}
24010042:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24010044:	3830      	subs	r0, #48	; 0x30
24010046:	b280      	uxth	r0, r0
}
24010048:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2401004a:	381a      	subs	r0, #26
2401004c:	b280      	uxth	r0, r0
}
2401004e:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
24010050:	3008      	adds	r0, #8
24010052:	b280      	uxth	r0, r0
}
24010054:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24010056:	3850      	subs	r0, #80	; 0x50
24010058:	b280      	uxth	r0, r0
}
2401005a:	bd10      	pop	{r4, pc}
2401005c:	2401a80c 	.word	0x2401a80c
24010060:	2401aa00 	.word	0x2401aa00

24010064 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
24010064:	b538      	push	{r3, r4, r5, lr}
24010066:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401006a:	680d      	ldr	r5, [r1, #0]
{
2401006c:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2401006e:	2010      	movs	r0, #16
{
24010070:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010074:	4629      	mov	r1, r5
24010076:	f002 ff91 	bl	24012f9c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2401007a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
2401007e:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
24010080:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24010082:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
24010084:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
24010088:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2401008a:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
2401008e:	edc0 7a02 	vstr	s15, [r0, #8]
}
24010092:	ecbd 8b02 	vpop	{d8}
24010096:	bd38      	pop	{r3, r4, r5, pc}

24010098 <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
24010098:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401009c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240100b8 <tPowerFollower_setFactor+0x20>
240100a0:	6803      	ldr	r3, [r0, #0]
240100a2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
240100a6:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
240100aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
240100ae:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
240100b2:	edc3 7a02 	vstr	s15, [r3, #8]
}
240100b6:	4770      	bx	lr
240100b8:	00000000 	.word	0x00000000

240100bc <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
240100bc:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
240100be:	ee60 7a00 	vmul.f32	s15, s0, s0
240100c2:	edd3 6a03 	vldr	s13, [r3, #12]
240100c6:	ed93 0a02 	vldr	s0, [r3, #8]
240100ca:	ed93 7a01 	vldr	s14, [r3, #4]
240100ce:	ee20 0a26 	vmul.f32	s0, s0, s13
240100d2:	eea7 0a27 	vfma.f32	s0, s14, s15
240100d6:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
240100da:	4770      	bx	lr

240100dc <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
240100dc:	b570      	push	{r4, r5, r6, lr}
240100de:	460d      	mov	r5, r1
240100e0:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
240100e2:	202c      	movs	r0, #44	; 0x2c
{
240100e4:	ed2d 8b02 	vpush	{d8}
240100e8:	b082      	sub	sp, #8
    _tMempool* m = *mp;
240100ea:	6811      	ldr	r1, [r2, #0]
{
240100ec:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
240100f0:	9101      	str	r1, [sp, #4]
240100f2:	f002 ff53 	bl	24012f9c <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
240100f6:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
240100fa:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
240100fc:	6030      	str	r0, [r6, #0]
240100fe:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24010100:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24010104:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010106:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24010108:	eef4 7ac8 	vcmpe.f32	s15, s16
2401010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010110:	d550      	bpl.n	240101b4 <tLinearDelay_initToPool+0xd8>
24010112:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010116:	00a8      	lsls	r0, r5, #2
24010118:	f002 ff40 	bl	24012f9c <mpool_alloc>

    d->gain = 1.0f;
2401011c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
24010120:	ed9f 0a29 	vldr	s0, [pc, #164]	; 240101c8 <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
24010124:	2300      	movs	r3, #0
    d->gain = 1.0f;
24010126:	6062      	str	r2, [r4, #4]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010128:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
2401012a:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
2401012e:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010132:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
24010136:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
2401013a:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2401013c:	edd5 7a07 	vldr	s15, [r5, #28]
24010140:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010144:	f023 fa00 	bl	24033548 <__LEAF_clip_veneer>

    float outPointer = d->inPoint - d->delay;
24010148:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2401014c:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
24010150:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
24010154:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
24010156:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2401015a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010162:	d50a      	bpl.n	2401017a <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
24010164:	ee07 2a90 	vmov	s15, r2
24010168:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401016c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010170:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010178:	d4f8      	bmi.n	2401016c <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
2401017a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2401017e:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
24010182:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010186:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2401018a:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2401018c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
24010190:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010192:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010196:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2401019a:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2401019e:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
240101a2:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240101a6:	d101      	bne.n	240101ac <tLinearDelay_initToPool+0xd0>
240101a8:	2300      	movs	r3, #0
240101aa:	61ab      	str	r3, [r5, #24]
}
240101ac:	b002      	add	sp, #8
240101ae:	ecbd 8b02 	vpop	{d8}
240101b2:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
240101b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240101b8:	2300      	movs	r3, #0
240101ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240101be:	bf4c      	ite	mi
240101c0:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
240101c2:	ed80 8a08 	vstrpl	s16, [r0, #32]
240101c6:	e7a6      	b.n	24010116 <tLinearDelay_initToPool+0x3a>
240101c8:	00000000 	.word	0x00000000

240101cc <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
240101cc:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240101ce:	69cb      	ldr	r3, [r1, #28]
240101d0:	b14b      	cbz	r3, 240101e6 <tLinearDelay_clear+0x1a>
240101d2:	2300      	movs	r3, #0
        d->buff[i] = 0;
240101d4:	2000      	movs	r0, #0
240101d6:	688a      	ldr	r2, [r1, #8]
240101d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
240101dc:	3301      	adds	r3, #1
        d->buff[i] = 0;
240101de:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240101e0:	69ca      	ldr	r2, [r1, #28]
240101e2:	429a      	cmp	r2, r3
240101e4:	d8f7      	bhi.n	240101d6 <tLinearDelay_clear+0xa>
}
240101e6:	4770      	bx	lr

240101e8 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
240101e8:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
240101ea:	edd3 7a01 	vldr	s15, [r3, #4]
240101ee:	6959      	ldr	r1, [r3, #20]
240101f0:	689a      	ldr	r2, [r3, #8]
240101f2:	ee27 0a80 	vmul.f32	s0, s15, s0
240101f6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240101fa:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
240101fe:	695a      	ldr	r2, [r3, #20]
24010200:	69d9      	ldr	r1, [r3, #28]
24010202:	3201      	adds	r2, #1
24010204:	428a      	cmp	r2, r1
24010206:	615a      	str	r2, [r3, #20]
24010208:	d101      	bne.n	2401020e <tLinearDelay_tickIn+0x26>
2401020a:	2200      	movs	r2, #0
2401020c:	615a      	str	r2, [r3, #20]
}
2401020e:	4770      	bx	lr

24010210 <tLinearDelay_tickOut>:
{
24010210:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24010212:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010214:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010216:	6899      	ldr	r1, [r3, #8]
24010218:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2401021c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
24010220:	69dc      	ldr	r4, [r3, #28]
24010222:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
24010224:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
24010228:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
2401022a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401022e:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010232:	d20b      	bcs.n	2401024c <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010234:	ed90 7a01 	vldr	s14, [r0, #4]
24010238:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2401023c:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2401023e:	eea7 0a27 	vfma.f32	s0, s14, s15
24010242:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010246:	f85d 4b04 	ldr.w	r4, [sp], #4
2401024a:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2401024c:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010250:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
24010252:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010256:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
24010258:	eea7 0a27 	vfma.f32	s0, s14, s15
2401025c:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010260:	f85d 4b04 	ldr.w	r4, [sp], #4
24010264:	4770      	bx	lr
24010266:	bf00      	nop

24010268 <tLinearDelay_setDelay>:
{
24010268:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2401026a:	6804      	ldr	r4, [r0, #0]
{
2401026c:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010270:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 240102e8 <tLinearDelay_setDelay+0x80>
24010274:	edd4 7a07 	vldr	s15, [r4, #28]
24010278:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2401027c:	f023 f964 	bl	24033548 <__LEAF_clip_veneer>
    float outPointer = d->inPoint - d->delay;
24010280:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
24010284:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
24010288:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
2401028c:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
2401028e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24010292:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401029a:	d50a      	bpl.n	240102b2 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
2401029c:	ee07 2a90 	vmov	s15, r2
240102a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240102a4:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
240102a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240102ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240102b0:	d4f8      	bmi.n	240102a4 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
240102b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
240102b6:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
240102ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
240102be:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240102c2:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
240102c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
240102c8:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
240102ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240102ce:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
240102d2:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
240102d6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
240102da:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240102de:	d000      	beq.n	240102e2 <tLinearDelay_setDelay+0x7a>
}
240102e0:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240102e2:	2300      	movs	r3, #0
240102e4:	61a3      	str	r3, [r4, #24]
}
240102e6:	bd10      	pop	{r4, pc}
240102e8:	00000000 	.word	0x00000000

240102ec <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
240102ec:	b570      	push	{r4, r5, r6, lr}
240102ee:	460d      	mov	r5, r1
240102f0:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
240102f2:	2030      	movs	r0, #48	; 0x30
{
240102f4:	ed2d 8b02 	vpush	{d8}
240102f8:	b082      	sub	sp, #8
    _tMempool* m = *mp;
240102fa:	6811      	ldr	r1, [r2, #0]
{
240102fc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
24010300:	9101      	str	r1, [sp, #4]
24010302:	f002 fe4b 	bl	24012f9c <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24010306:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2401030a:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2401030c:	6030      	str	r0, [r6, #0]
2401030e:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24010310:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
24010314:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010316:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24010318:	eef4 7ac8 	vcmpe.f32	s15, s16
2401031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010320:	d558      	bpl.n	240103d4 <tHermiteDelay_initToPool+0xe8>
24010322:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010326:	2d00      	cmp	r5, #0
24010328:	d14f      	bne.n	240103ca <tHermiteDelay_initToPool+0xde>
2401032a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
2401032e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
24010332:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
24010336:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2401033a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2401033e:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
24010342:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
24010344:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
24010346:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010348:	00a8      	lsls	r0, r5, #2
2401034a:	f002 fe27 	bl	24012f9c <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
2401034e:	2300      	movs	r3, #0
    d->gain = 1.0f;
24010350:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
24010354:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
24010356:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
24010358:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
2401035a:	2300      	movs	r3, #0
    d->gain = 1.0f;
2401035c:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
2401035e:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
24010362:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
24010366:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
24010368:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2401036c:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
24010370:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010374:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
24010378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010380:	d50a      	bpl.n	24010398 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
24010382:	ed93 7a07 	vldr	s14, [r3, #28]
24010386:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401038a:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2401038e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010396:	d4f8      	bmi.n	2401038a <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
24010398:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
2401039c:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
2401039e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
240103a2:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
240103a6:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
240103aa:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
240103ae:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
240103b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
240103b4:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
240103b8:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
240103ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
240103be:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
240103c2:	b002      	add	sp, #8
240103c4:	ecbd 8b02 	vpop	{d8}
240103c8:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
240103ca:	1e6b      	subs	r3, r5, #1
240103cc:	422b      	tst	r3, r5
240103ce:	461a      	mov	r2, r3
240103d0:	d1ad      	bne.n	2401032e <tHermiteDelay_initToPool+0x42>
240103d2:	e7b8      	b.n	24010346 <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
240103d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240103d8:	2300      	movs	r3, #0
240103da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240103de:	bf4c      	ite	mi
240103e0:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
240103e2:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
240103e6:	e79e      	b.n	24010326 <tHermiteDelay_initToPool+0x3a>

240103e8 <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
240103e8:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240103ea:	69cb      	ldr	r3, [r1, #28]
240103ec:	b14b      	cbz	r3, 24010402 <tHermiteDelay_clear+0x1a>
240103ee:	2300      	movs	r3, #0
        d->buff[i] = 0;
240103f0:	2000      	movs	r0, #0
240103f2:	684a      	ldr	r2, [r1, #4]
240103f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
240103f8:	3301      	adds	r3, #1
        d->buff[i] = 0;
240103fa:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240103fc:	69ca      	ldr	r2, [r1, #28]
240103fe:	429a      	cmp	r2, r3
24010400:	d8f7      	bhi.n	240103f2 <tHermiteDelay_clear+0xa>
}
24010402:	4770      	bx	lr

24010404 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
24010404:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
24010406:	6959      	ldr	r1, [r3, #20]
24010408:	685a      	ldr	r2, [r3, #4]
2401040a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401040e:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
24010412:	695a      	ldr	r2, [r3, #20]
24010414:	6899      	ldr	r1, [r3, #8]
24010416:	3201      	adds	r2, #1
24010418:	400a      	ands	r2, r1
2401041a:	615a      	str	r2, [r3, #20]
}
2401041c:	4770      	bx	lr
2401041e:	bf00      	nop

24010420 <tHermiteDelay_tickOut>:
{
24010420:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
24010422:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
24010424:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010426:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
2401042a:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2401042c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
24010430:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010432:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010436:	edd3 1a00 	vldr	s3, [r3]
2401043a:	69e3      	ldr	r3, [r4, #28]
2401043c:	440b      	add	r3, r1
2401043e:	3b01      	subs	r3, #1
24010440:	4003      	ands	r3, r0
24010442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010446:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
2401044a:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2401044c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
24010450:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010452:	edd1 0a00 	vldr	s1, [r1]
24010456:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401045a:	ed92 1a00 	vldr	s2, [r2]
2401045e:	f002 fc97 	bl	24012d90 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010462:	69a3      	ldr	r3, [r4, #24]
24010464:	68a2      	ldr	r2, [r4, #8]
24010466:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010468:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
2401046c:	4013      	ands	r3, r2
2401046e:	61a3      	str	r3, [r4, #24]
}
24010470:	bd10      	pop	{r4, pc}
24010472:	bf00      	nop

24010474 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
24010474:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
24010476:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2401047a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
2401047e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010482:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
24010486:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401048a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401048e:	d50a      	bpl.n	240104a6 <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
24010490:	edd3 7a07 	vldr	s15, [r3, #28]
24010494:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010498:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2401049c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240104a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240104a4:	d4f8      	bmi.n	24010498 <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
240104a6:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
240104aa:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
240104ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
240104b0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
240104b4:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
240104b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
240104bc:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
240104be:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
240104c2:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
240104c6:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
240104c8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
240104cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240104d0:	4770      	bx	lr
240104d2:	bf00      	nop

240104d4 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
240104d4:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240104d6:	43c9      	mvns	r1, r1
240104d8:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
240104da:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240104de:	4401      	add	r1, r0
240104e0:	4011      	ands	r1, r2
    return d->buff[tap];
240104e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
240104e6:	ed91 0a00 	vldr	s0, [r1]
240104ea:	4770      	bx	lr

240104ec <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
240104ec:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240104ee:	43c9      	mvns	r1, r1
240104f0:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
240104f2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240104f6:	4401      	add	r1, r0
240104f8:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
240104fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
240104fe:	edd1 7a00 	vldr	s15, [r1]
24010502:	ee30 0a27 	vadd.f32	s0, s0, s15
24010506:	ed81 0a00 	vstr	s0, [r1]
}
2401050a:	4770      	bx	lr

2401050c <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
2401050c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24010510:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
24010512:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
24010514:	6999      	ldr	r1, [r3, #24]
{
24010516:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24010518:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
2401051c:	bf0c      	ite	eq
2401051e:	2700      	moveq	r7, #0
24010520:	2706      	movne	r7, #6
{
24010522:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24010524:	2b1e      	cmp	r3, #30
24010526:	d93a      	bls.n	2401059e <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
24010528:	2d40      	cmp	r5, #64	; 0x40
2401052a:	d135      	bne.n	24010598 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
2401052c:	2028      	movs	r0, #40	; 0x28
2401052e:	9101      	str	r1, [sp, #4]
24010530:	f002 fd34 	bl	24012f9c <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010534:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
24010538:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
2401053a:	4604      	mov	r4, r0
2401053c:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
24010540:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
24010544:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
24010546:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
24010548:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
2401054a:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
2401054e:	f008 f8e9 	bl	24018724 <log2f>
24010552:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010556:	4a16      	ldr	r2, [pc, #88]	; (240105b0 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010558:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
2401055a:	ee17 3a90 	vmov	r3, s15
2401055e:	3b01      	subs	r3, #1
24010560:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010562:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010566:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
2401056a:	4a12      	ldr	r2, [pc, #72]	; (240105b4 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
2401056c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24010570:	ee17 0a90 	vmov	r0, s15
24010574:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
24010578:	fb90 f5f5 	sdiv	r5, r0, r5
2401057c:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
2401057e:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
24010580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24010584:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
24010586:	f002 fd09 	bl	24012f9c <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
2401058a:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
2401058c:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
2401058e:	9901      	ldr	r1, [sp, #4]
24010590:	00d8      	lsls	r0, r3, #3
24010592:	f002 fd03 	bl	24012f9c <mpool_alloc>
24010596:	61e0      	str	r0, [r4, #28]
}
24010598:	b002      	add	sp, #8
2401059a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
2401059e:	4a06      	ldr	r2, [pc, #24]	; (240105b8 <tOversampler_init+0xac>)
240105a0:	fa22 f303 	lsr.w	r3, r2, r3
240105a4:	07db      	lsls	r3, r3, #31
240105a6:	d4c1      	bmi.n	2401052c <tOversampler_init+0x20>
}
240105a8:	b002      	add	sp, #8
240105aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240105ae:	bf00      	nop
240105b0:	2402413c 	.word	0x2402413c
240105b4:	20000764 	.word	0x20000764
240105b8:	40004045 	.word	0x40004045

240105bc <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
240105bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
240105be:	698f      	ldr	r7, [r1, #24]
{
240105c0:	4606      	mov	r6, r0
240105c2:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240105c4:	2020      	movs	r0, #32
240105c6:	4639      	mov	r1, r7
240105c8:	f002 fce8 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
240105cc:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
240105d0:	4a10      	ldr	r2, [pc, #64]	; (24010614 <tCrusher_init+0x58>)
    c->op = 4;
240105d2:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240105d4:	6030      	str	r0, [r6, #0]
240105d6:	4604      	mov	r4, r0
    c->op = 4;
240105d8:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
240105da:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
240105dc:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
240105de:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
240105e0:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240105e2:	2010      	movs	r0, #16
    _tMempool* m = *mp;
240105e4:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240105e6:	4629      	mov	r1, r5
240105e8:	f002 fcd8 	bl	24012f9c <mpool_alloc>
    s->invRatio = 1.0f;
240105ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
240105f0:	2200      	movs	r2, #0
    s->count = 0;
240105f2:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
240105f4:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
240105f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010618 <tCrusher_init+0x5c>
    s->mempool = m;
240105fa:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
240105fc:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
240105fe:	6082      	str	r2, [r0, #8]
    s->count = 0;
24010600:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010602:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401061c <tCrusher_init+0x60>
24010606:	edd4 6a03 	vldr	s13, [r4, #12]
2401060a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401060e:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010614:	3951b717 	.word	0x3951b717
24010618:	3912ccf6 	.word	0x3912ccf6
2401061c:	3e99999a 	.word	0x3e99999a

24010620 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24010620:	eddf 7a1e 	vldr	s15, [pc, #120]	; 2401069c <tCrusher_tick+0x7c>
24010624:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24010628:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2401062a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
2401062e:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24010630:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24010634:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010638:	6960      	ldr	r0, [r4, #20]
2401063a:	05c0      	lsls	r0, r0, #23
2401063c:	ee20 0a27 	vmul.f32	s0, s0, s15
24010640:	f002 fa7c 	bl	24012b3c <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010644:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010648:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
2401064c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010650:	f022 ff7a 	bl	24033548 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
24010654:	edd4 0a04 	vldr	s1, [r4, #16]
24010658:	f002 fa5e 	bl	24012b18 <LEAF_round>
    _tSampleReducer* s = *sr;
2401065c:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
2401065e:	68da      	ldr	r2, [r3, #12]
24010660:	edd3 7a01 	vldr	s15, [r3, #4]
24010664:	ee07 2a10 	vmov	s14, r2
24010668:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401066c:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010674:	dc08      	bgt.n	24010688 <tCrusher_tick+0x68>
    s->count++;
24010676:	3201      	adds	r2, #1
    return s->hold;
24010678:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
2401067c:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
2401067e:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
24010682:	ee20 0a27 	vmul.f32	s0, s0, s15
24010686:	bd10      	pop	{r4, pc}
        s->hold = input;
24010688:	2201      	movs	r2, #1
2401068a:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
2401068e:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
24010690:	edd4 7a06 	vldr	s15, [r4, #24]
}
24010694:	ee20 0a27 	vmul.f32	s0, s0, s15
24010698:	bd10      	pop	{r4, pc}
2401069a:	bf00      	nop
2401069c:	459c4000 	.word	0x459c4000

240106a0 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
240106a0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
240106a4:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
240106a6:	ee20 0a27 	vmul.f32	s0, s0, s15
240106aa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240106ae:	ed83 0a05 	vstr	s0, [r3, #20]
}
240106b2:	4770      	bx	lr

240106b4 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
240106b4:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
240106b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 240106ec <tCrusher_setQuality+0x38>
240106bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
240106c0:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
240106c2:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
240106c4:	f022 ff40 	bl	24033548 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
240106c8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 240106f0 <tCrusher_setQuality+0x3c>
240106cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 240106f4 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240106d0:	eddf 6a09 	vldr	s13, [pc, #36]	; 240106f8 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
240106d4:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240106d8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240106fc <tCrusher_setQuality+0x48>
240106dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
240106e0:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240106e4:	ed84 7a06 	vstr	s14, [r4, #24]
}
240106e8:	bd10      	pop	{r4, pc}
240106ea:	bf00      	nop
240106ec:	00000000 	.word	0x00000000
240106f0:	459c4000 	.word	0x459c4000
240106f4:	3c23d70a 	.word	0x3c23d70a
240106f8:	3912ccf6 	.word	0x3912ccf6
240106fc:	3e99999a 	.word	0x3e99999a

24010700 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
24010700:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24010702:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010706:	4770      	bx	lr

24010708 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010708:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
2401070c:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
2401070e:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010712:	eeb4 0a67 	vcmp.f32	s0, s15
24010716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401071a:	d809      	bhi.n	24010730 <tCrusher_setSamplingRatio+0x28>
2401071c:	eeb5 0a40 	vcmp.f32	s0, #0.0
24010720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010724:	db04      	blt.n	24010730 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
24010726:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
2401072a:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
2401072c:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24010730:	4770      	bx	lr
24010732:	bf00      	nop

24010734 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24010734:	b570      	push	{r4, r5, r6, lr}
24010736:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401073a:	698d      	ldr	r5, [r1, #24]
{
2401073c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
2401073e:	206c      	movs	r0, #108	; 0x6c
24010740:	4629      	mov	r1, r5
24010742:	f002 fc2b 	bl	24012f9c <mpool_alloc>
24010746:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24010748:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401074a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
2401074e:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010750:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010752:	ed93 8a00 	vldr	s16, [r3]
24010756:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401075a:	ee80 0a08 	vdiv.f32	s0, s0, s16
2401075e:	f007 feff 	bl	24018560 <expf>
24010762:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010766:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
2401076a:	ee87 0a88 	vdiv.f32	s0, s15, s16
2401076e:	f007 fef7 	bl	24018560 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
24010772:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
24010776:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
24010778:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
2401077c:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
2401077e:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
24010780:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
24010782:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
24010784:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
24010788:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
2401078a:	62e3      	str	r3, [r4, #44]	; 0x2c
2401078c:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
2401078e:	6363      	str	r3, [r4, #52]	; 0x34
24010790:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
24010792:	63e3      	str	r3, [r4, #60]	; 0x3c
24010794:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
24010796:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
24010798:	4905      	ldr	r1, [pc, #20]	; (240107b0 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
2401079a:	4b06      	ldr	r3, [pc, #24]	; (240107b4 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
2401079c:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
240107a0:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
240107a2:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
240107a4:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240107a6:	6223      	str	r3, [r4, #32]
}
240107a8:	ecbd 8b02 	vpop	{d8}
240107ac:	bd70      	pop	{r4, r5, r6, pc}
240107ae:	bf00      	nop
240107b0:	40400000 	.word	0x40400000
240107b4:	3e2aaaab 	.word	0x3e2aaaab

240107b8 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
240107b8:	b510      	push	{r4, lr}
240107ba:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
240107be:	6804      	ldr	r4, [r0, #0]
{
240107c0:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
240107c4:	f002 f924 	bl	24012a10 <fastabsf>
240107c8:	f002 fb7c 	bl	24012ec4 <fasteratodb>
240107cc:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 24010880 <tCompressor_tick+0xc8>
240107d0:	eef0 0a40 	vmov.f32	s1, s0
240107d4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24010884 <tCompressor_tick+0xcc>
240107d8:	f022 feb6 	bl	24033548 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
240107dc:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
240107e0:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
240107e4:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
240107e8:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
240107ec:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
240107f0:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
240107f4:	eef4 7ac7 	vcmpe.f32	s15, s14
240107f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107fc:	db23      	blt.n	24010846 <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
240107fe:	2300      	movs	r3, #0
24010800:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24010880 <tCompressor_tick+0xc8>
24010804:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
24010806:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401080a:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401080e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
24010812:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
24010816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401081a:	bf4c      	ite	mi
2401081c:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24010820:	ed94 6a02 	vldrpl	s12, [r4, #8]
24010824:	ee77 7ac6 	vsub.f32	s15, s15, s12
24010828:	ee67 7a87 	vmul.f32	s15, s15, s14
2401082c:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
24010830:	ee30 0a67 	vsub.f32	s0, s0, s15
24010834:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
24010838:	f002 fb78 	bl	24012f2c <fasterdbtoa>
    return attenuation * in;
}
2401083c:	ee28 0a00 	vmul.f32	s0, s16, s0
24010840:	ecbd 8b02 	vpop	{d8}
24010844:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010846:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
2401084a:	edd4 5a07 	vldr	s11, [r4, #28]
2401084e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
24010856:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401085a:	dd0c      	ble.n	24010876 <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401085c:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
24010860:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
24010864:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010866:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
2401086a:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401086c:	ee67 7a87 	vmul.f32	s15, s15, s14
24010870:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
24010874:	e7c7      	b.n	24010806 <tCompressor_tick+0x4e>
        c->isActive = 1;
24010876:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
24010878:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
2401087c:	6463      	str	r3, [r4, #68]	; 0x44
2401087e:	e7c2      	b.n	24010806 <tCompressor_tick+0x4e>
24010880:	00000000 	.word	0x00000000
24010884:	c2b40000 	.word	0xc2b40000

24010888 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
24010888:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401088a:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
2401088e:	6800      	ldr	r0, [r0, #0]
{
24010890:	eef0 7a40 	vmov.f32	s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24010894:	ee07 3a10 	vmov	s14, r3
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010898:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbTableSizeMinus1 = atodbTableSize-1;
2401089c:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401089e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
{
240108a2:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
240108a4:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240108a6:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
240108a8:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240108aa:	ee86 7aa0 	vdiv.f32	s14, s13, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240108ae:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240108b0:	ee67 7a27 	vmul.f32	s15, s14, s15
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240108b4:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240108b8:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240108bc:	ee07 3a90 	vmov	s15, r3
240108c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240108c4:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
240108c8:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240108cc:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
240108d0:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
240108d4:	4770      	bx	lr
240108d6:	bf00      	nop

240108d8 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
240108d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
240108da:	6817      	ldr	r7, [r2, #0]
{
240108dc:	4614      	mov	r4, r2
240108de:	4606      	mov	r6, r0
240108e0:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240108e2:	2018      	movs	r0, #24
240108e4:	4639      	mov	r1, r7
{
240108e6:	ed2d 8b02 	vpush	{d8}
240108ea:	eef0 8a40 	vmov.f32	s17, s0
240108ee:	b083      	sub	sp, #12
240108f0:	eeb0 8a41 	vmov.f32	s16, s2
240108f4:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240108f8:	f002 fb50 	bl	24012f9c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240108fc:	4621      	mov	r1, r4
    p->curr=0.0f;
240108fe:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24010900:	4604      	mov	r4, r0
24010902:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010904:	ed9d 0a01 	vldr	s0, [sp, #4]
24010908:	3014      	adds	r0, #20
    p->mempool = m;
2401090a:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
2401090e:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24010912:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010914:	f7ff fba6 	bl	24010064 <tPowerFollower_initToPool>
    p->mode=mode;
24010918:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401091a:	ed84 8a02 	vstr	s16, [r4, #8]
}
2401091e:	b003      	add	sp, #12
24010920:	ecbd 8b02 	vpop	{d8}
24010924:	bdf0      	pop	{r4, r5, r6, r7, pc}
24010926:	bf00      	nop

24010928 <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
24010928:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
2401092a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401092e:	4770      	bx	lr

24010930 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24010930:	6800      	ldr	r0, [r0, #0]
24010932:	3014      	adds	r0, #20
24010934:	f7ff bbb0 	b.w	24010098 <tPowerFollower_setFactor>

24010938 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24010938:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2401093a:	60d9      	str	r1, [r3, #12]
}
2401093c:	4770      	bx	lr
2401093e:	bf00      	nop

24010940 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
24010940:	b510      	push	{r4, lr}
24010942:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24010946:	6804      	ldr	r4, [r0, #0]
{
24010948:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401094c:	f104 0014 	add.w	r0, r4, #20
24010950:	f7ff fbb4 	bl	240100bc <tPowerFollower_tick>
24010954:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24010958:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401095a:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401095e:	b91b      	cbnz	r3, 24010968 <tFeedbackLeveler_tick+0x28>
24010960:	eddf 7a08 	vldr	s15, [pc, #32]	; 24010984 <tFeedbackLeveler_tick+0x44>
24010964:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
24010968:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401096c:	edd4 6a02 	vldr	s13, [r4, #8]
24010970:	eee6 7ac7 	vfms.f32	s15, s13, s14
24010974:	ee27 0a88 	vmul.f32	s0, s15, s16
24010978:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
2401097c:	ecbd 8b02 	vpop	{d8}
24010980:	bd10      	pop	{r4, pc}
24010982:	bf00      	nop
24010984:	00000000 	.word	0x00000000

24010988 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
24010988:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
2401098a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401098e:	4770      	bx	lr

24010990 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
24010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010992:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
24010996:	699e      	ldr	r6, [r3, #24]
{
24010998:	4614      	mov	r4, r2
2401099a:	4607      	mov	r7, r0
2401099c:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401099e:	2068      	movs	r0, #104	; 0x68
240109a0:	4631      	mov	r1, r6
{
240109a2:	eef0 9a40 	vmov.f32	s19, s0
240109a6:	eeb0 9a60 	vmov.f32	s18, s1
240109aa:	eeb0 8a41 	vmov.f32	s16, s2
240109ae:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240109b2:	f002 faf3 	bl	24012f9c <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240109b6:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240109ba:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
240109bc:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
240109be:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240109c0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
240109c4:	eddf 7a22 	vldr	s15, [pc, #136]	; 24010a50 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
240109c8:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
240109ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
240109ce:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
240109d0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240109d4:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
240109d8:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
240109da:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
240109dc:	fe88 8a66 	vminnm.f32	s16, s16, s13
240109e0:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
240109e4:	2200      	movs	r2, #0
240109e6:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 24010a54 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240109ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
240109ee:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240109f2:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
240109f6:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
240109fa:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
240109fe:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
24010a02:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
24010a06:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
24010a0a:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
24010a0e:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
24010a10:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
24010a14:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
24010a18:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
24010a1c:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010a20:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010a24:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010a28:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010a2c:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010a30:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010a34:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010a38:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010a3c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010a40:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
24010a44:	685b      	ldr	r3, [r3, #4]
24010a46:	6643      	str	r3, [r0, #100]	; 0x64
}
24010a48:	ecbd 8b04 	vpop	{d8-d9}
24010a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010a4e:	bf00      	nop
24010a50:	4479ffff 	.word	0x4479ffff
24010a54:	00000000 	.word	0x00000000

24010a58 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24010a58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010a5c:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010a5e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
24010a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
24010a66:	bf48      	it	mi
24010a68:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010a7c <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010a6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
24010a70:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010a74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24010a78:	4770      	bx	lr
24010a7a:	bf00      	nop
24010a7c:	3c23d70a 	.word	0x3c23d70a

24010a80 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
24010a80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010a84:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010a86:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
24010a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
24010a8e:	bf48      	it	mi
24010a90:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010aa4 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010a94:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
24010a98:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010a9c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
24010aa0:	4770      	bx	lr
24010aa2:	bf00      	nop
24010aa4:	3c23d70a 	.word	0x3c23d70a

24010aa8 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24010aa8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
24010aac:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
24010aae:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ab6:	dd02      	ble.n	24010abe <tADSRT_setSustain+0x16>
24010ab8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
24010abc:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
24010abe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010ac2:	2200      	movs	r2, #0
24010ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ac8:	bf4c      	ite	mi
24010aca:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
24010acc:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
24010ad0:	4770      	bx	lr
24010ad2:	bf00      	nop

24010ad4 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24010ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010ad8:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010ada:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
24010ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
24010ae2:	bf48      	it	mi
24010ae4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010af8 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010ae8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
24010aec:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010af0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
24010af4:	4770      	bx	lr
24010af6:	bf00      	nop
24010af8:	3c23d70a 	.word	0x3c23d70a

24010afc <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
24010afc:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24010afe:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24010b00:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010b1c <tADSRT_setLeakFactor+0x20>
24010b04:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
24010b08:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24010b0c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010b10:	f007 fec6 	bl	240188a0 <powf>
24010b14:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
24010b18:	bd10      	pop	{r4, pc}
24010b1a:	bf00      	nop
24010b1c:	472c4400 	.word	0x472c4400

24010b20 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
24010b20:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
24010b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24010b24:	b162      	cbz	r2, 24010b40 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
24010b26:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
24010b28:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
24010b2a:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24010b2c:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
24010b2e:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
24010b30:	2200      	movs	r2, #0
24010b32:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24010b34:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
24010b38:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
24010b3a:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
24010b3c:	655a      	str	r2, [r3, #84]	; 0x54
}
24010b3e:	4770      	bx	lr
        adsr->whichStage = env_attack;
24010b40:	2101      	movs	r1, #1
24010b42:	e7f5      	b.n	24010b30 <tADSRT_on+0x10>

24010b44 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24010b44:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24010b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24010b48:	b11a      	cbz	r2, 24010b52 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
24010b4a:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24010b4c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
24010b4e:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
24010b50:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
24010b52:	4770      	bx	lr

24010b54 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
24010b54:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24010b56:	6804      	ldr	r4, [r0, #0]
{
24010b58:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
24010b5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24010b5e:	3b01      	subs	r3, #1
24010b60:	2b04      	cmp	r3, #4
24010b62:	f200 8148 	bhi.w	24010df6 <tADSRT_tick+0x2a2>
24010b66:	e8df f003 	tbb	[pc, r3]
24010b6a:	441f      	.short	0x441f
24010b6c:	6339      	.short	0x6339
24010b6e:	03          	.byte	0x03
24010b6f:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24010b70:	edd4 7a03 	vldr	s15, [r4, #12]
24010b74:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
24010b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010b7c:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b84:	dd71      	ble.n	24010c6a <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
24010b86:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24010dfc <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
24010b8a:	2301      	movs	r3, #1
24010b8c:	eeb0 0a67 	vmov.f32	s0, s15
24010b90:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
24010b92:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
24010b96:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
24010b9a:	ee37 1a81 	vadd.f32	s2, s15, s2
24010b9e:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
24010ba2:	ecbd 8b02 	vpop	{d8}
24010ba6:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24010ba8:	edd4 7a03 	vldr	s15, [r4, #12]
24010bac:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
24010bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010bb4:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010bbc:	dd7f      	ble.n	24010cbe <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
24010bbe:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
24010bc0:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
24010bc4:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
24010bc6:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
24010bca:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24010bce:	ee37 1a81 	vadd.f32	s2, s15, s2
24010bd2:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
24010bd6:	ecbd 8b02 	vpop	{d8}
24010bda:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
24010bdc:	ed94 0a06 	vldr	s0, [r4, #24]
24010be0:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
24010be4:	ee20 0a27 	vmul.f32	s0, s0, s15
24010be8:	ed84 0a06 	vstr	s0, [r4, #24]
}
24010bec:	ecbd 8b02 	vpop	{d8}
24010bf0:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24010bf2:	edd4 7a03 	vldr	s15, [r4, #12]
24010bf6:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
24010bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010bfe:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c06:	f340 8088 	ble.w	24010d1a <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
24010c0a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010c0e:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
24010c10:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
24010c14:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
24010c16:	ee20 0a27 	vmul.f32	s0, s0, s15
24010c1a:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24010c1e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24010c22:	ee37 1a81 	vadd.f32	s2, s15, s2
24010c26:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
24010c2a:	ecbd 8b02 	vpop	{d8}
24010c2e:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010c30:	edd4 7a03 	vldr	s15, [r4, #12]
24010c34:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
24010c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010c3c:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c44:	f340 809e 	ble.w	24010d84 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
24010c48:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24010dfc <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
24010c4c:	2300      	movs	r3, #0
24010c4e:	eeb0 0a67 	vmov.f32	s0, s15
24010c52:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
24010c54:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
24010c58:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24010c5c:	ee37 1a81 	vadd.f32	s2, s15, s2
24010c60:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
24010c64:	ecbd 8b02 	vpop	{d8}
24010c68:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010c6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
24010c6e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010c72:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
24010c76:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010c7a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
24010c7e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
24010c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010c86:	f100 80b2 	bmi.w	24010dee <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010c8a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010c8e:	6862      	ldr	r2, [r4, #4]
24010c90:	ee17 3a90 	vmov	r3, s15
24010c94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010c98:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
24010c9c:	ee16 3a90 	vmov	r3, s13
24010ca0:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
24010ca4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010ca8:	ed92 0a00 	vldr	s0, [r2]
24010cac:	f002 f892 	bl	24012dd4 <LEAF_interpolation_linear>
24010cb0:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
24010cb4:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
24010cb8:	ed84 0a06 	vstr	s0, [r4, #24]
24010cbc:	e76b      	b.n	24010b96 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
24010cc2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010cc6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
24010cca:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010cce:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
24010cd2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010cda:	f100 8084 	bmi.w	24010de6 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24010cde:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010ce2:	6862      	ldr	r2, [r4, #4]
24010ce4:	ee17 3a90 	vmov	r3, s15
24010ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010cec:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
24010cf0:	ee16 3a90 	vmov	r3, s13
24010cf4:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
24010cf8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010cfc:	ed92 0a00 	vldr	s0, [r2]
24010d00:	f002 f868 	bl	24012dd4 <LEAF_interpolation_linear>
24010d04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
24010d08:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
24010d0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
24010d10:	ee20 0a08 	vmul.f32	s0, s0, s16
24010d14:	ed84 0a06 	vstr	s0, [r4, #24]
24010d18:	e757      	b.n	24010bca <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24010d1e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010d22:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
24010d26:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
24010d2e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010d36:	d452      	bmi.n	24010dde <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
24010d38:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010d3c:	6862      	ldr	r2, [r4, #4]
24010d3e:	ee17 3a90 	vmov	r3, s15
24010d42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010d46:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
24010d4a:	ee16 3a90 	vmov	r3, s13
24010d4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010d52:	ed92 0a00 	vldr	s0, [r2]
24010d56:	f002 f83d 	bl	24012dd4 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24010d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24010d5e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24010d62:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
24010d66:	ee76 6ac7 	vsub.f32	s13, s13, s14
24010d6a:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
24010d6e:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
24010d72:	ee67 7a86 	vmul.f32	s15, s15, s12
24010d76:	eea6 7a80 	vfma.f32	s14, s13, s0
24010d7a:	ee27 0a87 	vmul.f32	s0, s15, s14
24010d7e:	ed84 0a06 	vstr	s0, [r4, #24]
24010d82:	e74c      	b.n	24010c1e <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
24010d88:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010d8c:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
24010d90:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010d94:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
24010d98:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
24010d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010da0:	d419      	bmi.n	24010dd6 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
24010da2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010da6:	6862      	ldr	r2, [r4, #4]
24010da8:	ee17 3a90 	vmov	r3, s15
24010dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010db0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
24010db4:	ee16 3a90 	vmov	r3, s13
24010db8:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
24010dbc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010dc0:	ed92 0a00 	vldr	s0, [r2]
24010dc4:	f002 f806 	bl	24012dd4 <LEAF_interpolation_linear>
24010dc8:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
24010dcc:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
24010dd0:	ed84 0a06 	vstr	s0, [r4, #24]
24010dd4:	e740      	b.n	24010c58 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010dd6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010dd8:	eddf 0a08 	vldr	s1, [pc, #32]	; 24010dfc <tADSRT_tick+0x2a8>
24010ddc:	e7ea      	b.n	24010db4 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010dde:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010de0:	eddf 0a06 	vldr	s1, [pc, #24]	; 24010dfc <tADSRT_tick+0x2a8>
24010de4:	e7b1      	b.n	24010d4a <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010de6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010de8:	eddf 0a04 	vldr	s1, [pc, #16]	; 24010dfc <tADSRT_tick+0x2a8>
24010dec:	e780      	b.n	24010cf0 <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010dee:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010df0:	eddf 0a02 	vldr	s1, [pc, #8]	; 24010dfc <tADSRT_tick+0x2a8>
24010df4:	e752      	b.n	24010c9c <tADSRT_tick+0x148>
    return adsr->next;
24010df6:	ed94 0a06 	vldr	s0, [r4, #24]
24010dfa:	e6d2      	b.n	24010ba2 <tADSRT_tick+0x4e>
24010dfc:	00000000 	.word	0x00000000

24010e00 <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24010e00:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
24010e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24010e04:	3a01      	subs	r2, #1
24010e06:	2a04      	cmp	r2, #4
24010e08:	f200 80ba 	bhi.w	24010f80 <tADSRT_tickNoInterp+0x180>
24010e0c:	e8df f002 	tbb	[pc, r2]
24010e10:	58333c1b 	.word	0x58333c1b
24010e14:	03          	.byte	0x03
24010e15:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24010e16:	edd3 7a03 	vldr	s15, [r3, #12]
24010e1a:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
24010e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010e22:	eef4 6ac7 	vcmpe.f32	s13, s14
24010e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e2a:	dd61      	ble.n	24010ef0 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
24010e2c:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24010e2e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 24010f88 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
24010e32:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24010e34:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24010e38:	ed83 0a06 	vstr	s0, [r3, #24]
24010e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010e40:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
24010e44:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24010e46:	edd3 7a03 	vldr	s15, [r3, #12]
24010e4a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
24010e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010e52:	eef4 6ac7 	vcmpe.f32	s13, s14
24010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e5a:	dd57      	ble.n	24010f0c <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
24010e5c:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
24010e5e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
24010e62:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24010e64:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
24010e68:	ed83 0a06 	vstr	s0, [r3, #24]
24010e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010e70:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
24010e74:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
24010e76:	ed93 0a06 	vldr	s0, [r3, #24]
24010e7a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
24010e7e:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e82:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24010e86:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24010e88:	edd3 7a03 	vldr	s15, [r3, #12]
24010e8c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
24010e90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010e94:	eef4 6ac7 	vcmpe.f32	s13, s14
24010e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e9c:	dd48      	ble.n	24010f30 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
24010e9e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010ea2:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
24010ea4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
24010ea8:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
24010eaa:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
24010eae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
24010eb2:	ed83 0a06 	vstr	s0, [r3, #24]
24010eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010eba:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24010ebe:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010ec0:	edd3 7a03 	vldr	s15, [r3, #12]
24010ec4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
24010ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010ecc:	eef4 6ac7 	vcmpe.f32	s13, s14
24010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ed4:	dd46      	ble.n	24010f64 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
24010ed6:	2200      	movs	r2, #0
                adsr->next = 0.0f;
24010ed8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24010f88 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
24010edc:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24010ede:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24010ee2:	ed83 0a06 	vstr	s0, [r3, #24]
24010ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010eea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
24010eee:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24010ef0:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010ef4:	685a      	ldr	r2, [r3, #4]
24010ef6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010efa:	ee17 1a10 	vmov	r1, s14
24010efe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010f02:	ed92 0a00 	vldr	s0, [r2]
24010f06:	ee20 0a27 	vmul.f32	s0, s0, s15
24010f0a:	e793      	b.n	24010e34 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24010f0c:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010f10:	685a      	ldr	r2, [r3, #4]
24010f12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24010f16:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
24010f1a:	ee17 1a10 	vmov	r1, s14
24010f1e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010f22:	ed92 7a00 	vldr	s14, [r2]
24010f26:	ee30 0a47 	vsub.f32	s0, s0, s14
24010f2a:	ee20 0a27 	vmul.f32	s0, s0, s15
24010f2e:	e799      	b.n	24010e64 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24010f30:	eefc 5ae6 	vcvt.u32.f32	s11, s13
24010f34:	685a      	ldr	r2, [r3, #4]
24010f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010f3a:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24010f3e:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
24010f42:	ee15 1a90 	vmov	r1, s11
24010f46:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
24010f4a:	ee37 7a40 	vsub.f32	s14, s14, s0
24010f4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010f52:	ee67 7a86 	vmul.f32	s15, s15, s12
24010f56:	ed92 6a00 	vldr	s12, [r2]
24010f5a:	eea6 0a07 	vfma.f32	s0, s12, s14
24010f5e:	ee27 0a80 	vmul.f32	s0, s15, s0
24010f62:	e7a4      	b.n	24010eae <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
24010f64:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010f68:	685a      	ldr	r2, [r3, #4]
24010f6a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24010f6e:	ee17 1a10 	vmov	r1, s14
24010f72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010f76:	ed92 0a00 	vldr	s0, [r2]
24010f7a:	ee20 0a27 	vmul.f32	s0, s0, s15
24010f7e:	e7ae      	b.n	24010ede <tADSRT_tickNoInterp+0xde>
    return adsr->next;
24010f80:	ed93 0a06 	vldr	s0, [r3, #24]
24010f84:	4770      	bx	lr
24010f86:	bf00      	nop
24010f88:	00000000 	.word	0x00000000

24010f8c <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010f8c:	b538      	push	{r3, r4, r5, lr}
24010f8e:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24010f92:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010f94:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010f96:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010f98:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010f9c:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010f9e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010fa2:	f001 fffb 	bl	24012f9c <mpool_alloc>
24010fa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010faa:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24010fe0 <tExpSmooth_init+0x54>
24010fae:	6028      	str	r0, [r5, #0]
24010fb0:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24010fb4:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24010fb8:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010fbc:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010fbe:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010fc2:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24010fc6:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24010fca:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010fce:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010fd2:	6863      	ldr	r3, [r4, #4]
24010fd4:	685b      	ldr	r3, [r3, #4]
24010fd6:	6183      	str	r3, [r0, #24]
}
24010fd8:	ecbd 8b02 	vpop	{d8}
24010fdc:	bd38      	pop	{r3, r4, r5, pc}
24010fde:	bf00      	nop
24010fe0:	00000000 	.word	0x00000000

24010fe4 <tExpSmooth_initToPool>:
{
24010fe4:	b538      	push	{r3, r4, r5, lr}
24010fe6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010fea:	680c      	ldr	r4, [r1, #0]
{
24010fec:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010fee:	201c      	movs	r0, #28
{
24010ff0:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010ff4:	4621      	mov	r1, r4
{
24010ff6:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010ffa:	f001 ffcf 	bl	24012f9c <mpool_alloc>
24010ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011002:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24011038 <tExpSmooth_initToPool+0x54>
24011006:	6028      	str	r0, [r5, #0]
24011008:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
2401100c:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011010:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011014:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24011016:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
2401101a:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
2401101e:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24011022:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24011026:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
2401102a:	6863      	ldr	r3, [r4, #4]
2401102c:	685b      	ldr	r3, [r3, #4]
2401102e:	6183      	str	r3, [r0, #24]
}
24011030:	ecbd 8b02 	vpop	{d8}
24011034:	bd38      	pop	{r3, r4, r5, pc}
24011036:	bf00      	nop
24011038:	00000000 	.word	0x00000000

2401103c <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
2401103c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
2401103e:	ed83 0a05 	vstr	s0, [r3, #20]
}
24011042:	4770      	bx	lr

24011044 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24011044:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
24011046:	edd3 6a04 	vldr	s13, [r3, #16]
2401104a:	ed93 0a03 	vldr	s0, [r3, #12]
2401104e:	ed93 7a02 	vldr	s14, [r3, #8]
24011052:	ee20 0a26 	vmul.f32	s0, s0, s13
24011056:	edd3 7a05 	vldr	s15, [r3, #20]
2401105a:	eea7 0a27 	vfma.f32	s0, s14, s15
2401105e:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
24011062:	4770      	bx	lr

24011064 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
24011064:	b538      	push	{r3, r4, r5, lr}
24011066:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401106a:	680d      	ldr	r5, [r1, #0]
{
2401106c:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
2401106e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011072:	2028      	movs	r0, #40	; 0x28
24011074:	4629      	mov	r1, r5
{
24011076:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
2401107a:	f001 ff8f 	bl	24012f9c <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
2401107e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 240110c8 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011082:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011084:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24011088:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
2401108a:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
2401108c:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24011090:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24011094:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24011098:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401109c:	68db      	ldr	r3, [r3, #12]
2401109e:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
240110a0:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240110a2:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
240110a6:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240110aa:	ee68 0a20 	vmul.f32	s1, s16, s1
240110ae:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240110b2:	f022 fa49 	bl	24033548 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
240110b6:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240110ba:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
240110be:	edc4 8a04 	vstr	s17, [r4, #16]
}
240110c2:	ecbd 8b02 	vpop	{d8}
240110c6:	bd38      	pop	{r3, r4, r5, pc}
240110c8:	00000000 	.word	0x00000000

240110cc <tOnePole_setFreq>:
{
240110cc:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
240110ce:	6804      	ldr	r4, [r0, #0]
{
240110d0:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240110d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240110d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011104 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240110dc:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
240110e0:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240110e4:	ee60 0aa7 	vmul.f32	s1, s1, s15
240110e8:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240110ec:	f022 fa2c 	bl	24033548 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
240110f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240110f4:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
240110f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
240110fc:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011100:	bd10      	pop	{r4, pc}
24011102:	bf00      	nop
24011104:	00000000 	.word	0x00000000

24011108 <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
24011108:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
2401110a:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
2401110e:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011112:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
24011116:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
2401111a:	edd3 6a05 	vldr	s13, [r3, #20]
2401111e:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24011122:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
24011126:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
2401112a:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
2401112e:	4770      	bx	lr

24011130 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011130:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2401116c <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011134:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011138:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401113c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24011170 <tOnePole_setSampleRate+0x40>
{
24011140:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011142:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011144:	edd4 0a01 	vldr	s1, [r4, #4]
24011148:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
2401114c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011150:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011154:	f022 f9f8 	bl	24033548 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24011158:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401115c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011160:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011164:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011168:	bd10      	pop	{r4, pc}
2401116a:	bf00      	nop
2401116c:	40c90fdb 	.word	0x40c90fdb
24011170:	00000000 	.word	0x00000000

24011174 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24011174:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24011176:	680c      	ldr	r4, [r1, #0]
{
24011178:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
2401117a:	2028      	movs	r0, #40	; 0x28
2401117c:	4621      	mov	r1, r4
2401117e:	f001 ff0d 	bl	24012f9c <mpool_alloc>
24011182:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011184:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
24011186:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011188:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
2401118a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401118e:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
24011190:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
24011192:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
24011194:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011196:	6242      	str	r2, [r0, #36]	; 0x24
}
24011198:	bd38      	pop	{r3, r4, r5, pc}
2401119a:	bf00      	nop

2401119c <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
2401119c:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
2401119e:	edd3 6a07 	vldr	s13, [r3, #28]
240111a2:	edd3 7a03 	vldr	s15, [r3, #12]
240111a6:	edd3 5a08 	vldr	s11, [r3, #32]
240111aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
240111ae:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
240111b2:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
240111b6:	ed93 6a02 	vldr	s12, [r3, #8]
240111ba:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
240111be:	edc3 6a08 	vstr	s13, [r3, #32]
    float in = input * f->gain;
240111c2:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
240111c6:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
240111ca:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
240111ce:	eea6 0a07 	vfma.f32	s0, s12, s14
240111d2:	4770      	bx	lr

240111d4 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
240111d4:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
240111d6:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
240111da:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
240111de:	ed83 1a04 	vstr	s2, [r3, #16]
}
240111e2:	4770      	bx	lr

240111e4 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
240111e4:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
240111e6:	680c      	ldr	r4, [r1, #0]
{
240111e8:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
240111ea:	2044      	movs	r0, #68	; 0x44
240111ec:	4621      	mov	r1, r4
240111ee:	f001 fed5 	bl	24012f9c <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
240111f2:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
240111f4:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
240111f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
240111fa:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
240111fc:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
240111fe:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
24011200:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
24011202:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
24011204:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
24011206:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24011208:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
2401120a:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401120c:	68d3      	ldr	r3, [r2, #12]
2401120e:	6403      	str	r3, [r0, #64]	; 0x40
}
24011210:	bd38      	pop	{r3, r4, r5, pc}
24011212:	bf00      	nop

24011214 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24011214:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24011280 <tBiQuad_setSampleRate+0x6c>
24011218:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
2401121c:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
2401121e:	6804      	ldr	r4, [r0, #0]
{
24011220:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24011224:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011228:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
2401122c:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24011230:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
24011234:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011238:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
2401123c:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24011240:	f006 ff4e 	bl	240180e0 <cosf>
24011244:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24011248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
2401124a:	ee28 8a27 	vmul.f32	s16, s16, s15
2401124e:	ee28 8a00 	vmul.f32	s16, s16, s0
24011252:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24011256:	b17b      	cbz	r3, 24011278 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24011258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
2401125c:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
2401125e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24011262:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24011264:	ee77 7ae8 	vsub.f32	s15, s15, s17
24011268:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
2401126c:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24011270:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24011274:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24011278:	ecbd 8b02 	vpop	{d8}
2401127c:	bd10      	pop	{r4, pc}
2401127e:	bf00      	nop
24011280:	40c90fdb 	.word	0x40c90fdb

24011284 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
24011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011286:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
2401128a:	6996      	ldr	r6, [r2, #24]
{
2401128c:	4607      	mov	r7, r0
2401128e:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011290:	2044      	movs	r0, #68	; 0x44
24011292:	4631      	mov	r1, r6
{
24011294:	eef0 8a40 	vmov.f32	s17, s0
24011298:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
2401129c:	f001 fe7e 	bl	24012f9c <mpool_alloc>
240112a0:	6038      	str	r0, [r7, #0]
240112a2:	4604      	mov	r4, r0
    svf->mempool = m;
240112a4:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
240112a6:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
240112a8:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
240112aa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 2401135c <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
240112ae:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240112b0:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
240112b4:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
240112b6:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
240112ba:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240112bc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
240112c0:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
240112c4:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
240112c6:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
240112c8:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
240112cc:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240112d0:	f007 fc46 	bl	24018b60 <tanf>
    svf->k = 1.0f/Q;
240112d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
240112d8:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
240112dc:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
240112de:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
240112e0:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
240112e4:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
240112e6:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
240112e8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240112ec:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
240112f0:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240112f4:	eeb0 7a67 	vmov.f32	s14, s15
240112f8:	eea0 7a26 	vfma.f32	s14, s0, s13
240112fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
24011300:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011304:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24011308:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
2401130c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24011310:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24011314:	d007      	beq.n	24011326 <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24011316:	2d02      	cmp	r5, #2
24011318:	d008      	beq.n	2401132c <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
2401131a:	b96d      	cbnz	r5, 24011338 <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
2401131c:	4b10      	ldr	r3, [pc, #64]	; (24011360 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
2401131e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24011322:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
24011324:	6363      	str	r3, [r4, #52]	; 0x34
}
24011326:	ecbd 8b02 	vpop	{d8}
2401132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
2401132c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24011330:	6366      	str	r6, [r4, #52]	; 0x34
}
24011332:	ecbd 8b02 	vpop	{d8}
24011336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
24011338:	2d03      	cmp	r5, #3
2401133a:	d009      	beq.n	24011350 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
2401133c:	2d04      	cmp	r5, #4
2401133e:	d1f2      	bne.n	24011326 <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24011340:	4a07      	ldr	r2, [pc, #28]	; (24011360 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
24011342:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24011346:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
2401134a:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
2401134c:	6363      	str	r3, [r4, #52]	; 0x34
}
2401134e:	e7ea      	b.n	24011326 <tSVF_init+0xa2>
        svf->cBK = -1.0f;
24011350:	4b03      	ldr	r3, [pc, #12]	; (24011360 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24011352:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
24011356:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
24011358:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
2401135a:	e7e4      	b.n	24011326 <tSVF_init+0xa2>
2401135c:	40490fdb 	.word	0x40490fdb
24011360:	bf800000 	.word	0xbf800000

24011364 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
24011364:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24011366:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
2401136a:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401136e:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011372:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011376:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
2401137a:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2401137e:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
24011382:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
24011386:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401138a:	edd3 2a08 	vldr	s5, [r3, #32]
2401138e:	ee67 7a84 	vmul.f32	s15, s15, s8
24011392:	ed93 2a07 	vldr	s4, [r3, #28]
24011396:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2401139a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
2401139e:	eea2 5a23 	vfma.f32	s10, s4, s7
240113a2:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240113a6:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240113aa:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
240113ae:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
240113b2:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
240113b6:	eed5 6aa4 	vfnms.f32	s13, s11, s9
240113ba:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
240113be:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
240113c2:	edc3 6a05 	vstr	s13, [r3, #20]
}
240113c6:	eea3 7a80 	vfma.f32	s14, s7, s0
240113ca:	eeb0 0a47 	vmov.f32	s0, s14
240113ce:	4770      	bx	lr

240113d0 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
240113d0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240113d4:	4a18      	ldr	r2, [pc, #96]	; (24011438 <tSVF_setFreqFast+0x68>)
240113d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
240113da:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
240113dc:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240113e0:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240113e4:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
240113e8:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240113ec:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
240113f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240113f4:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
240113f8:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240113fc:	ee76 6a86 	vadd.f32	s13, s13, s12
24011400:	ed90 6a00 	vldr	s12, [r0]
24011404:	ee20 0a25 	vmul.f32	s0, s0, s11
24011408:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401140c:	eef0 6a67 	vmov.f32	s13, s15
24011410:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011414:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011418:	eee0 6a07 	vfma.f32	s13, s0, s14
2401141c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
24011420:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011424:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24011428:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
2401142c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011430:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
24011434:	4770      	bx	lr
24011436:	bf00      	nop
24011438:	2401aabc 	.word	0x2401aabc

2401143c <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
2401143c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24011440:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011442:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
24011446:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
2401144a:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401144e:	eeb0 6a47 	vmov.f32	s12, s14
24011452:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
24011456:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401145a:	eea7 6aa5 	vfma.f32	s12, s15, s11
2401145e:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24011462:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011466:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2401146a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
2401146e:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24011472:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24011476:	4770      	bx	lr

24011478 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
24011478:	b538      	push	{r3, r4, r5, lr}
2401147a:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
2401147e:	698c      	ldr	r4, [r1, #24]
{
24011480:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011482:	2018      	movs	r0, #24
{
24011484:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011488:	4621      	mov	r1, r4
2401148a:	f001 fdeb 	bl	24013064 <mpool_calloc>
2401148e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24011490:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011492:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011496:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24011498:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401149a:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
2401149e:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114a0:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
240114a4:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
240114a6:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240114aa:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114ae:	edc0 7a03 	vstr	s15, [r0, #12]
}
240114b2:	ecbd 8b02 	vpop	{d8}
240114b6:	bd38      	pop	{r3, r4, r5, pc}

240114b8 <tHighpass_initToPool>:
{
240114b8:	b538      	push	{r3, r4, r5, lr}
240114ba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240114be:	680c      	ldr	r4, [r1, #0]
{
240114c0:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240114c2:	2018      	movs	r0, #24
{
240114c4:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240114c8:	4621      	mov	r1, r4
240114ca:	f001 fdcb 	bl	24013064 <mpool_calloc>
240114ce:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240114d0:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240114d6:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
240114d8:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240114da:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240114de:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114e0:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
240114e4:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
240114e6:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240114ea:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114ee:	edc0 7a03 	vstr	s15, [r0, #12]
}
240114f2:	ecbd 8b02 	vpop	{d8}
240114f6:	bd38      	pop	{r3, r4, r5, pc}

240114f8 <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
240114f8:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240114fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240114fe:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24011502:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24011506:	eee7 7a40 	vfms.f32	s15, s14, s0
2401150a:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401150e:	4770      	bx	lr

24011510 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
24011510:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24011512:	edd3 7a01 	vldr	s15, [r3, #4]
24011516:	ed93 7a02 	vldr	s14, [r3, #8]
2401151a:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
2401151e:	ed83 0a01 	vstr	s0, [r3, #4]
24011522:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24011526:	ee30 0a27 	vadd.f32	s0, s0, s15
2401152a:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
2401152e:	4770      	bx	lr

24011530 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24011530:	eddf 6a07 	vldr	s13, [pc, #28]	; 24011550 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24011534:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
24011538:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
2401153a:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401153e:	edd3 6a04 	vldr	s13, [r3, #16]
24011542:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24011546:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
2401154a:	edc3 7a03 	vstr	s15, [r3, #12]
}
2401154e:	4770      	bx	lr
24011550:	40c90fdb 	.word	0x40c90fdb

24011554 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
24011554:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24011556:	edd3 6a03 	vldr	s13, [r3, #12]
2401155a:	ed93 7a02 	vldr	s14, [r3, #8]
2401155e:	ee70 7a66 	vsub.f32	s15, s0, s13
24011562:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24011566:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2401156a:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401156e:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
24011572:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24011576:	edd3 4a08 	vldr	s9, [r3, #32]
2401157a:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401157e:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
24011582:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24011586:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
2401158a:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401158e:	eeb0 5a47 	vmov.f32	s10, s14
24011592:	eea4 0a87 	vfma.f32	s0, s9, s14
24011596:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401159a:	eef0 7a66 	vmov.f32	s15, s13
}
2401159e:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240115a2:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240115a6:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
240115aa:	edc3 7a03 	vstr	s15, [r3, #12]
}
240115ae:	4770      	bx	lr

240115b0 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
240115b0:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
240115b2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240115b4:	eddf 7a98 	vldr	s15, [pc, #608]	; 24011818 <tVZFilter_calcCoeffs+0x268>
{
240115b8:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240115bc:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240115c0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
240115c4:	ee68 8a87 	vmul.f32	s17, s17, s14
240115c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
240115cc:	eeb0 0a68 	vmov.f32	s0, s17
240115d0:	f007 fac6 	bl	24018b60 <tanf>
    
    switch( f->type )
240115d4:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240115d6:	eeb0 8a40 	vmov.f32	s16, s0
240115da:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
240115de:	2b0a      	cmp	r3, #10
240115e0:	f200 8117 	bhi.w	24011812 <tVZFilter_calcCoeffs+0x262>
240115e4:	e8df f013 	tbh	[pc, r3, lsl #1]
240115e8:	002f0026 	.word	0x002f0026
240115ec:	00410038 	.word	0x00410038
240115f0:	0056004d 	.word	0x0056004d
240115f4:	00a1008b 	.word	0x00a1008b
240115f8:	010a00b7 	.word	0x010a00b7
240115fc:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240115fe:	edd4 7a05 	vldr	s15, [r4, #20]
24011602:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011606:	eeb1 7a67 	vneg.f32	s14, s15
2401160a:	61e3      	str	r3, [r4, #28]
2401160c:	6263      	str	r3, [r4, #36]	; 0x24
2401160e:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011612:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011616:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401161a:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
2401161e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011622:	eee7 6a88 	vfma.f32	s13, s15, s16
24011626:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401162a:	edc4 7a06 	vstr	s15, [r4, #24]
}
2401162e:	ecbd 8b02 	vpop	{d8}
24011632:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011634:	2300      	movs	r3, #0
24011636:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401163a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401163e:	61e3      	str	r3, [r4, #28]
24011640:	6223      	str	r3, [r4, #32]
24011642:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011644:	e7e5      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011646:	2300      	movs	r3, #0
24011648:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401164c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011650:	6223      	str	r3, [r4, #32]
24011652:	6263      	str	r3, [r4, #36]	; 0x24
24011654:	61e2      	str	r2, [r4, #28]
            break;
24011656:	e7dc      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011658:	2300      	movs	r3, #0
2401165a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2401165e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011662:	61e3      	str	r3, [r4, #28]
24011664:	6263      	str	r3, [r4, #36]	; 0x24
24011666:	6222      	str	r2, [r4, #32]
            break;
24011668:	e7d3      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401166a:	edd4 7a05 	vldr	s15, [r4, #20]
2401166e:	2300      	movs	r3, #0
24011670:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24011674:	61e3      	str	r3, [r4, #28]
24011676:	ee27 7a27 	vmul.f32	s14, s14, s15
2401167a:	6263      	str	r3, [r4, #36]	; 0x24
2401167c:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24011680:	e7c7      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011682:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011686:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24011688:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401168c:	6222      	str	r2, [r4, #32]
2401168e:	61e3      	str	r3, [r4, #28]
24011690:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011692:	e7be      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011694:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011698:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2401169c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240116a0:	ee60 0aa7 	vmul.f32	s1, s1, s15
240116a4:	f007 f8fc 	bl	240188a0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240116a8:	ee28 0a80 	vmul.f32	s0, s17, s0
240116ac:	f007 fa58 	bl	24018b60 <tanf>
            float r  = f->g/wl;
240116b0:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116b4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
240116b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240116bc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
240116c0:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240116c4:	ed84 7a07 	vstr	s14, [r4, #28]
240116c8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240116cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116d0:	eea7 7aa7 	vfma.f32	s14, s15, s15
240116d4:	eef0 6a47 	vmov.f32	s13, s14
240116d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240116dc:	ee77 7a45 	vsub.f32	s15, s14, s10
240116e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
240116e4:	ee87 7a86 	vdiv.f32	s14, s15, s12
240116e8:	eef1 7ac7 	vsqrt.f32	s15, s14
240116ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240116f0:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240116f4:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240116f8:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
240116fc:	e789      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
240116fe:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011702:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011706:	edd4 7a05 	vldr	s15, [r4, #20]
2401170a:	eef1 6ac7 	vsqrt.f32	s13, s14
2401170e:	ed84 7a07 	vstr	s14, [r4, #28]
24011712:	6263      	str	r3, [r4, #36]	; 0x24
24011714:	ee27 6a27 	vmul.f32	s12, s14, s15
24011718:	ed84 6a08 	vstr	s12, [r4, #32]
2401171c:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011720:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011724:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011728:	e773      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
2401172a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2401172e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011732:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011736:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2401173a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
2401173e:	61e3      	str	r3, [r4, #28]
24011740:	ee27 6a27 	vmul.f32	s12, s14, s15
24011744:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011748:	eeb1 7ae6 	vsqrt.f32	s14, s13
2401174c:	ee20 8a07 	vmul.f32	s16, s0, s14
24011750:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011754:	e75d      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
24011756:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2401175a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2401175e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011762:	eddf 0a2e 	vldr	s1, [pc, #184]	; 2401181c <tVZFilter_calcCoeffs+0x26c>
24011766:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
2401176a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401176e:	eeb0 0a48 	vmov.f32	s0, s16
24011772:	eea7 0a67 	vfms.f32	s0, s14, s15
24011776:	f001 fbf3 	bl	24012f60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401177a:	eddf 0a28 	vldr	s1, [pc, #160]	; 2401181c <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2401177e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011782:	eeb0 0a68 	vmov.f32	s0, s17
24011786:	f001 fbef 	bl	24012f68 <minimum>
            f->cB = 1.0f-x*x;
2401178a:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401178e:	edd4 7a05 	vldr	s15, [r4, #20]
24011792:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011796:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401179a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
2401179e:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240117a2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117a6:	ee76 5a06 	vadd.f32	s11, s12, s12
240117aa:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
240117ae:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117b2:	eee6 7a06 	vfma.f32	s15, s12, s12
240117b6:	eee0 7a00 	vfma.f32	s15, s0, s0
240117ba:	eee0 7a65 	vfms.f32	s15, s0, s11
240117be:	ee86 0aa7 	vdiv.f32	s0, s13, s15
240117c2:	f001 f903 	bl	240129cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
240117c6:	edd4 5a07 	vldr	s11, [r4, #28]
240117ca:	ed94 6a08 	vldr	s12, [r4, #32]
240117ce:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
240117d2:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117d6:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
240117da:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240117de:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
240117e2:	ee65 5a80 	vmul.f32	s11, s11, s0
240117e6:	ee26 6a00 	vmul.f32	s12, s12, s0
240117ea:	ee26 0a80 	vmul.f32	s0, s13, s0
240117ee:	edc4 5a07 	vstr	s11, [r4, #28]
240117f2:	ed84 6a08 	vstr	s12, [r4, #32]
240117f6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
240117fa:	e70a      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
240117fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011800:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011804:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011806:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2401180a:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
2401180e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011810:	e6ff      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
24011812:	edd4 7a05 	vldr	s15, [r4, #20]
24011816:	e6fc      	b.n	24011612 <tVZFilter_calcCoeffs+0x62>
24011818:	40490fdb 	.word	0x40490fdb
2401181c:	00000000 	.word	0x00000000

24011820 <tVZFilter_initToPool>:
{
24011820:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24011822:	6817      	ldr	r7, [r2, #0]
{
24011824:	4605      	mov	r5, r0
24011826:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011828:	204c      	movs	r0, #76	; 0x4c
2401182a:	4639      	mov	r1, r7
{
2401182c:	ed2d 8b04 	vpush	{d8-d9}
24011830:	b083      	sub	sp, #12
24011832:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011836:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2401183a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 24011944 <tVZFilter_initToPool+0x124>
{
2401183e:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24011842:	f001 fbab 	bl	24012f9c <mpool_alloc>
24011846:	6028      	str	r0, [r5, #0]
24011848:	4604      	mov	r4, r0
    f->mempool = m;
2401184a:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401184c:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
24011850:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011852:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
24011856:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401185a:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 24011948 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
2401185e:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011862:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
24011866:	685b      	ldr	r3, [r3, #4]
24011868:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401186a:	f021 fe6d 	bl	24033548 <__LEAF_clip_veneer>
    f->invG = 1.0f/ONE_OVER_SQRT2;
2401186e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 2401194c <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
24011872:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011876:	ee20 6a09 	vmul.f32	s12, s0, s18
2401187a:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
2401187e:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
24011882:	4b33      	ldr	r3, [pc, #204]	; (24011950 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
24011884:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
24011888:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
2401188a:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
2401188e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011892:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011896:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
2401189a:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
2401189c:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
240118a0:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
240118a4:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
240118a8:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
240118ac:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240118b0:	f007 f956 	bl	24018b60 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
240118b4:	ed9f 1a27 	vldr	s2, [pc, #156]	; 24011954 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240118b8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
240118bc:	eef0 0a68 	vmov.f32	s1, s17
240118c0:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
240118c4:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
240118c6:	f021 fe3f 	bl	24033548 <__LEAF_clip_veneer>
240118ca:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
240118ce:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240118d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
240118d6:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
240118da:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
240118dc:	ee60 0aa7 	vmul.f32	s1, s1, s15
240118e0:	f006 ffde 	bl	240188a0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240118e4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
240118e8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
240118ec:	ee67 7a87 	vmul.f32	s15, s15, s14
240118f0:	ee67 7a89 	vmul.f32	s15, s15, s18
240118f4:	ee27 0a80 	vmul.f32	s0, s15, s0
240118f8:	f007 f932 	bl	24018b60 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
240118fc:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24011900:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011904:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011906:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401190a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401190e:	ee27 7a07 	vmul.f32	s14, s14, s14
24011912:	ee77 7ac7 	vsub.f32	s15, s15, s14
24011916:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401191a:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401191e:	eec7 6a87 	vdiv.f32	s13, s15, s14
24011922:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
24011926:	ee77 7aa7 	vadd.f32	s15, s15, s15
2401192a:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
2401192e:	f7ff fe3f 	bl	240115b0 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
24011932:	4628      	mov	r0, r5
}
24011934:	b003      	add	sp, #12
24011936:	ecbd 8b04 	vpop	{d8-d9}
2401193a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
2401193e:	f7ff be37 	b.w	240115b0 <tVZFilter_calcCoeffs>
24011942:	bf00      	nop
24011944:	00000000 	.word	0x00000000
24011948:	40490fdb 	.word	0x40490fdb
2401194c:	3fb504f3 	.word	0x3fb504f3
24011950:	3f3504f3 	.word	0x3f3504f3
24011954:	42c80000 	.word	0x42c80000

24011958 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24011958:	3218      	adds	r2, #24
2401195a:	f7ff bf61 	b.w	24011820 <tVZFilter_initToPool>
2401195e:	bf00      	nop

24011960 <tVZFilter_setFreq>:
{
24011960:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
24011962:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011964:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24011968:	4604      	mov	r4, r0
2401196a:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401196e:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
24011972:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2401198c <tVZFilter_setFreq+0x2c>
24011976:	ee21 1a27 	vmul.f32	s2, s2, s15
2401197a:	f021 fde5 	bl	24033548 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
2401197e:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011980:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24011984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011988:	f7ff be12 	b.w	240115b0 <tVZFilter_calcCoeffs>
2401198c:	00000000 	.word	0x00000000

24011990 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
24011990:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24011994:	4baa      	ldr	r3, [pc, #680]	; (24011c40 <tVZFilter_setFreqFast+0x2b0>)
24011996:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
2401199a:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401199e:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
240119a2:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240119a6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
240119aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240119ae:	ed91 6a01 	vldr	s12, [r1, #4]
{
240119b2:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
240119b4:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
240119b8:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240119ba:	ee37 7a26 	vadd.f32	s14, s14, s13
240119be:	edd1 6a00 	vldr	s13, [r1]
240119c2:	ee67 7a86 	vmul.f32	s15, s15, s12
{
240119c6:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240119ca:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
240119ce:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
240119d0:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
240119d4:	2a0a      	cmp	r2, #10
240119d6:	f200 812f 	bhi.w	24011c38 <tVZFilter_setFreqFast+0x2a8>
240119da:	e8df f012 	tbh	[pc, r2, lsl #1]
240119de:	0026      	.short	0x0026
240119e0:	0038002f 	.word	0x0038002f
240119e4:	004d0041 	.word	0x004d0041
240119e8:	009b0056 	.word	0x009b0056
240119ec:	00cf00b5 	.word	0x00cf00b5
240119f0:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240119f4:	ed94 7a05 	vldr	s14, [r4, #20]
240119f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240119fc:	eef1 6a47 	vneg.f32	s13, s14
24011a00:	61e3      	str	r3, [r4, #28]
24011a02:	6263      	str	r3, [r4, #36]	; 0x24
24011a04:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24011a08:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011a10:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011a14:	eef0 6a47 	vmov.f32	s13, s14
24011a18:	eee0 6a27 	vfma.f32	s13, s0, s15
24011a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011a20:	edc4 7a06 	vstr	s15, [r4, #24]
}
24011a24:	ecbd 8b02 	vpop	{d8}
24011a28:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a2a:	2300      	movs	r3, #0
24011a2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011a30:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a34:	61e3      	str	r3, [r4, #28]
24011a36:	6223      	str	r3, [r4, #32]
24011a38:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011a3a:	e7e5      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011a3c:	2300      	movs	r3, #0
24011a3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011a42:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011a46:	6223      	str	r3, [r4, #32]
24011a48:	6263      	str	r3, [r4, #36]	; 0x24
24011a4a:	61e2      	str	r2, [r4, #28]
            break;
24011a4c:	e7dc      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011a4e:	2300      	movs	r3, #0
24011a50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011a54:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011a58:	61e3      	str	r3, [r4, #28]
24011a5a:	6263      	str	r3, [r4, #36]	; 0x24
24011a5c:	6222      	str	r2, [r4, #32]
            break;
24011a5e:	e7d3      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011a60:	ed94 7a05 	vldr	s14, [r4, #20]
24011a64:	2300      	movs	r3, #0
24011a66:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011a6a:	61e3      	str	r3, [r4, #28]
24011a6c:	ee66 6a87 	vmul.f32	s13, s13, s14
24011a70:	6263      	str	r3, [r4, #36]	; 0x24
24011a72:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011a76:	e7c7      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011a7c:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24011a7e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a82:	6222      	str	r2, [r4, #32]
24011a84:	61e3      	str	r3, [r4, #28]
24011a86:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011a88:	e7be      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011a8a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011a8e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011a92:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24011a96:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011a9a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011a9e:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011aa2:	f000 ffd7 	bl	24012a54 <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011aa6:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24011aaa:	eddf 7a66 	vldr	s15, [pc, #408]	; 24011c44 <tVZFilter_setFreqFast+0x2b4>
24011aae:	ee28 8a07 	vmul.f32	s16, s16, s14
24011ab2:	ee28 8a27 	vmul.f32	s16, s16, s15
24011ab6:	ee28 0a00 	vmul.f32	s0, s16, s0
24011aba:	f000 ff73 	bl	240129a4 <fastertanf>
            float r  = f->g/wl;
24011abe:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011ac2:	eeb0 5a68 	vmov.f32	s10, s17
24011ac6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
24011aca:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011ace:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24011ad2:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011ada:	eea7 5aa7 	vfma.f32	s10, s15, s15
24011ade:	ee85 7a27 	vdiv.f32	s14, s10, s15
24011ae2:	ee77 7a65 	vsub.f32	s15, s14, s11
24011ae6:	ee67 7a86 	vmul.f32	s15, s15, s12
24011aea:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24011aee:	f000 ff6d 	bl	240129cc <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011af2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24011af6:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011afa:	edc4 8a07 	vstr	s17, [r4, #28]
24011afe:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011b02:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011b06:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011b0a:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011b0e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011b12:	e779      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
24011b14:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011b18:	f000 ff58 	bl	240129cc <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b1c:	f000 ff56 	bl	240129cc <fastsqrtf>
24011b20:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011b24:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011b28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b2c:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011b30:	ed94 7a05 	vldr	s14, [r4, #20]
24011b34:	edc4 6a07 	vstr	s13, [r4, #28]
24011b38:	6263      	str	r3, [r4, #36]	; 0x24
24011b3a:	ee66 6a87 	vmul.f32	s13, s13, s14
24011b3e:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b42:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24011b46:	e75f      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
24011b48:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011b4c:	f000 ff3e 	bl	240129cc <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b50:	f000 ff3c 	bl	240129cc <fastsqrtf>
24011b54:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011b58:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011b5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011b60:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b64:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011b68:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
24011b6c:	ee67 6a26 	vmul.f32	s13, s14, s13
24011b70:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011b72:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011b76:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011b7a:	e745      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
24011b7c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011b80:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011b84:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011b88:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24011c48 <tVZFilter_setFreqFast+0x2b8>
24011b8c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
24011b90:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011b94:	eeb0 0a48 	vmov.f32	s0, s16
24011b98:	eea7 0a67 	vfms.f32	s0, s14, s15
24011b9c:	f001 f9e0 	bl	24012f60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ba0:	eddf 0a29 	vldr	s1, [pc, #164]	; 24011c48 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011ba4:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ba8:	eeb0 0a68 	vmov.f32	s0, s17
24011bac:	f001 f9dc 	bl	24012f68 <minimum>
            f->cB = 1.0f-x*x;
24011bb0:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011bb4:	edd4 7a05 	vldr	s15, [r4, #20]
24011bb8:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011bbc:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011bc0:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011bc4:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011bc8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011bcc:	ee76 5a06 	vadd.f32	s11, s12, s12
24011bd0:	ee38 8a08 	vadd.f32	s16, s16, s16
24011bd4:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011bd8:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011bdc:	eee6 7a06 	vfma.f32	s15, s12, s12
24011be0:	eee0 7a00 	vfma.f32	s15, s0, s0
24011be4:	eee0 7a65 	vfms.f32	s15, s0, s11
24011be8:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011bec:	f000 feee 	bl	240129cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011bf0:	edd4 5a07 	vldr	s11, [r4, #28]
24011bf4:	ed94 6a08 	vldr	s12, [r4, #32]
24011bf8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011bfc:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011c00:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24011c04:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24011c08:	ee65 5a80 	vmul.f32	s11, s11, s0
24011c0c:	ee26 6a00 	vmul.f32	s12, s12, s0
24011c10:	ee26 0a80 	vmul.f32	s0, s13, s0
24011c14:	edc4 5a07 	vstr	s11, [r4, #28]
24011c18:	ed84 6a08 	vstr	s12, [r4, #32]
24011c1c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011c20:	e6f2      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
24011c22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011c26:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011c2a:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011c2c:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
24011c30:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24011c34:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011c36:	e6e7      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
24011c38:	ed94 7a05 	vldr	s14, [r4, #20]
24011c3c:	e6e4      	b.n	24011a08 <tVZFilter_setFreqFast+0x78>
24011c3e:	bf00      	nop
24011c40:	2401aabc 	.word	0x2401aabc
24011c44:	40490fdb 	.word	0x40490fdb
24011c48:	00000000 	.word	0x00000000

24011c4c <tVZFilter_setGain>:
{
24011c4c:	b538      	push	{r3, r4, r5, lr}
24011c4e:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011c52:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011c7c <tVZFilter_setGain+0x30>
24011c56:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011c80 <tVZFilter_setGain+0x34>
{
24011c5a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011c5c:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011c5e:	f021 fc73 	bl	24033548 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
24011c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011c66:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24011c68:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
24011c6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011c70:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24011c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011c78:	f7ff bc9a 	b.w	240115b0 <tVZFilter_calcCoeffs>
24011c7c:	457a0000 	.word	0x457a0000
24011c80:	358637bd 	.word	0x358637bd

24011c84 <tVZFilter_setResonance>:
{
24011c84:	b538      	push	{r3, r4, r5, lr}
24011c86:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011c8a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011cb4 <tVZFilter_setResonance+0x30>
24011c8e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011cb8 <tVZFilter_setResonance+0x34>
{
24011c92:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011c94:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011c96:	f021 fc57 	bl	24033548 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
24011c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011c9e:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011ca0:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24011ca4:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011ca8:	edc5 7a05 	vstr	s15, [r5, #20]
}
24011cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011cb0:	f7ff bc7e 	b.w	240115b0 <tVZFilter_calcCoeffs>
24011cb4:	42c80000 	.word	0x42c80000
24011cb8:	3c23d70a 	.word	0x3c23d70a

24011cbc <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24011cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
24011cc0:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011cc2:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24011f38 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
24011cc6:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
24011cca:	b510      	push	{r4, lr}
24011ccc:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
24011cd0:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
24011cd4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
24011cd8:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011cda:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24011cde:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24011ce2:	ee68 8a87 	vmul.f32	s17, s17, s14
24011ce6:	ee68 8aa7 	vmul.f32	s17, s17, s15
24011cea:	eeb0 0a68 	vmov.f32	s0, s17
24011cee:	f006 ff37 	bl	24018b60 <tanf>
    switch( f->type )
24011cf2:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011cf4:	eeb0 8a40 	vmov.f32	s16, s0
24011cf8:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24011cfc:	2b0a      	cmp	r3, #10
24011cfe:	f200 8117 	bhi.w	24011f30 <tVZFilter_setSampleRate+0x274>
24011d02:	e8df f013 	tbh	[pc, r3, lsl #1]
24011d06:	0026      	.short	0x0026
24011d08:	0038002f 	.word	0x0038002f
24011d0c:	004d0041 	.word	0x004d0041
24011d10:	008b0056 	.word	0x008b0056
24011d14:	00b700a1 	.word	0x00b700a1
24011d18:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011d1c:	edd4 7a05 	vldr	s15, [r4, #20]
24011d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011d24:	eeb1 7a67 	vneg.f32	s14, s15
24011d28:	61e3      	str	r3, [r4, #28]
24011d2a:	6263      	str	r3, [r4, #36]	; 0x24
24011d2c:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011d34:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011d38:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24011d3c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011d40:	eee7 6a88 	vfma.f32	s13, s15, s16
24011d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011d48:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
24011d4c:	ecbd 8b02 	vpop	{d8}
24011d50:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d52:	2300      	movs	r3, #0
24011d54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011d58:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011d5c:	61e3      	str	r3, [r4, #28]
24011d5e:	6223      	str	r3, [r4, #32]
24011d60:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24011d62:	e7e5      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011d64:	2300      	movs	r3, #0
24011d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011d6a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24011d6e:	6223      	str	r3, [r4, #32]
24011d70:	6263      	str	r3, [r4, #36]	; 0x24
24011d72:	61e2      	str	r2, [r4, #28]
            break;
24011d74:	e7dc      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011d76:	2300      	movs	r3, #0
24011d78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
24011d7c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24011d80:	61e3      	str	r3, [r4, #28]
24011d82:	6263      	str	r3, [r4, #36]	; 0x24
24011d84:	6222      	str	r2, [r4, #32]
            break;
24011d86:	e7d3      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011d88:	edd4 7a05 	vldr	s15, [r4, #20]
24011d8c:	2300      	movs	r3, #0
24011d8e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24011d92:	61e3      	str	r3, [r4, #28]
24011d94:	ee27 7a27 	vmul.f32	s14, s14, s15
24011d98:	6263      	str	r3, [r4, #36]	; 0x24
24011d9a:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24011d9e:	e7c7      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011da0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011da4:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24011da6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011daa:	6222      	str	r2, [r4, #32]
24011dac:	61e3      	str	r3, [r4, #28]
24011dae:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011db0:	e7be      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011db2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011db6:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011dba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24011dbe:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011dc2:	f006 fd6d 	bl	240188a0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011dc6:	ee28 0a80 	vmul.f32	s0, s17, s0
24011dca:	f006 fec9 	bl	24018b60 <tanf>
            float r  = f->g/wl;
24011dce:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dd2:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24011dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011dda:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24011dde:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011de2:	ed84 7a07 	vstr	s14, [r4, #28]
24011de6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011dea:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011dee:	eea7 7aa7 	vfma.f32	s14, s15, s15
24011df2:	eef0 6a47 	vmov.f32	s13, s14
24011df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011dfa:	ee77 7a45 	vsub.f32	s15, s14, s10
24011dfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
24011e02:	ee87 7a86 	vdiv.f32	s14, s15, s12
24011e06:	eef1 7ac7 	vsqrt.f32	s15, s14
24011e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e0e:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011e12:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e16:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011e1a:	e789      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
24011e1c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011e24:	edd4 7a05 	vldr	s15, [r4, #20]
24011e28:	eef1 6ac7 	vsqrt.f32	s13, s14
24011e2c:	ed84 7a07 	vstr	s14, [r4, #28]
24011e30:	6263      	str	r3, [r4, #36]	; 0x24
24011e32:	ee27 6a27 	vmul.f32	s12, s14, s15
24011e36:	ed84 6a08 	vstr	s12, [r4, #32]
24011e3a:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e3e:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011e42:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011e46:	e773      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
24011e48:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011e4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011e50:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e54:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011e58:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24011e5c:	61e3      	str	r3, [r4, #28]
24011e5e:	ee27 6a27 	vmul.f32	s12, s14, s15
24011e62:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011e66:	eeb1 7ae6 	vsqrt.f32	s14, s13
24011e6a:	ee20 8a07 	vmul.f32	s16, s0, s14
24011e6e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011e72:	e75d      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
24011e74:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011e78:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011e7c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e80:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011f3c <tVZFilter_setSampleRate+0x280>
24011e84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
24011e88:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e8c:	eeb0 0a48 	vmov.f32	s0, s16
24011e90:	eea7 0a67 	vfms.f32	s0, s14, s15
24011e94:	f001 f864 	bl	24012f60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011e98:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011f3c <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011e9c:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ea0:	eeb0 0a68 	vmov.f32	s0, s17
24011ea4:	f001 f860 	bl	24012f68 <minimum>
            f->cB = 1.0f-x*x;
24011ea8:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011eac:	edd4 7a05 	vldr	s15, [r4, #20]
24011eb0:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011eb4:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011eb8:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011ebc:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011ec0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ec4:	ee76 5a06 	vadd.f32	s11, s12, s12
24011ec8:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011ecc:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ed0:	eee6 7a06 	vfma.f32	s15, s12, s12
24011ed4:	eee0 7a00 	vfma.f32	s15, s0, s0
24011ed8:	eee0 7a65 	vfms.f32	s15, s0, s11
24011edc:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011ee0:	f000 fd74 	bl	240129cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011ee4:	edd4 5a07 	vldr	s11, [r4, #28]
24011ee8:	ed94 6a08 	vldr	s12, [r4, #32]
24011eec:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011ef0:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011ef4:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24011ef8:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011efc:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24011f00:	ee65 5a80 	vmul.f32	s11, s11, s0
24011f04:	ee26 6a00 	vmul.f32	s12, s12, s0
24011f08:	ee26 0a80 	vmul.f32	s0, s13, s0
24011f0c:	edc4 5a07 	vstr	s11, [r4, #28]
24011f10:	ed84 6a08 	vstr	s12, [r4, #32]
24011f14:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011f18:	e70a      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
24011f1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011f1e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011f22:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011f24:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011f28:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011f2c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011f2e:	e6ff      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
24011f30:	edd4 7a05 	vldr	s15, [r4, #20]
24011f34:	e6fc      	b.n	24011d30 <tVZFilter_setSampleRate+0x74>
24011f36:	bf00      	nop
24011f38:	40490fdb 	.word	0x40490fdb
24011f3c:	00000000 	.word	0x00000000

24011f40 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
24011f40:	b570      	push	{r4, r5, r6, lr}
24011f42:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24011f46:	698d      	ldr	r5, [r1, #24]
{
24011f48:	eeb0 8a40 	vmov.f32	s16, s0
24011f4c:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011f4e:	2040      	movs	r0, #64	; 0x40
24011f50:	4629      	mov	r1, r5
{
24011f52:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011f56:	f001 f821 	bl	24012f9c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011f5a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011fd4 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011f5e:	6030      	str	r0, [r6, #0]
24011f60:	4604      	mov	r4, r0
    f->mempool = m;
24011f62:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011f64:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
24011f68:	686b      	ldr	r3, [r5, #4]
24011f6a:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
24011f6e:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011f72:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
24011f76:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011f7a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24011f7e:	f006 fabb 	bl	240184f8 <tan>
    f->r = (7.f * resonance + 0.5f);
24011f82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011f86:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24011f8a:	4913      	ldr	r1, [pc, #76]	; (24011fd8 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
24011f8c:	4b13      	ldr	r3, [pc, #76]	; (24011fdc <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24011f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
24011f92:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
24011f96:	2000      	movs	r0, #0
    f->n = 1.836f;
24011f98:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011f9a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
24011f9e:	4910      	ldr	r1, [pc, #64]	; (24011fe0 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
24011fa0:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
24011fa4:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
24011fa6:	4b0f      	ldr	r3, [pc, #60]	; (24011fe4 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
24011fa8:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
24011faa:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
24011fac:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
24011fae:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
24011fb0:	480d      	ldr	r0, [pc, #52]	; (24011fe8 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
24011fb2:	490e      	ldr	r1, [pc, #56]	; (24011fec <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
24011fb4:	4a0e      	ldr	r2, [pc, #56]	; (24011ff0 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
24011fb6:	4b0f      	ldr	r3, [pc, #60]	; (24011ff4 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
24011fb8:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
24011fbc:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24011fc0:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24011fc4:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24011fc6:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24011fc8:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24011fca:	63a3      	str	r3, [r4, #56]	; 0x38
}
24011fcc:	ecbd 8b02 	vpop	{d8}
24011fd0:	bd70      	pop	{r4, r5, r6, pc}
24011fd2:	bf00      	nop
24011fd4:	40490fdb 	.word	0x40490fdb
24011fd8:	3feb020c 	.word	0x3feb020c
24011fdc:	3f6b020c 	.word	0x3f6b020c
24011fe0:	3c23d70a 	.word	0x3c23d70a
24011fe4:	3ca3d70a 	.word	0x3ca3d70a
24011fe8:	3cf5c28f 	.word	0x3cf5c28f
24011fec:	3f0b6efd 	.word	0x3f0b6efd
24011ff0:	3e39e952 	.word	0x3e39e952
24011ff4:	3d23d70a 	.word	0x3d23d70a

24011ff8 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
24011ff8:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011ffa:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011ffe:	ed9f 2aba 	vldr	s4, [pc, #744]	; 240122e8 <tDiodeFilter_tick+0x2f0>
24012002:	eddf 7aba 	vldr	s15, [pc, #744]	; 240122ec <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012006:	eddf 0aba 	vldr	s1, [pc, #744]	; 240122f0 <tDiodeFilter_tick+0x2f8>
2401200a:	eeb0 1a67 	vmov.f32	s2, s15
{
2401200e:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012012:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012016:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401201a:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401201e:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
24012022:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012026:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401202a:	ee26 7ae1 	vnmul.f32	s14, s13, s3
2401202e:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24012032:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012036:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
2401203a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401203e:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012042:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012046:	eea4 7a84 	vfma.f32	s14, s9, s8
2401204a:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401204e:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012052:	ee73 5ac3 	vsub.f32	s11, s7, s6
24012056:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401205a:	ee27 7a22 	vmul.f32	s14, s14, s5
2401205e:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24012062:	ee65 5aa5 	vmul.f32	s11, s11, s11
24012066:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401206a:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401206e:	ee77 4a20 	vadd.f32	s9, s14, s1
24012072:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012076:	eef0 4a67 	vmov.f32	s9, s15
2401207a:	eee7 4a04 	vfma.f32	s9, s14, s8
2401207e:	eeb0 7a42 	vmov.f32	s14, s4
24012082:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012086:	ee81 4a24 	vdiv.f32	s8, s2, s9
2401208a:	ee75 4aa0 	vadd.f32	s9, s11, s1
2401208e:	eeb0 1a67 	vmov.f32	s2, s15
24012092:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012096:	eef0 4a67 	vmov.f32	s9, s15
2401209a:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401209e:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240120a2:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
240120a6:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240120aa:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
240120ae:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240120b2:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240120b6:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240120ba:	ee24 4a06 	vmul.f32	s8, s8, s12
240120be:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
240120c2:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240120c6:	ee25 5a25 	vmul.f32	s10, s10, s11
240120ca:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
240120ce:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120d2:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
240120d6:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120da:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240120de:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120e2:	eee5 9a88 	vfma.f32	s19, s11, s16
240120e6:	eeb0 8a67 	vmov.f32	s16, s15
240120ea:	eee1 8a09 	vfma.f32	s17, s2, s18
240120ee:	eeb0 9a67 	vmov.f32	s18, s15
240120f2:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
240120f6:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120fa:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
240120fe:	ee75 9aa0 	vadd.f32	s19, s11, s1
24012102:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012106:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401210a:	eec2 5a09 	vdiv.f32	s11, s4, s18
2401210e:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012112:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012116:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401211a:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401211e:	eea1 9a25 	vfma.f32	s18, s2, s11
24012122:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012126:	eee1 aaa2 	vfma.f32	s21, s3, s5
2401212a:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401212e:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012132:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012136:	ee89 2a28 	vdiv.f32	s4, s18, s17
2401213a:	eec7 5a88 	vdiv.f32	s11, s15, s16
2401213e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012142:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012146:	ee31 1a20 	vadd.f32	s2, s2, s1
2401214a:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401214e:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012152:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24012156:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401215a:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401215e:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012162:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012166:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401216a:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401216e:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012172:	eeaa aa87 	vfma.f32	s20, s21, s14
24012176:	ee68 aa07 	vmul.f32	s21, s16, s14
2401217a:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401217e:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012182:	eeea 5a82 	vfma.f32	s11, s21, s4
24012186:	eeb0 1a65 	vmov.f32	s2, s11
2401218a:	eef0 5a45 	vmov.f32	s11, s10
2401218e:	eeea 5a89 	vfma.f32	s11, s21, s18
24012192:	eee1 5a27 	vfma.f32	s11, s2, s15
24012196:	ee35 1a09 	vadd.f32	s2, s10, s18
2401219a:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401219e:	ee66 9a87 	vmul.f32	s19, s13, s14
240121a2:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121a6:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121aa:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121ae:	eee1 5a06 	vfma.f32	s11, s2, s12
240121b2:	eeb0 1a66 	vmov.f32	s2, s13
240121b6:	eea9 1a89 	vfma.f32	s2, s19, s18
240121ba:	eea2 1a27 	vfma.f32	s2, s4, s15
240121be:	ee34 2a04 	vadd.f32	s4, s8, s8
240121c2:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121c6:	eeb0 2a41 	vmov.f32	s4, s2
240121ca:	eea0 4aa7 	vfma.f32	s8, s1, s15
240121ce:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
240121d2:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
240121d6:	eef4 5a44 	vcmp.f32	s11, s8
240121da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
240121de:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240121e2:	bf14      	ite	ne
240121e4:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
240121e8:	eddf 5a42 	vldreq	s11, [pc, #264]	; 240122f4 <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
240121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240121f0:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
240121f4:	d069      	beq.n	240122ca <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240121f6:	eef5 7a40 	vcmp.f32	s15, #0.0
240121fa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
240121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012202:	ee37 2a02 	vadd.f32	s4, s14, s4
24012206:	d069      	beq.n	240122dc <tDiodeFilter_tick+0x2e4>
24012208:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401220c:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24012210:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24012214:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012218:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
2401221c:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
24012220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012224:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
24012228:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
2401222c:	bf08      	it	eq
2401222e:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 240122f4 <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
24012232:	eeb0 0a61 	vmov.f32	s0, s3
24012236:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401223a:	ee38 4a06 	vadd.f32	s8, s16, s12
2401223e:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012242:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24012246:	eed4 8a20 	vfnms.f32	s17, s8, s1
2401224a:	eea6 8a20 	vfma.f32	s16, s12, s1
2401224e:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012252:	ee95 8a84 	vfnms.f32	s16, s11, s8
24012256:	eee7 1a84 	vfma.f32	s3, s15, s8
2401225a:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401225e:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012262:	ee35 2ac4 	vsub.f32	s4, s11, s8
24012266:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401226a:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401226e:	ee74 1a60 	vsub.f32	s3, s8, s1
24012272:	ee61 1a86 	vmul.f32	s3, s3, s12
24012276:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401227a:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401227e:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012282:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012286:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401228a:	ee75 5ac8 	vsub.f32	s11, s11, s16
2401228e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012292:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012296:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401229a:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401229e:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122a2:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240122a6:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
240122aa:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240122ae:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122b2:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240122b6:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240122ba:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240122be:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
240122c2:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
240122c6:	f006 bc77 	b.w	24018bb8 <tanhf>
    if (t2 == 0.0f)
240122ca:	eef5 7a40 	vcmp.f32	s15, #0.0
240122ce:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 240122f8 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
240122d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240122f4 <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
240122d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240122da:	d195      	bne.n	24012208 <tDiodeFilter_tick+0x210>
240122dc:	eddf 5a06 	vldr	s11, [pc, #24]	; 240122f8 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
240122e0:	eddf 7a04 	vldr	s15, [pc, #16]	; 240122f4 <tDiodeFilter_tick+0x2fc>
240122e4:	e794      	b.n	24012210 <tDiodeFilter_tick+0x218>
240122e6:	bf00      	nop
240122e8:	43d20000 	.word	0x43d20000
240122ec:	446c4000 	.word	0x446c4000
240122f0:	42d20000 	.word	0x42d20000
240122f4:	358637bd 	.word	0x358637bd
240122f8:	3f800008 	.word	0x3f800008

240122fc <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
240122fc:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240122fe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012302:	ed9f 2aba 	vldr	s4, [pc, #744]	; 240125ec <tDiodeFilter_tickEfficient+0x2f0>
24012306:	eddf 7aba 	vldr	s15, [pc, #744]	; 240125f0 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401230a:	eddf 0aba 	vldr	s1, [pc, #744]	; 240125f4 <tDiodeFilter_tickEfficient+0x2f8>
2401230e:	eeb0 1a67 	vmov.f32	s2, s15
{
24012312:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012316:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401231a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401231e:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012322:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
24012326:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401232a:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401232e:	ee26 7ae1 	vnmul.f32	s14, s13, s3
24012332:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
24012336:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401233a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
2401233e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012342:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012346:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401234a:	eea4 7a84 	vfma.f32	s14, s9, s8
2401234e:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012352:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012356:	ee73 5ac3 	vsub.f32	s11, s7, s6
2401235a:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401235e:	ee27 7a22 	vmul.f32	s14, s14, s5
24012362:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
24012366:	ee65 5aa5 	vmul.f32	s11, s11, s11
2401236a:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401236e:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012372:	ee77 4a20 	vadd.f32	s9, s14, s1
24012376:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401237a:	eef0 4a67 	vmov.f32	s9, s15
2401237e:	eee7 4a04 	vfma.f32	s9, s14, s8
24012382:	eeb0 7a42 	vmov.f32	s14, s4
24012386:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401238a:	ee81 4a24 	vdiv.f32	s8, s2, s9
2401238e:	ee75 4aa0 	vadd.f32	s9, s11, s1
24012392:	eeb0 1a67 	vmov.f32	s2, s15
24012396:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401239a:	eef0 4a67 	vmov.f32	s9, s15
2401239e:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240123a2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240123a6:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
240123aa:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240123ae:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
240123b2:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240123b6:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240123ba:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240123be:	ee24 4a06 	vmul.f32	s8, s8, s12
240123c2:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
240123c6:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240123ca:	ee25 5a25 	vmul.f32	s10, s10, s11
240123ce:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
240123d2:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240123d6:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
240123da:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240123de:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240123e2:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240123e6:	eee5 9a88 	vfma.f32	s19, s11, s16
240123ea:	eeb0 8a67 	vmov.f32	s16, s15
240123ee:	eee1 8a09 	vfma.f32	s17, s2, s18
240123f2:	eeb0 9a67 	vmov.f32	s18, s15
240123f6:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
240123fa:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240123fe:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012402:	ee75 9aa0 	vadd.f32	s19, s11, s1
24012406:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401240a:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401240e:	eec2 5a09 	vdiv.f32	s11, s4, s18
24012412:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012416:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401241a:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401241e:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012422:	eea1 9a25 	vfma.f32	s18, s2, s11
24012426:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401242a:	eee1 aaa2 	vfma.f32	s21, s3, s5
2401242e:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
24012432:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012436:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
2401243a:	ee89 2a28 	vdiv.f32	s4, s18, s17
2401243e:	eec7 5a88 	vdiv.f32	s11, s15, s16
24012442:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012446:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401244a:	ee31 1a20 	vadd.f32	s2, s2, s1
2401244e:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012452:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012456:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401245a:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401245e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012462:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012466:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401246a:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401246e:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012472:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012476:	eeaa aa87 	vfma.f32	s20, s21, s14
2401247a:	ee68 aa07 	vmul.f32	s21, s16, s14
2401247e:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012482:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012486:	eeea 5a82 	vfma.f32	s11, s21, s4
2401248a:	eeb0 1a65 	vmov.f32	s2, s11
2401248e:	eef0 5a45 	vmov.f32	s11, s10
24012492:	eeea 5a89 	vfma.f32	s11, s21, s18
24012496:	eee1 5a27 	vfma.f32	s11, s2, s15
2401249a:	ee35 1a09 	vadd.f32	s2, s10, s18
2401249e:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240124a2:	ee66 9a87 	vmul.f32	s19, s13, s14
240124a6:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240124aa:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240124ae:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240124b2:	eee1 5a06 	vfma.f32	s11, s2, s12
240124b6:	eeb0 1a66 	vmov.f32	s2, s13
240124ba:	eea9 1a89 	vfma.f32	s2, s19, s18
240124be:	eea2 1a27 	vfma.f32	s2, s4, s15
240124c2:	ee34 2a04 	vadd.f32	s4, s8, s8
240124c6:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240124ca:	eeb0 2a41 	vmov.f32	s4, s2
240124ce:	eea0 4aa7 	vfma.f32	s8, s1, s15
240124d2:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
240124d6:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
240124da:	eef4 5a44 	vcmp.f32	s11, s8
240124de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
240124e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240124e6:	bf14      	ite	ne
240124e8:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
240124ec:	eddf 5a42 	vldreq	s11, [pc, #264]	; 240125f8 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
240124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240124f4:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
240124f8:	d069      	beq.n	240125ce <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240124fa:	eef5 7a40 	vcmp.f32	s15, #0.0
240124fe:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24012502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012506:	ee37 2a02 	vadd.f32	s4, s14, s4
2401250a:	d069      	beq.n	240125e0 <tDiodeFilter_tickEfficient+0x2e4>
2401250c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24012510:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24012514:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
24012518:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401251c:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
24012520:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
24012524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012528:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
2401252c:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
24012530:	bf08      	it	eq
24012532:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 240125f8 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
24012536:	eeb0 0a61 	vmov.f32	s0, s3
2401253a:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401253e:	ee38 4a06 	vadd.f32	s8, s16, s12
24012542:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012546:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401254a:	eed4 8a20 	vfnms.f32	s17, s8, s1
2401254e:	eea6 8a20 	vfma.f32	s16, s12, s1
24012552:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24012556:	ee95 8a84 	vfnms.f32	s16, s11, s8
2401255a:	eee7 1a84 	vfma.f32	s3, s15, s8
2401255e:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24012562:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012566:	ee35 2ac4 	vsub.f32	s4, s11, s8
2401256a:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401256e:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012572:	ee74 1a60 	vsub.f32	s3, s8, s1
24012576:	ee61 1a86 	vmul.f32	s3, s3, s12
2401257a:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401257e:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012582:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012586:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401258a:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401258e:	ee75 5ac8 	vsub.f32	s11, s11, s16
24012592:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012596:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401259a:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2401259e:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240125a2:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240125a6:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240125aa:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
240125ae:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240125b2:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240125b6:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
240125ba:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
240125be:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
240125c2:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
240125c6:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
240125ca:	f000 babd 	b.w	24012b48 <LEAF_tanh>
    if (t2 == 0.0f)
240125ce:	eef5 7a40 	vcmp.f32	s15, #0.0
240125d2:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 240125fc <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
240125d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240125f8 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
240125da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240125de:	d195      	bne.n	2401250c <tDiodeFilter_tickEfficient+0x210>
240125e0:	eddf 5a06 	vldr	s11, [pc, #24]	; 240125fc <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
240125e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 240125f8 <tDiodeFilter_tickEfficient+0x2fc>
240125e8:	e794      	b.n	24012514 <tDiodeFilter_tickEfficient+0x218>
240125ea:	bf00      	nop
240125ec:	43d20000 	.word	0x43d20000
240125f0:	446c4000 	.word	0x446c4000
240125f4:	42d20000 	.word	0x42d20000
240125f8:	358637bd 	.word	0x358637bd
240125fc:	3f800008 	.word	0x3f800008

24012600 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
24012600:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012604:	4b0d      	ldr	r3, [pc, #52]	; (2401263c <tDiodeFilter_setFreqFast+0x3c>)
24012606:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
2401260a:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2401260c:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
24012610:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012614:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012618:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
2401261c:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012620:	edd0 6a01 	vldr	s13, [r0, #4]
24012624:	ee77 7a87 	vadd.f32	s15, s15, s14
24012628:	ed90 7a00 	vldr	s14, [r0]
2401262c:	ee20 0a26 	vmul.f32	s0, s0, s13
24012630:	eea7 0a27 	vfma.f32	s0, s14, s15
24012634:	ed81 0a02 	vstr	s0, [r1, #8]
}
24012638:	4770      	bx	lr
2401263a:	bf00      	nop
2401263c:	2401aabc 	.word	0x2401aabc

24012640 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24012640:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012644:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
24012648:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
2401264c:	eef0 0a67 	vmov.f32	s1, s15
{
24012650:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24012652:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24012654:	eee0 0a07 	vfma.f32	s1, s0, s14
24012658:	eeb0 0a67 	vmov.f32	s0, s15
2401265c:	f020 ff74 	bl	24033548 <__LEAF_clip_veneer>
24012660:	ed84 0a03 	vstr	s0, [r4, #12]
}
24012664:	bd10      	pop	{r4, pc}
24012666:	bf00      	nop

24012668 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
24012668:	b570      	push	{r4, r5, r6, lr}
2401266a:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
2401266e:	698d      	ldr	r5, [r1, #24]
{
24012670:	eef0 8a40 	vmov.f32	s17, s0
24012674:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24012676:	2038      	movs	r0, #56	; 0x38
24012678:	4629      	mov	r1, r5
{
2401267a:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401267e:	f000 fc8d 	bl	24012f9c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
24012682:	eddf 7a18 	vldr	s15, [pc, #96]	; 240126e4 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24012686:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
24012688:	2301      	movs	r3, #1
    f->mempool = m;
2401268a:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
2401268c:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
24012690:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24012692:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
24012694:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
24012698:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
2401269c:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
240126a0:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
240126a2:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240126a6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240126aa:	f005 ff25 	bl	240184f8 <tan>
240126ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
240126b2:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
240126b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
240126ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
240126be:	490a      	ldr	r1, [pc, #40]	; (240126e8 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
240126c0:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
240126c4:	4b09      	ldr	r3, [pc, #36]	; (240126ec <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
240126c6:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
240126ca:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
240126ce:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
240126d0:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
240126d2:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
240126d4:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
240126d8:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
240126dc:	62a3      	str	r3, [r4, #40]	; 0x28
}
240126de:	ecbd 8b02 	vpop	{d8}
240126e2:	bd70      	pop	{r4, r5, r6, pc}
240126e4:	40490fdb 	.word	0x40490fdb
240126e8:	3dcccccd 	.word	0x3dcccccd
240126ec:	3d23d70a 	.word	0x3d23d70a

240126f0 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
240126f0:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
240126f2:	eddf 7a8f 	vldr	s15, [pc, #572]	; 24012930 <tLadderFilter_tick+0x240>
{
240126f6:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
240126fa:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
240126fc:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24012700:	2900      	cmp	r1, #0
24012702:	f340 8110 	ble.w	24012926 <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
2401270a:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401270e:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
24012712:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
24012716:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401271a:	ed92 7a08 	vldr	s14, [r2, #32]
2401271e:	ee72 2a27 	vadd.f32	s5, s4, s15
24012722:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
24012726:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401272a:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2401272e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24012732:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
24012736:	ee25 9a28 	vmul.f32	s18, s10, s17
2401273a:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401273e:	ee62 2a87 	vmul.f32	s5, s5, s14
24012742:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24012746:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
2401274a:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
2401274c:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012750:	ed9f 8a78 	vldr	s16, [pc, #480]	; 24012934 <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24012754:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
24012758:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
2401275a:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
2401275e:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
24012762:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012764:	ee65 5aa5 	vmul.f32	s11, s11, s11
24012768:	ee26 6a06 	vmul.f32	s12, s12, s12
2401276c:	ee66 6aa6 	vmul.f32	s13, s13, s13
24012770:	ee22 baa5 	vmul.f32	s22, s5, s11
24012774:	ee26 ca22 	vmul.f32	s24, s12, s5
24012778:	ee72 5a25 	vadd.f32	s11, s4, s11
2401277c:	ee32 6a06 	vadd.f32	s12, s4, s12
24012780:	ee66 baa2 	vmul.f32	s23, s13, s5
24012784:	eecb ea25 	vdiv.f32	s29, s22, s11
24012788:	ee8c ba06 	vdiv.f32	s22, s24, s12
2401278c:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
24012790:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012794:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
24012798:	ee27 7a07 	vmul.f32	s14, s14, s14
2401279c:	ee77 eaee 	vsub.f32	s29, s15, s29
240127a0:	ee77 6acb 	vsub.f32	s13, s15, s22
240127a4:	ee62 5a87 	vmul.f32	s11, s5, s14
240127a8:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
240127ac:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240127b0:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
240127b4:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240127b8:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
240127bc:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
240127c0:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
240127c4:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
240127c8:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
240127cc:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
240127d0:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240127d4:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
240127d8:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
240127dc:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
240127e0:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240127e4:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
240127e8:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
240127ec:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240127f0:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
240127f4:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240127f8:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
240127fc:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
24012800:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
24012804:	ee73 5a2a 	vadd.f32	s11, s6, s21
24012808:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2401280c:	ee66 6a26 	vmul.f32	s13, s12, s13
24012810:	ee65 5a89 	vmul.f32	s11, s11, s18
24012814:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
24012818:	ee2f 6a2e 	vmul.f32	s12, s30, s29
2401281c:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
24012820:	ee2d 7a07 	vmul.f32	s14, s26, s14
24012824:	ee65 5a8f 	vmul.f32	s11, s11, s30
24012828:	ee60 ea8e 	vmul.f32	s29, s1, s28
2401282c:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012830:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24012834:	eeb0 ea67 	vmov.f32	s28, s15
24012838:	eeab eaad 	vfma.f32	s28, s23, s27
2401283c:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
24012840:	eeb0 ba67 	vmov.f32	s22, s15
24012844:	eeec 5a84 	vfma.f32	s11, s25, s8
24012848:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2401284c:	eec9 ba8e 	vdiv.f32	s23, s19, s28
24012850:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
24012854:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012858:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
2401285c:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
24012860:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012864:	eef0 ca48 	vmov.f32	s25, s16
24012868:	eeab da0b 	vfma.f32	s26, s22, s22
2401286c:	eee5 caa5 	vfma.f32	s25, s11, s11
24012870:	eef1 5acd 	vsqrt.f32	s11, s26
24012874:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24012878:	ee3b ba65 	vsub.f32	s22, s22, s11
2401287c:	eef0 5a40 	vmov.f32	s11, s0
24012880:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
24012884:	eeb0 ba43 	vmov.f32	s22, s6
24012888:	eea5 ba25 	vfma.f32	s22, s10, s11
2401288c:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012890:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
24012894:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012898:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
2401289c:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240128a0:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
240128a4:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240128a8:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
240128ac:	ee36 6a66 	vsub.f32	s12, s12, s13
240128b0:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240128b4:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
240128b8:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240128bc:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
240128c0:	ee76 6ac7 	vsub.f32	s13, s13, s14
240128c4:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240128c8:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
240128cc:	ee37 7a4c 	vsub.f32	s14, s14, s24
240128d0:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
240128d4:	f47f af3e 	bne.w	24012754 <tLadderFilter_tick+0x64>
240128d8:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
240128dc:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
240128e0:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
240128e4:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240128e8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 24012934 <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
240128ec:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240128f0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240128f4:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240128f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240128fc:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
24012900:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012904:	eea0 7aa0 	vfma.f32	s14, s1, s1
24012908:	eef1 7ae5 	vsqrt.f32	s15, s11
2401290c:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
24012910:	ee77 7aa6 	vadd.f32	s15, s15, s13
24012914:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24012918:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
2401291c:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012920:	ecbd 8b10 	vpop	{d8-d15}
24012924:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24012926:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
2401292a:	ed9f ca03 	vldr	s24, [pc, #12]	; 24012938 <tLadderFilter_tick+0x248>
2401292e:	e7db      	b.n	240128e8 <tLadderFilter_tick+0x1f8>
24012930:	3c75c28f 	.word	0x3c75c28f
24012934:	3c23d70a 	.word	0x3c23d70a
24012938:	00000000 	.word	0x00000000

2401293c <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
2401293c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012940:	4b0f      	ldr	r3, [pc, #60]	; (24012980 <tLadderFilter_setFreqFast+0x44>)
24012942:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
24012946:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24012948:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
2401294c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012950:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012954:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
24012958:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2401295c:	edd0 6a01 	vldr	s13, [r0, #4]
24012960:	ee77 7a87 	vadd.f32	s15, s15, s14
24012964:	ed90 7a00 	vldr	s14, [r0]
24012968:	ee20 0a26 	vmul.f32	s0, s0, s13
2401296c:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
24012970:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
24012974:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
24012978:	edc1 7a06 	vstr	s15, [r1, #24]
}
2401297c:	4770      	bx	lr
2401297e:	bf00      	nop
24012980:	2401aabc 	.word	0x2401aabc

24012984 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
24012984:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
24012986:	6804      	ldr	r4, [r0, #0]
{
24012988:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
2401298c:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
24012990:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240129a0 <tLadderFilter_setQ+0x1c>
24012994:	f020 fdd8 	bl	24033548 <__LEAF_clip_veneer>
24012998:	ed84 0a05 	vstr	s0, [r4, #20]
}
2401299c:	bd10      	pop	{r4, pc}
2401299e:	bf00      	nop
240129a0:	3e4ccccd 	.word	0x3e4ccccd

240129a4 <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
240129a4:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
240129a8:	ed9f 6a06 	vldr	s12, [pc, #24]	; 240129c4 <fastertanf+0x20>
240129ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240129c8 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
240129b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
240129b4:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
240129b8:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
240129bc:	ee20 0a27 	vmul.f32	s0, s0, s15
240129c0:	4770      	bx	lr
240129c2:	bf00      	nop
240129c4:	3e502de0 	.word	0x3e502de0
240129c8:	3ea295ea 	.word	0x3ea295ea

240129cc <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240129cc:	ee10 2a10 	vmov	r2, s0
240129d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
240129d4:	4b0d      	ldr	r3, [pc, #52]	; (24012a0c <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240129d6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
240129da:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240129de:	ee60 7a27 	vmul.f32	s15, s0, s15
240129e2:	ee00 3a10 	vmov	s0, r3
240129e6:	ee67 7a80 	vmul.f32	s15, s15, s0
240129ea:	eea0 7a67 	vfms.f32	s14, s0, s15
240129ee:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
240129f2:	ee10 3a10 	vmov	r3, s0
240129f6:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240129fa:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240129fe:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
24012a02:	336e      	adds	r3, #110	; 0x6e
}
24012a04:	ee00 3a10 	vmov	s0, r3
24012a08:	4770      	bx	lr
24012a0a:	bf00      	nop
24012a0c:	5f3759df 	.word	0x5f3759df

24012a10 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24012a10:	ee10 3a10 	vmov	r3, s0
24012a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24012a18:	ee00 3a10 	vmov	s0, r3
}
24012a1c:	4770      	bx	lr
24012a1e:	bf00      	nop

24012a20 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
24012a20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012a24:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012a50 <fasterexpf+0x30>
24012a28:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012a2c:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012a30:	ee20 0a00 	vmul.f32	s0, s0, s0
24012a34:	ee20 0a00 	vmul.f32	s0, s0, s0
24012a38:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012a3c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012a40:	ee20 0a00 	vmul.f32	s0, s0, s0
24012a44:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
24012a48:	ee20 0a00 	vmul.f32	s0, s0, s0
24012a4c:	4770      	bx	lr
24012a4e:	bf00      	nop
24012a50:	3b800000 	.word	0x3b800000

24012a54 <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24012a54:	ee10 3a10 	vmov	r3, s0
24012a58:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24012a7c <fastPowf+0x28>
24012a5c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
24012a60:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
24012a64:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
24012a68:	330b      	adds	r3, #11
24012a6a:	ee07 3a90 	vmov	s15, r3
24012a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012a72:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
24012a76:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
24012a7a:	4770      	bx	lr
24012a7c:	4e7de250 	.word	0x4e7de250

24012a80 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
24012a80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24012b00 <LEAF_shaper+0x80>
24012a84:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012a8c:	d406      	bmi.n	24012a9c <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
24012a8e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 24012b04 <LEAF_shaper+0x84>
24012a92:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012a9a:	dd02      	ble.n	24012aa2 <LEAF_shaper+0x22>
24012a9c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 24012b08 <LEAF_shaper+0x88>
}
24012aa0:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
24012aa2:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012aa6:	ed9f 5a19 	vldr	s10, [pc, #100]	; 24012b0c <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
24012aaa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
24012aae:	ed9f 4a18 	vldr	s8, [pc, #96]	; 24012b10 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012ab2:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
24012ab6:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012aba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
24012abe:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24012ac2:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012ac6:	eddf 5a13 	vldr	s11, [pc, #76]	; 24012b14 <LEAF_shaper+0x94>
24012aca:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
24012ace:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012ad2:	ee66 4aa6 	vmul.f32	s9, s13, s13
24012ad6:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
24012ada:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012ade:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24012ae2:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012ae6:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
24012aea:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012aee:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012af2:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
24012af6:	ee20 0a80 	vmul.f32	s0, s1, s0
24012afa:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
24012afe:	4770      	bx	lr
24012b00:	bfb504f3 	.word	0xbfb504f3
24012b04:	3fb504f3 	.word	0x3fb504f3
24012b08:	00000000 	.word	0x00000000
24012b0c:	3c800000 	.word	0x3c800000
24012b10:	3f272f05 	.word	0x3f272f05
24012b14:	3d4ccccd 	.word	0x3d4ccccd

24012b18 <LEAF_round>:
    rnd = fabsf(rnd);
24012b18:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24012b1c:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012b38 <LEAF_round+0x20>
24012b20:	eef4 0ae7 	vcmpe.f32	s1, s15
24012b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b28:	d905      	bls.n	24012b36 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
24012b2a:	eec0 7a20 	vdiv.f32	s15, s0, s1
24012b2e:	feb8 0a67 	vrinta.f32	s0, s15
24012b32:	ee20 0a20 	vmul.f32	s0, s0, s1
}
24012b36:	4770      	bx	lr
24012b38:	33d6bf95 	.word	0x33d6bf95

24012b3c <LEAF_bitwise_xor>:
    return unholy.f;
24012b3c:	ee10 3a10 	vmov	r3, s0
24012b40:	4043      	eors	r3, r0
24012b42:	ee00 3a10 	vmov	s0, r3
}
24012b46:	4770      	bx	lr

24012b48 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
24012b48:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
24012b4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b54:	d418      	bmi.n	24012b88 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
24012b56:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24012b5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b62:	dd02      	ble.n	24012b6a <LEAF_tanh+0x22>
        return 1.0f;
24012b64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
24012b68:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
24012b6a:	ee60 6a00 	vmul.f32	s13, s0, s0
24012b6e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
24012b72:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
24012b76:	ee36 7aa7 	vadd.f32	s14, s13, s15
24012b7a:	eee6 7a86 	vfma.f32	s15, s13, s12
24012b7e:	ee27 7a00 	vmul.f32	s14, s14, s0
24012b82:	ee87 0a27 	vdiv.f32	s0, s14, s15
24012b86:	4770      	bx	lr
        return -1.0f;
24012b88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012b8c:	4770      	bx	lr
24012b8e:	bf00      	nop

24012b90 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
24012b90:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
24012b92:	1e4b      	subs	r3, r1, #1
24012b94:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
24012b98:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
24012b9a:	ee07 3a90 	vmov	s15, r3
24012b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012ba2:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
24012ba6:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24012baa:	dd16      	ble.n	24012bda <LEAF_generate_exp+0x4a>
24012bac:	4604      	mov	r4, r0
24012bae:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012bb2:	eeb0 8a60 	vmov.f32	s16, s1
24012bb6:	eef0 8a40 	vmov.f32	s17, s0
24012bba:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24012bbe:	eef0 0a48 	vmov.f32	s1, s16
24012bc2:	eeb0 0a68 	vmov.f32	s0, s17
24012bc6:	f005 fe6b 	bl	240188a0 <powf>
24012bca:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24012bce:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24012bd2:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012bd6:	42a5      	cmp	r5, r4
24012bd8:	d1f1      	bne.n	24012bbe <LEAF_generate_exp+0x2e>
    }
}
24012bda:	ecbd 8b04 	vpop	{d8-d9}
24012bde:	bd38      	pop	{r3, r4, r5, pc}

24012be0 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
24012be0:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24012be2:	ee31 1a40 	vsub.f32	s2, s2, s0
{
24012be6:	460d      	mov	r5, r1
24012be8:	4604      	mov	r4, r0
24012bea:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24012bee:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
24012bf2:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
24012bf6:	ee81 0a29 	vdiv.f32	s0, s2, s19
24012bfa:	f005 fd2d 	bl	24018658 <logf>
    float increment = 1.0 / (float)(size-1);
24012bfe:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
24012c00:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
24012c02:	ee07 3a90 	vmov	s15, r3
24012c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012c0e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
24012c12:	dd19      	ble.n	24012c48 <LEAF_generate_table_skew_non_sym+0x68>
24012c14:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 24012c50 <LEAF_generate_table_skew_non_sym+0x70>
24012c18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
24012c1c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 24012c54 <LEAF_generate_table_skew_non_sym+0x74>
24012c20:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
24012c24:	eeb0 0a48 	vmov.f32	s0, s16
24012c28:	f005 fd16 	bl	24018658 <logf>
24012c2c:	ee20 0a09 	vmul.f32	s0, s0, s18
24012c30:	f005 fc96 	bl	24018560 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
24012c34:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24012c38:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
24012c3c:	eee9 7a80 	vfma.f32	s15, s19, s0
24012c40:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012c44:	42a5      	cmp	r5, r4
24012c46:	d1ed      	bne.n	24012c24 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
24012c48:	ecbd 8b06 	vpop	{d8-d10}
24012c4c:	bd38      	pop	{r3, r4, r5, pc}
24012c4e:	bf00      	nop
24012c50:	bfb8aa3b 	.word	0xbfb8aa3b
24012c54:	00000000 	.word	0x00000000

24012c58 <LEAF_generate_atodb>:


void LEAF_generate_atodb(float* buffer, int size, float min, float max)
{
24012c58:	b538      	push	{r3, r4, r5, lr}
    float increment = (max-min) / (float)(size-1);
24012c5a:	1e4b      	subs	r3, r1, #1
24012c5c:	ee70 0ac0 	vsub.f32	s1, s1, s0
    float x = min;
    for (int i = 0; i < size; i++)
24012c60:	2900      	cmp	r1, #0
    float increment = (max-min) / (float)(size-1);
24012c62:	ee07 3a90 	vmov	s15, r3
24012c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012c6a:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (max-min) / (float)(size-1);
24012c6e:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012c72:	dd12      	ble.n	24012c9a <LEAF_generate_atodb+0x42>
24012c74:	4604      	mov	r4, r0
24012c76:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012c7a:	eeb0 8a40 	vmov.f32	s16, s0
}


float atodb(float a)
{
    return 20.0f*log10f(a);
24012c7e:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24012c82:	eeb0 0a48 	vmov.f32	s0, s16
24012c86:	f005 ffe9 	bl	24018c5c <log10f>
24012c8a:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
24012c8e:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24012c92:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012c96:	42a5      	cmp	r5, r4
24012c98:	d1f3      	bne.n	24012c82 <LEAF_generate_atodb+0x2a>
}
24012c9a:	ecbd 8b04 	vpop	{d8-d9}
24012c9e:	bd38      	pop	{r3, r4, r5, pc}

24012ca0 <LEAF_generate_dbtoa>:
{
24012ca0:	b538      	push	{r3, r4, r5, lr}
    float increment = (maxDb-minDb) / (float)(size-1);
24012ca2:	1e4b      	subs	r3, r1, #1
24012ca4:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
24012ca8:	2900      	cmp	r1, #0
    float increment = (maxDb-minDb) / (float)(size-1);
24012caa:	ee07 3a90 	vmov	s15, r3
24012cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012cb2:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (maxDb-minDb) / (float)(size-1);
24012cb6:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012cba:	dd14      	ble.n	24012ce6 <LEAF_generate_dbtoa+0x46>
24012cbc:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

float dbtoa(float db)
{
    return powf(10.0f, db * 0.05f);
24012cbe:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24012cec <LEAF_generate_dbtoa+0x4c>
24012cc2:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24012cf0 <LEAF_generate_dbtoa+0x50>
24012cc6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012cca:	eeb0 8a40 	vmov.f32	s16, s0
24012cce:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24012cd2:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24012cd6:	ee20 0a09 	vmul.f32	s0, s0, s18
24012cda:	f005 fc41 	bl	24018560 <expf>
        buffer[i] = dbtoa(x);
24012cde:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012ce2:	42a5      	cmp	r5, r4
24012ce4:	d1f3      	bne.n	24012cce <LEAF_generate_dbtoa+0x2e>
}
24012ce6:	ecbd 8b04 	vpop	{d8-d9}
24012cea:	bd38      	pop	{r3, r4, r5, pc}
24012cec:	3d4ccccd 	.word	0x3d4ccccd
24012cf0:	40135d8e 	.word	0x40135d8e

24012cf4 <LEAF_generate_mtof>:
{
24012cf4:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
24012cf6:	1e4b      	subs	r3, r1, #1
24012cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24012cfc:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
24012cfe:	ee07 3a90 	vmov	s15, r3
24012d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012d06:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
24012d0a:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
24012d0e:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24012d12:	dd29      	ble.n	24012d68 <LEAF_generate_mtof+0x74>
    float x = 0.0f;
24012d14:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24012d7c <LEAF_generate_mtof+0x88>
24012d18:	eef0 9a40 	vmov.f32	s19, s0
24012d1c:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24012d1e:	eddf 8a18 	vldr	s17, [pc, #96]	; 24012d80 <LEAF_generate_mtof+0x8c>
24012d22:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24012d26:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24012d84 <LEAF_generate_mtof+0x90>
24012d2a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24012d2e:	ed9f ca16 	vldr	s24, [pc, #88]	; 24012d88 <LEAF_generate_mtof+0x94>
24012d32:	eddf ba16 	vldr	s23, [pc, #88]	; 24012d8c <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
24012d36:	eeb0 0a69 	vmov.f32	s0, s19
24012d3a:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
24012d3e:	e006      	b.n	24012d4e <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012d40:	eeb4 0ac8 	vcmpe.f32	s0, s16
24012d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d48:	dd11      	ble.n	24012d6e <LEAF_generate_mtof+0x7a>
24012d4a:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24012d4e:	eeb4 0ae8 	vcmpe.f32	s0, s17
24012d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d56:	d8f3      	bhi.n	24012d40 <LEAF_generate_mtof+0x4c>
24012d58:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24012d5c:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012d60:	42a5      	cmp	r5, r4
        x += increment;
24012d62:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24012d66:	d1e6      	bne.n	24012d36 <LEAF_generate_mtof+0x42>
}
24012d68:	ecbd 8b0a 	vpop	{d8-d12}
24012d6c:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012d6e:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012d72:	f005 fbf5 	bl	24018560 <expf>
24012d76:	ee60 7a2b 	vmul.f32	s15, s0, s23
24012d7a:	e7ef      	b.n	24012d5c <LEAF_generate_mtof+0x68>
24012d7c:	00000000 	.word	0x00000000
24012d80:	c4bb8000 	.word	0xc4bb8000
24012d84:	44bb6000 	.word	0x44bb6000
24012d88:	3d6c9820 	.word	0x3d6c9820
24012d8c:	4102d013 	.word	0x4102d013

24012d90 <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012d90:	ee71 1ac0 	vsub.f32	s3, s3, s0
24012d94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
24012d98:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012d9c:	ee71 1aa0 	vadd.f32	s3, s3, s1
24012da0:	eef0 7a60 	vmov.f32	s15, s1
24012da4:	ee30 7ac1 	vsub.f32	s14, s1, s2
24012da8:	ee71 1ac1 	vsub.f32	s3, s3, s2
24012dac:	eed6 7a26 	vfnms.f32	s15, s12, s13
24012db0:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
24012db4:	ee70 7a27 	vadd.f32	s15, s0, s15
24012db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24012dbc:	eee7 7a02 	vfma.f32	s15, s14, s4
24012dc0:	ee67 7a82 	vmul.f32	s15, s15, s4
24012dc4:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24012dc8:	eee7 0a82 	vfma.f32	s1, s15, s4
24012dcc:	eeb0 0a60 	vmov.f32	s0, s1
24012dd0:	4770      	bx	lr
24012dd2:	bf00      	nop

24012dd4 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24012dd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
24012dd8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24012df8 <LEAF_interpolation_linear+0x24>
24012ddc:	fe81 1a67 	vminnm.f32	s2, s2, s15
24012de0:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
24012de4:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24012de8:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24012dec:	eee7 0a80 	vfma.f32	s1, s15, s0
24012df0:	eeb0 0a60 	vmov.f32	s0, s1
24012df4:	4770      	bx	lr
24012df6:	bf00      	nop
24012df8:	00000000 	.word	0x00000000

24012dfc <mtof>:
    if (f <= -1500.0f) return(0);
24012dfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24012e3c <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012e00:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24012e40 <mtof+0x44>
24012e04:	e006      	b.n	24012e14 <mtof+0x18>
24012e06:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e0e:	dd09      	ble.n	24012e24 <mtof+0x28>
24012e10:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24012e14:	eeb4 0ac7 	vcmpe.f32	s0, s14
24012e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e1c:	d8f3      	bhi.n	24012e06 <mtof+0xa>
24012e1e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24012e44 <mtof+0x48>
}
24012e22:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24012e24:	eddf 7a08 	vldr	s15, [pc, #32]	; 24012e48 <mtof+0x4c>
{
24012e28:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012e2a:	ee20 0a27 	vmul.f32	s0, s0, s15
24012e2e:	f005 fb97 	bl	24018560 <expf>
24012e32:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012e4c <mtof+0x50>
24012e36:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24012e3a:	bd08      	pop	{r3, pc}
24012e3c:	c4bb8000 	.word	0xc4bb8000
24012e40:	44bb6000 	.word	0x44bb6000
24012e44:	00000000 	.word	0x00000000
24012e48:	3d6c9820 	.word	0x3d6c9820
24012e4c:	4102d013 	.word	0x4102d013

24012e50 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
24012e50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012e54:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012e88 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012e58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24012e8c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24012e5c:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24012e60:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012e64:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012e68:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24012e70:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012e74:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24012e80:	ee27 0a87 	vmul.f32	s0, s15, s14
24012e84:	4770      	bx	lr
24012e86:	bf00      	nop
24012e88:	396c9820 	.word	0x396c9820
24012e8c:	4102d013 	.word	0x4102d013

24012e90 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24012e90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012e98:	dd0b      	ble.n	24012eb2 <ftom+0x22>
24012e9a:	eddf 7a07 	vldr	s15, [pc, #28]	; 24012eb8 <ftom+0x28>
{
24012e9e:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24012ea0:	ee20 0a27 	vmul.f32	s0, s0, s15
24012ea4:	f005 fbd8 	bl	24018658 <logf>
24012ea8:	eddf 7a04 	vldr	s15, [pc, #16]	; 24012ebc <ftom+0x2c>
24012eac:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24012eb0:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24012eb2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24012ec0 <ftom+0x30>
}
24012eb6:	4770      	bx	lr
24012eb8:	3dfa7ed2 	.word	0x3dfa7ed2
24012ebc:	418a7fac 	.word	0x418a7fac
24012ec0:	c4bb8000 	.word	0xc4bb8000

24012ec4 <fasteratodb>:
{
24012ec4:	b500      	push	{lr}
24012ec6:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
24012ec8:	eeb0 0ac0 	vabs.f32	s0, s0
24012ecc:	a801      	add	r0, sp, #4
24012ece:	f005 f873 	bl	24017fb8 <frexpf>
    Y += -4.11852516267426f;
24012ed2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24012f08 <fasteratodb+0x44>
24012ed6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24012f0c <fasteratodb+0x48>
    Y += 6.02197014179219f;
24012eda:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24012f10 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
24012ede:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
24012ee2:	eddd 7a01 	vldr	s15, [sp, #4]
24012ee6:	eddf 5a0b 	vldr	s11, [pc, #44]	; 24012f14 <fasteratodb+0x50>
24012eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
24012eee:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 24012f18 <fasteratodb+0x54>
    Y += E;
24012ef2:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
24012ef6:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
24012efa:	eee0 7a07 	vfma.f32	s15, s0, s14
}
24012efe:	ee27 0a86 	vmul.f32	s0, s15, s12
24012f02:	b003      	add	sp, #12
24012f04:	f85d fb04 	ldr.w	pc, [sp], #4
24012f08:	3f9da1a8 	.word	0x3f9da1a8
24012f0c:	c083caf5 	.word	0xc083caf5
24012f10:	40c0b3fb 	.word	0x40c0b3fb
24012f14:	404892e0 	.word	0x404892e0
24012f18:	40c0a8c2 	.word	0x40c0a8c2

24012f1c <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24012f1c:	eddf 7a02 	vldr	s15, [pc, #8]	; 24012f28 <fastdbtoa+0xc>
24012f20:	ee20 0a27 	vmul.f32	s0, s0, s15
24012f24:	f005 bb1c 	b.w	24018560 <expf>
24012f28:	3debc8e3 	.word	0x3debc8e3

24012f2c <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24012f2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012f30:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012f5c <fasterdbtoa+0x30>
24012f34:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012f38:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012f3c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012f40:	ee20 0a00 	vmul.f32	s0, s0, s0
24012f44:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012f48:	ee20 0a00 	vmul.f32	s0, s0, s0
24012f4c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012f50:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
24012f54:	ee20 0a00 	vmul.f32	s0, s0, s0
24012f58:	4770      	bx	lr
24012f5a:	bf00      	nop
24012f5c:	39ebc8e3 	.word	0x39ebc8e3

24012f60 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24012f60:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24012f64:	4770      	bx	lr
24012f66:	bf00      	nop

24012f68 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24012f68:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24012f6c:	4770      	bx	lr
24012f6e:	bf00      	nop

24012f70 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012f70:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24012f72:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012f74:	2510      	movs	r5, #16
    pool->usize  = 0;
24012f76:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012f78:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012f7a:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
24012f7c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
24012f7e:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012f84:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24012f86:	440b      	add	r3, r1
24012f88:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24012f8a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24012f8e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24012f90:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24012f94:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012f96:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24012f98:	6183      	str	r3, [r0, #24]
}
24012f9a:	4770      	bx	lr

24012f9c <mpool_alloc>:
{
24012f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24012f9e:	684a      	ldr	r2, [r1, #4]
{
24012fa0:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24012fa2:	6c93      	ldr	r3, [r2, #72]	; 0x48
24012fa4:	3301      	adds	r3, #1
24012fa6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24012fa8:	694b      	ldr	r3, [r1, #20]
24012faa:	2b00      	cmp	r3, #0
24012fac:	d04a      	beq.n	24013044 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012fae:	1dc4      	adds	r4, r0, #7
24012fb0:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012fb4:	e002      	b.n	24012fbc <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24012fb6:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24012fb8:	2b00      	cmp	r3, #0
24012fba:	d043      	beq.n	24013044 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24012fbc:	68da      	ldr	r2, [r3, #12]
24012fbe:	42a2      	cmp	r2, r4
24012fc0:	d3f9      	bcc.n	24012fb6 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012fc2:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012fc4:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24012fc6:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012fca:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012fcc:	4281      	cmp	r1, r0
24012fce:	d246      	bcs.n	2401305e <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012fd0:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012fd4:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24012fd6:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012fd8:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24012fda:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012fdc:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24012fde:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012fe2:	4429      	add	r1, r5
24012fe4:	5111      	str	r1, [r2, r4]
    node->size = size;
24012fe6:	60e8      	str	r0, [r5, #12]
    node->next = next;
24012fe8:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012fec:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012ff0:	429a      	cmp	r2, r3
        pool->head = new_node;
24012ff2:	bf08      	it	eq
24012ff4:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24012ff8:	685a      	ldr	r2, [r3, #4]
24012ffa:	b10a      	cbz	r2, 24013000 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24012ffc:	6899      	ldr	r1, [r3, #8]
24012ffe:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24013000:	689a      	ldr	r2, [r3, #8]
24013002:	b10a      	cbz	r2, 24013008 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24013004:	6859      	ldr	r1, [r3, #4]
24013006:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24013008:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2401300a:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
2401300c:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013010:	f8dc 1004 	ldr.w	r1, [ip, #4]
24013014:	f8dc 200c 	ldr.w	r2, [ip, #12]
24013018:	6b4c      	ldr	r4, [r1, #52]	; 0x34
2401301a:	4422      	add	r2, r4
2401301c:	4402      	add	r2, r0
2401301e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24013022:	694a      	ldr	r2, [r1, #20]
24013024:	42aa      	cmp	r2, r5
24013026:	dd0b      	ble.n	24013040 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24013028:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
2401302a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
2401302c:	b14a      	cbz	r2, 24013042 <mpool_alloc+0xa6>
2401302e:	1e41      	subs	r1, r0, #1
24013030:	460a      	mov	r2, r1
24013032:	f801 5f01 	strb.w	r5, [r1, #1]!
24013036:	68dc      	ldr	r4, [r3, #12]
24013038:	3202      	adds	r2, #2
2401303a:	1a12      	subs	r2, r2, r0
2401303c:	4294      	cmp	r4, r2
2401303e:	d8f7      	bhi.n	24013030 <mpool_alloc+0x94>
    return node_to_alloc->pool;
24013040:	6818      	ldr	r0, [r3, #0]
}
24013042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24013044:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24013048:	1a9b      	subs	r3, r3, r2
2401304a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2401304c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013050:	bf8c      	ite	hi
24013052:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013054:	2100      	movls	r1, #0
24013056:	f004 ff05 	bl	24017e64 <LEAF_internalErrorCallback>
        return NULL;
2401305a:	2000      	movs	r0, #0
}
2401305c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
2401305e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24013060:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24013062:	e7c3      	b.n	24012fec <mpool_alloc+0x50>

24013064 <mpool_calloc>:
{
24013064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24013066:	684a      	ldr	r2, [r1, #4]
{
24013068:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
2401306a:	6c93      	ldr	r3, [r2, #72]	; 0x48
2401306c:	3301      	adds	r3, #1
2401306e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24013070:	694b      	ldr	r3, [r1, #20]
24013072:	2b00      	cmp	r3, #0
24013074:	d044      	beq.n	24013100 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24013076:	1dc4      	adds	r4, r0, #7
24013078:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
2401307c:	e002      	b.n	24013084 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
2401307e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24013080:	2b00      	cmp	r3, #0
24013082:	d03d      	beq.n	24013100 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24013084:	68da      	ldr	r2, [r3, #12]
24013086:	42a2      	cmp	r2, r4
24013088:	d3f9      	bcc.n	2401307e <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
2401308a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
2401308c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
2401308e:	f8dc 1004 	ldr.w	r1, [ip, #4]
24013092:	6b49      	ldr	r1, [r1, #52]	; 0x34
24013094:	4281      	cmp	r1, r0
24013096:	d240      	bcs.n	2401311a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013098:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
2401309c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
2401309e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
240130a0:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
240130a2:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
240130a4:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
240130a6:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
240130aa:	4429      	add	r1, r5
240130ac:	5111      	str	r1, [r2, r4]
    node->size = size;
240130ae:	60e8      	str	r0, [r5, #12]
    node->next = next;
240130b0:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
240130b4:	f8dc 2014 	ldr.w	r2, [ip, #20]
240130b8:	429a      	cmp	r2, r3
        pool->head = new_node;
240130ba:	bf08      	it	eq
240130bc:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
240130c0:	685a      	ldr	r2, [r3, #4]
240130c2:	b10a      	cbz	r2, 240130c8 <mpool_calloc+0x64>
        node->next->prev = node->prev;
240130c4:	6899      	ldr	r1, [r3, #8]
240130c6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
240130c8:	689a      	ldr	r2, [r3, #8]
240130ca:	b10a      	cbz	r2, 240130d0 <mpool_calloc+0x6c>
        node->prev->next = node->next;
240130cc:	6859      	ldr	r1, [r3, #4]
240130ce:	6051      	str	r1, [r2, #4]
    node->next = NULL;
240130d0:	2200      	movs	r2, #0
    node->prev = NULL;
240130d2:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
240130d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
240130da:	f8dc 000c 	ldr.w	r0, [ip, #12]
240130de:	6b49      	ldr	r1, [r1, #52]	; 0x34
240130e0:	4401      	add	r1, r0
240130e2:	68d8      	ldr	r0, [r3, #12]
240130e4:	4401      	add	r1, r0
240130e6:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
240130ea:	68d9      	ldr	r1, [r3, #12]
240130ec:	b131      	cbz	r1, 240130fc <mpool_calloc+0x98>
240130ee:	4610      	mov	r0, r2
240130f0:	6819      	ldr	r1, [r3, #0]
240130f2:	5488      	strb	r0, [r1, r2]
240130f4:	3201      	adds	r2, #1
240130f6:	68d9      	ldr	r1, [r3, #12]
240130f8:	4291      	cmp	r1, r2
240130fa:	d8f9      	bhi.n	240130f0 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
240130fc:	6818      	ldr	r0, [r3, #0]
}
240130fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24013100:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24013104:	1a9b      	subs	r3, r3, r2
24013106:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013108:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
2401310c:	bf8c      	ite	hi
2401310e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013110:	2100      	movls	r1, #0
24013112:	f004 fea7 	bl	24017e64 <LEAF_internalErrorCallback>
        return NULL;
24013116:	2000      	movs	r0, #0
}
24013118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
2401311a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
2401311c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
2401311e:	e7c9      	b.n	240130b4 <mpool_calloc+0x50>

24013120 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24013120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24013124:	699d      	ldr	r5, [r3, #24]
{
24013126:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
24013128:	6868      	ldr	r0, [r5, #4]
2401312a:	6c83      	ldr	r3, [r0, #72]	; 0x48
2401312c:	3301      	adds	r3, #1
2401312e:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
24013130:	696b      	ldr	r3, [r5, #20]
24013132:	b91b      	cbnz	r3, 2401313c <tMempool_init+0x1c>
24013134:	e063      	b.n	240131fe <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
24013136:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24013138:	2b00      	cmp	r3, #0
2401313a:	d060      	beq.n	240131fe <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
2401313c:	68dc      	ldr	r4, [r3, #12]
2401313e:	2c17      	cmp	r4, #23
24013140:	d9f9      	bls.n	24013136 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
24013142:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013144:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
24013148:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
2401314a:	6868      	ldr	r0, [r5, #4]
2401314c:	6b40      	ldr	r0, [r0, #52]	; 0x34
2401314e:	4287      	cmp	r7, r0
24013150:	d952      	bls.n	240131f8 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013152:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24013156:	f100 0c18 	add.w	ip, r0, #24
2401315a:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
2401315e:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013160:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
24013164:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24013168:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
2401316a:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
2401316e:	4420      	add	r0, r4
24013170:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
24013174:	60e7      	str	r7, [r4, #12]
    node->next = next;
24013176:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
2401317a:	6968      	ldr	r0, [r5, #20]
2401317c:	4283      	cmp	r3, r0
        pool->head = new_node;
2401317e:	bf08      	it	eq
24013180:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
24013182:	6858      	ldr	r0, [r3, #4]
24013184:	b108      	cbz	r0, 2401318a <tMempool_init+0x6a>
        node->next->prev = node->prev;
24013186:	689c      	ldr	r4, [r3, #8]
24013188:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
2401318a:	6898      	ldr	r0, [r3, #8]
2401318c:	b108      	cbz	r0, 24013192 <tMempool_init+0x72>
        node->prev->next = node->next;
2401318e:	685c      	ldr	r4, [r3, #4]
24013190:	6044      	str	r4, [r0, #4]
    node->next = NULL;
24013192:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24013194:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
24013196:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2401319a:	f8d5 c004 	ldr.w	ip, [r5, #4]
2401319e:	68e8      	ldr	r0, [r5, #12]
240131a0:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
240131a4:	4430      	add	r0, r6
240131a6:	4404      	add	r4, r0
240131a8:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
240131aa:	f8dc 0014 	ldr.w	r0, [ip, #20]
240131ae:	42b8      	cmp	r0, r7
240131b0:	dd0c      	ble.n	240131cc <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240131b2:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
240131b4:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240131b6:	b154      	cbz	r4, 240131ce <tMempool_init+0xae>
240131b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
240131bc:	4664      	mov	r4, ip
240131be:	f80c 7f01 	strb.w	r7, [ip, #1]!
240131c2:	68de      	ldr	r6, [r3, #12]
240131c4:	3402      	adds	r4, #2
240131c6:	1a24      	subs	r4, r4, r0
240131c8:	42a6      	cmp	r6, r4
240131ca:	d8f7      	bhi.n	240131bc <tMempool_init+0x9c>
    return node_to_alloc->pool;
240131cc:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
240131ce:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240131d2:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
240131d4:	686b      	ldr	r3, [r5, #4]
240131d6:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240131d8:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
240131da:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240131dc:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
240131de:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
240131e0:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240131e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240131e6:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
240131e8:	440b      	add	r3, r1
    node->prev = prev;
240131ea:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
240131ee:	600b      	str	r3, [r1, #0]
    node->size = size;
240131f0:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240131f2:	6141      	str	r1, [r0, #20]
}
240131f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
240131f8:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
240131fa:	685c      	ldr	r4, [r3, #4]
240131fc:	e7bd      	b.n	2401317a <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
240131fe:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013202:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
24013204:	1a52      	subs	r2, r2, r1
24013206:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013208:	bf94      	ite	ls
2401320a:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
2401320c:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2401320e:	f004 fe29 	bl	24017e64 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013212:	2300      	movs	r3, #0
24013214:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
24013218:	686a      	ldr	r2, [r5, #4]
2401321a:	605a      	str	r2, [r3, #4]
2401321c:	deff      	udf	#255	; 0xff
2401321e:	bf00      	nop

24013220 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
24013220:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013222:	698c      	ldr	r4, [r1, #24]
{
24013224:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013226:	2018      	movs	r0, #24
24013228:	4621      	mov	r1, r4
2401322a:	f7ff feb7 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
2401322e:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013230:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
24013232:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24013236:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013238:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401323a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013254 <tCycle_init+0x34>
    c->phase    =  0;
2401323e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013242:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013246:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013248:	ee67 7a87 	vmul.f32	s15, s15, s14
2401324c:	edc0 7a04 	vstr	s15, [r0, #16]
}
24013250:	bd38      	pop	{r3, r4, r5, pc}
24013252:	bf00      	nop
24013254:	4f800000 	.word	0x4f800000

24013258 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24013258:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
2401325a:	4910      	ldr	r1, [pc, #64]	; (2401329c <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401325c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 240132a0 <tCycle_tick+0x48>
    c->phase += c->inc;
24013260:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24013264:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
24013266:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24013268:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2401326a:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
2401326e:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24013270:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
24013274:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24013278:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401327a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
2401327e:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
24013282:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24013284:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24013288:	ee67 7a87 	vmul.f32	s15, s15, s14
2401328c:	ed92 7a00 	vldr	s14, [r2]
24013290:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24013294:	eea7 0a27 	vfma.f32	s0, s14, s15
24013298:	4770      	bx	lr
2401329a:	bf00      	nop
2401329c:	2402213c 	.word	0x2402213c
240132a0:	35000004 	.word	0x35000004

240132a4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
240132a4:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240132a6:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
240132aa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240132ae:	ee20 0a27 	vmul.f32	s0, s0, s15
240132b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240132b6:	ed83 0a02 	vstr	s0, [r3, #8]
}
240132ba:	4770      	bx	lr

240132bc <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
240132bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240132c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240132dc <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
240132c4:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240132c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240132ca:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240132ce:	ee20 0a07 	vmul.f32	s0, s0, s14
240132d2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240132d6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240132da:	4770      	bx	lr
240132dc:	4f800000 	.word	0x4f800000

240132e0 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
240132e0:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
240132e2:	6995      	ldr	r5, [r2, #24]
{
240132e4:	4606      	mov	r6, r0
240132e6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
240132e8:	2018      	movs	r0, #24
240132ea:	4629      	mov	r1, r5
240132ec:	f7ff fe56 	bl	24012f9c <mpool_alloc>
240132f0:	6030      	str	r0, [r6, #0]
    n->mempool = m;
240132f2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
240132f4:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
240132f6:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
240132f8:	691b      	ldr	r3, [r3, #16]
240132fa:	6143      	str	r3, [r0, #20]
}
240132fc:	bd70      	pop	{r4, r5, r6, pc}
240132fe:	bf00      	nop

24013300 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
24013300:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24013302:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
24013304:	6963      	ldr	r3, [r4, #20]
24013306:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24013308:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
2401330a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401330e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24013312:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
24013314:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24013318:	d12f      	bne.n	2401337a <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401331a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24013380 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
2401331e:	eddf 6a19 	vldr	s13, [pc, #100]	; 24013384 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24013322:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013326:	ed94 5a03 	vldr	s10, [r4, #12]
2401332a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401332e:	edd4 3a02 	vldr	s7, [r4, #8]
24013332:	eddf 4a15 	vldr	s9, [pc, #84]	; 24013388 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013336:	eddf 5a15 	vldr	s11, [pc, #84]	; 2401338c <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401333a:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401333e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 24013390 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013342:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013346:	ed94 4a04 	vldr	s8, [r4, #16]
2401334a:	ee27 7a87 	vmul.f32	s14, s15, s14
2401334e:	eddf 4a11 	vldr	s9, [pc, #68]	; 24013394 <tNoise_tick+0x94>
24013352:	ed9f 5a11 	vldr	s10, [pc, #68]	; 24013398 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24013356:	eddf 5a11 	vldr	s11, [pc, #68]	; 2401339c <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401335a:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401335e:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24013362:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24013366:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401336a:	eea7 0a85 	vfma.f32	s0, s15, s10
2401336e:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24013372:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
24013376:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
2401337a:	eeb0 0a67 	vmov.f32	s0, s15
2401337e:	bd10      	pop	{r4, pc}
24013380:	3dcad8a1 	.word	0x3dcad8a1
24013384:	3e97d0ff 	.word	0x3e97d0ff
24013388:	3f7f65fe 	.word	0x3f7f65fe
2401338c:	3f76872b 	.word	0x3f76872b
24013390:	3f86be97 	.word	0x3f86be97
24013394:	3f11eb85 	.word	0x3f11eb85
24013398:	3e3d3c36 	.word	0x3e3d3c36
2401339c:	3d4ccccd 	.word	0x3d4ccccd

240133a0 <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
240133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240133a2:	698e      	ldr	r6, [r1, #24]
{
240133a4:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
240133a6:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
240133aa:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
240133ac:	4631      	mov	r1, r6
240133ae:	f7ff fdf5 	bl	24012f9c <mpool_alloc>
240133b2:	6038      	str	r0, [r7, #0]
    c->mempool = m;
240133b4:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
240133b6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
240133b8:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
240133ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
240133be:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24013424 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
240133c2:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
240133c4:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240133c8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
240133cc:	eddf 7a16 	vldr	s15, [pc, #88]	; 24013428 <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
240133d0:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
240133d4:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
240133d6:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
240133da:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
240133dc:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240133de:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
240133e0:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240133e4:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240133e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240133ec:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
240133ee:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240133f0:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240133f2:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240133f6:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
240133fa:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
240133fc:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
240133fe:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
24013400:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
24013402:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013404:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24013408:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
2401340a:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
2401340c:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013410:	f004 fdca 	bl	24017fa8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24013414:	4629      	mov	r1, r5
24013416:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401341a:	2220      	movs	r2, #32
}
2401341c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24013420:	f004 bdc2 	b.w	24017fa8 <memset>
24013424:	3b14f209 	.word	0x3b14f209
24013428:	43dc0000 	.word	0x43dc0000

2401342c <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
2401342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013430:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
24013434:	6804      	ldr	r4, [r0, #0]
{
24013436:	b083      	sub	sp, #12
24013438:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
2401343a:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
2401343e:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013442:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
24013446:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
2401344a:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
2401344e:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
24013456:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
2401345a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401345e:	f340 80f9 	ble.w	24013654 <tMBPulse_tick+0x228>
24013462:	f8d4 901c 	ldr.w	r9, [r4, #28]
24013466:	f1b9 0f00 	cmp.w	r9, #0
2401346a:	f340 80bd 	ble.w	240135e8 <tMBPulse_tick+0x1bc>
2401346e:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24013472:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24013476:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
2401347a:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401347e:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24013482:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
24013486:	eebd 8ae7 	vcvt.s32.f32	s16, s15
2401348a:	ee37 7a87 	vadd.f32	s14, s15, s14
2401348e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24013492:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
24013496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
2401349a:	2f00      	cmp	r7, #0
2401349c:	f040 80ef 	bne.w	2401367e <tMBPulse_tick+0x252>
        if (sw > 0)
240134a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240134a4:	f340 81a4 	ble.w	240137f0 <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
240134a8:	eef4 aac8 	vcmpe.f32	s21, s16
240134ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240134b0:	f240 8162 	bls.w	24013778 <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
240134b4:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
240134b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240134ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
240134be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240134c2:	f280 8276 	bge.w	240139b2 <tMBPulse_tick+0x586>
240134c6:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
240134c8:	1d33      	adds	r3, r6, #4
240134ca:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
240134ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240134d2:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
240134d6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
240134da:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240134de:	f89d 3005 	ldrb.w	r3, [sp, #5]
240134e2:	2b00      	cmp	r3, #0
240134e4:	f000 8229 	beq.w	2401393a <tMBPulse_tick+0x50e>
240134e8:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240134ec:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240134f0:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240134f4:	f04f 0c00 	mov.w	ip, #0
240134f8:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
240134fc:	4db9      	ldr	r5, [pc, #740]	; (240137e4 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240134fe:	eba8 030c 	sub.w	r3, r8, ip
24013502:	b29b      	uxth	r3, r3
24013504:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
24013508:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2401350c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013510:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013514:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24013518:	f8bd 2006 	ldrh.w	r2, [sp, #6]
2401351c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
24013520:	b289      	uxth	r1, r1
24013522:	f8bd a006 	ldrh.w	sl, [sp, #6]
24013526:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24013528:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401352c:	b280      	uxth	r0, r0
2401352e:	fa1f fa8a 	uxth.w	sl, sl
24013532:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24013536:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
2401353a:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401353e:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013540:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
24013544:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24013548:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401354c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013550:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
24013554:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
24013558:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401355c:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013560:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24013564:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013566:	edda 6a01 	vldr	s13, [sl, #4]
2401356a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401356e:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24013570:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013574:	eee6 7a26 	vfma.f32	s15, s12, s13
24013578:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401357c:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24013580:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
24013584:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24013586:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401358a:	f0c0 80e8 	bcc.w	2401375e <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
2401358e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
24013592:	f10c 0c01 	add.w	ip, ip, #1
24013596:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
2401359a:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401359c:	4594      	cmp	ip, r2
			c->numBLEPs--;
2401359e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
240135a2:	dbac      	blt.n	240134fe <tMBPulse_tick+0xd2>
240135a4:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
240135a8:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
240135ac:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
240135ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
240135b2:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
240135b6:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
240135ba:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
240135be:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
240135c2:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
240135c6:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
240135ca:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
240135ce:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
240135d2:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
240135d6:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
240135da:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
240135de:	b003      	add	sp, #12
240135e0:	ecbd 8b0c 	vpop	{d8-d13}
240135e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
240135e8:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240135ec:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
240135f0:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
240135f4:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
240135f8:	eefd 8ae7 	vcvt.s32.f32	s17, s15
240135fc:	ee37 7a27 	vadd.f32	s14, s14, s15
24013600:	eef8 8ae8 	vcvt.f32.s32	s17, s17
24013604:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24013608:	f040 8457 	bne.w	24013eba <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
2401360c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24013610:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
24013612:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
24013616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
2401361a:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
2401361e:	f340 80a6 	ble.w	2401376e <tMBPulse_tick+0x342>
        if (!k) {
24013622:	2f00      	cmp	r7, #0
24013624:	f040 818e 	bne.w	24013944 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
24013628:	eef4 aacb 	vcmpe.f32	s21, s22
2401362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013630:	f240 8310 	bls.w	24013c54 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
24013634:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013638:	eeb4 bae7 	vcmpe.f32	s22, s15
2401363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013640:	f280 81f1 	bge.w	24013a26 <tMBPulse_tick+0x5fa>
            if (p >= b) {
24013644:	eef4 aac8 	vcmpe.f32	s21, s16
24013648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401364c:	f240 81e1 	bls.w	24013a12 <tMBPulse_tick+0x5e6>
24013650:	464f      	mov	r7, r9
24013652:	e739      	b.n	240134c8 <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
24013654:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24013658:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
2401365c:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
24013660:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
24013664:	eebd 8ae7 	vcvt.s32.f32	s16, s15
24013668:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
2401366c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
24013670:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24013674:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
24013678:	2f00      	cmp	r7, #0
2401367a:	f43f af11 	beq.w	240134a0 <tMBPulse_tick+0x74>
        if (sw > 0)
2401367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013682:	f340 8129 	ble.w	240138d8 <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
24013686:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2401368a:	eeb4 8ae8 	vcmpe.f32	s16, s17
2401368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013692:	f6ff af19 	blt.w	240134c8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
24013696:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
2401369a:	eddf 7a54 	vldr	s15, [pc, #336]	; 240137ec <tMBPulse_tick+0x3c0>
                p -= 1.0f;
2401369e:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
240136a2:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240136a4:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
240136a8:	eeb0 0a4b 	vmov.f32	s0, s22
240136ac:	eea8 0a09 	vfma.f32	s0, s16, s18
240136b0:	f005 f89e 	bl	240187f0 <lrintf>
	r -= (float)i;
240136b4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240136b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240136bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240136c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240136c4:	3301      	adds	r3, #1
            if (!k && p >= b) {
240136c6:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240136ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240136ce:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
240136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240136d6:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240136da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240136de:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240136e2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
240136e6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240136ea:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240136ee:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
240136f2:	f103 0301 	add.w	r3, r3, #1
240136f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240136fa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
240136fe:	f200 8306 	bhi.w	24013d0e <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
24013702:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
24013706:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
24013708:	eeb0 0a4b 	vmov.f32	s0, s22
2401370c:	eea8 0a89 	vfma.f32	s0, s17, s18
24013710:	f005 f86e 	bl	240187f0 <lrintf>
	r -= (float)i;
24013714:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013718:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
2401371c:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
24013720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013724:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013728:	3301      	adds	r3, #1
	r -= (float)i;
2401372a:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401372e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013732:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013736:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401373a:	4a2b      	ldr	r2, [pc, #172]	; (240137e8 <tMBPulse_tick+0x3bc>)
                k = 1;
2401373c:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401373e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013742:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
24013746:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401374a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401374e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
24013752:	443b      	add	r3, r7
24013754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013758:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
2401375c:	e6b4      	b.n	240134c8 <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401375e:	f89d 3005 	ldrb.w	r3, [sp, #5]
24013762:	f10c 0c01 	add.w	ip, ip, #1
24013766:	4563      	cmp	r3, ip
24013768:	f73f aec9 	bgt.w	240134fe <tMBPulse_tick+0xd2>
2401376c:	e71a      	b.n	240135a4 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
2401376e:	f100 81be 	bmi.w	24013aee <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
24013772:	eeb0 8a68 	vmov.f32	s16, s17
24013776:	e6a7      	b.n	240134c8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
24013778:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
2401377c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 240137ec <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
24013780:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
24013784:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
24013788:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2401378c:	eeb0 0a6b 	vmov.f32	s0, s23
24013790:	eeab 0a28 	vfma.f32	s0, s22, s17
24013794:	f005 f82c 	bl	240187f0 <lrintf>
	r -= (float)i;
24013798:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401379c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240137a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240137a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240137a8:	4a0f      	ldr	r2, [pc, #60]	; (240137e8 <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240137aa:	3301      	adds	r3, #1
                x = -0.5f;
240137ac:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240137b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240137b4:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
240137b8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240137bc:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240137c0:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240137c4:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
240137c8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240137cc:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240137d0:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240137d4:	3301      	adds	r3, #1
240137d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240137da:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
240137de:	2301      	movs	r3, #1
}
240137e0:	e669      	b.n	240134b6 <tMBPulse_tick+0x8a>
240137e2:	bf00      	nop
240137e4:	240288c0 	.word	0x240288c0
240137e8:	bf800000 	.word	0xbf800000
240137ec:	42800000 	.word	0x42800000
            if (p < 0.0f) {
240137f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
240137f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240137f8:	f57f ae66 	bpl.w	240134c8 <tMBPulse_tick+0x9c>
240137fc:	eef5 7a40 	vcmp.f32	s15, #0.0
24013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013804:	f57f ae60 	bpl.w	240134c8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
24013808:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
2401380c:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 240137ec <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
24013810:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
24013814:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
24013818:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401381c:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
24013820:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
24013824:	eeac 0a28 	vfma.f32	s0, s24, s17
24013828:	f004 ffe2 	bl	240187f0 <lrintf>
	r -= (float)i;
2401382c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013830:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013834:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401383c:	4ad0      	ldr	r2, [pc, #832]	; (24013b80 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401383e:	3301      	adds	r3, #1
            if (k && p < b) {
24013840:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013848:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
2401384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24013850:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013854:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013858:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401385c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
24013860:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013864:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013868:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
2401386c:	f103 0301 	add.w	r3, r3, #1
24013870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013874:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
24013878:	f340 8323 	ble.w	24013ec2 <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
2401387c:	ee38 ca6a 	vsub.f32	s24, s16, s21
24013880:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24013882:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
24013886:	eeb0 0a6b 	vmov.f32	s0, s23
2401388a:	eea8 0a8c 	vfma.f32	s0, s17, s24
2401388e:	f004 ffaf 	bl	240187f0 <lrintf>
	r -= (float)i;
24013892:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013896:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401389a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240138a2:	3301      	adds	r3, #1
                x = 0.5f;
240138a4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240138a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240138ac:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240138b0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240138b4:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240138b8:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240138bc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
240138c0:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240138c4:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240138c8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
240138cc:	3301      	adds	r3, #1
240138ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240138d2:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
240138d6:	e5f7      	b.n	240134c8 <tMBPulse_tick+0x9c>
        else if (sw < 0)
240138d8:	f57f adf6 	bpl.w	240134c8 <tMBPulse_tick+0x9c>
            if (p < b) {
240138dc:	eef4 aac8 	vcmpe.f32	s21, s16
240138e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138e4:	f300 80d0 	bgt.w	24013a88 <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
240138e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240138f0:	f57f adea 	bpl.w	240134c8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
240138f4:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
240138f8:	eddf 8aa2 	vldr	s17, [pc, #648]	; 24013b84 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
240138fc:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
24013900:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
24013902:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24013906:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
2401390a:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
2401390e:	eea9 0a28 	vfma.f32	s0, s18, s17
24013912:	f004 ff6d 	bl	240187f0 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013916:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
2401391a:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
2401391e:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013922:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013924:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013930:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013934:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
24013938:	e6fd      	b.n	24013736 <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
2401393a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
2401393e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
24013942:	e631      	b.n	240135a8 <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
24013944:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24013948:	eeb4 bae8 	vcmpe.f32	s22, s17
2401394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013950:	f280 811a 	bge.w	24013b88 <tMBPulse_tick+0x75c>
24013954:	eddf ba8b 	vldr	s23, [pc, #556]	; 24013b84 <tMBPulse_tick+0x758>
24013958:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
2401395c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24013960:	eea8 0a2b 	vfma.f32	s0, s16, s23
24013964:	f004 ff44 	bl	240187f0 <lrintf>
	r -= (float)i;
24013968:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401396c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013970:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013978:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401397c:	3301      	adds	r3, #1
                x = 0.5f;
2401397e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013986:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
2401398a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401398e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013992:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013996:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
2401399a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401399e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240139a2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
240139a6:	3301      	adds	r3, #1
240139a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240139ac:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
240139b0:	e648      	b.n	24013644 <tMBPulse_tick+0x218>
                p -= 1.0f;
240139b2:	eddf 7a74 	vldr	s15, [pc, #464]	; 24013b84 <tMBPulse_tick+0x758>
240139b6:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
240139ba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
240139be:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240139c0:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
240139c4:	eea9 0a08 	vfma.f32	s0, s18, s16
240139c8:	f004 ff12 	bl	240187f0 <lrintf>
	r -= (float)i;
240139cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240139d0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240139d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240139d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240139dc:	3301      	adds	r3, #1
                x = 0.5f;
240139de:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240139e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240139e6:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
240139ea:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240139ee:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
240139f2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240139f6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
240139fa:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240139fe:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013a02:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
24013a06:	3301      	adds	r3, #1
24013a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013a0c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
24013a10:	e55a      	b.n	240134c8 <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
24013a12:	eddf 7a5c 	vldr	s15, [pc, #368]	; 24013b84 <tMBPulse_tick+0x758>
24013a16:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
24013a1a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24013a1e:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24013a20:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
24013a24:	e670      	b.n	24013708 <tMBPulse_tick+0x2dc>
24013a26:	eddf ba57 	vldr	s23, [pc, #348]	; 24013b84 <tMBPulse_tick+0x758>
24013a2a:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24013a2e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24013a32:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24013a36:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
24013a3a:	eea8 0aab 	vfma.f32	s0, s17, s23
24013a3e:	f004 fed7 	bl	240187f0 <lrintf>
	r -= (float)i;
24013a42:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013a46:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013a4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013a52:	3301      	adds	r3, #1
                    x = 0.5f;
24013a54:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013a5c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24013a60:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013a64:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013a68:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013a6c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
24013a70:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013a74:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013a78:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
24013a7c:	3301      	adds	r3, #1
24013a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013a82:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
24013a86:	e5dd      	b.n	24013644 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
24013a88:	eddf 8a3e 	vldr	s17, [pc, #248]	; 24013b84 <tMBPulse_tick+0x758>
24013a8c:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
24013a90:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24013a94:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24013a96:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
24013a9a:	eeab 0a28 	vfma.f32	s0, s22, s17
24013a9e:	f004 fea7 	bl	240187f0 <lrintf>
	r -= (float)i;
24013aa2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013aa6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013aaa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013ab2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013ab6:	3301      	adds	r3, #1
                x = 0.5f;
24013ab8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013ac0:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24013ac4:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013ac8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013acc:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013ad0:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
24013ad4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013ad8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013adc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24013ae0:	3301      	adds	r3, #1
24013ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013ae6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
24013aea:	2700      	movs	r7, #0
}
24013aec:	e6fc      	b.n	240138e8 <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
24013aee:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
24013af2:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
24013af6:	2f00      	cmp	r7, #0
24013af8:	f040 80e5 	bne.w	24013cc6 <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
24013afc:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24013b00:	eddf ba20 	vldr	s23, [pc, #128]	; 24013b84 <tMBPulse_tick+0x758>
24013b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013b08:	f100 813c 	bmi.w	24013d84 <tMBPulse_tick+0x958>
24013b0c:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
24013b10:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
24013b14:	2701      	movs	r7, #1
24013b16:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
24013b1a:	eeb0 0a68 	vmov.f32	s0, s17
24013b1e:	eea8 0a6b 	vfms.f32	s0, s16, s23
24013b22:	f004 fe65 	bl	240187f0 <lrintf>
	r -= (float)i;
24013b26:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
24013b2a:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013b2e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013b36:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013b3a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013b3e:	4a10      	ldr	r2, [pc, #64]	; (24013b80 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013b40:	443b      	add	r3, r7
24013b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24013b46:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013b4a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013b4e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013b52:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
24013b56:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013b5a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013b5e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
24013b62:	443b      	add	r3, r7
24013b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013b68:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
24013b6c:	eef4 aacd 	vcmpe.f32	s21, s26
24013b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013b74:	f300 80d0 	bgt.w	24013d18 <tMBPulse_tick+0x8ec>
24013b78:	eeb0 8a4d 	vmov.f32	s16, s26
24013b7c:	e4a4      	b.n	240134c8 <tMBPulse_tick+0x9c>
24013b7e:	bf00      	nop
24013b80:	bf800000 	.word	0xbf800000
24013b84:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
24013b88:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24013b8c:	ed5f ba03 	vldr	s23, [pc, #-12]	; 24013b84 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
24013b90:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
24013b94:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24013b98:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
24013b9c:	eeb0 0a6c 	vmov.f32	s0, s25
24013ba0:	eeac 0a2b 	vfma.f32	s0, s24, s23
24013ba4:	f004 fe24 	bl	240187f0 <lrintf>
	r -= (float)i;
24013ba8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013bac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013bb8:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
24013bba:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013bc2:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
24013bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24013bca:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013bce:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013bd2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013bd6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24013bda:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013bde:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013be2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
24013be6:	f103 0301 	add.w	r3, r3, #1
24013bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013bee:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
24013bf2:	f200 815e 	bhi.w	24013eb2 <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
24013bf6:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
24013bfa:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
24013bfc:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
24013c00:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
24013c04:	eea8 0aab 	vfma.f32	s0, s17, s23
24013c08:	f004 fdf2 	bl	240187f0 <lrintf>
	r -= (float)i;
24013c0c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013c14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013c1c:	4aad      	ldr	r2, [pc, #692]	; (24013ed4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c1e:	3301      	adds	r3, #1
	r -= (float)i;
24013c20:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24013c28:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013c30:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013c34:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
24013c38:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013c3c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013c40:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24013c44:	3301      	adds	r3, #1
24013c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013c4a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
24013c4e:	f8d5 8000 	ldr.w	r8, [r5]
24013c52:	e683      	b.n	2401395c <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
24013c54:	eddf baa0 	vldr	s23, [pc, #640]	; 24013ed8 <tMBPulse_tick+0xaac>
24013c58:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
24013c5c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24013c60:	ee69 ba2b 	vmul.f32	s23, s18, s23
24013c64:	eeac 0a2b 	vfma.f32	s0, s24, s23
24013c68:	f004 fdc2 	bl	240187f0 <lrintf>
	r -= (float)i;
24013c6c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c70:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013c74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013c7c:	4a95      	ldr	r2, [pc, #596]	; (24013ed4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c7e:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
24013c80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013c88:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
24013c8c:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
24013c90:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013c94:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013c98:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013c9c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
24013ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013ca4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013ca8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013cac:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
24013cb0:	f103 0301 	add.w	r3, r3, #1
24013cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013cb8:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
24013cbc:	f8d5 8000 	ldr.w	r8, [r5]
24013cc0:	f6ff ae4c 	blt.w	2401395c <tMBPulse_tick+0x530>
24013cc4:	e6b3      	b.n	24013a2e <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
24013cc6:	eef4 aacb 	vcmpe.f32	s21, s22
24013cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013cce:	f300 80ba 	bgt.w	24013e46 <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
24013cd2:	eeb5 bac0 	vcmpe.f32	s22, #0.0
24013cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013cda:	f57f af47 	bpl.w	24013b6c <tMBPulse_tick+0x740>
24013cde:	eddf ba7e 	vldr	s23, [pc, #504]	; 24013ed8 <tMBPulse_tick+0xaac>
24013ce2:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
24013ce6:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
24013cea:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
24013cec:	eeb0 0a48 	vmov.f32	s0, s16
24013cf0:	eea8 0aab 	vfma.f32	s0, s17, s23
24013cf4:	f004 fd7c 	bl	240187f0 <lrintf>
	r -= (float)i;
24013cf8:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
24013cfc:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013d00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013d08:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013d0c:	e715      	b.n	24013b3a <tMBPulse_tick+0x70e>
                x = 0.5f;
24013d0e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
24013d12:	2700      	movs	r7, #0
24013d14:	f7ff bbd8 	b.w	240134c8 <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
24013d18:	eddf 7a6f 	vldr	s15, [pc, #444]	; 24013ed8 <tMBPulse_tick+0xaac>
24013d1c:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
24013d20:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
24013d24:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24013d26:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
24013d2a:	464f      	mov	r7, r9
}
24013d2c:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
24013d30:	eea9 0a28 	vfma.f32	s0, s18, s17
24013d34:	f004 fd5c 	bl	240187f0 <lrintf>
	r -= (float)i;
24013d38:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013d3c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013d40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013d48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013d4c:	3301      	adds	r3, #1
                x = 0.5f;
24013d4e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013d56:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24013d5a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013d5e:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013d62:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013d66:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
24013d6a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013d6e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013d72:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
24013d76:	3301      	adds	r3, #1
24013d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013d7c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
24013d80:	f7ff bba2 	b.w	240134c8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
24013d84:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
24013d88:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
24013d8c:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
24013d90:	eeb0 0a6c 	vmov.f32	s0, s25
24013d94:	eea8 0aab 	vfma.f32	s0, s17, s23
24013d98:	f004 fd2a 	bl	240187f0 <lrintf>
	r -= (float)i;
24013d9c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013da0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013da4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013dac:	4a49      	ldr	r2, [pc, #292]	; (24013ed4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013dae:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
24013db0:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013db8:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
24013dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24013dc0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013dc4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013dc8:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013dcc:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24013dd0:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013dd4:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013dd8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
24013ddc:	f103 0301 	add.w	r3, r3, #1
24013de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013de4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
24013de8:	dd70      	ble.n	24013ecc <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
24013dea:	ee78 8a6a 	vsub.f32	s17, s16, s21
24013dee:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
24013df0:	eeb0 0a6c 	vmov.f32	s0, s25
24013df4:	ee78 8a8b 	vadd.f32	s17, s17, s22
24013df8:	eea8 0aab 	vfma.f32	s0, s17, s23
24013dfc:	f004 fcf8 	bl	240187f0 <lrintf>
	r -= (float)i;
24013e00:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e04:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013e08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e10:	3301      	adds	r3, #1
	r -= (float)i;
24013e12:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24013e1a:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013e22:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013e26:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
24013e2a:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013e2e:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013e32:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
24013e36:	3301      	adds	r3, #1
24013e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013e3c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
24013e40:	f8d5 8000 	ldr.w	r8, [r5]
24013e44:	e664      	b.n	24013b10 <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
24013e46:	eddf ba24 	vldr	s23, [pc, #144]	; 24013ed8 <tMBPulse_tick+0xaac>
24013e4a:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
24013e4e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24013e52:	ee69 ba2b 	vmul.f32	s23, s18, s23
24013e56:	eeac 0aab 	vfma.f32	s0, s25, s23
24013e5a:	f004 fcc9 	bl	240187f0 <lrintf>
	r -= (float)i;
24013e5e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e62:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24013e66:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24013e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e6e:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
24013e70:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24013e78:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
24013e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24013e80:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24013e84:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
24013e88:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24013e8c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24013e90:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24013e94:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24013e98:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
24013e9c:	f103 0301 	add.w	r3, r3, #1
24013ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24013ea4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
24013ea8:	f8d5 8000 	ldr.w	r8, [r5]
24013eac:	f57f ae30 	bpl.w	24013b10 <tMBPulse_tick+0x6e4>
24013eb0:	e719      	b.n	24013ce6 <tMBPulse_tick+0x8ba>
                    x = 0.5f;
24013eb2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24013eb6:	f7ff bbc5 	b.w	24013644 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
24013eba:	eeb0 8a68 	vmov.f32	s16, s17
24013ebe:	f7ff baea 	b.w	24013496 <tMBPulse_tick+0x6a>
                x = -0.5f;
24013ec2:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
24013ec6:	2701      	movs	r7, #1
24013ec8:	f7ff bafe 	b.w	240134c8 <tMBPulse_tick+0x9c>
                    x = -0.5f;
24013ecc:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
24013ed0:	2701      	movs	r7, #1
24013ed2:	e64b      	b.n	24013b6c <tMBPulse_tick+0x740>
24013ed4:	bf800000 	.word	0xbf800000
24013ed8:	42800000 	.word	0x42800000

24013edc <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
24013edc:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24013ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013ee2:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
24013ee6:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013eea:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24013eee:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013ef2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24013ef6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
24013efa:	4770      	bx	lr

24013efc <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
24013efc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
24013f00:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
24013f02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
24013f06:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
24013f0a:	ee70 7a27 	vadd.f32	s15, s0, s15
24013f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
24013f12:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24013f16:	4770      	bx	lr

24013f18 <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
24013f18:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24013f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24013f1e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24013f22:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24013f26:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24013f2a:	eef1 7a67 	vneg.f32	s15, s15
24013f2e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24013f32:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24013f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f3a:	eef4 6ac7 	vcmpe.f32	s13, s14
24013f3e:	bfcc      	ite	gt
24013f40:	2201      	movgt	r2, #1
24013f42:	2200      	movle	r2, #0
24013f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f48:	f002 0201 	and.w	r2, r2, #1
24013f4c:	bf88      	it	hi
24013f4e:	2200      	movhi	r2, #0
24013f50:	b122      	cbz	r2, 24013f5c <tMBPulse_sync+0x44>
24013f52:	eeb5 0a40 	vcmp.f32	s0, #0.0
24013f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013f5a:	da04      	bge.n	24013f66 <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24013f5c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24013f74 <tMBPulse_sync+0x5c>
24013f60:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24013f64:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24013f66:	ee37 7a66 	vsub.f32	s14, s14, s13
24013f6a:	ee27 7a06 	vmul.f32	s14, s14, s12
24013f6e:	ed83 7a05 	vstr	s14, [r3, #20]
}
24013f72:	4770      	bx	lr
24013f74:	00000000 	.word	0x00000000

24013f78 <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
24013f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24013f7a:	698e      	ldr	r6, [r1, #24]
{
24013f7c:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
24013f7e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
24013f82:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
24013f84:	4631      	mov	r1, r6
24013f86:	f7ff f809 	bl	24012f9c <mpool_alloc>
24013f8a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24013f8c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
24013f8e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24013f90:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
24013f92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24013f96:	ed9f 6a18 	vldr	s12, [pc, #96]	; 24013ff8 <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
24013f9a:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
24013f9c:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
24013fa0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
24013fa4:	eddf 7a15 	vldr	s15, [pc, #84]	; 24013ffc <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
24013fa8:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24013fac:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
24013fae:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
24013fb2:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
24013fb4:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24013fb6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
24013fba:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
24013fc0:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24013fc2:	4b0f      	ldr	r3, [pc, #60]	; (24014000 <tMBTriangle_init+0x88>)
    c->softsync = 0;
24013fc4:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
24013fc6:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
24013fc8:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013fca:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24013fcc:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013fce:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
24013fd0:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
24013fd2:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24013fd6:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24013fda:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
24013fde:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24013fe2:	306c      	adds	r0, #108	; 0x6c
24013fe4:	f003 ffe0 	bl	24017fa8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
24013fe8:	4629      	mov	r1, r5
24013fea:	f104 0044 	add.w	r0, r4, #68	; 0x44
24013fee:	2220      	movs	r2, #32
}
24013ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24013ff4:	f003 bfd8 	b.w	24017fa8 <memset>
24013ff8:	3b14f209 	.word	0x3b14f209
24013ffc:	43dc0000 	.word	0x43dc0000
24014000:	11c01200 	.word	0x11c01200

24014004 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
24014004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24014008:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
2401400c:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
2401400e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
24014012:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
24014016:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
24014018:	ed94 7a03 	vldr	s14, [r4, #12]
{
2401401c:	4607      	mov	r7, r0
    sync = c->sync;
2401401e:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
24014022:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
24014026:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401402a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
2401402e:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
24014032:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
24014036:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
2401403a:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
2401403e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24014040:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
24014042:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
2401404a:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
2401404e:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014052:	f340 8181 	ble.w	24014358 <tMBTriangle_tick+0x354>
24014056:	f8d4 901c 	ldr.w	r9, [r4, #28]
2401405a:	f1b9 0f00 	cmp.w	r9, #0
2401405e:	f340 8138 	ble.w	240142d2 <tMBTriangle_tick+0x2ce>
24014062:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24014066:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401406a:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
2401406e:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24014072:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24014076:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
2401407a:	eebd 8aeb 	vcvt.s32.f32	s16, s23
2401407e:	ee76 6aab 	vadd.f32	s13, s13, s23
24014082:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24014086:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
2401408a:	2e00      	cmp	r6, #0
2401408c:	f040 8177 	bne.w	2401437e <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
24014090:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
24014094:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
24014098:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
2401409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
240140a0:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
240140a4:	f340 8252 	ble.w	2401454c <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
240140a8:	eeb4 8ae9 	vcmpe.f32	s16, s19
240140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240140b0:	f280 820c 	bge.w	240144cc <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
240140b4:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
240140b6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
240140ba:	eeb4 8ac9 	vcmpe.f32	s16, s18
240140be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240140c2:	f280 837b 	bge.w	240147bc <tMBTriangle_tick+0x7b8>
240140c6:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
240140c8:	1d2b      	adds	r3, r5, #4
240140ca:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
240140ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240140d2:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
240140d6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
240140da:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240140de:	f89d 300d 	ldrb.w	r3, [sp, #13]
240140e2:	2b00      	cmp	r3, #0
240140e4:	f000 80d3 	beq.w	2401428e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
240140e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240140ec:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240140f0:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240140f2:	48ea      	ldr	r0, [pc, #936]	; (2401449c <tMBTriangle_tick+0x498>)
240140f4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240140f8:	4fe9      	ldr	r7, [pc, #932]	; (240144a0 <tMBTriangle_tick+0x49c>)
240140fa:	e053      	b.n	240141a4 <tMBTriangle_tick+0x1a0>
240140fc:	f8bd e00e 	ldrh.w	lr, [sp, #14]
24014100:	f8bd 900e 	ldrh.w	r9, [sp, #14]
24014104:	f8bd 300e 	ldrh.w	r3, [sp, #14]
24014108:	fa1f fe8e 	uxth.w	lr, lr
2401410c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
24014110:	fa1f f989 	uxth.w	r9, r9
24014114:	b29b      	uxth	r3, r3
24014116:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
2401411a:	fa1f f888 	uxth.w	r8, r8
2401411e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24014122:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24014126:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401412a:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
2401412e:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24014132:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24014136:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401413a:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
2401413e:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
24014142:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
24014146:	ed99 7a00 	vldr	s14, [r9]
2401414a:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
2401414e:	edd3 5a01 	vldr	s11, [r3, #4]
24014152:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24014156:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401415a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401415e:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014162:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014164:	fa1f fe8e 	uxth.w	lr, lr
24014168:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401416c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24014170:	eee6 7a87 	vfma.f32	s15, s13, s14
24014174:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014178:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
2401417c:	f108 0840 	add.w	r8, r8, #64	; 0x40
24014180:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24014184:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24014188:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
2401418c:	459e      	cmp	lr, r3
2401418e:	d304      	bcc.n	2401419a <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24014190:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24014194:	3b01      	subs	r3, #1
24014196:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401419a:	f89d 300d 	ldrb.w	r3, [sp, #13]
2401419e:	3201      	adds	r2, #1
240141a0:	4293      	cmp	r3, r2
240141a2:	dd74      	ble.n	2401428e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240141a4:	ebac 0302 	sub.w	r3, ip, r2
240141a8:	b29b      	uxth	r3, r3
240141aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
240141ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
240141b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240141b6:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
240141ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
240141be:	b29b      	uxth	r3, r3
240141c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240141c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240141c8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
240141cc:	eef4 7ac6 	vcmpe.f32	s15, s12
240141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240141d4:	d492      	bmi.n	240140fc <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240141d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
240141da:	f8bd e00e 	ldrh.w	lr, [sp, #14]
240141de:	b29b      	uxth	r3, r3
240141e0:	f8bd 800e 	ldrh.w	r8, [sp, #14]
240141e4:	f8bd 900e 	ldrh.w	r9, [sp, #14]
240141e8:	fa1f fe8e 	uxth.w	lr, lr
240141ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240141f0:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
240141f4:	fa1f f989 	uxth.w	r9, r9
240141f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240141fc:	fa1f f888 	uxth.w	r8, r8
24014200:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
24014204:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24014208:	f8bd 300e 	ldrh.w	r3, [sp, #14]
2401420c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24014210:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24014214:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24014218:	b29b      	uxth	r3, r3
2401421a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
2401421e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24014222:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24014226:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
2401422a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
2401422e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
24014232:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
24014236:	edd8 6a01 	vldr	s13, [r8, #4]
2401423a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
2401423e:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24014242:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014246:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401424a:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
2401424e:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014252:	ee76 6ae4 	vsub.f32	s13, s13, s9
24014256:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
2401425a:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
2401425e:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014262:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
24014266:	eee5 7a87 	vfma.f32	s15, s11, s14
2401426a:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401426e:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24014272:	3340      	adds	r3, #64	; 0x40
24014274:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24014278:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
2401427c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24014280:	459e      	cmp	lr, r3
24014282:	d285      	bcs.n	24014190 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24014284:	f89d 300d 	ldrb.w	r3, [sp, #13]
24014288:	3201      	adds	r2, #1
2401428a:	4293      	cmp	r3, r2
2401428c:	dc8a      	bgt.n	240141a4 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
2401428e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24014292:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24014296:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
2401429a:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
2401429c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
240142a0:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
240142a4:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
240142a8:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
240142ac:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
240142b0:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
240142b4:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
240142b8:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
240142bc:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
240142c0:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
240142c4:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
240142c8:	b005      	add	sp, #20
240142ca:	ecbd 8b10 	vpop	{d8-d15}
240142ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
240142d2:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240142d6:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
240142da:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
240142de:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
240142e2:	eefd caeb 	vcvt.s32.f32	s25, s23
240142e6:	ee36 9aab 	vadd.f32	s18, s13, s23
240142ea:	eef8 caec 	vcvt.f32.s32	s25, s25
240142ee:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
240142f2:	f040 863f 	bne.w	24014f74 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
240142f6:	eef5 bac0 	vcmpe.f32	s23, #0.0
240142fa:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
240142fc:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
24014300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24014304:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
24014308:	f340 80ce 	ble.w	240144a8 <tMBTriangle_tick+0x4a4>
        if (!k) {
2401430c:	2e00      	cmp	r6, #0
2401430e:	f040 81e1 	bne.w	240146d4 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
24014312:	eef4 9aee 	vcmpe.f32	s19, s29
24014316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401431a:	f240 8449 	bls.w	24014bb0 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
2401431e:	eef4 eae8 	vcmpe.f32	s29, s17
24014322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014326:	f280 82bf 	bge.w	240148a8 <tMBTriangle_tick+0x8a4>
2401432a:	eddf 7a5e 	vldr	s15, [pc, #376]	; 240144a4 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
2401432e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014332:	ee2c ca27 	vmul.f32	s24, s24, s15
24014336:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
2401433a:	eea8 0a0c 	vfma.f32	s0, s16, s24
2401433e:	f004 fa57 	bl	240187f0 <lrintf>
	r -= (float)i;
24014342:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
24014346:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
2401434a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
2401434e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014352:	eed8 7a0c 	vfnms.f32	s15, s16, s24
24014356:	e203      	b.n	24014760 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
24014358:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
2401435c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24014360:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
24014364:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
24014368:	eebd 8aeb 	vcvt.s32.f32	s16, s23
2401436c:	ee7b 6aa6 	vadd.f32	s13, s23, s13
24014370:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24014374:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
24014378:	2e00      	cmp	r6, #0
2401437a:	f43f ae89 	beq.w	24014090 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
2401437e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
24014382:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
24014386:	ee79 7ac8 	vsub.f32	s15, s19, s16
2401438a:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
2401438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24014392:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
24014396:	f340 815a 	ble.w	2401464e <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
2401439a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
2401439e:	eeb4 8acb 	vcmpe.f32	s16, s22
240143a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143a6:	f6ff ae8f 	blt.w	240140c8 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
240143aa:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
240143ae:	eddf 7a3d 	vldr	s15, [pc, #244]	; 240144a4 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
240143b2:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
240143b6:	683e      	ldr	r6, [r7, #0]
240143b8:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
240143bc:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240143c0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
240143c4:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
240143c8:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
240143cc:	f004 fa10 	bl	240187f0 <lrintf>
	r -= (float)i;
240143d0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143d4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240143d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
240143dc:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
240143e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143e4:	3301      	adds	r3, #1
240143e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
240143ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
240143ee:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240143f2:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240143f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240143fa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240143fe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014402:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24014406:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401440a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401440e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014412:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24014416:	f103 0301 	add.w	r3, r3, #1
2401441a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401441e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
24014422:	f200 843e 	bhi.w	24014ca2 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
24014426:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
2401442a:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401442c:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
24014430:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
24014434:	ee77 7ac8 	vsub.f32	s15, s15, s16
24014438:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
2401443c:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014440:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
24014444:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24014448:	f004 f9d2 	bl	240187f0 <lrintf>
	r -= (float)i;
2401444c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014450:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014454:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
24014458:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
2401445c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014460:	3301      	adds	r3, #1
24014462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014466:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401446a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401446e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014472:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24014476:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401447a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401447e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014482:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014486:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401448a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
2401448e:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014490:	4433      	add	r3, r6
24014492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014496:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401449a:	e615      	b.n	240140c8 <tMBTriangle_tick+0xc4>
2401449c:	240241bc 	.word	0x240241bc
240144a0:	240288c0 	.word	0x240288c0
240144a4:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
240144a8:	f100 828a 	bmi.w	240149c0 <tMBTriangle_tick+0x9bc>
        if (!k) {
240144ac:	2e00      	cmp	r6, #0
240144ae:	f000 81f4 	beq.w	2401489a <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
240144b2:	ee79 7a88 	vadd.f32	s15, s19, s16
240144b6:	ee7c 6ac9 	vsub.f32	s13, s25, s18
240144ba:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
240144be:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
240144c2:	ee77 6aa6 	vadd.f32	s13, s15, s13
240144c6:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
240144ca:	e5fd      	b.n	240140c8 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
240144cc:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 240144a4 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240144d0:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
240144d4:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
240144d8:	f8d7 8000 	ldr.w	r8, [r7]
240144dc:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
240144e0:	ee79 7ac8 	vsub.f32	s15, s19, s16
240144e4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240144e8:	eeae 0a2c 	vfma.f32	s0, s28, s25
240144ec:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
240144f0:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
240144f4:	f004 f97c 	bl	240187f0 <lrintf>
	r -= (float)i;
240144f8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240144fc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014500:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014504:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
24014508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401450c:	3301      	adds	r3, #1
2401450e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014512:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014516:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401451a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401451e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014522:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014526:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401452a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401452e:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014532:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014536:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401453a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401453e:	3301      	adds	r3, #1
24014540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014544:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
24014548:	2301      	movs	r3, #1
}
2401454a:	e5b4      	b.n	240140b6 <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
2401454c:	eeb5 8a40 	vcmp.f32	s16, #0.0
24014550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014554:	f57f adb8 	bpl.w	240140c8 <tMBTriangle_tick+0xc4>
24014558:	eef5 ba40 	vcmp.f32	s23, #0.0
2401455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014560:	f57f adb2 	bpl.w	240140c8 <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
24014564:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
24014568:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 240144a4 <tMBTriangle_tick+0x4a0>
2401456c:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
24014570:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24014574:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
24014578:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401457c:	eeac 0aa8 	vfma.f32	s0, s25, s17
24014580:	ee67 baab 	vmul.f32	s23, s15, s23
24014584:	f004 f934 	bl	240187f0 <lrintf>
	r -= (float)i;
24014588:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401458c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014590:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
24014594:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
24014598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401459c:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401459e:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
240145a6:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
240145aa:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240145ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240145b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240145b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
240145ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
240145be:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240145c2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
240145c6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240145ca:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240145ce:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240145d2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240145d6:	f103 0301 	add.w	r3, r3, #1
240145da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240145de:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
240145e2:	f340 84cb 	ble.w	24014f7c <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
240145e6:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
240145ea:	683f      	ldr	r7, [r7, #0]
240145ec:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
240145f0:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
240145f4:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
240145f8:	eeac 0a8c 	vfma.f32	s0, s25, s24
240145fc:	f004 f8f8 	bl	240187f0 <lrintf>
	r -= (float)i;
24014600:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014604:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014608:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401460c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014610:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
24014612:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401461a:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401461e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014622:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014626:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2401462a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401462e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24014632:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014636:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401463a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401463e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24014642:	3301      	adds	r3, #1
24014644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014648:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401464c:	e53c      	b.n	240140c8 <tMBTriangle_tick+0xc4>
        else if (sw < 0)
2401464e:	f57f ad3b 	bpl.w	240140c8 <tMBTriangle_tick+0xc4>
            if (p < b) {
24014652:	eeb4 8ae9 	vcmpe.f32	s16, s19
24014656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401465a:	f100 8174 	bmi.w	24014946 <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
2401465e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24014662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014666:	f57f ad2f 	bpl.w	240140c8 <tMBTriangle_tick+0xc4>
                p += 1.0f;
2401466a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401466e:	ed1f ba73 	vldr	s22, [pc, #-460]	; 240144a4 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
24014672:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
24014676:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
24014678:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
2401467c:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
24014680:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24014684:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
24014688:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
2401468c:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
24014690:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24014694:	f004 f8ac 	bl	240187f0 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014698:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
2401469c:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240146a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240146a4:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146a8:	3301      	adds	r3, #1
	r -= (float)i;
240146aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240146b2:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240146b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240146ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240146be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240146c2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240146c6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240146ca:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240146ce:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
240146d2:	e6d8      	b.n	24014486 <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
240146d4:	ee3c 9ac9 	vsub.f32	s18, s25, s18
240146d8:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
240146dc:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
240146e0:	eef0 ca4b 	vmov.f32	s25, s22
240146e4:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
240146e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
240146ec:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
240146f0:	f280 81e1 	bge.w	24014ab6 <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240146f4:	ee3d ea2d 	vadd.f32	s28, s26, s27
240146f8:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 240144a4 <tMBTriangle_tick+0x4a0>
240146fc:	ee2c ca27 	vmul.f32	s24, s24, s15
24014700:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
24014704:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014708:	eea8 0a0c 	vfma.f32	s0, s16, s24
2401470c:	f004 f870 	bl	240187f0 <lrintf>
	r -= (float)i;
24014710:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014714:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24014718:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
2401471c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014720:	3301      	adds	r3, #1
	r -= (float)i;
24014722:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401472a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401472e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014732:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014736:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401473a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401473e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014742:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014746:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401474a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401474e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014752:	3301      	adds	r3, #1
24014754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014758:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
2401475c:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014760:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
24014764:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
24014768:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401476c:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
2401476e:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
24014776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401477a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401477e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014782:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
24014786:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
2401478a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401478e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014792:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014796:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401479a:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401479e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240147a2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240147a6:	f103 0301 	add.w	r3, r3, #1
240147aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240147ae:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
240147b2:	d93d      	bls.n	24014830 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
240147b4:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
240147b8:	464e      	mov	r6, r9
240147ba:	e485      	b.n	240140c8 <tMBTriangle_tick+0xc4>
                p -= 1.0f;
240147bc:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 240144a4 <tMBTriangle_tick+0x4a0>
240147c0:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
240147c4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
240147c8:	683f      	ldr	r7, [r7, #0]
240147ca:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240147ce:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
240147d2:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
240147d6:	eea8 0a0c 	vfma.f32	s0, s16, s24
240147da:	f004 f809 	bl	240187f0 <lrintf>
	r -= (float)i;
240147de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240147e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240147ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147ee:	3301      	adds	r3, #1
	scale *= w;
240147f0:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
240147f4:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240147f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240147fc:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014800:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014804:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014808:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2401480c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014810:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24014814:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014818:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401481c:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014820:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24014824:	3301      	adds	r3, #1
24014826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401482a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
2401482e:	e44b      	b.n	240140c8 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
24014830:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
24014834:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
24014836:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401483a:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
2401483e:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
24014842:	eee7 7a2d 	vfma.f32	s15, s14, s27
24014846:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
2401484a:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401484e:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
24014852:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
24014856:	f003 ffcb 	bl	240187f0 <lrintf>
	r -= (float)i;
2401485a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401485e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014862:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014866:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
2401486a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401486e:	3301      	adds	r3, #1
24014870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014874:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014878:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401487c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014880:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24014884:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014888:	eb07 0382 	add.w	r3, r7, r2, lsl #2
2401488c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014890:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014894:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014898:	e5f7      	b.n	2401448a <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
2401489a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
2401489e:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
240148a2:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
240148a6:	e40f      	b.n	240140c8 <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240148a8:	ee7d 7a2d 	vadd.f32	s15, s26, s27
240148ac:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 24014c48 <tMBTriangle_tick+0xc44>
240148b0:	ee2c ca07 	vmul.f32	s24, s24, s14
240148b4:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
240148b8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
240148bc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
240148c0:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
240148c4:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
240148c8:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240148cc:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
240148d0:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
240148d4:	eeab 0a0c 	vfma.f32	s0, s22, s24
240148d8:	f003 ff8a 	bl	240187f0 <lrintf>
	r -= (float)i;
240148dc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148e0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240148e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240148e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148ec:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
240148ee:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
240148f2:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
240148fa:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240148fe:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014902:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014906:	eb08 0343 	add.w	r3, r8, r3, lsl #1
2401490a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401490e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014912:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014916:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401491a:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401491e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014922:	3301      	adds	r3, #1
24014924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014928:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
2401492c:	f003 ff60 	bl	240187f0 <lrintf>
	r -= (float)i;
24014930:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24014934:	f000 013f 	and.w	r1, r0, #63	; 0x3f
24014938:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
2401493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014940:	eed8 7a0c 	vfnms.f32	s15, s16, s24
24014944:	e70c      	b.n	24014760 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
24014946:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 24014c48 <tMBTriangle_tick+0xc44>
2401494a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401494e:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
24014952:	683e      	ldr	r6, [r7, #0]
24014954:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
24014958:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
2401495c:	eeab 0a09 	vfma.f32	s0, s22, s18
24014960:	f003 ff46 	bl	240187f0 <lrintf>
	r -= (float)i;
24014964:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014968:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
2401496c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
24014970:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014974:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014978:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
2401497a:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
2401497e:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014986:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401498a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401498e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014992:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24014996:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401499a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401499e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240149a2:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240149a6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240149aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240149ae:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
240149b2:	3301      	adds	r3, #1
240149b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240149b8:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
240149bc:	2600      	movs	r6, #0
}
240149be:	e64e      	b.n	2401465e <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
240149c0:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
240149c4:	2e00      	cmp	r6, #0
240149c6:	f040 8141 	bne.w	24014c4c <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
240149ca:	eef5 eac0 	vcmpe.f32	s29, #0.0
240149ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240149d2:	f100 81ac 	bmi.w	24014d2e <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240149d6:	ee3d 9a2d 	vadd.f32	s18, s26, s27
240149da:	eddf 7a9b 	vldr	s15, [pc, #620]	; 24014c48 <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
240149de:	ee6d ea2e 	vmul.f32	s29, s26, s29
240149e2:	ee2c ca27 	vmul.f32	s24, s24, s15
240149e6:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
240149ea:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240149ee:	eef1 8a48 	vneg.f32	s17, s16
240149f2:	eea8 0a4c 	vfms.f32	s0, s16, s24
240149f6:	f003 fefb 	bl	240187f0 <lrintf>
	r -= (float)i;
240149fa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240149fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24014a02:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24014a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014a0a:	3301      	adds	r3, #1
	r -= (float)i;
24014a0c:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014a14:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014a1c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014a20:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a24:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014a28:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a2c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014a30:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014a34:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014a38:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014a3c:	3301      	adds	r3, #1
24014a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014a42:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
24014a46:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014a4a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
24014a4e:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
24014a52:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014a56:	3301      	adds	r3, #1
24014a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
24014a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014a60:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014a68:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014a6c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a70:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014a74:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014a78:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014a7c:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014a80:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014a84:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014a88:	f103 0301 	add.w	r3, r3, #1
24014a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014a90:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
24014a94:	f300 810c 	bgt.w	24014cb0 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
24014a98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
24014a9c:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
24014a9e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24014aa2:	ee78 7a67 	vsub.f32	s15, s16, s15
24014aa6:	eeb0 8a4f 	vmov.f32	s16, s30
24014aaa:	ee77 7aa9 	vadd.f32	s15, s15, s19
24014aae:	eee7 8aad 	vfma.f32	s17, s15, s27
24014ab2:	f7ff bb09 	b.w	240140c8 <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
24014ab6:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24014aba:	eddf 7a63 	vldr	s15, [pc, #396]	; 24014c48 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
24014abe:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
24014ac2:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24014ac6:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
24014aca:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24014ace:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
24014ad2:	eeac 0a0f 	vfma.f32	s0, s24, s30
24014ad6:	f003 fe8b 	bl	240187f0 <lrintf>
	r -= (float)i;
24014ada:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014ade:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014ae2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014aea:	3301      	adds	r3, #1
	scale *= w;
24014aec:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
24014af0:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014af8:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014afc:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014b00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014b04:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
24014b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24014b0c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014b10:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014b14:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014b18:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014b1c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014b20:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014b24:	f103 0301 	add.w	r3, r3, #1
24014b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014b2c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24014b30:	f200 81b5 	bhi.w	24014e9e <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24014b34:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
24014b38:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
24014b3a:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
24014b3e:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24014b42:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
24014b46:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
24014b4a:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
24014b4e:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
24014b52:	f003 fe4d 	bl	240187f0 <lrintf>
	r -= (float)i;
24014b56:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014b5a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014b5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014b62:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
24014b66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014b6a:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24014b6c:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014b74:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014b78:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014b7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014b80:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24014b84:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014b88:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
24014b8c:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014b90:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014b94:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014b98:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014b9c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24014ba0:	3301      	adds	r3, #1
24014ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014ba6:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
24014baa:	f8d7 8000 	ldr.w	r8, [r7]
24014bae:	e5a9      	b.n	24014704 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24014bb0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 24014c48 <tMBTriangle_tick+0xc44>
24014bb4:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
24014bb8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014bbc:	ee2c ca07 	vmul.f32	s24, s24, s14
24014bc0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
24014bc4:	eeaf 0a0c 	vfma.f32	s0, s30, s24
24014bc8:	ee27 eaab 	vmul.f32	s28, s15, s23
24014bcc:	f003 fe10 	bl	240187f0 <lrintf>
	r -= (float)i;
24014bd0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014bd4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014bd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
24014bdc:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
24014be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014be4:	3301      	adds	r3, #1
24014be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
24014bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24014bee:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014bf2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014bf6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014bfa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014bfe:	eeb0 fa4e 	vmov.f32	s30, s28
24014c02:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014c06:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014c0a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014c0e:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014c12:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014c16:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014c1a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014c1e:	f103 0301 	add.w	r3, r3, #1
24014c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014c26:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24014c2a:	da7d      	bge.n	24014d28 <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
24014c2c:	ee79 6a88 	vadd.f32	s13, s19, s16
24014c30:	f8d7 8000 	ldr.w	r8, [r7]
24014c34:	ee76 6aac 	vadd.f32	s13, s13, s25
24014c38:	ee76 6ac9 	vsub.f32	s13, s13, s18
24014c3c:	eea6 baad 	vfma.f32	s22, s13, s27
24014c40:	eef0 ca4b 	vmov.f32	s25, s22
24014c44:	e55e      	b.n	24014704 <tMBTriangle_tick+0x700>
24014c46:	bf00      	nop
24014c48:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
24014c4c:	ee39 7a88 	vadd.f32	s14, s19, s16
24014c50:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
24014c54:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
24014c58:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
24014c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24014c60:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
24014c64:	f300 80da 	bgt.w	24014e1c <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
24014c68:	eef5 eac0 	vcmpe.f32	s29, #0.0
24014c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c70:	f100 8128 	bmi.w	24014ec4 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
24014c74:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 24014c48 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
24014c78:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014c7c:	ee77 eaa8 	vadd.f32	s29, s15, s17
24014c80:	ee2c ca07 	vmul.f32	s24, s24, s14
24014c84:	eef1 8a48 	vneg.f32	s17, s16
24014c88:	eea8 0a4c 	vfms.f32	s0, s16, s24
24014c8c:	f003 fdb0 	bl	240187f0 <lrintf>
	r -= (float)i;
24014c90:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24014c94:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24014c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014c9c:	eedc 7a28 	vfnms.f32	s15, s24, s17
24014ca0:	e6d3      	b.n	24014a4a <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
24014ca2:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
24014ca6:	2600      	movs	r6, #0
                p -= 1.0f;
24014ca8:	eeb0 8a6c 	vmov.f32	s16, s25
24014cac:	f7ff ba0c 	b.w	240140c8 <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
24014cb0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
24014cb4:	683f      	ldr	r7, [r7, #0]
24014cb6:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
24014cba:	464e      	mov	r6, r9
}
24014cbc:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
24014cc0:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
24014cc4:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
24014cc8:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
24014ccc:	eea9 0a0c 	vfma.f32	s0, s18, s24
24014cd0:	f003 fd8e 	bl	240187f0 <lrintf>
	r -= (float)i;
24014cd4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014cd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014cdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014ce4:	3301      	adds	r3, #1
	scale *= w;
24014ce6:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014cee:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014cf2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014cf6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014cfa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24014cfe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014d02:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014d06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014d0a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014d0e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014d12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014d16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24014d1a:	3301      	adds	r3, #1
24014d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014d20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24014d24:	f7ff b9d0 	b.w	240140c8 <tMBTriangle_tick+0xc4>
24014d28:	f8d7 8000 	ldr.w	r8, [r7]
24014d2c:	e5c4      	b.n	240148b8 <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
24014d2e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24014d32:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 24014c48 <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24014d36:	ee3d ba2d 	vadd.f32	s22, s26, s27
24014d3a:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
24014d3e:	eeb0 0a67 	vmov.f32	s0, s15
24014d42:	edcd 7a01 	vstr	s15, [sp, #4]
24014d46:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
24014d4a:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
24014d4e:	eeac 0a0e 	vfma.f32	s0, s24, s28
24014d52:	f003 fd4d 	bl	240187f0 <lrintf>
	r -= (float)i;
24014d56:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014d5a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014d5e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
24014d66:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014d6a:	3301      	adds	r3, #1
24014d6c:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
24014d70:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014d78:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014d7c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014d84:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
24014d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24014d8c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014d90:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014d94:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014d98:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014d9c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014da0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014da4:	f103 0301 	add.w	r3, r3, #1
24014da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014dac:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
24014db0:	f340 80ed 	ble.w	24014f8e <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
24014db4:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
24014db8:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
24014dba:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
24014dbe:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
24014dc2:	eeec 7a2c 	vfma.f32	s15, s24, s25
24014dc6:	eeb0 0a67 	vmov.f32	s0, s15
24014dca:	f003 fd11 	bl	240187f0 <lrintf>
	r -= (float)i;
24014dce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014dd2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014dd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014dde:	3301      	adds	r3, #1
	r -= (float)i;
24014de0:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014de8:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014dec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014df0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24014df4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014df8:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24014dfc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014e00:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014e04:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014e08:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24014e0c:	3301      	adds	r3, #1
24014e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014e12:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
24014e16:	f8d7 8000 	ldr.w	r8, [r7]
24014e1a:	e5e6      	b.n	240149ea <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
24014e1c:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 24014c48 <tMBTriangle_tick+0xc44>
24014e20:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
24014e24:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24014e28:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
24014e2c:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
24014e30:	eeac 0a2c 	vfma.f32	s0, s24, s25
24014e34:	f003 fcdc 	bl	240187f0 <lrintf>
	r -= (float)i;
24014e38:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e3c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014e40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24014e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e48:	3301      	adds	r3, #1
	scale *= w;
24014e4a:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
24014e4e:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24014e56:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014e5a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014e5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014e62:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
24014e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24014e6a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014e6e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014e72:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014e76:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014e7a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014e7e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014e82:	f103 0301 	add.w	r3, r3, #1
24014e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014e8a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
24014e8e:	d46e      	bmi.n	24014f6e <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
24014e90:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
24014e94:	f8d7 8000 	ldr.w	r8, [r7]
24014e98:	eeb1 9a4b 	vneg.f32	s18, s22
24014e9c:	e5a5      	b.n	240149ea <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
24014e9e:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
24014ea2:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
24014ea6:	eeac 0a08 	vfma.f32	s0, s24, s16
24014eaa:	f003 fca1 	bl	240187f0 <lrintf>
	r -= (float)i;
24014eae:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24014eb2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
24014eb6:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24014eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014ebe:	eedc 7a08 	vfnms.f32	s15, s24, s16
24014ec2:	e44d      	b.n	24014760 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24014ec4:	ee3d ba2d 	vadd.f32	s22, s26, s27
24014ec8:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 24014c48 <tMBTriangle_tick+0xc44>
24014ecc:	ee2c ca27 	vmul.f32	s24, s24, s15
24014ed0:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
24014ed4:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24014ed8:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
24014edc:	ee39 9a08 	vadd.f32	s18, s18, s16
24014ee0:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
24014ee4:	eeb0 0a6c 	vmov.f32	s0, s25
24014ee8:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
24014eec:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
24014ef0:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014ef4:	eeb1 9a4b 	vneg.f32	s18, s22
24014ef8:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
24014efc:	f003 fc78 	bl	240187f0 <lrintf>
	r -= (float)i;
24014f00:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f04:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24014f08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
24014f0c:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
24014f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f14:	3301      	adds	r3, #1
24014f16:	eef1 8a48 	vneg.f32	s17, s16
24014f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
24014f1e:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
24014f22:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24014f26:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24014f2e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24014f32:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24014f36:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24014f3a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24014f3e:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24014f42:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24014f46:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24014f4a:	3301      	adds	r3, #1
24014f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24014f50:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
24014f54:	f003 fc4c 	bl	240187f0 <lrintf>
	r -= (float)i;
24014f58:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24014f5c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
24014f60:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24014f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014f68:	eedc 7a28 	vfnms.f32	s15, s24, s17
24014f6c:	e56d      	b.n	24014a4a <tMBTriangle_tick+0xa46>
24014f6e:	f8d7 8000 	ldr.w	r8, [r7]
24014f72:	e7af      	b.n	24014ed4 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
24014f74:	eeb0 8a4e 	vmov.f32	s16, s28
24014f78:	f7ff b887 	b.w	2401408a <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
24014f7c:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
24014f80:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24014f82:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24014f86:	eee7 8aad 	vfma.f32	s17, s15, s27
24014f8a:	f7ff b89d 	b.w	240140c8 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
24014f8e:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
24014f92:	ee79 caef 	vsub.f32	s25, s19, s31
24014f96:	eeb1 9a48 	vneg.f32	s18, s16
24014f9a:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
24014f9e:	eeb0 0a67 	vmov.f32	s0, s15
24014fa2:	f003 fc25 	bl	240187f0 <lrintf>
	r -= (float)i;
24014fa6:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24014faa:	f000 023f 	and.w	r2, r0, #63	; 0x3f
24014fae:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24014fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014fb6:	eef0 ea68 	vmov.f32	s29, s17
24014fba:	eedc 7a09 	vfnms.f32	s15, s24, s18
24014fbe:	e544      	b.n	24014a4a <tMBTriangle_tick+0xa46>

24014fc0 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
24014fc0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24014fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014fc6:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24014fca:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014fce:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24014fd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24014fd6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24014fda:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24014fde:	4770      	bx	lr

24014fe0 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
24014fe0:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
24014fe2:	6804      	ldr	r4, [r0, #0]
{
24014fe4:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
24014fe8:	ed9f 1a04 	vldr	s2, [pc, #16]	; 24014ffc <tMBTriangle_setWidth+0x1c>
24014fec:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24015000 <tMBTriangle_setWidth+0x20>
24014ff0:	f01e faaa 	bl	24033548 <__LEAF_clip_veneer>
    c->waveform = w;
24014ff4:	ed84 0a03 	vstr	s0, [r4, #12]
}
24014ff8:	bd10      	pop	{r4, pc}
24014ffa:	bf00      	nop
24014ffc:	3f7d70a4 	.word	0x3f7d70a4
24015000:	00000000 	.word	0x00000000

24015004 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
24015004:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24015006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
2401500a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
2401500e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24015012:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24015016:	eef1 7a67 	vneg.f32	s15, s15
2401501a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401501e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24015022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015026:	eef4 6ac7 	vcmpe.f32	s13, s14
2401502a:	bfcc      	ite	gt
2401502c:	2201      	movgt	r2, #1
2401502e:	2200      	movle	r2, #0
24015030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015034:	f002 0201 	and.w	r2, r2, #1
24015038:	bf88      	it	hi
2401503a:	2200      	movhi	r2, #0
2401503c:	b122      	cbz	r2, 24015048 <tMBTriangle_sync+0x44>
2401503e:	eeb5 0a40 	vcmp.f32	s0, #0.0
24015042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015046:	da04      	bge.n	24015052 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24015048:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24015060 <tMBTriangle_sync+0x5c>
2401504c:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24015050:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24015052:	ee37 7a66 	vsub.f32	s14, s14, s13
24015056:	ee27 7a06 	vmul.f32	s14, s14, s12
2401505a:	ed83 7a05 	vstr	s14, [r3, #20]
}
2401505e:	4770      	bx	lr
24015060:	00000000 	.word	0x00000000

24015064 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
24015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24015066:	698e      	ldr	r6, [r1, #24]
{
24015068:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
2401506a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
2401506e:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015070:	4631      	mov	r1, r6
24015072:	f7fd ff93 	bl	24012f9c <mpool_alloc>
24015076:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24015078:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
2401507a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
2401507c:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
2401507e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24015082:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 240150f0 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
24015086:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
24015088:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
2401508c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
24015090:	eddf 7a18 	vldr	s15, [pc, #96]	; 240150f4 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
24015094:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24015098:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
2401509a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
2401509e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
240150a0:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240150a2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
240150a6:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240150a8:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
240150ac:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
240150ae:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
240150b0:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
240150b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
240150b6:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240150b8:	490f      	ldr	r1, [pc, #60]	; (240150f8 <tMBSineTri_init+0x94>)
    c->softsync = 0;
240150ba:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
240150bc:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240150be:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240150c0:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
240150c2:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
240150c4:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
240150c8:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240150cc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
240150d0:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240150d4:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240150d8:	4629      	mov	r1, r5
240150da:	306c      	adds	r0, #108	; 0x6c
240150dc:	f002 ff64 	bl	24017fa8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
240150e0:	4629      	mov	r1, r5
240150e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
240150e6:	2220      	movs	r2, #32
}
240150e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
240150ec:	f002 bf5c 	b.w	24017fa8 <memset>
240150f0:	3b14f209 	.word	0x3b14f209
240150f4:	43dc0000 	.word	0x43dc0000
240150f8:	11c01200 	.word	0x11c01200

240150fc <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
240150fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24015100:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
24015104:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
24015106:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
2401510a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
2401510e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
24015110:	ed94 9a03 	vldr	s18, [r4, #12]
{
24015114:	4607      	mov	r7, r0
    sync = c->sync;
24015116:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
2401511a:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
2401511e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015122:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
24015126:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
2401512a:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
2401512e:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
24015132:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
24015136:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
2401513a:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
24015142:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24015146:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
2401514a:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401514e:	f340 81d8 	ble.w	24015502 <tMBSineTri_tick+0x406>
24015152:	f8d4 901c 	ldr.w	r9, [r4, #28]
24015156:	f1b9 0f00 	cmp.w	r9, #0
2401515a:	f340 8189 	ble.w	24015470 <tMBSineTri_tick+0x374>
2401515e:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24015162:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24015166:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
2401516a:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401516e:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015172:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
24015176:	eefd 7acc 	vcvt.s32.f32	s15, s24
2401517a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401517e:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
24015182:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
24015186:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
2401518a:	2e00      	cmp	r6, #0
2401518c:	f040 81cc 	bne.w	24015528 <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
24015190:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
24015194:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
24015198:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
2401519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
240151a0:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
240151a4:	f340 82a1 	ble.w	240156ea <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
240151a8:	eeb4 aac9 	vcmpe.f32	s20, s18
240151ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151b0:	f280 825b 	bge.w	2401566a <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
240151b4:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
240151b6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
240151ba:	eeb4 aacb 	vcmpe.f32	s20, s22
240151be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151c2:	f280 83c8 	bge.w	24015956 <tMBSineTri_tick+0x85a>
240151c6:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
240151c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
240151cc:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
240151ce:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
240151d2:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
240151d6:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
240151da:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
240151de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151e2:	db0a      	blt.n	240151fa <tMBSineTri_tick+0xfe>
240151e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
240151e8:	eef0 7a48 	vmov.f32	s15, s16
240151ec:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
240151f0:	eef4 7ae6 	vcmpe.f32	s15, s13
240151f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151f8:	daf6      	bge.n	240151e8 <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
240151fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240151fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015202:	d50c      	bpl.n	2401521e <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
24015204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
24015208:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
2401520c:	eef0 7a48 	vmov.f32	s15, s16
24015210:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
24015214:	eef4 7ac7 	vcmpe.f32	s15, s14
24015218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401521c:	d4f6      	bmi.n	2401520c <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
2401521e:	eddf 7abd 	vldr	s15, [pc, #756]	; 24015514 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
24015226:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
2401522a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
2401522e:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24015232:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015236:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
2401523a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
2401523e:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
24015242:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
24015246:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
2401524a:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
2401524c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
24015250:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
24015252:	49b1      	ldr	r1, [pc, #708]	; (24015518 <tMBSineTri_tick+0x41c>)
24015254:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
24015258:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
2401525c:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
24015260:	ed91 6a00 	vldr	s12, [r1]
24015264:	ee36 6a66 	vsub.f32	s12, s12, s13
24015268:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
2401526c:	eee7 8a26 	vfma.f32	s17, s14, s13
24015270:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24015274:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
24015278:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401527c:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015280:	2b00      	cmp	r3, #0
24015282:	f000 80d3 	beq.w	2401542c <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24015286:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401528a:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
2401528c:	48a3      	ldr	r0, [pc, #652]	; (2401551c <tMBSineTri_tick+0x420>)
2401528e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24015292:	4fa3      	ldr	r7, [pc, #652]	; (24015520 <tMBSineTri_tick+0x424>)
24015294:	e053      	b.n	2401533e <tMBSineTri_tick+0x242>
24015296:	f8bd e006 	ldrh.w	lr, [sp, #6]
2401529a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
2401529e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240152a2:	fa1f fe8e 	uxth.w	lr, lr
240152a6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
240152aa:	fa1f f989 	uxth.w	r9, r9
240152ae:	b29b      	uxth	r3, r3
240152b0:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
240152b4:	fa1f f888 	uxth.w	r8, r8
240152b8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
240152bc:	eb04 0848 	add.w	r8, r4, r8, lsl #1
240152c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240152c4:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
240152c8:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
240152cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
240152d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240152d4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
240152d8:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
240152dc:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
240152e0:	ed99 7a00 	vldr	s14, [r9]
240152e4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
240152e8:	ed93 6a01 	vldr	s12, [r3, #4]
240152ec:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
240152f0:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240152f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240152f8:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240152fc:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240152fe:	fa1f fe8e 	uxth.w	lr, lr
24015302:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24015306:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401530a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401530e:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24015312:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24015316:	f108 0840 	add.w	r8, r8, #64	; 0x40
2401531a:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401531e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24015322:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24015326:	459e      	cmp	lr, r3
24015328:	d304      	bcc.n	24015334 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
2401532a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
2401532e:	3b01      	subs	r3, #1
24015330:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015334:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015338:	3201      	adds	r2, #1
2401533a:	4293      	cmp	r3, r2
2401533c:	dd76      	ble.n	2401542c <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
2401533e:	ebac 0302 	sub.w	r3, ip, r2
24015342:	b29b      	uxth	r3, r3
24015344:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24015348:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2401534c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015350:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24015354:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015358:	b29b      	uxth	r3, r3
2401535a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401535e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015362:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
24015366:	eef4 7ae5 	vcmpe.f32	s15, s11
2401536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401536e:	d492      	bmi.n	24015296 <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015370:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24015374:	f8bd e006 	ldrh.w	lr, [sp, #6]
24015378:	b29b      	uxth	r3, r3
2401537a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
2401537e:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24015382:	fa1f fe8e 	uxth.w	lr, lr
24015386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401538a:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
2401538e:	fa1f f989 	uxth.w	r9, r9
24015392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24015396:	fa1f f888 	uxth.w	r8, r8
2401539a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
2401539e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
240153a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240153a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
240153aa:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
240153ae:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
240153b2:	b29b      	uxth	r3, r3
240153b4:	ee24 7a07 	vmul.f32	s14, s8, s14
240153b8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
240153bc:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
240153c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240153c4:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
240153c8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
240153cc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
240153d0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
240153d4:	ed98 6a01 	vldr	s12, [r8, #4]
240153d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
240153dc:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240153e0:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
240153e4:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240153e8:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240153ec:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
240153f0:	ee36 6a64 	vsub.f32	s12, s12, s9
240153f4:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240153f8:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
240153fc:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015400:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24015404:	eee6 7a87 	vfma.f32	s15, s13, s14
24015408:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401540c:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
24015410:	3340      	adds	r3, #64	; 0x40
24015412:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24015416:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
2401541a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2401541e:	459e      	cmp	lr, r3
24015420:	d283      	bcs.n	2401532a <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24015422:	f89d 3005 	ldrb.w	r3, [sp, #5]
24015426:	3201      	adds	r2, #1
24015428:	4293      	cmp	r3, r2
2401542a:	dc88      	bgt.n	2401533e <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
2401542c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
24015430:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
24015434:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24015436:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
2401543a:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
2401543e:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
24015442:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
24015446:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
2401544a:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
2401544e:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
24015452:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
24015456:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
2401545a:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
2401545e:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
24015462:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
24015466:	b003      	add	sp, #12
24015468:	ecbd 8b10 	vpop	{d8-d15}
2401546c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
24015470:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015474:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24015478:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
2401547c:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
24015480:	eefd 7acc 	vcvt.s32.f32	s15, s24
24015484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015488:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
2401548c:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
24015490:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24015494:	f040 8644 	bne.w	24016120 <tMBSineTri_tick+0x1024>
        if (sw > 0)
24015498:	eeb5 cac0 	vcmpe.f32	s24, #0.0
2401549c:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
2401549e:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
240154a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
240154a6:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
240154aa:	f340 80cc 	ble.w	24015646 <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
240154ae:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
240154b2:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
240154b6:	2e00      	cmp	r6, #0
240154b8:	f040 81dd 	bne.w	24015876 <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
240154bc:	eeb4 9ace 	vcmpe.f32	s18, s28
240154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154c4:	f240 844d 	bls.w	24015d62 <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
240154c8:	eeb4 eae8 	vcmpe.f32	s28, s17
240154cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154d0:	f280 82b9 	bge.w	24015a46 <tMBSineTri_tick+0x94a>
240154d4:	eddf 7a13 	vldr	s15, [pc, #76]	; 24015524 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
240154d8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240154dc:	ee6c caa7 	vmul.f32	s25, s25, s15
240154e0:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
240154e4:	eeaa 0a2c 	vfma.f32	s0, s20, s25
240154e8:	f003 f982 	bl	240187f0 <lrintf>
	r -= (float)i;
240154ec:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
240154f0:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
240154f4:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240154f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240154fc:	eeda 7a2c 	vfnms.f32	s15, s20, s25
24015500:	e1fd      	b.n	240158fe <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
24015502:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24015506:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
2401550a:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
2401550e:	ee6c caa7 	vmul.f32	s25, s25, s15
24015512:	e630      	b.n	24015176 <tMBSineTri_tick+0x7a>
24015514:	45000000 	.word	0x45000000
24015518:	2402213c 	.word	0x2402213c
2401551c:	240241bc 	.word	0x240241bc
24015520:	240288c0 	.word	0x240288c0
24015524:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
24015528:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
2401552c:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
24015530:	ee79 7a4a 	vsub.f32	s15, s18, s20
24015534:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
24015538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
2401553c:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
24015540:	f340 8154 	ble.w	240157ec <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
24015544:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
24015548:	eeb4 aaeb 	vcmpe.f32	s20, s23
2401554c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015550:	f6ff ae3a 	blt.w	240151c8 <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
24015554:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
24015558:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 24015524 <tMBSineTri_tick+0x428>
                p -= 1.0f;
2401555c:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
24015560:	683e      	ldr	r6, [r7, #0]
24015562:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
24015566:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
2401556a:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
2401556e:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
24015572:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
24015576:	f003 f93b 	bl	240187f0 <lrintf>
	r -= (float)i;
2401557a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401557e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015582:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
24015586:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
2401558a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401558e:	3301      	adds	r3, #1
24015590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
24015594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24015598:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401559c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240155a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240155a4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
240155a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240155ac:	eb06 0382 	add.w	r3, r6, r2, lsl #2
240155b0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240155b4:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240155b8:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240155bc:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
240155c0:	f103 0301 	add.w	r3, r3, #1
240155c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240155c8:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
240155cc:	f200 843b 	bhi.w	24015e46 <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
240155d0:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
240155d4:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240155d6:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
240155da:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
240155de:	ee77 7aca 	vsub.f32	s15, s15, s20
240155e2:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
240155e6:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
240155ea:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
240155ee:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
240155f2:	f003 f8fd 	bl	240187f0 <lrintf>
	r -= (float)i;
240155f6:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240155fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240155fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015602:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
24015606:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401560a:	3301      	adds	r3, #1
2401560c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015610:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015614:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015618:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401561c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24015620:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015624:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015628:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401562c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015630:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015634:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
24015638:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401563a:	4433      	add	r3, r6
2401563c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015640:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24015644:	e5c0      	b.n	240151c8 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
24015646:	f100 828a 	bmi.w	24015b5e <tMBSineTri_tick+0xa62>
        if (!k) {
2401564a:	2e00      	cmp	r6, #0
2401564c:	f000 81f1 	beq.w	24015a32 <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
24015650:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
24015654:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
24015658:	eef0 8a6b 	vmov.f32	s17, s23
2401565c:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
24015660:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
24015664:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
24015668:	e5ae      	b.n	240151c8 <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
2401566a:	ed1f ea52 	vldr	s28, [pc, #-328]	; 24015524 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401566e:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
24015672:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
24015676:	f8d7 8000 	ldr.w	r8, [r7]
2401567a:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
2401567e:	ee79 7a4a 	vsub.f32	s15, s18, s20
24015682:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24015686:	eeae 0a8e 	vfma.f32	s0, s29, s28
2401568a:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
2401568e:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24015692:	f003 f8ad 	bl	240187f0 <lrintf>
	r -= (float)i;
24015696:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401569a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401569e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240156a2:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
240156a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240156aa:	3301      	adds	r3, #1
240156ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240156b0:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240156b4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240156b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240156bc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
240156c0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240156c4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240156c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240156cc:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240156d0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240156d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240156d8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240156dc:	3301      	adds	r3, #1
240156de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240156e2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
240156e6:	2301      	movs	r3, #1
}
240156e8:	e565      	b.n	240151b6 <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
240156ea:	eeb5 aa40 	vcmp.f32	s20, #0.0
240156ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240156f2:	f57f ad69 	bpl.w	240151c8 <tMBSineTri_tick+0xcc>
240156f6:	eeb5 ca40 	vcmp.f32	s24, #0.0
240156fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240156fe:	f57f ad63 	bpl.w	240151c8 <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
24015702:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
24015706:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 24015524 <tMBSineTri_tick+0x428>
2401570a:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
2401570e:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24015712:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
24015716:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401571a:	eeae 0a28 	vfma.f32	s0, s28, s17
2401571e:	ee2c ca27 	vmul.f32	s24, s24, s15
24015722:	f003 f865 	bl	240187f0 <lrintf>
	r -= (float)i;
24015726:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401572a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401572e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
24015732:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
24015736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401573a:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401573c:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
24015744:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
24015748:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401574c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015750:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015754:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
24015758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
2401575c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015760:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24015764:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015768:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401576c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015770:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015774:	f103 0301 	add.w	r3, r3, #1
24015778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401577c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
24015780:	f340 84d4 	ble.w	2401612c <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
24015784:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
24015788:	683f      	ldr	r7, [r7, #0]
2401578a:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
2401578e:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
24015792:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
24015796:	eeac 0aad 	vfma.f32	s0, s25, s27
2401579a:	f003 f829 	bl	240187f0 <lrintf>
	r -= (float)i;
2401579e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240157a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240157aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157ae:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
240157b0:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240157b8:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240157bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240157c4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240157c8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240157cc:	eb07 0382 	add.w	r3, r7, r2, lsl #2
240157d0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240157d4:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240157d8:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240157dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
240157e0:	3301      	adds	r3, #1
240157e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240157e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
240157ea:	e4ed      	b.n	240151c8 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
240157ec:	f57f acec 	bpl.w	240151c8 <tMBSineTri_tick+0xcc>
            if (p < b) {
240157f0:	eeb4 aac9 	vcmpe.f32	s20, s18
240157f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240157f8:	f100 8174 	bmi.w	24015ae4 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
240157fc:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24015800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015804:	f57f ace0 	bpl.w	240151c8 <tMBSineTri_tick+0xcc>
                p += 1.0f;
24015808:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2401580c:	ed5f babb 	vldr	s23, [pc, #-748]	; 24015524 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
24015810:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
24015814:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
24015816:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
2401581a:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
2401581e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24015822:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
24015826:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
2401582a:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
2401582e:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
24015832:	f002 ffdd 	bl	240187f0 <lrintf>
	r -= (float)i;
24015836:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401583a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401583e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015842:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
24015846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401584a:	3301      	adds	r3, #1
2401584c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015850:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015854:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015858:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401585c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24015860:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015864:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015868:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401586c:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015870:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
24015874:	e6de      	b.n	24015634 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
24015876:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
2401587a:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
2401587e:	eef0 fa6b 	vmov.f32	s31, s23
24015882:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
24015886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
2401588a:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
2401588e:	f280 81eb 	bge.w	24015c68 <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015892:	ee7d ea2d 	vadd.f32	s29, s26, s27
24015896:	ed5f 7add 	vldr	s15, [pc, #-884]	; 24015524 <tMBSineTri_tick+0x428>
2401589a:	ee6c caa7 	vmul.f32	s25, s25, s15
2401589e:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
240158a2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240158a6:	eeaa 0a2c 	vfma.f32	s0, s20, s25
240158aa:	f002 ffa1 	bl	240187f0 <lrintf>
	r -= (float)i;
240158ae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158b2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240158b6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240158ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158be:	3301      	adds	r3, #1
	r -= (float)i;
240158c0:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240158c8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240158cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240158d0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
240158d4:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240158d8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240158dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240158e0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240158e4:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240158e8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240158ec:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240158f0:	3301      	adds	r3, #1
240158f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240158f6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
240158fa:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240158fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015902:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
24015906:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401590a:	3301      	adds	r3, #1
2401590c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
24015910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015914:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015918:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401591c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24015920:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015924:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015928:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401592c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015930:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015934:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015938:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
2401593c:	f103 0301 	add.w	r3, r3, #1
24015940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015944:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
24015948:	d940      	bls.n	240159cc <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
2401594a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
2401594e:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
24015950:	eeed 8a0a 	vfma.f32	s17, s26, s20
24015954:	e438      	b.n	240151c8 <tMBSineTri_tick+0xcc>
                p -= 1.0f;
24015956:	eddf 7ac3 	vldr	s15, [pc, #780]	; 24015c64 <tMBSineTri_tick+0xb68>
2401595a:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
2401595e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
24015962:	683f      	ldr	r7, [r7, #0]
24015964:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24015968:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
2401596c:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
24015970:	eeaa 0a2c 	vfma.f32	s0, s20, s25
24015974:	f002 ff3c 	bl	240187f0 <lrintf>
	r -= (float)i;
24015978:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401597c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015980:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015988:	3301      	adds	r3, #1
	scale *= w;
2401598a:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
2401598e:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015996:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401599a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401599e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240159a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
240159a6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240159aa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
240159ae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240159b2:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240159b6:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240159ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
240159be:	3301      	adds	r3, #1
240159c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240159c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
240159c8:	f7ff bbfe 	b.w	240151c8 <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240159cc:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
240159d0:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
240159d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
240159d6:	ee79 7a4a 	vsub.f32	s15, s18, s20
240159da:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240159de:	eeab 0a2c 	vfma.f32	s0, s22, s25
240159e2:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
240159e6:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
240159ea:	f002 ff01 	bl	240187f0 <lrintf>
	r -= (float)i;
240159ee:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240159f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240159f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240159fa:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
240159fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a02:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015a04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015a0c:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a10:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015a14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015a18:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24015a1c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015a20:	eb07 0382 	add.w	r3, r7, r2, lsl #2
24015a24:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015a28:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015a2c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015a30:	e600      	b.n	24015634 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
24015a32:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
24015a36:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24015a3a:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
24015a3e:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
24015a42:	f7ff bbc1 	b.w	240151c8 <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015a46:	ee7d ea2d 	vadd.f32	s29, s26, s27
24015a4a:	eddf 7a86 	vldr	s15, [pc, #536]	; 24015c64 <tMBSineTri_tick+0xb68>
24015a4e:	ee6c caa7 	vmul.f32	s25, s25, s15
24015a52:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
24015a56:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
24015a5a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
24015a5e:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
24015a62:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
24015a66:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015a6a:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
24015a6e:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
24015a72:	eeab 0aac 	vfma.f32	s0, s23, s25
24015a76:	f002 febb 	bl	240187f0 <lrintf>
	r -= (float)i;
24015a7a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a7e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015a82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a8a:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
24015a8c:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
24015a90:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
24015a98:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015a9c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015aa0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015aa4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24015aa8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015aac:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24015ab0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015ab4:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015ab8:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015abc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015ac0:	3301      	adds	r3, #1
24015ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015ac6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
24015aca:	f002 fe91 	bl	240187f0 <lrintf>
	r -= (float)i;
24015ace:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24015ad2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
24015ad6:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24015ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015ade:	eeda 7a2c 	vfnms.f32	s15, s20, s25
24015ae2:	e70c      	b.n	240158fe <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
24015ae4:	eddf ba5f 	vldr	s23, [pc, #380]	; 24015c64 <tMBSineTri_tick+0xb68>
24015ae8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015aec:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
24015af0:	683e      	ldr	r6, [r7, #0]
24015af2:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
24015af6:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
24015afa:	eeab 0a8b 	vfma.f32	s0, s23, s22
24015afe:	f002 fe77 	bl	240187f0 <lrintf>
	r -= (float)i;
24015b02:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015b06:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
24015b0a:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
24015b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015b12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015b16:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
24015b18:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
24015b1c:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015b24:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015b28:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015b2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015b30:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24015b34:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015b38:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015b3c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015b40:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015b44:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015b48:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015b4c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24015b50:	3301      	adds	r3, #1
24015b52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015b56:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
24015b5a:	2600      	movs	r6, #0
}
24015b5c:	e64e      	b.n	240157fc <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
24015b5e:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
24015b62:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
24015b66:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
24015b6a:	2e00      	cmp	r6, #0
24015b6c:	f040 8142 	bne.w	24015df4 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
24015b70:	eeb5 eac0 	vcmpe.f32	s28, #0.0
24015b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015b78:	f100 81ab 	bmi.w	24015ed2 <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
24015b7c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
24015b80:	eddf 7a38 	vldr	s15, [pc, #224]	; 24015c64 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015b84:	ee3d ba2d 	vadd.f32	s22, s26, s27
24015b88:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
24015b8c:	eeed ba0e 	vfma.f32	s23, s26, s28
24015b90:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
24015b94:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
24015b98:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015b9c:	ee78 8ac8 	vsub.f32	s17, s17, s16
24015ba0:	eea8 0aac 	vfma.f32	s0, s17, s25
24015ba4:	f002 fe24 	bl	240187f0 <lrintf>
	r -= (float)i;
24015ba8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015bac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24015bb0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24015bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015bb8:	3301      	adds	r3, #1
	r -= (float)i;
24015bba:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015bc2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015bc6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015bca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24015bce:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015bd2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015bd6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015bda:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015bde:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015be2:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015be6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015bea:	3301      	adds	r3, #1
24015bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015bf0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
24015bf4:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015bf8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
24015bfc:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
24015c00:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015c04:	3301      	adds	r3, #1
24015c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
24015c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015c0e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015c12:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015c16:	eb08 0343 	add.w	r3, r8, r3, lsl #1
24015c1a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015c1e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015c22:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015c26:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015c2a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015c2e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015c32:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015c36:	f103 0301 	add.w	r3, r3, #1
24015c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015c3e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
24015c42:	f300 8107 	bgt.w	24015e54 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
24015c46:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
24015c4a:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
24015c4c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24015c50:	ee78 7a67 	vsub.f32	s15, s16, s15
24015c54:	eeb0 8a6e 	vmov.f32	s16, s29
24015c58:	ee77 7a89 	vadd.f32	s15, s15, s18
24015c5c:	eee7 8aad 	vfma.f32	s17, s15, s27
24015c60:	f7ff bab2 	b.w	240151c8 <tMBSineTri_tick+0xcc>
24015c64:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
24015c68:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015c6c:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 24015c64 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
24015c70:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
24015c74:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015c78:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
24015c7c:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24015c80:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
24015c84:	eeac 0aaf 	vfma.f32	s0, s25, s31
24015c88:	f002 fdb2 	bl	240187f0 <lrintf>
	r -= (float)i;
24015c8c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015c90:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015c94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015c9c:	3301      	adds	r3, #1
	scale *= w;
24015c9e:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
24015ca2:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015caa:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015cae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015cb2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015cb6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
24015cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24015cbe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015cc2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015cc6:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015cca:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015cce:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015cd2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015cd6:	f103 0301 	add.w	r3, r3, #1
24015cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015cde:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24015ce2:	f200 81ae 	bhi.w	24016042 <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
24015ce6:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
24015cea:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
24015cec:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
24015cf0:	ee77 7a88 	vadd.f32	s15, s15, s16
24015cf4:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24015cf8:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
24015cfc:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24015d00:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
24015d04:	eeac 0a8e 	vfma.f32	s0, s25, s28
24015d08:	f002 fd72 	bl	240187f0 <lrintf>
	r -= (float)i;
24015d0c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d10:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015d14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d1c:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015d1e:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
24015d22:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015d2a:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d2e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015d32:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015d36:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24015d3a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015d3e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24015d42:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015d46:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015d4a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015d4e:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24015d52:	3301      	adds	r3, #1
24015d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015d58:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
24015d5c:	f8d7 8000 	ldr.w	r8, [r7]
24015d60:	e59f      	b.n	240158a2 <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24015d62:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 24015c64 <tMBSineTri_tick+0xb68>
24015d66:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
24015d6a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015d6e:	ee6c caa7 	vmul.f32	s25, s25, s15
24015d72:	ee7d ea2d 	vadd.f32	s29, s26, s27
24015d76:	eeaf 0a2c 	vfma.f32	s0, s30, s25
24015d7a:	f002 fd39 	bl	240187f0 <lrintf>
	r -= (float)i;
24015d7e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d82:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015d86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d8e:	3301      	adds	r3, #1
24015d90:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
24015d94:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
24015d98:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015da0:	eeb0 fa6e 	vmov.f32	s30, s29
24015da4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015da8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015dac:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
24015db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24015db4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015db8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24015dbc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015dc0:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015dc4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015dc8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015dcc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015dd0:	f103 0301 	add.w	r3, r3, #1
24015dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015dd8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24015ddc:	da76      	bge.n	24015ecc <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
24015dde:	ee79 7a08 	vadd.f32	s15, s18, s16
24015de2:	f8d7 8000 	ldr.w	r8, [r7]
24015de6:	ee37 bacb 	vsub.f32	s22, s15, s22
24015dea:	eeeb ba2d 	vfma.f32	s23, s22, s27
24015dee:	eef0 fa6b 	vmov.f32	s31, s23
24015df2:	e556      	b.n	240158a2 <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
24015df4:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
24015df8:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
24015dfc:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
24015e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24015e04:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
24015e08:	f300 80d8 	bgt.w	24015fbc <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
24015e0c:	eeb5 eac0 	vcmpe.f32	s28, #0.0
24015e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015e14:	f100 812a 	bmi.w	2401606c <tMBSineTri_tick+0xf70>
        else if (sw < 0)
24015e18:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
24015e1c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 24015c64 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
24015e20:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015e24:	ee6c caa7 	vmul.f32	s25, s25, s15
24015e28:	ee78 8ac8 	vsub.f32	s17, s17, s16
24015e2c:	eeac 0aa8 	vfma.f32	s0, s25, s17
24015e30:	f002 fcde 	bl	240187f0 <lrintf>
	r -= (float)i;
24015e34:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24015e38:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
24015e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015e40:	eedc 7aa8 	vfnms.f32	s15, s25, s17
24015e44:	e6d8      	b.n	24015bf8 <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
24015e46:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
24015e4a:	2600      	movs	r6, #0
                p -= 1.0f;
24015e4c:	eeb0 aa4e 	vmov.f32	s20, s28
24015e50:	f7ff b9ba 	b.w	240151c8 <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
24015e54:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
24015e58:	683f      	ldr	r7, [r7, #0]
24015e5a:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
24015e5e:	464e      	mov	r6, r9
}
24015e60:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
24015e64:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
24015e68:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
24015e6c:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
24015e70:	eeab 0a2c 	vfma.f32	s0, s22, s25
24015e74:	f002 fcbc 	bl	240187f0 <lrintf>
	r -= (float)i;
24015e78:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015e7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015e80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015e88:	3301      	adds	r3, #1
	scale *= w;
24015e8a:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015e92:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015e96:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015e9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015e9e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
24015ea2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015ea6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015eaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015eae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015eb2:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015eb6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015eba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
24015ebe:	3301      	adds	r3, #1
24015ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015ec4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
24015ec8:	f7ff b97e 	b.w	240151c8 <tMBSineTri_tick+0xcc>
24015ecc:	f8d7 8000 	ldr.w	r8, [r7]
24015ed0:	e5c1      	b.n	24015a56 <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
24015ed2:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
24015ed6:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 24015c64 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24015eda:	ee3d fa2d 	vadd.f32	s30, s26, s27
24015ede:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
24015ee2:	eeb0 0a6f 	vmov.f32	s0, s31
24015ee6:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
24015eea:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
24015eee:	eeac 0a8b 	vfma.f32	s0, s25, s22
24015ef2:	f002 fc7d 	bl	240187f0 <lrintf>
	r -= (float)i;
24015ef6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015efa:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015efe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f06:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
24015f08:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015f10:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
24015f14:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f18:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015f1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015f20:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
24015f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
24015f28:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015f2c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015f30:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015f34:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015f38:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015f3c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24015f40:	f103 0301 	add.w	r3, r3, #1
24015f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015f48:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
24015f4c:	f340 80f7 	ble.w	2401613e <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
24015f50:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
24015f54:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
24015f56:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
24015f5a:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
24015f5e:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
24015f62:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
24015f66:	eeac 0a8e 	vfma.f32	s0, s25, s28
24015f6a:	f002 fc41 	bl	240187f0 <lrintf>
	r -= (float)i;
24015f6e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f72:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015f76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f7e:	3301      	adds	r3, #1
	r -= (float)i;
24015f80:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015f88:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015f8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24015f90:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24015f94:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015f98:	eb06 0382 	add.w	r3, r6, r2, lsl #2
24015f9c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24015fa0:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24015fa4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24015fa8:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
24015fac:	3301      	adds	r3, #1
24015fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24015fb2:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
24015fb6:	f8d7 8000 	ldr.w	r8, [r7]
24015fba:	e5eb      	b.n	24015b94 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
24015fbc:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
24015fc0:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 24015c64 <tMBSineTri_tick+0xb68>
24015fc4:	ee3b fa49 	vsub.f32	s30, s22, s18
24015fc8:	ee6c caa7 	vmul.f32	s25, s25, s15
24015fcc:	eeb0 0a6b 	vmov.f32	s0, s23
24015fd0:	eeac 0a8f 	vfma.f32	s0, s25, s30
24015fd4:	f002 fc0c 	bl	240187f0 <lrintf>
	r -= (float)i;
24015fd8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fdc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24015fe0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24015fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fe8:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
24015fea:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24015ff2:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
24015ff6:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24015ffa:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24015ffe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24016002:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
24016006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
2401600a:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
2401600e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016012:	eb08 0382 	add.w	r3, r8, r2, lsl #2
24016016:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401601a:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401601e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016022:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
24016026:	f103 0301 	add.w	r3, r3, #1
2401602a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401602e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
24016032:	d472      	bmi.n	2401611a <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
24016034:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
24016038:	f8d7 8000 	ldr.w	r8, [r7]
2401603c:	eeb1 ba4f 	vneg.f32	s22, s30
24016040:	e5a8      	b.n	24015b94 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
24016042:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
24016046:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
2401604a:	eeac 0a8a 	vfma.f32	s0, s25, s20
2401604e:	f002 fbcf 	bl	240187f0 <lrintf>
	r -= (float)i;
24016052:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24016056:	f000 013f 	and.w	r1, r0, #63	; 0x3f
2401605a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
2401605e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
24016062:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
24016066:	eedc 7a8a 	vfnms.f32	s15, s25, s20
2401606a:	e448      	b.n	240158fe <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401606c:	ee3d fa2d 	vadd.f32	s30, s26, s27
24016070:	eddf 7a39 	vldr	s15, [pc, #228]	; 24016158 <tMBSineTri_tick+0x105c>
24016074:	ee6c caa7 	vmul.f32	s25, s25, s15
24016078:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
2401607c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24016080:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
24016084:	ee78 7a4b 	vsub.f32	s15, s16, s22
24016088:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
2401608c:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
24016090:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
24016094:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
24016098:	eeab 0a2c 	vfma.f32	s0, s22, s25
2401609c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
240160a0:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
240160a4:	f002 fba4 	bl	240187f0 <lrintf>
	r -= (float)i;
240160a8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240160ac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240160b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240160b4:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
240160b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240160bc:	3301      	adds	r3, #1
240160be:	ee78 8ac8 	vsub.f32	s17, s17, s16
240160c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
240160c6:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
240160ca:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240160ce:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240160d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240160d6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
240160da:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
240160de:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240160e2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
240160e6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240160ea:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240160ee:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240160f2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
240160f6:	3301      	adds	r3, #1
240160f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240160fc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
24016100:	f002 fb76 	bl	240187f0 <lrintf>
	r -= (float)i;
24016104:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24016108:	f000 023f 	and.w	r2, r0, #63	; 0x3f
2401610c:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
24016110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016114:	eedc 7aa8 	vfnms.f32	s15, s25, s17
24016118:	e56e      	b.n	24015bf8 <tMBSineTri_tick+0xafc>
2401611a:	f8d7 8000 	ldr.w	r8, [r7]
2401611e:	e7ad      	b.n	2401607c <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
24016120:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24016124:	eeb0 aa4b 	vmov.f32	s20, s22
24016128:	f7ff b82f 	b.w	2401518a <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
2401612c:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
24016130:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24016132:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24016136:	eee7 8aad 	vfma.f32	s17, s15, s27
2401613a:	f7ff b845 	b.w	240151c8 <tMBSineTri_tick+0xcc>
2401613e:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
24016142:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
24016146:	eeb0 0a6f 	vmov.f32	s0, s31
2401614a:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
2401614e:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
24016152:	eeac 0aa8 	vfma.f32	s0, s25, s17
24016156:	e7d3      	b.n	24016100 <tMBSineTri_tick+0x1004>
24016158:	42800000 	.word	0x42800000

2401615c <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
2401615c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
2401615e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016162:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24016166:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401616a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
2401616e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016172:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24016176:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
2401617a:	4770      	bx	lr

2401617c <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
2401617c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401617e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24016182:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24016186:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
2401618a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401618e:	eef1 7a67 	vneg.f32	s15, s15
24016192:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24016196:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401619e:	eef4 6ac7 	vcmpe.f32	s13, s14
240161a2:	bfcc      	ite	gt
240161a4:	2201      	movgt	r2, #1
240161a6:	2200      	movle	r2, #0
240161a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240161ac:	f002 0201 	and.w	r2, r2, #1
240161b0:	bf88      	it	hi
240161b2:	2200      	movhi	r2, #0
240161b4:	b122      	cbz	r2, 240161c0 <tMBSineTri_sync+0x44>
240161b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
240161ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240161be:	da04      	bge.n	240161ca <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
240161c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240161d8 <tMBSineTri_sync+0x5c>
240161c4:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
240161c8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
240161ca:	ee37 7a66 	vsub.f32	s14, s14, s13
240161ce:	ee27 7a06 	vmul.f32	s14, s14, s12
240161d2:	ed83 7a05 	vstr	s14, [r3, #20]
}
240161d6:	4770      	bx	lr
240161d8:	00000000 	.word	0x00000000

240161dc <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
240161dc:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
240161de:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
240161e2:	4770      	bx	lr

240161e4 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
240161e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
240161e6:	698e      	ldr	r6, [r1, #24]
{
240161e8:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
240161ea:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
240161ee:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
240161f0:	4631      	mov	r1, r6
240161f2:	f7fc fed3 	bl	24012f9c <mpool_alloc>
240161f6:	6038      	str	r0, [r7, #0]
    c->mempool = m;
240161f8:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
240161fa:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
240161fc:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
240161fe:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24016200:	ed9f 6a16 	vldr	s12, [pc, #88]	; 2401625c <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
24016204:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
24016208:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
2401620c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
24016210:	eddf 7a13 	vldr	s15, [pc, #76]	; 24016260 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
24016214:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
24016218:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
2401621a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
2401621e:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
24016220:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016222:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
24016224:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24016226:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
2401622a:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
2401622c:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
2401622e:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
24016230:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
24016232:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016236:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
24016238:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401623c:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016240:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
24016242:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
24016246:	f001 feaf 	bl	24017fa8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
2401624a:	4629      	mov	r1, r5
2401624c:	f104 0030 	add.w	r0, r4, #48	; 0x30
24016250:	2220      	movs	r2, #32
}
24016252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
24016256:	f001 bea7 	b.w	24017fa8 <memset>
2401625a:	bf00      	nop
2401625c:	3b14f209 	.word	0x3b14f209
24016260:	43dc0000 	.word	0x43dc0000

24016264 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
24016264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24016268:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
2401626c:	6804      	ldr	r4, [r0, #0]
{
2401626e:	b082      	sub	sp, #8
24016270:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
24016272:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
24016276:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401627a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
2401627e:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
24016282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24016284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016288:	f340 813d 	ble.w	24016506 <tMBSaw_tick+0x2a2>
2401628c:	69a3      	ldr	r3, [r4, #24]
2401628e:	2b00      	cmp	r3, #0
24016290:	f340 80b1 	ble.w	240163f6 <tMBSaw_tick+0x192>
24016294:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
24016298:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401629c:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
240162a0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
240162a4:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240162a8:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
240162ac:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
240162b0:	eefd 6ac7 	vcvt.s32.f32	s13, s14
240162b4:	ee37 8a27 	vadd.f32	s16, s14, s15
240162b8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
240162bc:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
240162c0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
240162c4:	eeb4 8ac9 	vcmpe.f32	s16, s18
240162c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240162cc:	f280 8135 	bge.w	2401653a <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
240162d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240162d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240162d8:	f100 8193 	bmi.w	24016602 <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
240162dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
240162e0:	1d33      	adds	r3, r6, #4
240162e2:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
240162e6:	ee37 7a48 	vsub.f32	s14, s14, s16
240162ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240162ee:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
240162f2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
240162f6:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240162fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
240162fe:	2b00      	cmp	r3, #0
24016300:	f000 817a 	beq.w	240165f8 <tMBSaw_tick+0x394>
24016304:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016308:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401630c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24016310:	2000      	movs	r0, #0
24016312:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
24016316:	4deb      	ldr	r5, [pc, #940]	; (240166c4 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24016318:	ebae 0300 	sub.w	r3, lr, r0
2401631c:	b29b      	uxth	r3, r3
2401631e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24016322:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24016326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401632a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401632e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24016332:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24016336:	f8bd 8006 	ldrh.w	r8, [sp, #6]
2401633a:	b289      	uxth	r1, r1
2401633c:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24016340:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016342:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016346:	fa1f f888 	uxth.w	r8, r8
2401634a:	fa1f f989 	uxth.w	r9, r9
2401634e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24016352:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24016356:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
2401635a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
2401635e:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24016362:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016364:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
24016368:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
2401636c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24016370:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016374:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
24016378:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401637c:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401637e:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016382:	edd9 6a01 	vldr	s13, [r9, #4]
24016386:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401638a:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401638e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24016392:	eee6 7a26 	vfma.f32	s15, s12, s13
24016396:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401639a:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401639e:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
240163a2:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240163a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240163a8:	f0c0 80a6 	bcc.w	240164f8 <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
240163ac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240163b0:	3001      	adds	r0, #1
240163b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
240163b6:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240163b8:	4290      	cmp	r0, r2
			c->numBLEPs--;
240163ba:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240163be:	dbab      	blt.n	24016318 <tMBSaw_tick+0xb4>
240163c0:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
240163c4:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
240163c8:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
240163ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
240163ce:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
240163d2:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
240163d6:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
240163da:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
240163dc:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
240163e0:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
240163e4:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
240163e8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
240163ec:	b002      	add	sp, #8
240163ee:	ecbd 8b08 	vpop	{d8-d11}
240163f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
240163f6:	edd4 8a05 	vldr	s17, [r4, #20]
240163fa:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
240163fe:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24016402:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
24016406:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
2401640a:	eebd 9aca 	vcvt.s32.f32	s18, s20
2401640e:	ee77 7a8a 	vadd.f32	s15, s15, s20
24016412:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
24016416:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
2401641a:	f040 815e 	bne.w	240166da <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
2401641e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
24016422:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
24016426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
2401642a:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
2401642e:	f340 80b2 	ble.w	24016596 <tMBSaw_tick+0x332>
24016432:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
24016436:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
2401643a:	eef4 aacb 	vcmpe.f32	s21, s22
2401643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016442:	db2d      	blt.n	240164a0 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
24016444:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24016448:	eddf ba9f 	vldr	s23, [pc, #636]	; 240166c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
2401644c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016450:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
24016454:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
24016458:	eea9 0a2b 	vfma.f32	s0, s18, s23
2401645c:	f002 f9c8 	bl	240187f0 <lrintf>
	r -= (float)i;
24016460:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016464:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016468:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401646c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016470:	3301      	adds	r3, #1
	r -= (float)i;
24016472:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401647a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401647e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016482:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016486:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
2401648a:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401648e:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016492:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
24016496:	3301      	adds	r3, #1
24016498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401649c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
240164a0:	eef5 aac0 	vcmpe.f32	s21, #0.0
240164a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240164a8:	f100 80da 	bmi.w	24016660 <tMBSaw_tick+0x3fc>
        if (sw > 0)
240164ac:	eeb5 aac0 	vcmpe.f32	s20, #0.0
240164b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240164b4:	dc74      	bgt.n	240165a0 <tMBSaw_tick+0x33c>
        else if (sw < 0)
240164b6:	f57f af11 	bpl.w	240162dc <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
240164ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240164be:	ed9f 9a82 	vldr	s18, [pc, #520]	; 240166c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
240164c2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
240164c6:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240164c8:	ee28 9a89 	vmul.f32	s18, s17, s18
240164cc:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
240164d0:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
240164d4:	eea9 0a28 	vfma.f32	s0, s18, s17
240164d8:	f002 f98a 	bl	240187f0 <lrintf>
	r -= (float)i;
240164dc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164e0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240164e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240164e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164ec:	3301      	adds	r3, #1
	r -= (float)i;
240164ee:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240164f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240164f6:	e06b      	b.n	240165d0 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240164f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
240164fc:	3001      	adds	r0, #1
240164fe:	4283      	cmp	r3, r0
24016500:	f73f af0a 	bgt.w	24016318 <tMBSaw_tick+0xb4>
24016504:	e75c      	b.n	240163c0 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
24016506:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
2401650a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
2401650e:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
24016512:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24016516:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
2401651a:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
2401651e:	eebd 7ac8 	vcvt.s32.f32	s14, s16
24016522:	ee77 7a88 	vadd.f32	s15, s15, s16
24016526:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
2401652a:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
2401652e:	eeb4 8ac9 	vcmpe.f32	s16, s18
24016532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016536:	f6ff aecb 	blt.w	240162d0 <tMBSaw_tick+0x6c>
        p -= 1.0f;
2401653a:	eddf 7a63 	vldr	s15, [pc, #396]	; 240166c8 <tMBSaw_tick+0x464>
2401653e:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24016542:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
24016546:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
24016548:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
2401654c:	eea8 0a88 	vfma.f32	s0, s17, s16
24016550:	f002 f94e 	bl	240187f0 <lrintf>
	r -= (float)i;
24016554:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016558:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401655c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016564:	3301      	adds	r3, #1
	r -= (float)i;
24016566:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401656a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401656e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016572:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016576:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401657a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
2401657e:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24016582:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016586:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
2401658a:	3301      	adds	r3, #1
2401658c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24016590:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
24016594:	e6a2      	b.n	240162dc <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
24016596:	f100 809b 	bmi.w	240166d0 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
2401659a:	eeb0 8a49 	vmov.f32	s16, s18
2401659e:	e74a      	b.n	24016436 <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
240165a0:	eddf 7a49 	vldr	s15, [pc, #292]	; 240166c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
240165a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
240165a8:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
240165aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
240165ae:	eea8 0a88 	vfma.f32	s0, s17, s16
240165b2:	f002 f91d 	bl	240187f0 <lrintf>
	r -= (float)i;
240165b6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165ba:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240165be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240165c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165c6:	3301      	adds	r3, #1
	r -= (float)i;
240165c8:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240165d0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240165d4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
240165d8:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240165dc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
240165e0:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240165e4:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240165e8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
240165ec:	3301      	adds	r3, #1
240165ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240165f2:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
240165f6:	e671      	b.n	240162dc <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
240165f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
240165fc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
24016600:	e6e0      	b.n	240163c4 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
24016602:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
24016606:	ed9f aa30 	vldr	s20, [pc, #192]	; 240166c8 <tMBSaw_tick+0x464>
2401660a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
2401660e:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
24016610:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24016614:	eea8 0a8a 	vfma.f32	s0, s17, s20
24016618:	f002 f8ea 	bl	240187f0 <lrintf>
	r -= (float)i;
2401661c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016620:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016624:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24016628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401662c:	4a27      	ldr	r2, [pc, #156]	; (240166cc <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401662e:	3301      	adds	r3, #1
	r -= (float)i;
24016630:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24016638:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401663c:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24016640:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24016644:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
24016648:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401664c:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24016650:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
24016654:	3301      	adds	r3, #1
24016656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401665a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
2401665e:	e63d      	b.n	240162dc <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
24016660:	ed9f ba19 	vldr	s22, [pc, #100]	; 240166c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
24016664:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
24016668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
2401666c:	682f      	ldr	r7, [r5, #0]
2401666e:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
24016672:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
24016676:	eeab 0a09 	vfma.f32	s0, s22, s18
2401667a:	f002 f8b9 	bl	240187f0 <lrintf>
	r -= (float)i;
2401667e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016682:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24016686:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401668a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401668e:	4a0f      	ldr	r2, [pc, #60]	; (240166cc <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016690:	3301      	adds	r3, #1
	r -= (float)i;
24016692:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24016696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401669a:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401669e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
240166a2:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240166a6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
240166aa:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240166ae:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240166b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
240166b6:	3301      	adds	r3, #1
240166b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240166bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
240166c0:	e6f4      	b.n	240164ac <tMBSaw_tick+0x248>
240166c2:	bf00      	nop
240166c4:	240288c0 	.word	0x240288c0
240166c8:	42800000 	.word	0x42800000
240166cc:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
240166d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
240166d4:	ee38 8a47 	vsub.f32	s16, s16, s14
240166d8:	e6ad      	b.n	24016436 <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
240166da:	eeb0 8a49 	vmov.f32	s16, s18
240166de:	e5ef      	b.n	240162c0 <tMBSaw_tick+0x5c>

240166e0 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
240166e0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
240166e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
240166e6:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
240166ea:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
240166ee:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
240166f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
240166f6:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
240166fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
240166fe:	4770      	bx	lr

24016700 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
24016700:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24016702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24016706:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
2401670a:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
2401670e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24016712:	eef1 7a67 	vneg.f32	s15, s15
24016716:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401671a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016722:	eef4 6ac7 	vcmpe.f32	s13, s14
24016726:	bfcc      	ite	gt
24016728:	2201      	movgt	r2, #1
2401672a:	2200      	movle	r2, #0
2401672c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016730:	f002 0201 	and.w	r2, r2, #1
24016734:	bf88      	it	hi
24016736:	2200      	movhi	r2, #0
24016738:	b122      	cbz	r2, 24016744 <tMBSaw_sync+0x44>
2401673a:	eeb5 0a40 	vcmp.f32	s0, #0.0
2401673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016742:	da04      	bge.n	2401674e <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24016744:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2401675c <tMBSaw_sync+0x5c>
24016748:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
2401674c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
2401674e:	ee37 7a66 	vsub.f32	s14, s14, s13
24016752:	ee27 7a06 	vmul.f32	s14, s14, s12
24016756:	ed83 7a04 	vstr	s14, [r3, #16]
}
2401675a:	4770      	bx	lr
2401675c:	00000000 	.word	0x00000000

24016760 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
24016760:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
24016762:	698d      	ldr	r5, [r1, #24]
{
24016764:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
24016766:	f44f 703e 	mov.w	r0, #760	; 0x2f8
2401676a:	4629      	mov	r1, r5
2401676c:	f7fc fc16 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
24016770:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
24016774:	6030      	str	r0, [r6, #0]
    c->active = 1;
24016776:	2201      	movs	r2, #1
    c->mempool = m;
24016778:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
2401677a:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
2401677c:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
2401677e:	2500      	movs	r5, #0
    c->gain = 1.0f;
24016780:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
24016784:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
24016788:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
2401678c:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
24016790:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
24016792:	ed9f 6a16 	vldr	s12, [pc, #88]	; 240167ec <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
24016796:	eddf 7a16 	vldr	s15, [pc, #88]	; 240167f0 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
2401679a:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
2401679e:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
240167a0:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240167a4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
240167a8:	6185      	str	r5, [r0, #24]
    c->_j = 0;
240167aa:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
240167ac:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240167ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
240167b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
240167b4:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240167b6:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
240167b8:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240167bc:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
240167be:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
240167c2:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
240167c4:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
240167c6:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
240167c8:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
240167ca:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
240167cc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
240167d0:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240167d2:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
240167d4:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
240167d8:	f001 fbe6 	bl	24017fa8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
240167dc:	4629      	mov	r1, r5
240167de:	f104 0048 	add.w	r0, r4, #72	; 0x48
240167e2:	2220      	movs	r2, #32
}
240167e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
240167e8:	f001 bbde 	b.w	24017fa8 <memset>
240167ec:	3b14f209 	.word	0x3b14f209
240167f0:	43dc0000 	.word	0x43dc0000

240167f4 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
240167f4:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
240167f6:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
240167fa:	4770      	bx	lr

240167fc <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
240167fc:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240167fe:	698c      	ldr	r4, [r1, #24]
{
24016800:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016802:	201c      	movs	r0, #28
24016804:	4621      	mov	r1, r4
24016806:	f7fc fbc9 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
2401680a:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401680c:	6028      	str	r0, [r5, #0]
    c->mempool = m;
2401680e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24016810:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016812:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24016828 <tIntPhasor_init+0x2c>
    c->phase    =  0;
24016816:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016818:	edd3 7a01 	vldr	s15, [r3, #4]
2401681c:	ee67 7a87 	vmul.f32	s15, s15, s14
24016820:	edc0 7a06 	vstr	s15, [r0, #24]
}
24016824:	bd38      	pop	{r3, r4, r5, pc}
24016826:	bf00      	nop
24016828:	4f800000 	.word	0x4f800000

2401682c <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
2401682c:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
2401682e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24016848 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
24016832:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
24016836:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24016838:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
2401683c:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401683e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24016842:	ee20 0a27 	vmul.f32	s0, s0, s15
24016846:	4770      	bx	lr
24016848:	2f80000d 	.word	0x2f80000d

2401684c <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
2401684c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401684e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016852:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016856:	ee20 0a27 	vmul.f32	s0, s0, s15
2401685a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401685e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24016862:	4770      	bx	lr

24016864 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
24016864:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24016868:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24016884 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
2401686c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401686e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016872:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24016876:	ee20 0a07 	vmul.f32	s0, s0, s14
2401687a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401687e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016882:	4770      	bx	lr
24016884:	4f800000 	.word	0x4f800000

24016888 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
24016888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401688a:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401688e:	698f      	ldr	r7, [r1, #24]
{
24016890:	4606      	mov	r6, r0
24016892:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24016894:	2010      	movs	r0, #16
24016896:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016898:	ed9f 8a21 	vldr	s16, [pc, #132]	; 24016920 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
2401689c:	f7fc fb7e 	bl	24012f9c <mpool_alloc>
240168a0:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240168a2:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240168a4:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240168a6:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240168a8:	201c      	movs	r0, #28
240168aa:	4639      	mov	r1, r7
240168ac:	f7fc fb76 	bl	24012f9c <mpool_alloc>
240168b0:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240168b2:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240168b4:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
240168b6:	2700      	movs	r7, #0
240168b8:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240168ba:	edd3 7a01 	vldr	s15, [r3, #4]
240168be:	ee67 7a88 	vmul.f32	s15, s15, s16
240168c2:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240168c6:	201c      	movs	r0, #28
    _tMempool* m = *mp;
240168c8:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240168ca:	4629      	mov	r1, r5
240168cc:	f7fc fb66 	bl	24012f9c <mpool_alloc>
240168d0:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240168d2:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
240168d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240168d8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240168da:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240168dc:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240168e0:	eddf 6a10 	vldr	s13, [pc, #64]	; 24016924 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240168e4:	ee27 7a08 	vmul.f32	s14, s14, s16
240168e8:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
240168ec:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240168ee:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240168f0:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240168f4:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240168f8:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240168fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240168fe:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24016902:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24016906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401690a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401690e:	ee67 7a88 	vmul.f32	s15, s15, s16
24016912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016916:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401691a:	ecbd 8b02 	vpop	{d8}
2401691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24016920:	4f800000 	.word	0x4f800000
24016924:	2f80000d 	.word	0x2f80000d

24016928 <tSquareLFO_initToPool>:
{
24016928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401692a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401692e:	680f      	ldr	r7, [r1, #0]
{
24016930:	4606      	mov	r6, r0
24016932:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24016934:	2010      	movs	r0, #16
24016936:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016938:	ed9f 8a21 	vldr	s16, [pc, #132]	; 240169c0 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
2401693c:	f7fc fb2e 	bl	24012f9c <mpool_alloc>
24016940:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24016942:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24016944:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24016946:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016948:	201c      	movs	r0, #28
2401694a:	4639      	mov	r1, r7
2401694c:	f7fc fb26 	bl	24012f9c <mpool_alloc>
24016950:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24016952:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24016954:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
24016956:	2700      	movs	r7, #0
24016958:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401695a:	edd3 7a01 	vldr	s15, [r3, #4]
2401695e:	ee67 7a88 	vmul.f32	s15, s15, s16
24016962:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016966:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24016968:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401696a:	4629      	mov	r1, r5
2401696c:	f7fc fb16 	bl	24012f9c <mpool_alloc>
24016970:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24016972:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
24016974:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24016978:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
2401697a:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401697c:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016980:	eddf 6a10 	vldr	s13, [pc, #64]	; 240169c4 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016984:	ee27 7a08 	vmul.f32	s14, s14, s16
24016988:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
2401698c:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401698e:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24016990:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016994:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24016998:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401699a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401699e:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
240169a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240169a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240169aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240169ae:	ee67 7a88 	vmul.f32	s15, s15, s16
240169b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240169b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
240169ba:	ecbd 8b02 	vpop	{d8}
240169be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240169c0:	4f800000 	.word	0x4f800000
240169c4:	2f80000d 	.word	0x2f80000d

240169c8 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
240169c8:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240169ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
240169ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24016a0c <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
240169d2:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
240169d4:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240169d8:	4403      	add	r3, r0
240169da:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
240169dc:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
240169e0:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
240169e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240169e6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240169ea:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
240169ec:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
240169f0:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240169f2:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240169f6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
240169fa:	ee30 0a66 	vsub.f32	s0, s0, s13
240169fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
24016a02:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24016a06:	ee30 0a00 	vadd.f32	s0, s0, s0
24016a0a:	4770      	bx	lr
24016a0c:	2f80000d 	.word	0x2f80000d

24016a10 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24016a10:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24016a12:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016a14:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016a18:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016a1c:	ee60 7a27 	vmul.f32	s15, s0, s15
24016a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016a24:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24016a28:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016a2a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016a2e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016a32:	ee20 0a27 	vmul.f32	s0, s0, s15
24016a36:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24016a3a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24016a3e:	4770      	bx	lr

24016a40 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24016a40:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016a42:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24016a78 <tSquareLFO_setPulseWidth+0x38>
24016a46:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24016a48:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016a4c:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24016a50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24016a7c <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24016a58:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016a5a:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
24016a5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24016a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016a66:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24016a6a:	ee20 0a07 	vmul.f32	s0, s0, s14
24016a6e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24016a72:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016a76:	4770      	bx	lr
24016a78:	2f80000d 	.word	0x2f80000d
24016a7c:	4f800000 	.word	0x4f800000

24016a80 <tSquareLFO_setPhase>:
    int i = phase;
24016a80:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
24016a84:	eddf 6a13 	vldr	s13, [pc, #76]	; 24016ad4 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
24016a88:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016a8a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24016ad8 <tSquareLFO_setPhase+0x58>
    phase -= i;
24016a8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
24016a92:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24016a94:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
24016a98:	ee20 0a26 	vmul.f32	s0, s0, s13
24016a9c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24016aa0:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016aa4:	689a      	ldr	r2, [r3, #8]
24016aa6:	edd3 7a01 	vldr	s15, [r3, #4]
24016aaa:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24016aae:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016ab0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24016ab4:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24016ab8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24016abc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24016ac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24016ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016acc:	edc3 7a01 	vstr	s15, [r3, #4]
}
24016ad0:	4770      	bx	lr
24016ad2:	bf00      	nop
24016ad4:	4f800000 	.word	0x4f800000
24016ad8:	2f80000d 	.word	0x2f80000d

24016adc <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24016adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24016ade:	460c      	mov	r4, r1
{
24016ae0:	4606      	mov	r6, r0
24016ae2:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24016ae4:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24016ae6:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24016aea:	4639      	mov	r1, r7
24016aec:	f7fc fa56 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
24016af0:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24016af2:	6030      	str	r0, [r6, #0]
24016af4:	4604      	mov	r4, r0
    c->mempool = m;
24016af6:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24016afa:	f7ff ff15 	bl	24016928 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
24016afe:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016b00:	201c      	movs	r0, #28
24016b02:	4629      	mov	r1, r5
24016b04:	f7fc fa4a 	bl	24012f9c <mpool_alloc>
    c->phase    =  0;
24016b08:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24016b0a:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24016b0c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24016b0e:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016b10:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24016b24 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
24016b14:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016b16:	edd3 7a01 	vldr	s15, [r3, #4]
24016b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
24016b1e:	edc0 7a06 	vstr	s15, [r0, #24]
}
24016b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24016b24:	4f800000 	.word	0x4f800000

24016b28 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24016b28:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
24016b2a:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24016b2c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24016b30:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24016ba8 <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24016b34:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
24016b38:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24016b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
24016b3e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24016b42:	4403      	add	r3, r0
24016b44:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24016b46:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
24016b4a:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24016b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24016b50:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
24016b52:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24016b54:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
24016b58:	6884      	ldr	r4, [r0, #8]
24016b5a:	4423      	add	r3, r4
24016b5c:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
24016b5e:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24016b62:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
24016b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24016b68:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
24016b6c:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
24016b6e:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
24016b72:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24016b74:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24016b78:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24016b7c:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24016b80:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24016b84:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24016b88:	ee76 6ac5 	vsub.f32	s13, s13, s10
24016b8c:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
24016b90:	ee30 0a00 	vadd.f32	s0, s0, s0
24016b94:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24016b98:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
24016b9c:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24016ba0:	eea6 0a07 	vfma.f32	s0, s12, s14
24016ba4:	4770      	bx	lr
24016ba6:	bf00      	nop
24016ba8:	2f80000d 	.word	0x2f80000d

24016bac <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
24016bac:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
24016bae:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24016bb0:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016bb2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016bb6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016bba:	ee60 7a27 	vmul.f32	s15, s0, s15
24016bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016bc2:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24016bc6:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016bc8:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016bcc:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016bd0:	ee60 7a27 	vmul.f32	s15, s0, s15
24016bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016bd8:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24016bdc:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016bde:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24016be2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016be6:	ee20 0a27 	vmul.f32	s0, s0, s15
24016bea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24016bee:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
24016bf2:	4770      	bx	lr

24016bf4 <tSawSquareLFO_setPhase>:
    int i = phase;
24016bf4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
24016bf8:	eddf 6a15 	vldr	s13, [pc, #84]	; 24016c50 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
24016bfc:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016bfe:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24016c54 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
24016c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
24016c06:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
24016c08:	6890      	ldr	r0, [r2, #8]
    phase -= i;
24016c0a:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
24016c0e:	ee20 0a26 	vmul.f32	s0, s0, s13
24016c12:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24016c16:	edc0 7a01 	vstr	s15, [r0, #4]
24016c1a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016c1e:	6890      	ldr	r0, [r2, #8]
24016c20:	edd2 7a01 	vldr	s15, [r2, #4]
24016c24:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
24016c28:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24016c2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24016c2e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24016c32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24016c36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24016c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24016c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016c46:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
24016c4a:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
24016c4c:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24016c4e:	4770      	bx	lr
24016c50:	4f800000 	.word	0x4f800000
24016c54:	2f80000d 	.word	0x2f80000d

24016c58 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
24016c58:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
24016c5a:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016c5e:	4770      	bx	lr

24016c60 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
24016c60:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24016c62:	698d      	ldr	r5, [r1, #24]
{
24016c64:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24016c66:	2018      	movs	r0, #24
24016c68:	4629      	mov	r1, r5
24016c6a:	f7fc f997 	bl	24012f9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24016c6e:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24016c70:	6020      	str	r0, [r4, #0]
    c->mempool = m;
24016c72:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24016c74:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016c76:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24016cac <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
24016c7a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24016cb0 <tTriLFO_init+0x50>
    c->phase    =  0;
24016c7e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24016c82:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016c86:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
24016c8a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016c8e:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
24016c92:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016c94:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24016c98:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016c9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016ca4:	edc3 7a02 	vstr	s15, [r3, #8]
}
24016ca8:	bd38      	pop	{r3, r4, r5, pc}
24016caa:	bf00      	nop
24016cac:	4f800000 	.word	0x4f800000
24016cb0:	435c0000 	.word	0x435c0000

24016cb4 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24016cb4:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016cb6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016cba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24016ce4 <tTriLFO_tick+0x30>
    c->phase += c->inc;
24016cbe:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
24016cc2:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24016cc4:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
24016cc8:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24016cca:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24016cce:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016cd2:	ee07 3a90 	vmov	s15, r3
24016cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016cda:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24016cde:	ee30 0a00 	vadd.f32	s0, s0, s0
24016ce2:	4770      	bx	lr
24016ce4:	2ffffff6 	.word	0x2ffffff6

24016ce8 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24016ce8:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016cea:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24016cee:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016cf2:	ee20 0a27 	vmul.f32	s0, s0, s15
24016cf6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24016cfa:	ed83 0a02 	vstr	s0, [r3, #8]
}
24016cfe:	4770      	bx	lr

24016d00 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24016d00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24016d04:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24016d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016d0a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24016d0e:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24016d12:	ed83 0a01 	vstr	s0, [r3, #4]
}
24016d16:	4770      	bx	lr

24016d18 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24016d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24016d1a:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24016d1e:	698f      	ldr	r7, [r1, #24]
{
24016d20:	4606      	mov	r6, r0
24016d22:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24016d24:	2010      	movs	r0, #16
24016d26:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016d28:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24016da4 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24016d2c:	f7fc f936 	bl	24012f9c <mpool_alloc>
24016d30:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24016d32:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24016d34:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24016d36:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24016d38:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24016d3a:	4631      	mov	r1, r6
24016d3c:	f7fc f92e 	bl	24012f9c <mpool_alloc>
24016d40:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24016d42:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24016d44:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
24016d46:	2600      	movs	r6, #0
    c->freq  = freq;
24016d48:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24016da8 <tSineTriLFO_init+0x90>
    c->phase    =  0;
24016d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24016d50:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016d54:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
24016d58:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24016d5c:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24016d60:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
24016d62:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016d64:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24016d68:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
24016d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016d74:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
24016d78:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24016d7a:	4629      	mov	r1, r5
24016d7c:	f7fc f90e 	bl	24012f9c <mpool_alloc>
24016d80:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24016d82:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24016d84:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
24016d88:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
24016d8a:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016d8e:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24016d92:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24016d94:	ee67 7a88 	vmul.f32	s15, s15, s16
24016d98:	edc0 7a04 	vstr	s15, [r0, #16]
}
24016d9c:	ecbd 8b02 	vpop	{d8}
24016da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24016da2:	bf00      	nop
24016da4:	4f800000 	.word	0x4f800000
24016da8:	435c0000 	.word	0x435c0000

24016dac <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24016dac:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
24016dae:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24016db0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24016db4:	4a20      	ldr	r2, [pc, #128]	; (24016e38 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016db6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
24016dba:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016dbc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24016e3c <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
24016dc0:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016dc2:	eddf 4a1f 	vldr	s9, [pc, #124]	; 24016e40 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
24016dc6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24016dca:	4403      	add	r3, r0
24016dcc:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
24016dce:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
24016dd0:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24016dd2:	f3c3 0314 	ubfx	r3, r3, #0, #21
24016dd6:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
24016dda:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24016de2:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
24016de4:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
24016de6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
24016dea:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
24016dec:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24016dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016df2:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
24016df6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
24016dfa:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24016dfe:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
24016e02:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
24016e06:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016e0a:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24016e0e:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24016e12:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016e16:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016e1a:	ee07 3a10 	vmov	s14, r3
24016e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24016e22:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24016e26:	eea7 0a24 	vfma.f32	s0, s14, s9
}
24016e2a:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
24016e2c:	ee26 0a00 	vmul.f32	s0, s12, s0
}
24016e30:	eea5 0aa6 	vfma.f32	s0, s11, s13
24016e34:	4770      	bx	lr
24016e36:	bf00      	nop
24016e38:	2402213c 	.word	0x2402213c
24016e3c:	35000004 	.word	0x35000004
24016e40:	2ffffff6 	.word	0x2ffffff6

24016e44 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
24016e44:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24016e46:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016e48:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24016e4c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016e50:	ee60 7a27 	vmul.f32	s15, s0, s15
24016e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016e58:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24016e5c:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016e5e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24016e62:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24016e66:	ee20 0a27 	vmul.f32	s0, s0, s15
24016e6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24016e6e:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
24016e72:	4770      	bx	lr

24016e74 <tSineTriLFO_setPhase>:
    int i = phase;
24016e74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24016e78:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24016ea0 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
24016e7c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24016e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
24016e82:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24016e84:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24016e88:	ee20 0a07 	vmul.f32	s0, s0, s14
24016e8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24016e90:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24016e94:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24016e98:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
24016e9a:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24016e9e:	4770      	bx	lr
24016ea0:	4f800000 	.word	0x4f800000

24016ea4 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
24016ea4:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24016ea6:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24016eaa:	4770      	bx	lr
24016eac:	0000      	movs	r0, r0
	...

24016eb0 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
24016eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016eb4:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
24016eb8:	f8d3 9000 	ldr.w	r9, [r3]
{
24016ebc:	b083      	sub	sp, #12
24016ebe:	460e      	mov	r6, r1
24016ec0:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016ec2:	4649      	mov	r1, r9
24016ec4:	2064      	movs	r0, #100	; 0x64
{
24016ec6:	461d      	mov	r5, r3
24016ec8:	eeb0 8a40 	vmov.f32	s16, s0
24016ecc:	eeb0 9a41 	vmov.f32	s18, s2
24016ed0:	4617      	mov	r7, r2
24016ed2:	eef0 9a61 	vmov.f32	s19, s3
24016ed6:	eeb0 aa42 	vmov.f32	s20, s4
24016eda:	eef0 aa62 	vmov.f32	s21, s5
24016ede:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016ee2:	f7fc f85b 	bl	24012f9c <mpool_alloc>
24016ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
24016eea:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016eee:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016ef2:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
24016ef6:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
24016efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016efe:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
24016f02:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24016f06:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
24016f08:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
24016f0c:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016f10:	4604      	mov	r4, r0
    p->curr=0.0f;
24016f12:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
24016f14:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016f18:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24016f1c:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
24016f20:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
24016f24:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016f26:	eddf 0a82 	vldr	s1, [pc, #520]	; 24017130 <tSimpleLivingString3_initToPool+0x280>
24016f2a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
24016f2c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24016f2e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24016f32:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016f36:	4650      	mov	r0, sl
24016f38:	ee2b 0a2b 	vmul.f32	s0, s22, s23
24016f3c:	ee20 0a27 	vmul.f32	s0, s0, s15
24016f40:	f7fa f850 	bl	24010fe4 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24016f44:	ed94 0a02 	vldr	s0, [r4, #8]
24016f48:	462a      	mov	r2, r5
24016f4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
24016f4c:	4658      	mov	r0, fp
24016f4e:	f7f9 f8c5 	bl	240100dc <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24016f52:	ed94 0a02 	vldr	s0, [r4, #8]
24016f56:	462a      	mov	r2, r5
24016f58:	6b21      	ldr	r1, [r4, #48]	; 0x30
24016f5a:	4648      	mov	r0, r9
24016f5c:	f7f9 f8be 	bl	240100dc <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
24016f60:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
24016f64:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
24016f68:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
24016f6c:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
24016f70:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 24017120 <tSimpleLivingString3_initToPool+0x270>
24016f74:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24016f78:	eeb4 7bc6 	vcmpe.f64	d7, d6
24016f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f80:	f100 80c7 	bmi.w	24017112 <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24016f84:	6b33      	ldr	r3, [r6, #48]	; 0x30
24016f86:	005b      	lsls	r3, r3, #1
24016f88:	ee07 3a90 	vmov	s15, r3
24016f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24016f90:	fec7 7ac0 	vminnm.f32	s15, s15, s0
24016f94:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016f98:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24016f9c:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016fa0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016fa4:	f7fa f84a 	bl	2401103c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016fa8:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24016fac:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016fb0:	eddf 7a60 	vldr	s15, [pc, #384]	; 24017134 <tSimpleLivingString3_initToPool+0x284>
24016fb4:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016fb8:	ed96 6a01 	vldr	s12, [r6, #4]
24016fbc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016fc4:	ed9f 0b58 	vldr	d0, [pc, #352]	; 24017128 <tSimpleLivingString3_initToPool+0x278>
24016fc8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24016fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
24016fd0:	ee80 0b07 	vdiv.f64	d0, d0, d7
24016fd4:	f001 f928 	bl	24018228 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24016fd8:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016fda:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24016fde:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24016fe2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24016fe6:	ed94 0a02 	vldr	s0, [r4, #8]
24016fea:	f7f9 f93d 	bl	24010268 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24016fee:	ed94 0a02 	vldr	s0, [r4, #8]
24016ff2:	4648      	mov	r0, r9
24016ff4:	f7f9 f938 	bl	24010268 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24016ff8:	4658      	mov	r0, fp
24016ffa:	f7f9 f8e7 	bl	240101cc <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24016ffe:	4648      	mov	r0, r9
24017000:	f7f9 f8e4 	bl	240101cc <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24017004:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24017008:	4629      	mov	r1, r5
2401700a:	eeb0 0a68 	vmov.f32	s0, s17
2401700e:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
24017010:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24017014:	9301      	str	r3, [sp, #4]
24017016:	f7fa f825 	bl	24011064 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
2401701a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401701e:	9801      	ldr	r0, [sp, #4]
24017020:	f7fa f886 	bl	24011130 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24017024:	eeb0 0a68 	vmov.f32	s0, s17
24017028:	9801      	ldr	r0, [sp, #4]
2401702a:	f7fa f84f 	bl	240110cc <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
2401702e:	4629      	mov	r1, r5
24017030:	4640      	mov	r0, r8
24017032:	f8cd 8004 	str.w	r8, [sp, #4]
24017036:	f7fa f8d5 	bl	240111e4 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
2401703a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401703e:	9801      	ldr	r0, [sp, #4]
24017040:	f7fa f8e8 	bl	24011214 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24017044:	4629      	mov	r1, r5
24017046:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
2401704a:	4630      	mov	r0, r6
2401704c:	9601      	str	r6, [sp, #4]
2401704e:	f7fa fa33 	bl	240114b8 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24017052:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24017056:	9801      	ldr	r0, [sp, #4]
24017058:	f7fa fa6a 	bl	24011530 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
2401705c:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24017060:	9801      	ldr	r0, [sp, #4]
24017062:	f7fa fa49 	bl	240114f8 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24017066:	eeb0 0a69 	vmov.f32	s0, s19
2401706a:	eeb0 1a6a 	vmov.f32	s2, s21
2401706e:	462a      	mov	r2, r5
24017070:	eef0 0a4a 	vmov.f32	s1, s20
24017074:	f104 0054 	add.w	r0, r4, #84	; 0x54
24017078:	4639      	mov	r1, r7
    p->userDecay = decay;
2401707a:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401707e:	f7f9 fc2b 	bl	240108d8 <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
24017082:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
24017086:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
24017088:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
2401708c:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24017090:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24017094:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24017120 <tSimpleLivingString3_initToPool+0x270>
24017098:	eeb7 6acb 	vcvt.f64.f32	d6, s22
2401709c:	eeb4 6bc7 	vcmpe.f64	d6, d7
240170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240170a4:	d438      	bmi.n	24017118 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240170a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
240170a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240170ac:	005b      	lsls	r3, r3, #1
240170ae:	ee00 3a10 	vmov	s0, r3
240170b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
240170b6:	fe80 0a4b 	vminnm.f32	s0, s0, s22
240170ba:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240170be:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
240170c0:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240170c4:	f7f9 ffba 	bl	2401103c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240170c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240170cc:	ed94 7a05 	vldr	s14, [r4, #20]
240170d0:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017134 <tSimpleLivingString3_initToPool+0x284>
240170d4:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240170d8:	ed94 6a01 	vldr	s12, [r4, #4]
240170dc:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240170e0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240170e4:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24017128 <tSimpleLivingString3_initToPool+0x278>
240170e8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240170ec:	ee27 7b06 	vmul.f64	d7, d7, d6
240170f0:	ee80 0b07 	vdiv.f64	d0, d0, d7
240170f4:	f001 f898 	bl	24018228 <exp>
    p->pickupPoint = 0.9f;
240170f8:	4a0f      	ldr	r2, [pc, #60]	; (24017138 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
240170fa:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
240170fc:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240170fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24017102:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017104:	ed84 0a04 	vstr	s0, [r4, #16]
}
24017108:	b003      	add	sp, #12
2401710a:	ecbd 8b08 	vpop	{d8-d11}
2401710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24017112:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401713c <tSimpleLivingString3_initToPool+0x28c>
24017116:	e73f      	b.n	24016f98 <tSimpleLivingString3_initToPool+0xe8>
24017118:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401713c <tSimpleLivingString3_initToPool+0x28c>
2401711c:	e7cf      	b.n	240170be <tSimpleLivingString3_initToPool+0x20e>
2401711e:	bf00      	nop
24017120:	33333333 	.word	0x33333333
24017124:	40133333 	.word	0x40133333
24017128:	0a3d70a4 	.word	0x0a3d70a4
2401712c:	c01ba3d7 	.word	0xc01ba3d7
24017130:	3c23d70a 	.word	0x3c23d70a
24017134:	3d8d78c4 	.word	0x3d8d78c4
24017138:	3f666666 	.word	0x3f666666
2401713c:	4019999a 	.word	0x4019999a

24017140 <tSimpleLivingString3_setFreq>:
{
24017140:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24017142:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
24017144:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24017148:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
2401714c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24017150:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 240171c8 <tSimpleLivingString3_setFreq+0x88>
24017154:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24017158:	eeb4 5bc6 	vcmpe.f64	d5, d6
2401715c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017160:	d42e      	bmi.n	240171c0 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24017162:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24017164:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24017168:	005b      	lsls	r3, r3, #1
2401716a:	ee00 3a10 	vmov	s0, r3
2401716e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24017172:	fe80 0a67 	vminnm.f32	s0, s0, s15
24017176:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401717a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
2401717e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017182:	f7f9 ff5b 	bl	2401103c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24017186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401718a:	ed94 7a05 	vldr	s14, [r4, #20]
2401718e:	eddf 7a12 	vldr	s15, [pc, #72]	; 240171d8 <tSimpleLivingString3_setFreq+0x98>
24017192:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24017196:	ed94 6a01 	vldr	s12, [r4, #4]
2401719a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401719e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240171a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 240171d0 <tSimpleLivingString3_setFreq+0x90>
240171a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240171aa:	ee27 7b06 	vmul.f64	d7, d7, d6
240171ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
240171b2:	f001 f839 	bl	24018228 <exp>
240171b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240171ba:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
240171be:	bd10      	pop	{r4, pc}
240171c0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 240171dc <tSimpleLivingString3_setFreq+0x9c>
240171c4:	e7d9      	b.n	2401717a <tSimpleLivingString3_setFreq+0x3a>
240171c6:	bf00      	nop
240171c8:	33333333 	.word	0x33333333
240171cc:	40133333 	.word	0x40133333
240171d0:	0a3d70a4 	.word	0x0a3d70a4
240171d4:	c01ba3d7 	.word	0xc01ba3d7
240171d8:	3d8d78c4 	.word	0x3d8d78c4
240171dc:	4019999a 	.word	0x4019999a

240171e0 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
240171e0:	6800      	ldr	r0, [r0, #0]
240171e2:	303c      	adds	r0, #60	; 0x3c
240171e4:	f7f9 bf72 	b.w	240110cc <tOnePole_setFreq>

240171e8 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
240171e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240171ec:	eddf 6a10 	vldr	s13, [pc, #64]	; 24017230 <tSimpleLivingString3_setDecay+0x48>
{
240171f0:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
240171f2:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
240171f6:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
240171f8:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
240171fc:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
24017200:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24017204:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24017208:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401720c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24017228 <tSimpleLivingString3_setDecay+0x40>
24017210:	ee27 7b06 	vmul.f64	d7, d7, d6
24017214:	ee85 0b07 	vdiv.f64	d0, d5, d7
24017218:	f001 f806 	bl	24018228 <exp>
2401721c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24017220:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24017224:	bd10      	pop	{r4, pc}
24017226:	bf00      	nop
24017228:	52bd3c36 	.word	0x52bd3c36
2401722c:	c01ba196 	.word	0xc01ba196
24017230:	3d8d78c4 	.word	0x3d8d78c4

24017234 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24017234:	6800      	ldr	r0, [r0, #0]
24017236:	3054      	adds	r0, #84	; 0x54
24017238:	f7f9 bba6 	b.w	24010988 <tFeedbackLeveler_setTargetLevel>

2401723c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
2401723c:	6800      	ldr	r0, [r0, #0]
2401723e:	3054      	adds	r0, #84	; 0x54
24017240:	f7f9 bb76 	b.w	24010930 <tFeedbackLeveler_setFactor>

24017244 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24017244:	6800      	ldr	r0, [r0, #0]
24017246:	3054      	adds	r0, #84	; 0x54
24017248:	f7f9 bb6e 	b.w	24010928 <tFeedbackLeveler_setStrength>

2401724c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
2401724c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
2401724e:	6805      	ldr	r5, [r0, #0]
{
24017250:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24017252:	f105 0054 	add.w	r0, r5, #84	; 0x54
24017256:	f7f9 fb6f 	bl	24010938 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
2401725a:	622c      	str	r4, [r5, #32]
}
2401725c:	bd38      	pop	{r3, r4, r5, pc}
2401725e:	bf00      	nop

24017260 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
24017260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
24017264:	6801      	ldr	r1, [r0, #0]
{
24017266:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
24017268:	edd1 7a02 	vldr	s15, [r1, #8]
2401726c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017270:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24017274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017278:	ee67 0aa0 	vmul.f32	s1, s15, s1
2401727c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24017280:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
24017284:	2b00      	cmp	r3, #0
24017286:	f340 8081 	ble.w	2401738c <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
2401728a:	4298      	cmp	r0, r3
2401728c:	dc0f      	bgt.n	240172ae <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
2401728e:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24017290:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24017292:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
24017294:	dd77      	ble.n	24017386 <tSimpleLivingString3_pluck+0x126>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
24017296:	ee07 7a90 	vmov	s15, r7
2401729a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401729e:	2f00      	cmp	r7, #0
240172a0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240172a4:	ee86 7a86 	vdiv.f32	s14, s13, s12
240172a8:	da0f      	bge.n	240172ca <tSimpleLivingString3_pluck+0x6a>
240172aa:	2300      	movs	r3, #0
240172ac:	e02b      	b.n	24017306 <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
240172ae:	1ac2      	subs	r2, r0, r3
            val = input * ((float)i/(float)pluckPoint);
240172b0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240172b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240172b8:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
240172ba:	ee07 2a90 	vmov	s15, r2
240172be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240172c2:	ee85 7a86 	vdiv.f32	s14, s11, s12
240172c6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240172ca:	429f      	cmp	r7, r3
240172cc:	bfa8      	it	ge
240172ce:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
240172d0:	2300      	movs	r3, #0
240172d2:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240172d6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((float)i/(float)pluckPoint);
240172d8:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240172dc:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((float)i/(float)pluckPoint);
240172e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
240172e4:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240172e6:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
240172e8:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240172ea:	fbb2 f6f5 	udiv	r6, r2, r5
240172ee:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((float)i/(float)pluckPoint);
240172f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
240172f6:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
240172f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
240172fc:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24017300:	dde9      	ble.n	240172d6 <tSimpleLivingString3_pluck+0x76>
24017302:	4298      	cmp	r0, r3
24017304:	dd1d      	ble.n	24017342 <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017306:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401730a:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401730e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24017314:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017318:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
2401731c:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24017320:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24017322:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24017324:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017326:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
2401732a:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401732c:	fbb2 f6f5 	udiv	r6, r2, r5
24017330:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017334:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24017338:	eb04 0282 	add.w	r2, r4, r2, lsl #2
2401733c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24017340:	dce3      	bgt.n	2401730a <tSimpleLivingString3_pluck+0xaa>
            val = input * ((float)i/(float)pluckPoint);
24017342:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24017346:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401734a:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
2401734e:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24017350:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017352:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24017354:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017356:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24017358:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401735a:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
2401735c:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401735e:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24017360:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
24017362:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24017366:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401736a:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
2401736e:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
24017372:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24017374:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24017378:	eb05 0282 	add.w	r2, r5, r2, lsl #2
2401737c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24017380:	6812      	ldr	r2, [r2, #0]
24017382:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
24017384:	d1df      	bne.n	24017346 <tSimpleLivingString3_pluck+0xe6>
    }
}
24017386:	b002      	add	sp, #8
24017388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
2401738c:	2800      	cmp	r0, #0
2401738e:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
24017392:	ddf8      	ble.n	24017386 <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
24017394:	ee07 7a10 	vmov	s14, r7
24017398:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
2401739c:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
2401739e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
240173a2:	eeb0 7a67 	vmov.f32	s14, s15
240173a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((float)i/(float)pluckPoint);
240173aa:	eeb0 6a67 	vmov.f32	s12, s15
240173ae:	e78c      	b.n	240172ca <tSimpleLivingString3_pluck+0x6a>

240173b0 <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
240173b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
240173b4:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
240173b8:	6804      	ldr	r4, [r0, #0]
{
240173ba:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
240173bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
240173c0:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
240173c4:	f7f9 fe3e 	bl	24011044 <tExpSmooth_tick>
240173c8:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
240173cc:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
240173d0:	4630      	mov	r0, r6
    float wl = tExpSmooth_tick(&p->wlSmooth);
240173d2:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
240173d6:	f7f8 ff47 	bl	24010268 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
240173da:	eeb0 0a48 	vmov.f32	s0, s16
240173de:	4638      	mov	r0, r7
240173e0:	f7f8 ff42 	bl	24010268 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
240173e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240173e6:	2b00      	cmp	r3, #0
240173e8:	dd3c      	ble.n	24017464 <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
240173ea:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240173ee:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
240173f2:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
240173f4:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
240173f6:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
240173f8:	f7f8 ff0a 	bl	24010210 <tLinearDelay_tickOut>
240173fc:	4648      	mov	r0, r9
240173fe:	f7f9 fe83 	bl	24011108 <tOnePole_tick>
24017402:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017406:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24017408:	ee20 0a27 	vmul.f32	s0, s0, s15
2401740c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017410:	f7f9 fa96 	bl	24010940 <tFeedbackLeveler_tick>
24017414:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017418:	eef0 0a40 	vmov.f32	s1, s0
2401741c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017420:	f01c f892 	bl	24033548 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24017424:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24017426:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
2401742a:	f7f8 fef1 	bl	24010210 <tLinearDelay_tickOut>
2401742e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017432:	eef0 0a40 	vmov.f32	s1, s0
24017436:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401743a:	f01c f885 	bl	24033548 <__LEAF_clip_veneer>
2401743e:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
24017442:	4630      	mov	r0, r6
24017444:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24017448:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
2401744c:	f7f8 fecc 	bl	240101e8 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
24017450:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
24017454:	4638      	mov	r0, r7
24017456:	eeb1 0a40 	vneg.f32	s0, s0
2401745a:	f7f8 fec5 	bl	240101e8 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
2401745e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24017460:	42ab      	cmp	r3, r5
24017462:	dcc7      	bgt.n	240173f4 <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017464:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
24017468:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
2401746c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
2401746e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
24017472:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24017476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017478:	ee77 6ae6 	vsub.f32	s13, s15, s13
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
2401747c:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
2401747e:	feb8 6a65 	vrinta.f32	s12, s11
24017482:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    float reversePoint = wl * (1.0f - p->pickupPoint);
24017486:	ee66 6a88 	vmul.f32	s13, s13, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
2401748a:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
2401748e:	feb8 7a66 	vrinta.f32	s14, s13
24017492:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017496:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
2401749a:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
2401749e:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240174a2:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
240174a6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240174aa:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240174ac:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
240174ae:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240174b2:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
240174b4:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
240174b8:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240174bc:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240174be:	69c8      	ldr	r0, [r1, #28]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
240174c0:	6889      	ldr	r1, [r1, #8]
    float floatPart = point - whichPoint;
240174c2:	ee35 6ac6 	vsub.f32	s12, s11, s12
    floatPart = reversePoint - whichPoint;
240174c6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
240174ca:	fb93 f6f0 	sdiv	r6, r3, r0
240174ce:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240174d2:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
240174d4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    floatPart = reversePoint - whichPoint;
240174d8:	ee76 6ae5 	vsub.f32	s13, s13, s11
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
240174dc:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240174e0:	ed92 7a00 	vldr	s14, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
240174e4:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240174e8:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
240174ea:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240174ee:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
240174f2:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240174f6:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
240174fa:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
240174fc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24017500:	eea7 0a27 	vfma.f32	s0, s14, s15
24017504:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24017508:	fb93 f5f0 	sdiv	r5, r3, r0
2401750c:	eea7 0a86 	vfma.f32	s0, s15, s12
24017510:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
24017514:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24017518:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
2401751c:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
2401751e:	eea7 0aa6 	vfma.f32	s0, s15, s13
24017522:	ee20 0a24 	vmul.f32	s0, s0, s9
24017526:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
2401752a:	b003      	add	sp, #12
2401752c:	ecbd 8b02 	vpop	{d8}
24017530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

24017534 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
24017534:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24017536:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
2401753a:	4770      	bx	lr

2401753c <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
2401753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24017540:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
24017544:	f8d2 8000 	ldr.w	r8, [r2]
{
24017548:	4606      	mov	r6, r0
2401754a:	b083      	sub	sp, #12
2401754c:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
2401754e:	2070      	movs	r0, #112	; 0x70
24017550:	4641      	mov	r1, r8
{
24017552:	eef0 ca61 	vmov.f32	s25, s3
24017556:	4615      	mov	r5, r2
24017558:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
2401755c:	ed9f da99 	vldr	s26, [pc, #612]	; 240177c4 <tLivingString2_initToPool+0x288>
{
24017560:	eef0 9a62 	vmov.f32	s19, s5
24017564:	eef0 aa63 	vmov.f32	s21, s7
24017568:	eef0 ba44 	vmov.f32	s23, s8
2401756c:	eeb0 ca64 	vmov.f32	s24, s9
24017570:	eeb0 ba43 	vmov.f32	s22, s6
24017574:	eef0 8a41 	vmov.f32	s17, s2
24017578:	eeb0 aa40 	vmov.f32	s20, s0
2401757c:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24017580:	f7fb fd0c 	bl	24012f9c <mpool_alloc>
24017584:	6030      	str	r0, [r6, #0]
24017586:	4604      	mov	r4, r0
    p->mempool = m;
24017588:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401758c:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
2401758e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24017592:	305c      	adds	r0, #92	; 0x5c
24017594:	eddf 0a8c 	vldr	s1, [pc, #560]	; 240177c8 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24017598:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
2401759c:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
240175a0:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
240175a4:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
240175a8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240175ac:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
240175b0:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240175b4:	f7f9 fd16 	bl	24010fe4 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
240175b8:	eddf 7a84 	vldr	s15, [pc, #528]	; 240177cc <tLivingString2_initToPool+0x290>
240175bc:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
240175be:	f104 0934 	add.w	r9, r4, #52	; 0x34
240175c2:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
240175c6:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240175ca:	305c      	adds	r0, #92	; 0x5c
240175cc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
240175d0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
240175d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240175d8:	ed90 7a04 	vldr	s14, [r0, #16]
240175dc:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
240175e0:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240175e4:	ee30 0a6d 	vsub.f32	s0, s0, s27
240175e8:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240175ec:	f7f9 fd26 	bl	2401103c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
240175f0:	eddf 0a77 	vldr	s1, [pc, #476]	; 240177d0 <tLivingString2_initToPool+0x294>
240175f4:	eeb0 0a49 	vmov.f32	s0, s18
240175f8:	f104 0060 	add.w	r0, r4, #96	; 0x60
240175fc:	4629      	mov	r1, r5
    p->freq = freq;
240175fe:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
24017602:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24017606:	edcd 0a00 	vstr	s1, [sp]
2401760a:	f7f9 fceb 	bl	24010fe4 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
2401760e:	eeb0 0a68 	vmov.f32	s0, s17
24017612:	4629      	mov	r1, r5
24017614:	eddd 0a00 	vldr	s1, [sp]
24017618:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401761c:	f7f9 fce2 	bl	24010fe4 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
24017620:	eddd 0a00 	vldr	s1, [sp]
24017624:	4629      	mov	r1, r5
24017626:	eeb0 0a6c 	vmov.f32	s0, s25
2401762a:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401762e:	f7f9 fcd9 	bl	24010fe4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24017632:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
24017634:	fe89 0a6d 	vminnm.f32	s0, s18, s27
24017638:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401763c:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
2401763e:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24017642:	f7f9 fcfb 	bl	2401103c <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24017646:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
24017648:	fe88 0aed 	vminnm.f32	s0, s17, s27
2401764c:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24017650:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
24017652:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24017656:	f7f9 fcf1 	bl	2401103c <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
2401765a:	ed94 0a02 	vldr	s0, [r4, #8]
2401765e:	462a      	mov	r2, r5
24017660:	4658      	mov	r0, fp
24017662:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
24017666:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
2401766a:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
2401766e:	f7f8 fe3d 	bl	240102ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24017672:	ed94 0a02 	vldr	s0, [r4, #8]
24017676:	462a      	mov	r2, r5
24017678:	4650      	mov	r0, sl
2401767a:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401767e:	f7f8 fe35 	bl	240102ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24017682:	ed94 0a02 	vldr	s0, [r4, #8]
24017686:	462a      	mov	r2, r5
24017688:	4648      	mov	r0, r9
2401768a:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401768e:	f7f8 fe2d 	bl	240102ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24017692:	462a      	mov	r2, r5
24017694:	ed94 0a02 	vldr	s0, [r4, #8]
24017698:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401769c:	4640      	mov	r0, r8
2401769e:	f7f8 fe25 	bl	240102ec <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
240176a2:	4658      	mov	r0, fp
240176a4:	f7f8 fea0 	bl	240103e8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
240176a8:	4650      	mov	r0, sl
240176aa:	f7f8 fe9d 	bl	240103e8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
240176ae:	4648      	mov	r0, r9
240176b0:	f7f8 fe9a 	bl	240103e8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
240176b4:	4640      	mov	r0, r8
240176b6:	f7f8 fe97 	bl	240103e8 <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
240176ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240176be:	4629      	mov	r1, r5
    p->brightness = brightness;
240176c0:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
240176c4:	f7f9 fd56 	bl	24011174 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
240176c8:	4629      	mov	r1, r5
240176ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
240176ce:	f7f9 fd51 	bl	24011174 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
240176d2:	4629      	mov	r1, r5
240176d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
240176d8:	f7f9 fd4c 	bl	24011174 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
240176dc:	4629      	mov	r1, r5
240176de:	f104 0048 	add.w	r0, r4, #72	; 0x48
240176e2:	f7f9 fd47 	bl	24011174 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
240176e6:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
240176ea:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
240176ee:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
240176f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
240176f4:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240176f8:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
240176fc:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
24017700:	ee37 7b45 	vsub.f64	d7, d7, d5
24017704:	ee27 7b00 	vmul.f64	d7, d7, d0
    float h0=(1.0 + brightness) * 0.5f;
24017708:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
2401770c:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24017710:	edcd 0a00 	vstr	s1, [sp]
24017714:	eeb0 0a41 	vmov.f32	s0, s2
24017718:	ed8d 1a01 	vstr	s2, [sp, #4]
2401771c:	f7f9 fd5a 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
24017720:	ed9d 1a01 	vldr	s2, [sp, #4]
24017724:	eddd 0a00 	vldr	s1, [sp]
24017728:	f106 0040 	add.w	r0, r6, #64	; 0x40
2401772c:	eeb0 0a41 	vmov.f32	s0, s2
24017730:	ed8d 1a00 	vstr	s2, [sp]
24017734:	edcd 0a01 	vstr	s1, [sp, #4]
24017738:	f7f9 fd4c 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
2401773c:	ed9d 1a00 	vldr	s2, [sp]
24017740:	f106 0044 	add.w	r0, r6, #68	; 0x44
24017744:	eddd 0a01 	vldr	s1, [sp, #4]
24017748:	eeb0 0a41 	vmov.f32	s0, s2
2401774c:	f7f9 fd42 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24017750:	ed9d 1a00 	vldr	s2, [sp]
24017754:	eddd 0a01 	vldr	s1, [sp, #4]
24017758:	f106 0048 	add.w	r0, r6, #72	; 0x48
2401775c:	eeb0 0a41 	vmov.f32	s0, s2
24017760:	f7f9 fd38 	bl	240111d4 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
24017764:	4629      	mov	r1, r5
24017766:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401776a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
2401776e:	f7f9 fea3 	bl	240114b8 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
24017772:	4629      	mov	r1, r5
24017774:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24017778:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
2401777c:	f7f9 fe9c 	bl	240114b8 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24017780:	eeb0 1a4c 	vmov.f32	s2, s24
24017784:	eef0 0a6b 	vmov.f32	s1, s23
24017788:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401778c:	eeb0 0a6a 	vmov.f32	s0, s21
24017790:	462a      	mov	r2, r5
24017792:	4639      	mov	r1, r7
    p->decay=decay;
24017794:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
24017798:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401779c:	f7f9 f89c 	bl	240108d8 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
240177a0:	eeb0 1a4c 	vmov.f32	s2, s24
240177a4:	eef0 0a6b 	vmov.f32	s1, s23
240177a8:	462a      	mov	r2, r5
240177aa:	eeb0 0a6a 	vmov.f32	s0, s21
240177ae:	4639      	mov	r1, r7
240177b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
240177b4:	f7f9 f890 	bl	240108d8 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
240177b8:	6227      	str	r7, [r4, #32]
}
240177ba:	b003      	add	sp, #12
240177bc:	ecbd 8b0c 	vpop	{d8-d13}
240177c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240177c4:	00000000 	.word	0x00000000
240177c8:	3dcccccd 	.word	0x3dcccccd
240177cc:	461c4000 	.word	0x461c4000
240177d0:	3c23d70a 	.word	0x3c23d70a

240177d4 <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
240177d4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
240177d8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2401780c <tLivingString2_setFreq+0x38>
240177dc:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240177de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240177e2:	fe80 0a66 	vminnm.f32	s0, s0, s13
240177e6:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
240177ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240177ee:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240177f2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240177f6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
240177fa:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240177fe:	ee30 0a47 	vsub.f32	s0, s0, s14
24017802:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24017806:	f7f9 bc19 	b.w	2401103c <tExpSmooth_setDest>
2401780a:	bf00      	nop
2401780c:	461c4000 	.word	0x461c4000

24017810 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
24017810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24017814:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
24017816:	eddf 7a06 	vldr	s15, [pc, #24]	; 24017830 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401781a:	f103 0060 	add.w	r0, r3, #96	; 0x60
2401781e:	fe80 0a47 	vminnm.f32	s0, s0, s14
24017822:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
24017826:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401782a:	f7f9 bc07 	b.w	2401103c <tExpSmooth_setDest>
2401782e:	bf00      	nop
24017830:	00000000 	.word	0x00000000

24017834 <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
24017834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24017838:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
2401783a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24017854 <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401783e:	f103 0064 	add.w	r0, r3, #100	; 0x64
24017842:	fe80 0a47 	vminnm.f32	s0, s0, s14
24017846:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
2401784a:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401784e:	f7f9 bbf5 	b.w	2401103c <tExpSmooth_setDest>
24017852:	bf00      	nop
24017854:	00000000 	.word	0x00000000

24017858 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
24017858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401785c:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
2401785e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24017878 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24017862:	f103 0068 	add.w	r0, r3, #104	; 0x68
24017866:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401786a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
2401786e:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24017872:	f7f9 bbe3 	b.w	2401103c <tExpSmooth_setDest>
24017876:	bf00      	nop
24017878:	00000000 	.word	0x00000000

2401787c <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
2401787c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
24017880:	eddf 7a04 	vldr	s15, [pc, #16]	; 24017894 <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
24017884:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
24017886:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
2401788a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
2401788e:	ed83 0a06 	vstr	s0, [r3, #24]
}
24017892:	4770      	bx	lr
24017894:	00000000 	.word	0x00000000

24017898 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
24017898:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401789c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
240178a0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
240178a4:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
240178a8:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
240178ac:	ee37 7b40 	vsub.f64	d7, d7, d0
{
240178b0:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
240178b2:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
240178b6:	6804      	ldr	r4, [r0, #0]
{
240178b8:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240178ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
240178be:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
240178c2:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240178c6:	edcd 0a00 	vstr	s1, [sp]
240178ca:	eeb0 0a41 	vmov.f32	s0, s2
240178ce:	ed8d 1a01 	vstr	s2, [sp, #4]
240178d2:	f7f9 fc7f 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
240178d6:	ed9d 1a01 	vldr	s2, [sp, #4]
240178da:	eddd 0a00 	vldr	s1, [sp]
240178de:	f104 0040 	add.w	r0, r4, #64	; 0x40
240178e2:	eeb0 0a41 	vmov.f32	s0, s2
240178e6:	ed8d 1a00 	vstr	s2, [sp]
240178ea:	edcd 0a01 	vstr	s1, [sp, #4]
240178ee:	f7f9 fc71 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
240178f2:	ed9d 1a00 	vldr	s2, [sp]
240178f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
240178fa:	eddd 0a01 	vldr	s1, [sp, #4]
240178fe:	eeb0 0a41 	vmov.f32	s0, s2
24017902:	f7f9 fc67 	bl	240111d4 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24017906:	ed9d 1a00 	vldr	s2, [sp]
2401790a:	eddd 0a01 	vldr	s1, [sp, #4]
2401790e:	f104 0048 	add.w	r0, r4, #72	; 0x48
24017912:	eeb0 0a41 	vmov.f32	s0, s2
}
24017916:	b002      	add	sp, #8
24017918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401791c:	f7f9 bc5a 	b.w	240111d4 <tTwoZero_setCoefficients>

24017920 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
24017920:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24017922:	6804      	ldr	r4, [r0, #0]
{
24017924:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
24017928:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2401792c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24017948 <tLivingString2_setDecay+0x28>
24017930:	ed94 7a01 	vldr	s14, [r4, #4]
24017934:	ee67 7a87 	vmul.f32	s15, s15, s14
24017938:	eec0 0aa7 	vdiv.f32	s1, s1, s15
2401793c:	f000 ffb0 	bl	240188a0 <powf>
24017940:	ed84 0a07 	vstr	s0, [r4, #28]
}
24017944:	bd10      	pop	{r4, pc}
24017946:	bf00      	nop
24017948:	3a83126f 	.word	0x3a83126f

2401794c <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
2401794c:	b510      	push	{r4, lr}
2401794e:	ed2d 8b02 	vpush	{d8}
24017952:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24017956:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
24017958:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401795c:	f7f9 f814 	bl	24010988 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24017960:	eeb0 0a48 	vmov.f32	s0, s16
24017964:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24017968:	ecbd 8b02 	vpop	{d8}
2401796c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24017970:	f7f9 b80a 	b.w	24010988 <tFeedbackLeveler_setTargetLevel>

24017974 <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
24017974:	b510      	push	{r4, lr}
24017976:	ed2d 8b02 	vpush	{d8}
2401797a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401797e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
24017980:	f104 0054 	add.w	r0, r4, #84	; 0x54
24017984:	f7f8 ffd4 	bl	24010930 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24017988:	eeb0 0a48 	vmov.f32	s0, s16
2401798c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24017990:	ecbd 8b02 	vpop	{d8}
24017994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24017998:	f7f8 bfca 	b.w	24010930 <tFeedbackLeveler_setFactor>

2401799c <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
2401799c:	b510      	push	{r4, lr}
2401799e:	ed2d 8b02 	vpush	{d8}
240179a2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
240179a6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
240179a8:	f104 0054 	add.w	r0, r4, #84	; 0x54
240179ac:	f7f8 ffbc 	bl	24010928 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240179b0:	eeb0 0a48 	vmov.f32	s0, s16
240179b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
240179b8:	ecbd 8b02 	vpop	{d8}
240179bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240179c0:	f7f8 bfb2 	b.w	24010928 <tFeedbackLeveler_setStrength>

240179c4 <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
240179c4:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
240179c6:	6805      	ldr	r5, [r0, #0]
{
240179c8:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
240179ca:	f105 0054 	add.w	r0, r5, #84	; 0x54
240179ce:	f7f8 ffb3 	bl	24010938 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
240179d2:	4621      	mov	r1, r4
240179d4:	f105 0058 	add.w	r0, r5, #88	; 0x58
240179d8:	f7f8 ffae 	bl	24010938 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
240179dc:	622c      	str	r4, [r5, #32]
}
240179de:	bd38      	pop	{r3, r4, r5, pc}

240179e0 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
240179e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
240179e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240179e8:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
240179ec:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
240179ee:	ee60 aa27 	vmul.f32	s21, s0, s15
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
240179f2:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
240179f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
240179fa:	f7f9 fb23 	bl	24011044 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
240179fe:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
24017a02:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
24017a06:	f7f9 fb1d 	bl	24011044 <tExpSmooth_tick>
24017a0a:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
24017a0e:	f104 0064 	add.w	r0, r4, #100	; 0x64
24017a12:	f7f9 fb17 	bl	24011044 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
24017a16:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
24017a1a:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
24017a1e:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float lowLen=prepP*wLen;
24017a22:	ee28 9a80 	vmul.f32	s18, s17, s0
    float upLen=(1.0f-prepP)*wLen;
24017a26:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
24017a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017a2e:	f340 8170 	ble.w	24017d12 <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
24017a32:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017a36:	f104 0930 	add.w	r9, r4, #48	; 0x30
24017a3a:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24017a3e:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017a42:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017a44:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
24017a48:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24017a4c:	f104 0638 	add.w	r6, r4, #56	; 0x38
24017a50:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24017a54:	eebc bae6 	vcvt.u32.f32	s22, s13
        float pickPFloat = fullPickPoint - pickPInt;
24017a58:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017a5c:	ee1b 1a10 	vmov	r1, s22
24017a60:	ee77 ba2b 	vadd.f32	s23, s14, s23
        float pickPFloat = fullPickPoint - pickPInt;
24017a64:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24017a68:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017a6c:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
24017a70:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017a74:	eeb0 0a6b 	vmov.f32	s0, s23
24017a78:	f7f8 fd38 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
24017a7c:	ee1b 1a10 	vmov	r1, s22
24017a80:	4648      	mov	r0, r9
24017a82:	eeb0 0a6a 	vmov.f32	s0, s21
24017a86:	3101      	adds	r1, #1
24017a88:	f7f8 fd30 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24017a8c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
24017a90:	4640      	mov	r0, r8
24017a92:	eeb0 0a6b 	vmov.f32	s0, s23
24017a96:	ee17 1a90 	vmov	r1, s15
24017a9a:	f7f8 fd27 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
24017a9e:	ee38 7a6c 	vsub.f32	s14, s16, s25
24017aa2:	eeb0 0a6a 	vmov.f32	s0, s21
24017aa6:	4640      	mov	r0, r8
24017aa8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24017aac:	ee17 1a90 	vmov	r1, s15
24017ab0:	f7f8 fd1c 	bl	240104ec <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
24017ab4:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017ab6:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
24017aba:	f7f8 fcb1 	bl	24010420 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
24017abe:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
24017ac0:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
24017ac4:	f7f8 fcac 	bl	24010420 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
24017ac8:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
24017aca:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
24017ace:	f7f8 fca7 	bl	24010420 <tHermiteDelay_tickOut>
24017ad2:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
24017ad6:	4630      	mov	r0, r6
24017ad8:	f7f8 fca2 	bl	24010420 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24017adc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
24017ae0:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24017ae4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017ae8:	f01b fd2e 	bl	24033548 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24017aec:	eef0 0a4b 	vmov.f32	s1, s22
24017af0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24017af4:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24017af8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017afc:	f01b fd24 	bl	24033548 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24017b00:	eef0 0a48 	vmov.f32	s1, s16
24017b04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24017b08:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24017b0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017b10:	f01b fd1a 	bl	24033548 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24017b14:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24017b18:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24017b1c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017b20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017b24:	f01b fd10 	bl	24033548 <__LEAF_clip_veneer>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017b28:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24017b2a:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017b2e:	2b00      	cmp	r3, #0
24017b30:	f040 80ec 	bne.w	24017d0c <tLivingString2_tick+0x32c>
24017b34:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24017b38:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017b3c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24017b40:	eeb0 0a48 	vmov.f32	s0, s16
24017b44:	f7f9 fb2a 	bl	2401119c <tTwoZero_tick>
24017b48:	f104 0050 	add.w	r0, r4, #80	; 0x50
24017b4c:	f7f9 fce0 	bl	24011510 <tHighpass_tick>
24017b50:	4628      	mov	r0, r5
24017b52:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24017b56:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017b5a:	f7f8 fef1 	bl	24010940 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24017b5e:	eeb0 1a6a 	vmov.f32	s2, s21
24017b62:	eef1 0a40 	vneg.f32	s1, s0
24017b66:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017b6a:	f01b fced 	bl	24033548 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24017b6e:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24017b70:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24017b74:	f7f8 fc46 	bl	24010404 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
24017b78:	f104 0048 	add.w	r0, r4, #72	; 0x48
24017b7c:	eeb0 0a4b 	vmov.f32	s0, s22
24017b80:	f7f9 fb0c 	bl	2401119c <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
24017b84:	eeb0 1a6a 	vmov.f32	s2, s21
24017b88:	eef1 0a40 	vneg.f32	s1, s0
24017b8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017b90:	f01b fcda 	bl	24033548 <__LEAF_clip_veneer>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24017b94:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
24017b98:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24017b9c:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
24017ba0:	eeb0 1a6a 	vmov.f32	s2, s21
24017ba4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24017ba8:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
24017bac:	eee7 0a87 	vfma.f32	s1, s15, s14
24017bb0:	f01b fcca 	bl	24033548 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
24017bb4:	4630      	mov	r0, r6
24017bb6:	f7f8 fc25 	bl	24010404 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24017bba:	6a23      	ldr	r3, [r4, #32]
24017bbc:	b90b      	cbnz	r3, 24017bc2 <tLivingString2_tick+0x1e2>
24017bbe:	edd4 aa07 	vldr	s21, [r4, #28]
24017bc2:	eeb0 0a4c 	vmov.f32	s0, s24
24017bc6:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24017bca:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24017bce:	f7f9 fae5 	bl	2401119c <tTwoZero_tick>
24017bd2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24017bd6:	f7f9 fc9b 	bl	24011510 <tHighpass_tick>
24017bda:	4628      	mov	r0, r5
24017bdc:	ee20 0a2a 	vmul.f32	s0, s0, s21
24017be0:	f7f8 feae 	bl	24010940 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
24017be4:	eeb0 1a4c 	vmov.f32	s2, s24
24017be8:	eef1 0a40 	vneg.f32	s1, s0
24017bec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017bf0:	f01b fcaa 	bl	24033548 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
24017bf4:	4638      	mov	r0, r7
24017bf6:	f7f8 fc05 	bl	24010404 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
24017bfa:	f104 0044 	add.w	r0, r4, #68	; 0x44
24017bfe:	eeb0 0a6b 	vmov.f32	s0, s23
24017c02:	f7f9 facb 	bl	2401119c <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
24017c06:	eeb0 1a4c 	vmov.f32	s2, s24
24017c0a:	eef1 0a40 	vneg.f32	s1, s0
24017c0e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017c12:	f01b fc99 	bl	24033548 <__LEAF_clip_veneer>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24017c16:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
24017c1a:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24017c1e:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24017c22:	eeb0 1a4c 	vmov.f32	s2, s24
24017c26:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24017c2a:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24017c2e:	eee7 0a87 	vfma.f32	s1, s15, s14
24017c32:	f01b fc89 	bl	24033548 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
24017c36:	4648      	mov	r0, r9
24017c38:	f7f8 fbe4 	bl	24010404 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
24017c3c:	eeb0 0a49 	vmov.f32	s0, s18
24017c40:	4638      	mov	r0, r7
24017c42:	f7f8 fc17 	bl	24010474 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
24017c46:	eeb0 0a49 	vmov.f32	s0, s18
24017c4a:	4630      	mov	r0, r6
24017c4c:	f7f8 fc12 	bl	24010474 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
24017c50:	eeb0 0a69 	vmov.f32	s0, s19
24017c54:	4648      	mov	r0, r9
24017c56:	f7f8 fc0d 	bl	24010474 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
24017c5a:	eeb0 0a69 	vmov.f32	s0, s19
24017c5e:	4640      	mov	r0, r8
24017c60:	f7f8 fc08 	bl	24010474 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
24017c64:	f104 0068 	add.w	r0, r4, #104	; 0x68
24017c68:	f7f9 f9ec 	bl	24011044 <tExpSmooth_tick>
    if (pupos < 0.9999f)
24017c6c:	eddf 7a66 	vldr	s15, [pc, #408]	; 24017e08 <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
24017c70:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
24017c74:	eeb4 0ae7 	vcmpe.f32	s0, s15
24017c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c7c:	d53e      	bpl.n	24017cfc <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
24017c7e:	eeb4 aac0 	vcmpe.f32	s20, s0
24017c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c86:	f140 8082 	bpl.w	24017d8e <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
24017c8a:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
24017c8e:	4648      	mov	r0, r9
24017c90:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
24017c94:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24017c98:	eea8 9aea 	vfms.f32	s18, s17, s21
24017c9c:	eebc aac8 	vcvt.u32.f32	s20, s16
            float PUPFloat = fullPUPoint - PUPInt;
24017ca0:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
24017ca4:	ee1a 1a10 	vmov	r1, s20
24017ca8:	f7f8 fc14 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
24017cac:	ee1a 1a10 	vmov	r1, s20
24017cb0:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
24017cb2:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
24017cb6:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
24017cba:	3101      	adds	r1, #1
24017cbc:	f7f8 fc0a 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
24017cc0:	4640      	mov	r0, r8
            float PUPFloat = fullPUPoint - PUPInt;
24017cc2:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
24017cc6:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
24017cca:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
24017cce:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
24017cd2:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
24017cd6:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
24017cda:	f7f8 fbfb 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
24017cde:	eefc 7ae9 	vcvt.u32.f32	s15, s19
24017ce2:	4640      	mov	r0, r8
24017ce4:	ee3a aa00 	vadd.f32	s20, s20, s0
24017ce8:	ee17 1a90 	vmov	r1, s15
24017cec:	f7f8 fbf2 	bl	240104d4 <tHermiteDelay_tapOut>
24017cf0:	ee38 8a00 	vadd.f32	s16, s16, s0
24017cf4:	ee28 8a2b 	vmul.f32	s16, s16, s23
24017cf8:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
24017cfc:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24017d00:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24017d04:	ecbd 8b0a 	vpop	{d8-d12}
24017d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24017d0c:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
24017d10:	e712      	b.n	24017b38 <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
24017d12:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d16:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24017d1a:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
24017d1e:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d22:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
24017d24:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24017d28:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d2c:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
24017d30:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d34:	ee1c 1a10 	vmov	r1, s24
24017d38:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
24017d3c:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24017d40:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d44:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
24017d48:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
24017d4c:	eeb0 0a6b 	vmov.f32	s0, s23
24017d50:	f7f8 fbcc 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
24017d54:	ee1c 1a10 	vmov	r1, s24
24017d58:	4638      	mov	r0, r7
24017d5a:	eeb0 0a48 	vmov.f32	s0, s16
24017d5e:	3101      	adds	r1, #1
24017d60:	f7f8 fbc4 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
24017d64:	eefc 7acb 	vcvt.u32.f32	s15, s22
24017d68:	4630      	mov	r0, r6
24017d6a:	eeb0 0a6b 	vmov.f32	s0, s23
24017d6e:	ee17 1a90 	vmov	r1, s15
24017d72:	f7f8 fbbb 	bl	240104ec <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
24017d76:	ee7b 7a6c 	vsub.f32	s15, s22, s25
24017d7a:	eeb0 0a48 	vmov.f32	s0, s16
24017d7e:	4630      	mov	r0, r6
24017d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017d84:	ee17 1a90 	vmov	r1, s15
24017d88:	f7f8 fbb0 	bl	240104ec <tHermiteDelay_addTo>
24017d8c:	e692      	b.n	24017ab4 <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
24017d8e:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
24017d92:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24017d94:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
24017d98:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
24017d9c:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
24017da0:	ee19 1a90 	vmov	r1, s19
24017da4:	f7f8 fb96 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
24017da8:	ee19 1a90 	vmov	r1, s19
24017dac:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
24017dae:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
24017db2:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
24017db6:	3101      	adds	r1, #1
24017db8:	f7f8 fb8c 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
24017dbc:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
24017dbe:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
24017dc2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
24017dc6:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
24017dca:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
24017dce:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
24017dd2:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
24017dd6:	f7f8 fb7d 	bl	240104d4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
24017dda:	eefc 7ac9 	vcvt.u32.f32	s15, s18
24017dde:	4630      	mov	r0, r6
24017de0:	ee79 9a80 	vadd.f32	s19, s19, s0
24017de4:	ee17 1a90 	vmov	r1, s15
24017de8:	f7f8 fb74 	bl	240104d4 <tHermiteDelay_tapOut>
24017dec:	ee38 8a00 	vadd.f32	s16, s16, s0
24017df0:	ee28 8a28 	vmul.f32	s16, s16, s17
24017df4:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
24017df8:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24017dfc:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24017e00:	ecbd 8b0a 	vpop	{d8-d12}
24017e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24017e08:	3f7ff972 	.word	0x3f7ff972

24017e0c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24017e0c:	4770      	bx	lr
24017e0e:	bf00      	nop

24017e10 <LEAF_init>:
{
24017e10:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
24017e12:	6200      	str	r0, [r0, #32]
{
24017e14:	4604      	mov	r4, r0
24017e16:	461d      	mov	r5, r3
24017e18:	ed2d 8b02 	vpush	{d8}
24017e1c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24017e20:	f7fb f8a6 	bl	24012f70 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24017e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24017e28:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24017e5c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24017e2c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24017e2e:	4b0c      	ldr	r3, [pc, #48]	; (24017e60 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24017e30:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24017e34:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
24017e38:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24017e3a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24017e3c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24017e40:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
24017e44:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24017e48:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24017e4c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24017e50:	edc4 7a03 	vstr	s15, [r4, #12]
}
24017e54:	ecbd 8b02 	vpop	{d8}
24017e58:	bd38      	pop	{r3, r4, r5, pc}
24017e5a:	bf00      	nop
24017e5c:	40c90fdb 	.word	0x40c90fdb
24017e60:	24017e0d 	.word	0x24017e0d

24017e64 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24017e64:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
24017e66:	eb00 0281 	add.w	r2, r0, r1, lsl #2
24017e6a:	2401      	movs	r4, #1
24017e6c:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
24017e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24017e72:	6b83      	ldr	r3, [r0, #56]	; 0x38
24017e74:	4718      	bx	r3
24017e76:	bf00      	nop

24017e78 <arm_sin_f32>:
24017e78:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24017ef8 <arm_sin_f32+0x80>
24017e7c:	ee20 0a27 	vmul.f32	s0, s0, s15
24017e80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017e84:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24017e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017e8c:	d504      	bpl.n	24017e98 <arm_sin_f32+0x20>
24017e8e:	ee17 3a90 	vmov	r3, s15
24017e92:	3b01      	subs	r3, #1
24017e94:	ee07 3a90 	vmov	s15, r3
24017e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017e9c:	eddf 6a17 	vldr	s13, [pc, #92]	; 24017efc <arm_sin_f32+0x84>
24017ea0:	ee70 7a67 	vsub.f32	s15, s0, s15
24017ea4:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017ea8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24017eac:	ee17 3a10 	vmov	r3, s14
24017eb0:	b29b      	uxth	r3, r3
24017eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24017eb6:	d21a      	bcs.n	24017eee <arm_sin_f32+0x76>
24017eb8:	ee07 3a10 	vmov	s14, r3
24017ebc:	1c59      	adds	r1, r3, #1
24017ebe:	eeb8 0a47 	vcvt.f32.u32	s0, s14
24017ec2:	ee77 7ac0 	vsub.f32	s15, s15, s0
24017ec6:	4a0e      	ldr	r2, [pc, #56]	; (24017f00 <arm_sin_f32+0x88>)
24017ec8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24017ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24017ed0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24017ed4:	ee30 0a67 	vsub.f32	s0, s0, s15
24017ed8:	edd3 6a00 	vldr	s13, [r3]
24017edc:	ed92 7a00 	vldr	s14, [r2]
24017ee0:	ee20 0a26 	vmul.f32	s0, s0, s13
24017ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
24017ee8:	ee30 0a27 	vadd.f32	s0, s0, s15
24017eec:	4770      	bx	lr
24017eee:	ee77 7ae6 	vsub.f32	s15, s15, s13
24017ef2:	2101      	movs	r1, #1
24017ef4:	2300      	movs	r3, #0
24017ef6:	e7e6      	b.n	24017ec6 <arm_sin_f32+0x4e>
24017ef8:	3e22f983 	.word	0x3e22f983
24017efc:	44000000 	.word	0x44000000
24017f00:	240318c8 	.word	0x240318c8

24017f04 <__errno>:
24017f04:	4b01      	ldr	r3, [pc, #4]	; (24017f0c <__errno+0x8>)
24017f06:	6818      	ldr	r0, [r3, #0]
24017f08:	4770      	bx	lr
24017f0a:	bf00      	nop
24017f0c:	200007e4 	.word	0x200007e4

24017f10 <__libc_init_array>:
24017f10:	b570      	push	{r4, r5, r6, lr}
24017f12:	4d0d      	ldr	r5, [pc, #52]	; (24017f48 <__libc_init_array+0x38>)
24017f14:	4c0d      	ldr	r4, [pc, #52]	; (24017f4c <__libc_init_array+0x3c>)
24017f16:	1b64      	subs	r4, r4, r5
24017f18:	10a4      	asrs	r4, r4, #2
24017f1a:	2600      	movs	r6, #0
24017f1c:	42a6      	cmp	r6, r4
24017f1e:	d109      	bne.n	24017f34 <__libc_init_array+0x24>
24017f20:	4d0b      	ldr	r5, [pc, #44]	; (24017f50 <__libc_init_array+0x40>)
24017f22:	4c0c      	ldr	r4, [pc, #48]	; (24017f54 <__libc_init_array+0x44>)
24017f24:	f01b faf0 	bl	24033508 <_init>
24017f28:	1b64      	subs	r4, r4, r5
24017f2a:	10a4      	asrs	r4, r4, #2
24017f2c:	2600      	movs	r6, #0
24017f2e:	42a6      	cmp	r6, r4
24017f30:	d105      	bne.n	24017f3e <__libc_init_array+0x2e>
24017f32:	bd70      	pop	{r4, r5, r6, pc}
24017f34:	f855 3b04 	ldr.w	r3, [r5], #4
24017f38:	4798      	blx	r3
24017f3a:	3601      	adds	r6, #1
24017f3c:	e7ee      	b.n	24017f1c <__libc_init_array+0xc>
24017f3e:	f855 3b04 	ldr.w	r3, [r5], #4
24017f42:	4798      	blx	r3
24017f44:	3601      	adds	r6, #1
24017f46:	e7f2      	b.n	24017f2e <__libc_init_array+0x1e>
24017f48:	240335a8 	.word	0x240335a8
24017f4c:	240335a8 	.word	0x240335a8
24017f50:	240335a8 	.word	0x240335a8
24017f54:	240335ac 	.word	0x240335ac

24017f58 <__itoa>:
24017f58:	1e93      	subs	r3, r2, #2
24017f5a:	2b22      	cmp	r3, #34	; 0x22
24017f5c:	b510      	push	{r4, lr}
24017f5e:	460c      	mov	r4, r1
24017f60:	d904      	bls.n	24017f6c <__itoa+0x14>
24017f62:	2300      	movs	r3, #0
24017f64:	700b      	strb	r3, [r1, #0]
24017f66:	461c      	mov	r4, r3
24017f68:	4620      	mov	r0, r4
24017f6a:	bd10      	pop	{r4, pc}
24017f6c:	2a0a      	cmp	r2, #10
24017f6e:	d109      	bne.n	24017f84 <__itoa+0x2c>
24017f70:	2800      	cmp	r0, #0
24017f72:	da07      	bge.n	24017f84 <__itoa+0x2c>
24017f74:	232d      	movs	r3, #45	; 0x2d
24017f76:	700b      	strb	r3, [r1, #0]
24017f78:	4240      	negs	r0, r0
24017f7a:	2101      	movs	r1, #1
24017f7c:	4421      	add	r1, r4
24017f7e:	f000 f841 	bl	24018004 <__utoa>
24017f82:	e7f1      	b.n	24017f68 <__itoa+0x10>
24017f84:	2100      	movs	r1, #0
24017f86:	e7f9      	b.n	24017f7c <__itoa+0x24>

24017f88 <itoa>:
24017f88:	f7ff bfe6 	b.w	24017f58 <__itoa>

24017f8c <memcpy>:
24017f8c:	440a      	add	r2, r1
24017f8e:	4291      	cmp	r1, r2
24017f90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24017f94:	d100      	bne.n	24017f98 <memcpy+0xc>
24017f96:	4770      	bx	lr
24017f98:	b510      	push	{r4, lr}
24017f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
24017f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
24017fa2:	4291      	cmp	r1, r2
24017fa4:	d1f9      	bne.n	24017f9a <memcpy+0xe>
24017fa6:	bd10      	pop	{r4, pc}

24017fa8 <memset>:
24017fa8:	4402      	add	r2, r0
24017faa:	4603      	mov	r3, r0
24017fac:	4293      	cmp	r3, r2
24017fae:	d100      	bne.n	24017fb2 <memset+0xa>
24017fb0:	4770      	bx	lr
24017fb2:	f803 1b01 	strb.w	r1, [r3], #1
24017fb6:	e7f9      	b.n	24017fac <memset+0x4>

24017fb8 <frexpf>:
24017fb8:	ee10 3a10 	vmov	r3, s0
24017fbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24017fc0:	2100      	movs	r1, #0
24017fc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24017fc6:	6001      	str	r1, [r0, #0]
24017fc8:	da19      	bge.n	24017ffe <frexpf+0x46>
24017fca:	b1c2      	cbz	r2, 24017ffe <frexpf+0x46>
24017fcc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24017fd0:	d10a      	bne.n	24017fe8 <frexpf+0x30>
24017fd2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24018000 <frexpf+0x48>
24017fd6:	ee60 7a27 	vmul.f32	s15, s0, s15
24017fda:	f06f 0118 	mvn.w	r1, #24
24017fde:	ee17 3a90 	vmov	r3, s15
24017fe2:	6001      	str	r1, [r0, #0]
24017fe4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24017fe8:	6801      	ldr	r1, [r0, #0]
24017fea:	15d2      	asrs	r2, r2, #23
24017fec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017ff0:	3a7e      	subs	r2, #126	; 0x7e
24017ff2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
24017ff6:	440a      	add	r2, r1
24017ff8:	ee00 3a10 	vmov	s0, r3
24017ffc:	6002      	str	r2, [r0, #0]
24017ffe:	4770      	bx	lr
24018000:	4c000000 	.word	0x4c000000

24018004 <__utoa>:
24018004:	b5f0      	push	{r4, r5, r6, r7, lr}
24018006:	4c1f      	ldr	r4, [pc, #124]	; (24018084 <__utoa+0x80>)
24018008:	b08b      	sub	sp, #44	; 0x2c
2401800a:	4605      	mov	r5, r0
2401800c:	460b      	mov	r3, r1
2401800e:	466e      	mov	r6, sp
24018010:	f104 0c20 	add.w	ip, r4, #32
24018014:	6820      	ldr	r0, [r4, #0]
24018016:	6861      	ldr	r1, [r4, #4]
24018018:	4637      	mov	r7, r6
2401801a:	c703      	stmia	r7!, {r0, r1}
2401801c:	3408      	adds	r4, #8
2401801e:	4564      	cmp	r4, ip
24018020:	463e      	mov	r6, r7
24018022:	d1f7      	bne.n	24018014 <__utoa+0x10>
24018024:	7921      	ldrb	r1, [r4, #4]
24018026:	7139      	strb	r1, [r7, #4]
24018028:	1e91      	subs	r1, r2, #2
2401802a:	6820      	ldr	r0, [r4, #0]
2401802c:	6038      	str	r0, [r7, #0]
2401802e:	2922      	cmp	r1, #34	; 0x22
24018030:	f04f 0100 	mov.w	r1, #0
24018034:	d904      	bls.n	24018040 <__utoa+0x3c>
24018036:	7019      	strb	r1, [r3, #0]
24018038:	460b      	mov	r3, r1
2401803a:	4618      	mov	r0, r3
2401803c:	b00b      	add	sp, #44	; 0x2c
2401803e:	bdf0      	pop	{r4, r5, r6, r7, pc}
24018040:	1e58      	subs	r0, r3, #1
24018042:	4684      	mov	ip, r0
24018044:	fbb5 f7f2 	udiv	r7, r5, r2
24018048:	fb02 5617 	mls	r6, r2, r7, r5
2401804c:	3628      	adds	r6, #40	; 0x28
2401804e:	446e      	add	r6, sp
24018050:	460c      	mov	r4, r1
24018052:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24018056:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401805a:	462e      	mov	r6, r5
2401805c:	42b2      	cmp	r2, r6
2401805e:	f101 0101 	add.w	r1, r1, #1
24018062:	463d      	mov	r5, r7
24018064:	d9ee      	bls.n	24018044 <__utoa+0x40>
24018066:	2200      	movs	r2, #0
24018068:	545a      	strb	r2, [r3, r1]
2401806a:	1919      	adds	r1, r3, r4
2401806c:	1aa5      	subs	r5, r4, r2
2401806e:	42aa      	cmp	r2, r5
24018070:	dae3      	bge.n	2401803a <__utoa+0x36>
24018072:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24018076:	780e      	ldrb	r6, [r1, #0]
24018078:	7006      	strb	r6, [r0, #0]
2401807a:	3201      	adds	r2, #1
2401807c:	f801 5901 	strb.w	r5, [r1], #-1
24018080:	e7f4      	b.n	2401806c <__utoa+0x68>
24018082:	bf00      	nop
24018084:	240320cc 	.word	0x240320cc

24018088 <sinf_poly>:
24018088:	07cb      	lsls	r3, r1, #31
2401808a:	d412      	bmi.n	240180b2 <sinf_poly+0x2a>
2401808c:	ee21 5b00 	vmul.f64	d5, d1, d0
24018090:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
24018094:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
24018098:	eea6 7b01 	vfma.f64	d7, d6, d1
2401809c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
240180a0:	ee21 1b05 	vmul.f64	d1, d1, d5
240180a4:	eea6 0b05 	vfma.f64	d0, d6, d5
240180a8:	eea7 0b01 	vfma.f64	d0, d7, d1
240180ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240180b0:	4770      	bx	lr
240180b2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
240180b6:	ee21 5b01 	vmul.f64	d5, d1, d1
240180ba:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
240180be:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
240180c2:	eea1 7b06 	vfma.f64	d7, d1, d6
240180c6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
240180ca:	eea1 0b06 	vfma.f64	d0, d1, d6
240180ce:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
240180d2:	ee21 1b05 	vmul.f64	d1, d1, d5
240180d6:	eea5 0b06 	vfma.f64	d0, d5, d6
240180da:	e7e5      	b.n	240180a8 <sinf_poly+0x20>
240180dc:	0000      	movs	r0, r0
	...

240180e0 <cosf>:
240180e0:	b538      	push	{r3, r4, r5, lr}
240180e2:	ee10 4a10 	vmov	r4, s0
240180e6:	f3c4 530a 	ubfx	r3, r4, #20, #11
240180ea:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
240180ee:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
240180f2:	d21f      	bcs.n	24018134 <cosf+0x54>
240180f4:	ee27 0b07 	vmul.f64	d0, d7, d7
240180f8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
240180fc:	f0c0 8088 	bcc.w	24018210 <cosf+0x130>
24018100:	ee20 4b00 	vmul.f64	d4, d0, d0
24018104:	4b46      	ldr	r3, [pc, #280]	; (24018220 <cosf+0x140>)
24018106:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
2401810a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
2401810e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
24018112:	eea0 6b05 	vfma.f64	d6, d0, d5
24018116:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
2401811a:	eea0 7b05 	vfma.f64	d7, d0, d5
2401811e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
24018122:	ee20 0b04 	vmul.f64	d0, d0, d4
24018126:	eea4 7b05 	vfma.f64	d7, d4, d5
2401812a:	eea6 7b00 	vfma.f64	d7, d6, d0
2401812e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
24018132:	bd38      	pop	{r3, r4, r5, pc}
24018134:	f240 422e 	movw	r2, #1070	; 0x42e
24018138:	4293      	cmp	r3, r2
2401813a:	d82b      	bhi.n	24018194 <cosf+0xb4>
2401813c:	4b38      	ldr	r3, [pc, #224]	; (24018220 <cosf+0x140>)
2401813e:	ed93 6b08 	vldr	d6, [r3, #32]
24018142:	ee27 6b06 	vmul.f64	d6, d7, d6
24018146:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401814a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401814e:	ee16 1a90 	vmov	r1, s13
24018152:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
24018156:	1609      	asrs	r1, r1, #24
24018158:	ee06 1a90 	vmov	s13, r1
2401815c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24018160:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
24018164:	f001 0203 	and.w	r2, r1, #3
24018168:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
2401816c:	eea5 7b46 	vfms.f64	d7, d5, d6
24018170:	eeb0 0b47 	vmov.f64	d0, d7
24018174:	ed92 7b00 	vldr	d7, [r2]
24018178:	ee20 1b00 	vmul.f64	d1, d0, d0
2401817c:	f011 0f02 	tst.w	r1, #2
24018180:	bf08      	it	eq
24018182:	4618      	moveq	r0, r3
24018184:	f081 0101 	eor.w	r1, r1, #1
24018188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401818c:	ee20 0b07 	vmul.f64	d0, d0, d7
24018190:	f7ff bf7a 	b.w	24018088 <sinf_poly>
24018194:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24018198:	d236      	bcs.n	24018208 <cosf+0x128>
2401819a:	4a22      	ldr	r2, [pc, #136]	; (24018224 <cosf+0x144>)
2401819c:	f3c4 6183 	ubfx	r1, r4, #26, #4
240181a0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
240181a4:	f3c4 0316 	ubfx	r3, r4, #0, #23
240181a8:	f3c4 50c2 	ubfx	r0, r4, #23, #3
240181ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240181b0:	4083      	lsls	r3, r0
240181b2:	6a28      	ldr	r0, [r5, #32]
240181b4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
240181b8:	fba3 1000 	umull	r1, r0, r3, r0
240181bc:	6929      	ldr	r1, [r5, #16]
240181be:	435a      	muls	r2, r3
240181c0:	fbe3 0201 	umlal	r0, r2, r3, r1
240181c4:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
240181c8:	0f8d      	lsrs	r5, r1, #30
240181ca:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
240181ce:	1a51      	subs	r1, r2, r1
240181d0:	f7e8 fa18 	bl	24000604 <__aeabi_l2d>
240181d4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
240181d8:	4b11      	ldr	r3, [pc, #68]	; (24018220 <cosf+0x140>)
240181da:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 24018218 <cosf+0x138>
240181de:	ec41 0b16 	vmov	d6, r0, r1
240181e2:	f004 0203 	and.w	r2, r4, #3
240181e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240181ea:	f014 0f02 	tst.w	r4, #2
240181ee:	f103 0070 	add.w	r0, r3, #112	; 0x70
240181f2:	ee26 7b07 	vmul.f64	d7, d6, d7
240181f6:	ed92 0b00 	vldr	d0, [r2]
240181fa:	ee27 1b07 	vmul.f64	d1, d7, d7
240181fe:	f085 0101 	eor.w	r1, r5, #1
24018202:	bf08      	it	eq
24018204:	4618      	moveq	r0, r3
24018206:	e7bf      	b.n	24018188 <cosf+0xa8>
24018208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401820c:	f000 b964 	b.w	240184d8 <__math_invalidf>
24018210:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018214:	e78d      	b.n	24018132 <cosf+0x52>
24018216:	bf00      	nop
24018218:	54442d18 	.word	0x54442d18
2401821c:	3c1921fb 	.word	0x3c1921fb
24018220:	24032e80 	.word	0x24032e80
24018224:	24032e20 	.word	0x24032e20

24018228 <exp>:
24018228:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
2401822a:	ee10 3a90 	vmov	r3, s1
2401822e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24018232:	f3c3 540a 	ubfx	r4, r3, #20, #11
24018236:	18a2      	adds	r2, r4, r2
24018238:	2a3e      	cmp	r2, #62	; 0x3e
2401823a:	ee10 1a10 	vmov	r1, s0
2401823e:	d922      	bls.n	24018286 <exp+0x5e>
24018240:	2a00      	cmp	r2, #0
24018242:	da06      	bge.n	24018252 <exp+0x2a>
24018244:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24018248:	ee30 0b07 	vadd.f64	d0, d0, d7
2401824c:	b004      	add	sp, #16
2401824e:	bcf0      	pop	{r4, r5, r6, r7}
24018250:	4770      	bx	lr
24018252:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24018256:	f04f 0000 	mov.w	r0, #0
2401825a:	d913      	bls.n	24018284 <exp+0x5c>
2401825c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24018260:	bf08      	it	eq
24018262:	4281      	cmpeq	r1, r0
24018264:	f000 80a0 	beq.w	240183a8 <exp+0x180>
24018268:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401826c:	4294      	cmp	r4, r2
2401826e:	d0e9      	beq.n	24018244 <exp+0x1c>
24018270:	4283      	cmp	r3, r0
24018272:	da03      	bge.n	2401827c <exp+0x54>
24018274:	b004      	add	sp, #16
24018276:	bcf0      	pop	{r4, r5, r6, r7}
24018278:	f000 b8c6 	b.w	24018408 <__math_uflow>
2401827c:	b004      	add	sp, #16
2401827e:	bcf0      	pop	{r4, r5, r6, r7}
24018280:	f000 b8ca 	b.w	24018418 <__math_oflow>
24018284:	4604      	mov	r4, r0
24018286:	4950      	ldr	r1, [pc, #320]	; (240183c8 <exp+0x1a0>)
24018288:	ed91 6b02 	vldr	d6, [r1, #8]
2401828c:	ed91 5b00 	vldr	d5, [r1]
24018290:	eeb0 7b46 	vmov.f64	d7, d6
24018294:	eea5 7b00 	vfma.f64	d7, d5, d0
24018298:	ee17 5a10 	vmov	r5, s14
2401829c:	ee37 7b46 	vsub.f64	d7, d7, d6
240182a0:	ed91 6b04 	vldr	d6, [r1, #16]
240182a4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
240182a8:	eea6 0b07 	vfma.f64	d0, d6, d7
240182ac:	ed91 6b06 	vldr	d6, [r1, #24]
240182b0:	18d8      	adds	r0, r3, r3
240182b2:	f100 030f 	add.w	r3, r0, #15
240182b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
240182ba:	eea6 0b07 	vfma.f64	d0, d6, d7
240182be:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
240182c2:	ee20 7b00 	vmul.f64	d7, d0, d0
240182c6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
240182ca:	ed91 5b08 	vldr	d5, [r1, #32]
240182ce:	ee30 6b06 	vadd.f64	d6, d0, d6
240182d2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
240182d6:	eea4 5b00 	vfma.f64	d5, d4, d0
240182da:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
240182de:	eea5 6b07 	vfma.f64	d6, d5, d7
240182e2:	ee27 7b07 	vmul.f64	d7, d7, d7
240182e6:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
240182ea:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
240182ee:	f8d2 c004 	ldr.w	ip, [r2, #4]
240182f2:	eea4 5b00 	vfma.f64	d5, d4, d0
240182f6:	2600      	movs	r6, #0
240182f8:	19f2      	adds	r2, r6, r7
240182fa:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
240182fe:	eea7 6b05 	vfma.f64	d6, d7, d5
24018302:	2c00      	cmp	r4, #0
24018304:	d14b      	bne.n	2401839e <exp+0x176>
24018306:	42b5      	cmp	r5, r6
24018308:	db10      	blt.n	2401832c <exp+0x104>
2401830a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
2401830e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 240183b0 <exp+0x188>
24018312:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
24018316:	4610      	mov	r0, r2
24018318:	ec41 0b10 	vmov	d0, r0, r1
2401831c:	eea6 0b00 	vfma.f64	d0, d6, d0
24018320:	ee20 0b07 	vmul.f64	d0, d0, d7
24018324:	b004      	add	sp, #16
24018326:	bcf0      	pop	{r4, r5, r6, r7}
24018328:	f000 b88a 	b.w	24018440 <__math_check_oflow>
2401832c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24018330:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24018334:	4610      	mov	r0, r2
24018336:	ec41 0b17 	vmov	d7, r0, r1
2401833a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
2401833e:	ee26 6b07 	vmul.f64	d6, d6, d7
24018342:	ee37 5b06 	vadd.f64	d5, d7, d6
24018346:	eeb4 5bc4 	vcmpe.f64	d5, d4
2401834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401834e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 240183b8 <exp+0x190>
24018352:	d51e      	bpl.n	24018392 <exp+0x16a>
24018354:	ee35 3b04 	vadd.f64	d3, d5, d4
24018358:	ee37 7b45 	vsub.f64	d7, d7, d5
2401835c:	ee37 7b06 	vadd.f64	d7, d7, d6
24018360:	ee34 6b43 	vsub.f64	d6, d4, d3
24018364:	ee36 5b05 	vadd.f64	d5, d6, d5
24018368:	ee35 5b07 	vadd.f64	d5, d5, d7
2401836c:	ee35 5b03 	vadd.f64	d5, d5, d3
24018370:	ee35 5b44 	vsub.f64	d5, d5, d4
24018374:	eeb5 5b40 	vcmp.f64	d5, #0.0
24018378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401837c:	d101      	bne.n	24018382 <exp+0x15a>
2401837e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 240183c0 <exp+0x198>
24018382:	ed8d 0b00 	vstr	d0, [sp]
24018386:	ed9d 7b00 	vldr	d7, [sp]
2401838a:	ee27 7b00 	vmul.f64	d7, d7, d0
2401838e:	ed8d 7b02 	vstr	d7, [sp, #8]
24018392:	ee25 0b00 	vmul.f64	d0, d5, d0
24018396:	b004      	add	sp, #16
24018398:	bcf0      	pop	{r4, r5, r6, r7}
2401839a:	f000 b845 	b.w	24018428 <__math_check_uflow>
2401839e:	ec43 2b10 	vmov	d0, r2, r3
240183a2:	eea6 0b00 	vfma.f64	d0, d6, d0
240183a6:	e751      	b.n	2401824c <exp+0x24>
240183a8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 240183c0 <exp+0x198>
240183ac:	e74e      	b.n	2401824c <exp+0x24>
240183ae:	bf00      	nop
240183b0:	00000000 	.word	0x00000000
240183b4:	7f000000 	.word	0x7f000000
240183b8:	00000000 	.word	0x00000000
240183bc:	00100000 	.word	0x00100000
	...
240183c8:	240320f8 	.word	0x240320f8

240183cc <with_errno>:
240183cc:	b513      	push	{r0, r1, r4, lr}
240183ce:	4604      	mov	r4, r0
240183d0:	ed8d 0b00 	vstr	d0, [sp]
240183d4:	f7ff fd96 	bl	24017f04 <__errno>
240183d8:	ed9d 0b00 	vldr	d0, [sp]
240183dc:	6004      	str	r4, [r0, #0]
240183de:	b002      	add	sp, #8
240183e0:	bd10      	pop	{r4, pc}

240183e2 <xflow>:
240183e2:	b082      	sub	sp, #8
240183e4:	b158      	cbz	r0, 240183fe <xflow+0x1c>
240183e6:	eeb1 7b40 	vneg.f64	d7, d0
240183ea:	ed8d 7b00 	vstr	d7, [sp]
240183ee:	ed9d 7b00 	vldr	d7, [sp]
240183f2:	2022      	movs	r0, #34	; 0x22
240183f4:	ee20 0b07 	vmul.f64	d0, d0, d7
240183f8:	b002      	add	sp, #8
240183fa:	f7ff bfe7 	b.w	240183cc <with_errno>
240183fe:	eeb0 7b40 	vmov.f64	d7, d0
24018402:	e7f2      	b.n	240183ea <xflow+0x8>
24018404:	0000      	movs	r0, r0
	...

24018408 <__math_uflow>:
24018408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24018410 <__math_uflow+0x8>
2401840c:	f7ff bfe9 	b.w	240183e2 <xflow>
24018410:	00000000 	.word	0x00000000
24018414:	10000000 	.word	0x10000000

24018418 <__math_oflow>:
24018418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24018420 <__math_oflow+0x8>
2401841c:	f7ff bfe1 	b.w	240183e2 <xflow>
24018420:	00000000 	.word	0x00000000
24018424:	70000000 	.word	0x70000000

24018428 <__math_check_uflow>:
24018428:	eeb5 0b40 	vcmp.f64	d0, #0.0
2401842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018430:	d102      	bne.n	24018438 <__math_check_uflow+0x10>
24018432:	2022      	movs	r0, #34	; 0x22
24018434:	f7ff bfca 	b.w	240183cc <with_errno>
24018438:	4770      	bx	lr
2401843a:	0000      	movs	r0, r0
2401843c:	0000      	movs	r0, r0
	...

24018440 <__math_check_oflow>:
24018440:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24018460 <__math_check_oflow+0x20>
24018444:	eeb0 7bc0 	vabs.f64	d7, d0
24018448:	eeb4 7b46 	vcmp.f64	d7, d6
2401844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018450:	dd02      	ble.n	24018458 <__math_check_oflow+0x18>
24018452:	2022      	movs	r0, #34	; 0x22
24018454:	f7ff bfba 	b.w	240183cc <with_errno>
24018458:	4770      	bx	lr
2401845a:	bf00      	nop
2401845c:	f3af 8000 	nop.w
24018460:	ffffffff 	.word	0xffffffff
24018464:	7fefffff 	.word	0x7fefffff

24018468 <with_errnof>:
24018468:	b513      	push	{r0, r1, r4, lr}
2401846a:	4604      	mov	r4, r0
2401846c:	ed8d 0a01 	vstr	s0, [sp, #4]
24018470:	f7ff fd48 	bl	24017f04 <__errno>
24018474:	ed9d 0a01 	vldr	s0, [sp, #4]
24018478:	6004      	str	r4, [r0, #0]
2401847a:	b002      	add	sp, #8
2401847c:	bd10      	pop	{r4, pc}

2401847e <xflowf>:
2401847e:	b130      	cbz	r0, 2401848e <xflowf+0x10>
24018480:	eef1 7a40 	vneg.f32	s15, s0
24018484:	ee27 0a80 	vmul.f32	s0, s15, s0
24018488:	2022      	movs	r0, #34	; 0x22
2401848a:	f7ff bfed 	b.w	24018468 <with_errnof>
2401848e:	eef0 7a40 	vmov.f32	s15, s0
24018492:	e7f7      	b.n	24018484 <xflowf+0x6>

24018494 <__math_uflowf>:
24018494:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401849c <__math_uflowf+0x8>
24018498:	f7ff bff1 	b.w	2401847e <xflowf>
2401849c:	10000000 	.word	0x10000000

240184a0 <__math_may_uflowf>:
240184a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240184a8 <__math_may_uflowf+0x8>
240184a4:	f7ff bfeb 	b.w	2401847e <xflowf>
240184a8:	1a200000 	.word	0x1a200000

240184ac <__math_oflowf>:
240184ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240184b4 <__math_oflowf+0x8>
240184b0:	f7ff bfe5 	b.w	2401847e <xflowf>
240184b4:	70000000 	.word	0x70000000

240184b8 <__math_divzerof>:
240184b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240184bc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240184c0:	2800      	cmp	r0, #0
240184c2:	fe40 7a27 	vseleq.f32	s15, s0, s15
240184c6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240184d4 <__math_divzerof+0x1c>
240184ca:	2022      	movs	r0, #34	; 0x22
240184cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
240184d0:	f7ff bfca 	b.w	24018468 <with_errnof>
240184d4:	00000000 	.word	0x00000000

240184d8 <__math_invalidf>:
240184d8:	eef0 7a40 	vmov.f32	s15, s0
240184dc:	ee30 7a40 	vsub.f32	s14, s0, s0
240184e0:	eef4 7a67 	vcmp.f32	s15, s15
240184e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240184e8:	ee87 0a07 	vdiv.f32	s0, s14, s14
240184ec:	d602      	bvs.n	240184f4 <__math_invalidf+0x1c>
240184ee:	2021      	movs	r0, #33	; 0x21
240184f0:	f7ff bfba 	b.w	24018468 <with_errnof>
240184f4:	4770      	bx	lr
	...

240184f8 <tan>:
240184f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
240184fa:	eeb0 7b40 	vmov.f64	d7, d0
240184fe:	ee17 3a90 	vmov	r3, s15
24018502:	4a15      	ldr	r2, [pc, #84]	; (24018558 <tan+0x60>)
24018504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018508:	4293      	cmp	r3, r2
2401850a:	dc07      	bgt.n	2401851c <tan+0x24>
2401850c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24018550 <tan+0x58>
24018510:	2001      	movs	r0, #1
24018512:	b005      	add	sp, #20
24018514:	f85d eb04 	ldr.w	lr, [sp], #4
24018518:	f001 b93e 	b.w	24019798 <__kernel_tan>
2401851c:	4a0f      	ldr	r2, [pc, #60]	; (2401855c <tan+0x64>)
2401851e:	4293      	cmp	r3, r2
24018520:	dd04      	ble.n	2401852c <tan+0x34>
24018522:	ee30 0b40 	vsub.f64	d0, d0, d0
24018526:	b005      	add	sp, #20
24018528:	f85d fb04 	ldr.w	pc, [sp], #4
2401852c:	4668      	mov	r0, sp
2401852e:	f000 fbc3 	bl	24018cb8 <__ieee754_rem_pio2>
24018532:	0040      	lsls	r0, r0, #1
24018534:	f000 0002 	and.w	r0, r0, #2
24018538:	ed9d 1b02 	vldr	d1, [sp, #8]
2401853c:	ed9d 0b00 	vldr	d0, [sp]
24018540:	f1c0 0001 	rsb	r0, r0, #1
24018544:	f001 f928 	bl	24019798 <__kernel_tan>
24018548:	e7ed      	b.n	24018526 <tan+0x2e>
2401854a:	bf00      	nop
2401854c:	f3af 8000 	nop.w
	...
24018558:	3fe921fb 	.word	0x3fe921fb
2401855c:	7fefffff 	.word	0x7fefffff

24018560 <expf>:
24018560:	ee10 2a10 	vmov	r2, s0
24018564:	f240 412a 	movw	r1, #1066	; 0x42a
24018568:	f3c2 530a 	ubfx	r3, r2, #20, #11
2401856c:	428b      	cmp	r3, r1
2401856e:	b430      	push	{r4, r5}
24018570:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24018574:	d92a      	bls.n	240185cc <expf+0x6c>
24018576:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
2401857a:	d058      	beq.n	2401862e <expf+0xce>
2401857c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24018580:	d303      	bcc.n	2401858a <expf+0x2a>
24018582:	ee30 0a00 	vadd.f32	s0, s0, s0
24018586:	bc30      	pop	{r4, r5}
24018588:	4770      	bx	lr
2401858a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24018634 <expf+0xd4>
2401858e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24018592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018596:	dd03      	ble.n	240185a0 <expf+0x40>
24018598:	bc30      	pop	{r4, r5}
2401859a:	2000      	movs	r0, #0
2401859c:	f7ff bf86 	b.w	240184ac <__math_oflowf>
240185a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 24018638 <expf+0xd8>
240185a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240185a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185ac:	d503      	bpl.n	240185b6 <expf+0x56>
240185ae:	bc30      	pop	{r4, r5}
240185b0:	2000      	movs	r0, #0
240185b2:	f7ff bf6f 	b.w	24018494 <__math_uflowf>
240185b6:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401863c <expf+0xdc>
240185ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
240185be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185c2:	d503      	bpl.n	240185cc <expf+0x6c>
240185c4:	bc30      	pop	{r4, r5}
240185c6:	2000      	movs	r0, #0
240185c8:	f7ff bf6a 	b.w	240184a0 <__math_may_uflowf>
240185cc:	4b1c      	ldr	r3, [pc, #112]	; (24018640 <expf+0xe0>)
240185ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
240185d2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
240185d6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
240185da:	eeb0 7b44 	vmov.f64	d7, d4
240185de:	eea5 7b06 	vfma.f64	d7, d5, d6
240185e2:	ee17 0a10 	vmov	r0, s14
240185e6:	ee37 7b44 	vsub.f64	d7, d7, d4
240185ea:	f000 021f 	and.w	r2, r0, #31
240185ee:	ee95 7b06 	vfnms.f64	d7, d5, d6
240185f2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
240185f6:	ee27 4b07 	vmul.f64	d4, d7, d7
240185fa:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
240185fe:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24018602:	eea5 6b07 	vfma.f64	d6, d5, d7
24018606:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
2401860a:	684d      	ldr	r5, [r1, #4]
2401860c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24018610:	2100      	movs	r1, #0
24018612:	190a      	adds	r2, r1, r4
24018614:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24018618:	eea5 0b07 	vfma.f64	d0, d5, d7
2401861c:	ec43 2b17 	vmov	d7, r2, r3
24018620:	eea6 0b04 	vfma.f64	d0, d6, d4
24018624:	ee20 0b07 	vmul.f64	d0, d0, d7
24018628:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401862c:	e7ab      	b.n	24018586 <expf+0x26>
2401862e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24018644 <expf+0xe4>
24018632:	e7a8      	b.n	24018586 <expf+0x26>
24018634:	42b17217 	.word	0x42b17217
24018638:	c2cff1b4 	.word	0xc2cff1b4
2401863c:	c2ce8ecf 	.word	0xc2ce8ecf
24018640:	24032968 	.word	0x24032968
24018644:	00000000 	.word	0x00000000

24018648 <fabsf>:
24018648:	ee10 3a10 	vmov	r3, s0
2401864c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018650:	ee00 3a10 	vmov	s0, r3
24018654:	4770      	bx	lr
	...

24018658 <logf>:
24018658:	ee10 3a10 	vmov	r3, s0
2401865c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24018660:	b410      	push	{r4}
24018662:	d055      	beq.n	24018710 <logf+0xb8>
24018664:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24018668:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
2401866c:	d31a      	bcc.n	240186a4 <logf+0x4c>
2401866e:	005a      	lsls	r2, r3, #1
24018670:	d104      	bne.n	2401867c <logf+0x24>
24018672:	f85d 4b04 	ldr.w	r4, [sp], #4
24018676:	2001      	movs	r0, #1
24018678:	f7ff bf1e 	b.w	240184b8 <__math_divzerof>
2401867c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24018680:	d043      	beq.n	2401870a <logf+0xb2>
24018682:	2b00      	cmp	r3, #0
24018684:	db02      	blt.n	2401868c <logf+0x34>
24018686:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401868a:	d303      	bcc.n	24018694 <logf+0x3c>
2401868c:	f85d 4b04 	ldr.w	r4, [sp], #4
24018690:	f7ff bf22 	b.w	240184d8 <__math_invalidf>
24018694:	eddf 7a20 	vldr	s15, [pc, #128]	; 24018718 <logf+0xc0>
24018698:	ee20 0a27 	vmul.f32	s0, s0, s15
2401869c:	ee10 3a10 	vmov	r3, s0
240186a0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
240186a4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
240186a8:	491c      	ldr	r1, [pc, #112]	; (2401871c <logf+0xc4>)
240186aa:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
240186ae:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
240186b2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
240186b6:	0dd4      	lsrs	r4, r2, #23
240186b8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
240186bc:	05e4      	lsls	r4, r4, #23
240186be:	ed90 6b00 	vldr	d6, [r0]
240186c2:	1b1b      	subs	r3, r3, r4
240186c4:	ee07 3a90 	vmov	s15, r3
240186c8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
240186cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
240186d0:	15d2      	asrs	r2, r2, #23
240186d2:	eea6 0b07 	vfma.f64	d0, d6, d7
240186d6:	ed90 6b02 	vldr	d6, [r0, #8]
240186da:	ee20 4b00 	vmul.f64	d4, d0, d0
240186de:	ee07 2a90 	vmov	s15, r2
240186e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
240186e6:	eea7 6b05 	vfma.f64	d6, d7, d5
240186ea:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
240186ee:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
240186f2:	eea5 7b00 	vfma.f64	d7, d5, d0
240186f6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
240186fa:	ee30 0b06 	vadd.f64	d0, d0, d6
240186fe:	eea5 7b04 	vfma.f64	d7, d5, d4
24018702:	eea4 0b07 	vfma.f64	d0, d4, d7
24018706:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401870a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401870e:	4770      	bx	lr
24018710:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24018720 <logf+0xc8>
24018714:	e7f9      	b.n	2401870a <logf+0xb2>
24018716:	bf00      	nop
24018718:	4b000000 	.word	0x4b000000
2401871c:	24032bd0 	.word	0x24032bd0
24018720:	00000000 	.word	0x00000000

24018724 <log2f>:
24018724:	ee10 2a10 	vmov	r2, s0
24018728:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
2401872c:	b410      	push	{r4}
2401872e:	d055      	beq.n	240187dc <log2f+0xb8>
24018730:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
24018734:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24018738:	d31a      	bcc.n	24018770 <log2f+0x4c>
2401873a:	0053      	lsls	r3, r2, #1
2401873c:	d104      	bne.n	24018748 <log2f+0x24>
2401873e:	f85d 4b04 	ldr.w	r4, [sp], #4
24018742:	2001      	movs	r0, #1
24018744:	f7ff beb8 	b.w	240184b8 <__math_divzerof>
24018748:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401874c:	d043      	beq.n	240187d6 <log2f+0xb2>
2401874e:	2a00      	cmp	r2, #0
24018750:	db02      	blt.n	24018758 <log2f+0x34>
24018752:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24018756:	d303      	bcc.n	24018760 <log2f+0x3c>
24018758:	f85d 4b04 	ldr.w	r4, [sp], #4
2401875c:	f7ff bebc 	b.w	240184d8 <__math_invalidf>
24018760:	eddf 7a20 	vldr	s15, [pc, #128]	; 240187e4 <log2f+0xc0>
24018764:	ee20 0a27 	vmul.f32	s0, s0, s15
24018768:	ee10 3a10 	vmov	r3, s0
2401876c:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
24018770:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
24018774:	491c      	ldr	r1, [pc, #112]	; (240187e8 <log2f+0xc4>)
24018776:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
2401877a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
2401877e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
24018782:	0ddc      	lsrs	r4, r3, #23
24018784:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24018788:	05e4      	lsls	r4, r4, #23
2401878a:	ed90 5b00 	vldr	d5, [r0]
2401878e:	1b12      	subs	r2, r2, r4
24018790:	ee07 2a90 	vmov	s15, r2
24018794:	15db      	asrs	r3, r3, #23
24018796:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
2401879a:	eea5 6b07 	vfma.f64	d6, d5, d7
2401879e:	ed90 7b02 	vldr	d7, [r0, #8]
240187a2:	ee26 4b06 	vmul.f64	d4, d6, d6
240187a6:	ee00 3a10 	vmov	s0, r3
240187aa:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
240187ae:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
240187b2:	ee30 0b07 	vadd.f64	d0, d0, d7
240187b6:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
240187ba:	eea5 7b06 	vfma.f64	d7, d5, d6
240187be:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
240187c2:	eea5 7b04 	vfma.f64	d7, d5, d4
240187c6:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
240187ca:	eea5 0b06 	vfma.f64	d0, d5, d6
240187ce:	eea4 0b07 	vfma.f64	d0, d4, d7
240187d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240187d6:	f85d 4b04 	ldr.w	r4, [sp], #4
240187da:	4770      	bx	lr
240187dc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240187ec <log2f+0xc8>
240187e0:	e7f9      	b.n	240187d6 <log2f+0xb2>
240187e2:	bf00      	nop
240187e4:	4b000000 	.word	0x4b000000
240187e8:	24032ab0 	.word	0x24032ab0
240187ec:	00000000 	.word	0x00000000

240187f0 <lrintf>:
240187f0:	ee10 3a10 	vmov	r3, s0
240187f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
240187f8:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
240187fc:	281e      	cmp	r0, #30
240187fe:	b082      	sub	sp, #8
24018800:	dc2e      	bgt.n	24018860 <lrintf+0x70>
24018802:	1c41      	adds	r1, r0, #1
24018804:	da02      	bge.n	2401880c <lrintf+0x1c>
24018806:	2000      	movs	r0, #0
24018808:	b002      	add	sp, #8
2401880a:	4770      	bx	lr
2401880c:	2816      	cmp	r0, #22
2401880e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24018812:	dd09      	ble.n	24018828 <lrintf+0x38>
24018814:	f3c3 0016 	ubfx	r0, r3, #0, #23
24018818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
2401881c:	3a96      	subs	r2, #150	; 0x96
2401881e:	4090      	lsls	r0, r2
24018820:	2900      	cmp	r1, #0
24018822:	d0f1      	beq.n	24018808 <lrintf+0x18>
24018824:	4240      	negs	r0, r0
24018826:	e7ef      	b.n	24018808 <lrintf+0x18>
24018828:	4b10      	ldr	r3, [pc, #64]	; (2401886c <lrintf+0x7c>)
2401882a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
2401882e:	ed93 7a00 	vldr	s14, [r3]
24018832:	ee37 0a00 	vadd.f32	s0, s14, s0
24018836:	ed8d 0a01 	vstr	s0, [sp, #4]
2401883a:	eddd 7a01 	vldr	s15, [sp, #4]
2401883e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24018842:	ee17 3a90 	vmov	r3, s15
24018846:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401884a:	d0dc      	beq.n	24018806 <lrintf+0x16>
2401884c:	f3c3 0016 	ubfx	r0, r3, #0, #23
24018850:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24018854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24018858:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
2401885c:	40d8      	lsrs	r0, r3
2401885e:	e7df      	b.n	24018820 <lrintf+0x30>
24018860:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24018864:	ee17 0a90 	vmov	r0, s15
24018868:	e7ce      	b.n	24018808 <lrintf+0x18>
2401886a:	bf00      	nop
2401886c:	24032cf0 	.word	0x24032cf0

24018870 <checkint>:
24018870:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24018874:	2b7e      	cmp	r3, #126	; 0x7e
24018876:	dd10      	ble.n	2401889a <checkint+0x2a>
24018878:	2b96      	cmp	r3, #150	; 0x96
2401887a:	dc0c      	bgt.n	24018896 <checkint+0x26>
2401887c:	2201      	movs	r2, #1
2401887e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24018882:	fa02 f303 	lsl.w	r3, r2, r3
24018886:	1e5a      	subs	r2, r3, #1
24018888:	4202      	tst	r2, r0
2401888a:	d106      	bne.n	2401889a <checkint+0x2a>
2401888c:	4203      	tst	r3, r0
2401888e:	bf0c      	ite	eq
24018890:	2002      	moveq	r0, #2
24018892:	2001      	movne	r0, #1
24018894:	4770      	bx	lr
24018896:	2002      	movs	r0, #2
24018898:	4770      	bx	lr
2401889a:	2000      	movs	r0, #0
2401889c:	4770      	bx	lr
	...

240188a0 <powf>:
240188a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
240188a2:	ee10 1a10 	vmov	r1, s0
240188a6:	ee10 4a90 	vmov	r4, s1
240188aa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
240188ae:	0062      	lsls	r2, r4, #1
240188b0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
240188b4:	eef0 7a40 	vmov.f32	s15, s0
240188b8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
240188bc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
240188c0:	d252      	bcs.n	24018968 <powf+0xc8>
240188c2:	4298      	cmp	r0, r3
240188c4:	d252      	bcs.n	2401896c <powf+0xcc>
240188c6:	2000      	movs	r0, #0
240188c8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
240188cc:	4ca0      	ldr	r4, [pc, #640]	; (24018b50 <powf+0x2b0>)
240188ce:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
240188d2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
240188d6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
240188da:	0dd2      	lsrs	r2, r2, #23
240188dc:	05d2      	lsls	r2, r2, #23
240188de:	eb04 1505 	add.w	r5, r4, r5, lsl #4
240188e2:	1a8b      	subs	r3, r1, r2
240188e4:	ed95 6b00 	vldr	d6, [r5]
240188e8:	ee07 3a90 	vmov	s15, r3
240188ec:	15d2      	asrs	r2, r2, #23
240188ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
240188f2:	eea6 5b07 	vfma.f64	d5, d6, d7
240188f6:	ed95 6b02 	vldr	d6, [r5, #8]
240188fa:	ee25 2b05 	vmul.f64	d2, d5, d5
240188fe:	ee22 1b02 	vmul.f64	d1, d2, d2
24018902:	ee07 2a90 	vmov	s15, r2
24018906:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
2401890a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401890e:	ee37 7b06 	vadd.f64	d7, d7, d6
24018912:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
24018916:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
2401891a:	eea5 3b06 	vfma.f64	d3, d5, d6
2401891e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
24018922:	eea5 6b04 	vfma.f64	d6, d5, d4
24018926:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
2401892a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
2401892e:	eea5 7b04 	vfma.f64	d7, d5, d4
24018932:	eea2 7b06 	vfma.f64	d7, d2, d6
24018936:	eea3 7b01 	vfma.f64	d7, d3, d1
2401893a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401893e:	ee10 3a90 	vmov	r3, s1
24018942:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24018946:	f248 03bf 	movw	r3, #32959	; 0x80bf
2401894a:	429a      	cmp	r2, r3
2401894c:	f0c0 80b1 	bcc.w	24018ab2 <powf+0x212>
24018950:	ed9f 7b77 	vldr	d7, [pc, #476]	; 24018b30 <powf+0x290>
24018954:	eeb4 0bc7 	vcmpe.f64	d0, d7
24018958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401895c:	dd79      	ble.n	24018a52 <powf+0x1b2>
2401895e:	b003      	add	sp, #12
24018960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018964:	f7ff bda2 	b.w	240184ac <__math_oflowf>
24018968:	4298      	cmp	r0, r3
2401896a:	d32d      	bcc.n	240189c8 <powf+0x128>
2401896c:	b952      	cbnz	r2, 24018984 <powf+0xe4>
2401896e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
24018972:	005b      	lsls	r3, r3, #1
24018974:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
24018978:	f240 80c9 	bls.w	24018b0e <powf+0x26e>
2401897c:	ee37 0aa0 	vadd.f32	s0, s15, s1
24018980:	b003      	add	sp, #12
24018982:	bd30      	pop	{r4, r5, pc}
24018984:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24018988:	d105      	bne.n	24018996 <powf+0xf6>
2401898a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
2401898e:	0064      	lsls	r4, r4, #1
24018990:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24018994:	e7f0      	b.n	24018978 <powf+0xd8>
24018996:	004b      	lsls	r3, r1, #1
24018998:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
2401899c:	d8ee      	bhi.n	2401897c <powf+0xdc>
2401899e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
240189a2:	d1eb      	bne.n	2401897c <powf+0xdc>
240189a4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
240189a8:	f000 80b1 	beq.w	24018b0e <powf+0x26e>
240189ac:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
240189b0:	ea6f 0404 	mvn.w	r4, r4
240189b4:	bf34      	ite	cc
240189b6:	2300      	movcc	r3, #0
240189b8:	2301      	movcs	r3, #1
240189ba:	0fe4      	lsrs	r4, r4, #31
240189bc:	42a3      	cmp	r3, r4
240189be:	f040 80a9 	bne.w	24018b14 <powf+0x274>
240189c2:	ee20 0aa0 	vmul.f32	s0, s1, s1
240189c6:	e7db      	b.n	24018980 <powf+0xe0>
240189c8:	004d      	lsls	r5, r1, #1
240189ca:	1e6a      	subs	r2, r5, #1
240189cc:	429a      	cmp	r2, r3
240189ce:	d31c      	bcc.n	24018a0a <powf+0x16a>
240189d0:	2900      	cmp	r1, #0
240189d2:	ee20 0a00 	vmul.f32	s0, s0, s0
240189d6:	da0f      	bge.n	240189f8 <powf+0x158>
240189d8:	ee10 0a90 	vmov	r0, s1
240189dc:	f7ff ff48 	bl	24018870 <checkint>
240189e0:	2801      	cmp	r0, #1
240189e2:	d109      	bne.n	240189f8 <powf+0x158>
240189e4:	eeb1 0a40 	vneg.f32	s0, s0
240189e8:	b945      	cbnz	r5, 240189fc <powf+0x15c>
240189ea:	2c00      	cmp	r4, #0
240189ec:	dac8      	bge.n	24018980 <powf+0xe0>
240189ee:	b003      	add	sp, #12
240189f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240189f4:	f7ff bd60 	b.w	240184b8 <__math_divzerof>
240189f8:	2000      	movs	r0, #0
240189fa:	e7f5      	b.n	240189e8 <powf+0x148>
240189fc:	2c00      	cmp	r4, #0
240189fe:	dabf      	bge.n	24018980 <powf+0xe0>
24018a00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24018a04:	ee87 0a80 	vdiv.f32	s0, s15, s0
24018a08:	e7ba      	b.n	24018980 <powf+0xe0>
24018a0a:	2900      	cmp	r1, #0
24018a0c:	da1f      	bge.n	24018a4e <powf+0x1ae>
24018a0e:	ee10 0a90 	vmov	r0, s1
24018a12:	f7ff ff2d 	bl	24018870 <checkint>
24018a16:	b920      	cbnz	r0, 24018a22 <powf+0x182>
24018a18:	b003      	add	sp, #12
24018a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018a1e:	f7ff bd5b 	b.w	240184d8 <__math_invalidf>
24018a22:	2801      	cmp	r0, #1
24018a24:	bf14      	ite	ne
24018a26:	2000      	movne	r0, #0
24018a28:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
24018a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24018a30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24018a34:	f4bf af48 	bcs.w	240188c8 <powf+0x28>
24018a38:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24018b54 <powf+0x2b4>
24018a3c:	ee27 0a80 	vmul.f32	s0, s15, s0
24018a40:	ee10 3a10 	vmov	r3, s0
24018a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018a48:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
24018a4c:	e73c      	b.n	240188c8 <powf+0x28>
24018a4e:	2000      	movs	r0, #0
24018a50:	e7ee      	b.n	24018a30 <powf+0x190>
24018a52:	ed9f 7b39 	vldr	d7, [pc, #228]	; 24018b38 <powf+0x298>
24018a56:	eeb4 0bc7 	vcmpe.f64	d0, d7
24018a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018a5e:	dd10      	ble.n	24018a82 <powf+0x1e2>
24018a60:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
24018a64:	2800      	cmp	r0, #0
24018a66:	d158      	bne.n	24018b1a <powf+0x27a>
24018a68:	9300      	str	r3, [sp, #0]
24018a6a:	eddd 7a00 	vldr	s15, [sp]
24018a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24018a72:	ee77 7a87 	vadd.f32	s15, s15, s14
24018a76:	eef4 7a47 	vcmp.f32	s15, s14
24018a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018a7e:	f47f af6e 	bne.w	2401895e <powf+0xbe>
24018a82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24018b40 <powf+0x2a0>
24018a86:	eeb4 0bc7 	vcmpe.f64	d0, d7
24018a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018a8e:	d804      	bhi.n	24018a9a <powf+0x1fa>
24018a90:	b003      	add	sp, #12
24018a92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018a96:	f7ff bcfd 	b.w	24018494 <__math_uflowf>
24018a9a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24018b48 <powf+0x2a8>
24018a9e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24018aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018aa6:	d504      	bpl.n	24018ab2 <powf+0x212>
24018aa8:	b003      	add	sp, #12
24018aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24018aae:	f7ff bcf7 	b.w	240184a0 <__math_may_uflowf>
24018ab2:	4b29      	ldr	r3, [pc, #164]	; (24018b58 <powf+0x2b8>)
24018ab4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24018ab8:	ee30 6b07 	vadd.f64	d6, d0, d7
24018abc:	ee16 2a10 	vmov	r2, s12
24018ac0:	ee36 7b47 	vsub.f64	d7, d6, d7
24018ac4:	f002 011f 	and.w	r1, r2, #31
24018ac8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24018acc:	ee30 7b47 	vsub.f64	d7, d0, d7
24018ad0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24018ad4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24018ad8:	ee27 4b07 	vmul.f64	d4, d7, d7
24018adc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24018ae0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24018ae4:	eea7 6b05 	vfma.f64	d6, d7, d5
24018ae8:	686d      	ldr	r5, [r5, #4]
24018aea:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24018aee:	1882      	adds	r2, r0, r2
24018af0:	2300      	movs	r3, #0
24018af2:	1918      	adds	r0, r3, r4
24018af4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24018af8:	eea7 0b05 	vfma.f64	d0, d7, d5
24018afc:	ec41 0b17 	vmov	d7, r0, r1
24018b00:	eea6 0b04 	vfma.f64	d0, d6, d4
24018b04:	ee20 0b07 	vmul.f64	d0, d0, d7
24018b08:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24018b0c:	e738      	b.n	24018980 <powf+0xe0>
24018b0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018b12:	e735      	b.n	24018980 <powf+0xe0>
24018b14:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24018b5c <powf+0x2bc>
24018b18:	e732      	b.n	24018980 <powf+0xe0>
24018b1a:	9301      	str	r3, [sp, #4]
24018b1c:	eddd 7a01 	vldr	s15, [sp, #4]
24018b20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24018b24:	ee77 7a67 	vsub.f32	s15, s14, s15
24018b28:	e7a5      	b.n	24018a76 <powf+0x1d6>
24018b2a:	bf00      	nop
24018b2c:	f3af 8000 	nop.w
24018b30:	ffd1d571 	.word	0xffd1d571
24018b34:	405fffff 	.word	0x405fffff
24018b38:	ffa3aae2 	.word	0xffa3aae2
24018b3c:	405fffff 	.word	0x405fffff
24018b40:	00000000 	.word	0x00000000
24018b44:	c062c000 	.word	0xc062c000
24018b48:	00000000 	.word	0x00000000
24018b4c:	c062a000 	.word	0xc062a000
24018b50:	24032cf8 	.word	0x24032cf8
24018b54:	4b000000 	.word	0x4b000000
24018b58:	24032968 	.word	0x24032968
24018b5c:	00000000 	.word	0x00000000

24018b60 <tanf>:
24018b60:	ee10 3a10 	vmov	r3, s0
24018b64:	b507      	push	{r0, r1, r2, lr}
24018b66:	4a12      	ldr	r2, [pc, #72]	; (24018bb0 <tanf+0x50>)
24018b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24018b6c:	4293      	cmp	r3, r2
24018b6e:	dc07      	bgt.n	24018b80 <tanf+0x20>
24018b70:	eddf 0a10 	vldr	s1, [pc, #64]	; 24018bb4 <tanf+0x54>
24018b74:	2001      	movs	r0, #1
24018b76:	b003      	add	sp, #12
24018b78:	f85d eb04 	ldr.w	lr, [sp], #4
24018b7c:	f001 b99a 	b.w	24019eb4 <__kernel_tanf>
24018b80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24018b84:	db04      	blt.n	24018b90 <tanf+0x30>
24018b86:	ee30 0a40 	vsub.f32	s0, s0, s0
24018b8a:	b003      	add	sp, #12
24018b8c:	f85d fb04 	ldr.w	pc, [sp], #4
24018b90:	4668      	mov	r0, sp
24018b92:	f000 fa2d 	bl	24018ff0 <__ieee754_rem_pio2f>
24018b96:	0040      	lsls	r0, r0, #1
24018b98:	f000 0002 	and.w	r0, r0, #2
24018b9c:	eddd 0a01 	vldr	s1, [sp, #4]
24018ba0:	ed9d 0a00 	vldr	s0, [sp]
24018ba4:	f1c0 0001 	rsb	r0, r0, #1
24018ba8:	f001 f984 	bl	24019eb4 <__kernel_tanf>
24018bac:	e7ed      	b.n	24018b8a <tanf+0x2a>
24018bae:	bf00      	nop
24018bb0:	3f490fda 	.word	0x3f490fda
24018bb4:	00000000 	.word	0x00000000

24018bb8 <tanhf>:
24018bb8:	b510      	push	{r4, lr}
24018bba:	ee10 4a10 	vmov	r4, s0
24018bbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
24018bc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24018bc6:	ed2d 8b02 	vpush	{d8}
24018bca:	eeb0 7a40 	vmov.f32	s14, s0
24018bce:	db0c      	blt.n	24018bea <tanhf+0x32>
24018bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018bd4:	eec0 7a07 	vdiv.f32	s15, s0, s14
24018bd8:	2c00      	cmp	r4, #0
24018bda:	bfac      	ite	ge
24018bdc:	ee37 0a80 	vaddge.f32	s0, s15, s0
24018be0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
24018be4:	ecbd 8b02 	vpop	{d8}
24018be8:	bd10      	pop	{r4, pc}
24018bea:	4a1b      	ldr	r2, [pc, #108]	; (24018c58 <tanhf+0xa0>)
24018bec:	4293      	cmp	r3, r2
24018bee:	dc30      	bgt.n	24018c52 <tanhf+0x9a>
24018bf0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
24018bf4:	da06      	bge.n	24018c04 <tanhf+0x4c>
24018bf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24018bfa:	ee70 7a27 	vadd.f32	s15, s0, s15
24018bfe:	ee27 0a80 	vmul.f32	s0, s15, s0
24018c02:	e7ef      	b.n	24018be4 <tanhf+0x2c>
24018c04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24018c08:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
24018c0c:	db12      	blt.n	24018c34 <tanhf+0x7c>
24018c0e:	f7ff fd1b 	bl	24018648 <fabsf>
24018c12:	ee30 0a00 	vadd.f32	s0, s0, s0
24018c16:	f001 fb35 	bl	2401a284 <expm1f>
24018c1a:	ee30 0a08 	vadd.f32	s0, s0, s16
24018c1e:	eec8 7a00 	vdiv.f32	s15, s16, s0
24018c22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018c26:	ee30 0a67 	vsub.f32	s0, s0, s15
24018c2a:	2c00      	cmp	r4, #0
24018c2c:	bfb8      	it	lt
24018c2e:	eeb1 0a40 	vneglt.f32	s0, s0
24018c32:	e7d7      	b.n	24018be4 <tanhf+0x2c>
24018c34:	f7ff fd08 	bl	24018648 <fabsf>
24018c38:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
24018c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
24018c40:	f001 fb20 	bl	2401a284 <expm1f>
24018c44:	ee70 7a08 	vadd.f32	s15, s0, s16
24018c48:	eeb1 7a40 	vneg.f32	s14, s0
24018c4c:	ee87 0a27 	vdiv.f32	s0, s14, s15
24018c50:	e7eb      	b.n	24018c2a <tanhf+0x72>
24018c52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24018c56:	e7e8      	b.n	24018c2a <tanhf+0x72>
24018c58:	41afffff 	.word	0x41afffff

24018c5c <log10f>:
24018c5c:	b508      	push	{r3, lr}
24018c5e:	ed2d 8b02 	vpush	{d8}
24018c62:	eeb0 8a40 	vmov.f32	s16, s0
24018c66:	f000 f96b 	bl	24018f40 <__ieee754_log10f>
24018c6a:	eeb4 8a48 	vcmp.f32	s16, s16
24018c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c72:	d60f      	bvs.n	24018c94 <log10f+0x38>
24018c74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24018c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c7c:	d80a      	bhi.n	24018c94 <log10f+0x38>
24018c7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
24018c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018c86:	d108      	bne.n	24018c9a <log10f+0x3e>
24018c88:	f7ff f93c 	bl	24017f04 <__errno>
24018c8c:	2322      	movs	r3, #34	; 0x22
24018c8e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24018cb0 <log10f+0x54>
24018c92:	6003      	str	r3, [r0, #0]
24018c94:	ecbd 8b02 	vpop	{d8}
24018c98:	bd08      	pop	{r3, pc}
24018c9a:	f7ff f933 	bl	24017f04 <__errno>
24018c9e:	ecbd 8b02 	vpop	{d8}
24018ca2:	2321      	movs	r3, #33	; 0x21
24018ca4:	6003      	str	r3, [r0, #0]
24018ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
24018caa:	4802      	ldr	r0, [pc, #8]	; (24018cb4 <log10f+0x58>)
24018cac:	f001 bc46 	b.w	2401a53c <nanf>
24018cb0:	ff800000 	.word	0xff800000
24018cb4:	240320f0 	.word	0x240320f0

24018cb8 <__ieee754_rem_pio2>:
24018cb8:	b570      	push	{r4, r5, r6, lr}
24018cba:	eeb0 7b40 	vmov.f64	d7, d0
24018cbe:	ee17 5a90 	vmov	r5, s15
24018cc2:	4b99      	ldr	r3, [pc, #612]	; (24018f28 <__ieee754_rem_pio2+0x270>)
24018cc4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
24018cc8:	429e      	cmp	r6, r3
24018cca:	b088      	sub	sp, #32
24018ccc:	4604      	mov	r4, r0
24018cce:	dc07      	bgt.n	24018ce0 <__ieee754_rem_pio2+0x28>
24018cd0:	2200      	movs	r2, #0
24018cd2:	2300      	movs	r3, #0
24018cd4:	ed84 0b00 	vstr	d0, [r4]
24018cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
24018cdc:	2000      	movs	r0, #0
24018cde:	e01b      	b.n	24018d18 <__ieee754_rem_pio2+0x60>
24018ce0:	4b92      	ldr	r3, [pc, #584]	; (24018f2c <__ieee754_rem_pio2+0x274>)
24018ce2:	429e      	cmp	r6, r3
24018ce4:	dc3b      	bgt.n	24018d5e <__ieee754_rem_pio2+0xa6>
24018ce6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
24018cea:	2d00      	cmp	r5, #0
24018cec:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 24018ee8 <__ieee754_rem_pio2+0x230>
24018cf0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
24018cf4:	dd19      	ble.n	24018d2a <__ieee754_rem_pio2+0x72>
24018cf6:	ee30 7b46 	vsub.f64	d7, d0, d6
24018cfa:	429e      	cmp	r6, r3
24018cfc:	d00e      	beq.n	24018d1c <__ieee754_rem_pio2+0x64>
24018cfe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 24018ef0 <__ieee754_rem_pio2+0x238>
24018d02:	ee37 5b46 	vsub.f64	d5, d7, d6
24018d06:	ee37 7b45 	vsub.f64	d7, d7, d5
24018d0a:	ed84 5b00 	vstr	d5, [r4]
24018d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
24018d12:	ed84 7b02 	vstr	d7, [r4, #8]
24018d16:	2001      	movs	r0, #1
24018d18:	b008      	add	sp, #32
24018d1a:	bd70      	pop	{r4, r5, r6, pc}
24018d1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24018ef8 <__ieee754_rem_pio2+0x240>
24018d20:	ee37 7b46 	vsub.f64	d7, d7, d6
24018d24:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24018f00 <__ieee754_rem_pio2+0x248>
24018d28:	e7eb      	b.n	24018d02 <__ieee754_rem_pio2+0x4a>
24018d2a:	429e      	cmp	r6, r3
24018d2c:	ee30 7b06 	vadd.f64	d7, d0, d6
24018d30:	d00e      	beq.n	24018d50 <__ieee754_rem_pio2+0x98>
24018d32:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 24018ef0 <__ieee754_rem_pio2+0x238>
24018d36:	ee37 5b06 	vadd.f64	d5, d7, d6
24018d3a:	ee37 7b45 	vsub.f64	d7, d7, d5
24018d3e:	ed84 5b00 	vstr	d5, [r4]
24018d42:	ee37 7b06 	vadd.f64	d7, d7, d6
24018d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24018d4a:	ed84 7b02 	vstr	d7, [r4, #8]
24018d4e:	e7e3      	b.n	24018d18 <__ieee754_rem_pio2+0x60>
24018d50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24018ef8 <__ieee754_rem_pio2+0x240>
24018d54:	ee37 7b06 	vadd.f64	d7, d7, d6
24018d58:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24018f00 <__ieee754_rem_pio2+0x248>
24018d5c:	e7eb      	b.n	24018d36 <__ieee754_rem_pio2+0x7e>
24018d5e:	4b74      	ldr	r3, [pc, #464]	; (24018f30 <__ieee754_rem_pio2+0x278>)
24018d60:	429e      	cmp	r6, r3
24018d62:	dc70      	bgt.n	24018e46 <__ieee754_rem_pio2+0x18e>
24018d64:	f001 f986 	bl	2401a074 <fabs>
24018d68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24018d6c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24018f08 <__ieee754_rem_pio2+0x250>
24018d70:	eea0 7b06 	vfma.f64	d7, d0, d6
24018d74:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24018d78:	eeb8 5be7 	vcvt.f64.s32	d5, s15
24018d7c:	ee17 0a90 	vmov	r0, s15
24018d80:	eeb1 4b45 	vneg.f64	d4, d5
24018d84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24018ee8 <__ieee754_rem_pio2+0x230>
24018d88:	eea5 0b47 	vfms.f64	d0, d5, d7
24018d8c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24018ef0 <__ieee754_rem_pio2+0x238>
24018d90:	281f      	cmp	r0, #31
24018d92:	ee25 7b07 	vmul.f64	d7, d5, d7
24018d96:	ee30 6b47 	vsub.f64	d6, d0, d7
24018d9a:	dc08      	bgt.n	24018dae <__ieee754_rem_pio2+0xf6>
24018d9c:	4b65      	ldr	r3, [pc, #404]	; (24018f34 <__ieee754_rem_pio2+0x27c>)
24018d9e:	1e42      	subs	r2, r0, #1
24018da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24018da4:	42b3      	cmp	r3, r6
24018da6:	d002      	beq.n	24018dae <__ieee754_rem_pio2+0xf6>
24018da8:	ed84 6b00 	vstr	d6, [r4]
24018dac:	e026      	b.n	24018dfc <__ieee754_rem_pio2+0x144>
24018dae:	ee16 3a90 	vmov	r3, s13
24018db2:	f3c3 530a 	ubfx	r3, r3, #20, #11
24018db6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
24018dba:	2b10      	cmp	r3, #16
24018dbc:	ea4f 5226 	mov.w	r2, r6, asr #20
24018dc0:	ddf2      	ble.n	24018da8 <__ieee754_rem_pio2+0xf0>
24018dc2:	eeb0 6b40 	vmov.f64	d6, d0
24018dc6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 24018ef8 <__ieee754_rem_pio2+0x240>
24018dca:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 24018f00 <__ieee754_rem_pio2+0x248>
24018dce:	eea4 6b07 	vfma.f64	d6, d4, d7
24018dd2:	ee30 0b46 	vsub.f64	d0, d0, d6
24018dd6:	eea4 0b07 	vfma.f64	d0, d4, d7
24018dda:	eeb0 7b40 	vmov.f64	d7, d0
24018dde:	ee95 7b03 	vfnms.f64	d7, d5, d3
24018de2:	ee36 3b47 	vsub.f64	d3, d6, d7
24018de6:	ee13 3a90 	vmov	r3, s7
24018dea:	f3c3 530a 	ubfx	r3, r3, #20, #11
24018dee:	1ad3      	subs	r3, r2, r3
24018df0:	2b31      	cmp	r3, #49	; 0x31
24018df2:	dc17      	bgt.n	24018e24 <__ieee754_rem_pio2+0x16c>
24018df4:	eeb0 0b46 	vmov.f64	d0, d6
24018df8:	ed84 3b00 	vstr	d3, [r4]
24018dfc:	ed94 6b00 	vldr	d6, [r4]
24018e00:	2d00      	cmp	r5, #0
24018e02:	ee30 0b46 	vsub.f64	d0, d0, d6
24018e06:	ee30 0b47 	vsub.f64	d0, d0, d7
24018e0a:	ed84 0b02 	vstr	d0, [r4, #8]
24018e0e:	da83      	bge.n	24018d18 <__ieee754_rem_pio2+0x60>
24018e10:	eeb1 6b46 	vneg.f64	d6, d6
24018e14:	eeb1 0b40 	vneg.f64	d0, d0
24018e18:	ed84 6b00 	vstr	d6, [r4]
24018e1c:	ed84 0b02 	vstr	d0, [r4, #8]
24018e20:	4240      	negs	r0, r0
24018e22:	e779      	b.n	24018d18 <__ieee754_rem_pio2+0x60>
24018e24:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 24018f10 <__ieee754_rem_pio2+0x258>
24018e28:	eeb0 0b46 	vmov.f64	d0, d6
24018e2c:	eea4 0b03 	vfma.f64	d0, d4, d3
24018e30:	ee36 7b40 	vsub.f64	d7, d6, d0
24018e34:	ed9f 6b38 	vldr	d6, [pc, #224]	; 24018f18 <__ieee754_rem_pio2+0x260>
24018e38:	eea4 7b03 	vfma.f64	d7, d4, d3
24018e3c:	ee95 7b06 	vfnms.f64	d7, d5, d6
24018e40:	ee30 6b47 	vsub.f64	d6, d0, d7
24018e44:	e7b0      	b.n	24018da8 <__ieee754_rem_pio2+0xf0>
24018e46:	4b3c      	ldr	r3, [pc, #240]	; (24018f38 <__ieee754_rem_pio2+0x280>)
24018e48:	429e      	cmp	r6, r3
24018e4a:	dd06      	ble.n	24018e5a <__ieee754_rem_pio2+0x1a2>
24018e4c:	ee30 7b40 	vsub.f64	d7, d0, d0
24018e50:	ed80 7b02 	vstr	d7, [r0, #8]
24018e54:	ed80 7b00 	vstr	d7, [r0]
24018e58:	e740      	b.n	24018cdc <__ieee754_rem_pio2+0x24>
24018e5a:	1532      	asrs	r2, r6, #20
24018e5c:	ee10 0a10 	vmov	r0, s0
24018e60:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
24018e64:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
24018e68:	ec41 0b17 	vmov	d7, r0, r1
24018e6c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24018e70:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24018f20 <__ieee754_rem_pio2+0x268>
24018e74:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24018e78:	ee37 7b46 	vsub.f64	d7, d7, d6
24018e7c:	ed8d 6b02 	vstr	d6, [sp, #8]
24018e80:	ee27 7b05 	vmul.f64	d7, d7, d5
24018e84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24018e88:	a902      	add	r1, sp, #8
24018e8a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24018e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
24018e92:	ed8d 6b04 	vstr	d6, [sp, #16]
24018e96:	ee27 7b05 	vmul.f64	d7, d7, d5
24018e9a:	ed8d 7b06 	vstr	d7, [sp, #24]
24018e9e:	2603      	movs	r6, #3
24018ea0:	4608      	mov	r0, r1
24018ea2:	ed91 7b04 	vldr	d7, [r1, #16]
24018ea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
24018eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018eae:	4633      	mov	r3, r6
24018eb0:	f1a1 0108 	sub.w	r1, r1, #8
24018eb4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
24018eb8:	d0f3      	beq.n	24018ea2 <__ieee754_rem_pio2+0x1ea>
24018eba:	4920      	ldr	r1, [pc, #128]	; (24018f3c <__ieee754_rem_pio2+0x284>)
24018ebc:	9101      	str	r1, [sp, #4]
24018ebe:	2102      	movs	r1, #2
24018ec0:	9100      	str	r1, [sp, #0]
24018ec2:	4621      	mov	r1, r4
24018ec4:	f000 f9d0 	bl	24019268 <__kernel_rem_pio2>
24018ec8:	2d00      	cmp	r5, #0
24018eca:	f6bf af25 	bge.w	24018d18 <__ieee754_rem_pio2+0x60>
24018ece:	ed94 7b00 	vldr	d7, [r4]
24018ed2:	eeb1 7b47 	vneg.f64	d7, d7
24018ed6:	ed84 7b00 	vstr	d7, [r4]
24018eda:	ed94 7b02 	vldr	d7, [r4, #8]
24018ede:	eeb1 7b47 	vneg.f64	d7, d7
24018ee2:	ed84 7b02 	vstr	d7, [r4, #8]
24018ee6:	e79b      	b.n	24018e20 <__ieee754_rem_pio2+0x168>
24018ee8:	54400000 	.word	0x54400000
24018eec:	3ff921fb 	.word	0x3ff921fb
24018ef0:	1a626331 	.word	0x1a626331
24018ef4:	3dd0b461 	.word	0x3dd0b461
24018ef8:	1a600000 	.word	0x1a600000
24018efc:	3dd0b461 	.word	0x3dd0b461
24018f00:	2e037073 	.word	0x2e037073
24018f04:	3ba3198a 	.word	0x3ba3198a
24018f08:	6dc9c883 	.word	0x6dc9c883
24018f0c:	3fe45f30 	.word	0x3fe45f30
24018f10:	2e000000 	.word	0x2e000000
24018f14:	3ba3198a 	.word	0x3ba3198a
24018f18:	252049c1 	.word	0x252049c1
24018f1c:	397b839a 	.word	0x397b839a
24018f20:	00000000 	.word	0x00000000
24018f24:	41700000 	.word	0x41700000
24018f28:	3fe921fb 	.word	0x3fe921fb
24018f2c:	4002d97b 	.word	0x4002d97b
24018f30:	413921fb 	.word	0x413921fb
24018f34:	24032f60 	.word	0x24032f60
24018f38:	7fefffff 	.word	0x7fefffff
24018f3c:	24032fe0 	.word	0x24032fe0

24018f40 <__ieee754_log10f>:
24018f40:	b508      	push	{r3, lr}
24018f42:	ee10 2a10 	vmov	r2, s0
24018f46:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
24018f4a:	ed2d 8b02 	vpush	{d8}
24018f4e:	d108      	bne.n	24018f62 <__ieee754_log10f+0x22>
24018f50:	ed9f 7a21 	vldr	s14, [pc, #132]	; 24018fd8 <__ieee754_log10f+0x98>
24018f54:	eddf 7a21 	vldr	s15, [pc, #132]	; 24018fdc <__ieee754_log10f+0x9c>
24018f58:	ee87 0a27 	vdiv.f32	s0, s14, s15
24018f5c:	ecbd 8b02 	vpop	{d8}
24018f60:	bd08      	pop	{r3, pc}
24018f62:	2a00      	cmp	r2, #0
24018f64:	da02      	bge.n	24018f6c <__ieee754_log10f+0x2c>
24018f66:	ee30 7a40 	vsub.f32	s14, s0, s0
24018f6a:	e7f3      	b.n	24018f54 <__ieee754_log10f+0x14>
24018f6c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24018f70:	db02      	blt.n	24018f78 <__ieee754_log10f+0x38>
24018f72:	ee30 0a00 	vadd.f32	s0, s0, s0
24018f76:	e7f1      	b.n	24018f5c <__ieee754_log10f+0x1c>
24018f78:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
24018f7c:	bfbf      	itttt	lt
24018f7e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 24018fe0 <__ieee754_log10f+0xa0>
24018f82:	ee60 7a27 	vmullt.f32	s15, s0, s15
24018f86:	f06f 0118 	mvnlt.w	r1, #24
24018f8a:	ee17 2a90 	vmovlt	r2, s15
24018f8e:	ea4f 53e2 	mov.w	r3, r2, asr #23
24018f92:	bfa8      	it	ge
24018f94:	2100      	movge	r1, #0
24018f96:	3b7f      	subs	r3, #127	; 0x7f
24018f98:	440b      	add	r3, r1
24018f9a:	0fd9      	lsrs	r1, r3, #31
24018f9c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24018fa0:	ee07 3a90 	vmov	s15, r3
24018fa4:	f3c2 0216 	ubfx	r2, r2, #0, #23
24018fa8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
24018fac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
24018fb0:	ee00 3a10 	vmov	s0, r3
24018fb4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
24018fb8:	f7ff fb4e 	bl	24018658 <logf>
24018fbc:	eddf 7a09 	vldr	s15, [pc, #36]	; 24018fe4 <__ieee754_log10f+0xa4>
24018fc0:	ee20 0a27 	vmul.f32	s0, s0, s15
24018fc4:	eddf 7a08 	vldr	s15, [pc, #32]	; 24018fe8 <__ieee754_log10f+0xa8>
24018fc8:	eea8 0a27 	vfma.f32	s0, s16, s15
24018fcc:	eddf 7a07 	vldr	s15, [pc, #28]	; 24018fec <__ieee754_log10f+0xac>
24018fd0:	eea8 0a27 	vfma.f32	s0, s16, s15
24018fd4:	e7c2      	b.n	24018f5c <__ieee754_log10f+0x1c>
24018fd6:	bf00      	nop
24018fd8:	cc000000 	.word	0xcc000000
24018fdc:	00000000 	.word	0x00000000
24018fe0:	4c000000 	.word	0x4c000000
24018fe4:	3ede5bd9 	.word	0x3ede5bd9
24018fe8:	355427db 	.word	0x355427db
24018fec:	3e9a2080 	.word	0x3e9a2080

24018ff0 <__ieee754_rem_pio2f>:
24018ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
24018ff2:	ee10 6a10 	vmov	r6, s0
24018ff6:	4b8e      	ldr	r3, [pc, #568]	; (24019230 <__ieee754_rem_pio2f+0x240>)
24018ff8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24018ffc:	429d      	cmp	r5, r3
24018ffe:	b087      	sub	sp, #28
24019000:	eef0 7a40 	vmov.f32	s15, s0
24019004:	4604      	mov	r4, r0
24019006:	dc05      	bgt.n	24019014 <__ieee754_rem_pio2f+0x24>
24019008:	2300      	movs	r3, #0
2401900a:	ed80 0a00 	vstr	s0, [r0]
2401900e:	6043      	str	r3, [r0, #4]
24019010:	2000      	movs	r0, #0
24019012:	e01a      	b.n	2401904a <__ieee754_rem_pio2f+0x5a>
24019014:	4b87      	ldr	r3, [pc, #540]	; (24019234 <__ieee754_rem_pio2f+0x244>)
24019016:	429d      	cmp	r5, r3
24019018:	dc46      	bgt.n	240190a8 <__ieee754_rem_pio2f+0xb8>
2401901a:	2e00      	cmp	r6, #0
2401901c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 24019238 <__ieee754_rem_pio2f+0x248>
24019020:	4b86      	ldr	r3, [pc, #536]	; (2401923c <__ieee754_rem_pio2f+0x24c>)
24019022:	f025 050f 	bic.w	r5, r5, #15
24019026:	dd1f      	ble.n	24019068 <__ieee754_rem_pio2f+0x78>
24019028:	429d      	cmp	r5, r3
2401902a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401902e:	d00e      	beq.n	2401904e <__ieee754_rem_pio2f+0x5e>
24019030:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24019240 <__ieee754_rem_pio2f+0x250>
24019034:	ee37 0ac7 	vsub.f32	s0, s15, s14
24019038:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401903c:	ed80 0a00 	vstr	s0, [r0]
24019040:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019044:	2001      	movs	r0, #1
24019046:	edc4 7a01 	vstr	s15, [r4, #4]
2401904a:	b007      	add	sp, #28
2401904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401904e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24019244 <__ieee754_rem_pio2f+0x254>
24019052:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 24019248 <__ieee754_rem_pio2f+0x258>
24019056:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401905a:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401905e:	ee77 7ae6 	vsub.f32	s15, s15, s13
24019062:	edc0 6a00 	vstr	s13, [r0]
24019066:	e7eb      	b.n	24019040 <__ieee754_rem_pio2f+0x50>
24019068:	429d      	cmp	r5, r3
2401906a:	ee77 7a80 	vadd.f32	s15, s15, s0
2401906e:	d00e      	beq.n	2401908e <__ieee754_rem_pio2f+0x9e>
24019070:	ed9f 7a73 	vldr	s14, [pc, #460]	; 24019240 <__ieee754_rem_pio2f+0x250>
24019074:	ee37 0a87 	vadd.f32	s0, s15, s14
24019078:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401907c:	ed80 0a00 	vstr	s0, [r0]
24019080:	ee77 7a87 	vadd.f32	s15, s15, s14
24019084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24019088:	edc4 7a01 	vstr	s15, [r4, #4]
2401908c:	e7dd      	b.n	2401904a <__ieee754_rem_pio2f+0x5a>
2401908e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24019244 <__ieee754_rem_pio2f+0x254>
24019092:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 24019248 <__ieee754_rem_pio2f+0x258>
24019096:	ee77 7a80 	vadd.f32	s15, s15, s0
2401909a:	ee77 6a87 	vadd.f32	s13, s15, s14
2401909e:	ee77 7ae6 	vsub.f32	s15, s15, s13
240190a2:	edc0 6a00 	vstr	s13, [r0]
240190a6:	e7eb      	b.n	24019080 <__ieee754_rem_pio2f+0x90>
240190a8:	4b68      	ldr	r3, [pc, #416]	; (2401924c <__ieee754_rem_pio2f+0x25c>)
240190aa:	429d      	cmp	r5, r3
240190ac:	dc72      	bgt.n	24019194 <__ieee754_rem_pio2f+0x1a4>
240190ae:	f7ff facb 	bl	24018648 <fabsf>
240190b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24019250 <__ieee754_rem_pio2f+0x260>
240190b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240190ba:	eee0 7a07 	vfma.f32	s15, s0, s14
240190be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240190c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240190c6:	ee17 0a90 	vmov	r0, s15
240190ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24019238 <__ieee754_rem_pio2f+0x248>
240190ce:	eea7 0a67 	vfms.f32	s0, s14, s15
240190d2:	281f      	cmp	r0, #31
240190d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 24019240 <__ieee754_rem_pio2f+0x250>
240190d8:	ee67 7a27 	vmul.f32	s15, s14, s15
240190dc:	eeb1 6a47 	vneg.f32	s12, s14
240190e0:	ee70 6a67 	vsub.f32	s13, s0, s15
240190e4:	ee16 2a90 	vmov	r2, s13
240190e8:	dc1c      	bgt.n	24019124 <__ieee754_rem_pio2f+0x134>
240190ea:	495a      	ldr	r1, [pc, #360]	; (24019254 <__ieee754_rem_pio2f+0x264>)
240190ec:	1e47      	subs	r7, r0, #1
240190ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
240190f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
240190f6:	428b      	cmp	r3, r1
240190f8:	d014      	beq.n	24019124 <__ieee754_rem_pio2f+0x134>
240190fa:	6022      	str	r2, [r4, #0]
240190fc:	ed94 7a00 	vldr	s14, [r4]
24019100:	ee30 0a47 	vsub.f32	s0, s0, s14
24019104:	2e00      	cmp	r6, #0
24019106:	ee30 0a67 	vsub.f32	s0, s0, s15
2401910a:	ed84 0a01 	vstr	s0, [r4, #4]
2401910e:	da9c      	bge.n	2401904a <__ieee754_rem_pio2f+0x5a>
24019110:	eeb1 7a47 	vneg.f32	s14, s14
24019114:	eeb1 0a40 	vneg.f32	s0, s0
24019118:	ed84 7a00 	vstr	s14, [r4]
2401911c:	ed84 0a01 	vstr	s0, [r4, #4]
24019120:	4240      	negs	r0, r0
24019122:	e792      	b.n	2401904a <__ieee754_rem_pio2f+0x5a>
24019124:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24019128:	15eb      	asrs	r3, r5, #23
2401912a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
2401912e:	2d08      	cmp	r5, #8
24019130:	dde3      	ble.n	240190fa <__ieee754_rem_pio2f+0x10a>
24019132:	eddf 7a44 	vldr	s15, [pc, #272]	; 24019244 <__ieee754_rem_pio2f+0x254>
24019136:	eddf 5a44 	vldr	s11, [pc, #272]	; 24019248 <__ieee754_rem_pio2f+0x258>
2401913a:	eef0 6a40 	vmov.f32	s13, s0
2401913e:	eee6 6a27 	vfma.f32	s13, s12, s15
24019142:	ee30 0a66 	vsub.f32	s0, s0, s13
24019146:	eea6 0a27 	vfma.f32	s0, s12, s15
2401914a:	eef0 7a40 	vmov.f32	s15, s0
2401914e:	eed7 7a25 	vfnms.f32	s15, s14, s11
24019152:	ee76 5ae7 	vsub.f32	s11, s13, s15
24019156:	ee15 2a90 	vmov	r2, s11
2401915a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401915e:	1a5b      	subs	r3, r3, r1
24019160:	2b19      	cmp	r3, #25
24019162:	dc04      	bgt.n	2401916e <__ieee754_rem_pio2f+0x17e>
24019164:	edc4 5a00 	vstr	s11, [r4]
24019168:	eeb0 0a66 	vmov.f32	s0, s13
2401916c:	e7c6      	b.n	240190fc <__ieee754_rem_pio2f+0x10c>
2401916e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24019258 <__ieee754_rem_pio2f+0x268>
24019172:	eeb0 0a66 	vmov.f32	s0, s13
24019176:	eea6 0a25 	vfma.f32	s0, s12, s11
2401917a:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401917e:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401925c <__ieee754_rem_pio2f+0x26c>
24019182:	eee6 7a25 	vfma.f32	s15, s12, s11
24019186:	eed7 7a26 	vfnms.f32	s15, s14, s13
2401918a:	ee30 7a67 	vsub.f32	s14, s0, s15
2401918e:	ed84 7a00 	vstr	s14, [r4]
24019192:	e7b3      	b.n	240190fc <__ieee754_rem_pio2f+0x10c>
24019194:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
24019198:	db06      	blt.n	240191a8 <__ieee754_rem_pio2f+0x1b8>
2401919a:	ee70 7a40 	vsub.f32	s15, s0, s0
2401919e:	edc0 7a01 	vstr	s15, [r0, #4]
240191a2:	edc0 7a00 	vstr	s15, [r0]
240191a6:	e733      	b.n	24019010 <__ieee754_rem_pio2f+0x20>
240191a8:	15ea      	asrs	r2, r5, #23
240191aa:	3a86      	subs	r2, #134	; 0x86
240191ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
240191b0:	ee07 3a90 	vmov	s15, r3
240191b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240191b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 24019260 <__ieee754_rem_pio2f+0x270>
240191bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240191c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
240191c4:	ed8d 7a03 	vstr	s14, [sp, #12]
240191c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
240191cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240191d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240191d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
240191d8:	ed8d 7a04 	vstr	s14, [sp, #16]
240191dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
240191e0:	eef5 7a40 	vcmp.f32	s15, #0.0
240191e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240191e8:	edcd 7a05 	vstr	s15, [sp, #20]
240191ec:	d11e      	bne.n	2401922c <__ieee754_rem_pio2f+0x23c>
240191ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
240191f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240191f6:	bf14      	ite	ne
240191f8:	2302      	movne	r3, #2
240191fa:	2301      	moveq	r3, #1
240191fc:	4919      	ldr	r1, [pc, #100]	; (24019264 <__ieee754_rem_pio2f+0x274>)
240191fe:	9101      	str	r1, [sp, #4]
24019200:	2102      	movs	r1, #2
24019202:	9100      	str	r1, [sp, #0]
24019204:	a803      	add	r0, sp, #12
24019206:	4621      	mov	r1, r4
24019208:	f000 fbde 	bl	240199c8 <__kernel_rem_pio2f>
2401920c:	2e00      	cmp	r6, #0
2401920e:	f6bf af1c 	bge.w	2401904a <__ieee754_rem_pio2f+0x5a>
24019212:	edd4 7a00 	vldr	s15, [r4]
24019216:	eef1 7a67 	vneg.f32	s15, s15
2401921a:	edc4 7a00 	vstr	s15, [r4]
2401921e:	edd4 7a01 	vldr	s15, [r4, #4]
24019222:	eef1 7a67 	vneg.f32	s15, s15
24019226:	edc4 7a01 	vstr	s15, [r4, #4]
2401922a:	e779      	b.n	24019120 <__ieee754_rem_pio2f+0x130>
2401922c:	2303      	movs	r3, #3
2401922e:	e7e5      	b.n	240191fc <__ieee754_rem_pio2f+0x20c>
24019230:	3f490fd8 	.word	0x3f490fd8
24019234:	4016cbe3 	.word	0x4016cbe3
24019238:	3fc90f80 	.word	0x3fc90f80
2401923c:	3fc90fd0 	.word	0x3fc90fd0
24019240:	37354443 	.word	0x37354443
24019244:	37354400 	.word	0x37354400
24019248:	2e85a308 	.word	0x2e85a308
2401924c:	43490f80 	.word	0x43490f80
24019250:	3f22f984 	.word	0x3f22f984
24019254:	240330e8 	.word	0x240330e8
24019258:	2e85a300 	.word	0x2e85a300
2401925c:	248d3132 	.word	0x248d3132
24019260:	43800000 	.word	0x43800000
24019264:	24033168 	.word	0x24033168

24019268 <__kernel_rem_pio2>:
24019268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401926c:	ed2d 8b06 	vpush	{d8-d10}
24019270:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24019274:	460f      	mov	r7, r1
24019276:	9002      	str	r0, [sp, #8]
24019278:	49c5      	ldr	r1, [pc, #788]	; (24019590 <__kernel_rem_pio2+0x328>)
2401927a:	98a2      	ldr	r0, [sp, #648]	; 0x288
2401927c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
24019280:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24019284:	9301      	str	r3, [sp, #4]
24019286:	f112 0f14 	cmn.w	r2, #20
2401928a:	bfa8      	it	ge
2401928c:	2018      	movge	r0, #24
2401928e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
24019292:	bfb8      	it	lt
24019294:	2000      	movlt	r0, #0
24019296:	f06f 0417 	mvn.w	r4, #23
2401929a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 24019578 <__kernel_rem_pio2+0x310>
2401929e:	bfa4      	itt	ge
240192a0:	f1a2 0a03 	subge.w	sl, r2, #3
240192a4:	fb9a f0f0 	sdivge	r0, sl, r0
240192a8:	fb00 4404 	mla	r4, r0, r4, r4
240192ac:	1a46      	subs	r6, r0, r1
240192ae:	4414      	add	r4, r2
240192b0:	eb09 0c01 	add.w	ip, r9, r1
240192b4:	ad1a      	add	r5, sp, #104	; 0x68
240192b6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
240192ba:	2200      	movs	r2, #0
240192bc:	4562      	cmp	r2, ip
240192be:	dd10      	ble.n	240192e2 <__kernel_rem_pio2+0x7a>
240192c0:	9a01      	ldr	r2, [sp, #4]
240192c2:	ab1a      	add	r3, sp, #104	; 0x68
240192c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240192c8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
240192cc:	f04f 0c00 	mov.w	ip, #0
240192d0:	45cc      	cmp	ip, r9
240192d2:	dc26      	bgt.n	24019322 <__kernel_rem_pio2+0xba>
240192d4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 24019578 <__kernel_rem_pio2+0x310>
240192d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
240192dc:	4616      	mov	r6, r2
240192de:	2500      	movs	r5, #0
240192e0:	e015      	b.n	2401930e <__kernel_rem_pio2+0xa6>
240192e2:	42d6      	cmn	r6, r2
240192e4:	d409      	bmi.n	240192fa <__kernel_rem_pio2+0x92>
240192e6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
240192ea:	ee07 3a90 	vmov	s15, r3
240192ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
240192f2:	eca5 7b02 	vstmia	r5!, {d7}
240192f6:	3201      	adds	r2, #1
240192f8:	e7e0      	b.n	240192bc <__kernel_rem_pio2+0x54>
240192fa:	eeb0 7b46 	vmov.f64	d7, d6
240192fe:	e7f8      	b.n	240192f2 <__kernel_rem_pio2+0x8a>
24019300:	ecb8 5b02 	vldmia	r8!, {d5}
24019304:	ed96 6b00 	vldr	d6, [r6]
24019308:	3501      	adds	r5, #1
2401930a:	eea5 7b06 	vfma.f64	d7, d5, d6
2401930e:	428d      	cmp	r5, r1
24019310:	f1a6 0608 	sub.w	r6, r6, #8
24019314:	ddf4      	ble.n	24019300 <__kernel_rem_pio2+0x98>
24019316:	ecaa 7b02 	vstmia	sl!, {d7}
2401931a:	f10c 0c01 	add.w	ip, ip, #1
2401931e:	3208      	adds	r2, #8
24019320:	e7d6      	b.n	240192d0 <__kernel_rem_pio2+0x68>
24019322:	ab06      	add	r3, sp, #24
24019324:	ed9f 9b96 	vldr	d9, [pc, #600]	; 24019580 <__kernel_rem_pio2+0x318>
24019328:	ed9f ab97 	vldr	d10, [pc, #604]	; 24019588 <__kernel_rem_pio2+0x320>
2401932c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
24019330:	9303      	str	r3, [sp, #12]
24019332:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
24019336:	464d      	mov	r5, r9
24019338:	00eb      	lsls	r3, r5, #3
2401933a:	9304      	str	r3, [sp, #16]
2401933c:	ab92      	add	r3, sp, #584	; 0x248
2401933e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24019342:	f10d 0b18 	add.w	fp, sp, #24
24019346:	ab6a      	add	r3, sp, #424	; 0x1a8
24019348:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401934c:	465e      	mov	r6, fp
2401934e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24019352:	4628      	mov	r0, r5
24019354:	2800      	cmp	r0, #0
24019356:	f1a2 0208 	sub.w	r2, r2, #8
2401935a:	dc4c      	bgt.n	240193f6 <__kernel_rem_pio2+0x18e>
2401935c:	4620      	mov	r0, r4
2401935e:	9105      	str	r1, [sp, #20]
24019360:	f000 ff06 	bl	2401a170 <scalbn>
24019364:	eeb0 8b40 	vmov.f64	d8, d0
24019368:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
2401936c:	ee28 0b00 	vmul.f64	d0, d8, d0
24019370:	f000 fe8a 	bl	2401a088 <floor>
24019374:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24019378:	eea0 8b47 	vfms.f64	d8, d0, d7
2401937c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24019380:	2c00      	cmp	r4, #0
24019382:	eeb8 0be7 	vcvt.f64.s32	d0, s15
24019386:	ee17 8a90 	vmov	r8, s15
2401938a:	ee38 8b40 	vsub.f64	d8, d8, d0
2401938e:	9905      	ldr	r1, [sp, #20]
24019390:	dd43      	ble.n	2401941a <__kernel_rem_pio2+0x1b2>
24019392:	1e68      	subs	r0, r5, #1
24019394:	ab06      	add	r3, sp, #24
24019396:	f1c4 0c18 	rsb	ip, r4, #24
2401939a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
2401939e:	fa46 f20c 	asr.w	r2, r6, ip
240193a2:	4490      	add	r8, r2
240193a4:	fa02 f20c 	lsl.w	r2, r2, ip
240193a8:	1ab6      	subs	r6, r6, r2
240193aa:	f1c4 0217 	rsb	r2, r4, #23
240193ae:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
240193b2:	4116      	asrs	r6, r2
240193b4:	2e00      	cmp	r6, #0
240193b6:	dd3f      	ble.n	24019438 <__kernel_rem_pio2+0x1d0>
240193b8:	f04f 0c00 	mov.w	ip, #0
240193bc:	f108 0801 	add.w	r8, r8, #1
240193c0:	4660      	mov	r0, ip
240193c2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
240193c6:	4565      	cmp	r5, ip
240193c8:	dc6e      	bgt.n	240194a8 <__kernel_rem_pio2+0x240>
240193ca:	2c00      	cmp	r4, #0
240193cc:	dd04      	ble.n	240193d8 <__kernel_rem_pio2+0x170>
240193ce:	2c01      	cmp	r4, #1
240193d0:	d07f      	beq.n	240194d2 <__kernel_rem_pio2+0x26a>
240193d2:	2c02      	cmp	r4, #2
240193d4:	f000 8087 	beq.w	240194e6 <__kernel_rem_pio2+0x27e>
240193d8:	2e02      	cmp	r6, #2
240193da:	d12d      	bne.n	24019438 <__kernel_rem_pio2+0x1d0>
240193dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
240193e0:	ee30 8b48 	vsub.f64	d8, d0, d8
240193e4:	b340      	cbz	r0, 24019438 <__kernel_rem_pio2+0x1d0>
240193e6:	4620      	mov	r0, r4
240193e8:	9105      	str	r1, [sp, #20]
240193ea:	f000 fec1 	bl	2401a170 <scalbn>
240193ee:	9905      	ldr	r1, [sp, #20]
240193f0:	ee38 8b40 	vsub.f64	d8, d8, d0
240193f4:	e020      	b.n	24019438 <__kernel_rem_pio2+0x1d0>
240193f6:	ee20 7b09 	vmul.f64	d7, d0, d9
240193fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
240193fe:	3801      	subs	r0, #1
24019400:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24019404:	eea7 0b4a 	vfms.f64	d0, d7, d10
24019408:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401940c:	eca6 0a01 	vstmia	r6!, {s0}
24019410:	ed92 0b00 	vldr	d0, [r2]
24019414:	ee37 0b00 	vadd.f64	d0, d7, d0
24019418:	e79c      	b.n	24019354 <__kernel_rem_pio2+0xec>
2401941a:	d105      	bne.n	24019428 <__kernel_rem_pio2+0x1c0>
2401941c:	1e6a      	subs	r2, r5, #1
2401941e:	ab06      	add	r3, sp, #24
24019420:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24019424:	15f6      	asrs	r6, r6, #23
24019426:	e7c5      	b.n	240193b4 <__kernel_rem_pio2+0x14c>
24019428:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401942c:	eeb4 8bc7 	vcmpe.f64	d8, d7
24019430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019434:	da36      	bge.n	240194a4 <__kernel_rem_pio2+0x23c>
24019436:	2600      	movs	r6, #0
24019438:	eeb5 8b40 	vcmp.f64	d8, #0.0
2401943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019440:	f040 80aa 	bne.w	24019598 <__kernel_rem_pio2+0x330>
24019444:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24019448:	4658      	mov	r0, fp
2401944a:	2200      	movs	r2, #0
2401944c:	4548      	cmp	r0, r9
2401944e:	da52      	bge.n	240194f6 <__kernel_rem_pio2+0x28e>
24019450:	2a00      	cmp	r2, #0
24019452:	f000 8081 	beq.w	24019558 <__kernel_rem_pio2+0x2f0>
24019456:	ab06      	add	r3, sp, #24
24019458:	3c18      	subs	r4, #24
2401945a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
2401945e:	2b00      	cmp	r3, #0
24019460:	f000 8087 	beq.w	24019572 <__kernel_rem_pio2+0x30a>
24019464:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019468:	4620      	mov	r0, r4
2401946a:	f000 fe81 	bl	2401a170 <scalbn>
2401946e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
24019472:	ed9f 6b43 	vldr	d6, [pc, #268]	; 24019580 <__kernel_rem_pio2+0x318>
24019476:	a96a      	add	r1, sp, #424	; 0x1a8
24019478:	f103 0208 	add.w	r2, r3, #8
2401947c:	1888      	adds	r0, r1, r2
2401947e:	4659      	mov	r1, fp
24019480:	2900      	cmp	r1, #0
24019482:	f280 80b7 	bge.w	240195f4 <__kernel_rem_pio2+0x38c>
24019486:	4659      	mov	r1, fp
24019488:	2900      	cmp	r1, #0
2401948a:	f2c0 80d5 	blt.w	24019638 <__kernel_rem_pio2+0x3d0>
2401948e:	a86a      	add	r0, sp, #424	; 0x1a8
24019490:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
24019494:	ed9f 7b38 	vldr	d7, [pc, #224]	; 24019578 <__kernel_rem_pio2+0x310>
24019498:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 24019594 <__kernel_rem_pio2+0x32c>
2401949c:	2400      	movs	r4, #0
2401949e:	ebab 0001 	sub.w	r0, fp, r1
240194a2:	e0be      	b.n	24019622 <__kernel_rem_pio2+0x3ba>
240194a4:	2602      	movs	r6, #2
240194a6:	e787      	b.n	240193b8 <__kernel_rem_pio2+0x150>
240194a8:	f8db 2000 	ldr.w	r2, [fp]
240194ac:	b958      	cbnz	r0, 240194c6 <__kernel_rem_pio2+0x25e>
240194ae:	b122      	cbz	r2, 240194ba <__kernel_rem_pio2+0x252>
240194b0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
240194b4:	f8cb 2000 	str.w	r2, [fp]
240194b8:	2201      	movs	r2, #1
240194ba:	f10c 0c01 	add.w	ip, ip, #1
240194be:	f10b 0b04 	add.w	fp, fp, #4
240194c2:	4610      	mov	r0, r2
240194c4:	e77f      	b.n	240193c6 <__kernel_rem_pio2+0x15e>
240194c6:	ebae 0202 	sub.w	r2, lr, r2
240194ca:	f8cb 2000 	str.w	r2, [fp]
240194ce:	4602      	mov	r2, r0
240194d0:	e7f3      	b.n	240194ba <__kernel_rem_pio2+0x252>
240194d2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
240194d6:	ab06      	add	r3, sp, #24
240194d8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
240194dc:	f3c2 0216 	ubfx	r2, r2, #0, #23
240194e0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
240194e4:	e778      	b.n	240193d8 <__kernel_rem_pio2+0x170>
240194e6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
240194ea:	ab06      	add	r3, sp, #24
240194ec:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
240194f0:	f3c2 0215 	ubfx	r2, r2, #0, #22
240194f4:	e7f4      	b.n	240194e0 <__kernel_rem_pio2+0x278>
240194f6:	ab06      	add	r3, sp, #24
240194f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
240194fc:	3801      	subs	r0, #1
240194fe:	431a      	orrs	r2, r3
24019500:	e7a4      	b.n	2401944c <__kernel_rem_pio2+0x1e4>
24019502:	f10c 0c01 	add.w	ip, ip, #1
24019506:	f852 0d04 	ldr.w	r0, [r2, #-4]!
2401950a:	2800      	cmp	r0, #0
2401950c:	d0f9      	beq.n	24019502 <__kernel_rem_pio2+0x29a>
2401950e:	9b04      	ldr	r3, [sp, #16]
24019510:	f503 7312 	add.w	r3, r3, #584	; 0x248
24019514:	eb0d 0203 	add.w	r2, sp, r3
24019518:	9b01      	ldr	r3, [sp, #4]
2401951a:	18e8      	adds	r0, r5, r3
2401951c:	ab1a      	add	r3, sp, #104	; 0x68
2401951e:	1c6e      	adds	r6, r5, #1
24019520:	3a98      	subs	r2, #152	; 0x98
24019522:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
24019526:	4465      	add	r5, ip
24019528:	42b5      	cmp	r5, r6
2401952a:	f6ff af05 	blt.w	24019338 <__kernel_rem_pio2+0xd0>
2401952e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
24019532:	f8dd e008 	ldr.w	lr, [sp, #8]
24019536:	ee07 3a90 	vmov	s15, r3
2401953a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401953e:	f04f 0c00 	mov.w	ip, #0
24019542:	eca0 7b02 	vstmia	r0!, {d7}
24019546:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24019578 <__kernel_rem_pio2+0x310>
2401954a:	4680      	mov	r8, r0
2401954c:	458c      	cmp	ip, r1
2401954e:	dd07      	ble.n	24019560 <__kernel_rem_pio2+0x2f8>
24019550:	eca2 7b02 	vstmia	r2!, {d7}
24019554:	3601      	adds	r6, #1
24019556:	e7e7      	b.n	24019528 <__kernel_rem_pio2+0x2c0>
24019558:	9a03      	ldr	r2, [sp, #12]
2401955a:	f04f 0c01 	mov.w	ip, #1
2401955e:	e7d2      	b.n	24019506 <__kernel_rem_pio2+0x29e>
24019560:	ecbe 5b02 	vldmia	lr!, {d5}
24019564:	ed38 6b02 	vldmdb	r8!, {d6}
24019568:	f10c 0c01 	add.w	ip, ip, #1
2401956c:	eea5 7b06 	vfma.f64	d7, d5, d6
24019570:	e7ec      	b.n	2401954c <__kernel_rem_pio2+0x2e4>
24019572:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24019576:	e76e      	b.n	24019456 <__kernel_rem_pio2+0x1ee>
	...
24019584:	3e700000 	.word	0x3e700000
24019588:	00000000 	.word	0x00000000
2401958c:	41700000 	.word	0x41700000
24019590:	240334c0 	.word	0x240334c0
24019594:	24033480 	.word	0x24033480
24019598:	4260      	negs	r0, r4
2401959a:	eeb0 0b48 	vmov.f64	d0, d8
2401959e:	f000 fde7 	bl	2401a170 <scalbn>
240195a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24019780 <__kernel_rem_pio2+0x518>
240195a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
240195aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240195ae:	db18      	blt.n	240195e2 <__kernel_rem_pio2+0x37a>
240195b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24019788 <__kernel_rem_pio2+0x520>
240195b4:	ee20 7b07 	vmul.f64	d7, d0, d7
240195b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
240195bc:	aa06      	add	r2, sp, #24
240195be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
240195c2:	eea5 0b46 	vfms.f64	d0, d5, d6
240195c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
240195ca:	f105 0b01 	add.w	fp, r5, #1
240195ce:	ee10 3a10 	vmov	r3, s0
240195d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
240195d6:	ee17 3a10 	vmov	r3, s14
240195da:	3418      	adds	r4, #24
240195dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
240195e0:	e740      	b.n	24019464 <__kernel_rem_pio2+0x1fc>
240195e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
240195e6:	aa06      	add	r2, sp, #24
240195e8:	ee10 3a10 	vmov	r3, s0
240195ec:	46ab      	mov	fp, r5
240195ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
240195f2:	e737      	b.n	24019464 <__kernel_rem_pio2+0x1fc>
240195f4:	ac06      	add	r4, sp, #24
240195f6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
240195fa:	9401      	str	r4, [sp, #4]
240195fc:	ee07 4a90 	vmov	s15, r4
24019600:	3901      	subs	r1, #1
24019602:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019606:	ee27 7b00 	vmul.f64	d7, d7, d0
2401960a:	ee20 0b06 	vmul.f64	d0, d0, d6
2401960e:	ed20 7b02 	vstmdb	r0!, {d7}
24019612:	e735      	b.n	24019480 <__kernel_rem_pio2+0x218>
24019614:	ecbc 5b02 	vldmia	ip!, {d5}
24019618:	ecb5 6b02 	vldmia	r5!, {d6}
2401961c:	3401      	adds	r4, #1
2401961e:	eea5 7b06 	vfma.f64	d7, d5, d6
24019622:	454c      	cmp	r4, r9
24019624:	dc01      	bgt.n	2401962a <__kernel_rem_pio2+0x3c2>
24019626:	4284      	cmp	r4, r0
24019628:	ddf4      	ble.n	24019614 <__kernel_rem_pio2+0x3ac>
2401962a:	ac42      	add	r4, sp, #264	; 0x108
2401962c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24019630:	ed80 7b00 	vstr	d7, [r0]
24019634:	3901      	subs	r1, #1
24019636:	e727      	b.n	24019488 <__kernel_rem_pio2+0x220>
24019638:	99a2      	ldr	r1, [sp, #648]	; 0x288
2401963a:	2902      	cmp	r1, #2
2401963c:	dc0a      	bgt.n	24019654 <__kernel_rem_pio2+0x3ec>
2401963e:	2900      	cmp	r1, #0
24019640:	dc2c      	bgt.n	2401969c <__kernel_rem_pio2+0x434>
24019642:	d045      	beq.n	240196d0 <__kernel_rem_pio2+0x468>
24019644:	f008 0007 	and.w	r0, r8, #7
24019648:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
2401964c:	ecbd 8b06 	vpop	{d8-d10}
24019650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24019654:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24019656:	2a03      	cmp	r2, #3
24019658:	d1f4      	bne.n	24019644 <__kernel_rem_pio2+0x3dc>
2401965a:	aa42      	add	r2, sp, #264	; 0x108
2401965c:	4413      	add	r3, r2
2401965e:	461a      	mov	r2, r3
24019660:	4619      	mov	r1, r3
24019662:	4658      	mov	r0, fp
24019664:	2800      	cmp	r0, #0
24019666:	f1a1 0108 	sub.w	r1, r1, #8
2401966a:	dc54      	bgt.n	24019716 <__kernel_rem_pio2+0x4ae>
2401966c:	4659      	mov	r1, fp
2401966e:	2901      	cmp	r1, #1
24019670:	f1a2 0208 	sub.w	r2, r2, #8
24019674:	dc5f      	bgt.n	24019736 <__kernel_rem_pio2+0x4ce>
24019676:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24019790 <__kernel_rem_pio2+0x528>
2401967a:	3308      	adds	r3, #8
2401967c:	f1bb 0f01 	cmp.w	fp, #1
24019680:	dc69      	bgt.n	24019756 <__kernel_rem_pio2+0x4ee>
24019682:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24019686:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
2401968a:	2e00      	cmp	r6, #0
2401968c:	d16a      	bne.n	24019764 <__kernel_rem_pio2+0x4fc>
2401968e:	ed87 5b00 	vstr	d5, [r7]
24019692:	ed87 6b02 	vstr	d6, [r7, #8]
24019696:	ed87 7b04 	vstr	d7, [r7, #16]
2401969a:	e7d3      	b.n	24019644 <__kernel_rem_pio2+0x3dc>
2401969c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 24019790 <__kernel_rem_pio2+0x528>
240196a0:	ab42      	add	r3, sp, #264	; 0x108
240196a2:	441a      	add	r2, r3
240196a4:	465b      	mov	r3, fp
240196a6:	2b00      	cmp	r3, #0
240196a8:	da26      	bge.n	240196f8 <__kernel_rem_pio2+0x490>
240196aa:	b35e      	cbz	r6, 24019704 <__kernel_rem_pio2+0x49c>
240196ac:	eeb1 7b46 	vneg.f64	d7, d6
240196b0:	ed87 7b00 	vstr	d7, [r7]
240196b4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
240196b8:	aa44      	add	r2, sp, #272	; 0x110
240196ba:	2301      	movs	r3, #1
240196bc:	ee37 7b46 	vsub.f64	d7, d7, d6
240196c0:	459b      	cmp	fp, r3
240196c2:	da22      	bge.n	2401970a <__kernel_rem_pio2+0x4a2>
240196c4:	b10e      	cbz	r6, 240196ca <__kernel_rem_pio2+0x462>
240196c6:	eeb1 7b47 	vneg.f64	d7, d7
240196ca:	ed87 7b02 	vstr	d7, [r7, #8]
240196ce:	e7b9      	b.n	24019644 <__kernel_rem_pio2+0x3dc>
240196d0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24019790 <__kernel_rem_pio2+0x528>
240196d4:	ab42      	add	r3, sp, #264	; 0x108
240196d6:	441a      	add	r2, r3
240196d8:	f1bb 0f00 	cmp.w	fp, #0
240196dc:	da05      	bge.n	240196ea <__kernel_rem_pio2+0x482>
240196de:	b10e      	cbz	r6, 240196e4 <__kernel_rem_pio2+0x47c>
240196e0:	eeb1 7b47 	vneg.f64	d7, d7
240196e4:	ed87 7b00 	vstr	d7, [r7]
240196e8:	e7ac      	b.n	24019644 <__kernel_rem_pio2+0x3dc>
240196ea:	ed32 6b02 	vldmdb	r2!, {d6}
240196ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
240196f2:	ee37 7b06 	vadd.f64	d7, d7, d6
240196f6:	e7ef      	b.n	240196d8 <__kernel_rem_pio2+0x470>
240196f8:	ed32 7b02 	vldmdb	r2!, {d7}
240196fc:	3b01      	subs	r3, #1
240196fe:	ee36 6b07 	vadd.f64	d6, d6, d7
24019702:	e7d0      	b.n	240196a6 <__kernel_rem_pio2+0x43e>
24019704:	eeb0 7b46 	vmov.f64	d7, d6
24019708:	e7d2      	b.n	240196b0 <__kernel_rem_pio2+0x448>
2401970a:	ecb2 6b02 	vldmia	r2!, {d6}
2401970e:	3301      	adds	r3, #1
24019710:	ee37 7b06 	vadd.f64	d7, d7, d6
24019714:	e7d4      	b.n	240196c0 <__kernel_rem_pio2+0x458>
24019716:	ed91 7b00 	vldr	d7, [r1]
2401971a:	ed91 5b02 	vldr	d5, [r1, #8]
2401971e:	3801      	subs	r0, #1
24019720:	ee37 6b05 	vadd.f64	d6, d7, d5
24019724:	ee37 7b46 	vsub.f64	d7, d7, d6
24019728:	ed81 6b00 	vstr	d6, [r1]
2401972c:	ee37 7b05 	vadd.f64	d7, d7, d5
24019730:	ed81 7b02 	vstr	d7, [r1, #8]
24019734:	e796      	b.n	24019664 <__kernel_rem_pio2+0x3fc>
24019736:	ed92 7b00 	vldr	d7, [r2]
2401973a:	ed92 5b02 	vldr	d5, [r2, #8]
2401973e:	3901      	subs	r1, #1
24019740:	ee37 6b05 	vadd.f64	d6, d7, d5
24019744:	ee37 7b46 	vsub.f64	d7, d7, d6
24019748:	ed82 6b00 	vstr	d6, [r2]
2401974c:	ee37 7b05 	vadd.f64	d7, d7, d5
24019750:	ed82 7b02 	vstr	d7, [r2, #8]
24019754:	e78b      	b.n	2401966e <__kernel_rem_pio2+0x406>
24019756:	ed33 6b02 	vldmdb	r3!, {d6}
2401975a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401975e:	ee37 7b06 	vadd.f64	d7, d7, d6
24019762:	e78b      	b.n	2401967c <__kernel_rem_pio2+0x414>
24019764:	eeb1 5b45 	vneg.f64	d5, d5
24019768:	eeb1 6b46 	vneg.f64	d6, d6
2401976c:	ed87 5b00 	vstr	d5, [r7]
24019770:	eeb1 7b47 	vneg.f64	d7, d7
24019774:	ed87 6b02 	vstr	d6, [r7, #8]
24019778:	e78d      	b.n	24019696 <__kernel_rem_pio2+0x42e>
2401977a:	bf00      	nop
2401977c:	f3af 8000 	nop.w
24019780:	00000000 	.word	0x00000000
24019784:	41700000 	.word	0x41700000
24019788:	00000000 	.word	0x00000000
2401978c:	3e700000 	.word	0x3e700000
	...

24019798 <__kernel_tan>:
24019798:	eeb0 7b40 	vmov.f64	d7, d0
2401979c:	ee17 3a90 	vmov	r3, s15
240197a0:	4987      	ldr	r1, [pc, #540]	; (240199c0 <__kernel_tan+0x228>)
240197a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240197a6:	428a      	cmp	r2, r1
240197a8:	b510      	push	{r4, lr}
240197aa:	dc33      	bgt.n	24019814 <__kernel_tan+0x7c>
240197ac:	eefd 6bc0 	vcvt.s32.f64	s13, d0
240197b0:	ee16 1a90 	vmov	r1, s13
240197b4:	2900      	cmp	r1, #0
240197b6:	d143      	bne.n	24019840 <__kernel_tan+0xa8>
240197b8:	ee10 4a10 	vmov	r4, s0
240197bc:	1c43      	adds	r3, r0, #1
240197be:	4323      	orrs	r3, r4
240197c0:	4313      	orrs	r3, r2
240197c2:	d108      	bne.n	240197d6 <__kernel_tan+0x3e>
240197c4:	f000 fc56 	bl	2401a074 <fabs>
240197c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
240197cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
240197d0:	eeb0 0b47 	vmov.f64	d0, d7
240197d4:	bd10      	pop	{r4, pc}
240197d6:	2801      	cmp	r0, #1
240197d8:	d0fa      	beq.n	240197d0 <__kernel_tan+0x38>
240197da:	ee30 6b01 	vadd.f64	d6, d0, d1
240197de:	ec53 2b16 	vmov	r2, r3, d6
240197e2:	460a      	mov	r2, r1
240197e4:	ec43 2b15 	vmov	d5, r2, r3
240197e8:	ee35 7b40 	vsub.f64	d7, d5, d0
240197ec:	ee31 1b47 	vsub.f64	d1, d1, d7
240197f0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
240197f4:	ee87 4b06 	vdiv.f64	d4, d7, d6
240197f8:	ec53 2b14 	vmov	r2, r3, d4
240197fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24019800:	460a      	mov	r2, r1
24019802:	ec43 2b17 	vmov	d7, r2, r3
24019806:	eea5 6b07 	vfma.f64	d6, d5, d7
2401980a:	eea1 6b07 	vfma.f64	d6, d1, d7
2401980e:	eea6 7b04 	vfma.f64	d7, d6, d4
24019812:	e7dd      	b.n	240197d0 <__kernel_tan+0x38>
24019814:	496b      	ldr	r1, [pc, #428]	; (240199c4 <__kernel_tan+0x22c>)
24019816:	428a      	cmp	r2, r1
24019818:	dd12      	ble.n	24019840 <__kernel_tan+0xa8>
2401981a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 24019940 <__kernel_tan+0x1a8>
2401981e:	2b00      	cmp	r3, #0
24019820:	bfb8      	it	lt
24019822:	eeb1 7b40 	vneglt.f64	d7, d0
24019826:	ee36 7b47 	vsub.f64	d7, d6, d7
2401982a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 24019948 <__kernel_tan+0x1b0>
2401982e:	bfb8      	it	lt
24019830:	eeb1 1b41 	vneglt.f64	d1, d1
24019834:	ee36 1b41 	vsub.f64	d1, d6, d1
24019838:	ee31 7b07 	vadd.f64	d7, d1, d7
2401983c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 24019950 <__kernel_tan+0x1b8>
24019840:	ee27 5b07 	vmul.f64	d5, d7, d7
24019844:	ee25 6b05 	vmul.f64	d6, d5, d5
24019848:	ed9f 3b43 	vldr	d3, [pc, #268]	; 24019958 <__kernel_tan+0x1c0>
2401984c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24019960 <__kernel_tan+0x1c8>
24019850:	eea6 4b03 	vfma.f64	d4, d6, d3
24019854:	ed9f 3b44 	vldr	d3, [pc, #272]	; 24019968 <__kernel_tan+0x1d0>
24019858:	eea4 3b06 	vfma.f64	d3, d4, d6
2401985c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24019970 <__kernel_tan+0x1d8>
24019860:	eea3 4b06 	vfma.f64	d4, d3, d6
24019864:	ed9f 3b44 	vldr	d3, [pc, #272]	; 24019978 <__kernel_tan+0x1e0>
24019868:	eea4 3b06 	vfma.f64	d3, d4, d6
2401986c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24019980 <__kernel_tan+0x1e8>
24019870:	ed9f 2b45 	vldr	d2, [pc, #276]	; 24019988 <__kernel_tan+0x1f0>
24019874:	eea3 4b06 	vfma.f64	d4, d3, d6
24019878:	ed9f 3b45 	vldr	d3, [pc, #276]	; 24019990 <__kernel_tan+0x1f8>
2401987c:	eea6 3b02 	vfma.f64	d3, d6, d2
24019880:	ed9f 2b45 	vldr	d2, [pc, #276]	; 24019998 <__kernel_tan+0x200>
24019884:	eea3 2b06 	vfma.f64	d2, d3, d6
24019888:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240199a0 <__kernel_tan+0x208>
2401988c:	eea2 3b06 	vfma.f64	d3, d2, d6
24019890:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240199a8 <__kernel_tan+0x210>
24019894:	eea3 2b06 	vfma.f64	d2, d3, d6
24019898:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240199b0 <__kernel_tan+0x218>
2401989c:	4949      	ldr	r1, [pc, #292]	; (240199c4 <__kernel_tan+0x22c>)
2401989e:	eea2 3b06 	vfma.f64	d3, d2, d6
240198a2:	ee27 2b05 	vmul.f64	d2, d7, d5
240198a6:	eeb0 6b44 	vmov.f64	d6, d4
240198aa:	eeb0 4b41 	vmov.f64	d4, d1
240198ae:	eea3 6b05 	vfma.f64	d6, d3, d5
240198b2:	eea6 4b02 	vfma.f64	d4, d6, d2
240198b6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 240199b8 <__kernel_tan+0x220>
240198ba:	eea4 1b05 	vfma.f64	d1, d4, d5
240198be:	428a      	cmp	r2, r1
240198c0:	eea2 1b06 	vfma.f64	d1, d2, d6
240198c4:	ee37 5b01 	vadd.f64	d5, d7, d1
240198c8:	dd1d      	ble.n	24019906 <__kernel_tan+0x16e>
240198ca:	ee25 3b05 	vmul.f64	d3, d5, d5
240198ce:	179b      	asrs	r3, r3, #30
240198d0:	ee06 0a90 	vmov	s13, r0
240198d4:	f003 0302 	and.w	r3, r3, #2
240198d8:	f1c3 0301 	rsb	r3, r3, #1
240198dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
240198e0:	ee35 5b06 	vadd.f64	d5, d5, d6
240198e4:	ee83 4b05 	vdiv.f64	d4, d3, d5
240198e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
240198ec:	ee34 1b41 	vsub.f64	d1, d4, d1
240198f0:	ee37 7b41 	vsub.f64	d7, d7, d1
240198f4:	eea7 6b45 	vfms.f64	d6, d7, d5
240198f8:	ee07 3a10 	vmov	s14, r3
240198fc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24019900:	ee27 7b06 	vmul.f64	d7, d7, d6
24019904:	e764      	b.n	240197d0 <__kernel_tan+0x38>
24019906:	2801      	cmp	r0, #1
24019908:	d016      	beq.n	24019938 <__kernel_tan+0x1a0>
2401990a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401990e:	ec51 0b15 	vmov	r0, r1, d5
24019912:	2000      	movs	r0, #0
24019914:	ec41 0b13 	vmov	d3, r0, r1
24019918:	ee33 7b47 	vsub.f64	d7, d3, d7
2401991c:	ee31 1b47 	vsub.f64	d1, d1, d7
24019920:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
24019924:	ee87 4b05 	vdiv.f64	d4, d7, d5
24019928:	ec53 2b14 	vmov	r2, r3, d4
2401992c:	4602      	mov	r2, r0
2401992e:	ec43 2b17 	vmov	d7, r2, r3
24019932:	eea3 6b07 	vfma.f64	d6, d3, d7
24019936:	e768      	b.n	2401980a <__kernel_tan+0x72>
24019938:	eeb0 7b45 	vmov.f64	d7, d5
2401993c:	e748      	b.n	240197d0 <__kernel_tan+0x38>
2401993e:	bf00      	nop
24019940:	54442d18 	.word	0x54442d18
24019944:	3fe921fb 	.word	0x3fe921fb
24019948:	33145c07 	.word	0x33145c07
2401994c:	3c81a626 	.word	0x3c81a626
	...
24019958:	db605373 	.word	0xdb605373
2401995c:	bef375cb 	.word	0xbef375cb
24019960:	a03792a6 	.word	0xa03792a6
24019964:	3f147e88 	.word	0x3f147e88
24019968:	f2f26501 	.word	0xf2f26501
2401996c:	3f4344d8 	.word	0x3f4344d8
24019970:	c9560328 	.word	0xc9560328
24019974:	3f6d6d22 	.word	0x3f6d6d22
24019978:	8406d637 	.word	0x8406d637
2401997c:	3f9664f4 	.word	0x3f9664f4
24019980:	1110fe7a 	.word	0x1110fe7a
24019984:	3fc11111 	.word	0x3fc11111
24019988:	74bf7ad4 	.word	0x74bf7ad4
2401998c:	3efb2a70 	.word	0x3efb2a70
24019990:	32f0a7e9 	.word	0x32f0a7e9
24019994:	3f12b80f 	.word	0x3f12b80f
24019998:	1a8d1068 	.word	0x1a8d1068
2401999c:	3f3026f7 	.word	0x3f3026f7
240199a0:	fee08315 	.word	0xfee08315
240199a4:	3f57dbc8 	.word	0x3f57dbc8
240199a8:	e96e8493 	.word	0xe96e8493
240199ac:	3f8226e3 	.word	0x3f8226e3
240199b0:	1bb341fe 	.word	0x1bb341fe
240199b4:	3faba1ba 	.word	0x3faba1ba
240199b8:	55555563 	.word	0x55555563
240199bc:	3fd55555 	.word	0x3fd55555
240199c0:	3e2fffff 	.word	0x3e2fffff
240199c4:	3fe59427 	.word	0x3fe59427

240199c8 <__kernel_rem_pio2f>:
240199c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240199cc:	ed2d 8b04 	vpush	{d8-d9}
240199d0:	b0d9      	sub	sp, #356	; 0x164
240199d2:	4688      	mov	r8, r1
240199d4:	9002      	str	r0, [sp, #8]
240199d6:	49bb      	ldr	r1, [pc, #748]	; (24019cc4 <__kernel_rem_pio2f+0x2fc>)
240199d8:	9866      	ldr	r0, [sp, #408]	; 0x198
240199da:	9301      	str	r3, [sp, #4]
240199dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
240199e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
240199e4:	1e59      	subs	r1, r3, #1
240199e6:	1d13      	adds	r3, r2, #4
240199e8:	db27      	blt.n	24019a3a <__kernel_rem_pio2f+0x72>
240199ea:	f1b2 0b03 	subs.w	fp, r2, #3
240199ee:	bf48      	it	mi
240199f0:	f102 0b04 	addmi.w	fp, r2, #4
240199f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
240199f8:	1c45      	adds	r5, r0, #1
240199fa:	00ec      	lsls	r4, r5, #3
240199fc:	1a47      	subs	r7, r0, r1
240199fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019a02:	9403      	str	r4, [sp, #12]
24019a04:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
24019a08:	eb0a 0c01 	add.w	ip, sl, r1
24019a0c:	ae1c      	add	r6, sp, #112	; 0x70
24019a0e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
24019a12:	2400      	movs	r4, #0
24019a14:	4564      	cmp	r4, ip
24019a16:	dd12      	ble.n	24019a3e <__kernel_rem_pio2f+0x76>
24019a18:	9b01      	ldr	r3, [sp, #4]
24019a1a:	ac1c      	add	r4, sp, #112	; 0x70
24019a1c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24019a20:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
24019a24:	f04f 0c00 	mov.w	ip, #0
24019a28:	45d4      	cmp	ip, sl
24019a2a:	dc27      	bgt.n	24019a7c <__kernel_rem_pio2f+0xb4>
24019a2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
24019a30:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019a34:	4627      	mov	r7, r4
24019a36:	2600      	movs	r6, #0
24019a38:	e016      	b.n	24019a68 <__kernel_rem_pio2f+0xa0>
24019a3a:	2000      	movs	r0, #0
24019a3c:	e7dc      	b.n	240199f8 <__kernel_rem_pio2f+0x30>
24019a3e:	42e7      	cmn	r7, r4
24019a40:	bf5d      	ittte	pl
24019a42:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
24019a46:	ee07 3a90 	vmovpl	s15, r3
24019a4a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
24019a4e:	eef0 7a47 	vmovmi.f32	s15, s14
24019a52:	ece6 7a01 	vstmia	r6!, {s15}
24019a56:	3401      	adds	r4, #1
24019a58:	e7dc      	b.n	24019a14 <__kernel_rem_pio2f+0x4c>
24019a5a:	ecf9 6a01 	vldmia	r9!, {s13}
24019a5e:	ed97 7a00 	vldr	s14, [r7]
24019a62:	eee6 7a87 	vfma.f32	s15, s13, s14
24019a66:	3601      	adds	r6, #1
24019a68:	428e      	cmp	r6, r1
24019a6a:	f1a7 0704 	sub.w	r7, r7, #4
24019a6e:	ddf4      	ble.n	24019a5a <__kernel_rem_pio2f+0x92>
24019a70:	eceb 7a01 	vstmia	fp!, {s15}
24019a74:	f10c 0c01 	add.w	ip, ip, #1
24019a78:	3404      	adds	r4, #4
24019a7a:	e7d5      	b.n	24019a28 <__kernel_rem_pio2f+0x60>
24019a7c:	ab08      	add	r3, sp, #32
24019a7e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24019a82:	eddf 8a93 	vldr	s17, [pc, #588]	; 24019cd0 <__kernel_rem_pio2f+0x308>
24019a86:	ed9f 9a91 	vldr	s18, [pc, #580]	; 24019ccc <__kernel_rem_pio2f+0x304>
24019a8a:	9304      	str	r3, [sp, #16]
24019a8c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
24019a90:	4656      	mov	r6, sl
24019a92:	00b3      	lsls	r3, r6, #2
24019a94:	9305      	str	r3, [sp, #20]
24019a96:	ab58      	add	r3, sp, #352	; 0x160
24019a98:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24019a9c:	ac08      	add	r4, sp, #32
24019a9e:	ab44      	add	r3, sp, #272	; 0x110
24019aa0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
24019aa4:	46a4      	mov	ip, r4
24019aa6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24019aaa:	4637      	mov	r7, r6
24019aac:	2f00      	cmp	r7, #0
24019aae:	f1a0 0004 	sub.w	r0, r0, #4
24019ab2:	dc4f      	bgt.n	24019b54 <__kernel_rem_pio2f+0x18c>
24019ab4:	4628      	mov	r0, r5
24019ab6:	e9cd 1206 	strd	r1, r2, [sp, #24]
24019aba:	f000 fd45 	bl	2401a548 <scalbnf>
24019abe:	eeb0 8a40 	vmov.f32	s16, s0
24019ac2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
24019ac6:	ee28 0a00 	vmul.f32	s0, s16, s0
24019aca:	f000 fcf5 	bl	2401a4b8 <floorf>
24019ace:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24019ad2:	eea0 8a67 	vfms.f32	s16, s0, s15
24019ad6:	2d00      	cmp	r5, #0
24019ad8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
24019adc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
24019ae0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
24019ae4:	ee17 9a90 	vmov	r9, s15
24019ae8:	ee38 8a40 	vsub.f32	s16, s16, s0
24019aec:	dd44      	ble.n	24019b78 <__kernel_rem_pio2f+0x1b0>
24019aee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
24019af2:	ab08      	add	r3, sp, #32
24019af4:	f1c5 0e08 	rsb	lr, r5, #8
24019af8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
24019afc:	fa47 f00e 	asr.w	r0, r7, lr
24019b00:	4481      	add	r9, r0
24019b02:	fa00 f00e 	lsl.w	r0, r0, lr
24019b06:	1a3f      	subs	r7, r7, r0
24019b08:	f1c5 0007 	rsb	r0, r5, #7
24019b0c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
24019b10:	4107      	asrs	r7, r0
24019b12:	2f00      	cmp	r7, #0
24019b14:	dd3f      	ble.n	24019b96 <__kernel_rem_pio2f+0x1ce>
24019b16:	f04f 0e00 	mov.w	lr, #0
24019b1a:	f109 0901 	add.w	r9, r9, #1
24019b1e:	4673      	mov	r3, lr
24019b20:	4576      	cmp	r6, lr
24019b22:	dc6b      	bgt.n	24019bfc <__kernel_rem_pio2f+0x234>
24019b24:	2d00      	cmp	r5, #0
24019b26:	dd04      	ble.n	24019b32 <__kernel_rem_pio2f+0x16a>
24019b28:	2d01      	cmp	r5, #1
24019b2a:	d078      	beq.n	24019c1e <__kernel_rem_pio2f+0x256>
24019b2c:	2d02      	cmp	r5, #2
24019b2e:	f000 8081 	beq.w	24019c34 <__kernel_rem_pio2f+0x26c>
24019b32:	2f02      	cmp	r7, #2
24019b34:	d12f      	bne.n	24019b96 <__kernel_rem_pio2f+0x1ce>
24019b36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24019b3a:	ee30 8a48 	vsub.f32	s16, s0, s16
24019b3e:	b353      	cbz	r3, 24019b96 <__kernel_rem_pio2f+0x1ce>
24019b40:	4628      	mov	r0, r5
24019b42:	e9cd 1206 	strd	r1, r2, [sp, #24]
24019b46:	f000 fcff 	bl	2401a548 <scalbnf>
24019b4a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
24019b4e:	ee38 8a40 	vsub.f32	s16, s16, s0
24019b52:	e020      	b.n	24019b96 <__kernel_rem_pio2f+0x1ce>
24019b54:	ee60 7a28 	vmul.f32	s15, s0, s17
24019b58:	3f01      	subs	r7, #1
24019b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019b62:	eea7 0ac9 	vfms.f32	s0, s15, s18
24019b66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019b6a:	ecac 0a01 	vstmia	ip!, {s0}
24019b6e:	ed90 0a00 	vldr	s0, [r0]
24019b72:	ee37 0a80 	vadd.f32	s0, s15, s0
24019b76:	e799      	b.n	24019aac <__kernel_rem_pio2f+0xe4>
24019b78:	d105      	bne.n	24019b86 <__kernel_rem_pio2f+0x1be>
24019b7a:	1e70      	subs	r0, r6, #1
24019b7c:	ab08      	add	r3, sp, #32
24019b7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
24019b82:	11ff      	asrs	r7, r7, #7
24019b84:	e7c5      	b.n	24019b12 <__kernel_rem_pio2f+0x14a>
24019b86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24019b8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
24019b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019b92:	da31      	bge.n	24019bf8 <__kernel_rem_pio2f+0x230>
24019b94:	2700      	movs	r7, #0
24019b96:	eeb5 8a40 	vcmp.f32	s16, #0.0
24019b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019b9e:	f040 809b 	bne.w	24019cd8 <__kernel_rem_pio2f+0x310>
24019ba2:	1e74      	subs	r4, r6, #1
24019ba4:	46a4      	mov	ip, r4
24019ba6:	2000      	movs	r0, #0
24019ba8:	45d4      	cmp	ip, sl
24019baa:	da4a      	bge.n	24019c42 <__kernel_rem_pio2f+0x27a>
24019bac:	2800      	cmp	r0, #0
24019bae:	d07a      	beq.n	24019ca6 <__kernel_rem_pio2f+0x2de>
24019bb0:	ab08      	add	r3, sp, #32
24019bb2:	3d08      	subs	r5, #8
24019bb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24019bb8:	2b00      	cmp	r3, #0
24019bba:	f000 8081 	beq.w	24019cc0 <__kernel_rem_pio2f+0x2f8>
24019bbe:	4628      	mov	r0, r5
24019bc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24019bc4:	00a5      	lsls	r5, r4, #2
24019bc6:	f000 fcbf 	bl	2401a548 <scalbnf>
24019bca:	aa44      	add	r2, sp, #272	; 0x110
24019bcc:	1d2b      	adds	r3, r5, #4
24019bce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24019cd0 <__kernel_rem_pio2f+0x308>
24019bd2:	18d1      	adds	r1, r2, r3
24019bd4:	4622      	mov	r2, r4
24019bd6:	2a00      	cmp	r2, #0
24019bd8:	f280 80ae 	bge.w	24019d38 <__kernel_rem_pio2f+0x370>
24019bdc:	4622      	mov	r2, r4
24019bde:	2a00      	cmp	r2, #0
24019be0:	f2c0 80cc 	blt.w	24019d7c <__kernel_rem_pio2f+0x3b4>
24019be4:	a944      	add	r1, sp, #272	; 0x110
24019be6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
24019bea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 24019cc8 <__kernel_rem_pio2f+0x300>
24019bee:	eddf 7a39 	vldr	s15, [pc, #228]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019bf2:	2000      	movs	r0, #0
24019bf4:	1aa1      	subs	r1, r4, r2
24019bf6:	e0b6      	b.n	24019d66 <__kernel_rem_pio2f+0x39e>
24019bf8:	2702      	movs	r7, #2
24019bfa:	e78c      	b.n	24019b16 <__kernel_rem_pio2f+0x14e>
24019bfc:	6820      	ldr	r0, [r4, #0]
24019bfe:	b94b      	cbnz	r3, 24019c14 <__kernel_rem_pio2f+0x24c>
24019c00:	b118      	cbz	r0, 24019c0a <__kernel_rem_pio2f+0x242>
24019c02:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
24019c06:	6020      	str	r0, [r4, #0]
24019c08:	2001      	movs	r0, #1
24019c0a:	f10e 0e01 	add.w	lr, lr, #1
24019c0e:	3404      	adds	r4, #4
24019c10:	4603      	mov	r3, r0
24019c12:	e785      	b.n	24019b20 <__kernel_rem_pio2f+0x158>
24019c14:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
24019c18:	6020      	str	r0, [r4, #0]
24019c1a:	4618      	mov	r0, r3
24019c1c:	e7f5      	b.n	24019c0a <__kernel_rem_pio2f+0x242>
24019c1e:	1e74      	subs	r4, r6, #1
24019c20:	a808      	add	r0, sp, #32
24019c22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
24019c26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
24019c2a:	f10d 0c20 	add.w	ip, sp, #32
24019c2e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
24019c32:	e77e      	b.n	24019b32 <__kernel_rem_pio2f+0x16a>
24019c34:	1e74      	subs	r4, r6, #1
24019c36:	a808      	add	r0, sp, #32
24019c38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
24019c3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24019c40:	e7f3      	b.n	24019c2a <__kernel_rem_pio2f+0x262>
24019c42:	ab08      	add	r3, sp, #32
24019c44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24019c48:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
24019c4c:	4318      	orrs	r0, r3
24019c4e:	e7ab      	b.n	24019ba8 <__kernel_rem_pio2f+0x1e0>
24019c50:	f10c 0c01 	add.w	ip, ip, #1
24019c54:	f850 4d04 	ldr.w	r4, [r0, #-4]!
24019c58:	2c00      	cmp	r4, #0
24019c5a:	d0f9      	beq.n	24019c50 <__kernel_rem_pio2f+0x288>
24019c5c:	9b05      	ldr	r3, [sp, #20]
24019c5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24019c62:	eb0d 0003 	add.w	r0, sp, r3
24019c66:	9b01      	ldr	r3, [sp, #4]
24019c68:	18f4      	adds	r4, r6, r3
24019c6a:	ab1c      	add	r3, sp, #112	; 0x70
24019c6c:	1c77      	adds	r7, r6, #1
24019c6e:	384c      	subs	r0, #76	; 0x4c
24019c70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24019c74:	4466      	add	r6, ip
24019c76:	42be      	cmp	r6, r7
24019c78:	f6ff af0b 	blt.w	24019a92 <__kernel_rem_pio2f+0xca>
24019c7c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
24019c80:	f8dd e008 	ldr.w	lr, [sp, #8]
24019c84:	ee07 3a90 	vmov	s15, r3
24019c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019c8c:	f04f 0c00 	mov.w	ip, #0
24019c90:	ece4 7a01 	vstmia	r4!, {s15}
24019c94:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019c98:	46a1      	mov	r9, r4
24019c9a:	458c      	cmp	ip, r1
24019c9c:	dd07      	ble.n	24019cae <__kernel_rem_pio2f+0x2e6>
24019c9e:	ece0 7a01 	vstmia	r0!, {s15}
24019ca2:	3701      	adds	r7, #1
24019ca4:	e7e7      	b.n	24019c76 <__kernel_rem_pio2f+0x2ae>
24019ca6:	9804      	ldr	r0, [sp, #16]
24019ca8:	f04f 0c01 	mov.w	ip, #1
24019cac:	e7d2      	b.n	24019c54 <__kernel_rem_pio2f+0x28c>
24019cae:	ecfe 6a01 	vldmia	lr!, {s13}
24019cb2:	ed39 7a01 	vldmdb	r9!, {s14}
24019cb6:	f10c 0c01 	add.w	ip, ip, #1
24019cba:	eee6 7a87 	vfma.f32	s15, s13, s14
24019cbe:	e7ec      	b.n	24019c9a <__kernel_rem_pio2f+0x2d2>
24019cc0:	3c01      	subs	r4, #1
24019cc2:	e775      	b.n	24019bb0 <__kernel_rem_pio2f+0x1e8>
24019cc4:	240334fc 	.word	0x240334fc
24019cc8:	240334d0 	.word	0x240334d0
24019ccc:	43800000 	.word	0x43800000
24019cd0:	3b800000 	.word	0x3b800000
24019cd4:	00000000 	.word	0x00000000
24019cd8:	9b03      	ldr	r3, [sp, #12]
24019cda:	eeb0 0a48 	vmov.f32	s0, s16
24019cde:	1a98      	subs	r0, r3, r2
24019ce0:	f000 fc32 	bl	2401a548 <scalbnf>
24019ce4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 24019ccc <__kernel_rem_pio2f+0x304>
24019ce8:	eeb4 0ac7 	vcmpe.f32	s0, s14
24019cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019cf0:	db19      	blt.n	24019d26 <__kernel_rem_pio2f+0x35e>
24019cf2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24019cd0 <__kernel_rem_pio2f+0x308>
24019cf6:	ee60 7a27 	vmul.f32	s15, s0, s15
24019cfa:	aa08      	add	r2, sp, #32
24019cfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019d00:	1c74      	adds	r4, r6, #1
24019d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019d06:	3508      	adds	r5, #8
24019d08:	eea7 0ac7 	vfms.f32	s0, s15, s14
24019d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24019d10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019d14:	ee10 3a10 	vmov	r3, s0
24019d18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24019d1c:	ee17 3a90 	vmov	r3, s15
24019d20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
24019d24:	e74b      	b.n	24019bbe <__kernel_rem_pio2f+0x1f6>
24019d26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24019d2a:	aa08      	add	r2, sp, #32
24019d2c:	ee10 3a10 	vmov	r3, s0
24019d30:	4634      	mov	r4, r6
24019d32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24019d36:	e742      	b.n	24019bbe <__kernel_rem_pio2f+0x1f6>
24019d38:	a808      	add	r0, sp, #32
24019d3a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
24019d3e:	9001      	str	r0, [sp, #4]
24019d40:	ee07 0a90 	vmov	s15, r0
24019d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019d48:	3a01      	subs	r2, #1
24019d4a:	ee67 7a80 	vmul.f32	s15, s15, s0
24019d4e:	ee20 0a07 	vmul.f32	s0, s0, s14
24019d52:	ed61 7a01 	vstmdb	r1!, {s15}
24019d56:	e73e      	b.n	24019bd6 <__kernel_rem_pio2f+0x20e>
24019d58:	ecfc 6a01 	vldmia	ip!, {s13}
24019d5c:	ecb6 7a01 	vldmia	r6!, {s14}
24019d60:	eee6 7a87 	vfma.f32	s15, s13, s14
24019d64:	3001      	adds	r0, #1
24019d66:	4550      	cmp	r0, sl
24019d68:	dc01      	bgt.n	24019d6e <__kernel_rem_pio2f+0x3a6>
24019d6a:	4288      	cmp	r0, r1
24019d6c:	ddf4      	ble.n	24019d58 <__kernel_rem_pio2f+0x390>
24019d6e:	a858      	add	r0, sp, #352	; 0x160
24019d70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
24019d74:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
24019d78:	3a01      	subs	r2, #1
24019d7a:	e730      	b.n	24019bde <__kernel_rem_pio2f+0x216>
24019d7c:	9a66      	ldr	r2, [sp, #408]	; 0x198
24019d7e:	2a02      	cmp	r2, #2
24019d80:	dc09      	bgt.n	24019d96 <__kernel_rem_pio2f+0x3ce>
24019d82:	2a00      	cmp	r2, #0
24019d84:	dc2a      	bgt.n	24019ddc <__kernel_rem_pio2f+0x414>
24019d86:	d043      	beq.n	24019e10 <__kernel_rem_pio2f+0x448>
24019d88:	f009 0007 	and.w	r0, r9, #7
24019d8c:	b059      	add	sp, #356	; 0x164
24019d8e:	ecbd 8b04 	vpop	{d8-d9}
24019d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24019d96:	9b66      	ldr	r3, [sp, #408]	; 0x198
24019d98:	2b03      	cmp	r3, #3
24019d9a:	d1f5      	bne.n	24019d88 <__kernel_rem_pio2f+0x3c0>
24019d9c:	ab30      	add	r3, sp, #192	; 0xc0
24019d9e:	442b      	add	r3, r5
24019da0:	461a      	mov	r2, r3
24019da2:	4619      	mov	r1, r3
24019da4:	4620      	mov	r0, r4
24019da6:	2800      	cmp	r0, #0
24019da8:	f1a1 0104 	sub.w	r1, r1, #4
24019dac:	dc51      	bgt.n	24019e52 <__kernel_rem_pio2f+0x48a>
24019dae:	4621      	mov	r1, r4
24019db0:	2901      	cmp	r1, #1
24019db2:	f1a2 0204 	sub.w	r2, r2, #4
24019db6:	dc5c      	bgt.n	24019e72 <__kernel_rem_pio2f+0x4aa>
24019db8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019dbc:	3304      	adds	r3, #4
24019dbe:	2c01      	cmp	r4, #1
24019dc0:	dc67      	bgt.n	24019e92 <__kernel_rem_pio2f+0x4ca>
24019dc2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24019dc6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
24019dca:	2f00      	cmp	r7, #0
24019dcc:	d167      	bne.n	24019e9e <__kernel_rem_pio2f+0x4d6>
24019dce:	edc8 6a00 	vstr	s13, [r8]
24019dd2:	ed88 7a01 	vstr	s14, [r8, #4]
24019dd6:	edc8 7a02 	vstr	s15, [r8, #8]
24019dda:	e7d5      	b.n	24019d88 <__kernel_rem_pio2f+0x3c0>
24019ddc:	aa30      	add	r2, sp, #192	; 0xc0
24019dde:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019de2:	4413      	add	r3, r2
24019de4:	4622      	mov	r2, r4
24019de6:	2a00      	cmp	r2, #0
24019de8:	da24      	bge.n	24019e34 <__kernel_rem_pio2f+0x46c>
24019dea:	b34f      	cbz	r7, 24019e40 <__kernel_rem_pio2f+0x478>
24019dec:	eef1 7a47 	vneg.f32	s15, s14
24019df0:	edc8 7a00 	vstr	s15, [r8]
24019df4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
24019df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019dfc:	aa31      	add	r2, sp, #196	; 0xc4
24019dfe:	2301      	movs	r3, #1
24019e00:	429c      	cmp	r4, r3
24019e02:	da20      	bge.n	24019e46 <__kernel_rem_pio2f+0x47e>
24019e04:	b10f      	cbz	r7, 24019e0a <__kernel_rem_pio2f+0x442>
24019e06:	eef1 7a67 	vneg.f32	s15, s15
24019e0a:	edc8 7a01 	vstr	s15, [r8, #4]
24019e0e:	e7bb      	b.n	24019d88 <__kernel_rem_pio2f+0x3c0>
24019e10:	aa30      	add	r2, sp, #192	; 0xc0
24019e12:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 24019cd4 <__kernel_rem_pio2f+0x30c>
24019e16:	4413      	add	r3, r2
24019e18:	2c00      	cmp	r4, #0
24019e1a:	da05      	bge.n	24019e28 <__kernel_rem_pio2f+0x460>
24019e1c:	b10f      	cbz	r7, 24019e22 <__kernel_rem_pio2f+0x45a>
24019e1e:	eef1 7a67 	vneg.f32	s15, s15
24019e22:	edc8 7a00 	vstr	s15, [r8]
24019e26:	e7af      	b.n	24019d88 <__kernel_rem_pio2f+0x3c0>
24019e28:	ed33 7a01 	vldmdb	r3!, {s14}
24019e2c:	3c01      	subs	r4, #1
24019e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
24019e32:	e7f1      	b.n	24019e18 <__kernel_rem_pio2f+0x450>
24019e34:	ed73 7a01 	vldmdb	r3!, {s15}
24019e38:	3a01      	subs	r2, #1
24019e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
24019e3e:	e7d2      	b.n	24019de6 <__kernel_rem_pio2f+0x41e>
24019e40:	eef0 7a47 	vmov.f32	s15, s14
24019e44:	e7d4      	b.n	24019df0 <__kernel_rem_pio2f+0x428>
24019e46:	ecb2 7a01 	vldmia	r2!, {s14}
24019e4a:	3301      	adds	r3, #1
24019e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
24019e50:	e7d6      	b.n	24019e00 <__kernel_rem_pio2f+0x438>
24019e52:	edd1 7a00 	vldr	s15, [r1]
24019e56:	edd1 6a01 	vldr	s13, [r1, #4]
24019e5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
24019e5e:	3801      	subs	r0, #1
24019e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019e64:	ed81 7a00 	vstr	s14, [r1]
24019e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
24019e6c:	edc1 7a01 	vstr	s15, [r1, #4]
24019e70:	e799      	b.n	24019da6 <__kernel_rem_pio2f+0x3de>
24019e72:	edd2 7a00 	vldr	s15, [r2]
24019e76:	edd2 6a01 	vldr	s13, [r2, #4]
24019e7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
24019e7e:	3901      	subs	r1, #1
24019e80:	ee77 7ac7 	vsub.f32	s15, s15, s14
24019e84:	ed82 7a00 	vstr	s14, [r2]
24019e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
24019e8c:	edc2 7a01 	vstr	s15, [r2, #4]
24019e90:	e78e      	b.n	24019db0 <__kernel_rem_pio2f+0x3e8>
24019e92:	ed33 7a01 	vldmdb	r3!, {s14}
24019e96:	3c01      	subs	r4, #1
24019e98:	ee77 7a87 	vadd.f32	s15, s15, s14
24019e9c:	e78f      	b.n	24019dbe <__kernel_rem_pio2f+0x3f6>
24019e9e:	eef1 6a66 	vneg.f32	s13, s13
24019ea2:	eeb1 7a47 	vneg.f32	s14, s14
24019ea6:	edc8 6a00 	vstr	s13, [r8]
24019eaa:	ed88 7a01 	vstr	s14, [r8, #4]
24019eae:	eef1 7a67 	vneg.f32	s15, s15
24019eb2:	e790      	b.n	24019dd6 <__kernel_rem_pio2f+0x40e>

24019eb4 <__kernel_tanf>:
24019eb4:	b508      	push	{r3, lr}
24019eb6:	ee10 3a10 	vmov	r3, s0
24019eba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24019ebe:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
24019ec2:	eef0 7a40 	vmov.f32	s15, s0
24019ec6:	da17      	bge.n	24019ef8 <__kernel_tanf+0x44>
24019ec8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
24019ecc:	ee17 1a10 	vmov	r1, s14
24019ed0:	bb41      	cbnz	r1, 24019f24 <__kernel_tanf+0x70>
24019ed2:	1c43      	adds	r3, r0, #1
24019ed4:	4313      	orrs	r3, r2
24019ed6:	d108      	bne.n	24019eea <__kernel_tanf+0x36>
24019ed8:	f7fe fbb6 	bl	24018648 <fabsf>
24019edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24019ee0:	eec7 7a00 	vdiv.f32	s15, s14, s0
24019ee4:	eeb0 0a67 	vmov.f32	s0, s15
24019ee8:	bd08      	pop	{r3, pc}
24019eea:	2801      	cmp	r0, #1
24019eec:	d0fa      	beq.n	24019ee4 <__kernel_tanf+0x30>
24019eee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24019ef2:	eec7 7a00 	vdiv.f32	s15, s14, s0
24019ef6:	e7f5      	b.n	24019ee4 <__kernel_tanf+0x30>
24019ef8:	494c      	ldr	r1, [pc, #304]	; (2401a02c <__kernel_tanf+0x178>)
24019efa:	428a      	cmp	r2, r1
24019efc:	db12      	blt.n	24019f24 <__kernel_tanf+0x70>
24019efe:	2b00      	cmp	r3, #0
24019f00:	bfb8      	it	lt
24019f02:	eef1 7a40 	vneglt.f32	s15, s0
24019f06:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 2401a030 <__kernel_tanf+0x17c>
24019f0a:	ee70 7a67 	vsub.f32	s15, s0, s15
24019f0e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 2401a034 <__kernel_tanf+0x180>
24019f12:	bfb8      	it	lt
24019f14:	eef1 0a60 	vneglt.f32	s1, s1
24019f18:	ee70 0a60 	vsub.f32	s1, s0, s1
24019f1c:	ee70 7aa7 	vadd.f32	s15, s1, s15
24019f20:	eddf 0a45 	vldr	s1, [pc, #276]	; 2401a038 <__kernel_tanf+0x184>
24019f24:	eddf 5a45 	vldr	s11, [pc, #276]	; 2401a03c <__kernel_tanf+0x188>
24019f28:	ed9f 6a45 	vldr	s12, [pc, #276]	; 2401a040 <__kernel_tanf+0x18c>
24019f2c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 2401a044 <__kernel_tanf+0x190>
24019f30:	493e      	ldr	r1, [pc, #248]	; (2401a02c <__kernel_tanf+0x178>)
24019f32:	ee67 6aa7 	vmul.f32	s13, s15, s15
24019f36:	428a      	cmp	r2, r1
24019f38:	ee26 7aa6 	vmul.f32	s14, s13, s13
24019f3c:	eea7 6a25 	vfma.f32	s12, s14, s11
24019f40:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401a048 <__kernel_tanf+0x194>
24019f44:	eee6 5a07 	vfma.f32	s11, s12, s14
24019f48:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401a04c <__kernel_tanf+0x198>
24019f4c:	eea5 6a87 	vfma.f32	s12, s11, s14
24019f50:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a050 <__kernel_tanf+0x19c>
24019f54:	eee6 5a07 	vfma.f32	s11, s12, s14
24019f58:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401a054 <__kernel_tanf+0x1a0>
24019f5c:	eea5 6a87 	vfma.f32	s12, s11, s14
24019f60:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401a058 <__kernel_tanf+0x1a4>
24019f64:	eee7 5a05 	vfma.f32	s11, s14, s10
24019f68:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401a05c <__kernel_tanf+0x1a8>
24019f6c:	eea5 5a87 	vfma.f32	s10, s11, s14
24019f70:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401a060 <__kernel_tanf+0x1ac>
24019f74:	eee5 5a07 	vfma.f32	s11, s10, s14
24019f78:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401a064 <__kernel_tanf+0x1b0>
24019f7c:	eea5 5a87 	vfma.f32	s10, s11, s14
24019f80:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401a068 <__kernel_tanf+0x1b4>
24019f84:	eee5 5a07 	vfma.f32	s11, s10, s14
24019f88:	eeb0 7a46 	vmov.f32	s14, s12
24019f8c:	eea5 7aa6 	vfma.f32	s14, s11, s13
24019f90:	ee27 5aa6 	vmul.f32	s10, s15, s13
24019f94:	eeb0 6a60 	vmov.f32	s12, s1
24019f98:	eea7 6a05 	vfma.f32	s12, s14, s10
24019f9c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401a06c <__kernel_tanf+0x1b8>
24019fa0:	eee6 0a26 	vfma.f32	s1, s12, s13
24019fa4:	eee5 0a07 	vfma.f32	s1, s10, s14
24019fa8:	ee37 7aa0 	vadd.f32	s14, s15, s1
24019fac:	db1d      	blt.n	24019fea <__kernel_tanf+0x136>
24019fae:	ee06 0a90 	vmov	s13, r0
24019fb2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
24019fb6:	ee27 6a07 	vmul.f32	s12, s14, s14
24019fba:	ee37 7a00 	vadd.f32	s14, s14, s0
24019fbe:	179b      	asrs	r3, r3, #30
24019fc0:	eec6 6a07 	vdiv.f32	s13, s12, s14
24019fc4:	f003 0302 	and.w	r3, r3, #2
24019fc8:	f1c3 0301 	rsb	r3, r3, #1
24019fcc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24019fd0:	ee76 0ae0 	vsub.f32	s1, s13, s1
24019fd4:	ee77 7ae0 	vsub.f32	s15, s15, s1
24019fd8:	eea7 0ac7 	vfms.f32	s0, s15, s14
24019fdc:	ee07 3a90 	vmov	s15, r3
24019fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019fe4:	ee67 7a80 	vmul.f32	s15, s15, s0
24019fe8:	e77c      	b.n	24019ee4 <__kernel_tanf+0x30>
24019fea:	2801      	cmp	r0, #1
24019fec:	d01b      	beq.n	2401a026 <__kernel_tanf+0x172>
24019fee:	4b20      	ldr	r3, [pc, #128]	; (2401a070 <__kernel_tanf+0x1bc>)
24019ff0:	ee17 2a10 	vmov	r2, s14
24019ff4:	401a      	ands	r2, r3
24019ff6:	ee06 2a10 	vmov	s12, r2
24019ffa:	ee76 7a67 	vsub.f32	s15, s12, s15
24019ffe:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401a002:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a006:	eec7 6a87 	vdiv.f32	s13, s15, s14
2401a00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a00e:	ee16 2a90 	vmov	r2, s13
2401a012:	4013      	ands	r3, r2
2401a014:	ee07 3a90 	vmov	s15, r3
2401a018:	eea6 7a27 	vfma.f32	s14, s12, s15
2401a01c:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401a020:	eee7 7a26 	vfma.f32	s15, s14, s13
2401a024:	e75e      	b.n	24019ee4 <__kernel_tanf+0x30>
2401a026:	eef0 7a47 	vmov.f32	s15, s14
2401a02a:	e75b      	b.n	24019ee4 <__kernel_tanf+0x30>
2401a02c:	3f2ca140 	.word	0x3f2ca140
2401a030:	3f490fda 	.word	0x3f490fda
2401a034:	33222168 	.word	0x33222168
2401a038:	00000000 	.word	0x00000000
2401a03c:	b79bae5f 	.word	0xb79bae5f
2401a040:	38a3f445 	.word	0x38a3f445
2401a044:	37d95384 	.word	0x37d95384
2401a048:	3a1a26c8 	.word	0x3a1a26c8
2401a04c:	3b6b6916 	.word	0x3b6b6916
2401a050:	3cb327a4 	.word	0x3cb327a4
2401a054:	3e088889 	.word	0x3e088889
2401a058:	3895c07a 	.word	0x3895c07a
2401a05c:	398137b9 	.word	0x398137b9
2401a060:	3abede48 	.word	0x3abede48
2401a064:	3c11371f 	.word	0x3c11371f
2401a068:	3d5d0dd1 	.word	0x3d5d0dd1
2401a06c:	3eaaaaab 	.word	0x3eaaaaab
2401a070:	fffff000 	.word	0xfffff000

2401a074 <fabs>:
2401a074:	ec51 0b10 	vmov	r0, r1, d0
2401a078:	ee10 2a10 	vmov	r2, s0
2401a07c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401a080:	ec43 2b10 	vmov	d0, r2, r3
2401a084:	4770      	bx	lr
	...

2401a088 <floor>:
2401a088:	ee10 1a90 	vmov	r1, s1
2401a08c:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401a090:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401a094:	2b13      	cmp	r3, #19
2401a096:	b530      	push	{r4, r5, lr}
2401a098:	ee10 0a10 	vmov	r0, s0
2401a09c:	ee10 5a10 	vmov	r5, s0
2401a0a0:	dc31      	bgt.n	2401a106 <floor+0x7e>
2401a0a2:	2b00      	cmp	r3, #0
2401a0a4:	da15      	bge.n	2401a0d2 <floor+0x4a>
2401a0a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401a160 <floor+0xd8>
2401a0aa:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a0ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a0b6:	dd07      	ble.n	2401a0c8 <floor+0x40>
2401a0b8:	2900      	cmp	r1, #0
2401a0ba:	da4e      	bge.n	2401a15a <floor+0xd2>
2401a0bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401a0c0:	4318      	orrs	r0, r3
2401a0c2:	d001      	beq.n	2401a0c8 <floor+0x40>
2401a0c4:	4928      	ldr	r1, [pc, #160]	; (2401a168 <floor+0xe0>)
2401a0c6:	2000      	movs	r0, #0
2401a0c8:	460b      	mov	r3, r1
2401a0ca:	4602      	mov	r2, r0
2401a0cc:	ec43 2b10 	vmov	d0, r2, r3
2401a0d0:	e020      	b.n	2401a114 <floor+0x8c>
2401a0d2:	4a26      	ldr	r2, [pc, #152]	; (2401a16c <floor+0xe4>)
2401a0d4:	411a      	asrs	r2, r3
2401a0d6:	ea01 0402 	and.w	r4, r1, r2
2401a0da:	4304      	orrs	r4, r0
2401a0dc:	d01a      	beq.n	2401a114 <floor+0x8c>
2401a0de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 2401a160 <floor+0xd8>
2401a0e2:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a0e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a0ee:	ddeb      	ble.n	2401a0c8 <floor+0x40>
2401a0f0:	2900      	cmp	r1, #0
2401a0f2:	bfbe      	ittt	lt
2401a0f4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401a0f8:	fa40 f303 	asrlt.w	r3, r0, r3
2401a0fc:	18c9      	addlt	r1, r1, r3
2401a0fe:	ea21 0102 	bic.w	r1, r1, r2
2401a102:	2000      	movs	r0, #0
2401a104:	e7e0      	b.n	2401a0c8 <floor+0x40>
2401a106:	2b33      	cmp	r3, #51	; 0x33
2401a108:	dd05      	ble.n	2401a116 <floor+0x8e>
2401a10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401a10e:	d101      	bne.n	2401a114 <floor+0x8c>
2401a110:	ee30 0b00 	vadd.f64	d0, d0, d0
2401a114:	bd30      	pop	{r4, r5, pc}
2401a116:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401a11a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401a11e:	40e2      	lsrs	r2, r4
2401a120:	4202      	tst	r2, r0
2401a122:	d0f7      	beq.n	2401a114 <floor+0x8c>
2401a124:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401a160 <floor+0xd8>
2401a128:	ee30 0b07 	vadd.f64	d0, d0, d7
2401a12c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a134:	ddc8      	ble.n	2401a0c8 <floor+0x40>
2401a136:	2900      	cmp	r1, #0
2401a138:	da02      	bge.n	2401a140 <floor+0xb8>
2401a13a:	2b14      	cmp	r3, #20
2401a13c:	d103      	bne.n	2401a146 <floor+0xbe>
2401a13e:	3101      	adds	r1, #1
2401a140:	ea20 0002 	bic.w	r0, r0, r2
2401a144:	e7c0      	b.n	2401a0c8 <floor+0x40>
2401a146:	2401      	movs	r4, #1
2401a148:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401a14c:	fa04 f303 	lsl.w	r3, r4, r3
2401a150:	4418      	add	r0, r3
2401a152:	42a8      	cmp	r0, r5
2401a154:	bf38      	it	cc
2401a156:	1909      	addcc	r1, r1, r4
2401a158:	e7f2      	b.n	2401a140 <floor+0xb8>
2401a15a:	2000      	movs	r0, #0
2401a15c:	4601      	mov	r1, r0
2401a15e:	e7b3      	b.n	2401a0c8 <floor+0x40>
2401a160:	8800759c 	.word	0x8800759c
2401a164:	7e37e43c 	.word	0x7e37e43c
2401a168:	bff00000 	.word	0xbff00000
2401a16c:	000fffff 	.word	0x000fffff

2401a170 <scalbn>:
2401a170:	ee10 1a90 	vmov	r1, s1
2401a174:	b510      	push	{r4, lr}
2401a176:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401a17a:	b98c      	cbnz	r4, 2401a1a0 <scalbn+0x30>
2401a17c:	ee10 3a10 	vmov	r3, s0
2401a180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401a184:	430b      	orrs	r3, r1
2401a186:	d011      	beq.n	2401a1ac <scalbn+0x3c>
2401a188:	ed9f 7b31 	vldr	d7, [pc, #196]	; 2401a250 <scalbn+0xe0>
2401a18c:	4b3c      	ldr	r3, [pc, #240]	; (2401a280 <scalbn+0x110>)
2401a18e:	ee20 0b07 	vmul.f64	d0, d0, d7
2401a192:	4298      	cmp	r0, r3
2401a194:	da0b      	bge.n	2401a1ae <scalbn+0x3e>
2401a196:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401a258 <scalbn+0xe8>
2401a19a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401a19e:	e005      	b.n	2401a1ac <scalbn+0x3c>
2401a1a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
2401a1a4:	429c      	cmp	r4, r3
2401a1a6:	d107      	bne.n	2401a1b8 <scalbn+0x48>
2401a1a8:	ee30 0b00 	vadd.f64	d0, d0, d0
2401a1ac:	bd10      	pop	{r4, pc}
2401a1ae:	ee10 1a90 	vmov	r1, s1
2401a1b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
2401a1b6:	3c36      	subs	r4, #54	; 0x36
2401a1b8:	4404      	add	r4, r0
2401a1ba:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401a1be:	429c      	cmp	r4, r3
2401a1c0:	dd0d      	ble.n	2401a1de <scalbn+0x6e>
2401a1c2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 2401a260 <scalbn+0xf0>
2401a1c6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 2401a268 <scalbn+0xf8>
2401a1ca:	eeb0 6b47 	vmov.f64	d6, d7
2401a1ce:	ee10 3a90 	vmov	r3, s1
2401a1d2:	2b00      	cmp	r3, #0
2401a1d4:	fe27 7b05 	vselge.f64	d7, d7, d5
2401a1d8:	ee27 0b06 	vmul.f64	d0, d7, d6
2401a1dc:	e7e6      	b.n	2401a1ac <scalbn+0x3c>
2401a1de:	2c00      	cmp	r4, #0
2401a1e0:	dd0a      	ble.n	2401a1f8 <scalbn+0x88>
2401a1e2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401a1e6:	ec53 2b10 	vmov	r2, r3, d0
2401a1ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401a1ee:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401a1f2:	ec43 2b10 	vmov	d0, r2, r3
2401a1f6:	e7d9      	b.n	2401a1ac <scalbn+0x3c>
2401a1f8:	f114 0f35 	cmn.w	r4, #53	; 0x35
2401a1fc:	da19      	bge.n	2401a232 <scalbn+0xc2>
2401a1fe:	f24c 3350 	movw	r3, #50000	; 0xc350
2401a202:	4298      	cmp	r0, r3
2401a204:	ee10 3a90 	vmov	r3, s1
2401a208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401a20c:	dd09      	ble.n	2401a222 <scalbn+0xb2>
2401a20e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 2401a260 <scalbn+0xf0>
2401a212:	ed9f 6b15 	vldr	d6, [pc, #84]	; 2401a268 <scalbn+0xf8>
2401a216:	eeb0 7b40 	vmov.f64	d7, d0
2401a21a:	2b00      	cmp	r3, #0
2401a21c:	fe00 0b06 	vseleq.f64	d0, d0, d6
2401a220:	e7bb      	b.n	2401a19a <scalbn+0x2a>
2401a222:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 2401a258 <scalbn+0xe8>
2401a226:	ed9f 6b12 	vldr	d6, [pc, #72]	; 2401a270 <scalbn+0x100>
2401a22a:	eeb0 7b40 	vmov.f64	d7, d0
2401a22e:	2b00      	cmp	r3, #0
2401a230:	e7f4      	b.n	2401a21c <scalbn+0xac>
2401a232:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401a236:	ec53 2b10 	vmov	r2, r3, d0
2401a23a:	3436      	adds	r4, #54	; 0x36
2401a23c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401a240:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
2401a244:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 2401a278 <scalbn+0x108>
2401a248:	ec43 2b10 	vmov	d0, r2, r3
2401a24c:	e7a5      	b.n	2401a19a <scalbn+0x2a>
2401a24e:	bf00      	nop
2401a250:	00000000 	.word	0x00000000
2401a254:	43500000 	.word	0x43500000
2401a258:	c2f8f359 	.word	0xc2f8f359
2401a25c:	01a56e1f 	.word	0x01a56e1f
2401a260:	8800759c 	.word	0x8800759c
2401a264:	7e37e43c 	.word	0x7e37e43c
2401a268:	8800759c 	.word	0x8800759c
2401a26c:	fe37e43c 	.word	0xfe37e43c
2401a270:	c2f8f359 	.word	0xc2f8f359
2401a274:	81a56e1f 	.word	0x81a56e1f
2401a278:	00000000 	.word	0x00000000
2401a27c:	3c900000 	.word	0x3c900000
2401a280:	ffff3cb0 	.word	0xffff3cb0

2401a284 <expm1f>:
2401a284:	ee10 2a10 	vmov	r2, s0
2401a288:	497c      	ldr	r1, [pc, #496]	; (2401a47c <expm1f+0x1f8>)
2401a28a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401a28e:	428b      	cmp	r3, r1
2401a290:	d920      	bls.n	2401a2d4 <expm1f+0x50>
2401a292:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401a296:	d902      	bls.n	2401a29e <expm1f+0x1a>
2401a298:	ee30 0a00 	vadd.f32	s0, s0, s0
2401a29c:	4770      	bx	lr
2401a29e:	d105      	bne.n	2401a2ac <expm1f+0x28>
2401a2a0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a2a4:	2a00      	cmp	r2, #0
2401a2a6:	fe20 0a27 	vselge.f32	s0, s0, s15
2401a2aa:	4770      	bx	lr
2401a2ac:	2a00      	cmp	r2, #0
2401a2ae:	db05      	blt.n	2401a2bc <expm1f+0x38>
2401a2b0:	4973      	ldr	r1, [pc, #460]	; (2401a480 <expm1f+0x1fc>)
2401a2b2:	428b      	cmp	r3, r1
2401a2b4:	d95c      	bls.n	2401a370 <expm1f+0xec>
2401a2b6:	2000      	movs	r0, #0
2401a2b8:	f7fe b8f8 	b.w	240184ac <__math_oflowf>
2401a2bc:	eddf 7a71 	vldr	s15, [pc, #452]	; 2401a484 <expm1f+0x200>
2401a2c0:	ee70 7a27 	vadd.f32	s15, s0, s15
2401a2c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401a2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a2cc:	d550      	bpl.n	2401a370 <expm1f+0xec>
2401a2ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401a2d2:	4770      	bx	lr
2401a2d4:	496c      	ldr	r1, [pc, #432]	; (2401a488 <expm1f+0x204>)
2401a2d6:	428b      	cmp	r3, r1
2401a2d8:	d966      	bls.n	2401a3a8 <expm1f+0x124>
2401a2da:	496c      	ldr	r1, [pc, #432]	; (2401a48c <expm1f+0x208>)
2401a2dc:	428b      	cmp	r3, r1
2401a2de:	d847      	bhi.n	2401a370 <expm1f+0xec>
2401a2e0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 2401a490 <expm1f+0x20c>
2401a2e4:	2a00      	cmp	r2, #0
2401a2e6:	bfa7      	ittee	ge
2401a2e8:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401a2ec:	eddf 7a69 	vldrge	s15, [pc, #420]	; 2401a494 <expm1f+0x210>
2401a2f0:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 2401a498 <expm1f+0x214>
2401a2f4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401a2f8:	bfac      	ite	ge
2401a2fa:	2301      	movge	r3, #1
2401a2fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401a300:	ee37 0a67 	vsub.f32	s0, s14, s15
2401a304:	ee37 7a40 	vsub.f32	s14, s14, s0
2401a308:	ee77 7a67 	vsub.f32	s15, s14, s15
2401a30c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401a310:	ee20 4a25 	vmul.f32	s8, s0, s11
2401a314:	ed9f 6a61 	vldr	s12, [pc, #388]	; 2401a49c <expm1f+0x218>
2401a318:	eddf 6a61 	vldr	s13, [pc, #388]	; 2401a4a0 <expm1f+0x21c>
2401a31c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 2401a4a4 <expm1f+0x220>
2401a320:	ee20 7a04 	vmul.f32	s14, s0, s8
2401a324:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401a328:	eee7 6a06 	vfma.f32	s13, s14, s12
2401a32c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 2401a4a8 <expm1f+0x224>
2401a330:	eea6 6a87 	vfma.f32	s12, s13, s14
2401a334:	eddf 6a5d 	vldr	s13, [pc, #372]	; 2401a4ac <expm1f+0x228>
2401a338:	eee6 6a07 	vfma.f32	s13, s12, s14
2401a33c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401a340:	eea6 5a87 	vfma.f32	s10, s13, s14
2401a344:	eef0 6a46 	vmov.f32	s13, s12
2401a348:	eee5 6a07 	vfma.f32	s13, s10, s14
2401a34c:	eee4 4a66 	vfms.f32	s9, s8, s13
2401a350:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401a354:	eea0 4a64 	vfms.f32	s8, s0, s9
2401a358:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401a35c:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401a360:	ee66 6a87 	vmul.f32	s13, s13, s14
2401a364:	bb73      	cbnz	r3, 2401a3c4 <expm1f+0x140>
2401a366:	eef0 7a47 	vmov.f32	s15, s14
2401a36a:	eed0 7a26 	vfnms.f32	s15, s0, s13
2401a36e:	e024      	b.n	2401a3ba <expm1f+0x136>
2401a370:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401a374:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a378:	2a00      	cmp	r2, #0
2401a37a:	fe67 7a87 	vselge.f32	s15, s15, s14
2401a37e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2401a4b0 <expm1f+0x22c>
2401a382:	eddf 6a43 	vldr	s13, [pc, #268]	; 2401a490 <expm1f+0x20c>
2401a386:	ee40 7a07 	vmla.f32	s15, s0, s14
2401a38a:	eeb0 7a40 	vmov.f32	s14, s0
2401a38e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a392:	ee17 3a90 	vmov	r3, s15
2401a396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a39a:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401a39e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2401a494 <expm1f+0x210>
2401a3a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a3a6:	e7ab      	b.n	2401a300 <expm1f+0x7c>
2401a3a8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401a3ac:	d208      	bcs.n	2401a3c0 <expm1f+0x13c>
2401a3ae:	eddf 7a41 	vldr	s15, [pc, #260]	; 2401a4b4 <expm1f+0x230>
2401a3b2:	ee70 7a27 	vadd.f32	s15, s0, s15
2401a3b6:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401a3ba:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a3be:	4770      	bx	lr
2401a3c0:	2300      	movs	r3, #0
2401a3c2:	e7a3      	b.n	2401a30c <expm1f+0x88>
2401a3c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401a3c8:	1c5a      	adds	r2, r3, #1
2401a3ca:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401a3ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a3d2:	d106      	bne.n	2401a3e2 <expm1f+0x15e>
2401a3d4:	ee70 7a67 	vsub.f32	s15, s0, s15
2401a3d8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401a3dc:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401a3e0:	4770      	bx	lr
2401a3e2:	2b01      	cmp	r3, #1
2401a3e4:	d118      	bne.n	2401a418 <expm1f+0x194>
2401a3e6:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401a3ea:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401a3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a3f2:	bf5b      	ittet	pl
2401a3f4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401a3f8:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401a3fc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
2401a400:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401a404:	bf43      	ittte	mi
2401a406:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
2401a40a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401a40e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401a412:	eeb0 0a46 	vmovpl.f32	s0, s12
2401a416:	4770      	bx	lr
2401a418:	1c5a      	adds	r2, r3, #1
2401a41a:	2a39      	cmp	r2, #57	; 0x39
2401a41c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401a420:	d90b      	bls.n	2401a43a <expm1f+0x1b6>
2401a422:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401a426:	ee36 0a40 	vsub.f32	s0, s12, s0
2401a42a:	ee10 3a10 	vmov	r3, s0
2401a42e:	440b      	add	r3, r1
2401a430:	ee00 3a10 	vmov	s0, r3
2401a434:	ee30 0a46 	vsub.f32	s0, s0, s12
2401a438:	4770      	bx	lr
2401a43a:	2b16      	cmp	r3, #22
2401a43c:	dc11      	bgt.n	2401a462 <expm1f+0x1de>
2401a43e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401a442:	fa42 f303 	asr.w	r3, r2, r3
2401a446:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401a44a:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401a44e:	ee07 3a90 	vmov	s15, r3
2401a452:	ee37 0ac0 	vsub.f32	s0, s15, s0
2401a456:	ee10 3a10 	vmov	r3, s0
2401a45a:	440b      	add	r3, r1
2401a45c:	ee00 3a10 	vmov	s0, r3
2401a460:	4770      	bx	lr
2401a462:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401a466:	05db      	lsls	r3, r3, #23
2401a468:	ee07 3a10 	vmov	s14, r3
2401a46c:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a470:	ee70 7a67 	vsub.f32	s15, s0, s15
2401a474:	ee37 0a86 	vadd.f32	s0, s15, s12
2401a478:	e7ed      	b.n	2401a456 <expm1f+0x1d2>
2401a47a:	bf00      	nop
2401a47c:	4195b843 	.word	0x4195b843
2401a480:	42b17217 	.word	0x42b17217
2401a484:	0da24260 	.word	0x0da24260
2401a488:	3eb17218 	.word	0x3eb17218
2401a48c:	3f851591 	.word	0x3f851591
2401a490:	3f317180 	.word	0x3f317180
2401a494:	3717f7d1 	.word	0x3717f7d1
2401a498:	b717f7d1 	.word	0xb717f7d1
2401a49c:	b457edbb 	.word	0xb457edbb
2401a4a0:	36867e54 	.word	0x36867e54
2401a4a4:	bd088889 	.word	0xbd088889
2401a4a8:	b8a670cd 	.word	0xb8a670cd
2401a4ac:	3ad00d01 	.word	0x3ad00d01
2401a4b0:	3fb8aa3b 	.word	0x3fb8aa3b
2401a4b4:	7149f2ca 	.word	0x7149f2ca

2401a4b8 <floorf>:
2401a4b8:	ee10 3a10 	vmov	r3, s0
2401a4bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401a4c0:	3a7f      	subs	r2, #127	; 0x7f
2401a4c2:	2a16      	cmp	r2, #22
2401a4c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401a4c8:	dc2a      	bgt.n	2401a520 <floorf+0x68>
2401a4ca:	2a00      	cmp	r2, #0
2401a4cc:	da11      	bge.n	2401a4f2 <floorf+0x3a>
2401a4ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401a530 <floorf+0x78>
2401a4d2:	ee30 0a27 	vadd.f32	s0, s0, s15
2401a4d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401a4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a4de:	dd05      	ble.n	2401a4ec <floorf+0x34>
2401a4e0:	2b00      	cmp	r3, #0
2401a4e2:	da23      	bge.n	2401a52c <floorf+0x74>
2401a4e4:	4a13      	ldr	r2, [pc, #76]	; (2401a534 <floorf+0x7c>)
2401a4e6:	2900      	cmp	r1, #0
2401a4e8:	bf18      	it	ne
2401a4ea:	4613      	movne	r3, r2
2401a4ec:	ee00 3a10 	vmov	s0, r3
2401a4f0:	4770      	bx	lr
2401a4f2:	4911      	ldr	r1, [pc, #68]	; (2401a538 <floorf+0x80>)
2401a4f4:	4111      	asrs	r1, r2
2401a4f6:	420b      	tst	r3, r1
2401a4f8:	d0fa      	beq.n	2401a4f0 <floorf+0x38>
2401a4fa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401a530 <floorf+0x78>
2401a4fe:	ee30 0a27 	vadd.f32	s0, s0, s15
2401a502:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401a506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a50a:	ddef      	ble.n	2401a4ec <floorf+0x34>
2401a50c:	2b00      	cmp	r3, #0
2401a50e:	bfbe      	ittt	lt
2401a510:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401a514:	fa40 f202 	asrlt.w	r2, r0, r2
2401a518:	189b      	addlt	r3, r3, r2
2401a51a:	ea23 0301 	bic.w	r3, r3, r1
2401a51e:	e7e5      	b.n	2401a4ec <floorf+0x34>
2401a520:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401a524:	d3e4      	bcc.n	2401a4f0 <floorf+0x38>
2401a526:	ee30 0a00 	vadd.f32	s0, s0, s0
2401a52a:	4770      	bx	lr
2401a52c:	2300      	movs	r3, #0
2401a52e:	e7dd      	b.n	2401a4ec <floorf+0x34>
2401a530:	7149f2ca 	.word	0x7149f2ca
2401a534:	bf800000 	.word	0xbf800000
2401a538:	007fffff 	.word	0x007fffff

2401a53c <nanf>:
2401a53c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a544 <nanf+0x8>
2401a540:	4770      	bx	lr
2401a542:	bf00      	nop
2401a544:	7fc00000 	.word	0x7fc00000

2401a548 <scalbnf>:
2401a548:	ee10 3a10 	vmov	r3, s0
2401a54c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401a550:	d024      	beq.n	2401a59c <scalbnf+0x54>
2401a552:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401a556:	d302      	bcc.n	2401a55e <scalbnf+0x16>
2401a558:	ee30 0a00 	vadd.f32	s0, s0, s0
2401a55c:	4770      	bx	lr
2401a55e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401a562:	d121      	bne.n	2401a5a8 <scalbnf+0x60>
2401a564:	4b29      	ldr	r3, [pc, #164]	; (2401a60c <scalbnf+0xc4>)
2401a566:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2401a610 <scalbnf+0xc8>
2401a56a:	4298      	cmp	r0, r3
2401a56c:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a570:	db15      	blt.n	2401a59e <scalbnf+0x56>
2401a572:	ee10 3a10 	vmov	r3, s0
2401a576:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401a57a:	3a19      	subs	r2, #25
2401a57c:	4402      	add	r2, r0
2401a57e:	2afe      	cmp	r2, #254	; 0xfe
2401a580:	dd14      	ble.n	2401a5ac <scalbnf+0x64>
2401a582:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401a614 <scalbnf+0xcc>
2401a586:	eddf 6a24 	vldr	s13, [pc, #144]	; 2401a618 <scalbnf+0xd0>
2401a58a:	ee10 3a10 	vmov	r3, s0
2401a58e:	eeb0 7a67 	vmov.f32	s14, s15
2401a592:	2b00      	cmp	r3, #0
2401a594:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401a598:	ee27 0a27 	vmul.f32	s0, s14, s15
2401a59c:	4770      	bx	lr
2401a59e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2401a61c <scalbnf+0xd4>
2401a5a2:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a5a6:	4770      	bx	lr
2401a5a8:	0dd2      	lsrs	r2, r2, #23
2401a5aa:	e7e7      	b.n	2401a57c <scalbnf+0x34>
2401a5ac:	2a00      	cmp	r2, #0
2401a5ae:	dd06      	ble.n	2401a5be <scalbnf+0x76>
2401a5b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401a5b4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401a5b8:	ee00 3a10 	vmov	s0, r3
2401a5bc:	4770      	bx	lr
2401a5be:	f112 0f16 	cmn.w	r2, #22
2401a5c2:	da19      	bge.n	2401a5f8 <scalbnf+0xb0>
2401a5c4:	f24c 3350 	movw	r3, #50000	; 0xc350
2401a5c8:	4298      	cmp	r0, r3
2401a5ca:	ee10 3a10 	vmov	r3, s0
2401a5ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
2401a5d2:	dd09      	ble.n	2401a5e8 <scalbnf+0xa0>
2401a5d4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 2401a614 <scalbnf+0xcc>
2401a5d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2401a618 <scalbnf+0xd0>
2401a5dc:	eef0 7a40 	vmov.f32	s15, s0
2401a5e0:	2b00      	cmp	r3, #0
2401a5e2:	fe00 0a07 	vseleq.f32	s0, s0, s14
2401a5e6:	e7dc      	b.n	2401a5a2 <scalbnf+0x5a>
2401a5e8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 2401a61c <scalbnf+0xd4>
2401a5ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2401a620 <scalbnf+0xd8>
2401a5f0:	eef0 7a40 	vmov.f32	s15, s0
2401a5f4:	2b00      	cmp	r3, #0
2401a5f6:	e7f4      	b.n	2401a5e2 <scalbnf+0x9a>
2401a5f8:	3219      	adds	r2, #25
2401a5fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401a5fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401a602:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401a624 <scalbnf+0xdc>
2401a606:	ee07 3a10 	vmov	s14, r3
2401a60a:	e7c5      	b.n	2401a598 <scalbnf+0x50>
2401a60c:	ffff3cb0 	.word	0xffff3cb0
2401a610:	4c000000 	.word	0x4c000000
2401a614:	7149f2ca 	.word	0x7149f2ca
2401a618:	f149f2ca 	.word	0xf149f2ca
2401a61c:	0da24260 	.word	0x0da24260
2401a620:	8da24260 	.word	0x8da24260
2401a624:	33000000 	.word	0x33000000

2401a628 <syncMap>:
2401a628:	00000002 00000000 00000001 7062652e     .............ebp
2401a638:	00000000                                ....

2401a63c <D1CorePrescTable>:
2401a63c:	00000000 04030201 04030201 09080706     ................

2401a64c <flagBitshiftOffset.0>:
2401a64c:	16100600 16100600                       ........

2401a654 <SD_Driver>:
2401a654:	2400cf21 2400cf51 2400cf71 2400d001     !..$Q..$q..$...$
2401a664:	2400cf99 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
2401a674:	3d3b2c2b 00005d5b                       +,;=[]..

2401a67c <ExCvt>:
2401a67c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401a68c:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401a69c:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401a6ac:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401a6bc:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401a6cc:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401a6dc:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401a6ec:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401a6fc <LfnOfs>:
2401a6fc:	07050301 12100e09 1c181614 0000001e     ................

2401a70c <Tbl>:
2401a70c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401a71c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401a72c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401a73c:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401a74c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401a75c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401a76c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401a77c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401a78c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401a79c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401a7ac:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401a7bc:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401a7cc:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401a7dc:	00da00de 00d900db 00dd00fd 00b400af     ................
2401a7ec:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401a7fc:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401a80c <cvt1.1>:
2401a80c:	031a0061 031700e0 030700f8 000100ff     a...............
2401a81c:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401a82c:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401a83c:	01840182 01860184 01870187 018a0189     ................
2401a84c:	018b018b 018e018d 0190018f 01910191     ................
2401a85c:	01940193 019601f6 01980197 023d0198     ..............=.
2401a86c:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401a87c:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401a88c:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401a89c:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401a8ac:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401a8bc:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401a8cc:	01ca01cb 011001cd 000101dd 01de018e     ................
2401a8dc:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401a8ec:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401a8fc:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401a90c:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401a91c:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401a92c:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401a93c:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401a94c:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401a95c:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401a96c:	01a90282 02850284 02870286 024401ae     ..............D.
2401a97c:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401a98c:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401a99c:	03880386 038a0389 031103b1 000203c2     ................
2401a9ac:	03a303a3 030803c4 000303cc 038e038c     ................
2401a9bc:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401a9cc:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401a9dc:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401a9ec:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401a9fc:	00000000                                ....

2401aa00 <cvt2.0>:
2401aa00:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401aa10:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401aa20:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401aa30:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401aa40:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401aa50:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401aa60:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401aa70:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401aa80:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401aa90:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401aaa0:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401aab0:	2d000164 ff410826 0000031a              d..-&.A.....

2401aabc <__leaf_table_filtertan>:
2401aabc:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
2401aacc:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
2401aadc:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
2401aaec:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
2401aafc:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
2401ab0c:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
2401ab1c:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
2401ab2c:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
2401ab3c:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
2401ab4c:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
2401ab5c:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
2401ab6c:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
2401ab7c:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
2401ab8c:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
2401ab9c:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
2401abac:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
2401abbc:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
2401abcc:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
2401abdc:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
2401abec:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
2401abfc:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
2401ac0c:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
2401ac1c:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
2401ac2c:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
2401ac3c:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
2401ac4c:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
2401ac5c:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
2401ac6c:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
2401ac7c:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
2401ac8c:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
2401ac9c:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
2401acac:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
2401acbc:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
2401accc:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
2401acdc:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
2401acec:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
2401acfc:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
2401ad0c:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
2401ad1c:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
2401ad2c:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
2401ad3c:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
2401ad4c:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
2401ad5c:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
2401ad6c:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
2401ad7c:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
2401ad8c:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
2401ad9c:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
2401adac:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
2401adbc:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
2401adcc:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
2401addc:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
2401adec:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
2401adfc:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
2401ae0c:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
2401ae1c:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
2401ae2c:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
2401ae3c:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
2401ae4c:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
2401ae5c:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
2401ae6c:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
2401ae7c:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
2401ae8c:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
2401ae9c:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
2401aeac:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
2401aebc:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
2401aecc:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
2401aedc:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
2401aeec:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
2401aefc:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
2401af0c:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
2401af1c:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
2401af2c:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
2401af3c:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
2401af4c:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
2401af5c:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
2401af6c:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
2401af7c:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
2401af8c:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
2401af9c:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
2401afac:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
2401afbc:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
2401afcc:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
2401afdc:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
2401afec:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
2401affc:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
2401b00c:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
2401b01c:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
2401b02c:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
2401b03c:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
2401b04c:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
2401b05c:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
2401b06c:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
2401b07c:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
2401b08c:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
2401b09c:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
2401b0ac:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
2401b0bc:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
2401b0cc:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
2401b0dc:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
2401b0ec:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
2401b0fc:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
2401b10c:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
2401b11c:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
2401b12c:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
2401b13c:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
2401b14c:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
2401b15c:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
2401b16c:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
2401b17c:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
2401b18c:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
2401b19c:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
2401b1ac:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
2401b1bc:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
2401b1cc:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
2401b1dc:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
2401b1ec:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
2401b1fc:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
2401b20c:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
2401b21c:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
2401b22c:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
2401b23c:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
2401b24c:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
2401b25c:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
2401b26c:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
2401b27c:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
2401b28c:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
2401b29c:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
2401b2ac:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
2401b2bc:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
2401b2cc:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
2401b2dc:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
2401b2ec:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
2401b2fc:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
2401b30c:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
2401b31c:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
2401b32c:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
2401b33c:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
2401b34c:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
2401b35c:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
2401b36c:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
2401b37c:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
2401b38c:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
2401b39c:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
2401b3ac:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
2401b3bc:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
2401b3cc:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
2401b3dc:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
2401b3ec:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
2401b3fc:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
2401b40c:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
2401b41c:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
2401b42c:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
2401b43c:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
2401b44c:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
2401b45c:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
2401b46c:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
2401b47c:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
2401b48c:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
2401b49c:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
2401b4ac:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
2401b4bc:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
2401b4cc:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
2401b4dc:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
2401b4ec:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
2401b4fc:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
2401b50c:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
2401b51c:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
2401b52c:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
2401b53c:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
2401b54c:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
2401b55c:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
2401b56c:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
2401b57c:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
2401b58c:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
2401b59c:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
2401b5ac:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
2401b5bc:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
2401b5cc:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
2401b5dc:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
2401b5ec:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
2401b5fc:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
2401b60c:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
2401b61c:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
2401b62c:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
2401b63c:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
2401b64c:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
2401b65c:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
2401b66c:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
2401b67c:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
2401b68c:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
2401b69c:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
2401b6ac:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
2401b6bc:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
2401b6cc:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
2401b6dc:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
2401b6ec:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
2401b6fc:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
2401b70c:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
2401b71c:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
2401b72c:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
2401b73c:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
2401b74c:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
2401b75c:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
2401b76c:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
2401b77c:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
2401b78c:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
2401b79c:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
2401b7ac:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
2401b7bc:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
2401b7cc:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
2401b7dc:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
2401b7ec:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
2401b7fc:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
2401b80c:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
2401b81c:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
2401b82c:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
2401b83c:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
2401b84c:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
2401b85c:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
2401b86c:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
2401b87c:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
2401b88c:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
2401b89c:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
2401b8ac:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
2401b8bc:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
2401b8cc:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
2401b8dc:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
2401b8ec:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
2401b8fc:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
2401b90c:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
2401b91c:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
2401b92c:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
2401b93c:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
2401b94c:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
2401b95c:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
2401b96c:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
2401b97c:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
2401b98c:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
2401b99c:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
2401b9ac:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
2401b9bc:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
2401b9cc:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
2401b9dc:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
2401b9ec:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
2401b9fc:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
2401ba0c:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
2401ba1c:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
2401ba2c:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
2401ba3c:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
2401ba4c:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
2401ba5c:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
2401ba6c:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
2401ba7c:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
2401ba8c:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
2401ba9c:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
2401baac:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
2401babc:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
2401bacc:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
2401badc:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
2401baec:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
2401bafc:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
2401bb0c:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
2401bb1c:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
2401bb2c:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
2401bb3c:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
2401bb4c:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
2401bb5c:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
2401bb6c:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
2401bb7c:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
2401bb8c:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
2401bb9c:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
2401bbac:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
2401bbbc:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
2401bbcc:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
2401bbdc:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
2401bbec:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
2401bbfc:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
2401bc0c:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
2401bc1c:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
2401bc2c:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
2401bc3c:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
2401bc4c:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
2401bc5c:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
2401bc6c:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
2401bc7c:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
2401bc8c:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
2401bc9c:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
2401bcac:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
2401bcbc:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
2401bccc:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
2401bcdc:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
2401bcec:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
2401bcfc:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
2401bd0c:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
2401bd1c:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
2401bd2c:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
2401bd3c:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
2401bd4c:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
2401bd5c:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
2401bd6c:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
2401bd7c:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
2401bd8c:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
2401bd9c:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
2401bdac:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
2401bdbc:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
2401bdcc:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
2401bddc:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
2401bdec:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
2401bdfc:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
2401be0c:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
2401be1c:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
2401be2c:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
2401be3c:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
2401be4c:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
2401be5c:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
2401be6c:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
2401be7c:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
2401be8c:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
2401be9c:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
2401beac:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
2401bebc:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
2401becc:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
2401bedc:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
2401beec:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
2401befc:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
2401bf0c:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
2401bf1c:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
2401bf2c:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
2401bf3c:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
2401bf4c:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
2401bf5c:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
2401bf6c:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
2401bf7c:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
2401bf8c:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
2401bf9c:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
2401bfac:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
2401bfbc:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
2401bfcc:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
2401bfdc:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
2401bfec:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
2401bffc:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
2401c00c:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
2401c01c:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
2401c02c:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
2401c03c:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
2401c04c:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
2401c05c:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
2401c06c:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
2401c07c:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
2401c08c:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
2401c09c:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
2401c0ac:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
2401c0bc:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
2401c0cc:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
2401c0dc:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
2401c0ec:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
2401c0fc:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
2401c10c:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
2401c11c:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
2401c12c:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
2401c13c:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
2401c14c:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
2401c15c:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
2401c16c:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
2401c17c:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
2401c18c:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
2401c19c:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
2401c1ac:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
2401c1bc:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
2401c1cc:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
2401c1dc:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
2401c1ec:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
2401c1fc:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
2401c20c:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
2401c21c:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
2401c22c:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
2401c23c:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
2401c24c:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
2401c25c:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
2401c26c:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
2401c27c:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
2401c28c:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
2401c29c:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
2401c2ac:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
2401c2bc:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
2401c2cc:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
2401c2dc:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
2401c2ec:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
2401c2fc:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
2401c30c:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
2401c31c:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
2401c32c:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
2401c33c:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
2401c34c:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
2401c35c:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
2401c36c:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
2401c37c:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
2401c38c:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
2401c39c:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
2401c3ac:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
2401c3bc:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
2401c3cc:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
2401c3dc:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
2401c3ec:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
2401c3fc:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
2401c40c:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
2401c41c:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
2401c42c:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
2401c43c:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
2401c44c:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
2401c45c:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
2401c46c:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
2401c47c:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
2401c48c:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
2401c49c:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
2401c4ac:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
2401c4bc:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
2401c4cc:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
2401c4dc:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
2401c4ec:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
2401c4fc:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
2401c50c:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
2401c51c:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
2401c52c:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
2401c53c:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
2401c54c:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
2401c55c:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
2401c56c:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
2401c57c:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
2401c58c:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
2401c59c:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
2401c5ac:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
2401c5bc:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
2401c5cc:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
2401c5dc:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
2401c5ec:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
2401c5fc:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
2401c60c:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
2401c61c:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
2401c62c:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
2401c63c:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
2401c64c:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
2401c65c:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
2401c66c:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
2401c67c:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
2401c68c:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
2401c69c:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
2401c6ac:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
2401c6bc:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
2401c6cc:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
2401c6dc:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
2401c6ec:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
2401c6fc:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
2401c70c:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
2401c71c:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
2401c72c:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
2401c73c:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
2401c74c:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
2401c75c:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
2401c76c:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
2401c77c:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
2401c78c:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
2401c79c:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
2401c7ac:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
2401c7bc:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
2401c7cc:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
2401c7dc:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
2401c7ec:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
2401c7fc:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
2401c80c:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
2401c81c:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
2401c82c:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
2401c83c:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
2401c84c:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
2401c85c:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
2401c86c:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
2401c87c:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
2401c88c:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
2401c89c:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
2401c8ac:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
2401c8bc:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
2401c8cc:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
2401c8dc:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
2401c8ec:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
2401c8fc:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
2401c90c:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
2401c91c:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
2401c92c:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
2401c93c:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
2401c94c:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
2401c95c:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
2401c96c:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
2401c97c:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
2401c98c:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
2401c99c:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
2401c9ac:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
2401c9bc:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
2401c9cc:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
2401c9dc:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
2401c9ec:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
2401c9fc:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
2401ca0c:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
2401ca1c:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
2401ca2c:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
2401ca3c:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
2401ca4c:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
2401ca5c:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
2401ca6c:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
2401ca7c:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
2401ca8c:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
2401ca9c:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
2401caac:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
2401cabc:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
2401cacc:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
2401cadc:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
2401caec:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
2401cafc:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
2401cb0c:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
2401cb1c:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
2401cb2c:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
2401cb3c:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
2401cb4c:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
2401cb5c:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
2401cb6c:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
2401cb7c:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
2401cb8c:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
2401cb9c:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
2401cbac:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
2401cbbc:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
2401cbcc:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
2401cbdc:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
2401cbec:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
2401cbfc:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
2401cc0c:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
2401cc1c:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
2401cc2c:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
2401cc3c:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
2401cc4c:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
2401cc5c:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
2401cc6c:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
2401cc7c:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
2401cc8c:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
2401cc9c:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
2401ccac:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
2401ccbc:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
2401cccc:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
2401ccdc:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
2401ccec:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
2401ccfc:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
2401cd0c:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
2401cd1c:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
2401cd2c:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
2401cd3c:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
2401cd4c:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
2401cd5c:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
2401cd6c:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
2401cd7c:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
2401cd8c:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
2401cd9c:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
2401cdac:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
2401cdbc:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
2401cdcc:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
2401cddc:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
2401cdec:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
2401cdfc:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
2401ce0c:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
2401ce1c:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
2401ce2c:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
2401ce3c:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
2401ce4c:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
2401ce5c:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
2401ce6c:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
2401ce7c:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
2401ce8c:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
2401ce9c:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
2401ceac:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
2401cebc:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
2401cecc:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
2401cedc:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
2401ceec:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
2401cefc:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
2401cf0c:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
2401cf1c:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
2401cf2c:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
2401cf3c:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
2401cf4c:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
2401cf5c:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
2401cf6c:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
2401cf7c:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
2401cf8c:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
2401cf9c:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
2401cfac:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
2401cfbc:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
2401cfcc:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
2401cfdc:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
2401cfec:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
2401cffc:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
2401d00c:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
2401d01c:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
2401d02c:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
2401d03c:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
2401d04c:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
2401d05c:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
2401d06c:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
2401d07c:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
2401d08c:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
2401d09c:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
2401d0ac:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
2401d0bc:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
2401d0cc:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
2401d0dc:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
2401d0ec:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
2401d0fc:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
2401d10c:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
2401d11c:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
2401d12c:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
2401d13c:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
2401d14c:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
2401d15c:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
2401d16c:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401d17c:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401d18c:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401d19c:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401d1ac:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401d1bc:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401d1cc:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401d1dc:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401d1ec:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401d1fc:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401d20c:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401d21c:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401d22c:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401d23c:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401d24c:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401d25c:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401d26c:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401d27c:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401d28c:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401d29c:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401d2ac:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401d2bc:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401d2cc:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401d2dc:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401d2ec:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401d2fc:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401d30c:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401d31c:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401d32c:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401d33c:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401d34c:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401d35c:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401d36c:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401d37c:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401d38c:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401d39c:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401d3ac:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401d3bc:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401d3cc:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401d3dc:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401d3ec:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401d3fc:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401d40c:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401d41c:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401d42c:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401d43c:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401d44c:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401d45c:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401d46c:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401d47c:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401d48c:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401d49c:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401d4ac:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401d4bc:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401d4cc:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401d4dc:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401d4ec:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401d4fc:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401d50c:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401d51c:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401d52c:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401d53c:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401d54c:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401d55c:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401d56c:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401d57c:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401d58c:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401d59c:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401d5ac:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2401d5bc:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2401d5cc:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2401d5dc:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2401d5ec:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2401d5fc:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2401d60c:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2401d61c:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2401d62c:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2401d63c:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2401d64c:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
2401d65c:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
2401d66c:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
2401d67c:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
2401d68c:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
2401d69c:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
2401d6ac:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2401d6bc:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2401d6cc:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2401d6dc:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2401d6ec:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2401d6fc:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2401d70c:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2401d71c:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2401d72c:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2401d73c:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2401d74c:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
2401d75c:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
2401d76c:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
2401d77c:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
2401d78c:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
2401d79c:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
2401d7ac:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2401d7bc:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2401d7cc:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2401d7dc:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2401d7ec:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2401d7fc:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2401d80c:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2401d81c:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2401d82c:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2401d83c:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2401d84c:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
2401d85c:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
2401d86c:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
2401d87c:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
2401d88c:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
2401d89c:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
2401d8ac:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2401d8bc:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2401d8cc:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2401d8dc:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2401d8ec:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2401d8fc:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2401d90c:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2401d91c:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2401d92c:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2401d93c:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2401d94c:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
2401d95c:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
2401d96c:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
2401d97c:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
2401d98c:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
2401d99c:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
2401d9ac:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2401d9bc:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2401d9cc:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2401d9dc:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2401d9ec:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2401d9fc:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2401da0c:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2401da1c:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2401da2c:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2401da3c:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2401da4c:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
2401da5c:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
2401da6c:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
2401da7c:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
2401da8c:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
2401da9c:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
2401daac:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2401dabc:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2401dacc:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2401dadc:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2401daec:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2401dafc:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2401db0c:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2401db1c:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2401db2c:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2401db3c:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2401db4c:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
2401db5c:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
2401db6c:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
2401db7c:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
2401db8c:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
2401db9c:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
2401dbac:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2401dbbc:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2401dbcc:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2401dbdc:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2401dbec:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2401dbfc:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2401dc0c:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2401dc1c:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2401dc2c:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2401dc3c:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2401dc4c:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
2401dc5c:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
2401dc6c:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
2401dc7c:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
2401dc8c:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
2401dc9c:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
2401dcac:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2401dcbc:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2401dccc:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2401dcdc:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2401dcec:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2401dcfc:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2401dd0c:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2401dd1c:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2401dd2c:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2401dd3c:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2401dd4c:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
2401dd5c:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
2401dd6c:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
2401dd7c:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
2401dd8c:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
2401dd9c:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
2401ddac:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2401ddbc:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2401ddcc:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2401dddc:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2401ddec:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2401ddfc:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2401de0c:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2401de1c:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2401de2c:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2401de3c:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2401de4c:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
2401de5c:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
2401de6c:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
2401de7c:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
2401de8c:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
2401de9c:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
2401deac:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2401debc:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2401decc:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2401dedc:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2401deec:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2401defc:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2401df0c:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2401df1c:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2401df2c:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2401df3c:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2401df4c:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
2401df5c:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
2401df6c:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
2401df7c:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
2401df8c:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
2401df9c:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
2401dfac:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
2401dfbc:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
2401dfcc:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
2401dfdc:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
2401dfec:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
2401dffc:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
2401e00c:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
2401e01c:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
2401e02c:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
2401e03c:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
2401e04c:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
2401e05c:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
2401e06c:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
2401e07c:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
2401e08c:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
2401e09c:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
2401e0ac:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
2401e0bc:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
2401e0cc:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
2401e0dc:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
2401e0ec:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
2401e0fc:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
2401e10c:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
2401e11c:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
2401e12c:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
2401e13c:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
2401e14c:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
2401e15c:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
2401e16c:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
2401e17c:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
2401e18c:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
2401e19c:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
2401e1ac:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
2401e1bc:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
2401e1cc:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
2401e1dc:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
2401e1ec:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
2401e1fc:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
2401e20c:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
2401e21c:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
2401e22c:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
2401e23c:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
2401e24c:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
2401e25c:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
2401e26c:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
2401e27c:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
2401e28c:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
2401e29c:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
2401e2ac:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
2401e2bc:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
2401e2cc:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
2401e2dc:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
2401e2ec:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
2401e2fc:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
2401e30c:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
2401e31c:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
2401e32c:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
2401e33c:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
2401e34c:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
2401e35c:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
2401e36c:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
2401e37c:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
2401e38c:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
2401e39c:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
2401e3ac:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
2401e3bc:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
2401e3cc:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
2401e3dc:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
2401e3ec:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
2401e3fc:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
2401e40c:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
2401e41c:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
2401e42c:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
2401e43c:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
2401e44c:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
2401e45c:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
2401e46c:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
2401e47c:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
2401e48c:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
2401e49c:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
2401e4ac:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
2401e4bc:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
2401e4cc:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
2401e4dc:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
2401e4ec:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
2401e4fc:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
2401e50c:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
2401e51c:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
2401e52c:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
2401e53c:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
2401e54c:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
2401e55c:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
2401e56c:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
2401e57c:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
2401e58c:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
2401e59c:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
2401e5ac:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2401e5bc:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2401e5cc:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2401e5dc:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2401e5ec:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2401e5fc:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2401e60c:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2401e61c:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2401e62c:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2401e63c:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2401e64c:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
2401e65c:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
2401e66c:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401e67c:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401e68c:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401e69c:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401e6ac:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401e6bc:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401e6cc:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401e6dc:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401e6ec:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401e6fc:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401e70c:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401e71c:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401e72c:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401e73c:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401e74c:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401e75c:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401e76c:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401e77c:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401e78c:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401e79c:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401e7ac:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401e7bc:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401e7cc:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401e7dc:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401e7ec:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401e7fc:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401e80c:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401e81c:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401e82c:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401e83c:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401e84c:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401e85c:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401e86c:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401e87c:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401e88c:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401e89c:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401e8ac:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401e8bc:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401e8cc:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401e8dc:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401e8ec:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401e8fc:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401e90c:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401e91c:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401e92c:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401e93c:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401e94c:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401e95c:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401e96c:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401e97c:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401e98c:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401e99c:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401e9ac:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401e9bc:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401e9cc:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401e9dc:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401e9ec:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401e9fc:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401ea0c:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401ea1c:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401ea2c:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401ea3c:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401ea4c:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401ea5c:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401ea6c:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401ea7c:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401ea8c:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401ea9c:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401eaac:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401eabc <__leaf_table_fir16XHigh>:
2401eabc:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
2401eacc:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
2401eadc:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
2401eaec:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
2401eafc:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
2401eb0c:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
2401eb1c:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
2401eb2c:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
2401eb3c:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
2401eb4c:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
2401eb5c:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
2401eb6c:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
2401eb7c:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
2401eb8c:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
2401eb9c:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
2401ebac:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
2401ebbc:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
2401ebcc:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
2401ebdc:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
2401ebec:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
2401ebfc:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
2401ec0c:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
2401ec1c:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
2401ec2c:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
2401ec3c:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
2401ec4c:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
2401ec5c:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
2401ec6c:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
2401ec7c:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
2401ec8c:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
2401ec9c:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
2401ecac:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
2401ecbc:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
2401eccc:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
2401ecdc:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
2401ecec:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
2401ecfc:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
2401ed0c:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
2401ed1c:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
2401ed2c:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
2401ed3c:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
2401ed4c:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
2401ed5c:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
2401ed6c:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
2401ed7c:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
2401ed8c:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
2401ed9c:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
2401edac:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
2401edbc:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
2401edcc:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
2401eddc:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
2401edec:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
2401edfc:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
2401ee0c:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
2401ee1c:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
2401ee2c:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
2401ee3c:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
2401ee4c:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
2401ee5c:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
2401ee6c:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
2401ee7c:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
2401ee8c:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
2401ee9c:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
2401eeac:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
2401eebc:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
2401eecc:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
2401eedc:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
2401eeec:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
2401eefc:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
2401ef0c:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
2401ef1c:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
2401ef2c:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
2401ef3c:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
2401ef4c:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
2401ef5c:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
2401ef6c:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
2401ef7c:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
2401ef8c:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
2401ef9c:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
2401efac:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
2401efbc:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
2401efcc:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
2401efdc:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
2401efec:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
2401effc:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
2401f00c:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
2401f01c:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
2401f02c:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
2401f03c:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
2401f04c:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
2401f05c:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
2401f06c:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
2401f07c:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
2401f08c:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
2401f09c:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
2401f0ac:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
2401f0bc:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
2401f0cc:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
2401f0dc:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
2401f0ec:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
2401f0fc:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
2401f10c:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
2401f11c:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
2401f12c:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
2401f13c:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
2401f14c:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
2401f15c:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
2401f16c:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
2401f17c:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
2401f18c:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
2401f19c:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
2401f1ac:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
2401f1bc:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
2401f1cc:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
2401f1dc:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
2401f1ec:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
2401f1fc:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
2401f20c:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
2401f21c:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
2401f22c:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
2401f23c:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
2401f24c:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
2401f25c:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
2401f26c:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
2401f27c:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
2401f28c:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
2401f29c:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
2401f2ac:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

2401f2bc <__leaf_table_fir16XLow>:
2401f2bc:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
2401f2cc:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
2401f2dc:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
2401f2ec:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
2401f2fc:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
2401f30c:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
2401f31c:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
2401f32c:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
2401f33c:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
2401f34c:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
2401f35c:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
2401f36c:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
2401f37c:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
2401f38c:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
2401f39c:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
2401f3ac:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
2401f3bc:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
2401f3cc:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
2401f3dc:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
2401f3ec:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
2401f3fc:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
2401f40c:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
2401f41c:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
2401f42c:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
2401f43c:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
2401f44c:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
2401f45c:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
2401f46c:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
2401f47c:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
2401f48c:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
2401f49c:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
2401f4ac:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

2401f4bc <__leaf_table_fir2XHigh>:
2401f4bc:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
2401f4cc:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
2401f4dc:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
2401f4ec:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
2401f4fc:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
2401f50c:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
2401f51c:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
2401f52c:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
2401f53c:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
2401f54c:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
2401f55c:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
2401f56c:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
2401f57c:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
2401f58c:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
2401f59c:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
2401f5ac:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
2401f5bc:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
2401f5cc:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
2401f5dc:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
2401f5ec:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
2401f5fc:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
2401f60c:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
2401f61c:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
2401f62c:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
2401f63c:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
2401f64c:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
2401f65c:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
2401f66c:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
2401f67c:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
2401f68c:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
2401f69c:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
2401f6ac:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

2401f6bc <__leaf_table_fir2XLow>:
2401f6bc:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401f6cc:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401f6dc:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401f6ec:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401f6fc:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401f70c:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401f71c:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401f72c:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401f73c <__leaf_table_fir32XHigh>:
2401f73c:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
2401f74c:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
2401f75c:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
2401f76c:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
2401f77c:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
2401f78c:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
2401f79c:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
2401f7ac:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
2401f7bc:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
2401f7cc:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
2401f7dc:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
2401f7ec:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
2401f7fc:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
2401f80c:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
2401f81c:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
2401f82c:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
2401f83c:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
2401f84c:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
2401f85c:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
2401f86c:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
2401f87c:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
2401f88c:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
2401f89c:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
2401f8ac:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
2401f8bc:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
2401f8cc:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
2401f8dc:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
2401f8ec:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
2401f8fc:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
2401f90c:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
2401f91c:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
2401f92c:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
2401f93c:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
2401f94c:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
2401f95c:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
2401f96c:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
2401f97c:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
2401f98c:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
2401f99c:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
2401f9ac:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
2401f9bc:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
2401f9cc:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
2401f9dc:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
2401f9ec:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
2401f9fc:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
2401fa0c:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
2401fa1c:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
2401fa2c:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
2401fa3c:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
2401fa4c:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
2401fa5c:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
2401fa6c:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
2401fa7c:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
2401fa8c:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
2401fa9c:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
2401faac:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
2401fabc:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
2401facc:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
2401fadc:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
2401faec:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
2401fafc:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
2401fb0c:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
2401fb1c:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
2401fb2c:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
2401fb3c:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
2401fb4c:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
2401fb5c:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
2401fb6c:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
2401fb7c:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
2401fb8c:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
2401fb9c:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
2401fbac:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
2401fbbc:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
2401fbcc:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
2401fbdc:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
2401fbec:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
2401fbfc:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
2401fc0c:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
2401fc1c:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
2401fc2c:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
2401fc3c:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
2401fc4c:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
2401fc5c:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
2401fc6c:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
2401fc7c:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
2401fc8c:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
2401fc9c:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
2401fcac:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
2401fcbc:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
2401fccc:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
2401fcdc:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
2401fcec:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
2401fcfc:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
2401fd0c:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
2401fd1c:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
2401fd2c:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
2401fd3c:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
2401fd4c:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
2401fd5c:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
2401fd6c:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
2401fd7c:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
2401fd8c:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
2401fd9c:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
2401fdac:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
2401fdbc:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
2401fdcc:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
2401fddc:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
2401fdec:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
2401fdfc:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
2401fe0c:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
2401fe1c:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
2401fe2c:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
2401fe3c:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
2401fe4c:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
2401fe5c:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
2401fe6c:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
2401fe7c:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
2401fe8c:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
2401fe9c:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
2401feac:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
2401febc:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
2401fecc:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
2401fedc:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
2401feec:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
2401fefc:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
2401ff0c:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
2401ff1c:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
2401ff2c:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

2401ff3c <__leaf_table_fir32XLow>:
2401ff3c:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
2401ff4c:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
2401ff5c:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
2401ff6c:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
2401ff7c:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
2401ff8c:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
2401ff9c:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
2401ffac:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
2401ffbc:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
2401ffcc:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
2401ffdc:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
2401ffec:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
2401fffc:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
2402000c:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
2402001c:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
2402002c:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
2402003c:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
2402004c:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
2402005c:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
2402006c:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
2402007c:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
2402008c:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
2402009c:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
240200ac:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
240200bc:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
240200cc:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
240200dc:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
240200ec:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
240200fc:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
2402010c:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
2402011c:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
2402012c:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
2402013c:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
2402014c:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
2402015c:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
2402016c:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
2402017c:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
2402018c:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
2402019c:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
240201ac:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
240201bc:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
240201cc:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
240201dc:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
240201ec:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
240201fc:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
2402020c:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
2402021c:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
2402022c:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
2402023c:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
2402024c:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
2402025c:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
2402026c:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
2402027c:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
2402028c:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
2402029c:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
240202ac:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
240202bc:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
240202cc:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
240202dc:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
240202ec:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
240202fc:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
2402030c:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
2402031c:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
2402032c:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

2402033c <__leaf_table_fir4XHigh>:
2402033c:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
2402034c:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
2402035c:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
2402036c:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
2402037c:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
2402038c:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
2402039c:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
240203ac:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
240203bc:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
240203cc:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
240203dc:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
240203ec:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
240203fc:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
2402040c:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
2402041c:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
2402042c:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
2402043c:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
2402044c:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
2402045c:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
2402046c:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
2402047c:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
2402048c:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
2402049c:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
240204ac:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
240204bc:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
240204cc:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
240204dc:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
240204ec:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
240204fc:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
2402050c:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
2402051c:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
2402052c:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
2402053c:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
2402054c:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
2402055c:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
2402056c:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
2402057c:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
2402058c:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
2402059c:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
240205ac:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
240205bc:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
240205cc:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
240205dc:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
240205ec:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
240205fc:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
2402060c:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
2402061c:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
2402062c:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
2402063c:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
2402064c:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
2402065c:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
2402066c:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
2402067c:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
2402068c:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
2402069c:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
240206ac:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
240206bc:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
240206cc:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
240206dc:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
240206ec:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
240206fc:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
2402070c:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
2402071c:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
2402072c:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

2402073c <__leaf_table_fir4XLow>:
2402073c:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
2402074c:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
2402075c:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
2402076c:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
2402077c:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
2402078c:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
2402079c:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
240207ac:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
240207bc:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
240207cc:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
240207dc:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
240207ec:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
240207fc:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
2402080c:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
2402081c:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
2402082c:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

2402083c <__leaf_table_fir64XHigh>:
2402083c:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
2402084c:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
2402085c:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
2402086c:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
2402087c:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
2402088c:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
2402089c:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
240208ac:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
240208bc:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
240208cc:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
240208dc:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
240208ec:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
240208fc:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
2402090c:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
2402091c:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
2402092c:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
2402093c:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
2402094c:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
2402095c:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
2402096c:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
2402097c:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
2402098c:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
2402099c:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
240209ac:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
240209bc:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
240209cc:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
240209dc:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
240209ec:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
240209fc:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
24020a0c:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
24020a1c:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
24020a2c:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
24020a3c:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
24020a4c:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
24020a5c:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
24020a6c:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
24020a7c:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
24020a8c:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
24020a9c:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
24020aac:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
24020abc:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
24020acc:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
24020adc:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
24020aec:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
24020afc:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
24020b0c:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
24020b1c:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
24020b2c:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
24020b3c:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
24020b4c:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
24020b5c:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
24020b6c:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
24020b7c:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
24020b8c:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
24020b9c:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
24020bac:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
24020bbc:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
24020bcc:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
24020bdc:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
24020bec:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
24020bfc:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
24020c0c:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
24020c1c:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
24020c2c:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
24020c3c:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
24020c4c:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
24020c5c:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
24020c6c:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
24020c7c:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
24020c8c:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
24020c9c:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
24020cac:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
24020cbc:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
24020ccc:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
24020cdc:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
24020cec:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
24020cfc:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
24020d0c:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
24020d1c:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
24020d2c:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
24020d3c:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
24020d4c:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
24020d5c:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
24020d6c:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
24020d7c:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
24020d8c:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
24020d9c:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
24020dac:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
24020dbc:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
24020dcc:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
24020ddc:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
24020dec:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
24020dfc:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
24020e0c:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
24020e1c:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
24020e2c:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
24020e3c:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
24020e4c:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
24020e5c:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
24020e6c:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
24020e7c:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
24020e8c:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
24020e9c:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
24020eac:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
24020ebc:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
24020ecc:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
24020edc:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
24020eec:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
24020efc:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
24020f0c:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
24020f1c:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
24020f2c:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
24020f3c:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
24020f4c:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
24020f5c:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
24020f6c:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
24020f7c:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
24020f8c:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
24020f9c:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
24020fac:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
24020fbc:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
24020fcc:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
24020fdc:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
24020fec:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
24020ffc:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
2402100c:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
2402101c:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
2402102c:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
2402103c:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
2402104c:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
2402105c:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
2402106c:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
2402107c:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
2402108c:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
2402109c:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
240210ac:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
240210bc:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
240210cc:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
240210dc:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
240210ec:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
240210fc:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
2402110c:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
2402111c:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
2402112c:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
2402113c:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
2402114c:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
2402115c:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
2402116c:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
2402117c:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
2402118c:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
2402119c:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
240211ac:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
240211bc:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
240211cc:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
240211dc:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
240211ec:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
240211fc:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
2402120c:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
2402121c:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
2402122c:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
2402123c:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
2402124c:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
2402125c:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
2402126c:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
2402127c:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
2402128c:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
2402129c:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
240212ac:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
240212bc:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
240212cc:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
240212dc:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
240212ec:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
240212fc:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
2402130c:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
2402131c:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
2402132c:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
2402133c:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
2402134c:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
2402135c:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
2402136c:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
2402137c:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
2402138c:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
2402139c:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
240213ac:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
240213bc:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
240213cc:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
240213dc:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
240213ec:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
240213fc:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
2402140c:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
2402141c:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
2402142c:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
2402143c:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
2402144c:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
2402145c:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
2402146c:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
2402147c:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
2402148c:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
2402149c:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
240214ac:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
240214bc:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
240214cc:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
240214dc:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
240214ec:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
240214fc:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
2402150c:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
2402151c:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
2402152c:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
2402153c:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
2402154c:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
2402155c:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
2402156c:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
2402157c:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
2402158c:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
2402159c:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
240215ac:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
240215bc:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
240215cc:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
240215dc:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
240215ec:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
240215fc:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
2402160c:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
2402161c:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
2402162c:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
2402163c:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
2402164c:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
2402165c:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
2402166c:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
2402167c:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
2402168c:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
2402169c:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
240216ac:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
240216bc:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
240216cc:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
240216dc:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
240216ec:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
240216fc:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
2402170c:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
2402171c:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
2402172c:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
2402173c:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
2402174c:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
2402175c:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
2402176c:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
2402177c:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
2402178c:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
2402179c:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
240217ac:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
240217bc:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
240217cc:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
240217dc:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
240217ec:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
240217fc:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
2402180c:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
2402181c:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
2402182c:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

2402183c <__leaf_table_fir64XLow>:
2402183c:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
2402184c:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
2402185c:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
2402186c:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
2402187c:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
2402188c:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
2402189c:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
240218ac:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
240218bc:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
240218cc:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
240218dc:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
240218ec:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
240218fc:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
2402190c:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
2402191c:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
2402192c:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
2402193c:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
2402194c:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
2402195c:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
2402196c:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
2402197c:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
2402198c:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
2402199c:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
240219ac:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
240219bc:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
240219cc:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
240219dc:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
240219ec:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
240219fc:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
24021a0c:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
24021a1c:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
24021a2c:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
24021a3c:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
24021a4c:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
24021a5c:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
24021a6c:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
24021a7c:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
24021a8c:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
24021a9c:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
24021aac:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
24021abc:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
24021acc:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
24021adc:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
24021aec:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
24021afc:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
24021b0c:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
24021b1c:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
24021b2c:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
24021b3c:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
24021b4c:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
24021b5c:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
24021b6c:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
24021b7c:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
24021b8c:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
24021b9c:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
24021bac:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
24021bbc:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
24021bcc:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
24021bdc:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
24021bec:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
24021bfc:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
24021c0c:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
24021c1c:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
24021c2c:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

24021c3c <__leaf_table_fir8XHigh>:
24021c3c:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
24021c4c:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
24021c5c:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
24021c6c:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
24021c7c:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
24021c8c:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
24021c9c:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
24021cac:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
24021cbc:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
24021ccc:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
24021cdc:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
24021cec:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
24021cfc:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
24021d0c:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
24021d1c:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
24021d2c:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
24021d3c:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
24021d4c:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
24021d5c:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
24021d6c:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
24021d7c:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
24021d8c:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
24021d9c:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
24021dac:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
24021dbc:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
24021dcc:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
24021ddc:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
24021dec:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
24021dfc:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
24021e0c:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
24021e1c:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
24021e2c:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
24021e3c:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
24021e4c:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
24021e5c:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
24021e6c:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
24021e7c:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
24021e8c:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
24021e9c:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
24021eac:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
24021ebc:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
24021ecc:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
24021edc:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
24021eec:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
24021efc:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
24021f0c:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
24021f1c:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
24021f2c:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
24021f3c:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
24021f4c:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
24021f5c:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
24021f6c:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
24021f7c:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
24021f8c:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
24021f9c:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
24021fac:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
24021fbc:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
24021fcc:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
24021fdc:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
24021fec:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
24021ffc:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
2402200c:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
2402201c:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
2402202c:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

2402203c <__leaf_table_fir8XLow>:
2402203c:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
2402204c:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
2402205c:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
2402206c:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
2402207c:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
2402208c:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
2402209c:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
240220ac:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
240220bc:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
240220cc:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
240220dc:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
240220ec:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
240220fc:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
2402210c:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
2402211c:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
2402212c:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

2402213c <__leaf_table_sinewave>:
2402213c:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2402214c:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2402215c:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2402216c:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2402217c:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2402218c:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2402219c:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
240221ac:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
240221bc:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
240221cc:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
240221dc:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
240221ec:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
240221fc:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2402220c:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2402221c:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2402222c:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2402223c:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2402224c:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2402225c:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2402226c:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2402227c:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2402228c:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2402229c:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
240222ac:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
240222bc:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
240222cc:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
240222dc:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
240222ec:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
240222fc:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2402230c:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2402231c:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2402232c:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2402233c:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2402234c:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2402235c:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2402236c:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2402237c:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2402238c:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2402239c:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
240223ac:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
240223bc:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
240223cc:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
240223dc:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
240223ec:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
240223fc:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2402240c:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2402241c:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2402242c:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2402243c:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2402244c:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2402245c:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2402246c:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2402247c:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2402248c:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2402249c:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
240224ac:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
240224bc:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
240224cc:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
240224dc:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
240224ec:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
240224fc:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2402250c:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2402251c:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2402252c:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2402253c:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2402254c:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2402255c:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2402256c:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2402257c:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2402258c:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2402259c:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
240225ac:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
240225bc:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
240225cc:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
240225dc:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
240225ec:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
240225fc:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2402260c:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2402261c:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2402262c:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2402263c:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2402264c:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2402265c:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2402266c:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2402267c:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2402268c:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2402269c:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
240226ac:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
240226bc:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
240226cc:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
240226dc:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
240226ec:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
240226fc:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2402270c:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2402271c:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2402272c:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2402273c:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2402274c:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2402275c:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2402276c:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2402277c:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2402278c:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2402279c:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
240227ac:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
240227bc:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
240227cc:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
240227dc:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
240227ec:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
240227fc:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2402280c:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2402281c:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2402282c:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2402283c:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2402284c:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2402285c:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2402286c:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2402287c:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2402288c:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2402289c:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
240228ac:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
240228bc:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
240228cc:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
240228dc:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
240228ec:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
240228fc:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2402290c:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2402291c:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2402292c:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2402293c:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2402294c:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2402295c:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2402296c:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2402297c:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2402298c:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2402299c:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
240229ac:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
240229bc:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
240229cc:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
240229dc:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
240229ec:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
240229fc:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24022a0c:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24022a1c:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24022a2c:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24022a3c:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
24022a4c:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
24022a5c:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
24022a6c:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
24022a7c:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
24022a8c:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
24022a9c:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
24022aac:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24022abc:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24022acc:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24022adc:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24022aec:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24022afc:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24022b0c:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24022b1c:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24022b2c:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24022b3c:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
24022b4c:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
24022b5c:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
24022b6c:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
24022b7c:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
24022b8c:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
24022b9c:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
24022bac:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
24022bbc:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
24022bcc:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
24022bdc:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
24022bec:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24022bfc:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24022c0c:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24022c1c:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24022c2c:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24022c3c:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
24022c4c:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
24022c5c:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
24022c6c:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
24022c7c:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
24022c8c:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
24022c9c:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
24022cac:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
24022cbc:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
24022ccc:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
24022cdc:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
24022cec:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24022cfc:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24022d0c:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24022d1c:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24022d2c:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24022d3c:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
24022d4c:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
24022d5c:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
24022d6c:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
24022d7c:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
24022d8c:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
24022d9c:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
24022dac:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
24022dbc:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
24022dcc:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
24022ddc:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
24022dec:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24022dfc:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24022e0c:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24022e1c:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24022e2c:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24022e3c:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
24022e4c:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
24022e5c:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
24022e6c:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
24022e7c:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
24022e8c:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
24022e9c:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
24022eac:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
24022ebc:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
24022ecc:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
24022edc:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
24022eec:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
24022efc:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24022f0c:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24022f1c:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24022f2c:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24022f3c:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
24022f4c:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
24022f5c:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
24022f6c:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
24022f7c:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
24022f8c:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
24022f9c:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
24022fac:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
24022fbc:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
24022fcc:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
24022fdc:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
24022fec:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24022ffc:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2402300c:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2402301c:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2402302c:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2402303c:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2402304c:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2402305c:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2402306c:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2402307c:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2402308c:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2402309c:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
240230ac:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
240230bc:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
240230cc:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
240230dc:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
240230ec:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
240230fc:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2402310c:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2402311c:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2402312c:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2402313c:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2402314c:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2402315c:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2402316c:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2402317c:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2402318c:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2402319c:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
240231ac:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
240231bc:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
240231cc:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
240231dc:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
240231ec:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
240231fc:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2402320c:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2402321c:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2402322c:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2402323c:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2402324c:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2402325c:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2402326c:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2402327c:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2402328c:	be827fa2 be84039b be858794 be870b8d     ................
2402329c:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
240232ac:	be8e9b7c be901b86 be919f80 be931f8a     |...............
240232bc:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
240232cc:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
240232dc:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
240232ec:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
240232fc:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2402330c:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2402331c:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2402332c:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2402333c:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2402334c:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2402335c:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2402336c:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2402337c:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2402338c:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2402339c:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
240233ac:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
240233bc:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
240233cc:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
240233dc:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
240233ec:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
240233fc:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2402340c:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2402341c:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2402342c:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2402343c:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2402344c:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2402345c:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2402346c:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2402347c:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2402348c:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2402349c:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
240234ac:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
240234bc:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
240234cc:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
240234dc:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
240234ec:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
240234fc:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2402350c:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2402351c:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2402352c:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2402353c:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2402354c:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2402355c:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2402356c:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2402357c:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2402358c:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2402359c:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
240235ac:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
240235bc:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
240235cc:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
240235dc:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
240235ec:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
240235fc:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2402360c:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2402361c:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2402362c:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2402363c:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2402364c:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2402365c:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2402366c:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2402367c:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2402368c:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2402369c:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
240236ac:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
240236bc:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
240236cc:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
240236dc:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
240236ec:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
240236fc:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2402370c:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2402371c:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2402372c:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2402373c:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2402374c:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2402375c:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2402376c:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2402377c:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2402378c:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2402379c:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
240237ac:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
240237bc:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
240237cc:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
240237dc:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
240237ec:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
240237fc:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2402380c:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2402381c:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2402382c:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2402383c:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2402384c:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2402385c:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2402386c:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2402387c:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2402388c:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2402389c:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
240238ac:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
240238bc:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
240238cc:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
240238dc:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
240238ec:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
240238fc:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2402390c:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2402391c:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2402392c:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2402393c:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2402394c:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2402395c:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2402396c:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2402397c:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2402398c:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2402399c:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
240239ac:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
240239bc:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
240239cc:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
240239dc:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
240239ec:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
240239fc:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24023a0c:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24023a1c:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24023a2c:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24023a3c:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
24023a4c:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
24023a5c:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
24023a6c:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
24023a7c:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
24023a8c:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
24023a9c:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
24023aac:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24023abc:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24023acc:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24023adc:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24023aec:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24023afc:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24023b0c:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24023b1c:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24023b2c:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24023b3c:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
24023b4c:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
24023b5c:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
24023b6c:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
24023b7c:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
24023b8c:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
24023b9c:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
24023bac:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
24023bbc:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
24023bcc:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
24023bdc:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
24023bec:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
24023bfc:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
24023c0c:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
24023c1c:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
24023c2c:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
24023c3c:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
24023c4c:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
24023c5c:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
24023c6c:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
24023c7c:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
24023c8c:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
24023c9c:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
24023cac:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
24023cbc:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
24023ccc:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
24023cdc:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
24023cec:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
24023cfc:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
24023d0c:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
24023d1c:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
24023d2c:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
24023d3c:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
24023d4c:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
24023d5c:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
24023d6c:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
24023d7c:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
24023d8c:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
24023d9c:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
24023dac:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
24023dbc:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
24023dcc:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
24023ddc:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
24023dec:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
24023dfc:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
24023e0c:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
24023e1c:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
24023e2c:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
24023e3c:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
24023e4c:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
24023e5c:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
24023e6c:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
24023e7c:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
24023e8c:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
24023e9c:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
24023eac:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
24023ebc:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
24023ecc:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
24023edc:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
24023eec:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
24023efc:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
24023f0c:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
24023f1c:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
24023f2c:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
24023f3c:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
24023f4c:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
24023f5c:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
24023f6c:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
24023f7c:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
24023f8c:	bea69058 bea5143c bea39820 bea21816     X...<... .......
24023f9c:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
24023fac:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
24023fbc:	be949f95 be931f8a be919f80 be901b86     ................
24023fcc:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
24023fdc:	be888f86 be870b8d be858794 be84039b     ................
24023fec:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
24023ffc:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2402400c:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2402401c:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2402402c:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2402403c:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2402404c:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2402405c:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2402406c:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2402407c:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2402408c:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2402409c:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
240240ac:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
240240bc:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
240240cc:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
240240dc:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
240240ec:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
240240fc:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2402410c:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2402411c:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2402412c:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2402413c <__leaf_tablesize_firNumTaps>:
2402413c:	42000000 42800000 42800000 43000000     ...B...B...B...C
2402414c:	43800000 43800000 43000000 43800000     ...C...C...C...C
2402415c:	43800000 44000000 44000000 44800000     ...C...D...D...D
	...

240241bc <slope_dd_table>:
	...
24024258:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
24024268:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
24024278:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
24024288:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
24024298:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
240242a8:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
240242b8:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
240242c8:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
240242d8:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
240242e8:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
240242f8:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
24024308:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
24024318:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
24024328:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
24024338:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
24024348:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
24024358:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
24024368:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
24024378:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
24024388:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
24024398:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
240243a8:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
240243b8:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
240243c8:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
240243d8:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
240243e8:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
240243f8:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
24024408:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
24024418:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
24024428:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
24024438:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
24024448:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
24024458:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
24024468:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
24024478:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
24024488:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
24024498:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
240244a8:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
240244b8:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
240244c8:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
240244d8:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
240244e8:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
240244f8:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
24024508:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
24024518:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
24024528:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
24024538:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
24024548:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
24024558:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
24024568:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
24024578:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
24024588:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
24024598:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
240245a8:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
240245b8:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
240245c8:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
240245d8:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
240245e8:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
240245f8:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
24024608:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
24024618:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
24024628:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
24024638:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
24024648:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
24024658:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
24024668:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
24024678:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
24024688:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
24024698:	be0eae12 be10148d be1152be be1268fb     .........R...h..
240246a8:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
240246b8:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
240246c8:	be15718f be15109e be148cff be13e73e     .q..........>...
240246d8:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
240246e8:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
240246f8:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
24024708:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
24024718:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
24024728:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
24024738:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
24024748:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
24024758:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
24024768:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
24024778:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
24024788:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
24024798:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
240247a8:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
240247b8:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
240247c8:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
240247d8:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
240247e8:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
240247f8:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
24024808:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
24024818:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
24024828:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
24024838:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
24024848:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
24024858:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
24024868:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
24024878:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
24024888:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
24024898:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
240248a8:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
240248b8:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
240248c8:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
240248d8:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
240248e8:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
240248f8:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
24024908:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
24024918:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
24024928:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
24024938:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
24024948:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
24024958:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
24024968:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
24024978:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
24024988:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
24024998:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
240249a8:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
240249b8:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
240249c8:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
240249d8:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
240249e8:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
240249f8:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
24024a08:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
24024a18:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
24024a28:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
24024a38:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
24024a48:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
24024a58:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
24024a68:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
24024a78:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
24024a88:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
24024a98:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
24024aa8:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
24024ab8:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
24024ac8:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
24024ad8:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
24024ae8:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
24024af8:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
24024b08:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
24024b18:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
24024b28:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
24024b38:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
24024b48:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
24024b58:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
24024b68:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
24024b78:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
24024b88:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
24024b98:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
24024ba8:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
24024bb8:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
24024bc8:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
24024bd8:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
24024be8:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
24024bf8:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
24024c08:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
24024c18:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
24024c28:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
24024c38:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
24024c48:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
24024c58:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
24024c68:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
24024c78:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
24024c88:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
24024c98:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
24024ca8:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
24024cb8:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
24024cc8:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
24024cd8:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
24024ce8:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
24024cf8:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
24024d08:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
24024d18:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
24024d28:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
24024d38:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
24024d48:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
24024d58:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
24024d68:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
24024d78:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
24024d88:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
24024d98:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
24024da8:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
24024db8:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
24024dc8:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
24024dd8:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
24024de8:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
24024df8:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
24024e08:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
24024e18:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
24024e28:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
24024e38:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
24024e48:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
24024e58:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
24024e68:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
24024e78:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
24024e88:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
24024e98:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
24024ea8:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
24024eb8:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
24024ec8:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
24024ed8:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
24024ee8:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
24024ef8:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
24024f08:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
24024f18:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
24024f28:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
24024f38:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
24024f48:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
24024f58:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
24024f68:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
24024f78:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
24024f88:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
24024f98:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
24024fa8:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
24024fb8:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
24024fc8:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
24024fd8:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
24024fe8:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
24024ff8:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
24025008:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
24025018:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
24025028:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
24025038:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
24025048:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
24025058:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
24025068:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
24025078:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
24025088:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
24025098:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
240250a8:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
240250b8:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
240250c8:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
240250d8:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
240250e8:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
240250f8:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
24025108:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
24025118:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
24025128:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
24025138:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
24025148:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
24025158:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
24025168:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
24025178:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
24025188:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
24025198:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
240251a8:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
240251b8:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
240251c8:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
240251d8:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
240251e8:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
240251f8:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
24025208:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
24025218:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
24025228:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
24025238:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
24025248:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
24025258:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
24025268:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
24025278:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
24025288:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
24025298:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
240252a8:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
240252b8:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
240252c8:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
240252d8:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
240252e8:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
240252f8:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
24025308:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
24025318:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
24025328:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
24025338:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
24025348:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
24025358:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
24025368:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
24025378:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
24025388:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
24025398:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
240253a8:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
240253b8:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
240253c8:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
240253d8:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
240253e8:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
240253f8:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
24025408:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
24025418:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
24025428:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
24025438:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
24025448:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
24025458:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
24025468:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
24025478:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
24025488:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
24025498:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
240254a8:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
240254b8:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
240254c8:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
240254d8:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
240254e8:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
240254f8:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
24025508:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
24025518:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
24025528:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
24025538:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
24025548:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
24025558:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
24025568:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
24025578:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
24025588:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
24025598:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
240255a8:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
240255b8:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
240255c8:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
240255d8:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
240255e8:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
240255f8:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
24025608:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
24025618:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
24025628:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
24025638:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
24025648:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
24025658:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
24025668:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
24025678:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
24025688:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
24025698:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
240256a8:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
240256b8:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
240256c8:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
240256d8:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
240256e8:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
240256f8:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
24025708:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
24025718:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
24025728:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
24025738:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
24025748:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
24025758:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
24025768:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
24025778:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
24025788:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
24025798:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
240257a8:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
240257b8:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
240257c8:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
240257d8:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
240257e8:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
240257f8:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
24025808:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
24025818:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
24025828:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
24025838:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
24025848:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
24025858:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
24025868:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
24025878:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
24025888:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
24025898:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
240258a8:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
240258b8:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
240258c8:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
240258d8:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
240258e8:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
240258f8:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
24025908:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
24025918:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
24025928:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
24025938:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
24025948:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
24025958:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
24025968:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
24025978:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
24025988:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
24025998:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
240259a8:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
240259b8:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
240259c8:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
240259d8:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
240259e8:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
240259f8:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
24025a08:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
24025a18:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
24025a28:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
24025a38:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
24025a48:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
24025a58:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
24025a68:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
24025a78:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
24025a88:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
24025a98:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
24025aa8:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
24025ab8:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
24025ac8:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
24025ad8:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
24025ae8:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
24025af8:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
24025b08:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
24025b18:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
24025b28:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
24025b38:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
24025b48:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
24025b58:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
24025b68:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
24025b78:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
24025b88:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
24025b98:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
24025ba8:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
24025bb8:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
24025bc8:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
24025bd8:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
24025be8:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
24025bf8:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
24025c08:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
24025c18:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
24025c28:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
24025c38:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
24025c48:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
24025c58:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
24025c68:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
24025c78:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
24025c88:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
24025c98:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
24025ca8:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
24025cb8:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
24025cc8:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
24025cd8:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
24025ce8:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
24025cf8:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
24025d08:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
24025d18:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
24025d28:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
24025d38:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
24025d48:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
24025d58:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
24025d68:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
24025d78:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
24025d88:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
24025d98:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
24025da8:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
24025db8:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
24025dc8:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
24025dd8:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
24025de8:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
24025df8:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
24025e08:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
24025e18:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
24025e28:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
24025e38:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
24025e48:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
24025e58:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
24025e68:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
24025e78:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
24025e88:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
24025e98:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
24025ea8:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
24025eb8:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
24025ec8:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
24025ed8:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
24025ee8:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
24025ef8:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
24025f08:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
24025f18:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
24025f28:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
24025f38:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
24025f48:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
24025f58:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
24025f68:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
24025f78:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
24025f88:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
24025f98:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
24025fa8:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
24025fb8:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
24025fc8:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
24025fd8:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
24025fe8:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
24025ff8:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
24026008:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
24026018:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
24026028:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
24026038:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
24026048:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
24026058:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
24026068:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
24026078:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
24026088:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
24026098:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
240260a8:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
240260b8:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
240260c8:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
240260d8:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
240260e8:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
240260f8:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
24026108:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
24026118:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
24026128:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
24026138:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
24026148:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
24026158:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
24026168:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
24026178:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
24026188:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
24026198:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
240261a8:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
240261b8:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
240261c8:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
240261d8:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
240261e8:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
240261f8:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
24026208:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
24026218:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
24026228:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
24026238:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
24026248:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
24026258:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
24026268:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24026278:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24026288:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24026298:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
240262a8:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
240262b8:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
240262c8:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
240262d8:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
240262e8:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
240262f8:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
24026308:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
24026318:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
24026328:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
24026338:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
24026348:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
24026358:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
24026368:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24026378:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24026388:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24026398:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
240263a8:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
240263b8:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
240263c8:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
240263d8:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
240263e8:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
240263f8:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
24026408:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
24026418:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
24026428:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
24026438:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
24026448:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
24026458:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
24026468:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24026478:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24026488:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24026498:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
240264a8:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
240264b8:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
240264c8:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
240264d8:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
240264e8:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
240264f8:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
24026508:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
24026518:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
24026528:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
24026538:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
24026548:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
24026558:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
24026568:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24026578:	babf16bd babb96cd bab7bd01 bab38bab     ................
24026588:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24026598:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
240265a8:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
240265b8:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
240265c8:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
240265d8:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
240265e8:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
240265f8:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
24026608:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24026618:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24026628:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24026638:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24026648:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
24026658:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
24026668:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
24026678:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
24026688:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
24026698:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
240266a8:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
240266b8:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
240266c8:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
240266d8:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
240266e8:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
240266f8:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
24026708:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
24026718:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
24026728:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
24026738:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
24026748:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
24026758:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
24026768:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
24026778:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24026788:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24026798:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
240267a8:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
240267b8:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
240267c8:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
240267d8:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
240267e8:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
240267f8:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24026808:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
24026818:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
24026828:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
24026838:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
24026848:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
24026858:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
24026868:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
24026878:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
24026888:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
24026898:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
240268a8:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
240268b8:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
240268c8:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
240268d8:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
240268e8:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
240268f8:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24026908:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
24026918:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
24026928:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
24026938:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
24026948:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
24026958:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
24026968:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
24026978:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
24026988:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
24026998:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
240269a8:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
240269b8:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
240269c8:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
240269d8:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
240269e8:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
240269f8:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24026a08:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
24026a18:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
24026a28:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
24026a38:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
24026a48:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
24026a58:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
24026a68:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
24026a78:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
24026a88:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
24026a98:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
24026aa8:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24026ab8:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24026ac8:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24026ad8:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24026ae8:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24026af8:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24026b08:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
24026b18:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
24026b28:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
24026b38:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
24026b48:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
24026b58:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
24026b68:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
24026b78:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
24026b88:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
24026b98:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
24026ba8:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24026bb8:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24026bc8:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24026bd8:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24026be8:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24026bf8:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24026c08:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
24026c18:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
24026c28:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
24026c38:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
24026c48:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
24026c58:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
24026c68:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
24026c78:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
24026c88:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
24026c98:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
24026ca8:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24026cb8:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24026cc8:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24026cd8:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24026ce8:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24026cf8:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24026d08:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
24026d18:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
24026d28:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
24026d38:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
24026d48:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
24026d58:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
24026d68:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
24026d78:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
24026d88:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
24026d98:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
24026da8:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
24026db8:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
24026dc8:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
24026dd8:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
24026de8:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
24026df8:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
24026e08:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
24026e18:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
24026e28:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
24026e38:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
24026e48:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
24026e58:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
24026e68:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
24026e78:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
24026e88:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
24026e98:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
24026ea8:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
24026eb8:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
24026ec8:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
24026ed8:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
24026ee8:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
24026ef8:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
24026f08:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
24026f18:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
24026f28:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
24026f38:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
24026f48:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
24026f58:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
24026f68:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
24026f78:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
24026f88:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
24026f98:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
24026fa8:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
24026fb8:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
24026fc8:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
24026fd8:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
24026fe8:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
24026ff8:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
24027008:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
24027018:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
24027028:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
24027038:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
24027048:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
24027058:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
24027068:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
24027078:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
24027088:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
24027098:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
240270a8:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
240270b8:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
240270c8:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
240270d8:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
240270e8:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
240270f8:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
24027108:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
24027118:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
24027128:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
24027138:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
24027148:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
24027158:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
24027168:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
24027178:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
24027188:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
24027198:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
240271a8:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
240271b8:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
240271c8:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
240271d8:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
240271e8:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
240271f8:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24027208:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24027218:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24027228:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24027238:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24027248:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24027258:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24027268:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24027278:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24027288:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24027298:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
240272a8:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
240272b8:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
240272c8:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
240272d8:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
240272e8:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
240272f8:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24027308:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24027318:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24027328:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24027338:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24027348:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24027358:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24027368:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24027378:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24027388:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24027398:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
240273a8:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
240273b8:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
240273c8:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
240273d8:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
240273e8:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
240273f8:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24027408:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24027418:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24027428:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24027438:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24027448:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24027458:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24027468:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24027478:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24027488:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24027498:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
240274a8:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
240274b8:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
240274c8:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
240274d8:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
240274e8:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
240274f8:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24027508:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24027518:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24027528:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24027538:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24027548:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24027558:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24027568:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24027578:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24027588:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24027598:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
240275a8:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
240275b8:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
240275c8:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
240275d8:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
240275e8:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
240275f8:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
24027608:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24027618:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24027628:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24027638:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24027648:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24027658:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24027668:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24027678:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24027688:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24027698:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
240276a8:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
240276b8:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
240276c8:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
240276d8:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
240276e8:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
240276f8:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
24027708:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
24027718:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
24027728:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
24027738:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
24027748:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
24027758:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
24027768:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24027778:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24027788:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24027798:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
240277a8:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
240277b8:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
240277c8:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
240277d8:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
240277e8:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
240277f8:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
24027808:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
24027818:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
24027828:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
24027838:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
24027848:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
24027858:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
24027868:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
24027878:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
24027888:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
24027898:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
240278a8:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
240278b8:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
240278c8:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
240278d8:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
240278e8:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
240278f8:	b808d82b b80a8abf b80befed b80d078a     +...............
24027908:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
24027918:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
24027928:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
24027938:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
24027948:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
24027958:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
24027968:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
24027978:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
24027988:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
24027998:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
240279a8:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
240279b8:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
240279c8:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
240279d8:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
240279e8:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
240279f8:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
24027a08:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
24027a18:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
24027a28:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
24027a38:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
24027a48:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
24027a58:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
24027a68:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
24027a78:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
24027a88:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
24027a98:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
24027aa8:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
24027ab8:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
24027ac8:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
24027ad8:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
24027ae8:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
24027af8:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
24027b08:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
24027b18:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
24027b28:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
24027b38:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
24027b48:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
24027b58:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
24027b68:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
24027b78:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
24027b88:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
24027b98:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
24027ba8:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
24027bb8:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
24027bc8:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
24027bd8:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
24027be8:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
24027bf8:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
24027c08:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
24027c18:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
24027c28:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
24027c38:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
24027c48:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
24027c58:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
24027c68:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
24027c78:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
24027c88:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
24027c98:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
24027ca8:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
24027cb8:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
24027cc8:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
24027cd8:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
24027ce8:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
24027cf8:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
24027d08:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
24027d18:	b7087574 b70df990 b713221d b717ed03     tu......."......
24027d28:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
24027d38:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
24027d48:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
24027d58:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
24027d68:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
24027d78:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
24027d88:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
24027d98:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
24027da8:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
24027db8:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
24027dc8:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
24027dd8:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
24027de8:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
24027df8:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
24027e08:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
24027e18:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
24027e28:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
24027e38:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
24027e48:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
24027e58:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
24027e68:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
24027e78:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
24027e88:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
24027e98:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
24027ea8:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
24027eb8:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
24027ec8:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
24027ed8:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
24027ee8:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
24027ef8:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
24027f08:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
24027f18:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
24027f28:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
24027f38:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
24027f48:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
24027f58:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
24027f68:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
24027f78:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
24027f88:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
24027f98:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
24027fa8:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
24027fb8:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
24027fc8:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
24027fd8:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
24027fe8:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
24027ff8:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
24028008:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
24028018:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
24028028:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
24028038:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
24028048:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
24028058:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
24028068:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
24028078:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
24028088:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
24028098:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
240280a8:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
240280b8:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
240280c8:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
240280d8:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
240280e8:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
240280f8:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
24028108:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
24028118:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
24028128:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
24028138:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
24028148:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
24028158:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
24028168:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
24028178:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
24028188:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
24028198:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
240281a8:	b610f5d3 b60be886 b60694c9 b600fec9     ................
240281b8:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
240281c8:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
240281d8:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
240281e8:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
240281f8:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
24028208:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
24028218:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
24028228:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
24028238:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
24028248:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
24028258:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
24028268:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24028278:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24028288:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24028298:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
240282a8:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
240282b8:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
240282c8:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
240282d8:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
240282e8:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
240282f8:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
24028308:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
24028318:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
24028328:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
24028338:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
24028348:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
24028358:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
24028368:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24028378:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24028388:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24028398:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
240283a8:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
240283b8:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
240283c8:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
240283d8:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
240283e8:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
240283f8:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
24028408:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
24028418:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
24028428:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
24028438:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
24028448:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
24028458:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
24028468:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24028478:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24028488:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24028498:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
240284a8:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
240284b8:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
240284c8:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
240284d8:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
240284e8:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
240284f8:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
24028508:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
24028518:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
24028528:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
24028538:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
24028548:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
24028558:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
24028568:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24028578:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24028588:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24028598:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
240285a8:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
240285b8:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
240285c8:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
240285d8:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
240285e8:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
240285f8:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
24028608:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24028618:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24028628:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24028638:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24028648:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24028658:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24028668:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24028678:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24028688:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24028698:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
240286a8:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
240286b8:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
240286c8:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
240286d8:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
240286e8:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
240286f8:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
24028708:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
24028718:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
24028728:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
24028738:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
24028748:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
24028758:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
24028768:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24028778:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24028788:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24028798:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
240287a8:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
240287b8:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
240287c8:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
240287d8:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
240287e8:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
240287f8:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
24028808:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
24028818:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
24028828:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
24028838:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

240288c0 <step_dd_table>:
	...
240289f4:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24028a04:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24028a14:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24028a24:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24028a34:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24028a44:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24028a54:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
24028a64:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
24028a74:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
24028a84:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
24028a94:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
24028aa4:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
24028ab4:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
24028ac4:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
24028ad4:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
24028ae4:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
24028af4:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24028b04:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24028b14:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24028b24:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24028b34:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24028b44:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24028b54:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
24028b64:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
24028b74:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
24028b84:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
24028b94:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
24028ba4:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
24028bb4:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
24028bc4:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
24028bd4:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
24028be4:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
24028bf4:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24028c04:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
24028c14:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
24028c24:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
24028c34:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
24028c44:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
24028c54:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
24028c64:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
24028c74:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
24028c84:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
24028c94:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
24028ca4:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
24028cb4:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
24028cc4:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
24028cd4:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
24028ce4:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
24028cf4:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24028d04:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
24028d14:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
24028d24:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
24028d34:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
24028d44:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
24028d54:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
24028d64:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
24028d74:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
24028d84:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
24028d94:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
24028da4:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
24028db4:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
24028dc4:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
24028dd4:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
24028de4:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
24028df4:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
24028e04:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
24028e14:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
24028e24:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
24028e34:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
24028e44:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
24028e54:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
24028e64:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
24028e74:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
24028e84:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
24028e94:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
24028ea4:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
24028eb4:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
24028ec4:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
24028ed4:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
24028ee4:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
24028ef4:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
24028f04:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
24028f14:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
24028f24:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
24028f34:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
24028f44:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
24028f54:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
24028f64:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
24028f74:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
24028f84:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
24028f94:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
24028fa4:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
24028fb4:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
24028fc4:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
24028fd4:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
24028fe4:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
24028ff4:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
24029004:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
24029014:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
24029024:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
24029034:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
24029044:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
24029054:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
24029064:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
24029074:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24029084:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24029094:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
240290a4:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
240290b4:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
240290c4:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
240290d4:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
240290e4:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
240290f4:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24029104:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24029114:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
24029124:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
24029134:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
24029144:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
24029154:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
24029164:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
24029174:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24029184:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24029194:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
240291a4:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
240291b4:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
240291c4:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
240291d4:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
240291e4:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
240291f4:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24029204:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24029214:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
24029224:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
24029234:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
24029244:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
24029254:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
24029264:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24029274:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24029284:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24029294:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
240292a4:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
240292b4:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
240292c4:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
240292d4:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
240292e4:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
240292f4:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24029304:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24029314:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
24029324:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
24029334:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
24029344:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
24029354:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
24029364:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24029374:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24029384:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24029394:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
240293a4:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
240293b4:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
240293c4:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
240293d4:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
240293e4:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
240293f4:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24029404:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24029414:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
24029424:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
24029434:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
24029444:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
24029454:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
24029464:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24029474:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24029484:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24029494:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
240294a4:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
240294b4:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
240294c4:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
240294d4:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
240294e4:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
240294f4:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24029504:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24029514:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
24029524:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
24029534:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
24029544:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
24029554:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
24029564:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24029574:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24029584:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24029594:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
240295a4:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
240295b4:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
240295c4:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
240295d4:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
240295e4:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
240295f4:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24029604:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24029614:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24029624:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24029634:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24029644:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24029654:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24029664:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24029674:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24029684:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24029694:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
240296a4:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
240296b4:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
240296c4:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
240296d4:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
240296e4:	bae718f6 be02f380 bad0894d be049492     ........M.......
240296f4:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
24029704:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24029714:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
24029724:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
24029734:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
24029744:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
24029754:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
24029764:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
24029774:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24029784:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24029794:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
240297a4:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
240297b4:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
240297c4:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
240297d4:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
240297e4:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
240297f4:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
24029804:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
24029814:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
24029824:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
24029834:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
24029844:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
24029854:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
24029864:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
24029874:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
24029884:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
24029894:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
240298a4:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
240298b4:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
240298c4:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
240298d4:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
240298e4:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
240298f4:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
24029904:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
24029914:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
24029924:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
24029934:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
24029944:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
24029954:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
24029964:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
24029974:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
24029984:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
24029994:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
240299a4:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
240299b4:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
240299c4:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
240299d4:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
240299e4:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
240299f4:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
24029a04:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
24029a14:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
24029a24:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
24029a34:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
24029a44:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
24029a54:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
24029a64:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
24029a74:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
24029a84:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
24029a94:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
24029aa4:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
24029ab4:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
24029ac4:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
24029ad4:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
24029ae4:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
24029af4:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
24029b04:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
24029b14:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
24029b24:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
24029b34:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
24029b44:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
24029b54:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
24029b64:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
24029b74:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
24029b84:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
24029b94:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
24029ba4:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
24029bb4:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
24029bc4:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
24029bd4:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
24029be4:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
24029bf4:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
24029c04:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
24029c14:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
24029c24:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
24029c34:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
24029c44:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
24029c54:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
24029c64:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
24029c74:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
24029c84:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
24029c94:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
24029ca4:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
24029cb4:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
24029cc4:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
24029cd4:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
24029ce4:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
24029cf4:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
24029d04:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
24029d14:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
24029d24:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
24029d34:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
24029d44:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
24029d54:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
24029d64:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
24029d74:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
24029d84:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
24029d94:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
24029da4:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
24029db4:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
24029dc4:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
24029dd4:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
24029de4:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
24029df4:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
24029e04:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
24029e14:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
24029e24:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
24029e34:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
24029e44:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
24029e54:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
24029e64:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
24029e74:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
24029e84:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
24029e94:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
24029ea4:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
24029eb4:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
24029ec4:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
24029ed4:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
24029ee4:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
24029ef4:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
24029f04:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
24029f14:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
24029f24:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
24029f34:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
24029f44:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
24029f54:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
24029f64:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
24029f74:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
24029f84:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
24029f94:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
24029fa4:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
24029fb4:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
24029fc4:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
24029fd4:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
24029fe4:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
24029ff4:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
2402a004:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
2402a014:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
2402a024:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
2402a034:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
2402a044:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
2402a054:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
2402a064:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
2402a074:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
2402a084:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
2402a094:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
2402a0a4:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
2402a0b4:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
2402a0c4:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
2402a0d4:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
2402a0e4:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
2402a0f4:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
2402a104:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
2402a114:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
2402a124:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
2402a134:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
2402a144:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
2402a154:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
2402a164:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
2402a174:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
2402a184:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
2402a194:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
2402a1a4:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
2402a1b4:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
2402a1c4:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
2402a1d4:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
2402a1e4:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
2402a1f4:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
2402a204:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
2402a214:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
2402a224:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
2402a234:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
2402a244:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
2402a254:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
2402a264:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
2402a274:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
2402a284:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
2402a294:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
2402a2a4:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
2402a2b4:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
2402a2c4:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
2402a2d4:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
2402a2e4:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
2402a2f4:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
2402a304:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
2402a314:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
2402a324:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
2402a334:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
2402a344:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
2402a354:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
2402a364:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
2402a374:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
2402a384:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
2402a394:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
2402a3a4:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
2402a3b4:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
2402a3c4:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
2402a3d4:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
2402a3e4:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
2402a3f4:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
2402a404:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
2402a414:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
2402a424:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
2402a434:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
2402a444:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
2402a454:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
2402a464:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
2402a474:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
2402a484:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
2402a494:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
2402a4a4:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
2402a4b4:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
2402a4c4:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
2402a4d4:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
2402a4e4:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
2402a4f4:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
2402a504:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
2402a514:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
2402a524:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
2402a534:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
2402a544:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
2402a554:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
2402a564:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
2402a574:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
2402a584:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
2402a594:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
2402a5a4:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
2402a5b4:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
2402a5c4:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
2402a5d4:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
2402a5e4:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
2402a5f4:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
2402a604:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
2402a614:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
2402a624:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
2402a634:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
2402a644:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
2402a654:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
2402a664:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
2402a674:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
2402a684:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
2402a694:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
2402a6a4:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
2402a6b4:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
2402a6c4:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
2402a6d4:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
2402a6e4:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
2402a6f4:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
2402a704:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
2402a714:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
2402a724:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
2402a734:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
2402a744:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
2402a754:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
2402a764:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
2402a774:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
2402a784:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
2402a794:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
2402a7a4:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
2402a7b4:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
2402a7c4:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
2402a7d4:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
2402a7e4:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
2402a7f4:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
2402a804:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
2402a814:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
2402a824:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
2402a834:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
2402a844:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
2402a854:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
2402a864:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
2402a874:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
2402a884:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
2402a894:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
2402a8a4:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
2402a8b4:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
2402a8c4:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
2402a8d4:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
2402a8e4:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
2402a8f4:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
2402a904:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
2402a914:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
2402a924:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
2402a934:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
2402a944:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
2402a954:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
2402a964:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
2402a974:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
2402a984:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
2402a994:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
2402a9a4:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
2402a9b4:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
2402a9c4:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
2402a9d4:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
2402a9e4:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
2402a9f4:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
2402aa04:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
2402aa14:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
2402aa24:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
2402aa34:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
2402aa44:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
2402aa54:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
2402aa64:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
2402aa74:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
2402aa84:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
2402aa94:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
2402aaa4:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
2402aab4:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
2402aac4:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
2402aad4:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
2402aae4:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
2402aaf4:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
2402ab04:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
2402ab14:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
2402ab24:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
2402ab34:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
2402ab44:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
2402ab54:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
2402ab64:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
2402ab74:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
2402ab84:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
2402ab94:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
2402aba4:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
2402abb4:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
2402abc4:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
2402abd4:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
2402abe4:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
2402abf4:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
2402ac04:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
2402ac14:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
2402ac24:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
2402ac34:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
2402ac44:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
2402ac54:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
2402ac64:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
2402ac74:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
2402ac84:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
2402ac94:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
2402aca4:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
2402acb4:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
2402acc4:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
2402acd4:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
2402ace4:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
2402acf4:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
2402ad04:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
2402ad14:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
2402ad24:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
2402ad34:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
2402ad44:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
2402ad54:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
2402ad64:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
2402ad74:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
2402ad84:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
2402ad94:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
2402ada4:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
2402adb4:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
2402adc4:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
2402add4:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
2402ade4:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
2402adf4:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
2402ae04:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
2402ae14:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
2402ae24:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
2402ae34:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
2402ae44:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
2402ae54:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
2402ae64:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
2402ae74:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
2402ae84:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
2402ae94:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
2402aea4:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
2402aeb4:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
2402aec4:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
2402aed4:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
2402aee4:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
2402aef4:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
2402af04:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
2402af14:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
2402af24:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
2402af34:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
2402af44:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
2402af54:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
2402af64:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
2402af74:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
2402af84:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
2402af94:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
2402afa4:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
2402afb4:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
2402afc4:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
2402afd4:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
2402afe4:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
2402aff4:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
2402b004:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
2402b014:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
2402b024:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
2402b034:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
2402b044:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
2402b054:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
2402b064:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
2402b074:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
2402b084:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
2402b094:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
2402b0a4:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
2402b0b4:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
2402b0c4:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
2402b0d4:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
2402b0e4:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
2402b0f4:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
2402b104:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
2402b114:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
2402b124:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
2402b134:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
2402b144:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
2402b154:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
2402b164:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
2402b174:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
2402b184:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
2402b194:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
2402b1a4:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
2402b1b4:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
2402b1c4:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
2402b1d4:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
2402b1e4:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
2402b1f4:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
2402b204:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
2402b214:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
2402b224:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
2402b234:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
2402b244:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
2402b254:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
2402b264:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
2402b274:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
2402b284:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
2402b294:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
2402b2a4:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
2402b2b4:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
2402b2c4:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
2402b2d4:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
2402b2e4:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
2402b2f4:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
2402b304:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
2402b314:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
2402b324:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
2402b334:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
2402b344:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
2402b354:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
2402b364:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
2402b374:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
2402b384:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
2402b394:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
2402b3a4:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
2402b3b4:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
2402b3c4:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
2402b3d4:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
2402b3e4:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
2402b3f4:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
2402b404:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
2402b414:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
2402b424:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
2402b434:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
2402b444:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
2402b454:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
2402b464:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
2402b474:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
2402b484:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
2402b494:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
2402b4a4:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
2402b4b4:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
2402b4c4:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
2402b4d4:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
2402b4e4:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
2402b4f4:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
2402b504:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
2402b514:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
2402b524:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
2402b534:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
2402b544:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
2402b554:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
2402b564:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
2402b574:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
2402b584:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
2402b594:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
2402b5a4:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
2402b5b4:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
2402b5c4:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
2402b5d4:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
2402b5e4:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
2402b5f4:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
2402b604:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
2402b614:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
2402b624:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
2402b634:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
2402b644:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
2402b654:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
2402b664:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
2402b674:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
2402b684:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
2402b694:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
2402b6a4:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
2402b6b4:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
2402b6c4:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
2402b6d4:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
2402b6e4:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
2402b6f4:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
2402b704:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
2402b714:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
2402b724:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
2402b734:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
2402b744:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
2402b754:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
2402b764:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
2402b774:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
2402b784:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
2402b794:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
2402b7a4:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
2402b7b4:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
2402b7c4:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
2402b7d4:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
2402b7e4:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
2402b7f4:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
2402b804:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
2402b814:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
2402b824:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
2402b834:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
2402b844:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
2402b854:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
2402b864:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
2402b874:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
2402b884:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
2402b894:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
2402b8a4:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
2402b8b4:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
2402b8c4:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
2402b8d4:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
2402b8e4:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
2402b8f4:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
2402b904:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
2402b914:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
2402b924:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
2402b934:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
2402b944:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
2402b954:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
2402b964:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
2402b974:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
2402b984:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
2402b994:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
2402b9a4:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
2402b9b4:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
2402b9c4:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
2402b9d4:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
2402b9e4:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
2402b9f4:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
2402ba04:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
2402ba14:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
2402ba24:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
2402ba34:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
2402ba44:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
2402ba54:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
2402ba64:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
2402ba74:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
2402ba84:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
2402ba94:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
2402baa4:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
2402bab4:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
2402bac4:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
2402bad4:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
2402bae4:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
2402baf4:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
2402bb04:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
2402bb14:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
2402bb24:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
2402bb34:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
2402bb44:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
2402bb54:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
2402bb64:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
2402bb74:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
2402bb84:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
2402bb94:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
2402bba4:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
2402bbb4:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
2402bbc4:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
2402bbd4:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
2402bbe4:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
2402bbf4:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
2402bc04:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
2402bc14:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
2402bc24:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
2402bc34:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
2402bc44:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
2402bc54:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
2402bc64:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
2402bc74:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
2402bc84:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
2402bc94:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
2402bca4:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
2402bcb4:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
2402bcc4:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
2402bcd4:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
2402bce4:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
2402bcf4:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
2402bd04:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
2402bd14:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
2402bd24:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
2402bd34:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
2402bd44:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
2402bd54:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
2402bd64:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
2402bd74:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
2402bd84:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
2402bd94:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
2402bda4:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
2402bdb4:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
2402bdc4:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
2402bdd4:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
2402bde4:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
2402bdf4:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
2402be04:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
2402be14:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
2402be24:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
2402be34:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
2402be44:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
2402be54:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
2402be64:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
2402be74:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
2402be84:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
2402be94:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
2402bea4:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
2402beb4:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
2402bec4:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
2402bed4:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
2402bee4:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
2402bef4:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
2402bf04:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
2402bf14:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
2402bf24:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
2402bf34:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
2402bf44:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
2402bf54:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
2402bf64:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
2402bf74:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
2402bf84:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
2402bf94:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
2402bfa4:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
2402bfb4:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
2402bfc4:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
2402bfd4:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
2402bfe4:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
2402bff4:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
2402c004:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
2402c014:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
2402c024:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
2402c034:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
2402c044:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
2402c054:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
2402c064:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
2402c074:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
2402c084:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
2402c094:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
2402c0a4:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
2402c0b4:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
2402c0c4:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
2402c0d4:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
2402c0e4:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
2402c0f4:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
2402c104:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
2402c114:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
2402c124:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
2402c134:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
2402c144:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
2402c154:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
2402c164:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
2402c174:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
2402c184:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
2402c194:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
2402c1a4:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
2402c1b4:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
2402c1c4:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
2402c1d4:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
2402c1e4:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
2402c1f4:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
2402c204:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
2402c214:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
2402c224:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
2402c234:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
2402c244:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
2402c254:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
2402c264:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
2402c274:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
2402c284:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
2402c294:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
2402c2a4:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
2402c2b4:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
2402c2c4:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
2402c2d4:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
2402c2e4:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
2402c2f4:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
2402c304:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
2402c314:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
2402c324:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
2402c334:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
2402c344:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
2402c354:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
2402c364:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
2402c374:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
2402c384:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
2402c394:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
2402c3a4:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
2402c3b4:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
2402c3c4:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
2402c3d4:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
2402c3e4:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
2402c3f4:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
2402c404:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
2402c414:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
2402c424:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
2402c434:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
2402c444:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
2402c454:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
2402c464:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
2402c474:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
2402c484:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
2402c494:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
2402c4a4:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
2402c4b4:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
2402c4c4:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
2402c4d4:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
2402c4e4:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
2402c4f4:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
2402c504:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
2402c514:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
2402c524:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
2402c534:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
2402c544:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
2402c554:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
2402c564:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
2402c574:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
2402c584:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
2402c594:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
2402c5a4:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
2402c5b4:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
2402c5c4:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
2402c5d4:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
2402c5e4:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
2402c5f4:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
2402c604:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
2402c614:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
2402c624:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
2402c634:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
2402c644:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
2402c654:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
2402c664:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
2402c674:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
2402c684:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
2402c694:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
2402c6a4:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
2402c6b4:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
2402c6c4:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
2402c6d4:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
2402c6e4:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
2402c6f4:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
2402c704:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
2402c714:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
2402c724:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
2402c734:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
2402c744:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
2402c754:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
2402c764:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
2402c774:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
2402c784:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
2402c794:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
2402c7a4:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
2402c7b4:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
2402c7c4:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
2402c7d4:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
2402c7e4:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
2402c7f4:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
2402c804:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
2402c814:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
2402c824:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
2402c834:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
2402c844:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
2402c854:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
2402c864:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
2402c874:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
2402c884:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
2402c894:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
2402c8a4:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
2402c8b4:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
2402c8c4:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
2402c8d4:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
2402c8e4:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
2402c8f4:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
2402c904:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
2402c914:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
2402c924:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
2402c934:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
2402c944:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
2402c954:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
2402c964:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
2402c974:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
2402c984:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
2402c994:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
2402c9a4:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
2402c9b4:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
2402c9c4:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
2402c9d4:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
2402c9e4:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
2402c9f4:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
2402ca04:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
2402ca14:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
2402ca24:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
2402ca34:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
2402ca44:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
2402ca54:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
2402ca64:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
2402ca74:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
2402ca84:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
2402ca94:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
2402caa4:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
2402cab4:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
2402cac4:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
2402cad4:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
2402cae4:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
2402caf4:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
2402cb04:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
2402cb14:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
2402cb24:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
2402cb34:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
2402cb44:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
2402cb54:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
2402cb64:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
2402cb74:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
2402cb84:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
2402cb94:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
2402cba4:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
2402cbb4:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
2402cbc4:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
2402cbd4:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
2402cbe4:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
2402cbf4:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
2402cc04:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
2402cc14:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
2402cc24:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
2402cc34:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
2402cc44:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
2402cc54:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
2402cc64:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
2402cc74:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
2402cc84:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
2402cc94:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
2402cca4:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
2402ccb4:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
2402ccc4:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
2402ccd4:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
2402cce4:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
2402ccf4:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
2402cd04:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
2402cd14:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
2402cd24:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
2402cd34:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
2402cd44:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
2402cd54:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
2402cd64:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
2402cd74:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
2402cd84:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
2402cd94:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
2402cda4:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
2402cdb4:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
2402cdc4:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
2402cdd4:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
2402cde4:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
2402cdf4:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
2402ce04:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
2402ce14:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
2402ce24:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
2402ce34:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
2402ce44:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
2402ce54:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
2402ce64:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
2402ce74:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
2402ce84:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
2402ce94:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
2402cea4:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
2402ceb4:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
2402cec4:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
2402ced4:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
2402cee4:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
2402cef4:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
2402cf04:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
2402cf14:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
2402cf24:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
2402cf34:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
2402cf44:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
2402cf54:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
2402cf64:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
2402cf74:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
2402cf84:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
2402cf94:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
2402cfa4:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
2402cfb4:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
2402cfc4:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
2402cfd4:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
2402cfe4:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
2402cff4:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
2402d004:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
2402d014:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
2402d024:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
2402d034:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
2402d044:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
2402d054:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
2402d064:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
2402d074:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
2402d084:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
2402d094:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
2402d0a4:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
2402d0b4:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
2402d0c4:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
2402d0d4:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
2402d0e4:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
2402d0f4:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
2402d104:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
2402d114:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
2402d124:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
2402d134:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
2402d144:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
2402d154:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
2402d164:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
2402d174:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
2402d184:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
2402d194:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
2402d1a4:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
2402d1b4:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
2402d1c4:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
2402d1d4:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
2402d1e4:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
2402d1f4:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
2402d204:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
2402d214:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
2402d224:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
2402d234:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
2402d244:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
2402d254:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
2402d264:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
2402d274:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
2402d284:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
2402d294:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
2402d2a4:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
2402d2b4:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
2402d2c4:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
2402d2d4:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
2402d2e4:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
2402d2f4:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
2402d304:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
2402d314:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
2402d324:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
2402d334:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
2402d344:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
2402d354:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
2402d364:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
2402d374:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
2402d384:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
2402d394:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
2402d3a4:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
2402d3b4:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
2402d3c4:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
2402d3d4:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
2402d3e4:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
2402d3f4:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
2402d404:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
2402d414:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
2402d424:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
2402d434:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
2402d444:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
2402d454:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
2402d464:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
2402d474:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
2402d484:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
2402d494:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
2402d4a4:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
2402d4b4:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
2402d4c4:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
2402d4d4:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
2402d4e4:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
2402d4f4:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
2402d504:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
2402d514:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
2402d524:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
2402d534:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
2402d544:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
2402d554:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
2402d564:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
2402d574:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
2402d584:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
2402d594:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
2402d5a4:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
2402d5b4:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
2402d5c4:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
2402d5d4:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
2402d5e4:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
2402d5f4:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
2402d604:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
2402d614:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
2402d624:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
2402d634:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
2402d644:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
2402d654:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
2402d664:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
2402d674:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
2402d684:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
2402d694:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
2402d6a4:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
2402d6b4:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
2402d6c4:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
2402d6d4:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
2402d6e4:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
2402d6f4:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
2402d704:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
2402d714:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
2402d724:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
2402d734:	b89cc6ac bafe109a b89407ce bb03a88e     ................
2402d744:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
2402d754:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
2402d764:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
2402d774:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
2402d784:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
2402d794:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
2402d7a4:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
2402d7b4:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
2402d7c4:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
2402d7d4:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
2402d7e4:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
2402d7f4:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
2402d804:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
2402d814:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
2402d824:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
2402d834:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
2402d844:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
2402d854:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
2402d864:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
2402d874:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
2402d884:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
2402d894:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
2402d8a4:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
2402d8b4:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
2402d8c4:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
2402d8d4:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
2402d8e4:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
2402d8f4:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
2402d904:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
2402d914:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
2402d924:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
2402d934:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
2402d944:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
2402d954:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
2402d964:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
2402d974:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
2402d984:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
2402d994:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
2402d9a4:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
2402d9b4:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
2402d9c4:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
2402d9d4:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
2402d9e4:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
2402d9f4:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
2402da04:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
2402da14:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
2402da24:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
2402da34:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
2402da44:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
2402da54:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
2402da64:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
2402da74:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
2402da84:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
2402da94:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
2402daa4:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
2402dab4:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
2402dac4:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
2402dad4:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
2402dae4:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
2402daf4:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
2402db04:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
2402db14:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
2402db24:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
2402db34:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
2402db44:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
2402db54:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
2402db64:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
2402db74:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
2402db84:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
2402db94:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
2402dba4:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
2402dbb4:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
2402dbc4:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
2402dbd4:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
2402dbe4:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
2402dbf4:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
2402dc04:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
2402dc14:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
2402dc24:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
2402dc34:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
2402dc44:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
2402dc54:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
2402dc64:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
2402dc74:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
2402dc84:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
2402dc94:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
2402dca4:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
2402dcb4:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
2402dcc4:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
2402dcd4:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
2402dce4:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
2402dcf4:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
2402dd04:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
2402dd14:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
2402dd24:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
2402dd34:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
2402dd44:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
2402dd54:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
2402dd64:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
2402dd74:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
2402dd84:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
2402dd94:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
2402dda4:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
2402ddb4:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
2402ddc4:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
2402ddd4:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
2402dde4:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
2402ddf4:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
2402de04:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
2402de14:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
2402de24:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
2402de34:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
2402de44:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
2402de54:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
2402de64:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
2402de74:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
2402de84:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
2402de94:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
2402dea4:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
2402deb4:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
2402dec4:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
2402ded4:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
2402dee4:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
2402def4:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
2402df04:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
2402df14:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
2402df24:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
2402df34:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
2402df44:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
2402df54:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
2402df64:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
2402df74:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
2402df84:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
2402df94:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
2402dfa4:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
2402dfb4:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
2402dfc4:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
2402dfd4:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
2402dfe4:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
2402dff4:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
2402e004:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
2402e014:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
2402e024:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
2402e034:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
2402e044:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
2402e054:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
2402e064:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
2402e074:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
2402e084:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
2402e094:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
2402e0a4:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
2402e0b4:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
2402e0c4:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
2402e0d4:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
2402e0e4:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
2402e0f4:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
2402e104:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
2402e114:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
2402e124:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
2402e134:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
2402e144:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
2402e154:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
2402e164:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
2402e174:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
2402e184:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
2402e194:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
2402e1a4:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
2402e1b4:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
2402e1c4:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
2402e1d4:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
2402e1e4:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
2402e1f4:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
2402e204:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
2402e214:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
2402e224:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
2402e234:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
2402e244:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
2402e254:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
2402e264:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
2402e274:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
2402e284:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
2402e294:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
2402e2a4:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
2402e2b4:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
2402e2c4:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
2402e2d4:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
2402e2e4:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
2402e2f4:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
2402e304:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
2402e314:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
2402e324:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
2402e334:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
2402e344:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
2402e354:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
2402e364:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
2402e374:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
2402e384:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
2402e394:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
2402e3a4:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
2402e3b4:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
2402e3c4:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
2402e3d4:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
2402e3e4:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
2402e3f4:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
2402e404:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
2402e414:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
2402e424:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
2402e434:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
2402e444:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
2402e454:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
2402e464:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
2402e474:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
2402e484:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
2402e494:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
2402e4a4:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
2402e4b4:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
2402e4c4:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
2402e4d4:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
2402e4e4:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
2402e4f4:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
2402e504:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
2402e514:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
2402e524:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
2402e534:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
2402e544:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
2402e554:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
2402e564:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
2402e574:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
2402e584:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
2402e594:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
2402e5a4:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
2402e5b4:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
2402e5c4:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
2402e5d4:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
2402e5e4:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
2402e5f4:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
2402e604:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
2402e614:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
2402e624:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
2402e634:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
2402e644:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
2402e654:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
2402e664:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
2402e674:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
2402e684:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
2402e694:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
2402e6a4:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
2402e6b4:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
2402e6c4:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
2402e6d4:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
2402e6e4:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
2402e6f4:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
2402e704:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
2402e714:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
2402e724:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
2402e734:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
2402e744:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
2402e754:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
2402e764:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
2402e774:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
2402e784:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
2402e794:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
2402e7a4:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
2402e7b4:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
2402e7c4:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
2402e7d4:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
2402e7e4:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
2402e7f4:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
2402e804:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
2402e814:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
2402e824:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
2402e834:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
2402e844:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
2402e854:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
2402e864:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
2402e874:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
2402e884:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
2402e894:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
2402e8a4:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
2402e8b4:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
2402e8c4:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
2402e8d4:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
2402e8e4:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
2402e8f4:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
2402e904:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
2402e914:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
2402e924:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
2402e934:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
2402e944:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
2402e954:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
2402e964:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
2402e974:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
2402e984:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
2402e994:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
2402e9a4:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
2402e9b4:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
2402e9c4:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
2402e9d4:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
2402e9e4:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
2402e9f4:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
2402ea04:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
2402ea14:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
2402ea24:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
2402ea34:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
2402ea44:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
2402ea54:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
2402ea64:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
2402ea74:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
2402ea84:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
2402ea94:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
2402eaa4:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
2402eab4:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
2402eac4:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
2402ead4:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
2402eae4:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
2402eaf4:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
2402eb04:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
2402eb14:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
2402eb24:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
2402eb34:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
2402eb44:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
2402eb54:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
2402eb64:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
2402eb74:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
2402eb84:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
2402eb94:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
2402eba4:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
2402ebb4:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
2402ebc4:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
2402ebd4:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
2402ebe4:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
2402ebf4:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
2402ec04:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
2402ec14:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
2402ec24:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
2402ec34:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
2402ec44:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
2402ec54:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
2402ec64:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
2402ec74:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
2402ec84:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
2402ec94:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
2402eca4:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
2402ecb4:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
2402ecc4:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
2402ecd4:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
2402ece4:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
2402ecf4:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
2402ed04:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
2402ed14:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
2402ed24:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
2402ed34:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
2402ed44:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
2402ed54:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
2402ed64:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
2402ed74:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
2402ed84:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
2402ed94:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
2402eda4:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
2402edb4:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
2402edc4:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
2402edd4:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
2402ede4:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
2402edf4:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
2402ee04:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
2402ee14:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
2402ee24:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
2402ee34:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
2402ee44:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
2402ee54:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
2402ee64:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
2402ee74:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
2402ee84:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
2402ee94:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
2402eea4:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
2402eeb4:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
2402eec4:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
2402eed4:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
2402eee4:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
2402eef4:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
2402ef04:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
2402ef14:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
2402ef24:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
2402ef34:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
2402ef44:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
2402ef54:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
2402ef64:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
2402ef74:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
2402ef84:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
2402ef94:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
2402efa4:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
2402efb4:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
2402efc4:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
2402efd4:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
2402efe4:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
2402eff4:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
2402f004:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
2402f014:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
2402f024:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
2402f034:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
2402f044:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
2402f054:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
2402f064:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
2402f074:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
2402f084:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
2402f094:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
2402f0a4:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
2402f0b4:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
2402f0c4:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
2402f0d4:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
2402f0e4:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
2402f0f4:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
2402f104:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
2402f114:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
2402f124:	b7168bbf b8839904 b7135056 b896030f     ........VP......
2402f134:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
2402f144:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
2402f154:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
2402f164:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
2402f174:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
2402f184:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
2402f194:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
2402f1a4:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
2402f1b4:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
2402f1c4:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
2402f1d4:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
2402f1e4:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
2402f1f4:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
2402f204:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
2402f214:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
2402f224:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
2402f234:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
2402f244:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
2402f254:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
2402f264:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
2402f274:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
2402f284:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
2402f294:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
2402f2a4:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
2402f2b4:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
2402f2c4:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
2402f2d4:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
2402f2e4:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
2402f2f4:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
2402f304:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
2402f314:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
2402f324:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
2402f334:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
2402f344:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
2402f354:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
2402f364:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
2402f374:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
2402f384:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
2402f394:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
2402f3a4:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
2402f3b4:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
2402f3c4:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
2402f3d4:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
2402f3e4:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
2402f3f4:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
2402f404:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
2402f414:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
2402f424:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
2402f434:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
2402f444:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
2402f454:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
2402f464:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
2402f474:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
2402f484:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
2402f494:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
2402f4a4:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
2402f4b4:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
2402f4c4:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
2402f4d4:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
2402f4e4:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
2402f4f4:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
2402f504:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
2402f514:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
2402f524:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
2402f534:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
2402f544:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
2402f554:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
2402f564:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
2402f574:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
2402f584:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
2402f594:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
2402f5a4:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
2402f5b4:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
2402f5c4:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
2402f5d4:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
2402f5e4:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
2402f5f4:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
2402f604:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
2402f614:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
2402f624:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
2402f634:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
2402f644:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
2402f654:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
2402f664:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
2402f674:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
2402f684:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
2402f694:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
2402f6a4:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
2402f6b4:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
2402f6c4:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
2402f6d4:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
2402f6e4:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
2402f6f4:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
2402f704:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
2402f714:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
2402f724:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
2402f734:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
2402f744:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
2402f754:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
2402f764:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
2402f774:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
2402f784:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
2402f794:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
2402f7a4:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
2402f7b4:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
2402f7c4:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
2402f7d4:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
2402f7e4:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
2402f7f4:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
2402f804:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
2402f814:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
2402f824:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
2402f834:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
2402f844:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
2402f854:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
2402f864:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
2402f874:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
2402f884:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
2402f894:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
2402f8a4:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
2402f8b4:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
2402f8c4:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
2402f8d4:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
2402f8e4:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
2402f8f4:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
2402f904:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
2402f914:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
2402f924:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
2402f934:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
2402f944:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
2402f954:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
2402f964:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
2402f974:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
2402f984:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
2402f994:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
2402f9a4:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
2402f9b4:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
2402f9c4:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
2402f9d4:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
2402f9e4:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
2402f9f4:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
2402fa04:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
2402fa14:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
2402fa24:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
2402fa34:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
2402fa44:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
2402fa54:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
2402fa64:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
2402fa74:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
2402fa84:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
2402fa94:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
2402faa4:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
2402fab4:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
2402fac4:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
2402fad4:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
2402fae4:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
2402faf4:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
2402fb04:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
2402fb14:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
2402fb24:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
2402fb34:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
2402fb44:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
2402fb54:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
2402fb64:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
2402fb74:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
2402fb84:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
2402fb94:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
2402fba4:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
2402fbb4:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
2402fbc4:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
2402fbd4:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
2402fbe4:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
2402fbf4:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
2402fc04:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
2402fc14:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
2402fc24:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
2402fc34:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
2402fc44:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
2402fc54:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
2402fc64:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
2402fc74:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
2402fc84:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
2402fc94:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
2402fca4:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
2402fcb4:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
2402fcc4:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
2402fcd4:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
2402fce4:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
2402fcf4:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
2402fd04:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
2402fd14:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
2402fd24:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
2402fd34:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
2402fd44:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
2402fd54:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
2402fd64:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
2402fd74:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
2402fd84:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
2402fd94:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
2402fda4:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
2402fdb4:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
2402fdc4:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
2402fdd4:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
2402fde4:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
2402fdf4:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
2402fe04:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
2402fe14:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
2402fe24:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
2402fe34:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
2402fe44:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
2402fe54:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
2402fe64:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
2402fe74:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
2402fe84:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
2402fe94:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
2402fea4:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
2402feb4:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
2402fec4:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
2402fed4:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
2402fee4:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
2402fef4:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
2402ff04:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
2402ff14:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
2402ff24:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
2402ff34:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
2402ff44:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
2402ff54:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
2402ff64:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
2402ff74:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
2402ff84:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
2402ff94:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
2402ffa4:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
2402ffb4:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
2402ffc4:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
2402ffd4:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
2402ffe4:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
2402fff4:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
24030004:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
24030014:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
24030024:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
24030034:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
24030044:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
24030054:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
24030064:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
24030074:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
24030084:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
24030094:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
240300a4:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
240300b4:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
240300c4:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
240300d4:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
240300e4:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
240300f4:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
24030104:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
24030114:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
24030124:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
24030134:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
24030144:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
24030154:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
24030164:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
24030174:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
24030184:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
24030194:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
240301a4:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
240301b4:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
240301c4:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
240301d4:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
240301e4:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
240301f4:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
24030204:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
24030214:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
24030224:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
24030234:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
24030244:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
24030254:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
24030264:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24030274:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24030284:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24030294:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
240302a4:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
240302b4:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
240302c4:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
240302d4:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
240302e4:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
240302f4:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
24030304:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
24030314:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
24030324:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
24030334:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
24030344:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
24030354:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
24030364:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24030374:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24030384:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24030394:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
240303a4:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
240303b4:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
240303c4:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
240303d4:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
240303e4:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
240303f4:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
24030404:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
24030414:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
24030424:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
24030434:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
24030444:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
24030454:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
24030464:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24030474:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24030484:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24030494:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
240304a4:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
240304b4:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
240304c4:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
240304d4:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
240304e4:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
240304f4:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
24030504:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
24030514:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
24030524:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
24030534:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
24030544:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
24030554:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
24030564:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24030574:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24030584:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24030594:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
240305a4:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
240305b4:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
240305c4:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
240305d4:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
240305e4:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
240305f4:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
24030604:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
24030614:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
24030624:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24030634:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24030644:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
24030654:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
24030664:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
24030674:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
24030684:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
24030694:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
240306a4:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
240306b4:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
240306c4:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
240306d4:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
240306e4:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
240306f4:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24030704:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24030714:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24030724:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24030734:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24030744:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
24030754:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
24030764:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
24030774:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
24030784:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
24030794:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
240307a4:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
240307b4:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
240307c4:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
240307d4:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
240307e4:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
240307f4:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
24030804:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
24030814:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
24030824:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
24030834:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
24030844:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
24030854:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
24030864:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
24030874:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
24030884:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
24030894:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
240308a4:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
240308b4:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
240308c4:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
240308d4:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
240308e4:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
240308f4:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
24030904:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
24030914:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
24030924:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
24030934:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
24030944:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
24030954:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
24030964:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
24030974:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
24030984:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
24030994:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
240309a4:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
240309b4:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
240309c4:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
240309d4:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
240309e4:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
240309f4:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
24030a04:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
24030a14:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
24030a24:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
24030a34:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
24030a44:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
24030a54:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
24030a64:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
24030a74:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
24030a84:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
24030a94:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
24030aa4:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
24030ab4:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
24030ac4:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
24030ad4:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
24030ae4:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
24030af4:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
24030b04:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
24030b14:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
24030b24:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
24030b34:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
24030b44:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
24030b54:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
24030b64:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
24030b74:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
24030b84:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
24030b94:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
24030ba4:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
24030bb4:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
24030bc4:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
24030bd4:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
24030be4:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
24030bf4:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
24030c04:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
24030c14:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
24030c24:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
24030c34:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
24030c44:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
24030c54:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
24030c64:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
24030c74:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
24030c84:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
24030c94:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
24030ca4:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
24030cb4:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
24030cc4:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
24030cd4:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
24030ce4:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
24030cf4:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
24030d04:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
24030d14:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
24030d24:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
24030d34:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
24030d44:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
24030d54:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
24030d64:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
24030d74:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
24030d84:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
24030d94:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
24030da4:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
24030db4:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
24030dc4:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
24030dd4:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
24030de4:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
24030df4:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
24030e04:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
24030e14:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
24030e24:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
24030e34:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
24030e44:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
24030e54:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
24030e64:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
24030e74:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
24030e84:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
24030e94:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
24030ea4:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
24030eb4:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
24030ec4:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
24030ed4:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
24030ee4:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
24030ef4:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
24030f04:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
24030f14:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
24030f24:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
24030f34:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
24030f44:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
24030f54:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
24030f64:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
24030f74:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
24030f84:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
24030f94:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
24030fa4:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
24030fb4:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
24030fc4:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
24030fd4:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
24030fe4:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
24030ff4:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
24031004:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
24031014:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
24031024:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
24031034:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
24031044:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
24031054:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
24031064:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
24031074:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
24031084:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
24031094:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
240310a4:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
240310b4:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
240310c4:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
240310d4:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
240310e4:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
240310f4:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
24031104:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
24031114:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
24031124:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
24031134:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
24031144:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
24031154:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
24031164:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
24031174:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
24031184:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
24031194:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
240311a4:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
240311b4:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
240311c4:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
240311d4:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
240311e4:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
240311f4:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
24031204:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
24031214:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
24031224:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
24031234:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
24031244:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
24031254:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
24031264:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
24031274:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
24031284:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
24031294:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
240312a4:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
240312b4:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
240312c4:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
240312d4:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
240312e4:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
240312f4:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
24031304:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
24031314:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
24031324:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
24031334:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
24031344:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
24031354:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
24031364:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
24031374:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
24031384:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
24031394:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
240313a4:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
240313b4:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
240313c4:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
240313d4:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
240313e4:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
240313f4:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
24031404:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
24031414:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
24031424:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
24031434:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
24031444:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
24031454:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
24031464:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
24031474:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
24031484:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
24031494:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
240314a4:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
240314b4:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
240314c4:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
240314d4:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
240314e4:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
240314f4:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
24031504:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
24031514:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
24031524:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
24031534:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
24031544:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
24031554:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
24031564:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
24031574:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
24031584:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
24031594:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
240315a4:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
240315b4:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
240315c4:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
240315d4:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
240315e4:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
240315f4:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
24031604:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
24031614:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
24031624:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
24031634:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
24031644:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
24031654:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
24031664:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
24031674:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
24031684:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
24031694:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
240316a4:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
240316b4:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
240316c4:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
240316d4:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
240316e4:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
240316f4:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
24031704:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
24031714:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
24031724:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
24031734:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
24031744:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
24031754:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
24031764:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
24031774:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
24031784:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
24031794:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
240317a4:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
240317b4:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
240317c4:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
240317d4:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
240317e4:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
240317f4:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
24031804:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
24031814:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
24031824:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
24031834:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
24031844:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
24031854:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
24031864:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
24031874:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
24031884:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
24031894:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
240318a4:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

240318c8 <sinTable_f32>:
240318c8:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
240318d8:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
240318e8:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
240318f8:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
24031908:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
24031918:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
24031928:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
24031938:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
24031948:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
24031958:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
24031968:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
24031978:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
24031988:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
24031998:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
240319a8:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
240319b8:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
240319c8:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
240319d8:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
240319e8:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
240319f8:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
24031a08:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
24031a18:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
24031a28:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
24031a38:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
24031a48:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
24031a58:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
24031a68:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
24031a78:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
24031a88:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
24031a98:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
24031aa8:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
24031ab8:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
24031ac8:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
24031ad8:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
24031ae8:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
24031af8:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
24031b08:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
24031b18:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
24031b28:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
24031b38:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
24031b48:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
24031b58:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
24031b68:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
24031b78:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
24031b88:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
24031b98:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
24031ba8:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
24031bb8:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
24031bc8:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
24031bd8:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
24031be8:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
24031bf8:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
24031c08:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
24031c18:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
24031c28:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
24031c38:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
24031c48:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
24031c58:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
24031c68:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
24031c78:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
24031c88:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
24031c98:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
24031ca8:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
24031cb8:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
24031cc8:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
24031cd8:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
24031ce8:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
24031cf8:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
24031d08:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
24031d18:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
24031d28:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
24031d38:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
24031d48:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
24031d58:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
24031d68:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
24031d78:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
24031d88:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
24031d98:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
24031da8:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
24031db8:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
24031dc8:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
24031dd8:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
24031de8:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
24031df8:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
24031e08:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
24031e18:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
24031e28:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
24031e38:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
24031e48:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
24031e58:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
24031e68:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
24031e78:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
24031e88:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
24031e98:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
24031ea8:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
24031eb8:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
24031ec8:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
24031ed8:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
24031ee8:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
24031ef8:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
24031f08:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
24031f18:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
24031f28:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
24031f38:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
24031f48:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
24031f58:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
24031f68:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
24031f78:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
24031f88:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
24031f98:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
24031fa8:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
24031fb8:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
24031fc8:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
24031fd8:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
24031fe8:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
24031ff8:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
24032008:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
24032018:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
24032028:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
24032038:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
24032048:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
24032058:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
24032068:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
24032078:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
24032088:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
24032098:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
240320a8:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
240320b8:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
240320c8:	80000000 33323130 37363534 62613938     ....0123456789ab
240320d8:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
240320e8:	76757473 7a797877 00000000 00000000     stuvwxyz........

240320f8 <__exp_data>:
240320f8:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
24032108:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
24032118:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
24032128:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
24032138:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
24032148:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
24032158:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
24032174:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
24032184:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
24032194:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
240321a4:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
240321b4:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
240321c4:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
240321d4:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
240321e4:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
240321f4:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
24032204:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
24032214:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
24032224:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
24032234:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
24032244:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
24032254:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
24032264:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
24032274:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
24032284:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
24032294:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
240322a4:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
240322b4:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
240322c4:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
240322d4:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
240322e4:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
240322f4:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
24032304:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
24032314:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
24032324:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
24032334:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
24032344:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
24032354:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
24032364:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
24032374:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
24032384:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
24032394:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
240323a4:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
240323b4:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
240323c4:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
240323d4:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
240323e4:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
240323f4:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
24032404:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
24032414:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
24032424:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
24032434:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
24032444:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
24032454:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
24032464:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
24032474:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
24032484:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
24032494:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
240324a4:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
240324b4:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
240324c4:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
240324d4:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
240324e4:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
240324f4:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
24032504:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
24032514:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
24032524:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
24032534:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
24032544:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
24032554:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
24032564:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
24032574:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
24032584:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
24032594:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
240325a4:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
240325b4:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
240325c4:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
240325d4:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
240325e4:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
240325f4:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
24032604:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
24032614:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
24032624:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
24032634:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
24032644:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
24032654:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
24032664:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
24032674:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
24032684:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
24032694:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
240326a4:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
240326b4:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
240326c4:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
240326d4:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
240326e4:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
240326f4:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
24032704:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
24032714:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
24032724:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
24032734:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
24032744:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
24032754:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
24032764:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
24032774:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
24032784:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
24032794:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
240327a4:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
240327b4:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
240327c4:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
240327d4:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
240327e4:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
240327f4:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
24032804:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
24032814:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
24032824:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
24032834:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
24032844:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
24032854:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
24032864:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
24032874:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
24032884:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
24032894:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
240328a4:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
240328b4:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
240328c4:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
240328d4:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
240328e4:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
240328f4:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
24032904:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
24032914:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
24032924:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
24032934:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
24032944:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
24032954:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
24032964:	3feff3c2                                ...?

24032968 <__exp2f_data>:
24032968:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
24032978:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
24032988:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
24032998:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
240329a8:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
240329b8:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
240329c8:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
240329d8:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
240329e8:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
240329f8:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24032a08:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24032a18:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24032a28:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24032a38:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
24032a48:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
24032a58:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
24032a68:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
24032a78:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
24032a88:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
24032a98:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
24032aa8:	ff0c52d6 3f962e42                       .R..B..?

24032ab0 <__log2f_data>:
24032ab0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24032ac0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24032ad0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24032ae0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24032af0:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24032b00:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24032b10:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24032b20:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24032b30:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24032b40:	00000000 3ff00000 00000000 00000000     .......?........
24032b50:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
24032b60:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24032b70:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24032b80:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24032b90:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24032ba0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24032bb0:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
24032bc0:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

24032bd0 <__logf_data>:
24032bd0:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
24032be0:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
24032bf0:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
24032c00:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24032c10:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24032c20:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24032c30:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24032c40:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
24032c50:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
24032c60:	00000000 3ff00000 00000000 00000000     .......?........
24032c70:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
24032c80:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
24032c90:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
24032ca0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
24032cb0:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
24032cc0:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
24032cd0:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
24032ce0:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

24032cf0 <TWO23>:
24032cf0:	4b000000 cb000000                       ...K....

24032cf8 <__powf_log2_data>:
24032cf8:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24032d08:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24032d18:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24032d28:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24032d38:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24032d48:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24032d58:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
24032d68:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
24032d78:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
24032d88:	00000000 3ff00000 00000000 00000000     .......?........
24032d98:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
24032da8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
24032db8:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24032dc8:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24032dd8:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24032de8:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24032df8:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
24032e08:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
24032e18:	652ab82b 3ff71547                       +.*eG..?

24032e20 <__inv_pio4>:
24032e20:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
24032e30:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
24032e40:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
24032e50:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
24032e60:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
24032e70:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

24032e80 <__sincosf_table>:
24032e80:	00000000 3ff00000 00000000 bff00000     .......?........
24032e90:	00000000 bff00000 00000000 3ff00000     ...............?
24032ea0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24032eb0:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
24032ec0:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
24032ed0:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
24032ee0:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
24032ef0:	00000000 3ff00000 00000000 bff00000     .......?........
24032f00:	00000000 bff00000 00000000 3ff00000     ...............?
24032f10:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
24032f20:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
24032f30:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
24032f40:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
24032f50:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

24032f60 <npio2_hw>:
24032f60:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
24032f70:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
24032f80:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
24032f90:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
24032fa0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
24032fb0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
24032fc0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
24032fd0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

24032fe0 <two_over_pi>:
24032fe0:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
24032ff0:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
24033000:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
24033010:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
24033020:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
24033030:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
24033040:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
24033050:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
24033060:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
24033070:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
24033080:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
24033090:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
240330a0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
240330b0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
240330c0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
240330d0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
240330e0:	0060e27b 00c08c6b                       {.`.k...

240330e8 <npio2_hw>:
240330e8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
240330f8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
24033108:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
24033118:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
24033128:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
24033138:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
24033148:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
24033158:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

24033168 <two_over_pi>:
24033168:	000000a2 000000f9 00000083 0000006e     ............n...
24033178:	0000004e 00000044 00000015 00000029     N...D.......)...
24033188:	000000fc 00000027 00000057 000000d1     ....'...W.......
24033198:	000000f5 00000034 000000dd 000000c0     ....4...........
240331a8:	000000db 00000062 00000095 00000099     ....b...........
240331b8:	0000003c 00000043 00000090 00000041     <...C.......A...
240331c8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
240331d8:	000000de 000000bb 000000c5 00000061     ............a...
240331e8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
240331f8:	00000042 0000004d 000000d2 000000e0     B...M...........
24033208:	00000006 00000049 0000002e 000000ea     ....I...........
24033218:	00000009 000000d1 00000092 0000001c     ................
24033228:	000000fe 0000001d 000000eb 0000001c     ................
24033238:	000000b1 00000029 000000a7 0000003e     ....).......>...
24033248:	000000e8 00000082 00000035 000000f5     ........5.......
24033258:	0000002e 000000bb 00000044 00000084     ........D.......
24033268:	000000e9 0000009c 00000070 00000026     ........p...&...
24033278:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
24033288:	00000039 00000091 000000d6 00000039     9...........9...
24033298:	00000083 00000053 00000039 000000f4     ....S...9.......
240332a8:	0000009c 00000084 0000005f 0000008b     ........_.......
240332b8:	000000bd 000000f9 00000028 0000003b     ........(...;...
240332c8:	0000001f 000000f8 00000097 000000ff     ................
240332d8:	000000de 00000005 00000098 0000000f     ................
240332e8:	000000ef 0000002f 00000011 0000008b     ..../...........
240332f8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
24033308:	0000006d 00000036 0000007e 000000cf     m...6...~.......
24033318:	00000027 000000cb 00000009 000000b7     '...............
24033328:	0000004f 00000046 0000003f 00000066     O...F...?...f...
24033338:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24033348:	00000075 00000027 000000ba 000000c7     u...'...........
24033358:	000000eb 000000e5 000000f1 0000007b     ............{...
24033368:	0000003d 00000007 00000039 000000f7     =.......9.......
24033378:	0000008a 00000052 00000092 000000ea     ....R...........
24033388:	0000006b 000000fb 0000005f 000000b1     k......._.......
24033398:	0000001f 0000008d 0000005d 00000008     ........].......
240333a8:	00000056 00000003 00000030 00000046     V.......0...F...
240333b8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
240333c8:	000000f0 000000cf 000000bc 00000020     ............ ...
240333d8:	0000009a 000000f4 00000036 0000001d     ........6.......
240333e8:	000000a9 000000e3 00000091 00000061     ............a...
240333f8:	0000005e 000000e6 0000001b 00000008     ^...............
24033408:	00000065 00000099 00000085 0000005f     e..........._...
24033418:	00000014 000000a0 00000068 00000040     ........h...@...
24033428:	0000008d 000000ff 000000d8 00000080     ................
24033438:	0000004d 00000073 00000027 00000031     M...s...'...1...
24033448:	00000006 00000006 00000015 00000056     ............V...
24033458:	000000ca 00000073 000000a8 000000c9     ....s...........
24033468:	00000060 000000e2 0000007b 000000c0     `.......{.......
24033478:	0000008c 0000006b                       ....k...

24033480 <PIo2>:
24033480:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
24033490:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
240334a0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
240334b0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

240334c0 <init_jk>:
240334c0:	00000002 00000003 00000004 00000006     ................

240334d0 <PIo2>:
240334d0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
240334e0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
240334f0:	1fc40000 1bc60000 17440000              ..........D.

240334fc <init_jk>:
240334fc:	00000004 00000007 00000009              ............

24033508 <_init>:
24033508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2403350a:	bf00      	nop
2403350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2403350e:	bc08      	pop	{r3}
24033510:	469e      	mov	lr, r3
24033512:	4770      	bx	lr

24033514 <_fini>:
24033514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24033516:	bf00      	nop
24033518:	bcf8      	pop	{r3, r4, r5, r6, r7}
2403351a:	bc08      	pop	{r3}
2403351c:	469e      	mov	lr, r3
2403351e:	4770      	bx	lr

24033520 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
24033520:	f85f f000 	ldr.w	pc, [pc]	; 24033524 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
24033524:	00005a01 	.word	0x00005a01

24033528 <__HAL_SAI_TxHalfCpltCallback_veneer>:
24033528:	f85f f000 	ldr.w	pc, [pc]	; 2403352c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2403352c:	000037e1 	.word	0x000037e1

24033530 <__HAL_SPI_RxCpltCallback_veneer>:
24033530:	f85f f000 	ldr.w	pc, [pc]	; 24033534 <__HAL_SPI_RxCpltCallback_veneer+0x4>
24033534:	00003361 	.word	0x00003361

24033538 <__HAL_SAI_TxCpltCallback_veneer>:
24033538:	f85f f000 	ldr.w	pc, [pc]	; 2403353c <__HAL_SAI_TxCpltCallback_veneer+0x4>
2403353c:	000037c1 	.word	0x000037c1

24033540 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
24033540:	f85f f000 	ldr.w	pc, [pc]	; 24033544 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
24033544:	00003781 	.word	0x00003781

24033548 <__LEAF_clip_veneer>:
24033548:	f85f f000 	ldr.w	pc, [pc]	; 2403354c <__LEAF_clip_veneer+0x4>
2403354c:	00005d21 	.word	0x00005d21

24033550 <__HAL_SPI_TxRxCpltCallback_veneer>:
24033550:	f85f f000 	ldr.w	pc, [pc]	; 24033554 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
24033554:	00003721 	.word	0x00003721

24033558 <__tOversampler_upsample_veneer>:
24033558:	f85f f000 	ldr.w	pc, [pc]	; 2403355c <__tOversampler_upsample_veneer+0x4>
2403355c:	00005ac1 	.word	0x00005ac1

24033560 <__tOversampler_downsample_veneer>:
24033560:	f85f f000 	ldr.w	pc, [pc]	; 24033564 <__tOversampler_downsample_veneer+0x4>
24033564:	00005ba1 	.word	0x00005ba1

24033568 <__parsePreset_veneer>:
24033568:	f85f f000 	ldr.w	pc, [pc]	; 2403356c <__parsePreset_veneer+0x4>
2403356c:	000040e1 	.word	0x000040e1

24033570 <__HAL_SPI_RxHalfCpltCallback_veneer>:
24033570:	f85f f000 	ldr.w	pc, [pc]	; 24033574 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
24033574:	00003541 	.word	0x00003541

24033578 <__HAL_I2C_ErrorCallback_veneer>:
24033578:	f85f f000 	ldr.w	pc, [pc]	; 2403357c <__HAL_I2C_ErrorCallback_veneer+0x4>
2403357c:	00005a81 	.word	0x00005a81

24033580 <__filter_tick_veneer>:
24033580:	f85f f000 	ldr.w	pc, [pc]	; 24033584 <__filter_tick_veneer+0x4>
24033584:	00000a61 	.word	0x00000a61

24033588 <__noise_tick_veneer>:
24033588:	f85f f000 	ldr.w	pc, [pc]	; 2403358c <__noise_tick_veneer+0x4>
2403358c:	000024a1 	.word	0x000024a1

24033590 <__HAL_SAI_ErrorCallback_veneer>:
24033590:	f85f f000 	ldr.w	pc, [pc]	; 24033594 <__HAL_SAI_ErrorCallback_veneer+0x4>
24033594:	00003801 	.word	0x00003801

24033598 <__tickMappings_veneer>:
24033598:	f85f f000 	ldr.w	pc, [pc]	; 2403359c <__tickMappings_veneer+0x4>
2403359c:	00001621 	.word	0x00001621

240335a0 <__oscillator_tick_veneer>:
240335a0:	f85f f000 	ldr.w	pc, [pc]	; 240335a4 <__oscillator_tick_veneer+0x4>
240335a4:	00000561 	.word	0x00000561

Disassembly of section .itcmram:

00000400 <updateStateFromSPIMessage>:
}
     400:	b5f0      	push	{r4, r5, r6, r7, lr}
     402:	4d3f      	ldr	r5, [pc, #252]	; (500 <updateStateFromSPIMessage+0x100>)
     404:	b083      	sub	sp, #12
     406:	4e3f      	ldr	r6, [pc, #252]	; (504 <updateStateFromSPIMessage+0x104>)
     408:	182b      	adds	r3, r5, r0
     40a:	4a3f      	ldr	r2, [pc, #252]	; (508 <updateStateFromSPIMessage+0x108>)
     40c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 54c <updateStateFromSPIMessage+0x14c>
    __HAL_DMA_ENABLE(hdma);
     410:	7e1c      	ldrb	r4, [r3, #24]
     412:	7e5b      	ldrb	r3, [r3, #25]
     414:	4f3d      	ldr	r7, [pc, #244]	; (50c <updateStateFromSPIMessage+0x10c>)
     416:	6033      	str	r3, [r6, #0]
     418:	f3c4 1380 	ubfx	r3, r4, #6, #1
     41c:	493c      	ldr	r1, [pc, #240]	; (510 <updateStateFromSPIMessage+0x110>)
     41e:	6013      	str	r3, [r2, #0]
     420:	f3c4 1340 	ubfx	r3, r4, #5, #1
     424:	6832      	ldr	r2, [r6, #0]
     426:	f8cc 3000 	str.w	r3, [ip]
     42a:	f3c4 1300 	ubfx	r3, r4, #4, #1
     42e:	600b      	str	r3, [r1, #0]
     430:	683b      	ldr	r3, [r7, #0]
     432:	429a      	cmp	r2, r3
     434:	d016      	beq.n	464 <updateStateFromSPIMessage+0x64>
     436:	6833      	ldr	r3, [r6, #0]
     438:	2b3f      	cmp	r3, #63	; 0x3f
     43a:	d056      	beq.n	4ea <updateStateFromSPIMessage+0xea>
     43c:	6833      	ldr	r3, [r6, #0]
     43e:	2b3e      	cmp	r3, #62	; 0x3e
     440:	d053      	beq.n	4ea <updateStateFromSPIMessage+0xea>
     442:	6833      	ldr	r3, [r6, #0]
     444:	2b3d      	cmp	r3, #61	; 0x3d
     446:	d050      	beq.n	4ea <updateStateFromSPIMessage+0xea>
     448:	4b32      	ldr	r3, [pc, #200]	; (514 <updateStateFromSPIMessage+0x114>)
     44a:	2201      	movs	r2, #1
     44c:	4932      	ldr	r1, [pc, #200]	; (518 <updateStateFromSPIMessage+0x118>)
     44e:	601a      	str	r2, [r3, #0]
     450:	4b32      	ldr	r3, [pc, #200]	; (51c <updateStateFromSPIMessage+0x11c>)
     452:	781a      	ldrb	r2, [r3, #0]
     454:	6833      	ldr	r3, [r6, #0]
     456:	b2db      	uxtb	r3, r3
     458:	700b      	strb	r3, [r1, #0]
     45a:	b11a      	cbz	r2, 464 <updateStateFromSPIMessage+0x64>
     45c:	4b30      	ldr	r3, [pc, #192]	; (520 <updateStateFromSPIMessage+0x120>)
     45e:	781b      	ldrb	r3, [r3, #0]
     460:	2b00      	cmp	r3, #0
     462:	d047      	beq.n	4f4 <updateStateFromSPIMessage+0xf4>
     464:	6833      	ldr	r3, [r6, #0]
     466:	4428      	add	r0, r5
     468:	f004 040f 	and.w	r4, r4, #15
     46c:	492d      	ldr	r1, [pc, #180]	; (524 <updateStateFromSPIMessage+0x124>)
     46e:	603b      	str	r3, [r7, #0]
     470:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
     474:	7e82      	ldrb	r2, [r0, #26]
     476:	3c05      	subs	r4, #5
     478:	7ec3      	ldrb	r3, [r0, #27]
     47a:	ee07 4a90 	vmov	s15, r4
     47e:	7f05      	ldrb	r5, [r0, #28]
     480:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     484:	7f42      	ldrb	r2, [r0, #29]
     486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     48a:	4c27      	ldr	r4, [pc, #156]	; (528 <updateStateFromSPIMessage+0x128>)
     48c:	b29b      	uxth	r3, r3
     48e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 52c <updateStateFromSPIMessage+0x12c>
     492:	eb02 2205 	add.w	r2, r2, r5, lsl #8
     496:	4d26      	ldr	r5, [pc, #152]	; (530 <updateStateFromSPIMessage+0x130>)
     498:	800b      	strh	r3, [r1, #0]
     49a:	ee67 7aa6 	vmul.f32	s15, s15, s13
     49e:	880b      	ldrh	r3, [r1, #0]
     4a0:	6022      	str	r2, [r4, #0]
     4a2:	b29b      	uxth	r3, r3
     4a4:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
     4a6:	4e23      	ldr	r6, [pc, #140]	; (534 <updateStateFromSPIMessage+0x134>)
    __HAL_DMA_ENABLE(hdma);
     4a8:	ee00 3a10 	vmov	s0, r3
     4ac:	4b22      	ldr	r3, [pc, #136]	; (538 <updateStateFromSPIMessage+0x138>)
}
     4ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b2:	edc3 7a00 	vstr	s15, [r3]
     4b6:	682b      	ldr	r3, [r5, #0]
}
     4b8:	ee20 0a07 	vmul.f32	s0, s0, s14
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4bc:	429a      	cmp	r2, r3
     4be:	ed86 0a00 	vstr	s0, [r6]
     4c2:	d00a      	beq.n	4da <updateStateFromSPIMessage+0xda>
  __HAL_LOCK(hdma);
     4c4:	2201      	movs	r2, #1
}
     4c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_ENABLE(hdma);
     4ca:	481c      	ldr	r0, [pc, #112]	; (53c <updateStateFromSPIMessage+0x13c>)
     4cc:	f006 fe18 	bl	7100 <__HAL_GPIO_WritePin_veneer>
}
     4d0:	4b1b      	ldr	r3, [pc, #108]	; (540 <updateStateFromSPIMessage+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d2:	2201      	movs	r2, #1
     4d4:	ed96 0a00 	vldr	s0, [r6]
     4d8:	601a      	str	r2, [r3, #0]
     4da:	6823      	ldr	r3, [r4, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	4819      	ldr	r0, [pc, #100]	; (544 <updateStateFromSPIMessage+0x144>)
     4de:	602b      	str	r3, [r5, #0]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	b003      	add	sp, #12
     4e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     4e6:	f006 bd6f 	b.w	6fc8 <__tExpSmooth_setDest_veneer>
     4ea:	6833      	ldr	r3, [r6, #0]
     4ec:	4a16      	ldr	r2, [pc, #88]	; (548 <updateStateFromSPIMessage+0x148>)
     4ee:	b2db      	uxtb	r3, r3
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	7013      	strb	r3, [r2, #0]
     4f2:	e7b7      	b.n	464 <updateStateFromSPIMessage+0x64>
     4f4:	9001      	str	r0, [sp, #4]
     4f6:	f006 fd57 	bl	6fa8 <__waitForNewPresetDataOverI2C_veneer>
     4fa:	9801      	ldr	r0, [sp, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	e7b2      	b.n	464 <updateStateFromSPIMessage+0x64>
     4fe:	bf00      	nop
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	30000100 	.word	0x30000100
     504:	200147ac 	.word	0x200147ac
     508:	200054b4 	.word	0x200054b4
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	20005624 	.word	0x20005624
     510:	20005044 	.word	0x20005044
     514:	20018638 	.word	0x20018638
     518:	2000074c 	.word	0x2000074c
     51c:	200149b1 	.word	0x200149b1
     520:	20018a44 	.word	0x20018a44
     524:	200147b8 	.word	0x200147b8
     528:	20014710 	.word	0x20014710
     52c:	39800801 	.word	0x39800801
                for (int j = i + 1; j != n; ++j)
                {
                    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&p->_zc, j);
                    if (next->_peak >= threshold)
                    {
                        int period = tZeroCrossingInfo_period(&curr, &next);
     530:	20014720 	.word	0x20014720
     534:	200147b4 	.word	0x200147b4
     538:	200054f0 	.word	0x200054f0
     53c:	58020c00 	.word	0x58020c00
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     540:	200054b8 	.word	0x200054b8
        if (info._periodicity > collector->_fundamental._periodicity &&
     544:	200147bc 	.word	0x200147bc
     548:	200149b4 	.word	0x200149b4
     54c:	20005040 	.word	0x20005040
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     550:	f3af 8000 	nop.w
     554:	f3af 8000 	nop.w
     558:	f3af 8000 	nop.w
     55c:	f3af 8000 	nop.w

00000560 <oscillator_tick>:
        if (info._periodicity > collector->_fundamental._periodicity &&
     560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     564:	496f      	ldr	r1, [pc, #444]	; (724 <oscillator_tick+0x1c4>)
            float periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     566:	2500      	movs	r5, #0
     568:	4a6f      	ldr	r2, [pc, #444]	; (728 <oscillator_tick+0x1c8>)
     56a:	ed2d 8b0c 	vpush	{d8-d13}
            if (periodicity_diff <= collector->_harmonic_threshold)
     56e:	700d      	strb	r5, [r1, #0]
     570:	b089      	sub	sp, #36	; 0x24
     572:	496e      	ldr	r1, [pc, #440]	; (72c <oscillator_tick+0x1cc>)
     574:	eb02 0680 	add.w	r6, r2, r0, lsl #2
                collector->_fundamental._i1 = info._i1;
     578:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 730 <oscillator_tick+0x1d0>
            if (periodicity_diff <= collector->_harmonic_threshold)
     57c:	684b      	ldr	r3, [r1, #4]
                            float periodicity = 1.0f - (count * p->_weight);
     57e:	ed86 9a00 	vstr	s18, [r6]
            if (periodicity_diff <= collector->_harmonic_threshold)
     582:	9305      	str	r3, [sp, #20]
                collector->_fundamental._i2 = info._i2;
     584:	4b6b      	ldr	r3, [pc, #428]	; (734 <oscillator_tick+0x1d4>)
                collector->_fundamental._i1 = info._i1;
     586:	ed86 9a06 	vstr	s18, [r6, #24]
                            if (count == 0)
     58a:	781a      	ldrb	r2, [r3, #0]
     58c:	ed86 9a02 	vstr	s18, [r6, #8]
    unsigned int trailing_edge = 0;
     590:	ed86 9a08 	vstr	s18, [r6, #32]
    if (info._period != -1.0f)
     594:	ed86 9a04 	vstr	s18, [r6, #16]
     598:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
     59c:	2a00      	cmp	r2, #0
     59e:	f000 80b6 	beq.w	70e <oscillator_tick+0x1ae>
     5a2:	ea4f 0a80 	mov.w	sl, r0, lsl #2
                                for (int d = start - 1; d > p->_min_period; --d)
     5a6:	4a64      	ldr	r2, [pc, #400]	; (738 <oscillator_tick+0x1d8>)
                            int count = tBACF_getCorrelation(&p->_bacf, period);
     5a8:	4c64      	ldr	r4, [pc, #400]	; (73c <oscillator_tick+0x1dc>)
                                for (int d = start + 1; d < mid; ++d)
     5aa:	eef0 9a40 	vmov.f32	s19, s0
                            float periodicity = 1.0f - (count * p->_weight);
     5ae:	eb02 0b0a 	add.w	fp, r2, sl
            if (periodicity_diff <= collector->_harmonic_threshold)
     5b2:	4a63      	ldr	r2, [pc, #396]	; (740 <oscillator_tick+0x1e0>)
     5b4:	4f63      	ldr	r7, [pc, #396]	; (744 <oscillator_tick+0x1e4>)
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5b6:	4681      	mov	r9, r0
     5b8:	eb02 030a 	add.w	r3, r2, sl
     5bc:	ed9f ca62 	vldr	s24, [pc, #392]	; 748 <oscillator_tick+0x1e8>
     5c0:	eddf ba62 	vldr	s23, [pc, #392]	; 74c <oscillator_tick+0x1ec>
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	4454      	add	r4, sl
     5c6:	9301      	str	r3, [sp, #4]
     5c8:	4457      	add	r7, sl
     5ca:	4b61      	ldr	r3, [pc, #388]	; (750 <oscillator_tick+0x1f0>)
     5cc:	ed9f ba61 	vldr	s22, [pc, #388]	; 754 <oscillator_tick+0x1f4>
	*ptr++ = (BYTE)val; val >>= 8;
     5d0:	eddf aa61 	vldr	s21, [pc, #388]	; 758 <oscillator_tick+0x1f8>
     5d4:	ed9f aa61 	vldr	s20, [pc, #388]	; 75c <oscillator_tick+0x1fc>
     5d8:	9302      	str	r3, [sp, #8]
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5da:	f8cd a010 	str.w	sl, [sp, #16]
     5de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e2:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
     5e6:	eeb0 0a69 	vmov.f32	s0, s19
     5ea:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		*d++ = (BYTE)val;
     5ee:	4638      	mov	r0, r7
     5f0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 72c <oscillator_tick+0x1cc>
     5f4:	eef4 6ac7 	vcmpe.f32	s13, s14
	*ptr++ = (BYTE)val; val >>= 8;
     5f8:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
     5fc:	eea7 0a8c 	vfma.f32	s0, s15, s24
     600:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
     604:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
}
     608:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	*ptr++ = (BYTE)val; val >>= 8;
     60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	*ptr++ = (BYTE)val; val >>= 8;
     610:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
     614:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
	*ptr++ = (BYTE)val; val >>= 8;
     618:	f106 0608 	add.w	r6, r6, #8
	*ptr++ = (BYTE)val;
     61c:	bfcc      	ite	gt
     61e:	2201      	movgt	r2, #1
}
     620:	2200      	movle	r2, #0
	const BYTE *s = (const BYTE*)src;
     622:	9203      	str	r2, [sp, #12]
     624:	f006 fcd0 	bl	6fc8 <__tExpSmooth_setDest_veneer>
     628:	4638      	mov	r0, r7
			*d++ = *s++;
     62a:	f8d8 a004 	ldr.w	sl, [r8, #4]
		} while (--cnt);
     62e:	f006 fd6f 	bl	7110 <__tExpSmooth_tick_veneer>
			*d++ = *s++;
     632:	eeb0 1a6a 	vmov.f32	s2, s21
		} while (--cnt);
     636:	eef0 0a40 	vmov.f32	s1, s0

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     63a:	3708      	adds	r7, #8
     63c:	eeb0 0a4a 	vmov.f32	s0, s20
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     640:	f005 fb6e 	bl	5d20 <LEAF_clip>
     644:	eef0 7a4b 	vmov.f32	s15, s22
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     648:	465b      	mov	r3, fp
     64a:	4a45      	ldr	r2, [pc, #276]	; (760 <oscillator_tick+0x200>)
     64c:	4845      	ldr	r0, [pc, #276]	; (764 <oscillator_tick+0x204>)
     64e:	eef0 0a6d 	vmov.f32	s1, s27
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     652:	eee0 7a2b 	vfma.f32	s15, s0, s23
		*d++ = (BYTE)val;
     656:	edd3 5a00 	vldr	s11, [r3]
     65a:	f8d8 3004 	ldr.w	r3, [r8, #4]
     65e:	eeb0 0a4d 	vmov.f32	s0, s26
	*ptr++ = (BYTE)val; val >>= 8;
     662:	ed8d 9a07 	vstr	s18, [sp, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     666:	f10b 0b08 	add.w	fp, fp, #8
			pte[PTE_System] = sys;				/* System type */
     66a:	eba3 030a 	sub.w	r3, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
     66e:	6013      	str	r3, [r2, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     670:	eebd 7ae7 	vcvt.s32.f32	s14, s15
     674:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
     676:	ee78 6a67 	vsub.f32	s13, s16, s15
     67a:	ee38 8a68 	vsub.f32	s16, s16, s17
	*ptr++ = (BYTE)val; val >>= 8;
     67e:	ee17 3a10 	vmov	r3, s14
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
			pte[PTE_EdHead] = 254;				/* End head */
     686:	1c59      	adds	r1, r3, #1
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     688:	f3c3 030e 	ubfx	r3, r3, #0, #15
	*ptr++ = (BYTE)val; val >>= 8;
     68c:	ee77 7ac6 	vsub.f32	s15, s15, s12
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     690:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			pte[PTE_EdHead] = 254;				/* End head */
     694:	f3c1 010e 	ubfx	r1, r1, #0, #15
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     698:	ee76 6a86 	vadd.f32	s13, s13, s12
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	ed93 7a00 	vldr	s14, [r3]
	*ptr++ = (BYTE)val;
     6a0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
     6a4:	9904      	ldr	r1, [sp, #16]
     6a6:	a807      	add	r0, sp, #28
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	ed93 6a00 	vldr	s12, [r3]
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ac:	4b2e      	ldr	r3, [pc, #184]	; (768 <oscillator_tick+0x208>)
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	ee67 7a86 	vmul.f32	s15, s15, s12
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	440b      	add	r3, r1
     6b4:	4629      	mov	r1, r5
     6b6:	3501      	adds	r5, #1
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6b8:	eee6 7a87 	vfma.f32	s15, s13, s14
     6bc:	ed93 7a00 	vldr	s14, [r3]
     6c0:	9b02      	ldr	r3, [sp, #8]
     6c2:	ee27 7a25 	vmul.f32	s14, s14, s11
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c6:	f853 8b04 	ldr.w	r8, [r3], #4
     6ca:	9302      	str	r3, [sp, #8]
     6cc:	464b      	mov	r3, r9
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6ce:	eea7 0a87 	vfma.f32	s0, s15, s14
     6d2:	47c0      	blx	r8
     6d4:	eddd 7a07 	vldr	s15, [sp, #28]
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d8:	9b01      	ldr	r3, [sp, #4]
			sys = 0x0C;		/* FAT32X */
     6da:	ee6c 7aa7 	vmul.f32	s15, s25, s15
	const BYTE *s = (const BYTE*)src;
     6de:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
     6e2:	461a      	mov	r2, r3
     6e4:	3308      	adds	r3, #8
			*d++ = *s++;
     6e6:	ee67 8a28 	vmul.f32	s17, s14, s17
		} while (--cnt);
     6ea:	9301      	str	r3, [sp, #4]
			*d++ = *s++;
     6ec:	ee27 7a87 	vmul.f32	s14, s15, s14
		} while (--cnt);
     6f0:	4b10      	ldr	r3, [pc, #64]	; (734 <oscillator_tick+0x1d4>)
     6f2:	ee68 8aa7 	vmul.f32	s17, s17, s15
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f6:	edc2 7a00 	vstr	s15, [r2]
     6fa:	781b      	ldrb	r3, [r3, #0]
     6fc:	ee28 8a07 	vmul.f32	s16, s16, s14
     700:	42ab      	cmp	r3, r5
     702:	ed46 8a02 	vstr	s17, [r6, #-8]
     706:	ed86 8a04 	vstr	s16, [r6, #16]
     70a:	f73f af68 	bgt.w	5de <oscillator_tick+0x7e>
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <oscillator_tick+0x1cc>)
     710:	9905      	ldr	r1, [sp, #20]
     712:	685b      	ldr	r3, [r3, #4]
     714:	4a15      	ldr	r2, [pc, #84]	; (76c <oscillator_tick+0x20c>)
     716:	1a5b      	subs	r3, r3, r1
     718:	6013      	str	r3, [r2, #0]
     71a:	b009      	add	sp, #36	; 0x24
     71c:	ecbd 8b0c 	vpop	{d8-d13}
     720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     724:	20016b6d 	.word	0x20016b6d
}
     728:	200054fc 	.word	0x200054fc
     72c:	e0001000 	.word	0xe0001000
     730:	00000000 	.word	0x00000000
     734:	20000068 	.word	0x20000068
     738:	200050c0 	.word	0x200050c0
     73c:	20017534 	.word	0x20017534
     740:	200145c0 	.word	0x200145c0
     744:	20005600 	.word	0x20005600
     748:	3c23d70a 	.word	0x3c23d70a
     74c:	42c80000 	.word	0x42c80000
     750:	20005ae4 	.word	0x20005ae4
     754:	46800000 	.word	0x46800000
     758:	4323d666 	.word	0x4323d666
     75c:	c323d666 	.word	0xc323d666
     760:	2001473c 	.word	0x2001473c
     764:	3001a000 	.word	0x3001a000
     768:	20005178 	.word	0x20005178
     76c:	20014754 	.word	0x20014754
     770:	f3af 8000 	nop.w
     774:	f3af 8000 	nop.w
     778:	f3af 8000 	nop.w
     77c:	f3af 8000 	nop.w

00000780 <sawSquareTick>:
{
     780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     784:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
     786:	4c1a      	ldr	r4, [pc, #104]	; (7f0 <sawSquareTick+0x70>)
     788:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     78c:	4617      	mov	r7, r2
     78e:	4688      	mov	r8, r1
     790:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
     792:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     796:	ed2d 8b02 	vpush	{d8}
     79a:	eeb0 8a60 	vmov.f32	s16, s1
     79e:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
     7a0:	9001      	str	r0, [sp, #4]
     7a2:	f006 fb3d 	bl	6e20 <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
     7a6:	9801      	ldr	r0, [sp, #4]
     7a8:	eeb0 0a48 	vmov.f32	s0, s16
     7ac:	f006 fc64 	bl	7078 <__tMBSawPulse_setShape_veneer>
    if (sync)
     7b0:	9801      	ldr	r0, [sp, #4]
     7b2:	b977      	cbnz	r7, 7d2 <sawSquareTick+0x52>
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
     7b4:	f005 fc34 	bl	6020 <tMBSawPulse_tick>
     7b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     7bc:	edd5 7a00 	vldr	s15, [r5]
     7c0:	eee0 7a07 	vfma.f32	s15, s0, s14
     7c4:	edc5 7a00 	vstr	s15, [r5]
}
     7c8:	b002      	add	sp, #8
     7ca:	ecbd 8b02 	vpop	{d8}
     7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     7d2:	4a08      	ldr	r2, [pc, #32]	; (7f4 <sawSquareTick+0x74>)
     7d4:	4b08      	ldr	r3, [pc, #32]	; (7f8 <sawSquareTick+0x78>)
     7d6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     7da:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     7de:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     7e2:	ed96 0a00 	vldr	s0, [r6]
     7e6:	f006 fb5b 	bl	6ea0 <tMBSawPulse_sync>
     7ea:	9801      	ldr	r0, [sp, #4]
     7ec:	e7e2      	b.n	7b4 <sawSquareTick+0x34>
     7ee:	bf00      	nop
     7f0:	20005a8c 	.word	0x20005a8c
     7f4:	2401a628 	.word	0x2401a628
     7f8:	200145c0 	.word	0x200145c0
     7fc:	f3af 8000 	nop.w

00000800 <sineTriTick>:
{
     800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     804:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
     806:	4c1a      	ldr	r4, [pc, #104]	; (870 <sineTriTick+0x70>)
     808:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     80c:	4617      	mov	r7, r2
     80e:	4688      	mov	r8, r1
     810:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
     812:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     816:	ed2d 8b02 	vpush	{d8}
     81a:	eeb0 8a60 	vmov.f32	s16, s1
     81e:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
     820:	9001      	str	r0, [sp, #4]
     822:	f006 fc05 	bl	7030 <__tMBSineTri_setFreq_veneer>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
     826:	9801      	ldr	r0, [sp, #4]
     828:	eeb0 0a48 	vmov.f32	s0, s16
     82c:	f006 fc28 	bl	7080 <__tMBSineTri_setShape_veneer>
    if (sync)
     830:	9801      	ldr	r0, [sp, #4]
     832:	b977      	cbnz	r7, 852 <sineTriTick+0x52>
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
     834:	f006 fb70 	bl	6f18 <__tMBSineTri_tick_veneer>
     838:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     83c:	edd5 7a00 	vldr	s15, [r5]
     840:	eee0 7a07 	vfma.f32	s15, s0, s14
     844:	edc5 7a00 	vstr	s15, [r5]
}
     848:	b002      	add	sp, #8
     84a:	ecbd 8b02 	vpop	{d8}
     84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     852:	4a08      	ldr	r2, [pc, #32]	; (874 <sineTriTick+0x74>)
     854:	4b08      	ldr	r3, [pc, #32]	; (878 <sineTriTick+0x78>)
     856:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     85a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     85e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     862:	ed96 0a00 	vldr	s0, [r6]
     866:	f006 fc47 	bl	70f8 <__tMBSineTri_sync_veneer>
     86a:	9801      	ldr	r0, [sp, #4]
     86c:	e7e2      	b.n	834 <sineTriTick+0x34>
     86e:	bf00      	nop
     870:	20005b48 	.word	0x20005b48
     874:	2401a628 	.word	0x2401a628
     878:	200145c0 	.word	0x200145c0
     87c:	f3af 8000 	nop.w

00000880 <sawTick>:
{
     880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
     884:	4c14      	ldr	r4, [pc, #80]	; (8d8 <sawTick+0x58>)
{
     886:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
     888:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     88c:	b082      	sub	sp, #8
     88e:	4617      	mov	r7, r2
     890:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
     892:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     896:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
     898:	9001      	str	r0, [sp, #4]
     89a:	f006 fb39 	bl	6f10 <__tMBSaw_setFreq_veneer>
    if (sync)
     89e:	9801      	ldr	r0, [sp, #4]
     8a0:	b967      	cbnz	r7, 8bc <sawTick+0x3c>
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
     8a2:	f006 fb79 	bl	6f98 <__tMBSaw_tick_veneer>
     8a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     8aa:	edd5 7a00 	vldr	s15, [r5]
     8ae:	eee0 7a07 	vfma.f32	s15, s0, s14
     8b2:	edc5 7a00 	vstr	s15, [r5]
}
     8b6:	b002      	add	sp, #8
     8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     8bc:	4a07      	ldr	r2, [pc, #28]	; (8dc <sawTick+0x5c>)
     8be:	4b08      	ldr	r3, [pc, #32]	; (8e0 <sawTick+0x60>)
     8c0:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     8c4:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     8c8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     8cc:	ed96 0a00 	vldr	s0, [r6]
     8d0:	f006 fb72 	bl	6fb8 <__tMBSaw_sync_veneer>
     8d4:	9801      	ldr	r0, [sp, #4]
     8d6:	e7e4      	b.n	8a2 <sawTick+0x22>
     8d8:	20005a74 	.word	0x20005a74
     8dc:	2401a628 	.word	0x2401a628
     8e0:	200145c0 	.word	0x200145c0
     8e4:	f3af 8000 	nop.w
     8e8:	f3af 8000 	nop.w
     8ec:	f3af 8000 	nop.w
     8f0:	f3af 8000 	nop.w
     8f4:	f3af 8000 	nop.w
     8f8:	f3af 8000 	nop.w
     8fc:	f3af 8000 	nop.w

00000900 <pulseTick>:
{
     900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     904:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
     906:	4c1a      	ldr	r4, [pc, #104]	; (970 <pulseTick+0x70>)
     908:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     90c:	4617      	mov	r7, r2
     90e:	4688      	mov	r8, r1
     910:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
     912:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     916:	ed2d 8b02 	vpush	{d8}
     91a:	eeb0 8a60 	vmov.f32	s16, s1
     91e:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
     920:	9001      	str	r0, [sp, #4]
     922:	f006 fb2d 	bl	6f80 <__tMBPulse_setFreq_veneer>
    tMBPulse_setWidth(&pulse[v][string], shape);
     926:	9801      	ldr	r0, [sp, #4]
     928:	eeb0 0a48 	vmov.f32	s0, s16
     92c:	f006 fb2c 	bl	6f88 <__tMBPulse_setWidth_veneer>
    if (sync)
     930:	9801      	ldr	r0, [sp, #4]
     932:	b977      	cbnz	r7, 952 <pulseTick+0x52>
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
     934:	f006 fb0c 	bl	6f50 <__tMBPulse_tick_veneer>
     938:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     93c:	edd5 7a00 	vldr	s15, [r5]
     940:	eee0 7a07 	vfma.f32	s15, s0, s14
     944:	edc5 7a00 	vstr	s15, [r5]
}
     948:	b002      	add	sp, #8
     94a:	ecbd 8b02 	vpop	{d8}
     94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     952:	4a08      	ldr	r2, [pc, #32]	; (974 <pulseTick+0x74>)
     954:	4b08      	ldr	r3, [pc, #32]	; (978 <pulseTick+0x78>)
     956:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     95a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     95e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     962:	ed96 0a00 	vldr	s0, [r6]
     966:	f006 fb8f 	bl	7088 <__tMBPulse_sync_veneer>
     96a:	9801      	ldr	r0, [sp, #4]
     96c:	e7e2      	b.n	934 <pulseTick+0x34>
     96e:	bf00      	nop
     970:	20005658 	.word	0x20005658
     974:	2401a628 	.word	0x2401a628
     978:	200145c0 	.word	0x200145c0
     97c:	f3af 8000 	nop.w

00000980 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
     980:	4a0a      	ldr	r2, [pc, #40]	; (9ac <sineTick+0x2c>)
     982:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
     986:	b510      	push	{r4, lr}
     988:	4604      	mov	r4, r0
     98a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
     98c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
     990:	9001      	str	r0, [sp, #4]
     992:	f006 fb31 	bl	6ff8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
     996:	9801      	ldr	r0, [sp, #4]
     998:	f006 fb36 	bl	7008 <__tCycle_tick_veneer>
     99c:	edd4 7a00 	vldr	s15, [r4]
     9a0:	ee37 0a80 	vadd.f32	s0, s15, s0
     9a4:	ed84 0a00 	vstr	s0, [r4]
}
     9a8:	b002      	add	sp, #8
     9aa:	bd10      	pop	{r4, pc}
     9ac:	20005b30 	.word	0x20005b30
     9b0:	f3af 8000 	nop.w
     9b4:	f3af 8000 	nop.w
     9b8:	f3af 8000 	nop.w
     9bc:	f3af 8000 	nop.w

000009c0 <triTick>:
{
     9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9c4:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
     9c6:	4c1a      	ldr	r4, [pc, #104]	; (a30 <triTick+0x70>)
     9c8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
     9cc:	4617      	mov	r7, r2
     9ce:	4688      	mov	r8, r1
     9d0:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
     9d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
     9d6:	ed2d 8b02 	vpush	{d8}
     9da:	eeb0 8a60 	vmov.f32	s16, s1
     9de:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
     9e0:	9001      	str	r0, [sp, #4]
     9e2:	f006 fb05 	bl	6ff0 <__tMBTriangle_setFreq_veneer>
    tMBTriangle_setWidth(&tri[v][string], shape);
     9e6:	9801      	ldr	r0, [sp, #4]
     9e8:	eeb0 0a48 	vmov.f32	s0, s16
     9ec:	f006 fb30 	bl	7050 <__tMBTriangle_setWidth_veneer>
    if (sync)
     9f0:	9801      	ldr	r0, [sp, #4]
     9f2:	b977      	cbnz	r7, a12 <triTick+0x52>
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
     9f4:	f006 faec 	bl	6fd0 <__tMBTriangle_tick_veneer>
     9f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     9fc:	edd5 7a00 	vldr	s15, [r5]
     a00:	eee0 7a07 	vfma.f32	s15, s0, s14
     a04:	edc5 7a00 	vstr	s15, [r5]
}
     a08:	b002      	add	sp, #8
     a0a:	ecbd 8b02 	vpop	{d8}
     a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
     a12:	4a08      	ldr	r2, [pc, #32]	; (a34 <triTick+0x74>)
     a14:	4b08      	ldr	r3, [pc, #32]	; (a38 <triTick+0x78>)
     a16:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     a1a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
     a1e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
     a22:	ed96 0a00 	vldr	s0, [r6]
     a26:	f006 fac3 	bl	6fb0 <__tMBTriangle_sync_veneer>
     a2a:	9801      	ldr	r0, [sp, #4]
     a2c:	e7e2      	b.n	9f4 <triTick+0x34>
     a2e:	bf00      	nop
     a30:	20014794 	.word	0x20014794
     a34:	2401a628 	.word	0x2401a628
     a38:	200145c0 	.word	0x200145c0
     a3c:	f3af 8000 	nop.w

00000a40 <userTick>:
}
     a40:	4770      	bx	lr
     a42:	bf00      	nop
     a44:	f3af 8000 	nop.w
     a48:	f3af 8000 	nop.w
     a4c:	f3af 8000 	nop.w
     a50:	f3af 8000 	nop.w
     a54:	f3af 8000 	nop.w
     a58:	f3af 8000 	nop.w
     a5c:	f3af 8000 	nop.w

00000a60 <filter_tick>:
	interruptChecker = 0;
     a60:	2300      	movs	r3, #0
     a62:	4a72      	ldr	r2, [pc, #456]	; (c2c <filter_tick+0x1cc>)
{
     a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int f = 0; f < filterToTick; f++)
     a68:	f8df 81ec 	ldr.w	r8, [pc, #492]	; c58 <filter_tick+0x1f8>
{
     a6c:	4604      	mov	r4, r0
     a6e:	460d      	mov	r5, r1
     a70:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
     a74:	7013      	strb	r3, [r2, #0]
{
     a76:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
     a78:	4a6d      	ldr	r2, [pc, #436]	; (c30 <filter_tick+0x1d0>)
     a7a:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
     a7c:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
     a80:	f898 3000 	ldrb.w	r3, [r8]
     a84:	2b00      	cmp	r3, #0
     a86:	f000 80bc 	beq.w	c02 <filter_tick+0x1a2>
		float enabled = filtParams[FilterEnabled].realVal[string];
     a8a:	4e6a      	ldr	r6, [pc, #424]	; (c34 <filter_tick+0x1d4>)
     a8c:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
     a90:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     a94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
     a98:	eeb0 8a40 	vmov.f32	s16, s0
     a9c:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
     aa0:	eef4 8ae7 	vcmpe.f32	s17, s15
     aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aa8:	d87b      	bhi.n	ba2 <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
     aaa:	2b01      	cmp	r3, #1
     aac:	d93b      	bls.n	b26 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
     aae:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
     ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
     ab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     aba:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
     abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
     ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ac6:	bfcc      	ite	gt
     ac8:	2301      	movgt	r3, #1
     aca:	2300      	movle	r3, #0
     acc:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
     ad0:	d929      	bls.n	b26 <filter_tick+0xc6>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     ad2:	4b59      	ldr	r3, [pc, #356]	; (c38 <filter_tick+0x1d8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     ad4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     ad8:	eddf 0a58 	vldr	s1, [pc, #352]	; c3c <filter_tick+0x1dc>
     adc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     ae0:	ed9f 1a57 	vldr	s2, [pc, #348]	; c40 <filter_tick+0x1e0>
     ae4:	ed9f 0a57 	vldr	s0, [pc, #348]	; c44 <filter_tick+0x1e4>
     ae8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
     aec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     af0:	4b55      	ldr	r3, [pc, #340]	; (c48 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     af2:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     af6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     afa:	edd3 6a00 	vldr	s13, [r3]
     afe:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     b02:	eee8 7a07 	vfma.f32	s15, s16, s14
     b06:	ee67 0aa0 	vmul.f32	s1, s15, s1
     b0a:	f005 f909 	bl	5d20 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     b0e:	1cab      	adds	r3, r5, #2
     b10:	484e      	ldr	r0, [pc, #312]	; (c4c <filter_tick+0x1ec>)
     b12:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     b16:	9001      	str	r0, [sp, #4]
     b18:	f006 fa56 	bl	6fc8 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     b1c:	9801      	ldr	r0, [sp, #4]
     b1e:	f006 faf7 	bl	7110 <__tExpSmooth_tick_veneer>
     b22:	ed8d 0a05 	vstr	s0, [sp, #20]
	if (enabledFilt[0])
     b26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     b2a:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
	if (enabledFilt[1])
     b2e:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     b32:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
     b36:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     b3a:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
     b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b42:	dd07      	ble.n	b54 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
     b44:	4b42      	ldr	r3, [pc, #264]	; (c50 <filter_tick+0x1f0>)
     b46:	462a      	mov	r2, r5
     b48:	ed9d 0a04 	vldr	s0, [sp, #16]
     b4c:	2100      	movs	r1, #0
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	4620      	mov	r0, r4
     b52:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
     b54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     b58:	ed94 0a01 	vldr	s0, [r4, #4]
     b5c:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     b60:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
     b64:	eea7 0a27 	vfma.f32	s0, s14, s15
     b68:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
     b6c:	f1b8 0f00 	cmp.w	r8, #0
     b70:	d009      	beq.n	b86 <filter_tick+0x126>
		filterTick[1](&samples[1], 1, cutoff[1], string);
     b72:	4b37      	ldr	r3, [pc, #220]	; (c50 <filter_tick+0x1f0>)
     b74:	462a      	mov	r2, r5
     b76:	ed9d 0a05 	vldr	s0, [sp, #20]
     b7a:	2101      	movs	r1, #1
     b7c:	685b      	ldr	r3, [r3, #4]
     b7e:	1d20      	adds	r0, r4, #4
     b80:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
     b82:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
     b86:	4b2a      	ldr	r3, [pc, #168]	; (c30 <filter_tick+0x1d0>)
     b88:	4a32      	ldr	r2, [pc, #200]	; (c54 <filter_tick+0x1f4>)
     b8a:	685b      	ldr	r3, [r3, #4]
     b8c:	1bdb      	subs	r3, r3, r7
     b8e:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
     b90:	edd4 7a00 	vldr	s15, [r4]
}
     b94:	eea7 0a88 	vfma.f32	s0, s15, s16
     b98:	b006      	add	sp, #24
     b9a:	ecbd 8b02 	vpop	{d8}
     b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
     ba2:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     ba6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
     baa:	eddf 0a24 	vldr	s1, [pc, #144]	; c3c <filter_tick+0x1dc>
     bae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     bb2:	ed9f 1a23 	vldr	s2, [pc, #140]	; c40 <filter_tick+0x1e0>
     bb6:	ed9f 0a23 	vldr	s0, [pc, #140]	; c44 <filter_tick+0x1e4>
     bba:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
     bbe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     bc2:	4b21      	ldr	r3, [pc, #132]	; (c48 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
     bc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     bcc:	ed93 7a00 	vldr	s14, [r3]
     bd0:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     bd4:	eee7 7a26 	vfma.f32	s15, s14, s13
     bd8:	ee67 0aa0 	vmul.f32	s1, s15, s1
     bdc:	f005 f8a0 	bl	5d20 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
     be0:	481a      	ldr	r0, [pc, #104]	; (c4c <filter_tick+0x1ec>)
     be2:	00ab      	lsls	r3, r5, #2
     be4:	4418      	add	r0, r3
     be6:	9001      	str	r0, [sp, #4]
     be8:	f006 f9ee 	bl	6fc8 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     bec:	9801      	ldr	r0, [sp, #4]
     bee:	f006 fa8f 	bl	7110 <__tExpSmooth_tick_veneer>
	for (int f = 0; f < filterToTick; f++)
     bf2:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
     bf6:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
     bfa:	2b01      	cmp	r3, #1
     bfc:	f63f af57 	bhi.w	aae <filter_tick+0x4e>
     c00:	e791      	b.n	b26 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     c02:	4b0c      	ldr	r3, [pc, #48]	; (c34 <filter_tick+0x1d4>)
     c04:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
     c08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     c0c:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     c10:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
     c14:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
     c18:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
     c1c:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
     c20:	eea7 0a87 	vfma.f32	s0, s15, s14
     c24:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
     c28:	e7ad      	b.n	b86 <filter_tick+0x126>
     c2a:	bf00      	nop
     c2c:	20016b6d 	.word	0x20016b6d
     c30:	e0001000 	.word	0xe0001000
     c34:	20017534 	.word	0x20017534
     c38:	20018040 	.word	0x20018040
     c3c:	420fb824 	.word	0x420fb824
     c40:	457ff000 	.word	0x457ff000
     c44:	00000000 	.word	0x00000000
     c48:	20000b0c 	.word	0x20000b0c
     c4c:	20005080 	.word	0x20005080
     c50:	200050a0 	.word	0x200050a0
     c54:	20014744 	.word	0x20014744
     c58:	20000004 	.word	0x20000004
     c5c:	f3af 8000 	nop.w

00000c60 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     c60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     c64:	4b0d      	ldr	r3, [pc, #52]	; (c9c <lowpassTick+0x3c>)
{
     c66:	b530      	push	{r4, r5, lr}
     c68:	4605      	mov	r5, r0
     c6a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
     c6c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     c70:	0094      	lsls	r4, r2, #2
     c72:	9001      	str	r0, [sp, #4]
     c74:	f006 f960 	bl	6f38 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     c78:	ed95 0a00 	vldr	s0, [r5]
     c7c:	9801      	ldr	r0, [sp, #4]
     c7e:	f006 fa2f 	bl	70e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     c82:	4a07      	ldr	r2, [pc, #28]	; (ca0 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
     c84:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     c88:	4422      	add	r2, r4
     c8a:	edd2 7a00 	vldr	s15, [r2]
     c8e:	ee27 0a80 	vmul.f32	s0, s15, s0
     c92:	ed85 0a00 	vstr	s0, [r5]
}
     c96:	b003      	add	sp, #12
     c98:	bd30      	pop	{r4, r5, pc}
     c9a:	bf00      	nop
     c9c:	20005358 	.word	0x20005358
     ca0:	20005090 	.word	0x20005090
     ca4:	f3af 8000 	nop.w
     ca8:	f3af 8000 	nop.w
     cac:	f3af 8000 	nop.w
     cb0:	f3af 8000 	nop.w
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     cc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     cc4:	4b0d      	ldr	r3, [pc, #52]	; (cfc <highpassTick+0x3c>)
{
     cc6:	b530      	push	{r4, r5, lr}
     cc8:	4605      	mov	r5, r0
     cca:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
     ccc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     cd0:	0094      	lsls	r4, r2, #2
     cd2:	9001      	str	r0, [sp, #4]
     cd4:	f006 f930 	bl	6f38 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
     cd8:	ed95 0a00 	vldr	s0, [r5]
     cdc:	9801      	ldr	r0, [sp, #4]
     cde:	f006 f9ff 	bl	70e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     ce2:	4a07      	ldr	r2, [pc, #28]	; (d00 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
     ce4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     ce8:	4422      	add	r2, r4
     cea:	edd2 7a00 	vldr	s15, [r2]
     cee:	ee27 0a80 	vmul.f32	s0, s15, s0
     cf2:	ed85 0a00 	vstr	s0, [r5]
}
     cf6:	b003      	add	sp, #12
     cf8:	bd30      	pop	{r4, r5, pc}
     cfa:	bf00      	nop
     cfc:	20005144 	.word	0x20005144
     d00:	20005090 	.word	0x20005090
     d04:	f3af 8000 	nop.w
     d08:	f3af 8000 	nop.w
     d0c:	f3af 8000 	nop.w
     d10:	f3af 8000 	nop.w
     d14:	f3af 8000 	nop.w
     d18:	f3af 8000 	nop.w
     d1c:	f3af 8000 	nop.w

00000d20 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     d20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d24:	4b0d      	ldr	r3, [pc, #52]	; (d5c <bandpassTick+0x3c>)
{
     d26:	b530      	push	{r4, r5, lr}
     d28:	4605      	mov	r5, r0
     d2a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
     d2c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     d30:	0094      	lsls	r4, r2, #2
     d32:	9001      	str	r0, [sp, #4]
     d34:	f006 f900 	bl	6f38 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     d38:	ed95 0a00 	vldr	s0, [r5]
     d3c:	9801      	ldr	r0, [sp, #4]
     d3e:	f006 f9cf 	bl	70e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
     d42:	4a07      	ldr	r2, [pc, #28]	; (d60 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
     d44:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     d48:	4422      	add	r2, r4
     d4a:	edd2 7a00 	vldr	s15, [r2]
     d4e:	ee27 0a80 	vmul.f32	s0, s15, s0
     d52:	ed85 0a00 	vstr	s0, [r5]
}
     d56:	b003      	add	sp, #12
     d58:	bd30      	pop	{r4, r5, pc}
     d5a:	bf00      	nop
     d5c:	20000afc 	.word	0x20000afc
     d60:	20005090 	.word	0x20005090
     d64:	f3af 8000 	nop.w
     d68:	f3af 8000 	nop.w
     d6c:	f3af 8000 	nop.w
     d70:	f3af 8000 	nop.w
     d74:	f3af 8000 	nop.w
     d78:	f3af 8000 	nop.w
     d7c:	f3af 8000 	nop.w

00000d80 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     d80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     d84:	4b0d      	ldr	r3, [pc, #52]	; (dbc <diodeLowpassTick+0x3c>)
{
     d86:	b530      	push	{r4, r5, lr}
     d88:	4605      	mov	r5, r0
     d8a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
     d8c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     d90:	0094      	lsls	r4, r2, #2
     d92:	9001      	str	r0, [sp, #4]
     d94:	f006 f9cc 	bl	7130 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     d98:	ed95 0a00 	vldr	s0, [r5]
     d9c:	9801      	ldr	r0, [sp, #4]
     d9e:	f006 f99b 	bl	70d8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     da2:	4a07      	ldr	r2, [pc, #28]	; (dc0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
     da4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     da8:	4422      	add	r2, r4
     daa:	edd2 7a00 	vldr	s15, [r2]
     dae:	ee27 0a80 	vmul.f32	s0, s15, s0
     db2:	ed85 0a00 	vstr	s0, [r5]
}
     db6:	b003      	add	sp, #12
     db8:	bd30      	pop	{r4, r5, pc}
     dba:	bf00      	nop
     dbc:	20005030 	.word	0x20005030
     dc0:	20005090 	.word	0x20005090
     dc4:	f3af 8000 	nop.w
     dc8:	f3af 8000 	nop.w
     dcc:	f3af 8000 	nop.w
     dd0:	f3af 8000 	nop.w
     dd4:	f3af 8000 	nop.w
     dd8:	f3af 8000 	nop.w
     ddc:	f3af 8000 	nop.w

00000de0 <VZpeakTick>:
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     de0:	4b09      	ldr	r3, [pc, #36]	; (e08 <VZpeakTick+0x28>)
     de2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     de6:	b510      	push	{r4, lr}
     de8:	4604      	mov	r4, r0
     dea:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
     dec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     df0:	9001      	str	r0, [sp, #4]
     df2:	f006 f929 	bl	7048 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
     df6:	9801      	ldr	r0, [sp, #4]
     df8:	ed94 0a00 	vldr	s0, [r4]
     dfc:	f006 f910 	bl	7020 <__tVZFilter_tickEfficient_veneer>
     e00:	ed84 0a00 	vstr	s0, [r4]
}
     e04:	b002      	add	sp, #8
     e06:	bd10      	pop	{r4, pc}
     e08:	200009c4 	.word	0x200009c4
     e0c:	f3af 8000 	nop.w
     e10:	f3af 8000 	nop.w
     e14:	f3af 8000 	nop.w
     e18:	f3af 8000 	nop.w
     e1c:	f3af 8000 	nop.w

00000e20 <VZlowshelfTick>:
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     e20:	4b09      	ldr	r3, [pc, #36]	; (e48 <VZlowshelfTick+0x28>)
     e22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     e26:	b510      	push	{r4, lr}
     e28:	4604      	mov	r4, r0
     e2a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
     e2c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     e30:	9001      	str	r0, [sp, #4]
     e32:	f006 f909 	bl	7048 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
     e36:	9801      	ldr	r0, [sp, #4]
     e38:	ed94 0a00 	vldr	s0, [r4]
     e3c:	f006 f8f0 	bl	7020 <__tVZFilter_tickEfficient_veneer>
     e40:	ed84 0a00 	vstr	s0, [r4]
}
     e44:	b002      	add	sp, #8
     e46:	bd10      	pop	{r4, pc}
     e48:	200009b4 	.word	0x200009b4
     e4c:	f3af 8000 	nop.w
     e50:	f3af 8000 	nop.w
     e54:	f3af 8000 	nop.w
     e58:	f3af 8000 	nop.w
     e5c:	f3af 8000 	nop.w

00000e60 <VZhighshelfTick>:
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     e60:	4b09      	ldr	r3, [pc, #36]	; (e88 <VZhighshelfTick+0x28>)
     e62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
     e66:	b510      	push	{r4, lr}
     e68:	4604      	mov	r4, r0
     e6a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
     e6c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     e70:	9001      	str	r0, [sp, #4]
     e72:	f006 f8e9 	bl	7048 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
     e76:	9801      	ldr	r0, [sp, #4]
     e78:	ed94 0a00 	vldr	s0, [r4]
     e7c:	f006 f8d0 	bl	7020 <__tVZFilter_tickEfficient_veneer>
     e80:	ed84 0a00 	vstr	s0, [r4]
}
     e84:	b002      	add	sp, #8
     e86:	bd10      	pop	{r4, pc}
     e88:	200009a4 	.word	0x200009a4
     e8c:	f3af 8000 	nop.w
     e90:	f3af 8000 	nop.w
     e94:	f3af 8000 	nop.w
     e98:	f3af 8000 	nop.w
     e9c:	f3af 8000 	nop.w

00000ea0 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     ea0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     ea4:	4b0d      	ldr	r3, [pc, #52]	; (edc <VZbandrejectTick+0x3c>)
{
     ea6:	b530      	push	{r4, r5, lr}
     ea8:	4605      	mov	r5, r0
     eaa:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
     eac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     eb0:	0094      	lsls	r4, r2, #2
     eb2:	9001      	str	r0, [sp, #4]
     eb4:	f006 f8c8 	bl	7048 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     eb8:	ed95 0a00 	vldr	s0, [r5]
     ebc:	9801      	ldr	r0, [sp, #4]
     ebe:	f006 f8af 	bl	7020 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
     ec2:	4a07      	ldr	r2, [pc, #28]	; (ee0 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
     ec4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     ec8:	4422      	add	r2, r4
     eca:	edd2 7a00 	vldr	s15, [r2]
     ece:	ee27 0a80 	vmul.f32	s0, s15, s0
     ed2:	ed85 0a00 	vstr	s0, [r5]
}
     ed6:	b003      	add	sp, #12
     ed8:	bd30      	pop	{r4, r5, pc}
     eda:	bf00      	nop
     edc:	20000994 	.word	0x20000994
     ee0:	20005090 	.word	0x20005090
     ee4:	f3af 8000 	nop.w
     ee8:	f3af 8000 	nop.w
     eec:	f3af 8000 	nop.w
     ef0:	f3af 8000 	nop.w
     ef4:	f3af 8000 	nop.w
     ef8:	f3af 8000 	nop.w
     efc:	f3af 8000 	nop.w

00000f00 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     f00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <LadderLowpassTick+0x3c>)
{
     f06:	b530      	push	{r4, r5, lr}
     f08:	4605      	mov	r5, r0
     f0a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
     f0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     f10:	0094      	lsls	r4, r2, #2
     f12:	9001      	str	r0, [sp, #4]
     f14:	f006 f82c 	bl	6f70 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     f18:	ed95 0a00 	vldr	s0, [r5]
     f1c:	9801      	ldr	r0, [sp, #4]
     f1e:	f006 f813 	bl	6f48 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
     f22:	4a07      	ldr	r2, [pc, #28]	; (f40 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
     f24:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
     f28:	4422      	add	r2, r4
     f2a:	edd2 7a00 	vldr	s15, [r2]
     f2e:	ee27 0a80 	vmul.f32	s0, s15, s0
     f32:	ed85 0a00 	vstr	s0, [r5]
}
     f36:	b003      	add	sp, #12
     f38:	bd30      	pop	{r4, r5, pc}
     f3a:	bf00      	nop
     f3c:	20000984 	.word	0x20000984
     f40:	20005090 	.word	0x20005090
     f44:	f3af 8000 	nop.w
     f48:	f3af 8000 	nop.w
     f4c:	f3af 8000 	nop.w
     f50:	f3af 8000 	nop.w
     f54:	f3af 8000 	nop.w
     f58:	f3af 8000 	nop.w
     f5c:	f3af 8000 	nop.w

00000f60 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     f60:	eb00 0240 	add.w	r2, r0, r0, lsl #1
     f64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
     f68:	eef0 0a40 	vmov.f32	s1, s0
     f6c:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     f6e:	0045      	lsls	r5, r0, #1
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <setFreqMultPitch+0x4c>)
     f72:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
     f76:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     f78:	3020      	adds	r0, #32
     f7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f7e:	4408      	add	r0, r1
     f80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f84:	ed90 7a02 	vldr	s14, [r0, #8]
     f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
     f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f90:	dd01      	ble.n	f96 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
     f92:	fef8 0a40 	vrinta.f32	s1, s0
	freqMult[osc][string] = powf(1.059463094359295f, pitch);
     f96:	ed9f 0a06 	vldr	s0, [pc, #24]	; fb0 <setFreqMultPitch+0x50>
     f9a:	442c      	add	r4, r5
     f9c:	f005 ffc4 	bl	6f28 <__powf_veneer>
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <setFreqMultPitch+0x54>)
     fa2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     fa6:	ed84 0a00 	vstr	s0, [r4]
}
     faa:	bd38      	pop	{r3, r4, r5, pc}
     fac:	20017534 	.word	0x20017534
     fb0:	3f879c7d 	.word	0x3f879c7d
     fb4:	200050c0 	.word	0x200050c0
     fb8:	f3af 8000 	nop.w
     fbc:	f3af 8000 	nop.w

00000fc0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
     fc0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
     fc4:	4b15      	ldr	r3, [pc, #84]	; (101c <setFreqMultHarm+0x5c>)
     fc6:	0042      	lsls	r2, r0, #1
     fc8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     fcc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
     fd0:	3020      	adds	r0, #32
     fd2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     fd6:	4408      	add	r0, r1
     fd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     fdc:	ed90 7a02 	vldr	s14, [r0, #8]
     fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
     fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fe8:	dd01      	ble.n	fee <setFreqMultHarm+0x2e>
		harm = roundf(harm);
     fea:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
     fee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
     ff2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
     ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ffa:	db08      	blt.n	100e <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
     ffc:	ee30 0a27 	vadd.f32	s0, s0, s15
    1000:	4b07      	ldr	r3, [pc, #28]	; (1020 <setFreqMultHarm+0x60>)
    1002:	4411      	add	r1, r2
    1004:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1008:	ed81 0a00 	vstr	s0, [r1]
}
    100c:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    100e:	ee30 0a67 	vsub.f32	s0, s0, s15
    1012:	eeb0 7ac0 	vabs.f32	s14, s0
    1016:	ee87 0a87 	vdiv.f32	s0, s15, s14
    101a:	e7f1      	b.n	1000 <setFreqMultHarm+0x40>
    101c:	20017534 	.word	0x20017534
    1020:	200050c0 	.word	0x200050c0
    1024:	f3af 8000 	nop.w
    1028:	f3af 8000 	nop.w
    102c:	f3af 8000 	nop.w
    1030:	f3af 8000 	nop.w
    1034:	f3af 8000 	nop.w
    1038:	f3af 8000 	nop.w
    103c:	f3af 8000 	nop.w

00001040 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    1040:	4b03      	ldr	r3, [pc, #12]	; (1050 <lowpassSetQ+0x10>)
    1042:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1046:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    104a:	f005 bfed 	b.w	7028 <__tSVF_setQ_veneer>
    104e:	bf00      	nop
    1050:	20005358 	.word	0x20005358
    1054:	f3af 8000 	nop.w
    1058:	f3af 8000 	nop.w
    105c:	f3af 8000 	nop.w

00001060 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    1060:	4b03      	ldr	r3, [pc, #12]	; (1070 <highpassSetQ+0x10>)
    1062:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1066:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    106a:	f005 bfdd 	b.w	7028 <__tSVF_setQ_veneer>
    106e:	bf00      	nop
    1070:	20005144 	.word	0x20005144
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <bandpassSetQ+0x10>)
    1082:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    108a:	f005 bfcd 	b.w	7028 <__tSVF_setQ_veneer>
    108e:	bf00      	nop
    1090:	20000afc 	.word	0x20000afc
    1094:	f3af 8000 	nop.w
    1098:	f3af 8000 	nop.w
    109c:	f3af 8000 	nop.w

000010a0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <diodeLowpassSetQ+0x10>)
    10a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10aa:	f005 bf9d 	b.w	6fe8 <__tDiodeFilter_setQ_veneer>
    10ae:	bf00      	nop
    10b0:	20005030 	.word	0x20005030
    10b4:	f3af 8000 	nop.w
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <VZpeakSetQ>:
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <VZpeakSetQ+0x10>)
    10c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ca:	f005 bff5 	b.w	70b8 <__tVZFilter_setResonance_veneer>
    10ce:	bf00      	nop
    10d0:	200009c4 	.word	0x200009c4
    10d4:	f3af 8000 	nop.w
    10d8:	f3af 8000 	nop.w
    10dc:	f3af 8000 	nop.w

000010e0 <VZlowshelfSetQ>:
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
    10e0:	4b03      	ldr	r3, [pc, #12]	; (10f0 <VZlowshelfSetQ+0x10>)
    10e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ea:	f005 bfe5 	b.w	70b8 <__tVZFilter_setResonance_veneer>
    10ee:	bf00      	nop
    10f0:	200009b4 	.word	0x200009b4
    10f4:	f3af 8000 	nop.w
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <VZhighshelfSetQ>:
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
    1100:	4b03      	ldr	r3, [pc, #12]	; (1110 <VZhighshelfSetQ+0x10>)
    1102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    110a:	f005 bfd5 	b.w	70b8 <__tVZFilter_setResonance_veneer>
    110e:	bf00      	nop
    1110:	200009a4 	.word	0x200009a4
    1114:	f3af 8000 	nop.w
    1118:	f3af 8000 	nop.w
    111c:	f3af 8000 	nop.w

00001120 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <VZbandrejectSetQ+0x10>)
    1122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    112a:	f005 bfc5 	b.w	70b8 <__tVZFilter_setResonance_veneer>
    112e:	bf00      	nop
    1130:	20000994 	.word	0x20000994
    1134:	f3af 8000 	nop.w
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <LadderLowpassSetQ+0x10>)
    1142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    114a:	f005 bf45 	b.w	6fd8 <__tLadderFilter_setQ_veneer>
    114e:	bf00      	nop
    1150:	20000984 	.word	0x20000984
    1154:	f3af 8000 	nop.w
    1158:	f3af 8000 	nop.w
    115c:	f3af 8000 	nop.w

00001160 <lowpassSetGain>:
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1160:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1164:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1168:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    116a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    116e:	4605      	mov	r5, r0
    1170:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1172:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1176:	eeb0 0a67 	vmov.f32	s0, s15
    117a:	f005 ff99 	bl	70b0 <__fasterdbtoa_veneer>
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <lowpassSetGain+0x2c>)
    1180:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1184:	ed84 0a00 	vstr	s0, [r4]
}
    1188:	bd38      	pop	{r3, r4, r5, pc}
    118a:	bf00      	nop
    118c:	20005090 	.word	0x20005090
    1190:	f3af 8000 	nop.w
    1194:	f3af 8000 	nop.w
    1198:	f3af 8000 	nop.w
    119c:	f3af 8000 	nop.w

000011a0 <highpassSetGain>:
    11a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    11a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    11a8:	b538      	push	{r3, r4, r5, lr}
    11aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    11ae:	4605      	mov	r5, r0
    11b0:	460c      	mov	r4, r1
    11b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11b6:	eeb0 0a67 	vmov.f32	s0, s15
    11ba:	f005 ff79 	bl	70b0 <__fasterdbtoa_veneer>
    11be:	4b03      	ldr	r3, [pc, #12]	; (11cc <highpassSetGain+0x2c>)
    11c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    11c4:	ed84 0a00 	vstr	s0, [r4]
    11c8:	bd38      	pop	{r3, r4, r5, pc}
    11ca:	bf00      	nop
    11cc:	20005090 	.word	0x20005090
    11d0:	f3af 8000 	nop.w
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <bandpassSetGain>:
    11e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    11e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    11e8:	b538      	push	{r3, r4, r5, lr}
    11ea:	eee0 7a07 	vfma.f32	s15, s0, s14
    11ee:	4605      	mov	r5, r0
    11f0:	460c      	mov	r4, r1
    11f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    11f6:	eeb0 0a67 	vmov.f32	s0, s15
    11fa:	f005 ff59 	bl	70b0 <__fasterdbtoa_veneer>
    11fe:	4b03      	ldr	r3, [pc, #12]	; (120c <bandpassSetGain+0x2c>)
    1200:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1204:	ed84 0a00 	vstr	s0, [r4]
    1208:	bd38      	pop	{r3, r4, r5, pc}
    120a:	bf00      	nop
    120c:	20005090 	.word	0x20005090
    1210:	f3af 8000 	nop.w
    1214:	f3af 8000 	nop.w
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <diodeLowpassSetGain>:
    1220:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1224:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1228:	b538      	push	{r3, r4, r5, lr}
    122a:	eee0 7a07 	vfma.f32	s15, s0, s14
    122e:	4605      	mov	r5, r0
    1230:	460c      	mov	r4, r1
    1232:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1236:	eeb0 0a67 	vmov.f32	s0, s15
    123a:	f005 ff39 	bl	70b0 <__fasterdbtoa_veneer>
    123e:	4b03      	ldr	r3, [pc, #12]	; (124c <diodeLowpassSetGain+0x2c>)
    1240:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1244:	ed84 0a00 	vstr	s0, [r4]
    1248:	bd38      	pop	{r3, r4, r5, pc}
    124a:	bf00      	nop
    124c:	20005090 	.word	0x20005090
    1250:	f3af 8000 	nop.w
    1254:	f3af 8000 	nop.w
    1258:	f3af 8000 	nop.w
    125c:	f3af 8000 	nop.w

00001260 <VZpeakSetGain>:
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1260:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1264:	ed9f 7a09 	vldr	s14, [pc, #36]	; 128c <VZpeakSetGain+0x2c>
{
    1268:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    126a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    126e:	4605      	mov	r5, r0
    1270:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1272:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1276:	eeb0 0a67 	vmov.f32	s0, s15
    127a:	f005 ff19 	bl	70b0 <__fasterdbtoa_veneer>
    127e:	4804      	ldr	r0, [pc, #16]	; (1290 <VZpeakSetGain+0x30>)
    1280:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1288:	f005 bf3e 	b.w	7108 <__tVZFilter_setGain_veneer>
    128c:	42480000 	.word	0x42480000
    1290:	200009c4 	.word	0x200009c4
    1294:	f3af 8000 	nop.w
    1298:	f3af 8000 	nop.w
    129c:	f3af 8000 	nop.w

000012a0 <VZlowshelfSetGain>:
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    12a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 12cc <VZlowshelfSetGain+0x2c>
{
    12a8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    12ae:	4605      	mov	r5, r0
    12b0:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12b6:	eeb0 0a67 	vmov.f32	s0, s15
    12ba:	f005 fef9 	bl	70b0 <__fasterdbtoa_veneer>
    12be:	4804      	ldr	r0, [pc, #16]	; (12d0 <VZlowshelfSetGain+0x30>)
    12c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    12c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    12c8:	f005 bf1e 	b.w	7108 <__tVZFilter_setGain_veneer>
    12cc:	42480000 	.word	0x42480000
    12d0:	200009b4 	.word	0x200009b4
    12d4:	f3af 8000 	nop.w
    12d8:	f3af 8000 	nop.w
    12dc:	f3af 8000 	nop.w

000012e0 <VZhighshelfSetGain>:
    12e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    12e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 130c <VZhighshelfSetGain+0x2c>
    12e8:	b538      	push	{r3, r4, r5, lr}
    12ea:	eee0 7a07 	vfma.f32	s15, s0, s14
    12ee:	4605      	mov	r5, r0
    12f0:	460c      	mov	r4, r1
    12f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12f6:	eeb0 0a67 	vmov.f32	s0, s15
    12fa:	f005 fed9 	bl	70b0 <__fasterdbtoa_veneer>
    12fe:	4804      	ldr	r0, [pc, #16]	; (1310 <VZhighshelfSetGain+0x30>)
    1300:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1308:	f005 befe 	b.w	7108 <__tVZFilter_setGain_veneer>
    130c:	42480000 	.word	0x42480000
    1310:	200009b4 	.word	0x200009b4
    1314:	f3af 8000 	nop.w
    1318:	f3af 8000 	nop.w
    131c:	f3af 8000 	nop.w

00001320 <VZbandrejectSetGain>:
    1320:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1324:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1328:	b538      	push	{r3, r4, r5, lr}
    132a:	eee0 7a07 	vfma.f32	s15, s0, s14
    132e:	4605      	mov	r5, r0
    1330:	460c      	mov	r4, r1
    1332:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1336:	eeb0 0a67 	vmov.f32	s0, s15
    133a:	f005 feb9 	bl	70b0 <__fasterdbtoa_veneer>
    133e:	4b03      	ldr	r3, [pc, #12]	; (134c <VZbandrejectSetGain+0x2c>)
    1340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1344:	ed84 0a00 	vstr	s0, [r4]
    1348:	bd38      	pop	{r3, r4, r5, pc}
    134a:	bf00      	nop
    134c:	20005090 	.word	0x20005090
    1350:	f3af 8000 	nop.w
    1354:	f3af 8000 	nop.w
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <LadderLowpassSetGain>:
    1360:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1364:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1368:	b538      	push	{r3, r4, r5, lr}
    136a:	eee0 7a07 	vfma.f32	s15, s0, s14
    136e:	4605      	mov	r5, r0
    1370:	460c      	mov	r4, r1
    1372:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1376:	eeb0 0a67 	vmov.f32	s0, s15
    137a:	f005 fe99 	bl	70b0 <__fasterdbtoa_veneer>
    137e:	4b03      	ldr	r3, [pc, #12]	; (138c <LadderLowpassSetGain+0x2c>)
    1380:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1384:	ed84 0a00 	vstr	s0, [r4]
    1388:	bd38      	pop	{r3, r4, r5, pc}
    138a:	bf00      	nop
    138c:	20005090 	.word	0x20005090
    1390:	f3af 8000 	nop.w
    1394:	f3af 8000 	nop.w
    1398:	f3af 8000 	nop.w
    139c:	f3af 8000 	nop.w

000013a0 <envelope_tick>:
{
    13a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interruptChecker = 0;
    13a2:	490e      	ldr	r1, [pc, #56]	; (13dc <envelope_tick+0x3c>)
    13a4:	2400      	movs	r4, #0
    13a6:	4b0e      	ldr	r3, [pc, #56]	; (13e0 <envelope_tick+0x40>)
    13a8:	700c      	strb	r4, [r1, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    13aa:	4a0e      	ldr	r2, [pc, #56]	; (13e4 <envelope_tick+0x44>)
    13ac:	eb03 0480 	add.w	r4, r3, r0, lsl #2
    13b0:	4d0d      	ldr	r5, [pc, #52]	; (13e8 <envelope_tick+0x48>)
    13b2:	3320      	adds	r3, #32
    13b4:	6857      	ldr	r7, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
    13b6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    13ba:	eb03 0680 	add.w	r6, r3, r0, lsl #2
    13be:	3408      	adds	r4, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    13c0:	4628      	mov	r0, r5
    13c2:	f005 fe6d 	bl	70a0 <__tADSRT_tickNoInterp_veneer>
	for (int v = 0; v < NUM_ENV; v++)
    13c6:	3508      	adds	r5, #8
    13c8:	42b4      	cmp	r4, r6
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
    13ca:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
    13ce:	d1f6      	bne.n	13be <envelope_tick+0x1e>
	timeEnv = DWT->CYCCNT - tempCount1;
    13d0:	4b04      	ldr	r3, [pc, #16]	; (13e4 <envelope_tick+0x44>)
    13d2:	4a06      	ldr	r2, [pc, #24]	; (13ec <envelope_tick+0x4c>)
    13d4:	685b      	ldr	r3, [r3, #4]
    13d6:	1bdb      	subs	r3, r3, r7
    13d8:	6013      	str	r3, [r2, #0]
}
    13da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13dc:	20016b6d 	.word	0x20016b6d
    13e0:	200145c0 	.word	0x200145c0
    13e4:	e0001000 	.word	0xe0001000
    13e8:	20005058 	.word	0x20005058
    13ec:	20014740 	.word	0x20014740
    13f0:	f3af 8000 	nop.w
    13f4:	f3af 8000 	nop.w
    13f8:	f3af 8000 	nop.w
    13fc:	f3af 8000 	nop.w

00001400 <lfo_tick>:
{
    1400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	interruptChecker = 0;
    1404:	4a18      	ldr	r2, [pc, #96]	; (1468 <lfo_tick+0x68>)
    1406:	2400      	movs	r4, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    1408:	4b18      	ldr	r3, [pc, #96]	; (146c <lfo_tick+0x6c>)
{
    140a:	b082      	sub	sp, #8
    140c:	4d18      	ldr	r5, [pc, #96]	; (1470 <lfo_tick+0x70>)
    140e:	4607      	mov	r7, r0
	interruptChecker = 0;
    1410:	7014      	strb	r4, [r2, #0]
		float sample = 0.0f;
    1412:	f04f 0800 	mov.w	r8, #0
    1416:	4e17      	ldr	r6, [pc, #92]	; (1474 <lfo_tick+0x74>)
    1418:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	uint32_t tempCount1 = DWT->CYCCNT;
    141c:	f8d3 9004 	ldr.w	r9, [r3, #4]
			lfoShapeTick[i](&sample,i, string);
    1420:	f8df a058 	ldr.w	sl, [pc, #88]	; 147c <lfo_tick+0x7c>
		if (lfoOn[i])
    1424:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
    1428:	4621      	mov	r1, r4
    142a:	463a      	mov	r2, r7
    142c:	a801      	add	r0, sp, #4
		float sample = 0.0f;
    142e:	f8cd 8004 	str.w	r8, [sp, #4]
		if (lfoOn[i])
    1432:	b193      	cbz	r3, 145a <lfo_tick+0x5a>
			lfoShapeTick[i](&sample,i, string);
    1434:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    1438:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
    143a:	4798      	blx	r3
	for (int i = 0; i < NUM_LFOS; i++)
    143c:	3508      	adds	r5, #8
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    143e:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    1440:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    1442:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
    1446:	d1ed      	bne.n	1424 <lfo_tick+0x24>
	timeLFO = DWT->CYCCNT - tempCount1;
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <lfo_tick+0x6c>)
    144a:	4a0b      	ldr	r2, [pc, #44]	; (1478 <lfo_tick+0x78>)
    144c:	685b      	ldr	r3, [r3, #4]
    144e:	eba3 0309 	sub.w	r3, r3, r9
    1452:	6013      	str	r3, [r2, #0]
}
    1454:	b002      	add	sp, #8
    1456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    145a:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    145c:	f8c5 80c0 	str.w	r8, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    1460:	3508      	adds	r5, #8
    1462:	2c04      	cmp	r4, #4
    1464:	d1de      	bne.n	1424 <lfo_tick+0x24>
    1466:	e7ef      	b.n	1448 <lfo_tick+0x48>
    1468:	20016b6d 	.word	0x20016b6d
    146c:	e0001000 	.word	0xe0001000
    1470:	200145c0 	.word	0x200145c0
    1474:	2000527c 	.word	0x2000527c
    1478:	2001474c 	.word	0x2001474c
    147c:	200052e0 	.word	0x200052e0

00001480 <setEnvelopeAttack>:
	a = a + 0.01f;
    1480:	eddf 7a05 	vldr	s15, [pc, #20]	; 1498 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    1484:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1488:	4b04      	ldr	r3, [pc, #16]	; (149c <setEnvelopeAttack+0x1c>)
    148a:	ee30 0a27 	vadd.f32	s0, s0, s15
    148e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1492:	f005 bde9 	b.w	7068 <__tADSRT_setAttack_veneer>
    1496:	bf00      	nop
    1498:	3c23d70a 	.word	0x3c23d70a
    149c:	20005058 	.word	0x20005058

000014a0 <setEnvelopeDecay>:
	d = d + 0.01f;
    14a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 14b8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    14a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <setEnvelopeDecay+0x1c>)
    14aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    14ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14b2:	f005 bdd5 	b.w	7060 <__tADSRT_setDecay_veneer>
    14b6:	bf00      	nop
    14b8:	3c23d70a 	.word	0x3c23d70a
    14bc:	20005058 	.word	0x20005058

000014c0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    14c0:	4b03      	ldr	r3, [pc, #12]	; (14d0 <setEnvelopeSustain+0x10>)
    14c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    14c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14ca:	f005 bdd1 	b.w	7070 <__tADSRT_setSustain_veneer>
    14ce:	bf00      	nop
    14d0:	20005058 	.word	0x20005058
    14d4:	f3af 8000 	nop.w
    14d8:	f3af 8000 	nop.w
    14dc:	f3af 8000 	nop.w

000014e0 <setEnvelopeRelease>:
	r = r + 0.01f;
    14e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 14f8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    14e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    14e8:	4b04      	ldr	r3, [pc, #16]	; (14fc <setEnvelopeRelease+0x1c>)
    14ea:	ee30 0a27 	vadd.f32	s0, s0, s15
    14ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14f2:	f005 bde5 	b.w	70c0 <__tADSRT_setRelease_veneer>
    14f6:	bf00      	nop
    14f8:	3c23d70a 	.word	0x3c23d70a
    14fc:	20005058 	.word	0x20005058

00001500 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    1500:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1504:	eddf 6a08 	vldr	s13, [pc, #32]	; 1528 <setEnvelopeLeak+0x28>
    1508:	ed9f 7a08 	vldr	s14, [pc, #32]	; 152c <setEnvelopeLeak+0x2c>
    150c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1510:	4b07      	ldr	r3, [pc, #28]	; (1530 <setEnvelopeLeak+0x30>)
    1512:	ee77 7ac0 	vsub.f32	s15, s15, s0
    1516:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    151a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    151e:	eeb0 0a47 	vmov.f32	s0, s14
    1522:	f005 bd6d 	b.w	7000 <__tADSRT_setLeakFactor_veneer>
    1526:	bf00      	nop
    1528:	3851b717 	.word	0x3851b717
    152c:	3f7ffcb9 	.word	0x3f7ffcb9
    1530:	20005058 	.word	0x20005058
    1534:	f3af 8000 	nop.w
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <setAmp>:
	amplitude[string] = amp;
    1540:	4b02      	ldr	r3, [pc, #8]	; (154c <setAmp+0xc>)
    1542:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1546:	ed81 0a00 	vstr	s0, [r1]
}
    154a:	4770      	bx	lr
    154c:	20000af4 	.word	0x20000af4
    1550:	f3af 8000 	nop.w
    1554:	f3af 8000 	nop.w
    1558:	f3af 8000 	nop.w
    155c:	f3af 8000 	nop.w

00001560 <setMaster>:
	finalMaster[string] = amp;
    1560:	4b02      	ldr	r3, [pc, #8]	; (156c <setMaster+0xc>)
    1562:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1566:	ed81 0a00 	vstr	s0, [r1]
}
    156a:	4770      	bx	lr
    156c:	200050b0 	.word	0x200050b0
    1570:	f3af 8000 	nop.w
    1574:	f3af 8000 	nop.w
    1578:	f3af 8000 	nop.w
    157c:	f3af 8000 	nop.w

00001580 <setTranspose>:
	transpose = in;
    1580:	4b01      	ldr	r3, [pc, #4]	; (1588 <setTranspose+0x8>)
    1582:	ed83 0a00 	vstr	s0, [r3]
}
    1586:	4770      	bx	lr
    1588:	20014790 	.word	0x20014790
    158c:	f3af 8000 	nop.w
    1590:	f3af 8000 	nop.w
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    15a0:	eddf 7a03 	vldr	s15, [pc, #12]	; 15b0 <setPitchBendRange+0x10>
    15a4:	4b03      	ldr	r3, [pc, #12]	; (15b4 <setPitchBendRange+0x14>)
    15a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    15aa:	ed83 0a00 	vstr	s0, [r3]
}
    15ae:	4770      	bx	lr
    15b0:	39000200 	.word	0x39000200
    15b4:	20000000 	.word	0x20000000
    15b8:	f3af 8000 	nop.w
    15bc:	f3af 8000 	nop.w

000015c0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    15c0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    15c4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 15f4 <setFinalLowpass+0x34>
{
    15c8:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    15cc:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 15f8 <setFinalLowpass+0x38>
    15d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 15fc <setFinalLowpass+0x3c>
    15d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    15d8:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    15da:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
    15de:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    15e0:	f004 fb9e 	bl	5d20 <LEAF_clip>
    15e4:	4806      	ldr	r0, [pc, #24]	; (1600 <setFinalLowpass+0x40>)
    15e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    15ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    15ee:	f005 bca3 	b.w	6f38 <__tSVF_setFreqFast_veneer>
    15f2:	bf00      	nop
    15f4:	420fb824 	.word	0x420fb824
    15f8:	457ff000 	.word	0x457ff000
    15fc:	00000000 	.word	0x00000000
    1600:	200050a8 	.word	0x200050a8
    1604:	f3af 8000 	nop.w
    1608:	f3af 8000 	nop.w
    160c:	f3af 8000 	nop.w
    1610:	f3af 8000 	nop.w
    1614:	f3af 8000 	nop.w
    1618:	f3af 8000 	nop.w
    161c:	f3af 8000 	nop.w

00001620 <tickMappings>:
{
    1620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
    1624:	4956      	ldr	r1, [pc, #344]	; (1780 <tickMappings+0x160>)
    1626:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    1628:	4a56      	ldr	r2, [pc, #344]	; (1784 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
    162a:	4b57      	ldr	r3, [pc, #348]	; (1788 <tickMappings+0x168>)
{
    162c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    1630:	700f      	strb	r7, [r1, #0]
{
    1632:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
    1634:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
    1636:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    1638:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
    163a:	2b00      	cmp	r3, #0
    163c:	f000 8086 	beq.w	174c <tickMappings+0x12c>
		for (int v = 0; v < numStringsThisBoard; v++)
    1640:	f8df 8154 	ldr.w	r8, [pc, #340]	; 1798 <tickMappings+0x178>
    1644:	f8df 9154 	ldr.w	r9, [pc, #340]	; 179c <tickMappings+0x17c>
    1648:	f898 2000 	ldrb.w	r2, [r8]
    164c:	4c4f      	ldr	r4, [pc, #316]	; (178c <tickMappings+0x16c>)
    164e:	2a00      	cmp	r2, #0
    1650:	d07c      	beq.n	174c <tickMappings+0x12c>
    1652:	46a3      	mov	fp, r4
    1654:	464e      	mov	r6, r9
    1656:	2500      	movs	r5, #0
			for (int j = 0; j < mappings[i].numHooks; j++)
    1658:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    165c:	2800      	cmp	r0, #0
    165e:	f000 8086 	beq.w	176e <tickMappings+0x14e>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1662:	f8db 101c 	ldr.w	r1, [fp, #28]
    1666:	f8db 2000 	ldr.w	r2, [fp]
    166a:	edd1 7a00 	vldr	s15, [r1]
    166e:	ed92 7a00 	vldr	s14, [r2]
    1672:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    1676:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
    167a:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    167c:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
    1680:	2b00      	cmp	r3, #0
    1682:	d16e      	bne.n	1762 <tickMappings+0x142>
					unsmoothedValue += sum;
    1684:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
    1688:	eddf 7a41 	vldr	s15, [pc, #260]	; 1790 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
    168c:	2801      	cmp	r0, #1
    168e:	d027      	beq.n	16e0 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1690:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    1694:	f8db 2008 	ldr.w	r2, [fp, #8]
    1698:	ed91 7a00 	vldr	s14, [r1]
    169c:	ed92 6a00 	vldr	s12, [r2]
    16a0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    16a4:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    16a8:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    16aa:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    16ae:	2b00      	cmp	r3, #0
    16b0:	d15a      	bne.n	1768 <tickMappings+0x148>
					unsmoothedValue += sum;
    16b2:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    16b6:	2802      	cmp	r0, #2
    16b8:	d012      	beq.n	16e0 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    16ba:	f8db 1010 	ldr.w	r1, [fp, #16]
    16be:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    16c2:	ed91 7a00 	vldr	s14, [r1]
    16c6:	ed92 6a00 	vldr	s12, [r2]
    16ca:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    16ce:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
    16d2:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    16d4:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
    16d8:	2800      	cmp	r0, #0
    16da:	d04d      	beq.n	1778 <tickMappings+0x158>
					smoothedValue += sum;
    16dc:	ee77 7a87 	vadd.f32	s15, s15, s14
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    16e0:	f854 2c04 	ldr.w	r2, [r4, #-4]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    16e4:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
    16e6:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
    16ea:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    16ee:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    16f2:	ee37 0a80 	vadd.f32	s0, s15, s0
    16f6:	f005 fc67 	bl	6fc8 <__tExpSmooth_setDest_veneer>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    16fa:	4630      	mov	r0, r6
    16fc:	f005 fd08 	bl	7110 <__tExpSmooth_tick_veneer>
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    1700:	f854 ac04 	ldr.w	sl, [r4, #-4]
    1704:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
    1708:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    170a:	f8da 2010 	ldr.w	r2, [sl, #16]
    170e:	4790      	blx	r2
    1710:	1caa      	adds	r2, r5, #2
    1712:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
    1716:	ed81 0a00 	vstr	s0, [r1]
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    171a:	4629      	mov	r1, r5
    171c:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
    1720:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    1722:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    1726:	6942      	ldr	r2, [r0, #20]
    1728:	7e00      	ldrb	r0, [r0, #24]
    172a:	ed9c 0a00 	vldr	s0, [ip]
    172e:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
    1730:	f898 2000 	ldrb.w	r2, [r8]
    1734:	42aa      	cmp	r2, r5
    1736:	dc8f      	bgt.n	1658 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
    1738:	4b13      	ldr	r3, [pc, #76]	; (1788 <tickMappings+0x168>)
    173a:	3701      	adds	r7, #1
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	429f      	cmp	r7, r3
    1740:	da04      	bge.n	174c <tickMappings+0x12c>
    1742:	f109 0908 	add.w	r9, r9, #8
    1746:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
    1748:	2a00      	cmp	r2, #0
    174a:	d182      	bne.n	1652 <tickMappings+0x32>
	timeMap = DWT->CYCCNT - tempCount1;
    174c:	4b0d      	ldr	r3, [pc, #52]	; (1784 <tickMappings+0x164>)
    174e:	9901      	ldr	r1, [sp, #4]
    1750:	685b      	ldr	r3, [r3, #4]
    1752:	4a10      	ldr	r2, [pc, #64]	; (1794 <tickMappings+0x174>)
    1754:	1a5b      	subs	r3, r3, r1
    1756:	6013      	str	r3, [r2, #0]
}
    1758:	b003      	add	sp, #12
    175a:	ecbd 8b02 	vpop	{d8}
    175e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
    1762:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 1790 <tickMappings+0x170>
    1766:	e791      	b.n	168c <tickMappings+0x6c>
					smoothedValue += sum;
    1768:	ee77 7a87 	vadd.f32	s15, s15, s14
    176c:	e7a3      	b.n	16b6 <tickMappings+0x96>
			float smoothedValue = 0.0f;
    176e:	eddf 7a08 	vldr	s15, [pc, #32]	; 1790 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
    1772:	eeb0 8a67 	vmov.f32	s16, s15
    1776:	e7b3      	b.n	16e0 <tickMappings+0xc0>
					unsmoothedValue += sum;
    1778:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
    177c:	e7b0      	b.n	16e0 <tickMappings+0xc0>
    177e:	bf00      	nop
    1780:	20016b6d 	.word	0x20016b6d
    1784:	e0001000 	.word	0xe0001000
    1788:	20017530 	.word	0x20017530
    178c:	20016bac 	.word	0x20016bac
    1790:	00000000 	.word	0x00000000
    1794:	20014750 	.word	0x20014750
    1798:	20000052 	.word	0x20000052
    179c:	2000536c 	.word	0x2000536c

000017a0 <clipperGainSet>:
	param1[v][string] = fasterdbtoa(value * 24.0f);
    17a0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    17a4:	b538      	push	{r3, r4, r5, lr}
    17a6:	4605      	mov	r5, r0
    17a8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    17aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    17ae:	f005 fc7f 	bl	70b0 <__fasterdbtoa_veneer>
    17b2:	4b04      	ldr	r3, [pc, #16]	; (17c4 <clipperGainSet+0x24>)
    17b4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    17b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    17bc:	ed84 0a00 	vstr	s0, [r4]
}
    17c0:	bd38      	pop	{r3, r4, r5, pc}
    17c2:	bf00      	nop
    17c4:	20005538 	.word	0x20005538
    17c8:	f3af 8000 	nop.w
    17cc:	f3af 8000 	nop.w
    17d0:	f3af 8000 	nop.w
    17d4:	f3af 8000 	nop.w
    17d8:	f3af 8000 	nop.w
    17dc:	f3af 8000 	nop.w

000017e0 <wavefolderParam1>:
	param1[v][string] = fasterdbtoa(value * 12.0f);
    17e0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    17e4:	b538      	push	{r3, r4, r5, lr}
    17e6:	4605      	mov	r5, r0
    17e8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    17ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    17ee:	f005 fc5f 	bl	70b0 <__fasterdbtoa_veneer>
    17f2:	4b04      	ldr	r3, [pc, #16]	; (1804 <wavefolderParam1+0x24>)
    17f4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    17f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    17fc:	ed84 0a00 	vstr	s0, [r4]
}
    1800:	bd38      	pop	{r3, r4, r5, pc}
    1802:	bf00      	nop
    1804:	20005538 	.word	0x20005538
    1808:	f3af 8000 	nop.w
    180c:	f3af 8000 	nop.w
    1810:	f3af 8000 	nop.w
    1814:	f3af 8000 	nop.w
    1818:	f3af 8000 	nop.w
    181c:	f3af 8000 	nop.w

00001820 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1824:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1828:	4b07      	ldr	r3, [pc, #28]	; (1848 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    182a:	4808      	ldr	r0, [pc, #32]	; (184c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    182c:	ee70 6a27 	vadd.f32	s13, s0, s15
    1830:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    1834:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1838:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    183c:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    1840:	ed83 7a00 	vstr	s14, [r3]
}
    1844:	4770      	bx	lr
    1846:	bf00      	nop
    1848:	20005158 	.word	0x20005158
    184c:	20005578 	.word	0x20005578
    1850:	f3af 8000 	nop.w
    1854:	f3af 8000 	nop.w
    1858:	f3af 8000 	nop.w
    185c:	f3af 8000 	nop.w

00001860 <tiltParam1>:
{
    1860:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1862:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1866:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    186a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    186e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    1872:	0084      	lsls	r4, r0, #2
{
    1874:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1878:	eee0 7a68 	vfms.f32	s15, s0, s17
    187c:	eeb0 0a67 	vmov.f32	s0, s15
    1880:	f005 fc16 	bl	70b0 <__fasterdbtoa_veneer>
    1884:	4808      	ldr	r0, [pc, #32]	; (18a8 <tiltParam1+0x48>)
    1886:	4420      	add	r0, r4
    1888:	f005 fc3e 	bl	7108 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    188c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    1890:	eea8 0a28 	vfma.f32	s0, s16, s17
    1894:	f005 fc0c 	bl	70b0 <__fasterdbtoa_veneer>
    1898:	4804      	ldr	r0, [pc, #16]	; (18ac <tiltParam1+0x4c>)
}
    189a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    189e:	4420      	add	r0, r4
}
    18a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    18a4:	f005 bc30 	b.w	7108 <__tVZFilter_setGain_veneer>
    18a8:	20005af0 	.word	0x20005af0
    18ac:	20005b10 	.word	0x20005b10
    18b0:	f3af 8000 	nop.w
    18b4:	f3af 8000 	nop.w
    18b8:	f3af 8000 	nop.w
    18bc:	f3af 8000 	nop.w

000018c0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    18c0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    18c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 18f8 <tiltParam2+0x38>
    18c8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 18fc <tiltParam2+0x3c>
    18cc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 1900 <tiltParam2+0x40>
    18d0:	eee0 7a07 	vfma.f32	s15, s0, s14
    18d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 1904 <tiltParam2+0x44>
{
    18d8:	b538      	push	{r3, r4, r5, lr}
    18da:	4605      	mov	r5, r0
    18dc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    18de:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
    18e2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    18e6:	f004 fa1b 	bl	5d20 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    18ea:	4807      	ldr	r0, [pc, #28]	; (1908 <tiltParam2+0x48>)
    18ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    18f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    18f4:	f005 bba8 	b.w	7048 <__tVZFilter_setFreqFast_veneer>
    18f8:	429a0000 	.word	0x429a0000
    18fc:	420fb824 	.word	0x420fb824
    1900:	457ff000 	.word	0x457ff000
    1904:	00000000 	.word	0x00000000
    1908:	20000b34 	.word	0x20000b34
    190c:	f3af 8000 	nop.w
    1910:	f3af 8000 	nop.w
    1914:	f3af 8000 	nop.w
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <tiltParam3>:
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    1920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <tiltParam3+0x20>)
    1926:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    192a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    192e:	ee30 0a07 	vadd.f32	s0, s0, s14
    1932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1936:	ee20 0a27 	vmul.f32	s0, s0, s15
    193a:	f005 bbbd 	b.w	70b8 <__tVZFilter_setResonance_veneer>
    193e:	bf00      	nop
    1940:	20000b34 	.word	0x20000b34
    1944:	f3af 8000 	nop.w
    1948:	f3af 8000 	nop.w
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <tiltParam4>:
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1960:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    1964:	ed9f 7a09 	vldr	s14, [pc, #36]	; 198c <tiltParam4+0x2c>
{
    1968:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    196a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    196e:	4605      	mov	r5, r0
    1970:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1972:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1976:	eeb0 0a67 	vmov.f32	s0, s15
    197a:	f005 fb6d 	bl	7058 <__fastdbtoa_veneer>
    197e:	4804      	ldr	r0, [pc, #16]	; (1990 <tiltParam4+0x30>)
    1980:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    1988:	f005 bbbe 	b.w	7108 <__tVZFilter_setGain_veneer>
    198c:	42080000 	.word	0x42080000
    1990:	20000b34 	.word	0x20000b34
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    19a0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <compressorParam1+0x18>)
    19a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    19aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    19ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19b2:	ed83 0a03 	vstr	s0, [r3, #12]
}
    19b6:	4770      	bx	lr
    19b8:	20000b54 	.word	0x20000b54
    19bc:	f3af 8000 	nop.w

000019c0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    19c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    19c4:	4b0a      	ldr	r3, [pc, #40]	; (19f0 <compressorParam2+0x30>)
    19c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    19ca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    19ce:	eeb0 7a67 	vmov.f32	s14, s15
    19d2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    19d6:	eea0 7a26 	vfma.f32	s14, s0, s13
    19da:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    19de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    19e2:	edd3 6a04 	vldr	s13, [r3, #16]
    19e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    19ea:	ed83 7a07 	vstr	s14, [r3, #28]
}
    19ee:	4770      	bx	lr
    19f0:	20000b54 	.word	0x20000b54
    19f4:	f3af 8000 	nop.w
    19f8:	f3af 8000 	nop.w
    19fc:	f3af 8000 	nop.w

00001a00 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    1a00:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <compressorParam3+0x18>)
    1a06:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1a0a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a12:	ed83 0a06 	vstr	s0, [r3, #24]
}
    1a16:	4770      	bx	lr
    1a18:	20000b54 	.word	0x20000b54
    1a1c:	f3af 8000 	nop.w

00001a20 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a20:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <compressorParam4+0x30>)
    1a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    1a26:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1a54 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a2a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    1a2e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    1a34:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a38:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1a3c:	ee20 0a07 	vmul.f32	s0, s0, s14
    1a40:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1a44:	f005 fa8c 	bl	6f60 <__fasterexpf_veneer>
    1a48:	ed84 0a01 	vstr	s0, [r4, #4]
}
    1a4c:	bd10      	pop	{r4, pc}
    1a4e:	bf00      	nop
    1a50:	20000b54 	.word	0x20000b54
    1a54:	3a83126f 	.word	0x3a83126f
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a60:	4b0b      	ldr	r3, [pc, #44]	; (1a90 <compressorParam5+0x30>)
    1a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    1a66:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1a94 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a6a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    1a6e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a70:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    1a74:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    1a78:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1a7c:	ee20 0a07 	vmul.f32	s0, s0, s14
    1a80:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1a84:	f005 fa6c 	bl	6f60 <__fasterexpf_veneer>
    1a88:	ed84 0a02 	vstr	s0, [r4, #8]
}
    1a8c:	bd10      	pop	{r4, pc}
    1a8e:	bf00      	nop
    1a90:	20000b54 	.word	0x20000b54
    1a94:	3a83126f 	.word	0x3a83126f
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    1aa0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1aa4:	4b05      	ldr	r3, [pc, #20]	; (1abc <offsetParam2+0x1c>)
    1aa6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1aaa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1aae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1ab2:	eee0 7a07 	vfma.f32	s15, s0, s14
    1ab6:	edc3 7a00 	vstr	s15, [r3]
}
    1aba:	4770      	bx	lr
    1abc:	20005558 	.word	0x20005558

00001ac0 <param2Linear>:
	param2[v][string] = value;
    1ac0:	4b03      	ldr	r3, [pc, #12]	; (1ad0 <param2Linear+0x10>)
    1ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ac6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1aca:	ed83 0a00 	vstr	s0, [r3]
}
    1ace:	4770      	bx	lr
    1ad0:	20005558 	.word	0x20005558
    1ad4:	f3af 8000 	nop.w
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <param3Linear>:
	param3[v][string] = value;
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <param3Linear+0x10>)
    1ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ae6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1aea:	ed83 0a00 	vstr	s0, [r3]
}
    1aee:	4770      	bx	lr
    1af0:	20005578 	.word	0x20005578
    1af4:	f3af 8000 	nop.w
    1af8:	f3af 8000 	nop.w
    1afc:	f3af 8000 	nop.w

00001b00 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    1b00:	eddf 6a10 	vldr	s13, [pc, #64]	; 1b44 <param3Soft+0x44>
    1b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 1b48 <param3Soft+0x48>
    1b0c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1b10:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 1b4c <param3Soft+0x4c>
    1b14:	eee0 7a26 	vfma.f32	s15, s0, s13
    1b18:	4a0d      	ldr	r2, [pc, #52]	; (1b50 <param3Soft+0x50>)
    1b1a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    1b1e:	4b0d      	ldr	r3, [pc, #52]	; (1b54 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    1b20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    1b24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1b28:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    1b2c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    1b30:	eee5 6a86 	vfma.f32	s13, s11, s12
    1b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1b38:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1b3c:	edc1 6a00 	vstr	s13, [r1]
}
    1b40:	4770      	bx	lr
    1b42:	bf00      	nop
    1b44:	3f7d70a4 	.word	0x3f7d70a4
    1b48:	3c23d70a 	.word	0x3c23d70a
    1b4c:	3eaaaaaa 	.word	0x3eaaaaaa
    1b50:	20005578 	.word	0x20005578
    1b54:	20005ac4 	.word	0x20005ac4
    1b58:	f3af 8000 	nop.w
    1b5c:	f3af 8000 	nop.w

00001b60 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1b60:	eddf 6a17 	vldr	s13, [pc, #92]	; 1bc0 <param3Hard+0x60>
    1b64:	eddf 7a17 	vldr	s15, [pc, #92]	; 1bc4 <param3Hard+0x64>
    1b68:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1bc8 <param3Hard+0x68>
    1b6c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    1b70:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1b72:	4b16      	ldr	r3, [pc, #88]	; (1bcc <param3Hard+0x6c>)
    1b74:	0045      	lsls	r5, r0, #1
    1b76:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    1b7a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    1b7c:	ee27 0a87 	vmul.f32	s0, s15, s14
    1b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b84:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
    1b88:	f005 fa02 	bl	6f90 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    1b8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    1b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b94:	d00a      	beq.n	1bac <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    1b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b9a:	4b0d      	ldr	r3, [pc, #52]	; (1bd0 <param3Hard+0x70>)
    1b9c:	442c      	add	r4, r5
    1b9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    1ba2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ba6:	edc4 7a00 	vstr	s15, [r4]
}
    1baa:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    1bac:	4b08      	ldr	r3, [pc, #32]	; (1bd0 <param3Hard+0x70>)
    1bae:	442c      	add	r4, r5
    1bb0:	eddf 7a08 	vldr	s15, [pc, #32]	; 1bd4 <param3Hard+0x74>
    1bb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1bb8:	edc4 7a00 	vstr	s15, [r4]
}
    1bbc:	bd38      	pop	{r3, r4, r5, pc}
    1bbe:	bf00      	nop
    1bc0:	3f7d70a4 	.word	0x3f7d70a4
    1bc4:	3c23d70a 	.word	0x3c23d70a
    1bc8:	3fc90fdb 	.word	0x3fc90fdb
    1bcc:	20005578 	.word	0x20005578
    1bd0:	20005aa4 	.word	0x20005aa4
    1bd4:	4479ffff 	.word	0x4479ffff
    1bd8:	f3af 8000 	nop.w
    1bdc:	f3af 8000 	nop.w

00001be0 <param4Linear>:
	param4[v][string] = value;
    1be0:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <param4Linear+0x10>)
    1be2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1be6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1bea:	ed83 0a00 	vstr	s0, [r3]
}
    1bee:	4770      	bx	lr
    1bf0:	20005598 	.word	0x20005598
    1bf4:	f3af 8000 	nop.w
    1bf8:	f3af 8000 	nop.w
    1bfc:	f3af 8000 	nop.w

00001c00 <param5Linear>:
	param5[v][string] = value;
    1c00:	4b03      	ldr	r3, [pc, #12]	; (1c10 <param5Linear+0x10>)
    1c02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1c06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1c0a:	ed83 0a00 	vstr	s0, [r3]
}
    1c0e:	4770      	bx	lr
    1c10:	200055b8 	.word	0x200055b8
    1c14:	f3af 8000 	nop.w
    1c18:	f3af 8000 	nop.w
    1c1c:	f3af 8000 	nop.w

00001c20 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    1c20:	4b03      	ldr	r3, [pc, #12]	; (1c30 <param2BC+0x10>)
    1c22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1c26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c2a:	f005 ba31 	b.w	7090 <__tCrusher_setQuality_veneer>
    1c2e:	bf00      	nop
    1c30:	20000b14 	.word	0x20000b14
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    1c40:	4a07      	ldr	r2, [pc, #28]	; (1c60 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1c42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    1c46:	eddf 7a07 	vldr	s15, [pc, #28]	; 1c64 <param3BC+0x24>
    1c4a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    1c4e:	4b06      	ldr	r3, [pc, #24]	; (1c68 <param3BC+0x28>)
    1c50:	eee7 7a00 	vfma.f32	s15, s14, s0
    1c54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c58:	eeb0 0a67 	vmov.f32	s0, s15
    1c5c:	f005 b9d8 	b.w	7010 <__tCrusher_setSamplingRatio_veneer>
    1c60:	20000048 	.word	0x20000048
    1c64:	3c23d70a 	.word	0x3c23d70a
    1c68:	20000b14 	.word	0x20000b14
    1c6c:	f3af 8000 	nop.w
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    1c80:	4b03      	ldr	r3, [pc, #12]	; (1c90 <param4BC+0x10>)
    1c82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1c86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c8a:	f005 b951 	b.w	6f30 <__tCrusher_setRound_veneer>
    1c8e:	bf00      	nop
    1c90:	20000b14 	.word	0x20000b14
    1c94:	f3af 8000 	nop.w
    1c98:	f3af 8000 	nop.w
    1c9c:	f3af 8000 	nop.w

00001ca0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    1ca0:	4b03      	ldr	r3, [pc, #12]	; (1cb0 <param5BC+0x10>)
    1ca2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1caa:	f005 ba35 	b.w	7118 <__tCrusher_setOperation_veneer>
    1cae:	bf00      	nop
    1cb0:	20000b14 	.word	0x20000b14
    1cb4:	f3af 8000 	nop.w
    1cb8:	f3af 8000 	nop.w
    1cbc:	f3af 8000 	nop.w

00001cc0 <fxMixSet>:
	fxMix[v][string] = value;
    1cc0:	4b03      	ldr	r3, [pc, #12]	; (1cd0 <fxMixSet+0x10>)
    1cc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1cc6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1cca:	ed83 0a00 	vstr	s0, [r3]
}
    1cce:	4770      	bx	lr
    1cd0:	200050d8 	.word	0x200050d8
    1cd4:	f3af 8000 	nop.w
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <fxPostGainSet>:
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1ce0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1ce4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1ce8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1cea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    1cee:	4605      	mov	r5, r0
    1cf0:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    1cf2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1cf6:	eeb0 0a67 	vmov.f32	s0, s15
    1cfa:	f005 f9d9 	bl	70b0 <__fasterdbtoa_veneer>
    1cfe:	4b03      	ldr	r3, [pc, #12]	; (1d0c <fxPostGainSet+0x2c>)
    1d00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1d04:	ed84 0a00 	vstr	s0, [r4]
}
    1d08:	bd38      	pop	{r3, r4, r5, pc}
    1d0a:	bf00      	nop
    1d0c:	200050f8 	.word	0x200050f8
    1d10:	f3af 8000 	nop.w
    1d14:	f3af 8000 	nop.w
    1d18:	f3af 8000 	nop.w
    1d1c:	f3af 8000 	nop.w

00001d20 <wavefolderTick>:
{
    1d20:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    1d26:	4d36      	ldr	r5, [pc, #216]	; (1e00 <wavefolderTick+0xe0>)
    1d28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d2c:	4b35      	ldr	r3, [pc, #212]	; (1e04 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    1d2e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    1d32:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1d3a:	4a33      	ldr	r2, [pc, #204]	; (1e08 <wavefolderTick+0xe8>)
    1d3c:	ed9f 4a33 	vldr	s8, [pc, #204]	; 1e0c <wavefolderTick+0xec>
    1d40:	0084      	lsls	r4, r0, #2
    1d42:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    1d46:	eddf 3a32 	vldr	s7, [pc, #200]	; 1e10 <wavefolderTick+0xf0>
{
    1d4a:	ed2d 8b02 	vpush	{d8}
    1d4e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d52:	ed93 6a00 	vldr	s12, [r3]
    1d56:	fe88 8a66 	vminnm.f32	s16, s16, s13
    1d5a:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1d5e:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
    1d62:	4b2c      	ldr	r3, [pc, #176]	; (1e14 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d64:	ee30 0a06 	vadd.f32	s0, s0, s12
    1d68:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
    1d6c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    1d70:	4a29      	ldr	r2, [pc, #164]	; (1e18 <wavefolderTick+0xf8>)
    1d72:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    1d76:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
    1d7a:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
    1d7e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1d82:	4b26      	ldr	r3, [pc, #152]	; (1e1c <wavefolderTick+0xfc>)
    1d84:	ee76 5ae5 	vsub.f32	s11, s13, s11
    1d88:	ed9f 0a25 	vldr	s0, [pc, #148]	; 1e20 <wavefolderTick+0x100>
    1d8c:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
    1d90:	ee67 7aa3 	vmul.f32	s15, s15, s7
    1d94:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1d98:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1d9c:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
    1da0:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1da4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1da8:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    1dac:	ee36 3ac5 	vsub.f32	s6, s13, s10
    1db0:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1db4:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    1db8:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1dbc:	ee25 5a23 	vmul.f32	s10, s10, s7
    1dc0:	ee76 6ae5 	vsub.f32	s13, s13, s11
    1dc4:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1dc8:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1dcc:	eee7 7a05 	vfma.f32	s15, s14, s10
    1dd0:	eeb0 8a67 	vmov.f32	s16, s15
    1dd4:	f005 f8dc 	bl	6f90 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    1dd8:	4b12      	ldr	r3, [pc, #72]	; (1e24 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1dda:	4813      	ldr	r0, [pc, #76]	; (1e28 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1ddc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    1de0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1de2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    1de4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1de8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    1dec:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1df0:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    1df4:	ecbd 8b02 	vpop	{d8}
    1df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    1dfc:	f005 b8a0 	b.w	6f40 <__tHighpass_tick_veneer>
    1e00:	200147c0 	.word	0x200147c0
    1e04:	20005558 	.word	0x20005558
    1e08:	20005538 	.word	0x20005538
    1e0c:	3eaaaaaa 	.word	0x3eaaaaaa
    1e10:	3fbffff8 	.word	0x3fbffff8
    1e14:	20005578 	.word	0x20005578
    1e18:	20005598 	.word	0x20005598
    1e1c:	200055b8 	.word	0x200055b8
    1e20:	40c90fdb 	.word	0x40c90fdb
    1e24:	20005158 	.word	0x20005158
    1e28:	20000ed4 	.word	0x20000ed4
    1e2c:	f3af 8000 	nop.w
    1e30:	f3af 8000 	nop.w
    1e34:	f3af 8000 	nop.w
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    1e40:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1e44:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1e5c <chorusParam1+0x1c>
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <chorusParam1+0x20>)
    1e4a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1e52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1e56:	edc3 7a00 	vstr	s15, [r3]
}
    1e5a:	4770      	bx	lr
    1e5c:	45b4a000 	.word	0x45b4a000
    1e60:	20005538 	.word	0x20005538
    1e64:	f3af 8000 	nop.w
    1e68:	f3af 8000 	nop.w
    1e6c:	f3af 8000 	nop.w
    1e70:	f3af 8000 	nop.w
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    1e80:	eddf 7a05 	vldr	s15, [pc, #20]	; 1e98 <chorusParam2+0x18>
    1e84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <chorusParam2+0x1c>)
    1e8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1e8e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1e92:	ed83 0a00 	vstr	s0, [r3]
}
    1e96:	4770      	bx	lr
    1e98:	3dcccccd 	.word	0x3dcccccd
    1e9c:	20005558 	.word	0x20005558

00001ea0 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    1ea0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1ec0 <chorusParam3+0x20>
    1ea4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ea8:	eddf 7a06 	vldr	s15, [pc, #24]	; 1ec4 <chorusParam3+0x24>
    1eac:	4b06      	ldr	r3, [pc, #24]	; (1ec8 <chorusParam3+0x28>)
    1eae:	eee0 7a07 	vfma.f32	s15, s0, s14
    1eb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eb6:	eeb0 0a67 	vmov.f32	s0, s15
    1eba:	f005 b89d 	b.w	6ff8 <__tCycle_setFreq_veneer>
    1ebe:	bf00      	nop
    1ec0:	3ecccccd 	.word	0x3ecccccd
    1ec4:	3c23d70a 	.word	0x3c23d70a
    1ec8:	20005470 	.word	0x20005470
    1ecc:	f3af 8000 	nop.w
    1ed0:	f3af 8000 	nop.w
    1ed4:	f3af 8000 	nop.w
    1ed8:	f3af 8000 	nop.w
    1edc:	f3af 8000 	nop.w

00001ee0 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    1ee0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1f00 <chorusParam4+0x20>
    1ee4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ee8:	eddf 7a06 	vldr	s15, [pc, #24]	; 1f04 <chorusParam4+0x24>
    1eec:	4b06      	ldr	r3, [pc, #24]	; (1f08 <chorusParam4+0x28>)
    1eee:	eee0 7a07 	vfma.f32	s15, s0, s14
    1ef2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ef6:	eeb0 0a67 	vmov.f32	s0, s15
    1efa:	f005 b87d 	b.w	6ff8 <__tCycle_setFreq_veneer>
    1efe:	bf00      	nop
    1f00:	3ee38e37 	.word	0x3ee38e37
    1f04:	3c343958 	.word	0x3c343958
    1f08:	20005490 	.word	0x20005490
    1f0c:	f3af 8000 	nop.w
    1f10:	f3af 8000 	nop.w
    1f14:	f3af 8000 	nop.w
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <chorusTick>:
}
    1f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1f28 <chorusTick+0x8>
    1f24:	4770      	bx	lr
    1f26:	bf00      	nop
    1f28:	80000000 	.word	0x80000000
    1f2c:	f3af 8000 	nop.w
    1f30:	f3af 8000 	nop.w
    1f34:	f3af 8000 	nop.w
    1f38:	f3af 8000 	nop.w
    1f3c:	f3af 8000 	nop.w

00001f40 <shaperTick>:
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1f40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1f44:	4a0e      	ldr	r2, [pc, #56]	; (1f80 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    1f46:	4b0f      	ldr	r3, [pc, #60]	; (1f84 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1f48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    1f4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    1f50:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    1f52:	edd2 7a00 	vldr	s15, [r2]
    1f56:	008c      	lsls	r4, r1, #2
    1f58:	ee30 0a27 	vadd.f32	s0, s0, s15
    1f5c:	edd3 7a00 	vldr	s15, [r3]
    1f60:	4b09      	ldr	r3, [pc, #36]	; (1f88 <shaperTick+0x48>)
    1f62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f66:	ee20 0a27 	vmul.f32	s0, s0, s15
    1f6a:	edd1 0a00 	vldr	s1, [r1]
    1f6e:	f005 f893 	bl	7098 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1f72:	4806      	ldr	r0, [pc, #24]	; (1f8c <shaperTick+0x4c>)
    1f74:	4420      	add	r0, r4
}
    1f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    1f7a:	f004 bfe1 	b.w	6f40 <__tHighpass_tick_veneer>
    1f7e:	bf00      	nop
    1f80:	20005558 	.word	0x20005558
    1f84:	20005538 	.word	0x20005538
    1f88:	20005578 	.word	0x20005578
    1f8c:	20000ed4 	.word	0x20000ed4
    1f90:	f3af 8000 	nop.w
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <blankTick>:
}
    1fa0:	4770      	bx	lr
    1fa2:	bf00      	nop
    1fa4:	f3af 8000 	nop.w
    1fa8:	f3af 8000 	nop.w
    1fac:	f3af 8000 	nop.w
    1fb0:	f3af 8000 	nop.w
    1fb4:	f3af 8000 	nop.w
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <tiltFilterTick>:
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1fc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1fc4:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <tiltFilterTick+0x28>)
{
    1fc6:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    1fc8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1fcc:	008c      	lsls	r4, r1, #2
    1fce:	f005 f827 	bl	7020 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    1fd2:	4806      	ldr	r0, [pc, #24]	; (1fec <tiltFilterTick+0x2c>)
    1fd4:	4420      	add	r0, r4
    1fd6:	f005 f823 	bl	7020 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1fda:	4805      	ldr	r0, [pc, #20]	; (1ff0 <tiltFilterTick+0x30>)
    1fdc:	4420      	add	r0, r4
}
    1fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    1fe2:	f005 b81d 	b.w	7020 <__tVZFilter_tickEfficient_veneer>
    1fe6:	bf00      	nop
    1fe8:	20005af0 	.word	0x20005af0
    1fec:	20005b10 	.word	0x20005b10
    1ff0:	20000b34 	.word	0x20000b34
    1ff4:	f3af 8000 	nop.w
    1ff8:	f3af 8000 	nop.w
    1ffc:	f3af 8000 	nop.w

00002000 <tanhTick>:
    float gain = param1[v][string];
    2000:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = tanhf(sample + (param2[v][string]*gain));
    2004:	4b10      	ldr	r3, [pc, #64]	; (2048 <tanhTick+0x48>)
    2006:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    200a:	4810      	ldr	r0, [pc, #64]	; (204c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    200c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    2010:	b510      	push	{r4, lr}
    2012:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
    2016:	008c      	lsls	r4, r1, #2
    2018:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    201c:	eea6 0a87 	vfma.f32	s0, s13, s14
    2020:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
    2024:	ee27 0a80 	vmul.f32	s0, s15, s0
    2028:	f004 ffa6 	bl	6f78 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    202c:	4808      	ldr	r0, [pc, #32]	; (2050 <tanhTick+0x50>)
    202e:	4420      	add	r0, r4
    2030:	f004 ff86 	bl	6f40 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    2034:	4b07      	ldr	r3, [pc, #28]	; (2054 <tanhTick+0x54>)
    2036:	4423      	add	r3, r4
    2038:	edd3 7a00 	vldr	s15, [r3]
}
    203c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    2040:	ee20 0a27 	vmul.f32	s0, s0, s15
    2044:	f004 bf98 	b.w	6f78 <__tanhf_veneer>
    2048:	20005558 	.word	0x20005558
    204c:	20005538 	.word	0x20005538
    2050:	20000ed4 	.word	0x20000ed4
    2054:	20005598 	.word	0x20005598
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <softClipTick>:
    sample = sample * param1[v][string];
    2060:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    2064:	4a19      	ldr	r2, [pc, #100]	; (20cc <softClipTick+0x6c>)
    float shape = param3[v][string];
    2066:	4b1a      	ldr	r3, [pc, #104]	; (20d0 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    2068:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    206c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2070:	ed9f 7a18 	vldr	s14, [pc, #96]	; 20d4 <softClipTick+0x74>
    float shape = param3[v][string];
    2074:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2078:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    207c:	4816      	ldr	r0, [pc, #88]	; (20d8 <softClipTick+0x78>)
{
    207e:	b410      	push	{r4}
    sample = sample * param1[v][string];
    2080:	4c16      	ldr	r4, [pc, #88]	; (20dc <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2082:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    2086:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    208a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
    208e:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    2092:	4b13      	ldr	r3, [pc, #76]	; (20e0 <softClipTick+0x80>)
    sample = sample + param2[v][string];
    2094:	ed94 5a00 	vldr	s10, [r4]
    2098:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
    209c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
}
    20a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    20a4:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    20a8:	ed93 0a00 	vldr	s0, [r3]
    20ac:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    20b0:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    20b4:	ee27 7a27 	vmul.f32	s14, s14, s15
    20b8:	ee27 7a27 	vmul.f32	s14, s14, s15
    20bc:	ee36 7ac7 	vsub.f32	s14, s13, s14
    20c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    20c4:	ee27 0a80 	vmul.f32	s0, s15, s0
    20c8:	f004 bf3a 	b.w	6f40 <__tHighpass_tick_veneer>
    20cc:	20005558 	.word	0x20005558
    20d0:	20005578 	.word	0x20005578
    20d4:	3eaaaaaa 	.word	0x3eaaaaaa
    20d8:	20000ed4 	.word	0x20000ed4
    20dc:	20005538 	.word	0x20005538
    20e0:	20005ac4 	.word	0x20005ac4
    20e4:	f3af 8000 	nop.w
    20e8:	f3af 8000 	nop.w
    20ec:	f3af 8000 	nop.w
    20f0:	f3af 8000 	nop.w
    20f4:	f3af 8000 	nop.w
    20f8:	f3af 8000 	nop.w
    20fc:	f3af 8000 	nop.w

00002100 <hardClipTick>:
    sample = sample * param1[v][string];
    2100:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2104:	4a1a      	ldr	r2, [pc, #104]	; (2170 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    2106:	4b1b      	ldr	r3, [pc, #108]	; (2174 <hardClipTick+0x74>)
    2108:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    210c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2110:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    2114:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    2118:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    211a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    211e:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
    2120:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2124:	4e14      	ldr	r6, [pc, #80]	; (2178 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    2126:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    212a:	4d14      	ldr	r5, [pc, #80]	; (217c <hardClipTick+0x7c>)
    212c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    2130:	4425      	add	r5, r4
    2132:	ed96 7a00 	vldr	s14, [r6]
    2136:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    213a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    213e:	ee27 0a87 	vmul.f32	s0, s15, s14
    2142:	f004 ff25 	bl	6f90 <__arm_sin_f32_veneer>
    2146:	ed96 7a00 	vldr	s14, [r6]
    214a:	edd5 7a00 	vldr	s15, [r5]
    214e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2152:	ee27 0a80 	vmul.f32	s0, s15, s0
    2156:	f004 ff1b 	bl	6f90 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    215a:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    215e:	4808      	ldr	r0, [pc, #32]	; (2180 <hardClipTick+0x80>)
    2160:	ee20 0a27 	vmul.f32	s0, s0, s15
    2164:	4420      	add	r0, r4
}
    2166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    216a:	f004 bee9 	b.w	6f40 <__tHighpass_tick_veneer>
    216e:	bf00      	nop
    2170:	20005538 	.word	0x20005538
    2174:	20005558 	.word	0x20005558
    2178:	20005578 	.word	0x20005578
    217c:	20005aa4 	.word	0x20005aa4
    2180:	20000ed4 	.word	0x20000ed4
    2184:	f3af 8000 	nop.w
    2188:	f3af 8000 	nop.w
    218c:	f3af 8000 	nop.w
    2190:	f3af 8000 	nop.w
    2194:	f3af 8000 	nop.w
    2198:	f3af 8000 	nop.w
    219c:	f3af 8000 	nop.w

000021a0 <satTick>:
    sample = sample * param1[v][string];
    21a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    21a4:	4b17      	ldr	r3, [pc, #92]	; (2204 <satTick+0x64>)
    sample = sample * param1[v][string];
    21a6:	4a18      	ldr	r2, [pc, #96]	; (2208 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    21a8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    21ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    21b0:	4816      	ldr	r0, [pc, #88]	; (220c <satTick+0x6c>)
    sample = sample * param1[v][string];
    21b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    21b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    21ba:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    21bc:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    21c0:	008c      	lsls	r4, r1, #2
    21c2:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    21c6:	eeb0 6a47 	vmov.f32	s12, s14
    21ca:	ee27 7a87 	vmul.f32	s14, s15, s14
    21ce:	eea7 6a80 	vfma.f32	s12, s15, s0
    21d2:	eea7 7a80 	vfma.f32	s14, s15, s0
    21d6:	eeb0 6ac6 	vabs.f32	s12, s12
    21da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    21de:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    21e2:	ee36 6b05 	vadd.f64	d6, d6, d5
    21e6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    21ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    21ee:	f004 fea7 	bl	6f40 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    21f2:	4807      	ldr	r0, [pc, #28]	; (2210 <satTick+0x70>)
    21f4:	4420      	add	r0, r4
    21f6:	f004 fea3 	bl	6f40 <__tHighpass_tick_veneer>
}
    21fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    21fe:	f004 beef 	b.w	6fe0 <__LEAF_tanh_veneer>
    2202:	bf00      	nop
    2204:	20005558 	.word	0x20005558
    2208:	20005538 	.word	0x20005538
    220c:	20000ed4 	.word	0x20000ed4
    2210:	20000ef4 	.word	0x20000ef4
    2214:	f3af 8000 	nop.w
    2218:	f3af 8000 	nop.w
    221c:	f3af 8000 	nop.w

00002220 <bcTick>:
    sample = sample * param1[v][string];
    2220:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2224:	4b05      	ldr	r3, [pc, #20]	; (223c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    2226:	4806      	ldr	r0, [pc, #24]	; (2240 <bcTick+0x20>)
    sample = sample * param1[v][string];
    2228:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    222c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    2230:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    2234:	ee20 0a27 	vmul.f32	s0, s0, s15
    2238:	f004 bf36 	b.w	70a8 <__tCrusher_tick_veneer>
    223c:	20005538 	.word	0x20005538
    2240:	20000b14 	.word	0x20000b14
    2244:	f3af 8000 	nop.w
    2248:	f3af 8000 	nop.w
    224c:	f3af 8000 	nop.w
    2250:	f3af 8000 	nop.w
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <compressorTick>:
	return tCompressor_tick(&comp[v][string], sample);
    2260:	4b03      	ldr	r3, [pc, #12]	; (2270 <compressorTick+0x10>)
    2262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    226a:	f004 be49 	b.w	6f00 <__tCompressor_tick_veneer>
    226e:	bf00      	nop
    2270:	20000b54 	.word	0x20000b54
    2274:	f3af 8000 	nop.w
    2278:	f3af 8000 	nop.w
    227c:	f3af 8000 	nop.w

00002280 <FXlowpassTick>:
	return tSVF_tick(&FXlowpass[v][string], sample);
    2280:	4b03      	ldr	r3, [pc, #12]	; (2290 <FXlowpassTick+0x10>)
    2282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    228a:	f004 bf29 	b.w	70e0 <__tSVF_tick_veneer>
    228e:	bf00      	nop
    2290:	20000964 	.word	0x20000964
    2294:	f3af 8000 	nop.w
    2298:	f3af 8000 	nop.w
    229c:	f3af 8000 	nop.w

000022a0 <FXhighpassTick>:
	return tSVF_tick(&FXhighpass[v][string], sample);
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <FXhighpassTick+0x10>)
    22a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22aa:	f004 bf19 	b.w	70e0 <__tSVF_tick_veneer>
    22ae:	bf00      	nop
    22b0:	20000944 	.word	0x20000944
    22b4:	f3af 8000 	nop.w
    22b8:	f3af 8000 	nop.w
    22bc:	f3af 8000 	nop.w

000022c0 <FXbandpassTick>:
	return tSVF_tick(&FXbandpass[v][string], sample);
    22c0:	4b03      	ldr	r3, [pc, #12]	; (22d0 <FXbandpassTick+0x10>)
    22c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22ca:	f004 bf09 	b.w	70e0 <__tSVF_tick_veneer>
    22ce:	bf00      	nop
    22d0:	20000904 	.word	0x20000904
    22d4:	f3af 8000 	nop.w
    22d8:	f3af 8000 	nop.w
    22dc:	f3af 8000 	nop.w

000022e0 <FXdiodeLowpassTick>:
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    22e0:	4b03      	ldr	r3, [pc, #12]	; (22f0 <FXdiodeLowpassTick+0x10>)
    22e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22ea:	f004 be0d 	b.w	6f08 <__tDiodeFilter_tick_veneer>
    22ee:	bf00      	nop
    22f0:	20000924 	.word	0x20000924
    22f4:	f3af 8000 	nop.w
    22f8:	f3af 8000 	nop.w
    22fc:	f3af 8000 	nop.w

00002300 <FXVZpeakTick>:
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    2300:	4b03      	ldr	r3, [pc, #12]	; (2310 <FXVZpeakTick+0x10>)
    2302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    230a:	f004 be89 	b.w	7020 <__tVZFilter_tickEfficient_veneer>
    230e:	bf00      	nop
    2310:	200008e4 	.word	0x200008e4
    2314:	f3af 8000 	nop.w
    2318:	f3af 8000 	nop.w
    231c:	f3af 8000 	nop.w

00002320 <FXVZlowshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    2320:	4b03      	ldr	r3, [pc, #12]	; (2330 <FXVZlowshelfTick+0x10>)
    2322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    232a:	f004 be79 	b.w	7020 <__tVZFilter_tickEfficient_veneer>
    232e:	bf00      	nop
    2330:	200008c4 	.word	0x200008c4
    2334:	f3af 8000 	nop.w
    2338:	f3af 8000 	nop.w
    233c:	f3af 8000 	nop.w

00002340 <FXVZhighshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    2340:	4b03      	ldr	r3, [pc, #12]	; (2350 <FXVZhighshelfTick+0x10>)
    2342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    234a:	f004 be69 	b.w	7020 <__tVZFilter_tickEfficient_veneer>
    234e:	bf00      	nop
    2350:	200008a4 	.word	0x200008a4
    2354:	f3af 8000 	nop.w
    2358:	f3af 8000 	nop.w
    235c:	f3af 8000 	nop.w

00002360 <FXVZbandrejectTick>:
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2360:	4b03      	ldr	r3, [pc, #12]	; (2370 <FXVZbandrejectTick+0x10>)
    2362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    236a:	f004 be59 	b.w	7020 <__tVZFilter_tickEfficient_veneer>
    236e:	bf00      	nop
    2370:	20000884 	.word	0x20000884
    2374:	f3af 8000 	nop.w
    2378:	f3af 8000 	nop.w
    237c:	f3af 8000 	nop.w

00002380 <FXLadderLowpassTick>:
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    2380:	4b03      	ldr	r3, [pc, #12]	; (2390 <FXLadderLowpassTick+0x10>)
    2382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    238a:	f004 bddd 	b.w	6f48 <__tLadderFilter_tick_veneer>
    238e:	bf00      	nop
    2390:	20000864 	.word	0x20000864
    2394:	f3af 8000 	nop.w
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    23a0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    23a2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    23a6:	008c      	lsls	r4, r1, #2
{
    23a8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    23ac:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    23b0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    23b4:	eee0 7a68 	vfms.f32	s15, s0, s17
    23b8:	eeb0 0a67 	vmov.f32	s0, s15
    23bc:	f004 fe4c 	bl	7058 <__fastdbtoa_veneer>
    23c0:	4808      	ldr	r0, [pc, #32]	; (23e4 <noiseSetTilt+0x44>)
    23c2:	4420      	add	r0, r4
    23c4:	f004 fea0 	bl	7108 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    23c8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    23cc:	eea8 0a28 	vfma.f32	s0, s16, s17
    23d0:	f004 fe42 	bl	7058 <__fastdbtoa_veneer>
    23d4:	4804      	ldr	r0, [pc, #16]	; (23e8 <noiseSetTilt+0x48>)
}
    23d6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    23da:	4420      	add	r0, r4
}
    23dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    23e0:	f004 be92 	b.w	7108 <__tVZFilter_setGain_veneer>
    23e4:	200054e0 	.word	0x200054e0
    23e8:	200054e8 	.word	0x200054e8
    23ec:	f3af 8000 	nop.w
    23f0:	f3af 8000 	nop.w
    23f4:	f3af 8000 	nop.w
    23f8:	f3af 8000 	nop.w
    23fc:	f3af 8000 	nop.w

00002400 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2400:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    2404:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2428 <noiseSetGain+0x28>
{
    2408:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    240a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    240e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2410:	eeb0 0a67 	vmov.f32	s0, s15
    2414:	f004 fe20 	bl	7058 <__fastdbtoa_veneer>
    2418:	4804      	ldr	r0, [pc, #16]	; (242c <noiseSetGain+0x2c>)
    241a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    241e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    2422:	f004 be71 	b.w	7108 <__tVZFilter_setGain_veneer>
    2426:	bf00      	nop
    2428:	42080000 	.word	0x42080000
    242c:	200054c0 	.word	0x200054c0
    2430:	f3af 8000 	nop.w
    2434:	f3af 8000 	nop.w
    2438:	f3af 8000 	nop.w
    243c:	f3af 8000 	nop.w

00002440 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2440:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2444:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2474 <noiseSetFreq+0x34>
    2448:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2478 <noiseSetFreq+0x38>
    244c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 247c <noiseSetFreq+0x3c>
    2450:	eee0 7a07 	vfma.f32	s15, s0, s14
    2454:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2480 <noiseSetFreq+0x40>
{
    2458:	b510      	push	{r4, lr}
    245a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    245c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    2460:	f003 fc5e 	bl	5d20 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    2464:	4807      	ldr	r0, [pc, #28]	; (2484 <noiseSetFreq+0x44>)
    2466:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    246e:	f004 bdeb 	b.w	7048 <__tVZFilter_setFreqFast_veneer>
    2472:	bf00      	nop
    2474:	429a0000 	.word	0x429a0000
    2478:	420fb824 	.word	0x420fb824
    247c:	457ff000 	.word	0x457ff000
    2480:	00000000 	.word	0x00000000
    2484:	200054c0 	.word	0x200054c0
    2488:	f3af 8000 	nop.w
    248c:	f3af 8000 	nop.w
    2490:	f3af 8000 	nop.w
    2494:	f3af 8000 	nop.w
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;


void __ATTR_ITCMRAM noise_tick(int string)
{
    24a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    24a2:	4d27      	ldr	r5, [pc, #156]	; (2540 <noise_tick+0xa0>)
{
    24a4:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
    24a6:	4927      	ldr	r1, [pc, #156]	; (2544 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
    24a8:	4b27      	ldr	r3, [pc, #156]	; (2548 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
    24aa:	4f28      	ldr	r7, [pc, #160]	; (254c <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    24ac:	4828      	ldr	r0, [pc, #160]	; (2550 <noise_tick+0xb0>)
{
    24ae:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
    24b2:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    24b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
    24b8:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
    24ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    24be:	3201      	adds	r2, #1
    24c0:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
    24c2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    24c6:	ed91 0a00 	vldr	s0, [r1]
    24ca:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
    24cc:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
    24d0:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
    24d4:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    24d8:	f004 fda2 	bl	7020 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    24dc:	481d      	ldr	r0, [pc, #116]	; (2554 <noise_tick+0xb4>)
    24de:	4428      	add	r0, r5
    24e0:	f004 fd9e 	bl	7020 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    24e4:	481c      	ldr	r0, [pc, #112]	; (2558 <noise_tick+0xb8>)
    24e6:	4428      	add	r0, r5
    24e8:	f004 fd9a 	bl	7020 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    24ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    24f0:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 255c <noise_tick+0xbc>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    24f4:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    24f8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    24fc:	4b18      	ldr	r3, [pc, #96]	; (2560 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    24fe:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    2502:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    2506:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
    250a:	4816      	ldr	r0, [pc, #88]	; (2564 <noise_tick+0xc4>)
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    250c:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
    2510:	4a15      	ldr	r2, [pc, #84]	; (2568 <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    2512:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
    2516:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
    2518:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    251c:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    2520:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    2524:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    2528:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    252c:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    2530:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
    2534:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
    2536:	1b9b      	subs	r3, r3, r6
    2538:	6013      	str	r3, [r2, #0]
}
    253a:	ecbd 8b04 	vpop	{d8-d9}
    253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2540:	20005a70 	.word	0x20005a70
    2544:	20018644 	.word	0x20018644
    2548:	20017534 	.word	0x20017534
    254c:	e0001000 	.word	0xe0001000
    2550:	200054e0 	.word	0x200054e0
    2554:	200054e8 	.word	0x200054e8
    2558:	200054c0 	.word	0x200054c0
    255c:	00000000 	.word	0x00000000
    2560:	200145c0 	.word	0x200145c0
    2564:	200054d0 	.word	0x200054d0
    2568:	20014758 	.word	0x20014758
    256c:	f3af 8000 	nop.w
    2570:	f3af 8000 	nop.w
    2574:	f3af 8000 	nop.w
    2578:	f3af 8000 	nop.w
    257c:	f3af 8000 	nop.w

00002580 <audioFrame>:
{
    2580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2584:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    2586:	2201      	movs	r2, #1
    2588:	2108      	movs	r1, #8
    258a:	48b6      	ldr	r0, [pc, #728]	; (2864 <audioFrame+0x2e4>)
	if (newBar)
    258c:	4cb6      	ldr	r4, [pc, #728]	; (2868 <audioFrame+0x2e8>)
{
    258e:	ed2d 8b10 	vpush	{d8-d15}
    2592:	b08d      	sub	sp, #52	; 0x34
    2594:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    2596:	f004 fdb3 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    259a:	4bb4      	ldr	r3, [pc, #720]	; (286c <audioFrame+0x2ec>)
    259c:	685b      	ldr	r3, [r3, #4]
    259e:	9304      	str	r3, [sp, #16]
	if (newBar)
    25a0:	6823      	ldr	r3, [r4, #0]
    25a2:	2b00      	cmp	r3, #0
    25a4:	f040 80b9 	bne.w	271a <audioFrame+0x19a>
	if (newPluck)
    25a8:	4bb1      	ldr	r3, [pc, #708]	; (2870 <audioFrame+0x2f0>)
    25aa:	681b      	ldr	r3, [r3, #0]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d048      	beq.n	2642 <audioFrame+0xc2>
		for (int i = 0; i < numStringsThisBoard; i++)
    25b0:	4bb0      	ldr	r3, [pc, #704]	; (2874 <audioFrame+0x2f4>)
    25b2:	7818      	ldrb	r0, [r3, #0]
    25b4:	9306      	str	r3, [sp, #24]
    25b6:	2800      	cmp	r0, #0
    25b8:	d040      	beq.n	263c <audioFrame+0xbc>
    25ba:	4baf      	ldr	r3, [pc, #700]	; (2878 <audioFrame+0x2f8>)
    25bc:	f04f 0a00 	mov.w	sl, #0
    25c0:	4aae      	ldr	r2, [pc, #696]	; (287c <audioFrame+0x2fc>)
    25c2:	9302      	str	r3, [sp, #8]
    25c4:	4bae      	ldr	r3, [pc, #696]	; (2880 <audioFrame+0x300>)
					tLivingString2_setDecay(&strings[i], 0.2f);
    25c6:	ed9f baaf 	vldr	s22, [pc, #700]	; 2884 <audioFrame+0x304>
    25ca:	9301      	str	r3, [sp, #4]
    25cc:	4bae      	ldr	r3, [pc, #696]	; (2888 <audioFrame+0x308>)
				float amplitz = stringInputs[i] * 0.000025f;
    25ce:	ed9f caaf 	vldr	s24, [pc, #700]	; 288c <audioFrame+0x30c>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    25d2:	eddf aaaf 	vldr	s21, [pc, #700]	; 2890 <audioFrame+0x310>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    25d6:	4698      	mov	r8, r3
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    25d8:	eddf baae 	vldr	s23, [pc, #696]	; 2894 <audioFrame+0x314>
    25dc:	f8df b304 	ldr.w	fp, [pc, #772]	; 28e4 <audioFrame+0x364>
    25e0:	4fad      	ldr	r7, [pc, #692]	; (2898 <audioFrame+0x318>)
    25e2:	f8df 9304 	ldr.w	r9, [pc, #772]	; 28e8 <audioFrame+0x368>
    25e6:	4cad      	ldr	r4, [pc, #692]	; (289c <audioFrame+0x31c>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    25e8:	eddf 9aad 	vldr	s19, [pc, #692]	; 28a0 <audioFrame+0x320>
    25ec:	9203      	str	r2, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    25ee:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
    25f2:	2a00      	cmp	r2, #0
    25f4:	d168      	bne.n	26c8 <audioFrame+0x148>
    25f6:	f8db 3000 	ldr.w	r3, [fp]
    25fa:	2b00      	cmp	r3, #0
    25fc:	f040 8304 	bne.w	2c08 <audioFrame+0x688>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    2600:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
    2604:	2a00      	cmp	r2, #0
    2606:	dc67      	bgt.n	26d8 <audioFrame+0x158>
			previousStringInputs[i] = stringInputs[i];
    2608:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    260c:	f10a 0a01 	add.w	sl, sl, #1
    2610:	9b02      	ldr	r3, [sp, #8]
    2612:	f10b 0b04 	add.w	fp, fp, #4
    2616:	4550      	cmp	r0, sl
    2618:	f107 0704 	add.w	r7, r7, #4
    261c:	f103 0301 	add.w	r3, r3, #1
    2620:	f108 0804 	add.w	r8, r8, #4
    2624:	f109 0904 	add.w	r9, r9, #4
    2628:	9302      	str	r3, [sp, #8]
    262a:	9b01      	ldr	r3, [sp, #4]
    262c:	f103 0304 	add.w	r3, r3, #4
    2630:	9301      	str	r3, [sp, #4]
    2632:	9b03      	ldr	r3, [sp, #12]
    2634:	f103 0348 	add.w	r3, r3, #72	; 0x48
    2638:	9303      	str	r3, [sp, #12]
    263a:	dcd8      	bgt.n	25ee <audioFrame+0x6e>
		newPluck = 0;
    263c:	2300      	movs	r3, #0
    263e:	4a8c      	ldr	r2, [pc, #560]	; (2870 <audioFrame+0x2f0>)
    2640:	6013      	str	r3, [r2, #0]
	if (presetReady)
    2642:	4b98      	ldr	r3, [pc, #608]	; (28a4 <audioFrame+0x324>)
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	b31b      	cbz	r3, 2690 <audioFrame+0x110>
		if (currentActivePreset == 63)
    2648:	4b97      	ldr	r3, [pc, #604]	; (28a8 <audioFrame+0x328>)
    264a:	781a      	ldrb	r2, [r3, #0]
    264c:	2a3f      	cmp	r2, #63	; 0x3f
    264e:	f000 817b 	beq.w	2948 <audioFrame+0x3c8>
		else if (currentActivePreset == 62)
    2652:	781a      	ldrb	r2, [r3, #0]
    2654:	2a3e      	cmp	r2, #62	; 0x3e
    2656:	f000 82ab 	beq.w	2bb0 <audioFrame+0x630>
		else if (currentActivePreset == 61)
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	2b3d      	cmp	r3, #61	; 0x3d
    265e:	f000 81e3 	beq.w	2a28 <audioFrame+0x4a8>
    2662:	4c92      	ldr	r4, [pc, #584]	; (28ac <audioFrame+0x32c>)
    2664:	9b05      	ldr	r3, [sp, #20]
    2666:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    266a:	ed9f 8a91 	vldr	s16, [pc, #580]	; 28b0 <audioFrame+0x330>
    266e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2672:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2676:	f004 fd37 	bl	70e8 <__audioTickL_veneer>
    267a:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    267e:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    2680:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2684:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    2686:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    268a:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    268e:	d1f2      	bne.n	2676 <audioFrame+0xf6>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    2690:	4b76      	ldr	r3, [pc, #472]	; (286c <audioFrame+0x2ec>)
    2692:	9904      	ldr	r1, [sp, #16]
    2694:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    2696:	4a87      	ldr	r2, [pc, #540]	; (28b4 <audioFrame+0x334>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    2698:	1a5b      	subs	r3, r3, r1
    269a:	4887      	ldr	r0, [pc, #540]	; (28b8 <audioFrame+0x338>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    269c:	ed92 7a00 	vldr	s14, [r2]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    26a0:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    26a2:	ee07 3a90 	vmov	s15, r3
    26a6:	4c85      	ldr	r4, [pc, #532]	; (28bc <audioFrame+0x33c>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    26a8:	6003      	str	r3, [r0, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    26aa:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    26ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    26b0:	486c      	ldr	r0, [pc, #432]	; (2864 <audioFrame+0x2e4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    26b2:	ee67 7a87 	vmul.f32	s15, s15, s14
    26b6:	edc4 7a00 	vstr	s15, [r4]
}
    26ba:	b00d      	add	sp, #52	; 0x34
    26bc:	ecbd 8b10 	vpop	{d8-d15}
    26c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    26c4:	f004 bd1c 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    26c8:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
    26cc:	2b00      	cmp	r3, #0
    26ce:	f8db 3000 	ldr.w	r3, [fp]
    26d2:	dd99      	ble.n	2608 <audioFrame+0x88>
    26d4:	2b00      	cmp	r3, #0
    26d6:	d197      	bne.n	2608 <audioFrame+0x88>
					tADSRT_off(&envs[v][i]);
    26d8:	4648      	mov	r0, r9
    26da:	f004 fcb1 	bl	7040 <__tADSRT_off_veneer>
    26de:	f109 0008 	add.w	r0, r9, #8
    26e2:	f004 fcad 	bl	7040 <__tADSRT_off_veneer>
    26e6:	f109 0010 	add.w	r0, r9, #16
    26ea:	f004 fca9 	bl	7040 <__tADSRT_off_veneer>
    26ee:	f109 0018 	add.w	r0, r9, #24
    26f2:	f004 fca5 	bl	7040 <__tADSRT_off_veneer>
				if (currentActivePreset == 63)
    26f6:	4b6c      	ldr	r3, [pc, #432]	; (28a8 <audioFrame+0x328>)
    26f8:	781a      	ldrb	r2, [r3, #0]
    26fa:	2a3f      	cmp	r2, #63	; 0x3f
    26fc:	f000 84f8 	beq.w	30f0 <audioFrame+0xb70>
				else if (currentActivePreset == 62)
    2700:	781a      	ldrb	r2, [r3, #0]
    2702:	2a3e      	cmp	r2, #62	; 0x3e
    2704:	f000 854d 	beq.w	31a2 <audioFrame+0xc22>
				else if (currentActivePreset == 61)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	2b3d      	cmp	r3, #61	; 0x3d
    270c:	f000 8571 	beq.w	31f2 <audioFrame+0xc72>
		for (int i = 0; i < numStringsThisBoard; i++)
    2710:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
    2712:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    2716:	7810      	ldrb	r0, [r2, #0]
    2718:	e776      	b.n	2608 <audioFrame+0x88>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
    271a:	2201      	movs	r2, #1
    271c:	2102      	movs	r1, #2
    271e:	4868      	ldr	r0, [pc, #416]	; (28c0 <audioFrame+0x340>)
    2720:	f004 fcee 	bl	7100 <__HAL_GPIO_WritePin_veneer>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    2724:	4a67      	ldr	r2, [pc, #412]	; (28c4 <audioFrame+0x344>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    2726:	4b68      	ldr	r3, [pc, #416]	; (28c8 <audioFrame+0x348>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    2728:	edd2 7a03 	vldr	s15, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    272c:	edd2 6a02 	vldr	s13, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2730:	ed92 7a01 	vldr	s14, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2734:	ed92 6a04 	vldr	s12, [r2, #16]
    2738:	ee77 2ae6 	vsub.f32	s5, s15, s13
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    273c:	ed92 5a00 	vldr	s10, [r2]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    2740:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2744:	6819      	ldr	r1, [r3, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2746:	ee76 5a67 	vsub.f32	s11, s12, s15
    274a:	ee36 3ac7 	vsub.f32	s6, s13, s14
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    274e:	4291      	cmp	r1, r2
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2750:	ee37 4a45 	vsub.f32	s8, s14, s10
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    2754:	d00c      	beq.n	2770 <audioFrame+0x1f0>
    2756:	ed93 6a00 	vldr	s12, [r3]
    275a:	4a5c      	ldr	r2, [pc, #368]	; (28cc <audioFrame+0x34c>)
    275c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2760:	edd2 4a00 	vldr	s9, [r2]
    2764:	eef4 4ac6 	vcmpe.f32	s9, s12
    2768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    276c:	f140 8134 	bpl.w	29d8 <audioFrame+0x458>
				stringMappedPositions[j] = 1.0f;
    2770:	4e57      	ldr	r6, [pc, #348]	; (28d0 <audioFrame+0x350>)
    2772:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2776:	6032      	str	r2, [r6, #0]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
    2778:	6859      	ldr	r1, [r3, #4]
    277a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    277e:	4291      	cmp	r1, r2
    2780:	d00c      	beq.n	279c <audioFrame+0x21c>
    2782:	ed93 6a01 	vldr	s12, [r3, #4]
    2786:	4a51      	ldr	r2, [pc, #324]	; (28cc <audioFrame+0x34c>)
    2788:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    278c:	edd2 4a01 	vldr	s9, [r2, #4]
    2790:	eeb4 6ae4 	vcmpe.f32	s12, s9
    2794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2798:	f340 80f9 	ble.w	298e <audioFrame+0x40e>
				stringMappedPositions[j] = 1.0f;
    279c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    27a0:	6073      	str	r3, [r6, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    27a2:	4b34      	ldr	r3, [pc, #208]	; (2874 <audioFrame+0x2f4>)
    27a4:	f893 c000 	ldrb.w	ip, [r3]
    27a8:	9306      	str	r3, [sp, #24]
    27aa:	f1bc 0f00 	cmp.w	ip, #0
    27ae:	f000 80c4 	beq.w	293a <audioFrame+0x3ba>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    27b2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
    27b6:	eddf 8a47 	vldr	s17, [pc, #284]	; 28d4 <audioFrame+0x354>
		for (int i = 0; i < numStringsThisBoard; i++)
    27ba:	2500      	movs	r5, #0
    27bc:	4846      	ldr	r0, [pc, #280]	; (28d8 <audioFrame+0x358>)
    27be:	f8df 912c 	ldr.w	r9, [pc, #300]	; 28ec <audioFrame+0x36c>
    27c2:	4637      	mov	r7, r6
    27c4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 28e0 <audioFrame+0x360>
    27c8:	f8df a124 	ldr.w	sl, [pc, #292]	; 28f0 <audioFrame+0x370>
    27cc:	f8df b124 	ldr.w	fp, [pc, #292]	; 28f4 <audioFrame+0x374>
			if (dualSlider)
    27d0:	6806      	ldr	r6, [r0, #0]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    27d2:	ed97 0a00 	vldr	s0, [r7]
			if (dualSlider)
    27d6:	b326      	cbz	r6, 2822 <audioFrame+0x2a2>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    27d8:	eeb4 0a48 	vcmp.f32	s0, s16
    27dc:	edd7 0a01 	vldr	s1, [r7, #4]
    27e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27e4:	f000 80c8 	beq.w	2978 <audioFrame+0x3f8>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
    27e8:	eef4 0a48 	vcmp.f32	s1, s16
    27ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27f0:	d108      	bne.n	2804 <audioFrame+0x284>
    27f2:	eeb4 0a48 	vcmp.f32	s0, s16
    27f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27fa:	d503      	bpl.n	2804 <audioFrame+0x284>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    27fc:	eef0 0a40 	vmov.f32	s1, s0
					stringMappedPositions[1] = stringMappedPositions[0];
    2800:	ed87 0a01 	vstr	s0, [r7, #4]
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
    2804:	4b35      	ldr	r3, [pc, #212]	; (28dc <audioFrame+0x35c>)
    2806:	681b      	ldr	r3, [r3, #0]
    2808:	442b      	add	r3, r5
    280a:	ee07 3a90 	vmov	s15, r3
    280e:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
    2812:	ee21 1a28 	vmul.f32	s2, s2, s17
    2816:	f004 fc87 	bl	7128 <__LEAF_interpolation_linear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    281a:	9b06      	ldr	r3, [sp, #24]
    281c:	482e      	ldr	r0, [pc, #184]	; (28d8 <audioFrame+0x358>)
    281e:	f893 c000 	ldrb.w	ip, [r3]
			invMapping[i] = (1.0f / myMappedPos);
    2822:	eec8 7a00 	vdiv.f32	s15, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    2826:	edd9 6a00 	vldr	s13, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    282a:	1c6a      	adds	r2, r5, #1
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    282c:	eb0a 0e85 	add.w	lr, sl, r5, lsl #2
		for (int i = 0; i < numStringsThisBoard; i++)
    2830:	4594      	cmp	ip, r2
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    2832:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    2836:	ee37 6ac8 	vsub.f32	s12, s15, s16
			invMapping[i] = (1.0f / myMappedPos);
    283a:	ece8 7a01 	vstmia	r8!, {s15}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    283e:	eef0 7a47 	vmov.f32	s15, s14
    2842:	eee6 7a26 	vfma.f32	s15, s12, s13
    2846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    284a:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    284e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
    2852:	681b      	ldr	r3, [r3, #0]
    2854:	f8ce 3000 	str.w	r3, [lr]
		for (int i = 0; i < numStringsThisBoard; i++)
    2858:	dd6f      	ble.n	293a <audioFrame+0x3ba>
    285a:	2e00      	cmp	r6, #0
    285c:	d04c      	beq.n	28f8 <audioFrame+0x378>
    285e:	4615      	mov	r5, r2
    2860:	e7b6      	b.n	27d0 <audioFrame+0x250>
    2862:	bf00      	nop
    2864:	58020000 	.word	0x58020000
    2868:	200054b8 	.word	0x200054b8
    286c:	e0001000 	.word	0xe0001000
    2870:	200054bc 	.word	0x200054bc
    2874:	20000052 	.word	0x20000052
    2878:	20005368 	.word	0x20005368
    287c:	20000a64 	.word	0x20000a64
    2880:	20014650 	.word	0x20014650
    2884:	3e4ccccd 	.word	0x3e4ccccd
    2888:	200183e4 	.word	0x200183e4
    288c:	37d1b717 	.word	0x37d1b717
    2890:	3ffeb852 	.word	0x3ffeb852
    2894:	44fa0000 	.word	0x44fa0000
    2898:	20014730 	.word	0x20014730
    289c:	20005628 	.word	0x20005628
    28a0:	00000000 	.word	0x00000000
    28a4:	20005618 	.word	0x20005618
    28a8:	200149b4 	.word	0x200149b4
    28ac:	30000000 	.word	0x30000000
    28b0:	4b000000 	.word	0x4b000000
    28b4:	20000008 	.word	0x20000008
    28b8:	20014748 	.word	0x20014748
    28bc:	200050bc 	.word	0x200050bc
    28c0:	58020400 	.word	0x58020400
    28c4:	20000034 	.word	0x20000034
    28c8:	20014710 	.word	0x20014710
    28cc:	2000000c 	.word	0x2000000c
    28d0:	20000364 	.word	0x20000364
    28d4:	3dcccccd 	.word	0x3dcccccd
    28d8:	20005040 	.word	0x20005040
    28dc:	200050b8 	.word	0x200050b8
    28e0:	20005178 	.word	0x20005178
    28e4:	200146d0 	.word	0x200146d0
    28e8:	20005058 	.word	0x20005058
    28ec:	2000004c 	.word	0x2000004c
    28f0:	20000b0c 	.word	0x20000b0c
    28f4:	30012000 	.word	0x30012000
			invMapping[i] = (1.0f / myMappedPos);
    28f8:	ed97 6a00 	vldr	s12, [r7]
		for (int i = 0; i < numStringsThisBoard; i++)
    28fc:	3502      	adds	r5, #2
			invMapping[i] = (1.0f / myMappedPos);
    28fe:	48b8      	ldr	r0, [pc, #736]	; (2be0 <audioFrame+0x660>)
    2900:	eec8 7a06 	vdiv.f32	s15, s16, s12
		for (int i = 0; i < numStringsThisBoard; i++)
    2904:	45ac      	cmp	ip, r5
			invMapping[i] = (1.0f / myMappedPos);
    2906:	eb00 0382 	add.w	r3, r0, r2, lsl #2
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    290a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    290e:	ee37 8ac8 	vsub.f32	s16, s15, s16
			invMapping[i] = (1.0f / myMappedPos);
    2912:	edc3 7a00 	vstr	s15, [r3]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
    2916:	eea6 7a88 	vfma.f32	s14, s13, s16
    291a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    291e:	ee17 3a10 	vmov	r3, s14
    2922:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
    2926:	6819      	ldr	r1, [r3, #0]
    2928:	6011      	str	r1, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    292a:	dd06      	ble.n	293a <audioFrame+0x3ba>
			invMapping[i] = (1.0f / myMappedPos);
    292c:	eb00 0385 	add.w	r3, r0, r5, lsl #2
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    2930:	eb0a 0285 	add.w	r2, sl, r5, lsl #2
			invMapping[i] = (1.0f / myMappedPos);
    2934:	edc3 7a00 	vstr	s15, [r3]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
    2938:	6011      	str	r1, [r2, #0]
		newBar = 0;
    293a:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
    293c:	2102      	movs	r1, #2
    293e:	48a9      	ldr	r0, [pc, #676]	; (2be4 <audioFrame+0x664>)
		newBar = 0;
    2940:	6022      	str	r2, [r4, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
    2942:	f004 fbdd 	bl	7100 <__HAL_GPIO_WritePin_veneer>
    2946:	e62f      	b.n	25a8 <audioFrame+0x28>
    2948:	4ca7      	ldr	r4, [pc, #668]	; (2be8 <audioFrame+0x668>)
    294a:	9b05      	ldr	r3, [sp, #20]
    294c:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    2950:	ed9f 8aa6 	vldr	s16, [pc, #664]	; 2bec <audioFrame+0x66c>
    2954:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2958:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    295c:	f004 fae0 	bl	6f20 <__audioTickString_veneer>
    2960:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2964:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    2966:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    296a:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    296c:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    2970:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2974:	d1f2      	bne.n	295c <audioFrame+0x3dc>
    2976:	e68b      	b.n	2690 <audioFrame+0x110>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
    2978:	eef4 0ac8 	vcmpe.f32	s1, s16
    297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2980:	f57f af40 	bpl.w	2804 <audioFrame+0x284>
    2984:	eeb0 0a60 	vmov.f32	s0, s1
					stringMappedPositions[0] = stringMappedPositions[1];
    2988:	edc7 0a00 	vstr	s1, [r7]
    298c:	e73a      	b.n	2804 <audioFrame+0x284>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
    298e:	ed93 6a01 	vldr	s12, [r3, #4]
    2992:	edd2 3a03 	vldr	s7, [r2, #12]
    2996:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    299a:	eeb4 6ae3 	vcmpe.f32	s12, s7
    299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29a2:	db6e      	blt.n	2a82 <audioFrame+0x502>
    29a4:	ed93 6a01 	vldr	s12, [r3, #4]
    29a8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    29ac:	eef4 4ac6 	vcmpe.f32	s9, s12
    29b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29b4:	db65      	blt.n	2a82 <audioFrame+0x502>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    29b6:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    29ba:	ee73 3ae4 	vsub.f32	s7, s7, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    29be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    29c2:	ee77 4ae4 	vsub.f32	s9, s15, s9
    29c6:	eef0 7a45 	vmov.f32	s15, s10
    29ca:	ee84 7aa3 	vdiv.f32	s14, s9, s7
    29ce:	eee4 7a07 	vfma.f32	s15, s8, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    29d2:	edc6 7a01 	vstr	s15, [r6, #4]
    29d6:	e6e4      	b.n	27a2 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
    29d8:	ed93 6a00 	vldr	s12, [r3]
    29dc:	edd2 3a02 	vldr	s7, [r2, #8]
    29e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    29e4:	eef4 3ac6 	vcmpe.f32	s7, s12
    29e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29ec:	f200 8091 	bhi.w	2b12 <audioFrame+0x592>
    29f0:	ed93 6a00 	vldr	s12, [r3]
    29f4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    29f8:	eeb4 6ae4 	vcmpe.f32	s12, s9
    29fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a00:	f200 8087 	bhi.w	2b12 <audioFrame+0x592>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    2a04:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2a08:	ee73 3ae4 	vsub.f32	s7, s7, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    2a0c:	4e78      	ldr	r6, [pc, #480]	; (2bf0 <audioFrame+0x670>)
    2a0e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2a12:	ee76 4a64 	vsub.f32	s9, s12, s9
    2a16:	eeb0 6a45 	vmov.f32	s12, s10
    2a1a:	ee84 2aa3 	vdiv.f32	s4, s9, s7
    2a1e:	eea4 6a02 	vfma.f32	s12, s8, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
    2a22:	ed86 6a00 	vstr	s12, [r6]
    2a26:	e6a7      	b.n	2778 <audioFrame+0x1f8>
    2a28:	4e72      	ldr	r6, [pc, #456]	; (2bf4 <audioFrame+0x674>)
    2a2a:	4d73      	ldr	r5, [pc, #460]	; (2bf8 <audioFrame+0x678>)
						tCycle_setFreq(&additive[i][j], tempFreq);
    2a2c:	ed9f 8a73 	vldr	s16, [pc, #460]	; 2bfc <audioFrame+0x67c>
		else if (currentActivePreset == 61)
    2a30:	f1a6 042c 	sub.w	r4, r6, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    2a34:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
    2a36:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    2a38:	f004 fb32 	bl	70a0 <__tADSRT_tickNoInterp_veneer>
						tCycle_setFreq(&additive[i][j], tempFreq);
    2a3c:	4628      	mov	r0, r5
    2a3e:	eeb0 0a48 	vmov.f32	s0, s16
    2a42:	f004 fad9 	bl	6ff8 <__tCycle_setFreq_veneer>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    2a46:	4628      	mov	r0, r5
    2a48:	f004 fade 	bl	7008 <__tCycle_tick_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    2a4c:	42a6      	cmp	r6, r4
    2a4e:	f105 0504 	add.w	r5, r5, #4
    2a52:	d1ef      	bne.n	2a34 <audioFrame+0x4b4>
    2a54:	4c6a      	ldr	r4, [pc, #424]	; (2c00 <audioFrame+0x680>)
    2a56:	4d6b      	ldr	r5, [pc, #428]	; (2c04 <audioFrame+0x684>)
						tCycle_setFreq(&additive[i][j], tempFreq);
    2a58:	ed9f 8a68 	vldr	s16, [pc, #416]	; 2bfc <audioFrame+0x67c>
    2a5c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    2a60:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
    2a62:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    2a64:	f004 fb1c 	bl	70a0 <__tADSRT_tickNoInterp_veneer>
						tCycle_setFreq(&additive[i][j], tempFreq);
    2a68:	4628      	mov	r0, r5
    2a6a:	eeb0 0a48 	vmov.f32	s0, s16
    2a6e:	f004 fac3 	bl	6ff8 <__tCycle_setFreq_veneer>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    2a72:	4628      	mov	r0, r5
    2a74:	f004 fac8 	bl	7008 <__tCycle_tick_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    2a78:	42a6      	cmp	r6, r4
    2a7a:	f105 0504 	add.w	r5, r5, #4
    2a7e:	d1ef      	bne.n	2a60 <audioFrame+0x4e0>
    2a80:	e606      	b.n	2690 <audioFrame+0x110>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
    2a82:	ed93 6a01 	vldr	s12, [r3, #4]
    2a86:	ed92 5a05 	vldr	s10, [r2, #20]
    2a8a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2a8e:	eeb4 6ac5 	vcmpe.f32	s12, s10
    2a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a96:	db17      	blt.n	2ac8 <audioFrame+0x548>
    2a98:	ed93 6a01 	vldr	s12, [r3, #4]
    2a9c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2aa0:	eef4 3ac6 	vcmpe.f32	s7, s12
    2aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2aa8:	dd0e      	ble.n	2ac8 <audioFrame+0x548>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2aaa:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2aae:	ee35 5a63 	vsub.f32	s10, s10, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2ab6:	ee77 3ae3 	vsub.f32	s7, s15, s7
    2aba:	eec3 7a85 	vdiv.f32	s15, s7, s10
    2abe:	eea3 7a27 	vfma.f32	s14, s6, s15
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2ac2:	ed86 7a01 	vstr	s14, [r6, #4]
    2ac6:	e66c      	b.n	27a2 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
    2ac8:	ed93 7a01 	vldr	s14, [r3, #4]
    2acc:	ed92 6a07 	vldr	s12, [r2, #28]
    2ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2ad4:	eeb4 7ac6 	vcmpe.f32	s14, s12
    2ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2adc:	f2c0 82e1 	blt.w	30a2 <audioFrame+0xb22>
    2ae0:	ed93 7a01 	vldr	s14, [r3, #4]
    2ae4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2ae8:	eeb4 5ac7 	vcmpe.f32	s10, s14
    2aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2af0:	f2c0 82d7 	blt.w	30a2 <audioFrame+0xb22>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2af4:	edd3 7a01 	vldr	s15, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2af8:	ee36 7a45 	vsub.f32	s14, s12, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2b00:	ee37 5ac5 	vsub.f32	s10, s15, s10
    2b04:	eec5 7a07 	vdiv.f32	s15, s10, s14
    2b08:	eee2 6aa7 	vfma.f32	s13, s5, s15
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2b0c:	edc6 6a01 	vstr	s13, [r6, #4]
    2b10:	e647      	b.n	27a2 <audioFrame+0x222>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
    2b12:	ed93 6a00 	vldr	s12, [r3]
    2b16:	edd2 4a04 	vldr	s9, [r2, #16]
    2b1a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2b1e:	eef4 4ac6 	vcmpe.f32	s9, s12
    2b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b26:	d81a      	bhi.n	2b5e <audioFrame+0x5de>
    2b28:	ed93 6a00 	vldr	s12, [r3]
    2b2c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2b30:	eeb4 6ae3 	vcmpe.f32	s12, s7
    2b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b38:	d511      	bpl.n	2b5e <audioFrame+0x5de>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2b3a:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2b3e:	ee74 4ae3 	vsub.f32	s9, s9, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2b42:	4e2b      	ldr	r6, [pc, #172]	; (2bf0 <audioFrame+0x670>)
    2b44:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2b48:	ee76 3a63 	vsub.f32	s7, s12, s7
    2b4c:	eeb0 6a47 	vmov.f32	s12, s14
    2b50:	ee83 2aa4 	vdiv.f32	s4, s7, s9
    2b54:	eea3 6a02 	vfma.f32	s12, s6, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
    2b58:	ed86 6a00 	vstr	s12, [r6]
    2b5c:	e60c      	b.n	2778 <audioFrame+0x1f8>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
    2b5e:	ed93 6a00 	vldr	s12, [r3]
    2b62:	edd2 3a06 	vldr	s7, [r2, #24]
    2b66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2b6a:	eef4 3ac6 	vcmpe.f32	s7, s12
    2b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b72:	f200 82a8 	bhi.w	30c6 <audioFrame+0xb46>
    2b76:	ed93 6a00 	vldr	s12, [r3]
    2b7a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2b7e:	eeb4 6ae4 	vcmpe.f32	s12, s9
    2b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b86:	f200 829e 	bhi.w	30c6 <audioFrame+0xb46>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2b8a:	681a      	ldr	r2, [r3, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2b8c:	ee33 6ae4 	vsub.f32	s12, s7, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2b90:	4e17      	ldr	r6, [pc, #92]	; (2bf0 <audioFrame+0x670>)
    2b92:	ee03 2a90 	vmov	s7, r2
    2b96:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2b9a:	ee73 4ae4 	vsub.f32	s9, s7, s9
    2b9e:	eec4 3a86 	vdiv.f32	s7, s9, s12
    2ba2:	eeb0 6a66 	vmov.f32	s12, s13
    2ba6:	eea2 6aa3 	vfma.f32	s12, s5, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
    2baa:	ed86 6a00 	vstr	s12, [r6]
    2bae:	e5e3      	b.n	2778 <audioFrame+0x1f8>
    2bb0:	4c0d      	ldr	r4, [pc, #52]	; (2be8 <audioFrame+0x668>)
    2bb2:	9b05      	ldr	r3, [sp, #20]
    2bb4:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    2bb8:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 2bec <audioFrame+0x66c>
    2bbc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    2bc0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2bc4:	f004 f9d0 	bl	6f68 <__audioTickString2_veneer>
    2bc8:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2bcc:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    2bce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2bd2:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    2bd4:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
    2bd8:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    2bdc:	d1f2      	bne.n	2bc4 <audioFrame+0x644>
    2bde:	e557      	b.n	2690 <audioFrame+0x110>
    2be0:	20005178 	.word	0x20005178
    2be4:	58020400 	.word	0x58020400
    2be8:	30000000 	.word	0x30000000
    2bec:	4b000000 	.word	0x4b000000
    2bf0:	20000364 	.word	0x20000364
    2bf4:	20000a90 	.word	0x20000a90
    2bf8:	200009d4 	.word	0x200009d4
    2bfc:	00000000 	.word	0x00000000
    2c00:	20000aac 	.word	0x20000aac
    2c04:	20000a1c 	.word	0x20000a1c
				float amplitz = stringInputs[i] * 0.000025f;
    2c08:	ee07 3a90 	vmov	s15, r3
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    2c0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2c10:	eeb0 0a69 	vmov.f32	s0, s19
    2c14:	9208      	str	r2, [sp, #32]
				float amplitz = stringInputs[i] * 0.000025f;
    2c16:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    2c1a:	f5a8 7613 	sub.w	r6, r8, #588	; 0x24c
				stringOctave[i] = octave;
    2c1e:	464d      	mov	r5, r9
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    2c20:	ee60 0a8c 	vmul.f32	s1, s1, s24
    2c24:	f003 f87c 	bl	5d20 <LEAF_clip>
				stringOctave[i] = octave;
    2c28:	4b41      	ldr	r3, [pc, #260]	; (2d30 <audioFrame+0x7b0>)
    2c2a:	4942      	ldr	r1, [pc, #264]	; (2d34 <audioFrame+0x7b4>)
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    2c2c:	eeb0 aa40 	vmov.f32	s20, s0
				stringOctave[i] = octave;
    2c30:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    2c34:	6809      	ldr	r1, [r1, #0]
    2c36:	6019      	str	r1, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    2c38:	ea4f 038a 	mov.w	r3, sl, lsl #2
    2c3c:	9309      	str	r3, [sp, #36]	; 0x24
    2c3e:	f108 0354 	add.w	r3, r8, #84	; 0x54
    2c42:	9307      	str	r3, [sp, #28]
					if (useVelocity == 0) envVel = 1.f;
    2c44:	edd6 7a00 	vldr	s15, [r6]
				    tADSRT_on(&envs[v][i], envVel);
    2c48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2c4c:	4628      	mov	r0, r5
				for (int v = 0; v < NUM_ENV; v++)
    2c4e:	36a8      	adds	r6, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
    2c50:	eef5 7a40 	vcmp.f32	s15, #0.0
    2c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c58:	f000 8217 	beq.w	308a <audioFrame+0xb0a>
				    tADSRT_on(&envs[v][i], envVel);
    2c5c:	eeb0 0a4a 	vmov.f32	s0, s20
				for (int v = 0; v < NUM_ENV; v++)
    2c60:	3508      	adds	r5, #8
				    tADSRT_on(&envs[v][i], envVel);
    2c62:	f004 f9e9 	bl	7038 <__tADSRT_on_veneer>
				    voiceSounding = 1;
    2c66:	4b34      	ldr	r3, [pc, #208]	; (2d38 <audioFrame+0x7b8>)
    2c68:	f04f 0201 	mov.w	r2, #1
    2c6c:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    2c6e:	9b07      	ldr	r3, [sp, #28]
    2c70:	429e      	cmp	r6, r3
    2c72:	d1e7      	bne.n	2c44 <audioFrame+0x6c4>
    2c74:	ebca 738a 	rsb	r3, sl, sl, lsl #30
    2c78:	9a08      	ldr	r2, [sp, #32]
					if (noteOnSync > 0.5f)
    2c7a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
				stringOctave[i] = octave;
    2c7e:	4646      	mov	r6, r8
    2c80:	009b      	lsls	r3, r3, #2
				for (int v = 0; v < NUM_LFOS; v++)
    2c82:	2500      	movs	r5, #0
    2c84:	330c      	adds	r3, #12
    2c86:	e9cd 2707 	strd	r2, r7, [sp, #28]
    2c8a:	461f      	mov	r7, r3
					if (noteOnSync > 0.5f)
    2c8c:	edd6 7a0e 	vldr	s15, [r6, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    2c90:	4628      	mov	r0, r5
    2c92:	4651      	mov	r1, sl
				for (int v = 0; v < NUM_LFOS; v++)
    2c94:	3501      	adds	r5, #1
					if (noteOnSync > 0.5f)
    2c96:	eef4 7ac8 	vcmpe.f32	s15, s16
    2c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c9e:	dd03      	ble.n	2ca8 <audioFrame+0x728>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    2ca0:	ed96 0a00 	vldr	s0, [r6]
    2ca4:	59f2      	ldr	r2, [r6, r7]
    2ca6:	4790      	blx	r2
				for (int v = 0; v < NUM_LFOS; v++)
    2ca8:	2d04      	cmp	r5, #4
    2caa:	f106 068c 	add.w	r6, r6, #140	; 0x8c
    2cae:	d1ed      	bne.n	2c8c <audioFrame+0x70c>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    2cb0:	4922      	ldr	r1, [pc, #136]	; (2d3c <audioFrame+0x7bc>)
    2cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    2cb6:	4822      	ldr	r0, [pc, #136]	; (2d40 <audioFrame+0x7c0>)
    2cb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    2cbc:	780b      	ldrb	r3, [r1, #0]
				if (currentActivePreset == 63)
    2cbe:	4d21      	ldr	r5, [pc, #132]	; (2d44 <audioFrame+0x7c4>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    2cc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2cc4:	3301      	adds	r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    2cc6:	9e01      	ldr	r6, [sp, #4]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    2cc8:	edd0 7a00 	vldr	s15, [r0]
    2ccc:	700b      	strb	r3, [r1, #0]
    2cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if (currentActivePreset == 63)
    2cd2:	782b      	ldrb	r3, [r5, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    2cd4:	ed86 aa00 	vstr	s20, [r6]
				if (currentActivePreset == 63)
    2cd8:	2b3f      	cmp	r3, #63	; 0x3f
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    2cda:	ee67 7a87 	vmul.f32	s15, s15, s14
    2cde:	e9dd 2707 	ldrd	r2, r7, [sp, #28]
    2ce2:	edc6 7a02 	vstr	s15, [r6, #8]
				if (currentActivePreset == 63)
    2ce6:	f000 8275 	beq.w	31d4 <audioFrame+0xc54>
				if (currentActivePreset == 62)
    2cea:	782b      	ldrb	r3, [r5, #0]
    2cec:	2b3e      	cmp	r3, #62	; 0x3e
    2cee:	f000 8298 	beq.w	3222 <audioFrame+0xca2>
				else if (currentActivePreset == 61)
    2cf2:	782b      	ldrb	r3, [r5, #0]
    2cf4:	2b3d      	cmp	r3, #61	; 0x3d
    2cf6:	f47f ad0b 	bne.w	2710 <audioFrame+0x190>
    2cfa:	4b13      	ldr	r3, [pc, #76]	; (2d48 <audioFrame+0x7c8>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    2cfc:	eef1 ca00 	vmov.f32	s25, #16	; 0x40800000  4.0
    2d00:	9909      	ldr	r1, [sp, #36]	; 0x24
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    2d02:	eeb1 da08 	vmov.f32	s26, #24	; 0x40c00000  6.0
				else if (currentActivePreset == 61)
    2d06:	9803      	ldr	r0, [sp, #12]
    2d08:	4419      	add	r1, r3
    2d0a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    2d0e:	970a      	str	r7, [sp, #40]	; 0x28
    2d10:	4680      	mov	r8, r0
    2d12:	460b      	mov	r3, r1
    2d14:	490d      	ldr	r1, [pc, #52]	; (2d4c <audioFrame+0x7cc>)
    2d16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    2d1a:	4617      	mov	r7, r2
    2d1c:	4d0c      	ldr	r5, [pc, #48]	; (2d50 <audioFrame+0x7d0>)
    2d1e:	469b      	mov	fp, r3
    2d20:	4e0c      	ldr	r6, [pc, #48]	; (2d54 <audioFrame+0x7d4>)
    2d22:	e9cd a907 	strd	sl, r9, [sp, #28]
    2d26:	4689      	mov	r9, r1
    2d28:	f8df a02c 	ldr.w	sl, [pc, #44]	; 2d58 <audioFrame+0x7d8>
    2d2c:	e0f5      	b.n	2f1a <audioFrame+0x99a>
    2d2e:	bf00      	nop
    2d30:	20014708 	.word	0x20014708
    2d34:	200054f0 	.word	0x200054f0
    2d38:	200147b0 	.word	0x200147b0
    2d3c:	20005a70 	.word	0x20005a70
    2d40:	20018644 	.word	0x20018644
    2d44:	200149b4 	.word	0x200149b4
    2d48:	200146a0 	.word	0x200146a0
    2d4c:	20000c94 	.word	0x20000c94
    2d50:	20000db4 	.word	0x20000db4
    2d54:	20000340 	.word	0x20000340
    2d58:	20005184 	.word	0x20005184
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    2d5c:	ed96 7a06 	vldr	s14, [r6, #24]
    2d60:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2d64:	edd6 7a08 	vldr	s15, [r6, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    2d68:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2d6c:	ee78 6a47 	vsub.f32	s13, s16, s14
    2d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2d74:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
    2d78:	ee68 8a8b 	vmul.f32	s17, s17, s22
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2d7c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    2d80:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    2d84:	ee70 0aa0 	vadd.f32	s1, s1, s1
    2d88:	f002 ffca 	bl	5d20 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2d8c:	ed96 7a03 	vldr	s14, [r6, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2d90:	edd6 7a05 	vldr	s15, [r6, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    2d94:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2d98:	ee78 6a47 	vsub.f32	s13, s16, s14
    2d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2da0:	eeb0 1a6a 	vmov.f32	s2, s21
    2da4:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2da8:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2dac:	ee70 0aa0 	vadd.f32	s1, s1, s1
    2db0:	f002 ffb6 	bl	5d20 <LEAF_clip>
							int height2Int = floor(height2);
    2db4:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2db8:	48eb      	ldr	r0, [pc, #940]	; (3168 <audioFrame+0xbe8>)
							int height1Int = floor(height1);
    2dba:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							if (height2 < 1.0f)
    2dbe:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
    2dc2:	febb 6b46 	vrintm.f64	d6, d6
    2dc6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
    2dca:	febb 7b47 	vrintm.f64	d7, d7
    2dce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
    2dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
    2dd6:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
    2dda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
    2dde:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
    2de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2de6:	f102 0101 	add.w	r1, r2, #1
    2dea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
    2dee:	ee3e 9ae6 	vsub.f32	s18, s29, s13
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2df2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2df6:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2dfa:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2dfe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    2e02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2e06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    2e0a:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e0e:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2e12:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2e1e:	ee29 9a07 	vmul.f32	s18, s18, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2e26:	ee3f 7a6e 	vsub.f32	s14, s30, s29
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e2a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2e2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2e32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2e36:	ee37 7a26 	vadd.f32	s14, s14, s13
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e3a:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
    2e3e:	edd2 5a24 	vldr	s11, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2e42:	eea5 9a07 	vfma.f32	s18, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e46:	ee3f 7a40 	vsub.f32	s14, s30, s0
    2e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
    2e4e:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    2e52:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2e56:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2e5a:	eee6 7a07 	vfma.f32	s15, s12, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    2e5e:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
    2e62:	f100 815f 	bmi.w	3124 <audioFrame+0xba4>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    2e66:	eef0 0a48 	vmov.f32	s1, s16
    2e6a:	ed96 1a08 	vldr	s2, [r6, #32]
    2e6e:	ed96 0a07 	vldr	s0, [r6, #28]
    2e72:	edd9 ea3c 	vldr	s29, [r9, #240]	; 0xf0
    2e76:	f002 ff53 	bl	5d20 <LEAF_clip>
    2e7a:	ed95 7a3c 	vldr	s14, [r5, #240]	; 0xf0
    2e7e:	eeae 7a80 	vfma.f32	s14, s29, s0
    2e82:	eecf fa07 	vdiv.f32	s31, s30, s14
							if (height1 < 1.0f)
    2e86:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    2e8a:	eeb4 eaee 	vcmpe.f32	s28, s29
    2e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2e92:	f100 8136 	bmi.w	3102 <audioFrame+0xb82>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    2e96:	eef0 0a48 	vmov.f32	s1, s16
    2e9a:	ed96 1a05 	vldr	s2, [r6, #20]
    2e9e:	ed96 0a04 	vldr	s0, [r6, #16]
    2ea2:	ed99 8a24 	vldr	s16, [r9, #144]	; 0x90
    2ea6:	f002 ff3b 	bl	5d20 <LEAF_clip>
    2eaa:	ed95 7a24 	vldr	s14, [r5, #144]	; 0x90
    2eae:	eea8 7a00 	vfma.f32	s14, s16, s0
    2eb2:	eece 6a87 	vdiv.f32	s13, s29, s14
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    2eb6:	4aad      	ldr	r2, [pc, #692]	; (316c <audioFrame+0xbec>)
    2eb8:	4640      	mov	r0, r8
    2eba:	49ad      	ldr	r1, [pc, #692]	; (3170 <audioFrame+0xbf0>)
					for (int j = 0; j < NUM_OVERTONES; j++)
    2ebc:	3701      	adds	r7, #1
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    2ebe:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    2ec0:	f109 0904 	add.w	r9, r9, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    2ec4:	ed9a 0a01 	vldr	s0, [sl, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
    2ec8:	3504      	adds	r5, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    2eca:	ee6d 7aaf 	vmul.f32	s15, s27, s31
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    2ece:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2ed2:	ee20 0a2b 	vmul.f32	s0, s0, s23
    2ed6:	ed93 7a00 	vldr	s14, [r3]
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    2eda:	eee6 7aa8 	vfma.f32	s15, s13, s17
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
    2ede:	ee20 0a07 	vmul.f32	s0, s0, s14
    2ee2:	ee20 0a27 	vmul.f32	s0, s0, s15
    2ee6:	f004 f8bb 	bl	7060 <__tADSRT_setDecay_veneer>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
    2eea:	4aa0      	ldr	r2, [pc, #640]	; (316c <audioFrame+0xbec>)
    2eec:	49a0      	ldr	r1, [pc, #640]	; (3170 <audioFrame+0xbf0>)
    2eee:	4640      	mov	r0, r8
    2ef0:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    2ef2:	f108 0804 	add.w	r8, r8, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
    2ef6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2efa:	ed93 0a00 	vldr	s0, [r3]
    2efe:	ee2a 0a00 	vmul.f32	s0, s20, s0
    2f02:	ee20 0a09 	vmul.f32	s0, s0, s18
    2f06:	f004 f897 	bl	7038 <__tADSRT_on_veneer>
						currentRandom++;
    2f0a:	4a98      	ldr	r2, [pc, #608]	; (316c <audioFrame+0xbec>)
					for (int j = 0; j < NUM_OVERTONES; j++)
    2f0c:	2f0b      	cmp	r7, #11
						currentRandom++;
    2f0e:	7813      	ldrb	r3, [r2, #0]
    2f10:	f103 0301 	add.w	r3, r3, #1
    2f14:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    2f16:	f000 8178 	beq.w	320a <audioFrame+0xc8a>
						int thisString = i + firstString;
    2f1a:	4b96      	ldr	r3, [pc, #600]	; (3174 <audioFrame+0xbf4>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    2f1c:	ed9a 8a02 	vldr	s16, [sl, #8]
						int thisString = i + firstString;
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	9a07      	ldr	r2, [sp, #28]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    2f24:	ee28 8a2c 	vmul.f32	s16, s16, s25
    2f28:	eddb 7a00 	vldr	s15, [fp]
						int thisString = i + firstString;
    2f2c:	4413      	add	r3, r2
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
    2f2e:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (thisString < 6)
    2f32:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
    2f34:	ee07 3a90 	vmov	s15, r3
    2f38:	eef8 8ae7 	vcvt.f32.s32	s17, s15
						if (thisString < 6)
    2f3c:	f77f af0e 	ble.w	2d5c <audioFrame+0x7dc>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2f40:	ed96 7a03 	vldr	s14, [r6, #12]
    2f44:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f48:	edd6 7a05 	vldr	s15, [r6, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2f4c:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f50:	ee78 6a47 	vsub.f32	s13, s16, s14
    2f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    2f58:	ee78 8acd 	vsub.f32	s17, s17, s26
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    2f5c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f60:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
    2f64:	ee68 8a8b 	vmul.f32	s17, s17, s22
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    2f68:	ee7f da68 	vsub.f32	s27, s30, s17
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2f6c:	ee70 0aa0 	vadd.f32	s1, s1, s1
    2f70:	f002 fed6 	bl	5d20 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    2f74:	ed96 7a00 	vldr	s14, [r6]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f78:	edd6 7a02 	vldr	s15, [r6, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    2f7c:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f80:	ee78 6a47 	vsub.f32	s13, s16, s14
    2f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    2f88:	eeb0 1a6a 	vmov.f32	s2, s21
    2f8c:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    2f90:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    2f94:	ee70 0aa0 	vadd.f32	s1, s1, s1
    2f98:	f002 fec2 	bl	5d20 <LEAF_clip>
							int height2Int = floor(height2);
    2f9c:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							int height1Int = floor(height1);
    2fa0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2fa4:	4870      	ldr	r0, [pc, #448]	; (3168 <audioFrame+0xbe8>)
							if (height2 < 1.0f)
    2fa6:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
    2faa:	febb 6b46 	vrintm.f64	d6, d6
    2fae:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
    2fb2:	febb 7b47 	vrintm.f64	d7, d7
    2fb6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
    2fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
    2fbe:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
    2fc2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
    2fc6:	ee17 3a90 	vmov	r3, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    2fca:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2fce:	f102 0101 	add.w	r1, r2, #1
    2fd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
    2fd6:	ee7e 6ae6 	vsub.f32	s13, s29, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2fda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2fde:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2fe2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    2fe6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2fea:	ed92 9a24 	vldr	s18, [r2, #144]	; 0x90
    2fee:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    2ff2:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2ff6:	f103 0201 	add.w	r2, r3, #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    2ffa:	eea7 9aa6 	vfma.f32	s18, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    2ffe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height1Float = height1 - height1Int;
    3002:	ee07 3a90 	vmov	s15, r3
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    3006:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    300a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
							float height1Float = height1 - height1Int;
    300e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    3012:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3016:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    301a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float height1Float = height1 - height1Int;
    301e:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    3022:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
    3026:	edd3 7a00 	vldr	s15, [r3]
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    302a:	ee2d 9a89 	vmul.f32	s18, s27, s18
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    302e:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    3032:	eea8 9aa7 	vfma.f32	s18, s17, s15
							if (height2 < 1.0f)
    3036:	f100 80a3 	bmi.w	3180 <audioFrame+0xc00>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    303a:	eef0 0a48 	vmov.f32	s1, s16
    303e:	ed96 1a05 	vldr	s2, [r6, #20]
    3042:	ed96 0a04 	vldr	s0, [r6, #16]
    3046:	edd9 ea24 	vldr	s29, [r9, #144]	; 0x90
    304a:	f002 fe69 	bl	5d20 <LEAF_clip>
    304e:	ed95 7a24 	vldr	s14, [r5, #144]	; 0x90
    3052:	eeae 7a80 	vfma.f32	s14, s29, s0
    3056:	eecf fa07 	vdiv.f32	s31, s30, s14
							if (height1 < 1.0f)
    305a:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    305e:	eeb4 eaee 	vcmpe.f32	s28, s29
    3062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3066:	d46e      	bmi.n	3146 <audioFrame+0xbc6>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    3068:	eef0 0a48 	vmov.f32	s1, s16
    306c:	ed96 1a02 	vldr	s2, [r6, #8]
    3070:	ed96 0a01 	vldr	s0, [r6, #4]
    3074:	ed99 8a0c 	vldr	s16, [r9, #48]	; 0x30
    3078:	f002 fe52 	bl	5d20 <LEAF_clip>
    307c:	ed95 7a0c 	vldr	s14, [r5, #48]	; 0x30
    3080:	eea8 7a00 	vfma.f32	s14, s16, s0
    3084:	eece 6a87 	vdiv.f32	s13, s29, s14
    3088:	e715      	b.n	2eb6 <audioFrame+0x936>
				    tADSRT_on(&envs[v][i], envVel);
    308a:	f003 ffd5 	bl	7038 <__tADSRT_on_veneer>
				    voiceSounding = 1;
    308e:	4b3a      	ldr	r3, [pc, #232]	; (3178 <audioFrame+0xbf8>)
    3090:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
    3094:	3508      	adds	r5, #8
				    voiceSounding = 1;
    3096:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    3098:	9b07      	ldr	r3, [sp, #28]
    309a:	42b3      	cmp	r3, r6
    309c:	f47f add2 	bne.w	2c44 <audioFrame+0x6c4>
    30a0:	e5e8      	b.n	2c74 <audioFrame+0x6f4>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    30a2:	ed93 7a01 	vldr	s14, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    30a6:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    30aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    30ae:	ee76 6ac6 	vsub.f32	s13, s13, s12
    30b2:	ee37 7a46 	vsub.f32	s14, s14, s12
    30b6:	ee87 6a26 	vdiv.f32	s12, s14, s13
    30ba:	eee5 7a86 	vfma.f32	s15, s11, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    30be:	edc6 7a01 	vstr	s15, [r6, #4]
    30c2:	f7ff bb6e 	b.w	27a2 <audioFrame+0x222>
    30c6:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    30ca:	edd2 4a08 	vldr	s9, [r2, #32]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    30ce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    30d2:	4e2a      	ldr	r6, [pc, #168]	; (317c <audioFrame+0xbfc>)
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    30d4:	ee74 4ae3 	vsub.f32	s9, s9, s7
    30d8:	ee36 6a63 	vsub.f32	s12, s12, s7
    30dc:	eec6 3a24 	vdiv.f32	s7, s12, s9
    30e0:	eeb0 6a67 	vmov.f32	s12, s15
    30e4:	eea5 6aa3 	vfma.f32	s12, s11, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
    30e8:	ed86 6a00 	vstr	s12, [r6]
    30ec:	f7ff bb44 	b.w	2778 <audioFrame+0x1f8>
					lsDecay[i] = 0;
    30f0:	2300      	movs	r3, #0
    30f2:	9a02      	ldr	r2, [sp, #8]
    30f4:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    30f6:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
    30f8:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    30fc:	7810      	ldrb	r0, [r2, #0]
    30fe:	f7ff ba83 	b.w	2608 <audioFrame+0x88>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    3102:	eef0 0a48 	vmov.f32	s1, s16
    3106:	ed96 1a04 	vldr	s2, [r6, #16]
    310a:	ed96 0a03 	vldr	s0, [r6, #12]
    310e:	ed99 8a18 	vldr	s16, [r9, #96]	; 0x60
    3112:	f002 fe05 	bl	5d20 <LEAF_clip>
    3116:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
    311a:	eee8 7a00 	vfma.f32	s15, s16, s0
    311e:	eece 6aa7 	vdiv.f32	s13, s29, s15
    3122:	e6c8      	b.n	2eb6 <audioFrame+0x936>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    3124:	eef0 0a48 	vmov.f32	s1, s16
    3128:	ed96 1a07 	vldr	s2, [r6, #28]
    312c:	ed96 0a06 	vldr	s0, [r6, #24]
    3130:	edd9 ea30 	vldr	s29, [r9, #192]	; 0xc0
    3134:	f002 fdf4 	bl	5d20 <LEAF_clip>
    3138:	edd5 7a30 	vldr	s15, [r5, #192]	; 0xc0
    313c:	eeee 7a80 	vfma.f32	s15, s29, s0
    3140:	eecf fa27 	vdiv.f32	s31, s30, s15
    3144:	e69f      	b.n	2e86 <audioFrame+0x906>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    3146:	eef0 0a48 	vmov.f32	s1, s16
    314a:	ed96 1a01 	vldr	s2, [r6, #4]
    314e:	ed96 0a00 	vldr	s0, [r6]
    3152:	ed99 8a00 	vldr	s16, [r9]
    3156:	f002 fde3 	bl	5d20 <LEAF_clip>
    315a:	edd5 7a00 	vldr	s15, [r5]
    315e:	eee8 7a00 	vfma.f32	s15, s16, s0
    3162:	eece 6aa7 	vdiv.f32	s13, s29, s15
    3166:	e6a6      	b.n	2eb6 <audioFrame+0x936>
    3168:	20000394 	.word	0x20000394
    316c:	200149b5 	.word	0x200149b5
    3170:	20005670 	.word	0x20005670
    3174:	200050b8 	.word	0x200050b8
    3178:	200147b0 	.word	0x200147b0
    317c:	20000364 	.word	0x20000364
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    3180:	eef0 0a48 	vmov.f32	s1, s16
    3184:	ed96 1a04 	vldr	s2, [r6, #16]
    3188:	ed96 0a03 	vldr	s0, [r6, #12]
    318c:	edd9 ea18 	vldr	s29, [r9, #96]	; 0x60
    3190:	f002 fdc6 	bl	5d20 <LEAF_clip>
    3194:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
    3198:	eeee 7a80 	vfma.f32	s15, s29, s0
    319c:	eecf fa27 	vdiv.f32	s31, s30, s15
    31a0:	e75b      	b.n	305a <audioFrame+0xada>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    31a2:	eeb0 0a69 	vmov.f32	s0, s19
    31a6:	4638      	mov	r0, r7
    31a8:	f003 ff92 	bl	70d0 <__tLivingString2_setTargetLev_veneer>
					tLivingString2_setLevMode(&strings[i], 0);
    31ac:	2100      	movs	r1, #0
    31ae:	4638      	mov	r0, r7
    31b0:	f003 fef6 	bl	6fa0 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setDecay(&strings[i], 0.2f);
    31b4:	eeb0 0a4b 	vmov.f32	s0, s22
    31b8:	4638      	mov	r0, r7
    31ba:	f003 ff99 	bl	70f0 <__tLivingString2_setDecay_veneer>
					tADSRT_off(&fenvelopes[i]);
    31be:	4861      	ldr	r0, [pc, #388]	; (3344 <audioFrame+0xdc4>)
    31c0:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    31c4:	f003 ff3c 	bl	7040 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    31c8:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
    31ca:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    31ce:	7810      	ldrb	r0, [r2, #0]
    31d0:	f7ff ba1a 	b.w	2608 <audioFrame+0x88>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
    31d4:	4b5c      	ldr	r3, [pc, #368]	; (3348 <audioFrame+0xdc8>)
    31d6:	eeb0 0a4a 	vmov.f32	s0, s20
    31da:	485c      	ldr	r0, [pc, #368]	; (334c <audioFrame+0xdcc>)
    31dc:	edd3 0a00 	vldr	s1, [r3]
    31e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31e2:	4418      	add	r0, r3
    31e4:	f003 ff9c 	bl	7120 <__tSimpleLivingString3_pluck_veneer>
					lsDecay[i] = 1;
    31e8:	9a02      	ldr	r2, [sp, #8]
    31ea:	2301      	movs	r3, #1
    31ec:	7013      	strb	r3, [r2, #0]
    31ee:	9a07      	ldr	r2, [sp, #28]
    31f0:	e57b      	b.n	2cea <audioFrame+0x76a>
    31f2:	9b03      	ldr	r3, [sp, #12]
    31f4:	461e      	mov	r6, r3
    31f6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
						tADSRT_off(&additiveEnv[i][j]);
    31fa:	4630      	mov	r0, r6
					for (int j = 0; j < NUM_OVERTONES; j++)
    31fc:	3604      	adds	r6, #4
						tADSRT_off(&additiveEnv[i][j]);
    31fe:	f003 ff1f 	bl	7040 <__tADSRT_off_veneer>
					for (int j = 0; j < NUM_OVERTONES; j++)
    3202:	42ae      	cmp	r6, r5
    3204:	d1f9      	bne.n	31fa <audioFrame+0xc7a>
    3206:	f7ff ba83 	b.w	2710 <audioFrame+0x190>
			previousStringInputs[i] = stringInputs[i];
    320a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
    320e:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
    3210:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    3214:	7810      	ldrb	r0, [r2, #0]
			previousStringInputs[i] = stringInputs[i];
    3216:	e9dd a907 	ldrd	sl, r9, [sp, #28]
    321a:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	; 0x24
    321e:	f7ff b9f3 	b.w	2608 <audioFrame+0x88>
					tADSRT_on(&fenvelopes[i], amplitz);
    3222:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3224:	eeb0 0a4a 	vmov.f32	s0, s20
    3228:	4846      	ldr	r0, [pc, #280]	; (3344 <audioFrame+0xdc4>)
					float pluckAmp = amplitz * 2.0f; //was 4
    322a:	ee3a aa0a 	vadd.f32	s20, s20, s20
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    322e:	4d48      	ldr	r5, [pc, #288]	; (3350 <audioFrame+0xdd0>)
					tADSRT_on(&fenvelopes[i], amplitz);
    3230:	4418      	add	r0, r3
    3232:	9208      	str	r2, [sp, #32]
    3234:	f003 ff00 	bl	7038 <__tADSRT_on_veneer>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    3238:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    323c:	ed95 7a00 	vldr	s14, [r5]
    3240:	4638      	mov	r0, r7
    3242:	9507      	str	r5, [sp, #28]
    3244:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    324c:	bfcc      	ite	gt
    324e:	2101      	movgt	r1, #1
    3250:	2100      	movle	r1, #0
    3252:	f003 fea5 	bl	6fa0 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
    3256:	ed95 0a01 	vldr	s0, [r5, #4]
    325a:	4638      	mov	r0, r7
    325c:	f003 ff38 	bl	70d0 <__tLivingString2_setTargetLev_veneer>
					int delayLength = (int)strings[i]->waveLengthInSamples;
    3260:	683b      	ldr	r3, [r7, #0]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    3262:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
    3266:	ed95 7a02 	vldr	s14, [r5, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
    326a:	edd3 6a02 	vldr	s13, [r3, #8]
					if (beforeLength > 0)
    326e:	9a08      	ldr	r2, [sp, #32]
					int delayLength = (int)strings[i]->waveLengthInSamples;
    3270:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    3274:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
    3278:	ee16 6a90 	vmov	r6, s13
					int beforeLength = (delayLength * knobScaled[2]);
    327c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3280:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    3284:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
    3288:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    328c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
    3290:	ee17 5a10 	vmov	r5, s14
					if (beforeLength > 0)
    3294:	2d00      	cmp	r5, #0
    3296:	dd52      	ble.n	333e <audioFrame+0xdbe>
						beforePickIncrement = pluckAmp / beforeLength;
    3298:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    329c:	ee8a 6a07 	vdiv.f32	s12, s20, s14
					if (afterLength > 0)
    32a0:	ee17 1a90 	vmov	r1, s15
    32a4:	2900      	cmp	r1, #0
    32a6:	dd03      	ble.n	32b0 <audioFrame+0xd30>
						afterPickIncrement = pluckAmp / afterLength;
    32a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    32ac:	ee8a aa27 	vdiv.f32	s20, s20, s15
					for (int j = 0; j < delayLength; j++)
    32b0:	2e00      	cmp	r6, #0
    32b2:	dd34      	ble.n	331e <audioFrame+0xd9e>
					float value = 0.0f;
    32b4:	eddf 7a27 	vldr	s15, [pc, #156]	; 3354 <audioFrame+0xdd4>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    32b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    32bc:	e01c      	b.n	32f8 <audioFrame+0xd78>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    32be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
							value += beforePickIncrement;
    32c0:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    32c4:	6983      	ldr	r3, [r0, #24]
    32c6:	6881      	ldr	r1, [r0, #8]
    32c8:	ee27 7aa6 	vmul.f32	s14, s15, s13
    32cc:	4413      	add	r3, r2
    32ce:	4019      	ands	r1, r3
    32d0:	6843      	ldr	r3, [r0, #4]
    32d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    32d6:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
    32da:	683b      	ldr	r3, [r7, #0]
    32dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    32de:	6983      	ldr	r3, [r0, #24]
    32e0:	6881      	ldr	r1, [r0, #8]
    32e2:	4413      	add	r3, r2
					for (int j = 0; j < delayLength; j++)
    32e4:	3201      	adds	r2, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    32e6:	4019      	ands	r1, r3
    32e8:	6843      	ldr	r3, [r0, #4]
					for (int j = 0; j < delayLength; j++)
    32ea:	4296      	cmp	r6, r2
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    32ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    32f0:	ed81 7a00 	vstr	s14, [r1]
					for (int j = 0; j < delayLength; j++)
    32f4:	d013      	beq.n	331e <audioFrame+0xd9e>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    32f6:	683b      	ldr	r3, [r7, #0]
						if (j < beforeLength)
    32f8:	42aa      	cmp	r2, r5
    32fa:	dbe0      	blt.n	32be <audioFrame+0xd3e>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    32fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
							value -= afterPickIncrement;
    32fe:	ee77 7aca 	vsub.f32	s15, s15, s20
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    3302:	6983      	ldr	r3, [r0, #24]
    3304:	6881      	ldr	r1, [r0, #8]
    3306:	ee27 7aa6 	vmul.f32	s14, s15, s13
    330a:	4413      	add	r3, r2
    330c:	4019      	ands	r1, r3
    330e:	6843      	ldr	r3, [r0, #4]
    3310:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3314:	ed81 7a00 	vstr	s14, [r1]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    3318:	683b      	ldr	r3, [r7, #0]
    331a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    331c:	e7df      	b.n	32de <audioFrame+0xd5e>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    331e:	9b07      	ldr	r3, [sp, #28]
    3320:	4638      	mov	r0, r7
    3322:	eddf 7a0d 	vldr	s15, [pc, #52]	; 3358 <audioFrame+0xdd8>
    3326:	ed93 0a03 	vldr	s0, [r3, #12]
    332a:	ee20 0a27 	vmul.f32	s0, s0, s15
    332e:	f003 fedf 	bl	70f0 <__tLivingString2_setDecay_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    3332:	9a06      	ldr	r2, [sp, #24]
			previousStringInputs[i] = stringInputs[i];
    3334:	f8db 3000 	ldr.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
    3338:	7810      	ldrb	r0, [r2, #0]
    333a:	f7ff b965 	b.w	2608 <audioFrame+0x88>
						beforePickIncrement = pluckAmp;
    333e:	eeb0 6a4a 	vmov.f32	s12, s20
    3342:	e7ad      	b.n	32a0 <audioFrame+0xd20>
    3344:	20005078 	.word	0x20005078
    3348:	2000018c 	.word	0x2000018c
    334c:	20005350 	.word	0x20005350
    3350:	20005184 	.word	0x20005184
    3354:	00000000 	.word	0x00000000
    3358:	43fa0000 	.word	0x43fa0000
    335c:	f3af 8000 	nop.w

00003360 <HAL_SPI_RxCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	//SCB_InvalidateDCache();
	if (hspi == &hspi6)
    3360:	4b6f      	ldr	r3, [pc, #444]	; (3520 <HAL_SPI_RxCpltCallback+0x1c0>)
	interrupted = 1;
    3362:	2201      	movs	r2, #1
    3364:	496f      	ldr	r1, [pc, #444]	; (3524 <HAL_SPI_RxCpltCallback+0x1c4>)
	if (hspi == &hspi6)
    3366:	4283      	cmp	r3, r0
	interrupted = 1;
    3368:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
    336a:	d000      	beq.n	336e <HAL_SPI_RxCpltCallback+0xe>
    336c:	4770      	bx	lr
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    336e:	2102      	movs	r1, #2
    3370:	486d      	ldr	r0, [pc, #436]	; (3528 <HAL_SPI_RxCpltCallback+0x1c8>)
{
    3372:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    3374:	f003 fec4 	bl	7100 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    3378:	4b6c      	ldr	r3, [pc, #432]	; (352c <HAL_SPI_RxCpltCallback+0x1cc>)
    337a:	7e9a      	ldrb	r2, [r3, #26]
    337c:	2afe      	cmp	r2, #254	; 0xfe
    337e:	d009      	beq.n	3394 <HAL_SPI_RxCpltCallback+0x34>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
			}
		}
		newPluck = 1;
    3380:	2401      	movs	r4, #1
    3382:	4b6b      	ldr	r3, [pc, #428]	; (3530 <HAL_SPI_RxCpltCallback+0x1d0>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    3384:	2200      	movs	r2, #0
    3386:	2102      	movs	r1, #2
		newPluck = 1;
    3388:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    338a:	4867      	ldr	r0, [pc, #412]	; (3528 <HAL_SPI_RxCpltCallback+0x1c8>)
	}
}
    338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    3390:	f003 beb6 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    3394:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    3398:	2afd      	cmp	r2, #253	; 0xfd
    339a:	d1f1      	bne.n	3380 <HAL_SPI_RxCpltCallback+0x20>
			for (int i = 0; i < numStringsThisBoard; i++)
    339c:	4a65      	ldr	r2, [pc, #404]	; (3534 <HAL_SPI_RxCpltCallback+0x1d4>)
    339e:	7811      	ldrb	r1, [r2, #0]
    33a0:	2900      	cmp	r1, #0
    33a2:	d0ed      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33a4:	4a64      	ldr	r2, [pc, #400]	; (3538 <HAL_SPI_RxCpltCallback+0x1d8>)
			for (int i = 0; i < numStringsThisBoard; i++)
    33a6:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33a8:	6814      	ldr	r4, [r2, #0]
    33aa:	6810      	ldr	r0, [r2, #0]
    33ac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    33b0:	f100 000e 	add.w	r0, r0, #14
    33b4:	f894 c01b 	ldrb.w	ip, [r4, #27]
    33b8:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
    33bc:	485f      	ldr	r0, [pc, #380]	; (353c <HAL_SPI_RxCpltCallback+0x1dc>)
    33be:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    33c2:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    33c4:	d0dc      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33c6:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    33c8:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33ca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    33ce:	f894 e01d 	ldrb.w	lr, [r4, #29]
    33d2:	6814      	ldr	r4, [r2, #0]
    33d4:	f104 0c0f 	add.w	ip, r4, #15
    33d8:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
    33dc:	eb04 240e 	add.w	r4, r4, lr, lsl #8
    33e0:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    33e2:	d0cd      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33e4:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    33e6:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    33e8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    33ec:	f894 c01f 	ldrb.w	ip, [r4, #31]
    33f0:	6814      	ldr	r4, [r2, #0]
    33f2:	f104 0410 	add.w	r4, r4, #16
    33f6:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    33fa:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    33fe:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    3400:	d0be      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3402:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    3404:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3406:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    340a:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
    340e:	6814      	ldr	r4, [r2, #0]
    3410:	f104 0411 	add.w	r4, r4, #17
    3414:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3418:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    341c:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    341e:	d0af      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3420:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    3422:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3424:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3428:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23
    342c:	6814      	ldr	r4, [r2, #0]
    342e:	f104 0412 	add.w	r4, r4, #18
    3432:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3436:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    343a:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    343c:	d0a0      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    343e:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    3440:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3442:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3446:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
    344a:	6814      	ldr	r4, [r2, #0]
    344c:	f104 0413 	add.w	r4, r4, #19
    3450:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3454:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3458:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    345a:	d091      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    345c:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    345e:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    3460:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3464:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
    3468:	6814      	ldr	r4, [r2, #0]
    346a:	f104 0414 	add.w	r4, r4, #20
    346e:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3472:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3476:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
    3478:	d082      	beq.n	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    347a:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    347c:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    347e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3482:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    3486:	6814      	ldr	r4, [r2, #0]
    3488:	f104 0415 	add.w	r4, r4, #21
    348c:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3490:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3494:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
    3496:	f43f af73 	beq.w	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    349a:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    349c:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    349e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    34a2:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
    34a6:	6814      	ldr	r4, [r2, #0]
    34a8:	f104 0416 	add.w	r4, r4, #22
    34ac:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    34b0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    34b4:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
    34b6:	f43f af63 	beq.w	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34ba:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    34bc:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34be:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    34c2:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
    34c6:	6814      	ldr	r4, [r2, #0]
    34c8:	f104 0417 	add.w	r4, r4, #23
    34cc:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    34d0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    34d4:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
    34d6:	f43f af53 	beq.w	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34da:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    34dc:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    34e2:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
    34e6:	6814      	ldr	r4, [r2, #0]
    34e8:	f104 0418 	add.w	r4, r4, #24
    34ec:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    34f0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    34f4:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
    34f6:	f43f af43 	beq.w	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34fa:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    34fc:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    34fe:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3502:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    3506:	6814      	ldr	r4, [r2, #0]
    3508:	f104 0419 	add.w	r4, r4, #25
    350c:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
    3510:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    3514:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
    3516:	f43f af33 	beq.w	3380 <HAL_SPI_RxCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    351a:	6813      	ldr	r3, [r2, #0]
    351c:	6813      	ldr	r3, [r2, #0]
    351e:	bf00      	nop
    3520:	2001af08 	.word	0x2001af08
    3524:	20005154 	.word	0x20005154
    3528:	58020800 	.word	0x58020800
    352c:	38000000 	.word	0x38000000
    3530:	200054bc 	.word	0x200054bc
    3534:	20000052 	.word	0x20000052
    3538:	200050b8 	.word	0x200050b8
    353c:	200146d0 	.word	0x200146d0

00003540 <HAL_SPI_RxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	//SCB_InvalidateDCache();
	if (hspi == &hspi6)
    3540:	4b6e      	ldr	r3, [pc, #440]	; (36fc <HAL_SPI_RxHalfCpltCallback+0x1bc>)
	interrupted = 1;
    3542:	2201      	movs	r2, #1
    3544:	496e      	ldr	r1, [pc, #440]	; (3700 <HAL_SPI_RxHalfCpltCallback+0x1c0>)
	if (hspi == &hspi6)
    3546:	4283      	cmp	r3, r0
	interrupted = 1;
    3548:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
    354a:	d000      	beq.n	354e <HAL_SPI_RxHalfCpltCallback+0xe>
    354c:	4770      	bx	lr
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    354e:	2102      	movs	r1, #2
    3550:	486c      	ldr	r0, [pc, #432]	; (3704 <HAL_SPI_RxHalfCpltCallback+0x1c4>)
{
    3552:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    3554:	f003 fdd4 	bl	7100 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    3558:	4b6b      	ldr	r3, [pc, #428]	; (3708 <HAL_SPI_RxHalfCpltCallback+0x1c8>)
    355a:	781a      	ldrb	r2, [r3, #0]
    355c:	2afe      	cmp	r2, #254	; 0xfe
    355e:	d009      	beq.n	3574 <HAL_SPI_RxHalfCpltCallback+0x34>
			{

				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
			}
		}
		newPluck = 1;
    3560:	2401      	movs	r4, #1
    3562:	4b6a      	ldr	r3, [pc, #424]	; (370c <HAL_SPI_RxHalfCpltCallback+0x1cc>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    3564:	2200      	movs	r2, #0
    3566:	2102      	movs	r1, #2
		newPluck = 1;
    3568:	601c      	str	r4, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    356a:	4866      	ldr	r0, [pc, #408]	; (3704 <HAL_SPI_RxHalfCpltCallback+0x1c4>)
	}
}
    356c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    3570:	f003 bdc6 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    3574:	7e5a      	ldrb	r2, [r3, #25]
    3576:	2afd      	cmp	r2, #253	; 0xfd
    3578:	d1f2      	bne.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
			for (int i = 0; i < numStringsThisBoard; i++)
    357a:	4a65      	ldr	r2, [pc, #404]	; (3710 <HAL_SPI_RxHalfCpltCallback+0x1d0>)
    357c:	7811      	ldrb	r1, [r2, #0]
    357e:	2900      	cmp	r1, #0
    3580:	d0ee      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3582:	4a64      	ldr	r2, [pc, #400]	; (3714 <HAL_SPI_RxHalfCpltCallback+0x1d4>)
			for (int i = 0; i < numStringsThisBoard; i++)
    3584:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3586:	6814      	ldr	r4, [r2, #0]
    3588:	6810      	ldr	r0, [r2, #0]
    358a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    358e:	f100 0001 	add.w	r0, r0, #1
    3592:	f894 c001 	ldrb.w	ip, [r4, #1]
    3596:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
    359a:	485f      	ldr	r0, [pc, #380]	; (3718 <HAL_SPI_RxHalfCpltCallback+0x1d8>)
    359c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    35a0:	6004      	str	r4, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    35a2:	d0dd      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35a4:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    35a6:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35a8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    35ac:	f894 e003 	ldrb.w	lr, [r4, #3]
    35b0:	6814      	ldr	r4, [r2, #0]
    35b2:	f104 0c02 	add.w	ip, r4, #2
    35b6:	f813 401c 	ldrb.w	r4, [r3, ip, lsl #1]
    35ba:	eb04 240e 	add.w	r4, r4, lr, lsl #8
    35be:	6044      	str	r4, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    35c0:	d0ce      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35c2:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    35c4:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    35ca:	f894 c005 	ldrb.w	ip, [r4, #5]
    35ce:	6814      	ldr	r4, [r2, #0]
    35d0:	f104 0403 	add.w	r4, r4, #3
    35d4:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    35d8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    35dc:	6084      	str	r4, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    35de:	d0bf      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35e0:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    35e2:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    35e8:	f894 c007 	ldrb.w	ip, [r4, #7]
    35ec:	6814      	ldr	r4, [r2, #0]
    35ee:	f104 0404 	add.w	r4, r4, #4
    35f2:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    35f6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    35fa:	60c4      	str	r4, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    35fc:	d0b0      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    35fe:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    3600:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3602:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3606:	f894 c009 	ldrb.w	ip, [r4, #9]
    360a:	6814      	ldr	r4, [r2, #0]
    360c:	f104 0405 	add.w	r4, r4, #5
    3610:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3614:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3618:	6104      	str	r4, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    361a:	d0a1      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    361c:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    361e:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3620:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3624:	f894 c00b 	ldrb.w	ip, [r4, #11]
    3628:	6814      	ldr	r4, [r2, #0]
    362a:	f104 0406 	add.w	r4, r4, #6
    362e:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3632:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3636:	6144      	str	r4, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    3638:	d092      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    363a:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    363c:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    363e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3642:	f894 c00d 	ldrb.w	ip, [r4, #13]
    3646:	6814      	ldr	r4, [r2, #0]
    3648:	f104 0407 	add.w	r4, r4, #7
    364c:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    3650:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3654:	6184      	str	r4, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
    3656:	d083      	beq.n	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3658:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    365a:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    365c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3660:	f894 c00f 	ldrb.w	ip, [r4, #15]
    3664:	6814      	ldr	r4, [r2, #0]
    3666:	f104 0408 	add.w	r4, r4, #8
    366a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    366e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3672:	61c4      	str	r4, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
    3674:	f43f af74 	beq.w	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3678:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    367a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    367c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    3680:	f894 c011 	ldrb.w	ip, [r4, #17]
    3684:	6814      	ldr	r4, [r2, #0]
    3686:	f104 0409 	add.w	r4, r4, #9
    368a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    368e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    3692:	6204      	str	r4, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
    3694:	f43f af64 	beq.w	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3698:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    369a:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    369c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    36a0:	f894 c013 	ldrb.w	ip, [r4, #19]
    36a4:	6814      	ldr	r4, [r2, #0]
    36a6:	f104 040a 	add.w	r4, r4, #10
    36aa:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    36ae:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    36b2:	6244      	str	r4, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
    36b4:	f43f af54 	beq.w	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    36b8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    36ba:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    36bc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    36c0:	f894 c015 	ldrb.w	ip, [r4, #21]
    36c4:	6814      	ldr	r4, [r2, #0]
    36c6:	f104 040b 	add.w	r4, r4, #11
    36ca:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    36ce:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    36d2:	6284      	str	r4, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
    36d4:	f43f af44 	beq.w	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    36d8:	6814      	ldr	r4, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    36da:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    36dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    36e0:	f894 c017 	ldrb.w	ip, [r4, #23]
    36e4:	6814      	ldr	r4, [r2, #0]
    36e6:	f104 040c 	add.w	r4, r4, #12
    36ea:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
    36ee:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    36f2:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
    36f4:	f43f af34 	beq.w	3560 <HAL_SPI_RxHalfCpltCallback+0x20>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    36f8:	6813      	ldr	r3, [r2, #0]
    36fa:	6813      	ldr	r3, [r2, #0]
    36fc:	2001af08 	.word	0x2001af08
    3700:	20005154 	.word	0x20005154
    3704:	58020800 	.word	0x58020800
    3708:	38000000 	.word	0x38000000
    370c:	200054bc 	.word	0x200054bc
    3710:	20000052 	.word	0x20000052
    3714:	200050b8 	.word	0x200050b8
    3718:	200146d0 	.word	0x200146d0
    371c:	f3af 8000 	nop.w

00003720 <HAL_SPI_TxRxCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
    3720:	2201      	movs	r2, #1
	//SCB_InvalidateDCache();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    3722:	2110      	movs	r1, #16
    3724:	480c      	ldr	r0, [pc, #48]	; (3758 <HAL_SPI_TxRxCpltCallback+0x38>)
{
    3726:	b508      	push	{r3, lr}
	interrupted = 1;
    3728:	4b0c      	ldr	r3, [pc, #48]	; (375c <HAL_SPI_TxRxCpltCallback+0x3c>)
    372a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    372c:	f003 fce8 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    3730:	4b0b      	ldr	r3, [pc, #44]	; (3760 <HAL_SPI_TxRxCpltCallback+0x40>)
    3732:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    3736:	2afe      	cmp	r2, #254	; 0xfe
    3738:	d006      	beq.n	3748 <HAL_SPI_TxRxCpltCallback+0x28>
	{
		handleSPI(LEVER_BUFFER_SIZE);
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    373a:	2200      	movs	r2, #0
    373c:	2110      	movs	r1, #16
    373e:	4806      	ldr	r0, [pc, #24]	; (3758 <HAL_SPI_TxRxCpltCallback+0x38>)
}
    3740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    3744:	f003 bcdc 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    3748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    374c:	2bfd      	cmp	r3, #253	; 0xfd
    374e:	d1f4      	bne.n	373a <HAL_SPI_TxRxCpltCallback+0x1a>
		handleSPI(LEVER_BUFFER_SIZE);
    3750:	2020      	movs	r0, #32
    3752:	f000 f9f5 	bl	3b40 <handleSPI>
    3756:	e7f0      	b.n	373a <HAL_SPI_TxRxCpltCallback+0x1a>
    3758:	58020800 	.word	0x58020800
    375c:	20005154 	.word	0x20005154
    3760:	30000100 	.word	0x30000100
    3764:	f3af 8000 	nop.w
    3768:	f3af 8000 	nop.w
    376c:	f3af 8000 	nop.w
    3770:	f3af 8000 	nop.w
    3774:	f3af 8000 	nop.w
    3778:	f3af 8000 	nop.w
    377c:	f3af 8000 	nop.w

00003780 <HAL_SPI_TxRxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
    3780:	2201      	movs	r2, #1
	//SCB_InvalidateDCache();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    3782:	2110      	movs	r1, #16
    3784:	480b      	ldr	r0, [pc, #44]	; (37b4 <HAL_SPI_TxRxHalfCpltCallback+0x34>)
{
    3786:	b508      	push	{r3, lr}
	interrupted = 1;
    3788:	4b0b      	ldr	r3, [pc, #44]	; (37b8 <HAL_SPI_TxRxHalfCpltCallback+0x38>)
    378a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    378c:	f003 fcb8 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    3790:	4b0a      	ldr	r3, [pc, #40]	; (37bc <HAL_SPI_TxRxHalfCpltCallback+0x3c>)
    3792:	7f9a      	ldrb	r2, [r3, #30]
    3794:	2afe      	cmp	r2, #254	; 0xfe
    3796:	d006      	beq.n	37a6 <HAL_SPI_TxRxHalfCpltCallback+0x26>
	{
		handleSPI(0);
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    3798:	2200      	movs	r2, #0
    379a:	2110      	movs	r1, #16
    379c:	4805      	ldr	r0, [pc, #20]	; (37b4 <HAL_SPI_TxRxHalfCpltCallback+0x34>)
}
    379e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    37a2:	f003 bcad 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    37a6:	7fdb      	ldrb	r3, [r3, #31]
    37a8:	2bfd      	cmp	r3, #253	; 0xfd
    37aa:	d1f5      	bne.n	3798 <HAL_SPI_TxRxHalfCpltCallback+0x18>
		handleSPI(0);
    37ac:	2000      	movs	r0, #0
    37ae:	f000 f9c7 	bl	3b40 <handleSPI>
    37b2:	e7f1      	b.n	3798 <HAL_SPI_TxRxHalfCpltCallback+0x18>
    37b4:	58020800 	.word	0x58020800
    37b8:	20005154 	.word	0x20005154
    37bc:	30000100 	.word	0x30000100

000037c0 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
    37c0:	4b03      	ldr	r3, [pc, #12]	; (37d0 <HAL_SAI_TxCpltCallback+0x10>)
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	b103      	cbz	r3, 37c8 <HAL_SAI_TxCpltCallback+0x8>
		//SCB_InvalidateDCache();
	audioFrame(HALF_BUFFER_SIZE);
}
    37c6:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
    37c8:	2010      	movs	r0, #16
    37ca:	f7fe bed9 	b.w	2580 <audioFrame>
    37ce:	bf00      	nop
    37d0:	200149f0 	.word	0x200149f0
    37d4:	f3af 8000 	nop.w
    37d8:	f3af 8000 	nop.w
    37dc:	f3af 8000 	nop.w

000037e0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
    37e0:	4b02      	ldr	r3, [pc, #8]	; (37ec <HAL_SAI_TxHalfCpltCallback+0xc>)
    37e2:	7818      	ldrb	r0, [r3, #0]
    37e4:	b100      	cbz	r0, 37e8 <HAL_SAI_TxHalfCpltCallback+0x8>
		//SCB_InvalidateDCache();
	audioFrame(0);
}
    37e6:	4770      	bx	lr
	audioFrame(0);
    37e8:	f7fe beca 	b.w	2580 <audioFrame>
    37ec:	200149f0 	.word	0x200149f0
    37f0:	f3af 8000 	nop.w
    37f4:	f3af 8000 	nop.w
    37f8:	f3af 8000 	nop.w
    37fc:	f3af 8000 	nop.w

00003800 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    3800:	4770      	bx	lr
    3802:	bf00      	nop
	...

00003820 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    3820:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    3824:	ed9f 7a03 	vldr	s14, [pc, #12]	; 3834 <scaleOscPitch+0x14>
}
    3828:	eee0 7a07 	vfma.f32	s15, s0, s14
    382c:	eeb0 0a67 	vmov.f32	s0, s15
    3830:	4770      	bx	lr
    3832:	bf00      	nop
    3834:	42400000 	.word	0x42400000
    3838:	f3af 8000 	nop.w
    383c:	f3af 8000 	nop.w

00003840 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    3840:	ed9f 7a04 	vldr	s14, [pc, #16]	; 3854 <scaleOscFine+0x14>
    3844:	eddf 7a04 	vldr	s15, [pc, #16]	; 3858 <scaleOscFine+0x18>
}
    3848:	eee0 7a07 	vfma.f32	s15, s0, s14
    384c:	eeb0 0a67 	vmov.f32	s0, s15
    3850:	4770      	bx	lr
    3852:	bf00      	nop
    3854:	43480000 	.word	0x43480000
    3858:	c2c80000 	.word	0xc2c80000
    385c:	f3af 8000 	nop.w

00003860 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    3860:	ed9f 7a04 	vldr	s14, [pc, #16]	; 3874 <scaleOscFreq+0x14>
    3864:	eddf 7a04 	vldr	s15, [pc, #16]	; 3878 <scaleOscFreq+0x18>
}
    3868:	eee0 7a07 	vfma.f32	s15, s0, s14
    386c:	eeb0 0a67 	vmov.f32	s0, s15
    3870:	4770      	bx	lr
    3872:	bf00      	nop
    3874:	457a0000 	.word	0x457a0000
    3878:	c4fa0000 	.word	0xc4fa0000
    387c:	f3af 8000 	nop.w

00003880 <scaleFilterCutoff>:
	return (input * 127.0f);
    3880:	eddf 7a02 	vldr	s15, [pc, #8]	; 388c <scaleFilterCutoff+0xc>
}
    3884:	ee20 0a27 	vmul.f32	s0, s0, s15
    3888:	4770      	bx	lr
    388a:	bf00      	nop
    388c:	42fe0000 	.word	0x42fe0000
    3890:	f3af 8000 	nop.w
    3894:	f3af 8000 	nop.w
    3898:	f3af 8000 	nop.w
    389c:	f3af 8000 	nop.w

000038a0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    38a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 38b4 <scaleFinalLowpass+0x14>
    38a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 38b8 <scaleFinalLowpass+0x18>
}
    38a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    38ac:	eeb0 0a67 	vmov.f32	s0, s15
    38b0:	4770      	bx	lr
    38b2:	bf00      	nop
    38b4:	428c0000 	.word	0x428c0000
    38b8:	42680000 	.word	0x42680000
    38bc:	f3af 8000 	nop.w

000038c0 <scaleDefault>:
{
    38c0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    38c4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 38d0 <scaleDefault+0x10>
    38c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    38cc:	f002 ba28 	b.w	5d20 <LEAF_clip>
    38d0:	00000000 	.word	0x00000000
    38d4:	f3af 8000 	nop.w
    38d8:	f3af 8000 	nop.w
    38dc:	f3af 8000 	nop.w

000038e0 <scaleTranspose>:
{
    38e0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    38e4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3904 <scaleTranspose+0x24>
    38e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    38ec:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    38ee:	f002 fa17 	bl	5d20 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    38f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 3908 <scaleTranspose+0x28>
    38f6:	eddf 7a05 	vldr	s15, [pc, #20]	; 390c <scaleTranspose+0x2c>
}
    38fa:	eee0 7a07 	vfma.f32	s15, s0, s14
    38fe:	eeb0 0a67 	vmov.f32	s0, s15
    3902:	bd08      	pop	{r3, pc}
    3904:	00000000 	.word	0x00000000
    3908:	42c00000 	.word	0x42c00000
    390c:	c2400000 	.word	0xc2400000
    3910:	f3af 8000 	nop.w
    3914:	f3af 8000 	nop.w
    3918:	f3af 8000 	nop.w
    391c:	f3af 8000 	nop.w

00003920 <scalePitchBend>:
{
    3920:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    3924:	ed9f 0a05 	vldr	s0, [pc, #20]	; 393c <scalePitchBend+0x1c>
    3928:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    392c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    392e:	f002 f9f7 	bl	5d20 <LEAF_clip>
	return (input * 48.0f);
    3932:	eddf 7a03 	vldr	s15, [pc, #12]	; 3940 <scalePitchBend+0x20>
}
    3936:	ee20 0a27 	vmul.f32	s0, s0, s15
    393a:	bd08      	pop	{r3, pc}
    393c:	00000000 	.word	0x00000000
    3940:	42400000 	.word	0x42400000
    3944:	f3af 8000 	nop.w
    3948:	f3af 8000 	nop.w
    394c:	f3af 8000 	nop.w
    3950:	f3af 8000 	nop.w
    3954:	f3af 8000 	nop.w
    3958:	f3af 8000 	nop.w
    395c:	f3af 8000 	nop.w

00003960 <scaleFilterResonance>:
{
    3960:	b510      	push	{r4, lr}
    3962:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    3966:	ed9f 9a21 	vldr	s18, [pc, #132]	; 39ec <scaleFilterResonance+0x8c>
{
    396a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    396e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3972:	eeb0 0a49 	vmov.f32	s0, s18
    3976:	f002 f9d3 	bl	5d20 <LEAF_clip>
    397a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    397e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 39f0 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3982:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 39f4 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    3986:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    398a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    398e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    3992:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3996:	1c63      	adds	r3, r4, #1
    3998:	ee00 3a90 	vmov	s1, r3
    399c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    39a0:	f002 f9be 	bl	5d20 <LEAF_clip>
    39a4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    39a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    39ac:	4b12      	ldr	r3, [pc, #72]	; (39f8 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    39ae:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    39b2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    39b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    39ba:	ee38 8a27 	vadd.f32	s16, s16, s15
    39be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39c2:	edd4 7a00 	vldr	s15, [r4]
    39c6:	eeb0 0a49 	vmov.f32	s0, s18
    39ca:	ed93 7a00 	vldr	s14, [r3]
    39ce:	ee38 8a68 	vsub.f32	s16, s16, s17
    39d2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    39d6:	ee60 0a87 	vmul.f32	s1, s1, s14
    39da:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    39de:	ecbd 8b04 	vpop	{d8-d9}
    39e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    39e6:	f002 b99b 	b.w	5d20 <LEAF_clip>
    39ea:	bf00      	nop
    39ec:	3dcccccd 	.word	0x3dcccccd
    39f0:	44ffe000 	.word	0x44ffe000
    39f4:	00000000 	.word	0x00000000
    39f8:	20018a48 	.word	0x20018a48
    39fc:	f3af 8000 	nop.w

00003a00 <scaleEnvTimes>:
{
    3a00:	b510      	push	{r4, lr}
    3a02:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    3a06:	eddf 8a1d 	vldr	s17, [pc, #116]	; 3a7c <scaleEnvTimes+0x7c>
{
    3a0a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    3a0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3a12:	eeb0 0a68 	vmov.f32	s0, s17
    3a16:	f002 f983 	bl	5d20 <LEAF_clip>
    3a1a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    3a1e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 3a80 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3a22:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    3a26:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    3a2a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    3a2e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    3a32:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3a36:	1c63      	adds	r3, r4, #1
    3a38:	ee00 3a90 	vmov	s1, r3
    3a3c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    3a40:	f002 f96e 	bl	5d20 <LEAF_clip>
    3a44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    3a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3a4c:	4b0d      	ldr	r3, [pc, #52]	; (3a84 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    3a4e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    3a52:	ee10 2a10 	vmov	r2, s0
    3a56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3a5a:	ee38 8a07 	vadd.f32	s16, s16, s14
    3a5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a62:	ed94 7a00 	vldr	s14, [r4]
    3a66:	ed93 0a00 	vldr	s0, [r3]
    3a6a:	ee38 8a68 	vsub.f32	s16, s16, s17
    3a6e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    3a72:	eea7 0a08 	vfma.f32	s0, s14, s16
    3a76:	ecbd 8b02 	vpop	{d8}
    3a7a:	bd10      	pop	{r4, pc}
    3a7c:	00000000 	.word	0x00000000
    3a80:	44ffe000 	.word	0x44ffe000
    3a84:	20014a44 	.word	0x20014a44
    3a88:	f3af 8000 	nop.w
    3a8c:	f3af 8000 	nop.w
    3a90:	f3af 8000 	nop.w
    3a94:	f3af 8000 	nop.w
    3a98:	f3af 8000 	nop.w
    3a9c:	f3af 8000 	nop.w

00003aa0 <scaleLFORates>:
{
    3aa0:	b510      	push	{r4, lr}
    3aa2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    3aa6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 3b1c <scaleLFORates+0x7c>
{
    3aaa:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    3aae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3ab2:	eeb0 0a68 	vmov.f32	s0, s17
    3ab6:	f002 f933 	bl	5d20 <LEAF_clip>
    3aba:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    3abe:	ed9f 1a18 	vldr	s2, [pc, #96]	; 3b20 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3ac2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    3ac6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    3aca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    3ace:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    3ad2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    3ad6:	1c63      	adds	r3, r4, #1
    3ad8:	ee00 3a90 	vmov	s1, r3
    3adc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    3ae0:	f002 f91e 	bl	5d20 <LEAF_clip>
    3ae4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    3ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3aec:	4b0d      	ldr	r3, [pc, #52]	; (3b24 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    3aee:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    3af2:	ee10 2a10 	vmov	r2, s0
    3af6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3afa:	ee38 8a07 	vadd.f32	s16, s16, s14
    3afe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b02:	ed94 7a00 	vldr	s14, [r4]
    3b06:	ed93 0a00 	vldr	s0, [r3]
    3b0a:	ee38 8a68 	vsub.f32	s16, s16, s17
    3b0e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    3b12:	eea7 0a08 	vfma.f32	s0, s14, s16
    3b16:	ecbd 8b02 	vpop	{d8}
    3b1a:	bd10      	pop	{r4, pc}
    3b1c:	00000000 	.word	0x00000000
    3b20:	44ffe000 	.word	0x44ffe000
    3b24:	3003a380 	.word	0x3003a380
    3b28:	f3af 8000 	nop.w
    3b2c:	f3af 8000 	nop.w
    3b30:	f3af 8000 	nop.w
    3b34:	f3af 8000 	nop.w
    3b38:	f3af 8000 	nop.w
    3b3c:	f3af 8000 	nop.w

00003b40 <handleSPI>:
{
    3b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
    3b44:	4bb5      	ldr	r3, [pc, #724]	; (3e1c <handleSPI+0x2dc>)
    3b46:	2201      	movs	r2, #1
	if (SPI_LEVERS[offset] == ReceivingPitches)
    3b48:	4db5      	ldr	r5, [pc, #724]	; (3e20 <handleSPI+0x2e0>)
{
    3b4a:	4604      	mov	r4, r0
    3b4c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
    3b50:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
    3b52:	5c2b      	ldrb	r3, [r5, r0]
    3b54:	4293      	cmp	r3, r2
    3b56:	f000 817f 	beq.w	3e58 <handleSPI+0x318>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
    3b5a:	2b02      	cmp	r3, #2
    3b5c:	f000 8137 	beq.w	3dce <handleSPI+0x28e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
    3b60:	2b03      	cmp	r3, #3
    3b62:	f000 825f 	beq.w	4024 <_Min_Heap_Size+0x24>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
    3b66:	2bfd      	cmp	r3, #253	; 0xfd
    3b68:	f000 8244 	beq.w	3ff4 <handleSPI+0x4b4>
		if (boardNumber == 0)
    3b6c:	4bad      	ldr	r3, [pc, #692]	; (3e24 <handleSPI+0x2e4>)
    3b6e:	781e      	ldrb	r6, [r3, #0]
    3b70:	2e00      	cmp	r6, #0
    3b72:	f040 8122 	bne.w	3dba <handleSPI+0x27a>
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3b76:	1928      	adds	r0, r5, r4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3b78:	4bab      	ldr	r3, [pc, #684]	; (3e28 <handleSPI+0x2e8>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3b7a:	21fd      	movs	r1, #253	; 0xfd
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3b7c:	4dab      	ldr	r5, [pc, #684]	; (3e2c <handleSPI+0x2ec>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3b7e:	781a      	ldrb	r2, [r3, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3b80:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3b84:	7819      	ldrb	r1, [r3, #0]
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3b86:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3b8a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3b8e:	4aa8      	ldr	r2, [pc, #672]	; (3e30 <handleSPI+0x2f0>)
    3b90:	0049      	lsls	r1, r1, #1
    3b92:	5c51      	ldrb	r1, [r2, r1]
    3b94:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3b98:	7819      	ldrb	r1, [r3, #0]
    3b9a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3b9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3ba2:	7849      	ldrb	r1, [r1, #1]
    3ba4:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    3ba8:	7819      	ldrb	r1, [r3, #0]
    3baa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3bb2:	7889      	ldrb	r1, [r1, #2]
    3bb4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    3bb8:	7819      	ldrb	r1, [r3, #0]
    3bba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3bc2:	78c9      	ldrb	r1, [r1, #3]
    3bc4:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    3bc8:	7819      	ldrb	r1, [r3, #0]
    3bca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3bd2:	7909      	ldrb	r1, [r1, #4]
    3bd4:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    3bd8:	7819      	ldrb	r1, [r3, #0]
    3bda:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3be2:	7949      	ldrb	r1, [r1, #5]
    3be4:	f880 1047 	strb.w	r1, [r0, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    3be8:	7819      	ldrb	r1, [r3, #0]
    3bea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3bf2:	7989      	ldrb	r1, [r1, #6]
    3bf4:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    3bf8:	7819      	ldrb	r1, [r3, #0]
    3bfa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3bfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c02:	79c9      	ldrb	r1, [r1, #7]
    3c04:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    3c08:	7819      	ldrb	r1, [r3, #0]
    3c0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3c0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c12:	7a09      	ldrb	r1, [r1, #8]
    3c14:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    3c18:	7819      	ldrb	r1, [r3, #0]
    3c1a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3c1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c22:	7a49      	ldrb	r1, [r1, #9]
    3c24:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3c28:	7819      	ldrb	r1, [r3, #0]
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3c2a:	782f      	ldrb	r7, [r5, #0]
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3c2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3c30:	f880 7050 	strb.w	r7, [r0, #80]	; 0x50
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3c34:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c38:	7a89      	ldrb	r1, [r1, #10]
    3c3a:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    3c3e:	7819      	ldrb	r1, [r3, #0]
    3c40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3c44:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c48:	7ac9      	ldrb	r1, [r1, #11]
    3c4a:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    3c4e:	7819      	ldrb	r1, [r3, #0]
    3c50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3c54:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3c58:	7b09      	ldrb	r1, [r1, #12]
    3c5a:	f880 104e 	strb.w	r1, [r0, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3c5e:	7819      	ldrb	r1, [r3, #0]
    3c60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3c64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3c68:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
			whichMacroToSendName = (whichMacroToSendName + 1);
    3c6c:	3701      	adds	r7, #1
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3c6e:	7b52      	ldrb	r2, [r2, #13]
			whichMacroToSendName = (whichMacroToSendName + 1);
    3c70:	b2ff      	uxtb	r7, r7
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3c72:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3c76:	781a      	ldrb	r2, [r3, #0]
			if (whichMacroToSendName >= 8)
    3c78:	2f07      	cmp	r7, #7
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3c7a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3c7e:	ea4f 1402 	mov.w	r4, r2, lsl #4
    3c82:	4a6c      	ldr	r2, [pc, #432]	; (3e34 <handleSPI+0x2f4>)
    3c84:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3c88:	5d14      	ldrb	r4, [r2, r4]
    3c8a:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    3c8e:	781c      	ldrb	r4, [r3, #0]
    3c90:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3c94:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3c98:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3c9c:	4414      	add	r4, r2
    3c9e:	7864      	ldrb	r4, [r4, #1]
    3ca0:	f880 4052 	strb.w	r4, [r0, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    3ca4:	781c      	ldrb	r4, [r3, #0]
    3ca6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3caa:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3cae:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3cb2:	4414      	add	r4, r2
    3cb4:	78a4      	ldrb	r4, [r4, #2]
    3cb6:	f880 4053 	strb.w	r4, [r0, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    3cba:	781c      	ldrb	r4, [r3, #0]
    3cbc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3cc0:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3cc4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3cc8:	4414      	add	r4, r2
    3cca:	78e4      	ldrb	r4, [r4, #3]
    3ccc:	f880 4054 	strb.w	r4, [r0, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    3cd0:	781c      	ldrb	r4, [r3, #0]
    3cd2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3cd6:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3cda:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3cde:	4414      	add	r4, r2
    3ce0:	7924      	ldrb	r4, [r4, #4]
    3ce2:	f880 4055 	strb.w	r4, [r0, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    3ce6:	781c      	ldrb	r4, [r3, #0]
    3ce8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3cec:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3cf0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3cf4:	4414      	add	r4, r2
    3cf6:	7964      	ldrb	r4, [r4, #5]
    3cf8:	f880 4056 	strb.w	r4, [r0, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    3cfc:	781c      	ldrb	r4, [r3, #0]
    3cfe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d02:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d06:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d0a:	4414      	add	r4, r2
    3d0c:	79a4      	ldrb	r4, [r4, #6]
    3d0e:	f880 4057 	strb.w	r4, [r0, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    3d12:	781c      	ldrb	r4, [r3, #0]
    3d14:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d18:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d1c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d20:	4414      	add	r4, r2
    3d22:	79e4      	ldrb	r4, [r4, #7]
    3d24:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3d28:	781c      	ldrb	r4, [r3, #0]
    3d2a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d2e:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d32:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d36:	4414      	add	r4, r2
    3d38:	7a24      	ldrb	r4, [r4, #8]
    3d3a:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3d3e:	781c      	ldrb	r4, [r3, #0]
    3d40:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d44:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d48:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d4c:	4414      	add	r4, r2
    3d4e:	7a64      	ldrb	r4, [r4, #9]
    3d50:	f880 405a 	strb.w	r4, [r0, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    3d54:	781c      	ldrb	r4, [r3, #0]
    3d56:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d5a:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d5e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d62:	4414      	add	r4, r2
    3d64:	7aa4      	ldrb	r4, [r4, #10]
    3d66:	f880 405b 	strb.w	r4, [r0, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    3d6a:	781c      	ldrb	r4, [r3, #0]
    3d6c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d70:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d74:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d78:	4414      	add	r4, r2
    3d7a:	7ae4      	ldrb	r4, [r4, #11]
    3d7c:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    3d80:	781c      	ldrb	r4, [r3, #0]
    3d82:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d86:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3d8a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    3d8e:	4414      	add	r4, r2
    3d90:	7b24      	ldrb	r4, [r4, #12]
    3d92:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    3d96:	781c      	ldrb	r4, [r3, #0]
    3d98:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3d9c:	ea4f 1404 	mov.w	r4, r4, lsl #4
    3da0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    3da4:	440a      	add	r2, r1
    3da6:	7b52      	ldrb	r2, [r2, #13]
    3da8:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
    3dac:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    3db0:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
    3db4:	f200 8117 	bhi.w	3fe6 <handleSPI+0x4a6>
			whichMacroToSendName = (whichMacroToSendName + 1);
    3db8:	702f      	strb	r7, [r5, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    3dba:	2200      	movs	r2, #0
    3dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3dc0:	481d      	ldr	r0, [pc, #116]	; (3e38 <handleSPI+0x2f8>)
}
    3dc2:	ecbd 8b02 	vpop	{d8}
    3dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    3dca:	f003 b999 	b.w	7100 <__HAL_GPIO_WritePin_veneer>
		 if (writingState != ReceivingPreset)
    3dce:	491b      	ldr	r1, [pc, #108]	; (3e3c <handleSPI+0x2fc>)
    3dd0:	7808      	ldrb	r0, [r1, #0]
    3dd2:	2802      	cmp	r0, #2
    3dd4:	f000 8124 	beq.w	4020 <_Min_Heap_Size+0x20>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    3dd8:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
    3dda:	4919      	ldr	r1, [pc, #100]	; (3e40 <handleSPI+0x300>)
			 audioMasterLevel = 0.0f;
    3ddc:	4b19      	ldr	r3, [pc, #100]	; (3e44 <handleSPI+0x304>)
			 diskBusy = 1;
    3dde:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
    3de0:	2200      	movs	r2, #0
			 bufferPos = 0;
    3de2:	4819      	ldr	r0, [pc, #100]	; (3e48 <handleSPI+0x308>)
			 audioMasterLevel = 0.0f;
    3de4:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
    3de6:	2300      	movs	r3, #0
    3de8:	8003      	strh	r3, [r0, #0]
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    3dea:	192b      	adds	r3, r5, r4
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    3dec:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
    3dee:	4a17      	ldr	r2, [pc, #92]	; (3e4c <handleSPI+0x30c>)
    3df0:	785b      	ldrb	r3, [r3, #1]
    3df2:	4f17      	ldr	r7, [pc, #92]	; (3e50 <handleSPI+0x310>)
    3df4:	7013      	strb	r3, [r2, #0]
		 for (int i = 0; i < 28; i++)
    3df6:	b2f3      	uxtb	r3, r6
    3df8:	4e16      	ldr	r6, [pc, #88]	; (3e54 <handleSPI+0x314>)
    3dfa:	1e59      	subs	r1, r3, #1
    3dfc:	441e      	add	r6, r3
    3dfe:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    3e00:	8803      	ldrh	r3, [r0, #0]
    3e02:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    3e06:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
    3e08:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    3e0a:	f103 0201 	add.w	r2, r3, #1
    3e0e:	f807 c003 	strb.w	ip, [r7, r3]
    3e12:	b293      	uxth	r3, r2
    3e14:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
    3e16:	d1f3      	bne.n	3e00 <handleSPI+0x2c0>
    3e18:	e6a8      	b.n	3b6c <handleSPI+0x2c>
    3e1a:	bf00      	nop
    3e1c:	20016b6d 	.word	0x20016b6d
    3e20:	30000100 	.word	0x30000100
    3e24:	200149b1 	.word	0x200149b1
    3e28:	2001aa49 	.word	0x2001aa49
    3e2c:	2001aa48 	.word	0x2001aa48
    3e30:	3003a000 	.word	0x3003a000
    3e34:	3003c380 	.word	0x3003c380
    3e38:	58020c00 	.word	0x58020c00
    3e3c:	2001aa4a 	.word	0x2001aa4a
    3e40:	200149f0 	.word	0x200149f0
    3e44:	20000744 	.word	0x20000744
    3e48:	200149b2 	.word	0x200149b2
    3e4c:	20018636 	.word	0x20018636
    3e50:	30000180 	.word	0x30000180
    3e54:	3000011b 	.word	0x3000011b
		 for (int i = 0; i < numStringsThisBoard; i++)
    3e58:	4b8a      	ldr	r3, [pc, #552]	; (4084 <_Min_Heap_Size+0x84>)
    3e5a:	7818      	ldrb	r0, [r3, #0]
    3e5c:	2800      	cmp	r0, #0
    3e5e:	f000 80b2 	beq.w	3fc6 <handleSPI+0x486>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3e62:	4989      	ldr	r1, [pc, #548]	; (4088 <_Min_Heap_Size+0x88>)
		 uint8_t currentByte = offset+1;
    3e64:	18a3      	adds	r3, r4, r2
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3e66:	eddf 6a89 	vldr	s13, [pc, #548]	; 408c <_Min_Heap_Size+0x8c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3e6a:	680a      	ldr	r2, [r1, #0]
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3e72:	5cd2      	ldrb	r2, [r2, r3]
    3e74:	0212      	lsls	r2, r2, #8
    3e76:	ee07 2a90 	vmov	s15, r2
    3e7a:	680a      	ldr	r2, [r1, #0]
    3e7c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3e84:	441a      	add	r2, r3
    3e86:	7852      	ldrb	r2, [r2, #1]
    3e88:	ee07 2a90 	vmov	s15, r2
    3e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3e90:	ee77 7a87 	vadd.f32	s15, s15, s14
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3e94:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3e98:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ea0:	dd09      	ble.n	3eb6 <handleSPI+0x376>
    3ea2:	eddf 6a7b 	vldr	s13, [pc, #492]	; 4090 <_Min_Heap_Size+0x90>
    3ea6:	eef4 7a66 	vcmp.f32	s15, s13
    3eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3eae:	d502      	bpl.n	3eb6 <handleSPI+0x376>
				stringMIDIPitches[i] = myPitch;
    3eb0:	4a78      	ldr	r2, [pc, #480]	; (4094 <_Min_Heap_Size+0x94>)
    3eb2:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
    3eb6:	2801      	cmp	r0, #1
    3eb8:	f000 8085 	beq.w	3fc6 <handleSPI+0x486>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3ebc:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3ebe:	eddf 6a73 	vldr	s13, [pc, #460]	; 408c <_Min_Heap_Size+0x8c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3ec2:	3201      	adds	r2, #1
    3ec4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3ec8:	5cd2      	ldrb	r2, [r2, r3]
    3eca:	0212      	lsls	r2, r2, #8
    3ecc:	ee07 2a90 	vmov	s15, r2
    3ed0:	680a      	ldr	r2, [r1, #0]
    3ed2:	3201      	adds	r2, #1
    3ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3ed8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3edc:	441a      	add	r2, r3
    3ede:	7852      	ldrb	r2, [r2, #1]
    3ee0:	ee07 2a90 	vmov	s15, r2
    3ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3eec:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3ef0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ef8:	dd09      	ble.n	3f0e <handleSPI+0x3ce>
    3efa:	eddf 6a65 	vldr	s13, [pc, #404]	; 4090 <_Min_Heap_Size+0x90>
    3efe:	eef4 7a66 	vcmp.f32	s15, s13
    3f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f06:	d502      	bpl.n	3f0e <handleSPI+0x3ce>
				stringMIDIPitches[i] = myPitch;
    3f08:	4a62      	ldr	r2, [pc, #392]	; (4094 <_Min_Heap_Size+0x94>)
    3f0a:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
    3f0e:	2802      	cmp	r0, #2
    3f10:	d059      	beq.n	3fc6 <handleSPI+0x486>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3f12:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3f14:	eddf 6a5d 	vldr	s13, [pc, #372]	; 408c <_Min_Heap_Size+0x8c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3f18:	3202      	adds	r2, #2
    3f1a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f1e:	5cd2      	ldrb	r2, [r2, r3]
    3f20:	0212      	lsls	r2, r2, #8
    3f22:	ee07 2a90 	vmov	s15, r2
    3f26:	680a      	ldr	r2, [r1, #0]
    3f28:	3202      	adds	r2, #2
    3f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3f2e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f32:	441a      	add	r2, r3
    3f34:	7852      	ldrb	r2, [r2, #1]
    3f36:	ee07 2a90 	vmov	s15, r2
    3f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3f42:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3f46:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f4e:	dd09      	ble.n	3f64 <handleSPI+0x424>
    3f50:	eddf 6a4f 	vldr	s13, [pc, #316]	; 4090 <_Min_Heap_Size+0x90>
    3f54:	eef4 7a66 	vcmp.f32	s15, s13
    3f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f5c:	d502      	bpl.n	3f64 <handleSPI+0x424>
				stringMIDIPitches[i] = myPitch;
    3f5e:	4a4d      	ldr	r2, [pc, #308]	; (4094 <_Min_Heap_Size+0x94>)
    3f60:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
    3f64:	2803      	cmp	r0, #3
    3f66:	d02e      	beq.n	3fc6 <handleSPI+0x486>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3f68:	eddf 6a48 	vldr	s13, [pc, #288]	; 408c <_Min_Heap_Size+0x8c>
		 for (int i = 0; i < numStringsThisBoard; i++)
    3f6c:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3f6e:	ed9f 6a48 	vldr	s12, [pc, #288]	; 4090 <_Min_Heap_Size+0x90>
    3f72:	4f48      	ldr	r7, [pc, #288]	; (4094 <_Min_Heap_Size+0x94>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    3f74:	680a      	ldr	r2, [r1, #0]
    3f76:	4432      	add	r2, r6
    3f78:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f7c:	5cd2      	ldrb	r2, [r2, r3]
    3f7e:	0212      	lsls	r2, r2, #8
    3f80:	ee07 2a90 	vmov	s15, r2
    3f84:	680a      	ldr	r2, [r1, #0]
    3f86:	4432      	add	r2, r6
    3f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3f8c:	3601      	adds	r6, #1
    3f8e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f92:	441a      	add	r2, r3
    3f94:	7852      	ldrb	r2, [r2, #1]
    3f96:	ee07 2a90 	vmov	s15, r2
    3f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3fa2:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3fa6:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fae:	dd06      	ble.n	3fbe <handleSPI+0x47e>
    3fb0:	eef4 7a46 	vcmp.f32	s15, s12
    3fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
    3fb8:	bf48      	it	mi
    3fba:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
    3fbe:	42b0      	cmp	r0, r6
    3fc0:	f107 0704 	add.w	r7, r7, #4
    3fc4:	dcd6      	bgt.n	3f74 <handleSPI+0x434>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    3fc6:	2201      	movs	r2, #1
    3fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
    3fcc:	4832      	ldr	r0, [pc, #200]	; (4098 <_Min_Heap_Size+0x98>)
    3fce:	f003 f897 	bl	7100 <__HAL_GPIO_WritePin_veneer>
		 updateStateFromSPIMessage(offset);
    3fd2:	4620      	mov	r0, r4
    3fd4:	f7fc fa14 	bl	400 <updateStateFromSPIMessage>
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    3fd8:	2200      	movs	r2, #0
    3fda:	f44f 7100 	mov.w	r1, #512	; 0x200
    3fde:	482e      	ldr	r0, [pc, #184]	; (4098 <_Min_Heap_Size+0x98>)
    3fe0:	f003 f88e 	bl	7100 <__HAL_GPIO_WritePin_veneer>
    3fe4:	e5c2      	b.n	3b6c <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3fe6:	781a      	ldrb	r2, [r3, #0]
				whichMacroToSendName = 0;
    3fe8:	702e      	strb	r6, [r5, #0]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3fea:	3201      	adds	r2, #1
    3fec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3ff0:	701a      	strb	r2, [r3, #0]
    3ff2:	e6e2      	b.n	3dba <handleSPI+0x27a>
		if(writingState == ReceivingPreset)
    3ff4:	4b29      	ldr	r3, [pc, #164]	; (409c <_Min_Heap_Size+0x9c>)
    3ff6:	781a      	ldrb	r2, [r3, #0]
    3ff8:	2a02      	cmp	r2, #2
    3ffa:	f47f adb7 	bne.w	3b6c <handleSPI+0x2c>
			 writingState = 0;
    3ffe:	2100      	movs	r1, #0
			 presetNumberToLoad = presetNumberToSave;
    4000:	4a27      	ldr	r2, [pc, #156]	; (40a0 <_Min_Heap_Size+0xa0>)
			 writingState = 0;
    4002:	7019      	strb	r1, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
    4004:	7813      	ldrb	r3, [r2, #0]
    4006:	4927      	ldr	r1, [pc, #156]	; (40a4 <_Min_Heap_Size+0xa4>)
			 presetWaitingToParse = bufferPos;
    4008:	4a27      	ldr	r2, [pc, #156]	; (40a8 <_Min_Heap_Size+0xa8>)
			 presetNumberToLoad = presetNumberToSave;
    400a:	b2db      	uxtb	r3, r3
    400c:	700b      	strb	r3, [r1, #0]
			 presetWaitingToParse = bufferPos;
    400e:	8813      	ldrh	r3, [r2, #0]
    4010:	4926      	ldr	r1, [pc, #152]	; (40ac <_Min_Heap_Size+0xac>)
    4012:	b29b      	uxth	r3, r3
    4014:	600b      	str	r3, [r1, #0]
			 presetWaitingToWrite = bufferPos;
    4016:	8813      	ldrh	r3, [r2, #0]
    4018:	4a25      	ldr	r2, [pc, #148]	; (40b0 <_Min_Heap_Size+0xb0>)
    401a:	b29b      	uxth	r3, r3
    401c:	6013      	str	r3, [r2, #0]
    401e:	e5a5      	b.n	3b6c <handleSPI+0x2c>
    4020:	4821      	ldr	r0, [pc, #132]	; (40a8 <_Min_Heap_Size+0xa8>)
    4022:	e6e2      	b.n	3dea <handleSPI+0x2aa>
		 uint8_t currentByte = offset+1;
    4024:	1c47      	adds	r7, r0, #1
    4026:	4e23      	ldr	r6, [pc, #140]	; (40b4 <_Min_Heap_Size+0xb4>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4028:	ed9f 8a23 	vldr	s16, [pc, #140]	; 40b8 <_Min_Heap_Size+0xb8>
    402c:	fa55 f787 	uxtab	r7, r5, r7
    4030:	f106 0830 	add.w	r8, r6, #48	; 0x30
    4034:	f817 3b01 	ldrb.w	r3, [r7], #1
    4038:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
    403a:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    403c:	ee00 3a10 	vmov	s0, r3
    4040:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    4044:	ee20 0a08 	vmul.f32	s0, s0, s16
    4048:	f002 ffbe 	bl	6fc8 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 12; i++)
    404c:	4546      	cmp	r6, r8
    404e:	d1f1      	bne.n	4034 <_Min_Heap_Size+0x34>
			currentByte += 12;
    4050:	f104 070d 	add.w	r7, r4, #13
    4054:	4e19      	ldr	r6, [pc, #100]	; (40bc <_Min_Heap_Size+0xbc>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4056:	ed9f 8a18 	vldr	s16, [pc, #96]	; 40b8 <_Min_Heap_Size+0xb8>
    405a:	b2ff      	uxtb	r7, r7
    405c:	f106 0828 	add.w	r8, r6, #40	; 0x28
    4060:	3f01      	subs	r7, #1
    4062:	442f      	add	r7, r5
    4064:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    4068:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    406a:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    406c:	ee00 3a10 	vmov	s0, r3
    4070:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    4074:	ee20 0a08 	vmul.f32	s0, s0, s16
    4078:	f002 ffa6 	bl	6fc8 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    407c:	4546      	cmp	r6, r8
    407e:	d1f1      	bne.n	4064 <_Min_Heap_Size+0x64>
    4080:	e7a1      	b.n	3fc6 <handleSPI+0x486>
    4082:	bf00      	nop
    4084:	20000052 	.word	0x20000052
    4088:	200050b8 	.word	0x200050b8
    408c:	3b000080 	.word	0x3b000080
    4090:	478bff74 	.word	0x478bff74
    4094:	20014700 	.word	0x20014700
    4098:	58021800 	.word	0x58021800
    409c:	2001aa4a 	.word	0x2001aa4a
    40a0:	20018636 	.word	0x20018636
    40a4:	2000074c 	.word	0x2000074c
    40a8:	200149b2 	.word	0x200149b2
    40ac:	2001863c 	.word	0x2001863c
    40b0:	20018640 	.word	0x20018640
    40b4:	200051f8 	.word	0x200051f8
    40b8:	3b808081 	.word	0x3b808081
    40bc:	200055d8 	.word	0x200055d8

000040c0 <scaleTwo>:
{
    40c0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    40c4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 40d8 <scaleTwo+0x18>
    40c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    40cc:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    40ce:	f001 fe27 	bl	5d20 <LEAF_clip>
}
    40d2:	ee30 0a00 	vadd.f32	s0, s0, s0
    40d6:	bd08      	pop	{r3, pc}
    40d8:	00000000 	.word	0x00000000
    40dc:	f3af 8000 	nop.w

000040e0 <parsePreset>:
{
    40e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40e4:	460b      	mov	r3, r1
    40e6:	b087      	sub	sp, #28
    40e8:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    40ea:	2200      	movs	r2, #0
    40ec:	2101      	movs	r1, #1
    40ee:	48e9      	ldr	r0, [pc, #932]	; (4494 <parsePreset+0x3b4>)
{
    40f0:	461e      	mov	r6, r3
    40f2:	9400      	str	r4, [sp, #0]
    40f4:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    40f6:	f003 f803 	bl	7100 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    40fa:	b672      	cpsid	i
	 presetReady = 0;
    40fc:	2500      	movs	r5, #0
    40fe:	49e6      	ldr	r1, [pc, #920]	; (4498 <parsePreset+0x3b8>)
		presetName[i] = buffer[bufferIndex];
    4100:	4ce6      	ldr	r4, [pc, #920]	; (449c <parsePreset+0x3bc>)
		 audioOutBuffer[i] = 0;
    4102:	2280      	movs	r2, #128	; 0x80
	 presetReady = 0;
    4104:	600d      	str	r5, [r1, #0]
		 audioOutBuffer[i] = 0;
    4106:	4629      	mov	r1, r5
    4108:	48e5      	ldr	r0, [pc, #916]	; (44a0 <parsePreset+0x3c0>)
	audioMasterLevel = 0.0f;
    410a:	f04f 0b00 	mov.w	fp, #0
		 audioOutBuffer[i] = 0;
    410e:	f002 ff83 	bl	7018 <__memset_veneer>
		presetName[i] = buffer[bufferIndex];
    4112:	7921      	ldrb	r1, [r4, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4114:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
    4118:	4be2      	ldr	r3, [pc, #904]	; (44a4 <parsePreset+0x3c4>)
    411a:	9101      	str	r1, [sp, #4]
	audioMasterLevel = 0.0f;
    411c:	49e2      	ldr	r1, [pc, #904]	; (44a8 <parsePreset+0x3c8>)
		presetName[i] = buffer[bufferIndex];
    411e:	f894 a000 	ldrb.w	sl, [r4]
	audioMasterLevel = 0.0f;
    4122:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4126:	ea4f 0b40 	mov.w	fp, r0, lsl #1
    412a:	49e0      	ldr	r1, [pc, #896]	; (44ac <parsePreset+0x3cc>)
    412c:	4adf      	ldr	r2, [pc, #892]	; (44ac <parsePreset+0x3cc>)
		presetName[i] = buffer[bufferIndex];
    412e:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4132:	eb02 0240 	add.w	r2, r2, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
    4136:	f883 a000 	strb.w	sl, [r3]
    413a:	78a7      	ldrb	r7, [r4, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    413c:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
    4140:	78e6      	ldrb	r6, [r4, #3]
    4142:	9901      	ldr	r1, [sp, #4]
    4144:	f894 8001 	ldrb.w	r8, [r4, #1]
    4148:	f8cd c008 	str.w	ip, [sp, #8]
    414c:	f894 c006 	ldrb.w	ip, [r4, #6]
    4150:	f883 8001 	strb.w	r8, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4154:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
    4158:	709f      	strb	r7, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    415a:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
    415c:	70de      	strb	r6, [r3, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    415e:	70d6      	strb	r6, [r2, #3]
		presetName[i] = buffer[bufferIndex];
    4160:	7119      	strb	r1, [r3, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4162:	7111      	strb	r1, [r2, #4]
		presetName[i] = buffer[bufferIndex];
    4164:	9902      	ldr	r1, [sp, #8]
    4166:	f8cd c00c 	str.w	ip, [sp, #12]
    416a:	7159      	strb	r1, [r3, #5]
    416c:	f894 c007 	ldrb.w	ip, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4170:	7151      	strb	r1, [r2, #5]
		presetName[i] = buffer[bufferIndex];
    4172:	9903      	ldr	r1, [sp, #12]
    4174:	f894 9008 	ldrb.w	r9, [r4, #8]
    4178:	f894 e009 	ldrb.w	lr, [r4, #9]
    417c:	7199      	strb	r1, [r3, #6]
    417e:	f8cd c010 	str.w	ip, [sp, #16]
    4182:	f894 c00a 	ldrb.w	ip, [r4, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4186:	7191      	strb	r1, [r2, #6]
		presetName[i] = buffer[bufferIndex];
    4188:	9904      	ldr	r1, [sp, #16]
    418a:	7ae7      	ldrb	r7, [r4, #11]
    418c:	71d9      	strb	r1, [r3, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    418e:	71d1      	strb	r1, [r2, #7]
		presetName[i] = buffer[bufferIndex];
    4190:	f883 9008 	strb.w	r9, [r3, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    4194:	f882 9008 	strb.w	r9, [r2, #8]
		presetName[i] = buffer[bufferIndex];
    4198:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    419c:	f882 e009 	strb.w	lr, [r2, #9]
		presetName[i] = buffer[bufferIndex];
    41a0:	f883 c00a 	strb.w	ip, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    41a4:	f882 c00a 	strb.w	ip, [r2, #10]
		presetName[i] = buffer[bufferIndex];
    41a8:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    41aa:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
    41ac:	7b27      	ldrb	r7, [r4, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    41ae:	49c0      	ldr	r1, [pc, #768]	; (44b0 <parsePreset+0x3d0>)
		presetName[i] = buffer[bufferIndex];
    41b0:	731f      	strb	r7, [r3, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    41b2:	7317      	strb	r7, [r2, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    41b4:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    41b8:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    41ba:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
    41bc:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    41be:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    41c0:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    41c2:	540b      	strb	r3, [r1, r0]
    41c4:	7be3      	ldrb	r3, [r4, #15]
    41c6:	7073      	strb	r3, [r6, #1]
    41c8:	7c23      	ldrb	r3, [r4, #16]
    41ca:	70b3      	strb	r3, [r6, #2]
    41cc:	7c63      	ldrb	r3, [r4, #17]
    41ce:	70f3      	strb	r3, [r6, #3]
    41d0:	7ca3      	ldrb	r3, [r4, #18]
    41d2:	7133      	strb	r3, [r6, #4]
    41d4:	7ce3      	ldrb	r3, [r4, #19]
    41d6:	7173      	strb	r3, [r6, #5]
    41d8:	7d23      	ldrb	r3, [r4, #20]
    41da:	71b3      	strb	r3, [r6, #6]
    41dc:	7d63      	ldrb	r3, [r4, #21]
    41de:	71f3      	strb	r3, [r6, #7]
    41e0:	7da3      	ldrb	r3, [r4, #22]
    41e2:	7233      	strb	r3, [r6, #8]
    41e4:	7de3      	ldrb	r3, [r4, #23]
    41e6:	7273      	strb	r3, [r6, #9]
    41e8:	7e23      	ldrb	r3, [r4, #24]
    41ea:	72b3      	strb	r3, [r6, #10]
    41ec:	7e63      	ldrb	r3, [r4, #25]
    41ee:	72f3      	strb	r3, [r6, #11]
    41f0:	7ea3      	ldrb	r3, [r4, #26]
    41f2:	7333      	strb	r3, [r6, #12]
    41f4:	7ee3      	ldrb	r3, [r4, #27]
    41f6:	7373      	strb	r3, [r6, #13]
    41f8:	7f23      	ldrb	r3, [r4, #28]
    41fa:	73b3      	strb	r3, [r6, #14]
    41fc:	7f63      	ldrb	r3, [r4, #29]
    41fe:	73f3      	strb	r3, [r6, #15]
    4200:	7fa3      	ldrb	r3, [r4, #30]
    4202:	7433      	strb	r3, [r6, #16]
    4204:	7fe3      	ldrb	r3, [r4, #31]
    4206:	7473      	strb	r3, [r6, #17]
    4208:	f894 3020 	ldrb.w	r3, [r4, #32]
    420c:	74b3      	strb	r3, [r6, #18]
    420e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    4212:	74f3      	strb	r3, [r6, #19]
    4214:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    4218:	7533      	strb	r3, [r6, #20]
    421a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    421e:	7573      	strb	r3, [r6, #21]
    4220:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4224:	75b3      	strb	r3, [r6, #22]
    4226:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    422a:	75f3      	strb	r3, [r6, #23]
    422c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    4230:	7633      	strb	r3, [r6, #24]
    4232:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    4236:	7673      	strb	r3, [r6, #25]
    4238:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    423c:	76b3      	strb	r3, [r6, #26]
    423e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4242:	76f3      	strb	r3, [r6, #27]
    4244:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    4248:	7733      	strb	r3, [r6, #28]
    424a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    424e:	7773      	strb	r3, [r6, #29]
    4250:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    4254:	77b3      	strb	r3, [r6, #30]
    4256:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    425a:	77f3      	strb	r3, [r6, #31]
    425c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4260:	f886 3020 	strb.w	r3, [r6, #32]
    4264:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    4268:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    426c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4270:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
    4274:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    4278:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
    427c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    4280:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    4284:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4288:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
    428c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    4290:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
    4294:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    4298:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
    429c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    42a0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
    42a4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    42a8:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
    42ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    42b0:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
    42b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    42b8:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
    42bc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    42c0:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    42c4:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
    42c8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    42cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    42d0:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    42d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    42d8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    42dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    42e0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    42e4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    42e8:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
    42ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    42f0:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
    42f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    42f8:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
    42fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    4300:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    4304:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    4308:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    430c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4310:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    4314:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4318:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    431c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    4320:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
    4324:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    4328:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    432c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    4330:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
    4334:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    4338:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
    433c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    4340:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
    4344:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    4348:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    434c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    4350:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
    4354:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
    4358:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
    435c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    4360:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    4364:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    4368:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    436c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    4370:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
    4374:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    4378:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
    437c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
    4380:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
    4384:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
    4388:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
    438c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    4390:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
    4394:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    4398:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
    439c:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    43a0:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
    43a4:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    43a8:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
    43ac:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    43b0:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
    43b4:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    43b8:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
    43bc:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    43c0:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
    43c4:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    43c8:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
    43cc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    43d0:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
    43d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    43d8:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
    43dc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    43e0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
    43e4:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    43e8:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
    43ec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    43f0:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
    43f4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    43f8:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
    43fc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    4400:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
    4404:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
    4408:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
    440c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    4410:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
    4414:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    4418:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
    441c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    4420:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
    4424:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    4428:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
    442c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    4430:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
    4434:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    4438:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
    443c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    4440:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
    4444:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    4448:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
    444c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    4450:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
    4454:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    4458:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
    445c:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
    4460:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
    4464:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
    4468:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
    446c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    4470:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
    4474:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
    4478:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
    447c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    4480:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
    4484:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
    4488:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
    448c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    4490:	e010      	b.n	44b4 <parsePreset+0x3d4>
    4492:	bf00      	nop
    4494:	58020000 	.word	0x58020000
    4498:	20005618 	.word	0x20005618
    449c:	30000180 	.word	0x30000180
    44a0:	30000000 	.word	0x30000000
    44a4:	20018628 	.word	0x20018628
    44a8:	20000744 	.word	0x20000744
    44ac:	3003a000 	.word	0x3003a000
    44b0:	3003c380 	.word	0x3003c380
    44b4:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
    44b8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    44bc:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    44c0:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
    44c4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    44c8:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
    44cc:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
    44d0:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
    44d4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    44d8:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
    44dc:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    44e0:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    44e4:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    44e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    44ec:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
    44f0:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    44f4:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    44f6:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
    44fa:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
    44fe:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
    4502:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
    4506:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
    450a:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
    450e:	9a00      	ldr	r2, [sp, #0]
    4510:	4293      	cmp	r3, r2
    4512:	dc0d      	bgt.n	4530 <parsePreset+0x450>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    4514:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
    4518:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    451c:	005f      	lsls	r7, r3, #1
    451e:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
    4522:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
    4526:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
    452a:	b292      	uxth	r2, r2
    452c:	4282      	cmp	r2, r0
    452e:	d00c      	beq.n	454a <parsePreset+0x46a>
		audioMasterLevel = 1.0f;
    4530:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    4534:	4ac4      	ldr	r2, [pc, #784]	; (4848 <parsePreset+0x768>)
		audioMasterLevel = 1.0f;
    4536:	49c5      	ldr	r1, [pc, #788]	; (484c <parsePreset+0x76c>)
    4538:	600b      	str	r3, [r1, #0]
		 presetReady = 1;
    453a:	2301      	movs	r3, #1
		presetWaitingToParse = 0;
    453c:	6015      	str	r5, [r2, #0]
		 presetReady = 1;
    453e:	4ac4      	ldr	r2, [pc, #784]	; (4850 <parsePreset+0x770>)
    4540:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    4542:	b662      	cpsie	i
}
    4544:	b007      	add	sp, #28
    4546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    454a:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    454e:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    4550:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    4554:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    4558:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
    455c:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    4560:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
    4564:	b280      	uxth	r0, r0
    4566:	4401      	add	r1, r0
    4568:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
    456a:	9800      	ldr	r0, [sp, #0]
    456c:	b289      	uxth	r1, r1
    456e:	4281      	cmp	r1, r0
    4570:	dcde      	bgt.n	4530 <parsePreset+0x450>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    4572:	1866      	adds	r6, r4, r1
    4574:	5c60      	ldrb	r0, [r4, r1]
    4576:	7871      	ldrb	r1, [r6, #1]
    4578:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    457c:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    4580:	b289      	uxth	r1, r1
    4582:	4281      	cmp	r1, r0
    4584:	d1d4      	bne.n	4530 <parsePreset+0x450>
	for (int i = 0; i < paramCount; i++)
    4586:	2b00      	cmp	r3, #0
    4588:	f001 81b4 	beq.w	58f4 <parsePreset+0x1814>
    458c:	48b1      	ldr	r0, [pc, #708]	; (4854 <parsePreset+0x774>)
    458e:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    4590:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 4858 <parsePreset+0x778>
	bufferIndex = bufferIndex + 2;
    4594:	2180      	movs	r1, #128	; 0x80
    4596:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
    4598:	4606      	mov	r6, r0
    459a:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    459c:	1c4a      	adds	r2, r1, #1
    459e:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
    45a2:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
    45a4:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    45a6:	b292      	uxth	r2, r2
		bufferIndex += 2;
    45a8:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    45aa:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
    45ac:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    45ae:	eb02 220c 	add.w	r2, r2, ip, lsl #8
    45b2:	ee07 2a90 	vmov	s15, r2
    45b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    45ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    45be:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
    45c2:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    45c6:	d1e9      	bne.n	459c <parsePreset+0x4bc>
    45c8:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
    45cc:	4aa1      	ldr	r2, [pc, #644]	; (4854 <parsePreset+0x774>)
    45ce:	49a3      	ldr	r1, [pc, #652]	; (485c <parsePreset+0x77c>)
    45d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
    45d4:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    45d6:	321c      	adds	r2, #28
    45d8:	42aa      	cmp	r2, r5
    45da:	d1fb      	bne.n	45d4 <parsePreset+0x4f4>
    45dc:	4aa0      	ldr	r2, [pc, #640]	; (4860 <parsePreset+0x780>)
		params[i].scaleFunc = &scaleDefault;
    45de:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    45e0:	301c      	adds	r0, #28
    45e2:	42a8      	cmp	r0, r5
    45e4:	d1fb      	bne.n	45de <parsePreset+0x4fe>
	bufferIndex += 2;
    45e6:	ea4f 0843 	mov.w	r8, r3, lsl #1
    45ea:	f108 0884 	add.w	r8, r8, #132	; 0x84
    45ee:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
    45f2:	2b9a      	cmp	r3, #154	; 0x9a
    45f4:	f301 817b 	bgt.w	58ee <parsePreset+0x180e>
    45f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    45fc:	4d99      	ldr	r5, [pc, #612]	; (4864 <parsePreset+0x784>)
    45fe:	4997      	ldr	r1, [pc, #604]	; (485c <parsePreset+0x77c>)
			params[i].zeroToOneVal[v] = 0.0f;
    4600:	2000      	movs	r0, #0
    4602:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4606:	4a96      	ldr	r2, [pc, #600]	; (4860 <parsePreset+0x780>)
    4608:	6018      	str	r0, [r3, #0]
    460a:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
    460c:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    4610:	331c      	adds	r3, #28
    4612:	42ab      	cmp	r3, r5
    4614:	d1f8      	bne.n	4608 <parsePreset+0x528>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    4616:	4b94      	ldr	r3, [pc, #592]	; (4868 <parsePreset+0x788>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4618:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
    461c:	4993      	ldr	r1, [pc, #588]	; (486c <parsePreset+0x78c>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    461e:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    4622:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    4626:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    462a:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    462e:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    4632:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    4636:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    463a:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    463e:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    4642:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    4646:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    464a:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    464e:	4b88      	ldr	r3, [pc, #544]	; (4870 <parsePreset+0x790>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    4650:	4a88      	ldr	r2, [pc, #544]	; (4874 <parsePreset+0x794>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    4652:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    4656:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    465a:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    465e:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    4662:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    4666:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    466a:	4b83      	ldr	r3, [pc, #524]	; (4878 <parsePreset+0x798>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    466c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 48ac <parsePreset+0x7cc>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    4670:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    4674:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    4678:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    467c:	4b7f      	ldr	r3, [pc, #508]	; (487c <parsePreset+0x79c>)
	params[Transpose].scaleFunc = &scaleTranspose;
    467e:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    4682:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    4686:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    468a:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    468e:	4b7c      	ldr	r3, [pc, #496]	; (4880 <parsePreset+0x7a0>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    4690:	497c      	ldr	r1, [pc, #496]	; (4884 <parsePreset+0x7a4>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    4692:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    4696:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    469a:	4b7b      	ldr	r3, [pc, #492]	; (4888 <parsePreset+0x7a8>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    469c:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    46a0:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    46a4:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    46a8:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    46ac:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    46b0:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    46b4:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    46b8:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
    46bc:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    46c0:	4a72      	ldr	r2, [pc, #456]	; (488c <parsePreset+0x7ac>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    46c2:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    46c6:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    46ca:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    46ce:	fef8 7a67 	vrinta.f32	s15, s15
    46d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    46d6:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    46da:	f89d 2000 	ldrb.w	r2, [sp]
    46de:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    46e0:	4a6b      	ldr	r2, [pc, #428]	; (4890 <parsePreset+0x7b0>)
    46e2:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    46e6:	bf88      	it	hi
    46e8:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    46ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    46f0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    46f4:	fef8 7a67 	vrinta.f32	s15, s15
    46f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    46fc:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    4700:	f89d 2000 	ldrb.w	r2, [sp]
    4704:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4706:	4a63      	ldr	r2, [pc, #396]	; (4894 <parsePreset+0x7b4>)
    4708:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    470c:	bf88      	it	hi
    470e:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4712:	ee67 7a87 	vmul.f32	s15, s15, s14
    4716:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    471a:	fef8 7a67 	vrinta.f32	s15, s15
    471e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4722:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    4726:	f89d 2000 	ldrb.w	r2, [sp]
    472a:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    472c:	4a5a      	ldr	r2, [pc, #360]	; (4898 <parsePreset+0x7b8>)
    472e:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    4732:	bf88      	it	hi
    4734:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4738:	ee67 7a87 	vmul.f32	s15, s15, s14
    473c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    4740:	fef8 7a67 	vrinta.f32	s15, s15
    4744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4748:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    474c:	f89d 2000 	ldrb.w	r2, [sp]
    4750:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4752:	4a52      	ldr	r2, [pc, #328]	; (489c <parsePreset+0x7bc>)
    4754:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    4758:	bf88      	it	hi
    475a:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    475e:	ee67 7a87 	vmul.f32	s15, s15, s14
    4762:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    4766:	fef8 7a67 	vrinta.f32	s15, s15
    476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    476e:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    4772:	f89d 2000 	ldrb.w	r2, [sp]
    4776:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4778:	4a49      	ldr	r2, [pc, #292]	; (48a0 <parsePreset+0x7c0>)
    477a:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    477e:	bf88      	it	hi
    4780:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    4784:	ee67 7a87 	vmul.f32	s15, s15, s14
    4788:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    478c:	fef8 7a67 	vrinta.f32	s15, s15
    4790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4794:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    4798:	f89d 2000 	ldrb.w	r2, [sp]
    479c:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    479e:	4a41      	ldr	r2, [pc, #260]	; (48a4 <parsePreset+0x7c4>)
    47a0:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    47a4:	bf88      	it	hi
    47a6:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    47aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    47ae:	fef8 7a67 	vrinta.f32	s15, s15
    47b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    47b6:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    47ba:	f89d 2000 	ldrb.w	r2, [sp]
    47be:	2a0b      	cmp	r2, #11
    47c0:	d901      	bls.n	47c6 <parsePreset+0x6e6>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    47c2:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    47c6:	4a38      	ldr	r2, [pc, #224]	; (48a8 <parsePreset+0x7c8>)
    47c8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    47cc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4854 <parsePreset+0x774>
    47d0:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
    47d4:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
    47d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    47da:	fef8 7a67 	vrinta.f32	s15, s15
    47de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    47e2:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
    47e6:	f89d 2000 	ldrb.w	r2, [sp]
    47ea:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    47ec:	bf88      	it	hi
    47ee:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
    47f2:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    47f4:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    47f6:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    47f8:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
    47fc:	4798      	blx	r3
    47fe:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    4802:	42af      	cmp	r7, r5
    4804:	d1f6      	bne.n	47f4 <parsePreset+0x714>
    4806:	4f13      	ldr	r7, [pc, #76]	; (4854 <parsePreset+0x774>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    4808:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    480a:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    480c:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
    4810:	4798      	blx	r3
    4812:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    4816:	42af      	cmp	r7, r5
    4818:	d1f6      	bne.n	4808 <parsePreset+0x728>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    481a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    481e:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
    4822:	ee67 7a87 	vmul.f32	s15, s15, s14
    4826:	fef8 7a67 	vrinta.f32	s15, s15
    482a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    482e:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    4832:	2b06      	cmp	r3, #6
    4834:	d83f      	bhi.n	48b6 <parsePreset+0x7d6>
    4836:	e8df f013 	tbh	[pc, r3, lsl #1]
    483a:	003b      	.short	0x003b
    483c:	0827082c 	.word	0x0827082c
    4840:	081d0822 	.word	0x081d0822
    4844:	08130818 	.word	0x08130818
    4848:	2001863c 	.word	0x2001863c
    484c:	20000744 	.word	0x20000744
    4850:	20005618 	.word	0x20005618
    4854:	20017534 	.word	0x20017534
    4858:	377ffff6 	.word	0x377ffff6
    485c:	240031b9 	.word	0x240031b9
    4860:	000038c1 	.word	0x000038c1
    4864:	20018628 	.word	0x20018628
    4868:	00003a01 	.word	0x00003a01
    486c:	000038e1 	.word	0x000038e1
    4870:	00003821 	.word	0x00003821
    4874:	00003aa1 	.word	0x00003aa1
    4878:	00003841 	.word	0x00003841
    487c:	00003861 	.word	0x00003861
    4880:	00003881 	.word	0x00003881
    4884:	00003921 	.word	0x00003921
    4888:	00003961 	.word	0x00003961
    488c:	000038a1 	.word	0x000038a1
    4890:	20017c24 	.word	0x20017c24
    4894:	20017d00 	.word	0x20017d00
    4898:	20017d04 	.word	0x20017d04
    489c:	20017de0 	.word	0x20017de0
    48a0:	20017de4 	.word	0x20017de4
    48a4:	20017ec0 	.word	0x20017ec0
    48a8:	20017ec4 	.word	0x20017ec4
    48ac:	20018534 	.word	0x20018534
				  shapeTick[i] = &sawSquareTick;
    48b0:	4b8e      	ldr	r3, [pc, #568]	; (4aec <parsePreset+0xa0c>)
    48b2:	4a8f      	ldr	r2, [pc, #572]	; (4af0 <parsePreset+0xa10>)
    48b4:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    48b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    48ba:	4b8e      	ldr	r3, [pc, #568]	; (4af4 <parsePreset+0xa14>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    48bc:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    48c0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    48c4:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    48c8:	edd3 7a00 	vldr	s15, [r3]
    48cc:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    48d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    48d4:	fef8 7a67 	vrinta.f32	s15, s15
    48d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
    48dc:	bfcc      	ite	gt
    48de:	2301      	movgt	r3, #1
    48e0:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    48e2:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    48e6:	2a06      	cmp	r2, #6
    48e8:	d80b      	bhi.n	4902 <parsePreset+0x822>
    48ea:	e8df f012 	tbh	[pc, r2, lsl #1]
    48ee:	0007      	.short	0x0007
    48f0:	07af07b4 	.word	0x07af07b4
    48f4:	07a507aa 	.word	0x07a507aa
    48f8:	079b07a0 	.word	0x079b07a0
				  shapeTick[i] = &sawSquareTick;
    48fc:	4a7b      	ldr	r2, [pc, #492]	; (4aec <parsePreset+0xa0c>)
    48fe:	497c      	ldr	r1, [pc, #496]	; (4af0 <parsePreset+0xa10>)
    4900:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    4902:	4a7d      	ldr	r2, [pc, #500]	; (4af8 <parsePreset+0xa18>)
    4904:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4908:	ed92 7a00 	vldr	s14, [r2]
    490c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4914:	dd01      	ble.n	491a <parsePreset+0x83a>
			enabledCount++;
    4916:	3301      	adds	r3, #1
    4918:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    491a:	4a78      	ldr	r2, [pc, #480]	; (4afc <parsePreset+0xa1c>)
    491c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    4920:	edd2 7a00 	vldr	s15, [r2]
    4924:	ee67 7a87 	vmul.f32	s15, s15, s14
    4928:	fef8 7a67 	vrinta.f32	s15, s15
    492c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4930:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    4934:	2a06      	cmp	r2, #6
    4936:	d80b      	bhi.n	4950 <parsePreset+0x870>
    4938:	e8df f012 	tbh	[pc, r2, lsl #1]
    493c:	076f0007 	.word	0x076f0007
    4940:	0765076a 	.word	0x0765076a
    4944:	075b0760 	.word	0x075b0760
    4948:	0756      	.short	0x0756
				  shapeTick[i] = &sawSquareTick;
    494a:	4a68      	ldr	r2, [pc, #416]	; (4aec <parsePreset+0xa0c>)
    494c:	4968      	ldr	r1, [pc, #416]	; (4af0 <parsePreset+0xa10>)
    494e:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    4950:	4a6b      	ldr	r2, [pc, #428]	; (4b00 <parsePreset+0xa20>)
    4952:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4956:	ed92 7a00 	vldr	s14, [r2]
    495a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4962:	dd01      	ble.n	4968 <parsePreset+0x888>
			enabledCount++;
    4964:	3301      	adds	r3, #1
    4966:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    4968:	4a66      	ldr	r2, [pc, #408]	; (4b04 <parsePreset+0xa24>)
    496a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    496e:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    4972:	4a65      	ldr	r2, [pc, #404]	; (4b08 <parsePreset+0xa28>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    4974:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
    4978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    497c:	4a63      	ldr	r2, [pc, #396]	; (4b0c <parsePreset+0xa2c>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    497e:	fef8 7a67 	vrinta.f32	s15, s15
    4982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    4986:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    4988:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    498c:	6011      	str	r1, [r2, #0]
		switch (filterType)
    498e:	4960      	ldr	r1, [pc, #384]	; (4b10 <parsePreset+0xa30>)
    4990:	2b08      	cmp	r3, #8
    4992:	d811      	bhi.n	49b8 <parsePreset+0x8d8>
    4994:	e8df f013 	tbh	[pc, r3, lsl #1]
    4998:	071f0009 	.word	0x071f0009
    499c:	070d0716 	.word	0x070d0716
    49a0:	06fb0704 	.word	0x06fb0704
    49a4:	06e906f2 	.word	0x06e906f2
    49a8:	06e0      	.short	0x06e0
				  filterTick[i] = &lowpassTick;
    49aa:	4b5a      	ldr	r3, [pc, #360]	; (4b14 <parsePreset+0xa34>)
    49ac:	4a5a      	ldr	r2, [pc, #360]	; (4b18 <parsePreset+0xa38>)
    49ae:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
    49b0:	4b5a      	ldr	r3, [pc, #360]	; (4b1c <parsePreset+0xa3c>)
    49b2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
    49b4:	4b5a      	ldr	r3, [pc, #360]	; (4b20 <parsePreset+0xa40>)
    49b6:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    49b8:	4b5a      	ldr	r3, [pc, #360]	; (4b24 <parsePreset+0xa44>)
    49ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    49be:	edd3 7a00 	vldr	s15, [r3]
    49c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    49c6:	fef8 7a67 	vrinta.f32	s15, s15
    49ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    49ce:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
    49d2:	2b08      	cmp	r3, #8
    49d4:	d811      	bhi.n	49fa <parsePreset+0x91a>
    49d6:	e8df f013 	tbh	[pc, r3, lsl #1]
    49da:	0009      	.short	0x0009
    49dc:	06ad06b6 	.word	0x06ad06b6
    49e0:	069b06a4 	.word	0x069b06a4
    49e4:	06890692 	.word	0x06890692
    49e8:	06770680 	.word	0x06770680
				  filterTick[i] = &lowpassTick;
    49ec:	4b49      	ldr	r3, [pc, #292]	; (4b14 <parsePreset+0xa34>)
    49ee:	4a4a      	ldr	r2, [pc, #296]	; (4b18 <parsePreset+0xa38>)
    49f0:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
    49f2:	4b4a      	ldr	r3, [pc, #296]	; (4b1c <parsePreset+0xa3c>)
    49f4:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
    49f6:	4b4a      	ldr	r3, [pc, #296]	; (4b20 <parsePreset+0xa40>)
    49f8:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    49fa:	4b4b      	ldr	r3, [pc, #300]	; (4b28 <parsePreset+0xa48>)
    49fc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4a00:	edd3 7a00 	vldr	s15, [r3]
    4a04:	ee67 7a87 	vmul.f32	s15, s15, s14
    4a08:	fef8 7a67 	vrinta.f32	s15, s15
    4a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4a10:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    4a14:	2b05      	cmp	r3, #5
    4a16:	f200 87ea 	bhi.w	59ee <parsePreset+0x190e>
    4a1a:	e8df f013 	tbh	[pc, r3, lsl #1]
    4a1e:	0649      	.short	0x0649
    4a20:	05d7063d 	.word	0x05d7063d
    4a24:	05bf05cb 	.word	0x05bf05cb
    4a28:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    4a2a:	4b40      	ldr	r3, [pc, #256]	; (4b2c <parsePreset+0xa4c>)
    4a2c:	4840      	ldr	r0, [pc, #256]	; (4b30 <parsePreset+0xa50>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
    4a2e:	4a41      	ldr	r2, [pc, #260]	; (4b34 <parsePreset+0xa54>)
				lfoShapeTick[i] = &lfoPulseTick;
    4a30:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    4a32:	4b41      	ldr	r3, [pc, #260]	; (4b38 <parsePreset+0xa58>)
    4a34:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    4a36:	4b41      	ldr	r3, [pc, #260]	; (4b3c <parsePreset+0xa5c>)
    4a38:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    4a3a:	4b41      	ldr	r3, [pc, #260]	; (4b40 <parsePreset+0xa60>)
    4a3c:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    4a3e:	4b41      	ldr	r3, [pc, #260]	; (4b44 <parsePreset+0xa64>)
    4a40:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4a44:	edd3 7a00 	vldr	s15, [r3]
    4a48:	ee67 7a87 	vmul.f32	s15, s15, s14
    4a4c:	fef8 7a67 	vrinta.f32	s15, s15
    4a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4a54:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    4a58:	2b05      	cmp	r3, #5
    4a5a:	d810      	bhi.n	4a7e <parsePreset+0x99e>
    4a5c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4a60:	05880593 	.word	0x05880593
    4a64:	0572057d 	.word	0x0572057d
    4a68:	0006055c 	.word	0x0006055c
				lfoShapeTick[i] = &lfoPulseTick;
    4a6c:	4b2f      	ldr	r3, [pc, #188]	; (4b2c <parsePreset+0xa4c>)
    4a6e:	4830      	ldr	r0, [pc, #192]	; (4b30 <parsePreset+0xa50>)
    4a70:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    4a72:	4b31      	ldr	r3, [pc, #196]	; (4b38 <parsePreset+0xa58>)
    4a74:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    4a76:	4b31      	ldr	r3, [pc, #196]	; (4b3c <parsePreset+0xa5c>)
    4a78:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    4a7a:	4b31      	ldr	r3, [pc, #196]	; (4b40 <parsePreset+0xa60>)
    4a7c:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    4a7e:	4b32      	ldr	r3, [pc, #200]	; (4b48 <parsePreset+0xa68>)
    4a80:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4a84:	edd3 7a00 	vldr	s15, [r3]
    4a88:	ee67 7a87 	vmul.f32	s15, s15, s14
    4a8c:	fef8 7a67 	vrinta.f32	s15, s15
    4a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4a94:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    4a98:	2b05      	cmp	r3, #5
    4a9a:	d810      	bhi.n	4abe <parsePreset+0x9de>
    4a9c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4aa0:	05310547 	.word	0x05310547
    4aa4:	051b0526 	.word	0x051b0526
    4aa8:	000604fa 	.word	0x000604fa
				lfoShapeTick[i] = &lfoPulseTick;
    4aac:	4b1f      	ldr	r3, [pc, #124]	; (4b2c <parsePreset+0xa4c>)
    4aae:	4820      	ldr	r0, [pc, #128]	; (4b30 <parsePreset+0xa50>)
    4ab0:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    4ab2:	4b21      	ldr	r3, [pc, #132]	; (4b38 <parsePreset+0xa58>)
    4ab4:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    4ab6:	4b21      	ldr	r3, [pc, #132]	; (4b3c <parsePreset+0xa5c>)
    4ab8:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    4aba:	4b21      	ldr	r3, [pc, #132]	; (4b40 <parsePreset+0xa60>)
    4abc:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    4abe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4ac2:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
    4ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
    4aca:	fef8 7a67 	vrinta.f32	s15, s15
    4ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4ad2:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    4ad6:	2b05      	cmp	r3, #5
    4ad8:	d841      	bhi.n	4b5e <parsePreset+0xa7e>
    4ada:	e8df f013 	tbh	[pc, r3, lsl #1]
    4ade:	04f1      	.short	0x04f1
    4ae0:	04d004e6 	.word	0x04d004e6
    4ae4:	04ba04c5 	.word	0x04ba04c5
    4ae8:	0037      	.short	0x0037
    4aea:	bf00      	nop
    4aec:	20005ae4 	.word	0x20005ae4
    4af0:	00000781 	.word	0x00000781
    4af4:	20017a7c 	.word	0x20017a7c
    4af8:	20017948 	.word	0x20017948
    4afc:	20017be8 	.word	0x20017be8
    4b00:	20017ab4 	.word	0x20017ab4
    4b04:	20017fbc 	.word	0x20017fbc
    4b08:	20000058 	.word	0x20000058
    4b0c:	20000054 	.word	0x20000054
    4b10:	20016a44 	.word	0x20016a44
    4b14:	200050a0 	.word	0x200050a0
    4b18:	00000c61 	.word	0x00000c61
    4b1c:	00001041 	.word	0x00001041
    4b20:	00001161 	.word	0x00001161
    4b24:	20018064 	.word	0x20018064
    4b28:	20018400 	.word	0x20018400
    4b2c:	200052e0 	.word	0x200052e0
    4b30:	24001d89 	.word	0x24001d89
    4b34:	20016b70 	.word	0x20016b70
    4b38:	24001e09 	.word	0x24001e09
    4b3c:	24001ec9 	.word	0x24001ec9
    4b40:	24001e81 	.word	0x24001e81
    4b44:	2001848c 	.word	0x2001848c
    4b48:	20018518 	.word	0x20018518
				lfoShapeTick[i] = &lfoPulseTick;
    4b4c:	4b8e      	ldr	r3, [pc, #568]	; (4d88 <parsePreset+0xca8>)
    4b4e:	488f      	ldr	r0, [pc, #572]	; (4d8c <parsePreset+0xcac>)
    4b50:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    4b52:	4b8f      	ldr	r3, [pc, #572]	; (4d90 <parsePreset+0xcb0>)
    4b54:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
    4b56:	4b8f      	ldr	r3, [pc, #572]	; (4d94 <parsePreset+0xcb4>)
    4b58:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    4b5a:	4b8f      	ldr	r3, [pc, #572]	; (4d98 <parsePreset+0xcb8>)
    4b5c:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
    4b5e:	2304      	movs	r3, #4
    4b60:	4f8e      	ldr	r7, [pc, #568]	; (4d9c <parsePreset+0xcbc>)
    4b62:	4d8f      	ldr	r5, [pc, #572]	; (4da0 <parsePreset+0xcc0>)
    4b64:	9301      	str	r3, [sp, #4]
    4b66:	463b      	mov	r3, r7
    4b68:	f8df e290 	ldr.w	lr, [pc, #656]	; 4dfc <parsePreset+0xd1c>
				  effectSetters[i].setParam2 = &blankFunction;;
    4b6c:	488d      	ldr	r0, [pc, #564]	; (4da4 <parsePreset+0xcc4>)
				  effectTick[i] = FXVZhighshelfTick;
    4b6e:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
    4b70:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    4b74:	edde 7a00 	vldr	s15, [lr]
    4b78:	ee67 7a87 	vmul.f32	s15, s15, s14
    4b7c:	fef8 7a67 	vrinta.f32	s15, s15
    4b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4b84:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
    4b88:	f89d c000 	ldrb.w	ip, [sp]
    4b8c:	f1bc 0f13 	cmp.w	ip, #19
    4b90:	d81e      	bhi.n	4bd0 <parsePreset+0xaf0>
    4b92:	e8df f01c 	tbh	[pc, ip, lsl #1]
    4b96:	044d      	.short	0x044d
    4b98:	041f0436 	.word	0x041f0436
    4b9c:	0417041b 	.word	0x0417041b
    4ba0:	031a0401 	.word	0x031a0401
    4ba4:	02f50304 	.word	0x02f50304
    4ba8:	02c302dc 	.word	0x02c302dc
    4bac:	02a302b3 	.word	0x02a302b3
    4bb0:	03e60293 	.word	0x03e60293
    4bb4:	034403d3 	.word	0x034403d3
    4bb8:	03f60333 	.word	0x03f60333
    4bbc:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
    4bbe:	4a7a      	ldr	r2, [pc, #488]	; (4da8 <parsePreset+0xcc8>)
    4bc0:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
    4bc2:	4a7a      	ldr	r2, [pc, #488]	; (4dac <parsePreset+0xccc>)
				  effectSetters[i].setParam5 = &blankFunction;;
    4bc4:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
    4bc6:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
    4bca:	4a79      	ldr	r2, [pc, #484]	; (4db0 <parsePreset+0xcd0>)
				  effectSetters[i].setParam4 = &blankFunction;;
    4bcc:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
    4bd0:	3504      	adds	r5, #4
    4bd2:	4a78      	ldr	r2, [pc, #480]	; (4db4 <parsePreset+0xcd4>)
    4bd4:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
    4bd8:	3314      	adds	r3, #20
    4bda:	4295      	cmp	r5, r2
    4bdc:	d1c8      	bne.n	4b70 <parsePreset+0xa90>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    4bde:	4876      	ldr	r0, [pc, #472]	; (4db8 <parsePreset+0xcd8>)
	params[Effect1Mix].setParam = &fxMixSet;
    4be0:	4b76      	ldr	r3, [pc, #472]	; (4dbc <parsePreset+0xcdc>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    4be2:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    4be6:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    4bea:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    4bee:	4874      	ldr	r0, [pc, #464]	; (4dc0 <parsePreset+0xce0>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
    4bf0:	4d74      	ldr	r5, [pc, #464]	; (4dc4 <parsePreset+0xce4>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    4bf2:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    4bf6:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    4bfa:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    4bfe:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    4c00:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    4c02:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    4c06:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    4c08:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    4c0c:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    4c10:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    4c12:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    4c16:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    4c1a:	68f8      	ldr	r0, [r7, #12]
    4c1c:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    4c20:	6938      	ldr	r0, [r7, #16]
    4c22:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    4c26:	6978      	ldr	r0, [r7, #20]
    4c28:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    4c2c:	69b8      	ldr	r0, [r7, #24]
    4c2e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    4c32:	69f8      	ldr	r0, [r7, #28]
    4c34:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    4c38:	4863      	ldr	r0, [pc, #396]	; (4dc8 <parsePreset+0xce8>)
    4c3a:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    4c3e:	4863      	ldr	r0, [pc, #396]	; (4dcc <parsePreset+0xcec>)
    4c40:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    4c44:	4862      	ldr	r0, [pc, #392]	; (4dd0 <parsePreset+0xcf0>)
    4c46:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
    4c4a:	4862      	ldr	r0, [pc, #392]	; (4dd4 <parsePreset+0xcf4>)
    4c4c:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    4c4e:	4862      	ldr	r0, [pc, #392]	; (4dd8 <parsePreset+0xcf8>)
    4c50:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    4c54:	4861      	ldr	r0, [pc, #388]	; (4ddc <parsePreset+0xcfc>)
    4c56:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    4c5a:	4861      	ldr	r0, [pc, #388]	; (4de0 <parsePreset+0xd00>)
    4c5c:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    4c60:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
    4c62:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    4c66:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    4c6a:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    4c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    4c70:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    4c74:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    4c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
    4c7a:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    4c7e:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    4c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
    4c84:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    4c88:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    4c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
    4c8e:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
    4c92:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    4c94:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    4c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    4c9a:	4852      	ldr	r0, [pc, #328]	; (4de4 <parsePreset+0xd04>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    4c9c:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    4ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4ca2:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    4ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4ca8:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    4cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cae:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    4cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4cb4:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    4cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4cba:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    4cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
    4cc0:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    4cc2:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    4cc6:	680b      	ldr	r3, [r1, #0]
    4cc8:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    4ccc:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    4cce:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    4cd2:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    4cd6:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    4cd8:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    4cdc:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    4ce0:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    4ce2:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    4ce6:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    4cea:	4b3f      	ldr	r3, [pc, #252]	; (4de8 <parsePreset+0xd08>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    4cec:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    4cf0:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    4cf4:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    4cf8:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    4cfc:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    4d00:	4b3a      	ldr	r3, [pc, #232]	; (4dec <parsePreset+0xd0c>)
    4d02:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    4d06:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    4d0a:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    4d0e:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    4d12:	4b37      	ldr	r3, [pc, #220]	; (4df0 <parsePreset+0xd10>)
    4d14:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    4d18:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    4d1c:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    4d20:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    4d24:	4b33      	ldr	r3, [pc, #204]	; (4df4 <parsePreset+0xd14>)
    4d26:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    4d2a:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    4d2e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    4d32:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    4d36:	6813      	ldr	r3, [r2, #0]
    4d38:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    4d3c:	68d3      	ldr	r3, [r2, #12]
    4d3e:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    4d42:	6993      	ldr	r3, [r2, #24]
    4d44:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    4d48:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4d4a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    4d4e:	6853      	ldr	r3, [r2, #4]
    4d50:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    4d54:	6913      	ldr	r3, [r2, #16]
    4d56:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    4d5a:	69d3      	ldr	r3, [r2, #28]
    4d5c:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    4d60:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4d62:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    4d66:	6893      	ldr	r3, [r2, #8]
    4d68:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    4d6c:	6953      	ldr	r3, [r2, #20]
    4d6e:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    4d72:	6a13      	ldr	r3, [r2, #32]
    4d74:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    4d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4d7a:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    4d7e:	4b1e      	ldr	r3, [pc, #120]	; (4df8 <parsePreset+0xd18>)
    4d80:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    4d84:	46aa      	mov	sl, r5
    4d86:	e042      	b.n	4e0e <parsePreset+0xd2e>
    4d88:	200052e0 	.word	0x200052e0
    4d8c:	24001d89 	.word	0x24001d89
    4d90:	24001e09 	.word	0x24001e09
    4d94:	24001ec9 	.word	0x24001ec9
    4d98:	24001e81 	.word	0x24001e81
    4d9c:	200149f4 	.word	0x200149f4
    4da0:	20005048 	.word	0x20005048
    4da4:	240031b9 	.word	0x240031b9
    4da8:	00002381 	.word	0x00002381
    4dac:	2400213d 	.word	0x2400213d
    4db0:	240022f9 	.word	0x240022f9
    4db4:	20005058 	.word	0x20005058
    4db8:	00000f61 	.word	0x00000f61
    4dbc:	00001cc1 	.word	0x00001cc1
    4dc0:	00000fc1 	.word	0x00000fc1
    4dc4:	00001ce1 	.word	0x00001ce1
    4dc8:	000023a1 	.word	0x000023a1
    4dcc:	00002441 	.word	0x00002441
    4dd0:	00002401 	.word	0x00002401
    4dd4:	00001561 	.word	0x00001561
    4dd8:	00001581 	.word	0x00001581
    4ddc:	000015a1 	.word	0x000015a1
    4de0:	000015c1 	.word	0x000015c1
    4de4:	00001481 	.word	0x00001481
    4de8:	000014a1 	.word	0x000014a1
    4dec:	000014c1 	.word	0x000014c1
    4df0:	000014e1 	.word	0x000014e1
    4df4:	00001501 	.word	0x00001501
    4df8:	00001541 	.word	0x00001541
    4dfc:	20017c20 	.word	0x20017c20
    4e00:	42fe0000 	.word	0x42fe0000
    4e04:	3c010204 	.word	0x3c010204
    4e08:	f109 091c 	add.w	r9, r9, #28
    4e0c:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
    4e0e:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
    4e12:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
    4e16:	2b0c      	cmp	r3, #12
    4e18:	d94b      	bls.n	4eb2 <parsePreset+0xdd2>
		else if ((i >= Osc2) && (i < Osc3))
    4e1a:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
    4e1e:	2b0c      	cmp	r3, #12
    4e20:	f240 85e2 	bls.w	59e8 <parsePreset+0x1908>
		else if ((i >= Osc3) && (i < Effect1FXType))
    4e24:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
    4e28:	2b0c      	cmp	r3, #12
    4e2a:	f240 85d9 	bls.w	59e0 <parsePreset+0x1900>
		else if ((i >= Filter1) && (i < Filter2))
    4e2e:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    4e32:	2b05      	cmp	r3, #5
    4e34:	d93d      	bls.n	4eb2 <parsePreset+0xdd2>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    4e36:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
    4e3a:	2b06      	cmp	r3, #6
    4e3c:	f240 85d4 	bls.w	59e8 <parsePreset+0x1908>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    4e40:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
    4e44:	2b05      	cmp	r3, #5
    4e46:	d934      	bls.n	4eb2 <parsePreset+0xdd2>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    4e48:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
    4e4c:	2b05      	cmp	r3, #5
    4e4e:	f240 85cb 	bls.w	59e8 <parsePreset+0x1908>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    4e52:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
    4e56:	2b05      	cmp	r3, #5
    4e58:	f240 85c2 	bls.w	59e0 <parsePreset+0x1900>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    4e5c:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
    4e60:	2b05      	cmp	r3, #5
    4e62:	f240 85a7 	bls.w	59b4 <parsePreset+0x18d4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    4e66:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
    4e6a:	2b04      	cmp	r3, #4
    4e6c:	d921      	bls.n	4eb2 <parsePreset+0xdd2>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    4e6e:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
    4e72:	2b04      	cmp	r3, #4
    4e74:	f240 85b8 	bls.w	59e8 <parsePreset+0x1908>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    4e78:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
    4e7c:	2b04      	cmp	r3, #4
    4e7e:	f240 85af 	bls.w	59e0 <parsePreset+0x1900>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    4e82:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
    4e86:	2b04      	cmp	r3, #4
    4e88:	f240 8594 	bls.w	59b4 <parsePreset+0x18d4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    4e8c:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
    4e90:	2b07      	cmp	r3, #7
    4e92:	d90e      	bls.n	4eb2 <parsePreset+0xdd2>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    4e94:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
    4e98:	2b07      	cmp	r3, #7
    4e9a:	f240 85a5 	bls.w	59e8 <parsePreset+0x1908>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    4e9e:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
    4ea2:	2b07      	cmp	r3, #7
    4ea4:	f240 859c 	bls.w	59e0 <parsePreset+0x1900>
		else if ((i >= Effect4FXType) && (i < Filter1))
    4ea8:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    4eac:	2b07      	cmp	r3, #7
    4eae:	f240 8581 	bls.w	59b4 <parsePreset+0x18d4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    4eb2:	2100      	movs	r1, #0
    4eb4:	ed99 0a02 	vldr	s0, [r9, #8]
    4eb8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    4ebc:	4608      	mov	r0, r1
    4ebe:	4798      	blx	r3
    4ec0:	ed99 0a03 	vldr	s0, [r9, #12]
    4ec4:	f8d9 3014 	ldr.w	r3, [r9, #20]
    4ec8:	2101      	movs	r1, #1
    4eca:	f899 0018 	ldrb.w	r0, [r9, #24]
    4ece:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    4ed0:	2d9b      	cmp	r5, #155	; 0x9b
    4ed2:	d199      	bne.n	4e08 <parsePreset+0xd28>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4ed4:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	numMappings = 0;
    4ed8:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4eda:	ed96 7a02 	vldr	s14, [r6, #8]
		mappings[i].destNumber = 255;
    4ede:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4ee0:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 4e00 <parsePreset+0xd20>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
    4ee8:	ed1f 6a3a 	vldr	s12, [pc, #-232]	; 4e04 <parsePreset+0xd24>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4eec:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4ef0:	4bd4      	ldr	r3, [pc, #848]	; (5244 <parsePreset+0x1164>)
    4ef2:	f8df e398 	ldr.w	lr, [pc, #920]	; 528c <parsePreset+0x11ac>
    4ef6:	eec6 6a07 	vdiv.f32	s13, s12, s14
    4efa:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
    4efe:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4f02:	4bd1      	ldr	r3, [pc, #836]	; (5248 <parsePreset+0x1168>)
    4f04:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
    4f08:	4bd0      	ldr	r3, [pc, #832]	; (524c <parsePreset+0x116c>)
    4f0a:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    4f0c:	4bd0      	ldr	r3, [pc, #832]	; (5250 <parsePreset+0x1170>)
    4f0e:	601a      	str	r2, [r3, #0]
    4f10:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
    4f12:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    4f14:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
    4f16:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    4f1a:	4283      	cmp	r3, r0
    4f1c:	d1f9      	bne.n	4f12 <parsePreset+0xe32>
	for (int i = 0; i < mappingCount; i++)
    4f1e:	f1bb 0f00 	cmp.w	fp, #0
    4f22:	f000 8094 	beq.w	504e <parsePreset+0xf6e>
    4f26:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
    4f28:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    4f2c:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 5254 <parsePreset+0x1174>
			mappings[whichMapping].destNumber = destNumber;
    4f30:	f04f 094c 	mov.w	r9, #76	; 0x4c
    4f34:	4443      	add	r3, r8
    4f36:	f8df a358 	ldr.w	sl, [pc, #856]	; 5290 <parsePreset+0x11b0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4f3a:	9602      	str	r6, [sp, #8]
    4f3c:	b29b      	uxth	r3, r3
    4f3e:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
    4f40:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4f42:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    4f44:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
    4f46:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
    4f4a:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    4f4c:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
    4f4e:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    4f50:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
    4f52:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
    4f54:	7811      	ldrb	r1, [r2, #0]
    4f56:	4281      	cmp	r1, r0
    4f58:	d103      	bne.n	4f62 <parsePreset+0xe82>
				whichHook = mappings[j].numHooks;
    4f5a:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
    4f5e:	b2de      	uxtb	r6, r3
				foundOne = 1;
    4f60:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    4f62:	3301      	adds	r3, #1
    4f64:	324c      	adds	r2, #76	; 0x4c
    4f66:	2b20      	cmp	r3, #32
    4f68:	d1f4      	bne.n	4f54 <parsePreset+0xe74>
		if (foundOne == 0)
    4f6a:	2d00      	cmp	r5, #0
    4f6c:	f000 8496 	beq.w	589c <parsePreset+0x17bc>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    4f70:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
    4f72:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    4f76:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    4f7a:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    4f7c:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    4f80:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
    4f84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    4f88:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    4f8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    4f8e:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    4f92:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    4f94:	4473      	add	r3, lr
    4f96:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    4f98:	bfcc      	ite	gt
    4f9a:	465b      	movgt	r3, fp
    4f9c:	2300      	movle	r3, #0
    4f9e:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    4fa2:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
    4fa6:	00e9      	lsls	r1, r5, #3
    4fa8:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    4fac:	f1a2 0318 	sub.w	r3, r2, #24
    4fb0:	2b03      	cmp	r3, #3
    4fb2:	d803      	bhi.n	4fbc <parsePreset+0xedc>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    4fb4:	4ba6      	ldr	r3, [pc, #664]	; (5250 <parsePreset+0x1170>)
    4fb6:	441a      	add	r2, r3
    4fb8:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
    4fbc:	eb04 0308 	add.w	r3, r4, r8
    4fc0:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
    4fc2:	2bff      	cmp	r3, #255	; 0xff
    4fc4:	f000 847d 	beq.w	58c2 <parsePreset+0x17e2>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4fc8:	fb09 f006 	mul.w	r0, r9, r6
    4fcc:	1d2a      	adds	r2, r5, #4
    4fce:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
    4fd2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    4fd6:	4472      	add	r2, lr
    4fd8:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    4fda:	f1a3 0218 	sub.w	r2, r3, #24
    4fde:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4fe0:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    4fe4:	f200 847a 	bhi.w	58dc <parsePreset+0x17fc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4fe8:	2004      	movs	r0, #4
    4fea:	2108      	movs	r1, #8
    4fec:	4472      	add	r2, lr
    4fee:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    4ff2:	4897      	ldr	r0, [pc, #604]	; (5250 <parsePreset+0x1170>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4ff4:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    4ff6:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    4ff8:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    4ffa:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    4ffe:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
    5002:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5006:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
    5008:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    500c:	791b      	ldrb	r3, [r3, #4]
    500e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5012:	b21b      	sxth	r3, r3
    5014:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5018:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    501c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5020:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
    5024:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5028:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    502a:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    502e:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
    5032:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    5036:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    503a:	3301      	adds	r3, #1
    503c:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
    5040:	9b00      	ldr	r3, [sp, #0]
    5042:	4598      	cmp	r8, r3
    5044:	f47f af7e 	bne.w	4f44 <parsePreset+0xe64>
    5048:	4b80      	ldr	r3, [pc, #512]	; (524c <parsePreset+0x116c>)
    504a:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
    504e:	4b82      	ldr	r3, [pc, #520]	; (5258 <parsePreset+0x1178>)
	presetWaitingToParse = 0;
    5050:	2400      	movs	r4, #0
    5052:	4882      	ldr	r0, [pc, #520]	; (525c <parsePreset+0x117c>)
	audioMasterLevel = 1.0f;
    5054:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	if (params[Filter1].zeroToOneVal[0])
    5058:	ed93 7a00 	vldr	s14, [r3]
	presetWaitingToParse = 0;
    505c:	6004      	str	r4, [r0, #0]
	if (params[Filter2].zeroToOneVal[0])
    505e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
	if (params[Filter1].zeroToOneVal[0])
    5062:	eeb5 7a40 	vcmp.f32	s14, #0.0
	currentActivePreset = presetNumber;
    5066:	f89d 3014 	ldrb.w	r3, [sp, #20]
    506a:	487d      	ldr	r0, [pc, #500]	; (5260 <parsePreset+0x1180>)
	if (params[Filter1].zeroToOneVal[0])
    506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
    5070:	7003      	strb	r3, [r0, #0]
	if (params[Filter2].zeroToOneVal[0])
    5072:	eef5 7a40 	vcmp.f32	s15, #0.0
	audioMasterLevel = 1.0f;
    5076:	4b7b      	ldr	r3, [pc, #492]	; (5264 <parsePreset+0x1184>)
	uint8_t totalFilters = 0;
    5078:	bf14      	ite	ne
    507a:	2101      	movne	r1, #1
    507c:	2100      	moveq	r1, #0
	audioMasterLevel = 1.0f;
    507e:	601a      	str	r2, [r3, #0]
	oscToTick = NUM_OSC;
    5080:	2203      	movs	r2, #3
    5082:	4b79      	ldr	r3, [pc, #484]	; (5268 <parsePreset+0x1188>)
	if (params[Filter2].zeroToOneVal[0])
    5084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
    5088:	9801      	ldr	r0, [sp, #4]
	oscToTick = NUM_OSC;
    508a:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    508c:	f04f 0201 	mov.w	r2, #1
    5090:	4b76      	ldr	r3, [pc, #472]	; (526c <parsePreset+0x118c>)
		totalFilters++;
    5092:	bf18      	it	ne
    5094:	3101      	addne	r1, #1
	overSampled = 1;
    5096:	701a      	strb	r2, [r3, #0]
	numEffectToTick = totalEffects;
    5098:	4b75      	ldr	r3, [pc, #468]	; (5270 <parsePreset+0x1190>)
    509a:	7018      	strb	r0, [r3, #0]
	filterToTick = totalFilters;
    509c:	4b75      	ldr	r3, [pc, #468]	; (5274 <parsePreset+0x1194>)
    509e:	7019      	strb	r1, [r3, #0]
    50a0:	b662      	cpsie	i
	presetReady = 1;
    50a2:	4b75      	ldr	r3, [pc, #468]	; (5278 <parsePreset+0x1198>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    50a4:	4611      	mov	r1, r2
    50a6:	4875      	ldr	r0, [pc, #468]	; (527c <parsePreset+0x119c>)
	presetReady = 1;
    50a8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    50aa:	f002 f829 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    50ae:	4a74      	ldr	r2, [pc, #464]	; (5280 <parsePreset+0x11a0>)
	receivingI2C = 0;
    50b0:	4b74      	ldr	r3, [pc, #464]	; (5284 <parsePreset+0x11a4>)
	diskBusy = 0;
    50b2:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    50b4:	701c      	strb	r4, [r3, #0]
}
    50b6:	b007      	add	sp, #28
    50b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
    50bc:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 5294 <parsePreset+0x11b4>
				  effectSetters[i].setParam2 = &blankFunction;
    50c0:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
    50c2:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
    50c6:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 5298 <parsePreset+0x11b8>
    50ca:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    50ce:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 529c <parsePreset+0x11bc>
				  effectSetters[i].setParam5 = &blankFunction;
    50d2:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    50d6:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    50da:	e579      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &FXhighpassTick;
    50dc:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 52a0 <parsePreset+0x11c0>
				  effectSetters[i].setParam2 = &blankFunction;
    50e0:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
    50e2:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
    50e6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 52a4 <parsePreset+0x11c4>
    50ea:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    50ee:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 52a8 <parsePreset+0x11c8>
				  effectSetters[i].setParam5 = &blankFunction;
    50f2:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    50f6:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    50fa:	e569      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &FXlowpassTick;
    50fc:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 52ac <parsePreset+0x11cc>
				  effectSetters[i].setParam2 = &blankFunction;
    5100:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
    5102:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
    5106:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 52b0 <parsePreset+0x11d0>
    510a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    510e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 52b4 <parsePreset+0x11d4>
				  effectSetters[i].setParam5 = &blankFunction;;
    5112:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    5116:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    511a:	e559      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &wavefolderTick;
    511c:	f8df c198 	ldr.w	ip, [pc, #408]	; 52b8 <parsePreset+0x11d8>
    5120:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
    5124:	f8df c194 	ldr.w	ip, [pc, #404]	; 52bc <parsePreset+0x11dc>
    5128:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    512c:	f8df c190 	ldr.w	ip, [pc, #400]	; 52c0 <parsePreset+0x11e0>
    5130:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
    5134:	f8df c18c 	ldr.w	ip, [pc, #396]	; 52c4 <parsePreset+0x11e4>
    5138:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    513c:	f8df c188 	ldr.w	ip, [pc, #392]	; 52c8 <parsePreset+0x11e8>
    5140:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    5144:	f8df c184 	ldr.w	ip, [pc, #388]	; 52cc <parsePreset+0x11ec>
    5148:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    514c:	e540      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &tiltFilterTick;
    514e:	f8df c180 	ldr.w	ip, [pc, #384]	; 52d0 <parsePreset+0x11f0>
    5152:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
    5156:	f8df c17c 	ldr.w	ip, [pc, #380]	; 52d4 <parsePreset+0x11f4>
    515a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
    515e:	f8df c178 	ldr.w	ip, [pc, #376]	; 52d8 <parsePreset+0x11f8>
    5162:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
    5166:	f8df c174 	ldr.w	ip, [pc, #372]	; 52dc <parsePreset+0x11fc>
    516a:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
    516e:	f8df c170 	ldr.w	ip, [pc, #368]	; 52e0 <parsePreset+0x1200>
    5172:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    5176:	f8df c154 	ldr.w	ip, [pc, #340]	; 52cc <parsePreset+0x11ec>
    517a:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    517e:	e527      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &bcTick;
    5180:	f8df c160 	ldr.w	ip, [pc, #352]	; 52e4 <parsePreset+0x1204>
    5184:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    5188:	f8df c15c 	ldr.w	ip, [pc, #348]	; 52e8 <parsePreset+0x1208>
    518c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
    5190:	f8df c158 	ldr.w	ip, [pc, #344]	; 52ec <parsePreset+0x120c>
    5194:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
    5198:	f8df c154 	ldr.w	ip, [pc, #340]	; 52f0 <parsePreset+0x1210>
    519c:	e7cc      	b.n	5138 <parsePreset+0x1058>
				  effectTick[i] = &chorusTick;
    519e:	f8df c154 	ldr.w	ip, [pc, #340]	; 52f4 <parsePreset+0x1214>
				  effectSetters[i].setParam5 = &blankFunction;
    51a2:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
    51a4:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
    51a8:	f8df c14c 	ldr.w	ip, [pc, #332]	; 52f8 <parsePreset+0x1218>
    51ac:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
    51b0:	f8df c148 	ldr.w	ip, [pc, #328]	; 52fc <parsePreset+0x121c>
    51b4:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
    51b8:	f8df c144 	ldr.w	ip, [pc, #324]	; 5300 <parsePreset+0x1220>
    51bc:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
    51c0:	f8df c140 	ldr.w	ip, [pc, #320]	; 5304 <parsePreset+0x1224>
    51c4:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    51c8:	e502      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &compressorTick;
    51ca:	f8df c13c 	ldr.w	ip, [pc, #316]	; 5308 <parsePreset+0x1228>
    51ce:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
    51d2:	f8df c138 	ldr.w	ip, [pc, #312]	; 530c <parsePreset+0x122c>
    51d6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
    51da:	f8df c134 	ldr.w	ip, [pc, #308]	; 5310 <parsePreset+0x1230>
    51de:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
    51e2:	f8df c130 	ldr.w	ip, [pc, #304]	; 5314 <parsePreset+0x1234>
    51e6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
    51ea:	f8df c12c 	ldr.w	ip, [pc, #300]	; 5318 <parsePreset+0x1238>
    51ee:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
    51f2:	f8df c128 	ldr.w	ip, [pc, #296]	; 531c <parsePreset+0x123c>
    51f6:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
    51fa:	e4e9      	b.n	4bd0 <parsePreset+0xaf0>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    51fc:	f8df c120 	ldr.w	ip, [pc, #288]	; 5320 <parsePreset+0x1240>
				  effectTick[i] = FXVZhighshelfTick;
    5200:	4a21      	ldr	r2, [pc, #132]	; (5288 <parsePreset+0x11a8>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    5202:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    5206:	f8df c11c 	ldr.w	ip, [pc, #284]	; 5324 <parsePreset+0x1244>
				  effectTick[i] = FXVZhighshelfTick;
    520a:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    520c:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    5210:	f8df c114 	ldr.w	ip, [pc, #276]	; 5328 <parsePreset+0x1248>
				  effectSetters[i].setParam5 = &blankFunction;;
    5214:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    5218:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    521c:	e4d8      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &FXVZlowshelfTick;
    521e:	f8df c10c 	ldr.w	ip, [pc, #268]	; 532c <parsePreset+0x124c>
    5222:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
    5226:	f8df c108 	ldr.w	ip, [pc, #264]	; 5330 <parsePreset+0x1250>
    522a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
    522e:	f8df c104 	ldr.w	ip, [pc, #260]	; 5334 <parsePreset+0x1254>
    5232:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    5236:	f8df c100 	ldr.w	ip, [pc, #256]	; 5338 <parsePreset+0x1258>
				  effectSetters[i].setParam5 = &blankFunction;
    523a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    523e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    5242:	e4c5      	b.n	4bd0 <parsePreset+0xaf0>
    5244:	20017524 	.word	0x20017524
    5248:	20017528 	.word	0x20017528
    524c:	20017530 	.word	0x20017530
    5250:	2000527c 	.word	0x2000527c
    5254:	37fffffc 	.word	0x37fffffc
    5258:	20017f98 	.word	0x20017f98
    525c:	2001863c 	.word	0x2001863c
    5260:	200149b4 	.word	0x200149b4
    5264:	20000744 	.word	0x20000744
    5268:	20000068 	.word	0x20000068
    526c:	20000069 	.word	0x20000069
    5270:	20000050 	.word	0x20000050
    5274:	20000004 	.word	0x20000004
    5278:	20005618 	.word	0x20005618
    527c:	58020000 	.word	0x58020000
    5280:	200149f0 	.word	0x200149f0
    5284:	20018a44 	.word	0x20018a44
    5288:	00002341 	.word	0x00002341
    528c:	20016ba4 	.word	0x20016ba4
    5290:	200145c0 	.word	0x200145c0
    5294:	000022c1 	.word	0x000022c1
    5298:	24001f75 	.word	0x24001f75
    529c:	24002281 	.word	0x24002281
    52a0:	000022a1 	.word	0x000022a1
    52a4:	24001f29 	.word	0x24001f29
    52a8:	2400226d 	.word	0x2400226d
    52ac:	00002281 	.word	0x00002281
    52b0:	24001edd 	.word	0x24001edd
    52b4:	24002259 	.word	0x24002259
    52b8:	00001d21 	.word	0x00001d21
    52bc:	000017e1 	.word	0x000017e1
    52c0:	00001aa1 	.word	0x00001aa1
    52c4:	00001821 	.word	0x00001821
    52c8:	00001be1 	.word	0x00001be1
    52cc:	00001c01 	.word	0x00001c01
    52d0:	00001fc1 	.word	0x00001fc1
    52d4:	00001861 	.word	0x00001861
    52d8:	000018c1 	.word	0x000018c1
    52dc:	00001921 	.word	0x00001921
    52e0:	00001961 	.word	0x00001961
    52e4:	00002221 	.word	0x00002221
    52e8:	000017a1 	.word	0x000017a1
    52ec:	00001ac1 	.word	0x00001ac1
    52f0:	00001c41 	.word	0x00001c41
    52f4:	00001f21 	.word	0x00001f21
    52f8:	00001e41 	.word	0x00001e41
    52fc:	00001e81 	.word	0x00001e81
    5300:	00001ea1 	.word	0x00001ea1
    5304:	00001ee1 	.word	0x00001ee1
    5308:	00002261 	.word	0x00002261
    530c:	000019a1 	.word	0x000019a1
    5310:	000019c1 	.word	0x000019c1
    5314:	00001a01 	.word	0x00001a01
    5318:	00001a21 	.word	0x00001a21
    531c:	00001a61 	.word	0x00001a61
    5320:	240020a5 	.word	0x240020a5
    5324:	240021f1 	.word	0x240021f1
    5328:	240022d1 	.word	0x240022d1
    532c:	00002321 	.word	0x00002321
    5330:	24002059 	.word	0x24002059
    5334:	240021bd 	.word	0x240021bd
    5338:	240022bd 	.word	0x240022bd
				  effectTick[i] = &FXVZpeakTick;
    533c:	f8df c30c 	ldr.w	ip, [pc, #780]	; 564c <parsePreset+0x156c>
    5340:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
    5344:	f8df c308 	ldr.w	ip, [pc, #776]	; 5650 <parsePreset+0x1570>
    5348:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
    534c:	f8df c304 	ldr.w	ip, [pc, #772]	; 5654 <parsePreset+0x1574>
    5350:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    5354:	f8df c300 	ldr.w	ip, [pc, #768]	; 5658 <parsePreset+0x1578>
				  effectSetters[i].setParam5 = &blankFunction;
    5358:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    535c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    5360:	e436      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &FXdiodeLowpassTick;
    5362:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 565c <parsePreset+0x157c>
				  effectSetters[i].setParam2 = &blankFunction;
    5366:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
    5368:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
    536c:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 5660 <parsePreset+0x1580>
    5370:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    5374:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 5664 <parsePreset+0x1584>
				  effectSetters[i].setParam5 = &blankFunction;
    5378:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    537c:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
    5380:	e426      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = FXVZbandrejectTick;
    5382:	4a98      	ldr	r2, [pc, #608]	; (55e4 <parsePreset+0x1504>)
    5384:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    5386:	4a98      	ldr	r2, [pc, #608]	; (55e8 <parsePreset+0x1508>)
				  effectSetters[i].setParam5 = &blankFunction;;
    5388:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    538a:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
    538c:	4a97      	ldr	r2, [pc, #604]	; (55ec <parsePreset+0x150c>)
    538e:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
    5390:	4a97      	ldr	r2, [pc, #604]	; (55f0 <parsePreset+0x1510>)
				  effectSetters[i].setParam4 = &blankFunction;;
    5392:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
    5396:	e41b      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &shaperTick;
    5398:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 5668 <parsePreset+0x1588>
				  effectSetters[i].setParam5 = &blankFunction;
    539c:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
    539e:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    53a2:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 566c <parsePreset+0x158c>
    53a6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    53aa:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 5670 <parsePreset+0x1590>
    53ae:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
    53b2:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 5674 <parsePreset+0x1594>
    53b6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    53ba:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 5678 <parsePreset+0x1598>
    53be:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    53c2:	e405      	b.n	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &tanhTick;
    53c4:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 567c <parsePreset+0x159c>
				  effectSetters[i].setParam5 = &blankFunction;
    53c8:	6118      	str	r0, [r3, #16]
    53ca:	e7e8      	b.n	539e <parsePreset+0x12be>
				  effectTick[i] = &satTick;
    53cc:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 5680 <parsePreset+0x15a0>
				  effectSetters[i].setParam5 = &blankFunction;
    53d0:	6118      	str	r0, [r3, #16]
    53d2:	e7e4      	b.n	539e <parsePreset+0x12be>
				  effectTick[i] = &hardClipTick;
    53d4:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 5684 <parsePreset+0x15a4>
				  effectSetters[i].setParam5 = &blankFunction;
    53d8:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
    53da:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    53de:	f8df c28c 	ldr.w	ip, [pc, #652]	; 566c <parsePreset+0x158c>
    53e2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    53e6:	f8df c288 	ldr.w	ip, [pc, #648]	; 5670 <parsePreset+0x1590>
    53ea:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
    53ee:	f8df c298 	ldr.w	ip, [pc, #664]	; 5688 <parsePreset+0x15a8>
    53f2:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    53f6:	f8df c280 	ldr.w	ip, [pc, #640]	; 5678 <parsePreset+0x1598>
    53fa:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    53fe:	f7ff bbe7 	b.w	4bd0 <parsePreset+0xaf0>
				  effectTick[i] = &softClipTick;
    5402:	f8df c288 	ldr.w	ip, [pc, #648]	; 568c <parsePreset+0x15ac>
				  effectSetters[i].setParam5 = &blankFunction;
    5406:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
    5408:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
    540c:	f8df c25c 	ldr.w	ip, [pc, #604]	; 566c <parsePreset+0x158c>
    5410:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
    5414:	f8df c258 	ldr.w	ip, [pc, #600]	; 5670 <parsePreset+0x1590>
    5418:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
    541c:	f8df c270 	ldr.w	ip, [pc, #624]	; 5690 <parsePreset+0x15b0>
    5420:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    5424:	f8df c250 	ldr.w	ip, [pc, #592]	; 5678 <parsePreset+0x1598>
    5428:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
    542c:	f7ff bbd0 	b.w	4bd0 <parsePreset+0xaf0>
				  totalEffects--;
    5430:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
    5432:	6098      	str	r0, [r3, #8]
				  totalEffects--;
    5434:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    5438:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
    543c:	f8df c254 	ldr.w	ip, [pc, #596]	; 5694 <parsePreset+0x15b4>
				  effectSetters[i].setParam2 = &blankFunction;
    5440:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
    5444:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
    5446:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
    544a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
    544e:	f7ff bbbf 	b.w	4bd0 <parsePreset+0xaf0>
				lfoShapeTick[i] = &lfoSawTick;
    5452:	4b68      	ldr	r3, [pc, #416]	; (55f4 <parsePreset+0x1514>)
    5454:	4868      	ldr	r0, [pc, #416]	; (55f8 <parsePreset+0x1518>)
    5456:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
    5458:	4b68      	ldr	r3, [pc, #416]	; (55fc <parsePreset+0x151c>)
    545a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
    545c:	4b68      	ldr	r3, [pc, #416]	; (5600 <parsePreset+0x1520>)
    545e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    5460:	4b68      	ldr	r3, [pc, #416]	; (5604 <parsePreset+0x1524>)
    5462:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    5464:	f7ff bb7b 	b.w	4b5e <parsePreset+0xa7e>
				lfoShapeTick[i] = &lfoTriTick;
    5468:	4b62      	ldr	r3, [pc, #392]	; (55f4 <parsePreset+0x1514>)
    546a:	4867      	ldr	r0, [pc, #412]	; (5608 <parsePreset+0x1528>)
    546c:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
    546e:	4b67      	ldr	r3, [pc, #412]	; (560c <parsePreset+0x152c>)
    5470:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
    5472:	4b67      	ldr	r3, [pc, #412]	; (5610 <parsePreset+0x1530>)
    5474:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    5476:	4b67      	ldr	r3, [pc, #412]	; (5614 <parsePreset+0x1534>)
    5478:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    547a:	f7ff bb70 	b.w	4b5e <parsePreset+0xa7e>
				lfoShapeTick[i] = &lfoSineTick;
    547e:	4b5d      	ldr	r3, [pc, #372]	; (55f4 <parsePreset+0x1514>)
    5480:	4865      	ldr	r0, [pc, #404]	; (5618 <parsePreset+0x1538>)
    5482:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
    5484:	4b65      	ldr	r3, [pc, #404]	; (561c <parsePreset+0x153c>)
    5486:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
    5488:	4b65      	ldr	r3, [pc, #404]	; (5620 <parsePreset+0x1540>)
    548a:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    548c:	4b65      	ldr	r3, [pc, #404]	; (5624 <parsePreset+0x1544>)
    548e:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    5490:	f7ff bb65 	b.w	4b5e <parsePreset+0xa7e>
				lfoShapeTick[i] = &lfoSawTick;
    5494:	4b57      	ldr	r3, [pc, #348]	; (55f4 <parsePreset+0x1514>)
    5496:	4858      	ldr	r0, [pc, #352]	; (55f8 <parsePreset+0x1518>)
    5498:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
    549a:	4b58      	ldr	r3, [pc, #352]	; (55fc <parsePreset+0x151c>)
    549c:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
    549e:	4b58      	ldr	r3, [pc, #352]	; (5600 <parsePreset+0x1520>)
    54a0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    54a2:	4b58      	ldr	r3, [pc, #352]	; (5604 <parsePreset+0x1524>)
    54a4:	6213      	str	r3, [r2, #32]
				break;
    54a6:	f7ff bb0a 	b.w	4abe <parsePreset+0x9de>
				lfoShapeTick[i] = &lfoSawSquareTick;
    54aa:	4b52      	ldr	r3, [pc, #328]	; (55f4 <parsePreset+0x1514>)
    54ac:	485e      	ldr	r0, [pc, #376]	; (5628 <parsePreset+0x1548>)
    54ae:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    54b0:	4b5e      	ldr	r3, [pc, #376]	; (562c <parsePreset+0x154c>)
    54b2:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    54b4:	4b5e      	ldr	r3, [pc, #376]	; (5630 <parsePreset+0x1550>)
    54b6:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    54b8:	4b5e      	ldr	r3, [pc, #376]	; (5634 <parsePreset+0x1554>)
    54ba:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    54bc:	f7ff bb4f 	b.w	4b5e <parsePreset+0xa7e>
				lfoShapeTick[i] = &lfoSineTriTick;
    54c0:	4b4c      	ldr	r3, [pc, #304]	; (55f4 <parsePreset+0x1514>)
    54c2:	485d      	ldr	r0, [pc, #372]	; (5638 <parsePreset+0x1558>)
    54c4:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    54c6:	4b5d      	ldr	r3, [pc, #372]	; (563c <parsePreset+0x155c>)
    54c8:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    54ca:	4b5d      	ldr	r3, [pc, #372]	; (5640 <parsePreset+0x1560>)
    54cc:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    54ce:	4b5d      	ldr	r3, [pc, #372]	; (5644 <parsePreset+0x1564>)
    54d0:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    54d2:	f7ff bb44 	b.w	4b5e <parsePreset+0xa7e>
				lfoShapeTick[i] = &lfoTriTick;
    54d6:	4b47      	ldr	r3, [pc, #284]	; (55f4 <parsePreset+0x1514>)
    54d8:	484b      	ldr	r0, [pc, #300]	; (5608 <parsePreset+0x1528>)
    54da:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
    54dc:	4b4b      	ldr	r3, [pc, #300]	; (560c <parsePreset+0x152c>)
    54de:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
    54e0:	4b4b      	ldr	r3, [pc, #300]	; (5610 <parsePreset+0x1530>)
    54e2:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    54e4:	4b4b      	ldr	r3, [pc, #300]	; (5614 <parsePreset+0x1534>)
    54e6:	6213      	str	r3, [r2, #32]
				break;
    54e8:	f7ff bae9 	b.w	4abe <parsePreset+0x9de>
				lfoShapeTick[i] = &lfoSineTick;
    54ec:	4b41      	ldr	r3, [pc, #260]	; (55f4 <parsePreset+0x1514>)
    54ee:	484a      	ldr	r0, [pc, #296]	; (5618 <parsePreset+0x1538>)
    54f0:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
    54f2:	4b4a      	ldr	r3, [pc, #296]	; (561c <parsePreset+0x153c>)
    54f4:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
    54f6:	4b4a      	ldr	r3, [pc, #296]	; (5620 <parsePreset+0x1540>)
    54f8:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    54fa:	4b4a      	ldr	r3, [pc, #296]	; (5624 <parsePreset+0x1544>)
    54fc:	6213      	str	r3, [r2, #32]
				break;
    54fe:	f7ff bade 	b.w	4abe <parsePreset+0x9de>
				lfoShapeTick[i] = &lfoSawSquareTick;
    5502:	4b3c      	ldr	r3, [pc, #240]	; (55f4 <parsePreset+0x1514>)
    5504:	4848      	ldr	r0, [pc, #288]	; (5628 <parsePreset+0x1548>)
    5506:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    5508:	4b48      	ldr	r3, [pc, #288]	; (562c <parsePreset+0x154c>)
    550a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    550c:	4b48      	ldr	r3, [pc, #288]	; (5630 <parsePreset+0x1550>)
    550e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    5510:	4b48      	ldr	r3, [pc, #288]	; (5634 <parsePreset+0x1554>)
    5512:	6213      	str	r3, [r2, #32]
				break;
    5514:	f7ff bad3 	b.w	4abe <parsePreset+0x9de>
				lfoShapeTick[i] = &lfoSawTick;
    5518:	4b36      	ldr	r3, [pc, #216]	; (55f4 <parsePreset+0x1514>)
    551a:	4837      	ldr	r0, [pc, #220]	; (55f8 <parsePreset+0x1518>)
    551c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
    551e:	4b37      	ldr	r3, [pc, #220]	; (55fc <parsePreset+0x151c>)
    5520:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
    5522:	4b37      	ldr	r3, [pc, #220]	; (5600 <parsePreset+0x1520>)
    5524:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    5526:	4b37      	ldr	r3, [pc, #220]	; (5604 <parsePreset+0x1524>)
    5528:	6153      	str	r3, [r2, #20]
				break;
    552a:	f7ff baa8 	b.w	4a7e <parsePreset+0x99e>
				lfoShapeTick[i] = &lfoSineTriTick;
    552e:	4b31      	ldr	r3, [pc, #196]	; (55f4 <parsePreset+0x1514>)
    5530:	4841      	ldr	r0, [pc, #260]	; (5638 <parsePreset+0x1558>)
    5532:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    5534:	4b41      	ldr	r3, [pc, #260]	; (563c <parsePreset+0x155c>)
    5536:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    5538:	4b41      	ldr	r3, [pc, #260]	; (5640 <parsePreset+0x1560>)
    553a:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    553c:	4b41      	ldr	r3, [pc, #260]	; (5644 <parsePreset+0x1564>)
    553e:	6213      	str	r3, [r2, #32]
				break;
    5540:	f7ff babd 	b.w	4abe <parsePreset+0x9de>
				lfoShapeTick[i] = &lfoTriTick;
    5544:	4b2b      	ldr	r3, [pc, #172]	; (55f4 <parsePreset+0x1514>)
    5546:	4830      	ldr	r0, [pc, #192]	; (5608 <parsePreset+0x1528>)
    5548:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
    554a:	4b30      	ldr	r3, [pc, #192]	; (560c <parsePreset+0x152c>)
    554c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
    554e:	4b30      	ldr	r3, [pc, #192]	; (5610 <parsePreset+0x1530>)
    5550:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    5552:	4b30      	ldr	r3, [pc, #192]	; (5614 <parsePreset+0x1534>)
    5554:	6153      	str	r3, [r2, #20]
				break;
    5556:	f7ff ba92 	b.w	4a7e <parsePreset+0x99e>
				lfoShapeTick[i] = &lfoSineTick;
    555a:	4b26      	ldr	r3, [pc, #152]	; (55f4 <parsePreset+0x1514>)
    555c:	482e      	ldr	r0, [pc, #184]	; (5618 <parsePreset+0x1538>)
    555e:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
    5560:	4b2e      	ldr	r3, [pc, #184]	; (561c <parsePreset+0x153c>)
    5562:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
    5564:	4b2e      	ldr	r3, [pc, #184]	; (5620 <parsePreset+0x1540>)
    5566:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    5568:	4b2e      	ldr	r3, [pc, #184]	; (5624 <parsePreset+0x1544>)
    556a:	6153      	str	r3, [r2, #20]
				break;
    556c:	f7ff ba87 	b.w	4a7e <parsePreset+0x99e>
				lfoShapeTick[i] = &lfoSawSquareTick;
    5570:	4b20      	ldr	r3, [pc, #128]	; (55f4 <parsePreset+0x1514>)
    5572:	482d      	ldr	r0, [pc, #180]	; (5628 <parsePreset+0x1548>)
    5574:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    5576:	4b2d      	ldr	r3, [pc, #180]	; (562c <parsePreset+0x154c>)
    5578:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    557a:	4b2d      	ldr	r3, [pc, #180]	; (5630 <parsePreset+0x1550>)
    557c:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    557e:	4b2d      	ldr	r3, [pc, #180]	; (5634 <parsePreset+0x1554>)
    5580:	6153      	str	r3, [r2, #20]
				break;
    5582:	f7ff ba7c 	b.w	4a7e <parsePreset+0x99e>
				lfoShapeTick[i] = &lfoSineTriTick;
    5586:	4b1b      	ldr	r3, [pc, #108]	; (55f4 <parsePreset+0x1514>)
    5588:	482b      	ldr	r0, [pc, #172]	; (5638 <parsePreset+0x1558>)
    558a:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    558c:	4b2b      	ldr	r3, [pc, #172]	; (563c <parsePreset+0x155c>)
    558e:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    5590:	4b2b      	ldr	r3, [pc, #172]	; (5640 <parsePreset+0x1560>)
    5592:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    5594:	4b2b      	ldr	r3, [pc, #172]	; (5644 <parsePreset+0x1564>)
    5596:	6153      	str	r3, [r2, #20]
				break;
    5598:	f7ff ba71 	b.w	4a7e <parsePreset+0x99e>
				lfoShapeTick[i] = &lfoSawTick;
    559c:	4b15      	ldr	r3, [pc, #84]	; (55f4 <parsePreset+0x1514>)
    559e:	4816      	ldr	r0, [pc, #88]	; (55f8 <parsePreset+0x1518>)
				lfoSetters[i].setRate = &lfoSawSetRate;
    55a0:	4a29      	ldr	r2, [pc, #164]	; (5648 <parsePreset+0x1568>)
				lfoShapeTick[i] = &lfoSawTick;
    55a2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
    55a4:	4b15      	ldr	r3, [pc, #84]	; (55fc <parsePreset+0x151c>)
    55a6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
    55a8:	4b15      	ldr	r3, [pc, #84]	; (5600 <parsePreset+0x1520>)
    55aa:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    55ac:	4b15      	ldr	r3, [pc, #84]	; (5604 <parsePreset+0x1524>)
    55ae:	6093      	str	r3, [r2, #8]
				break;
    55b0:	f7ff ba45 	b.w	4a3e <parsePreset+0x95e>
				lfoShapeTick[i] = &lfoTriTick;
    55b4:	4b0f      	ldr	r3, [pc, #60]	; (55f4 <parsePreset+0x1514>)
    55b6:	4814      	ldr	r0, [pc, #80]	; (5608 <parsePreset+0x1528>)
				lfoSetters[i].setRate = &lfoTriSetRate;
    55b8:	4a23      	ldr	r2, [pc, #140]	; (5648 <parsePreset+0x1568>)
				lfoShapeTick[i] = &lfoTriTick;
    55ba:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
    55bc:	4b13      	ldr	r3, [pc, #76]	; (560c <parsePreset+0x152c>)
    55be:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
    55c0:	4b13      	ldr	r3, [pc, #76]	; (5610 <parsePreset+0x1530>)
    55c2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    55c4:	4b13      	ldr	r3, [pc, #76]	; (5614 <parsePreset+0x1534>)
    55c6:	6093      	str	r3, [r2, #8]
				break;
    55c8:	f7ff ba39 	b.w	4a3e <parsePreset+0x95e>
				lfoShapeTick[i] = &lfoSineTick;
    55cc:	4b09      	ldr	r3, [pc, #36]	; (55f4 <parsePreset+0x1514>)
    55ce:	4812      	ldr	r0, [pc, #72]	; (5618 <parsePreset+0x1538>)
				lfoSetters[i].setRate = &lfoSineSetRate;
    55d0:	4a1d      	ldr	r2, [pc, #116]	; (5648 <parsePreset+0x1568>)
				lfoShapeTick[i] = &lfoSineTick;
    55d2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
    55d4:	4b11      	ldr	r3, [pc, #68]	; (561c <parsePreset+0x153c>)
    55d6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
    55d8:	4b11      	ldr	r3, [pc, #68]	; (5620 <parsePreset+0x1540>)
    55da:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    55dc:	4b11      	ldr	r3, [pc, #68]	; (5624 <parsePreset+0x1544>)
    55de:	6093      	str	r3, [r2, #8]
				break;
    55e0:	f7ff ba2d 	b.w	4a3e <parsePreset+0x95e>
    55e4:	00002361 	.word	0x00002361
    55e8:	240020f1 	.word	0x240020f1
    55ec:	24002225 	.word	0x24002225
    55f0:	240022e5 	.word	0x240022e5
    55f4:	200052e0 	.word	0x200052e0
    55f8:	24001d61 	.word	0x24001d61
    55fc:	24001df5 	.word	0x24001df5
    5600:	24001ec5 	.word	0x24001ec5
    5604:	24001e6d 	.word	0x24001e6d
    5608:	24001d45 	.word	0x24001d45
    560c:	24001de1 	.word	0x24001de1
    5610:	24001ec1 	.word	0x24001ec1
    5614:	24001e59 	.word	0x24001e59
    5618:	24001d29 	.word	0x24001d29
    561c:	24001dcd 	.word	0x24001dcd
    5620:	24001ebd 	.word	0x24001ebd
    5624:	24001e45 	.word	0x24001e45
    5628:	24001cf1 	.word	0x24001cf1
    562c:	24001da5 	.word	0x24001da5
    5630:	24001e95 	.word	0x24001e95
    5634:	24001e1d 	.word	0x24001e1d
    5638:	24001d0d 	.word	0x24001d0d
    563c:	24001db9 	.word	0x24001db9
    5640:	24001ea9 	.word	0x24001ea9
    5644:	24001e31 	.word	0x24001e31
    5648:	20016b70 	.word	0x20016b70
    564c:	00002301 	.word	0x00002301
    5650:	2400200d 	.word	0x2400200d
    5654:	24002189 	.word	0x24002189
    5658:	240022a9 	.word	0x240022a9
    565c:	000022e1 	.word	0x000022e1
    5660:	24001fc1 	.word	0x24001fc1
    5664:	24002295 	.word	0x24002295
    5668:	00001f41 	.word	0x00001f41
    566c:	000017a1 	.word	0x000017a1
    5670:	00001aa1 	.word	0x00001aa1
    5674:	00001ae1 	.word	0x00001ae1
    5678:	00001be1 	.word	0x00001be1
    567c:	00002001 	.word	0x00002001
    5680:	000021a1 	.word	0x000021a1
    5684:	00002101 	.word	0x00002101
    5688:	00001b61 	.word	0x00001b61
    568c:	00002061 	.word	0x00002061
    5690:	00001b01 	.word	0x00001b01
    5694:	00001fa1 	.word	0x00001fa1
				lfoShapeTick[i] = &lfoSawSquareTick;
    5698:	4b99      	ldr	r3, [pc, #612]	; (5900 <parsePreset+0x1820>)
    569a:	489a      	ldr	r0, [pc, #616]	; (5904 <parsePreset+0x1824>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    569c:	4a9a      	ldr	r2, [pc, #616]	; (5908 <parsePreset+0x1828>)
				lfoShapeTick[i] = &lfoSawSquareTick;
    569e:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    56a0:	4b9a      	ldr	r3, [pc, #616]	; (590c <parsePreset+0x182c>)
    56a2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    56a4:	4b9a      	ldr	r3, [pc, #616]	; (5910 <parsePreset+0x1830>)
    56a6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    56a8:	4b9a      	ldr	r3, [pc, #616]	; (5914 <parsePreset+0x1834>)
    56aa:	6093      	str	r3, [r2, #8]
				break;
    56ac:	f7ff b9c7 	b.w	4a3e <parsePreset+0x95e>
				lfoShapeTick[i] = &lfoSineTriTick;
    56b0:	4b93      	ldr	r3, [pc, #588]	; (5900 <parsePreset+0x1820>)
    56b2:	4899      	ldr	r0, [pc, #612]	; (5918 <parsePreset+0x1838>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    56b4:	4a94      	ldr	r2, [pc, #592]	; (5908 <parsePreset+0x1828>)
				lfoShapeTick[i] = &lfoSineTriTick;
    56b6:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    56b8:	4b98      	ldr	r3, [pc, #608]	; (591c <parsePreset+0x183c>)
    56ba:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    56bc:	4b98      	ldr	r3, [pc, #608]	; (5920 <parsePreset+0x1840>)
    56be:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    56c0:	4b98      	ldr	r3, [pc, #608]	; (5924 <parsePreset+0x1844>)
    56c2:	6093      	str	r3, [r2, #8]
				break;
    56c4:	f7ff b9bb 	b.w	4a3e <parsePreset+0x95e>
				  filterTick[i] = &LadderLowpassTick;
    56c8:	4b97      	ldr	r3, [pc, #604]	; (5928 <parsePreset+0x1848>)
    56ca:	4a98      	ldr	r2, [pc, #608]	; (592c <parsePreset+0x184c>)
    56cc:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    56ce:	4b98      	ldr	r3, [pc, #608]	; (5930 <parsePreset+0x1850>)
    56d0:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    56d2:	4b98      	ldr	r3, [pc, #608]	; (5934 <parsePreset+0x1854>)
    56d4:	60cb      	str	r3, [r1, #12]
				  break;
    56d6:	f7ff b990 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &VZbandrejectTick;
    56da:	4b93      	ldr	r3, [pc, #588]	; (5928 <parsePreset+0x1848>)
    56dc:	4a96      	ldr	r2, [pc, #600]	; (5938 <parsePreset+0x1858>)
    56de:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    56e0:	4b96      	ldr	r3, [pc, #600]	; (593c <parsePreset+0x185c>)
    56e2:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    56e4:	4b96      	ldr	r3, [pc, #600]	; (5940 <parsePreset+0x1860>)
    56e6:	60cb      	str	r3, [r1, #12]
				  break;
    56e8:	f7ff b987 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &VZhighshelfTick;
    56ec:	4b8e      	ldr	r3, [pc, #568]	; (5928 <parsePreset+0x1848>)
    56ee:	4a95      	ldr	r2, [pc, #596]	; (5944 <parsePreset+0x1864>)
    56f0:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    56f2:	4b95      	ldr	r3, [pc, #596]	; (5948 <parsePreset+0x1868>)
    56f4:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    56f6:	4b95      	ldr	r3, [pc, #596]	; (594c <parsePreset+0x186c>)
    56f8:	60cb      	str	r3, [r1, #12]
				  break;
    56fa:	f7ff b97e 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &VZlowshelfTick;
    56fe:	4b8a      	ldr	r3, [pc, #552]	; (5928 <parsePreset+0x1848>)
    5700:	4a93      	ldr	r2, [pc, #588]	; (5950 <parsePreset+0x1870>)
    5702:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    5704:	4b93      	ldr	r3, [pc, #588]	; (5954 <parsePreset+0x1874>)
    5706:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    5708:	4b93      	ldr	r3, [pc, #588]	; (5958 <parsePreset+0x1878>)
    570a:	60cb      	str	r3, [r1, #12]
				  break;
    570c:	f7ff b975 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &VZpeakTick;
    5710:	4b85      	ldr	r3, [pc, #532]	; (5928 <parsePreset+0x1848>)
    5712:	4a92      	ldr	r2, [pc, #584]	; (595c <parsePreset+0x187c>)
    5714:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
    5716:	4b92      	ldr	r3, [pc, #584]	; (5960 <parsePreset+0x1880>)
    5718:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
    571a:	4b92      	ldr	r3, [pc, #584]	; (5964 <parsePreset+0x1884>)
    571c:	60cb      	str	r3, [r1, #12]
				  break;
    571e:	f7ff b96c 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &diodeLowpassTick;
    5722:	4b81      	ldr	r3, [pc, #516]	; (5928 <parsePreset+0x1848>)
    5724:	4a90      	ldr	r2, [pc, #576]	; (5968 <parsePreset+0x1888>)
    5726:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    5728:	4b90      	ldr	r3, [pc, #576]	; (596c <parsePreset+0x188c>)
    572a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    572c:	4b90      	ldr	r3, [pc, #576]	; (5970 <parsePreset+0x1890>)
    572e:	60cb      	str	r3, [r1, #12]
				  break;
    5730:	f7ff b963 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &bandpassTick;
    5734:	4b7c      	ldr	r3, [pc, #496]	; (5928 <parsePreset+0x1848>)
    5736:	4a8f      	ldr	r2, [pc, #572]	; (5974 <parsePreset+0x1894>)
    5738:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
    573a:	4b8f      	ldr	r3, [pc, #572]	; (5978 <parsePreset+0x1898>)
    573c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
    573e:	4b8f      	ldr	r3, [pc, #572]	; (597c <parsePreset+0x189c>)
    5740:	60cb      	str	r3, [r1, #12]
				  break;
    5742:	f7ff b95a 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &highpassTick;
    5746:	4b78      	ldr	r3, [pc, #480]	; (5928 <parsePreset+0x1848>)
    5748:	4a8d      	ldr	r2, [pc, #564]	; (5980 <parsePreset+0x18a0>)
    574a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
    574c:	4b8d      	ldr	r3, [pc, #564]	; (5984 <parsePreset+0x18a4>)
    574e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
    5750:	4b8d      	ldr	r3, [pc, #564]	; (5988 <parsePreset+0x18a8>)
    5752:	60cb      	str	r3, [r1, #12]
				  break;
    5754:	f7ff b951 	b.w	49fa <parsePreset+0x91a>
				  filterTick[i] = &LadderLowpassTick;
    5758:	4b73      	ldr	r3, [pc, #460]	; (5928 <parsePreset+0x1848>)
    575a:	4a74      	ldr	r2, [pc, #464]	; (592c <parsePreset+0x184c>)
    575c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    575e:	4b74      	ldr	r3, [pc, #464]	; (5930 <parsePreset+0x1850>)
    5760:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    5762:	4b74      	ldr	r3, [pc, #464]	; (5934 <parsePreset+0x1854>)
    5764:	604b      	str	r3, [r1, #4]
				  break;
    5766:	f7ff b927 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &VZbandrejectTick;
    576a:	4b6f      	ldr	r3, [pc, #444]	; (5928 <parsePreset+0x1848>)
    576c:	4a72      	ldr	r2, [pc, #456]	; (5938 <parsePreset+0x1858>)
    576e:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    5770:	4b72      	ldr	r3, [pc, #456]	; (593c <parsePreset+0x185c>)
    5772:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    5774:	4b72      	ldr	r3, [pc, #456]	; (5940 <parsePreset+0x1860>)
    5776:	604b      	str	r3, [r1, #4]
				  break;
    5778:	f7ff b91e 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &VZhighshelfTick;
    577c:	4b6a      	ldr	r3, [pc, #424]	; (5928 <parsePreset+0x1848>)
    577e:	4a71      	ldr	r2, [pc, #452]	; (5944 <parsePreset+0x1864>)
    5780:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    5782:	4b71      	ldr	r3, [pc, #452]	; (5948 <parsePreset+0x1868>)
    5784:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    5786:	4b71      	ldr	r3, [pc, #452]	; (594c <parsePreset+0x186c>)
    5788:	604b      	str	r3, [r1, #4]
				  break;
    578a:	f7ff b915 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &VZlowshelfTick;
    578e:	4b66      	ldr	r3, [pc, #408]	; (5928 <parsePreset+0x1848>)
    5790:	4a6f      	ldr	r2, [pc, #444]	; (5950 <parsePreset+0x1870>)
    5792:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    5794:	4b6f      	ldr	r3, [pc, #444]	; (5954 <parsePreset+0x1874>)
    5796:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    5798:	4b6f      	ldr	r3, [pc, #444]	; (5958 <parsePreset+0x1878>)
    579a:	604b      	str	r3, [r1, #4]
				  break;
    579c:	f7ff b90c 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &VZpeakTick;
    57a0:	4b61      	ldr	r3, [pc, #388]	; (5928 <parsePreset+0x1848>)
    57a2:	4a6e      	ldr	r2, [pc, #440]	; (595c <parsePreset+0x187c>)
    57a4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
    57a6:	4b6e      	ldr	r3, [pc, #440]	; (5960 <parsePreset+0x1880>)
    57a8:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
    57aa:	4b6e      	ldr	r3, [pc, #440]	; (5964 <parsePreset+0x1884>)
    57ac:	604b      	str	r3, [r1, #4]
				  break;
    57ae:	f7ff b903 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &diodeLowpassTick;
    57b2:	4b5d      	ldr	r3, [pc, #372]	; (5928 <parsePreset+0x1848>)
    57b4:	4a6c      	ldr	r2, [pc, #432]	; (5968 <parsePreset+0x1888>)
    57b6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    57b8:	4b6c      	ldr	r3, [pc, #432]	; (596c <parsePreset+0x188c>)
    57ba:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    57bc:	4b6c      	ldr	r3, [pc, #432]	; (5970 <parsePreset+0x1890>)
    57be:	604b      	str	r3, [r1, #4]
				  break;
    57c0:	f7ff b8fa 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &bandpassTick;
    57c4:	4b58      	ldr	r3, [pc, #352]	; (5928 <parsePreset+0x1848>)
    57c6:	4a6b      	ldr	r2, [pc, #428]	; (5974 <parsePreset+0x1894>)
    57c8:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
    57ca:	4b6b      	ldr	r3, [pc, #428]	; (5978 <parsePreset+0x1898>)
    57cc:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
    57ce:	4b6b      	ldr	r3, [pc, #428]	; (597c <parsePreset+0x189c>)
    57d0:	604b      	str	r3, [r1, #4]
				  break;
    57d2:	f7ff b8f1 	b.w	49b8 <parsePreset+0x8d8>
				  filterTick[i] = &highpassTick;
    57d6:	4b54      	ldr	r3, [pc, #336]	; (5928 <parsePreset+0x1848>)
    57d8:	4a69      	ldr	r2, [pc, #420]	; (5980 <parsePreset+0x18a0>)
    57da:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
    57dc:	4b69      	ldr	r3, [pc, #420]	; (5984 <parsePreset+0x18a4>)
    57de:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
    57e0:	4b69      	ldr	r3, [pc, #420]	; (5988 <parsePreset+0x18a8>)
    57e2:	604b      	str	r3, [r1, #4]
				  break;
    57e4:	f7ff b8e8 	b.w	49b8 <parsePreset+0x8d8>
				  shapeTick[i] = &userTick;
    57e8:	4a68      	ldr	r2, [pc, #416]	; (598c <parsePreset+0x18ac>)
    57ea:	4969      	ldr	r1, [pc, #420]	; (5990 <parsePreset+0x18b0>)
    57ec:	6091      	str	r1, [r2, #8]
				  break;
    57ee:	f7ff b8af 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &triTick;
    57f2:	4a66      	ldr	r2, [pc, #408]	; (598c <parsePreset+0x18ac>)
    57f4:	4967      	ldr	r1, [pc, #412]	; (5994 <parsePreset+0x18b4>)
    57f6:	6091      	str	r1, [r2, #8]
				  break;
    57f8:	f7ff b8aa 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &sineTick;
    57fc:	4a63      	ldr	r2, [pc, #396]	; (598c <parsePreset+0x18ac>)
    57fe:	4966      	ldr	r1, [pc, #408]	; (5998 <parsePreset+0x18b8>)
    5800:	6091      	str	r1, [r2, #8]
				  break;
    5802:	f7ff b8a5 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &pulseTick;
    5806:	4a61      	ldr	r2, [pc, #388]	; (598c <parsePreset+0x18ac>)
    5808:	4964      	ldr	r1, [pc, #400]	; (599c <parsePreset+0x18bc>)
    580a:	6091      	str	r1, [r2, #8]
				  break;
    580c:	f7ff b8a0 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &sawTick;
    5810:	4a5e      	ldr	r2, [pc, #376]	; (598c <parsePreset+0x18ac>)
    5812:	4963      	ldr	r1, [pc, #396]	; (59a0 <parsePreset+0x18c0>)
    5814:	6091      	str	r1, [r2, #8]
				  break;
    5816:	f7ff b89b 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &sineTriTick;
    581a:	4a5c      	ldr	r2, [pc, #368]	; (598c <parsePreset+0x18ac>)
    581c:	4961      	ldr	r1, [pc, #388]	; (59a4 <parsePreset+0x18c4>)
    581e:	6091      	str	r1, [r2, #8]
				  break;
    5820:	f7ff b896 	b.w	4950 <parsePreset+0x870>
				  shapeTick[i] = &userTick;
    5824:	4a59      	ldr	r2, [pc, #356]	; (598c <parsePreset+0x18ac>)
    5826:	495a      	ldr	r1, [pc, #360]	; (5990 <parsePreset+0x18b0>)
    5828:	6051      	str	r1, [r2, #4]
				  break;
    582a:	f7ff b86a 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &triTick;
    582e:	4a57      	ldr	r2, [pc, #348]	; (598c <parsePreset+0x18ac>)
    5830:	4958      	ldr	r1, [pc, #352]	; (5994 <parsePreset+0x18b4>)
    5832:	6051      	str	r1, [r2, #4]
				  break;
    5834:	f7ff b865 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &sineTick;
    5838:	4a54      	ldr	r2, [pc, #336]	; (598c <parsePreset+0x18ac>)
    583a:	4957      	ldr	r1, [pc, #348]	; (5998 <parsePreset+0x18b8>)
    583c:	6051      	str	r1, [r2, #4]
				  break;
    583e:	f7ff b860 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &pulseTick;
    5842:	4a52      	ldr	r2, [pc, #328]	; (598c <parsePreset+0x18ac>)
    5844:	4955      	ldr	r1, [pc, #340]	; (599c <parsePreset+0x18bc>)
    5846:	6051      	str	r1, [r2, #4]
				  break;
    5848:	f7ff b85b 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &sawTick;
    584c:	4a4f      	ldr	r2, [pc, #316]	; (598c <parsePreset+0x18ac>)
    584e:	4954      	ldr	r1, [pc, #336]	; (59a0 <parsePreset+0x18c0>)
    5850:	6051      	str	r1, [r2, #4]
				  break;
    5852:	f7ff b856 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &sineTriTick;
    5856:	4a4d      	ldr	r2, [pc, #308]	; (598c <parsePreset+0x18ac>)
    5858:	4952      	ldr	r1, [pc, #328]	; (59a4 <parsePreset+0x18c4>)
    585a:	6051      	str	r1, [r2, #4]
				  break;
    585c:	f7ff b851 	b.w	4902 <parsePreset+0x822>
				  shapeTick[i] = &userTick;
    5860:	4b4a      	ldr	r3, [pc, #296]	; (598c <parsePreset+0x18ac>)
    5862:	4a4b      	ldr	r2, [pc, #300]	; (5990 <parsePreset+0x18b0>)
    5864:	601a      	str	r2, [r3, #0]
				  break;
    5866:	f7ff b826 	b.w	48b6 <parsePreset+0x7d6>
				  shapeTick[i] = &triTick;
    586a:	4b48      	ldr	r3, [pc, #288]	; (598c <parsePreset+0x18ac>)
    586c:	4a49      	ldr	r2, [pc, #292]	; (5994 <parsePreset+0x18b4>)
    586e:	601a      	str	r2, [r3, #0]
				  break;
    5870:	f7ff b821 	b.w	48b6 <parsePreset+0x7d6>
				  shapeTick[i] = &sineTick;
    5874:	4b45      	ldr	r3, [pc, #276]	; (598c <parsePreset+0x18ac>)
    5876:	4a48      	ldr	r2, [pc, #288]	; (5998 <parsePreset+0x18b8>)
    5878:	601a      	str	r2, [r3, #0]
				  break;
    587a:	f7ff b81c 	b.w	48b6 <parsePreset+0x7d6>
				  shapeTick[i] = &pulseTick;
    587e:	4b43      	ldr	r3, [pc, #268]	; (598c <parsePreset+0x18ac>)
    5880:	4a46      	ldr	r2, [pc, #280]	; (599c <parsePreset+0x18bc>)
    5882:	601a      	str	r2, [r3, #0]
				  break;
    5884:	f7ff b817 	b.w	48b6 <parsePreset+0x7d6>
				  shapeTick[i] = &sawTick;
    5888:	4b40      	ldr	r3, [pc, #256]	; (598c <parsePreset+0x18ac>)
    588a:	4a45      	ldr	r2, [pc, #276]	; (59a0 <parsePreset+0x18c0>)
    588c:	601a      	str	r2, [r3, #0]
				  break;
    588e:	f7ff b812 	b.w	48b6 <parsePreset+0x7d6>
				  shapeTick[i] = &sineTriTick;
    5892:	4b3e      	ldr	r3, [pc, #248]	; (598c <parsePreset+0x18ac>)
    5894:	4a43      	ldr	r2, [pc, #268]	; (59a4 <parsePreset+0x18c4>)
    5896:	601a      	str	r2, [r3, #0]
				  break;
    5898:	f7ff b80d 	b.w	48b6 <parsePreset+0x7d6>
			mappings[whichMapping].destNumber = destNumber;
    589c:	fb09 f30c 	mul.w	r3, r9, ip
    58a0:	4666      	mov	r6, ip
    58a2:	eb0e 0203 	add.w	r2, lr, r3
    58a6:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
    58aa:	9b02      	ldr	r3, [sp, #8]
    58ac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    58b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    58b4:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
    58b8:	6050      	str	r0, [r2, #4]
			numMappings++;
    58ba:	fa5f fc83 	uxtb.w	ip, r3
    58be:	f7ff bb58 	b.w	4f72 <parsePreset+0xe92>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    58c2:	fb09 f306 	mul.w	r3, r9, r6
    58c6:	18ca      	adds	r2, r1, r3
    58c8:	4937      	ldr	r1, [pc, #220]	; (59a8 <parsePreset+0x18c8>)
    58ca:	4472      	add	r2, lr
    58cc:	6291      	str	r1, [r2, #40]	; 0x28
    58ce:	1d2a      	adds	r2, r5, #4
    58d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    58d4:	4473      	add	r3, lr
    58d6:	6059      	str	r1, [r3, #4]
    58d8:	f7ff bb91 	b.w	4ffe <parsePreset+0xf1e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
    58dc:	2108      	movs	r1, #8
    58de:	2004      	movs	r0, #4
    58e0:	4472      	add	r2, lr
    58e2:	fb11 0303 	smlabb	r3, r1, r3, r0
    58e6:	4453      	add	r3, sl
    58e8:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    58ea:	f7ff bb88 	b.w	4ffe <parsePreset+0xf1e>
    58ee:	4d2f      	ldr	r5, [pc, #188]	; (59ac <parsePreset+0x18cc>)
    58f0:	f7fe be91 	b.w	4616 <parsePreset+0x536>
	for (int i = 0; i < paramCount; i++)
    58f4:	f04f 0884 	mov.w	r8, #132	; 0x84
    58f8:	4e2d      	ldr	r6, [pc, #180]	; (59b0 <parsePreset+0x18d0>)
    58fa:	f7fe be7a 	b.w	45f2 <parsePreset+0x512>
    58fe:	bf00      	nop
    5900:	200052e0 	.word	0x200052e0
    5904:	24001cf1 	.word	0x24001cf1
    5908:	20016b70 	.word	0x20016b70
    590c:	24001da5 	.word	0x24001da5
    5910:	24001e95 	.word	0x24001e95
    5914:	24001e1d 	.word	0x24001e1d
    5918:	24001d0d 	.word	0x24001d0d
    591c:	24001db9 	.word	0x24001db9
    5920:	24001ea9 	.word	0x24001ea9
    5924:	24001e31 	.word	0x24001e31
    5928:	200050a0 	.word	0x200050a0
    592c:	00000f01 	.word	0x00000f01
    5930:	00001141 	.word	0x00001141
    5934:	00001361 	.word	0x00001361
    5938:	00000ea1 	.word	0x00000ea1
    593c:	00001121 	.word	0x00001121
    5940:	00001321 	.word	0x00001321
    5944:	00000e61 	.word	0x00000e61
    5948:	00001101 	.word	0x00001101
    594c:	000012e1 	.word	0x000012e1
    5950:	00000e21 	.word	0x00000e21
    5954:	000010e1 	.word	0x000010e1
    5958:	000012a1 	.word	0x000012a1
    595c:	00000de1 	.word	0x00000de1
    5960:	000010c1 	.word	0x000010c1
    5964:	00001261 	.word	0x00001261
    5968:	00000d81 	.word	0x00000d81
    596c:	000010a1 	.word	0x000010a1
    5970:	00001221 	.word	0x00001221
    5974:	00000d21 	.word	0x00000d21
    5978:	00001081 	.word	0x00001081
    597c:	000011e1 	.word	0x000011e1
    5980:	00000cc1 	.word	0x00000cc1
    5984:	00001061 	.word	0x00001061
    5988:	000011a1 	.word	0x000011a1
    598c:	20005ae4 	.word	0x20005ae4
    5990:	00000a41 	.word	0x00000a41
    5994:	000009c1 	.word	0x000009c1
    5998:	00000981 	.word	0x00000981
    599c:	00000901 	.word	0x00000901
    59a0:	00000881 	.word	0x00000881
    59a4:	00000801 	.word	0x00000801
    59a8:	20000748 	.word	0x20000748
    59ac:	20018628 	.word	0x20018628
    59b0:	20017534 	.word	0x20017534
			params[i].objectNumber = 3;
    59b4:	f04f 0303 	mov.w	r3, #3
    59b8:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    59bc:	ed99 0a02 	vldr	s0, [r9, #8]
    59c0:	2100      	movs	r1, #0
    59c2:	f899 0018 	ldrb.w	r0, [r9, #24]
    59c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
    59ca:	4798      	blx	r3
    59cc:	ed99 0a03 	vldr	s0, [r9, #12]
    59d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
    59d4:	2101      	movs	r1, #1
    59d6:	f899 0018 	ldrb.w	r0, [r9, #24]
    59da:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    59dc:	f7ff ba14 	b.w	4e08 <parsePreset+0xd28>
			params[i].objectNumber = 2;
    59e0:	2302      	movs	r3, #2
    59e2:	f889 3018 	strb.w	r3, [r9, #24]
    59e6:	e7e9      	b.n	59bc <parsePreset+0x18dc>
			params[i].objectNumber = 1;
    59e8:	f889 a018 	strb.w	sl, [r9, #24]
    59ec:	e7e6      	b.n	59bc <parsePreset+0x18dc>
    59ee:	4a01      	ldr	r2, [pc, #4]	; (59f4 <parsePreset+0x1914>)
    59f0:	f7ff b825 	b.w	4a3e <parsePreset+0x95e>
    59f4:	20016b70 	.word	0x20016b70
    59f8:	f3af 8000 	nop.w
    59fc:	f3af 8000 	nop.w

00005a00 <HAL_I2C_SlaveRxCpltCallback>:
{
    5a00:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    5a02:	4c10      	ldr	r4, [pc, #64]	; (5a44 <HAL_I2C_SlaveRxCpltCallback+0x44>)
    5a04:	2200      	movs	r2, #0
    5a06:	2140      	movs	r1, #64	; 0x40
    5a08:	4620      	mov	r0, r4
    5a0a:	f001 fb79 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    5a0e:	2201      	movs	r2, #1
    5a10:	4620      	mov	r0, r4
    5a12:	4611      	mov	r1, r2
    5a14:	f001 fb74 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	  HAL_Delay(2);
    5a18:	2002      	movs	r0, #2
    5a1a:	f001 fb55 	bl	70c8 <__HAL_Delay_veneer>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    5a1e:	2200      	movs	r2, #0
    5a20:	2101      	movs	r1, #1
    5a22:	4620      	mov	r0, r4
    5a24:	f001 fb6c 	bl	7100 <__HAL_GPIO_WritePin_veneer>
	  HAL_Delay(2);
    5a28:	2002      	movs	r0, #2
    5a2a:	f001 fb4d 	bl	70c8 <__HAL_Delay_veneer>
	presetWaitingToParse = 4096;
    5a2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5a32:	4b05      	ldr	r3, [pc, #20]	; (5a48 <HAL_I2C_SlaveRxCpltCallback+0x48>)
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    5a34:	4905      	ldr	r1, [pc, #20]	; (5a4c <HAL_I2C_SlaveRxCpltCallback+0x4c>)
	presetWaitingToParse = 4096;
    5a36:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    5a38:	4805      	ldr	r0, [pc, #20]	; (5a50 <HAL_I2C_SlaveRxCpltCallback+0x50>)
}
    5a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    5a3e:	f001 babf 	b.w	6fc0 <__HAL_I2C_Slave_Receive_IT_veneer>
    5a42:	bf00      	nop
    5a44:	58020000 	.word	0x58020000
    5a48:	2001863c 	.word	0x2001863c
    5a4c:	30000180 	.word	0x30000180
    5a50:	20014908 	.word	0x20014908
    5a54:	f3af 8000 	nop.w
    5a58:	f3af 8000 	nop.w
    5a5c:	f3af 8000 	nop.w

00005a60 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    5a60:	4b01      	ldr	r3, [pc, #4]	; (5a68 <HAL_I2C_MasterTxCpltCallback+0x8>)
    5a62:	2200      	movs	r2, #0
    5a64:	701a      	strb	r2, [r3, #0]
}
    5a66:	4770      	bx	lr
    5a68:	20016b6c 	.word	0x20016b6c
    5a6c:	f3af 8000 	nop.w
    5a70:	f3af 8000 	nop.w
    5a74:	f3af 8000 	nop.w
    5a78:	f3af 8000 	nop.w
    5a7c:	f3af 8000 	nop.w

00005a80 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    5a80:	2100      	movs	r1, #0
	I2CErrors++;
    5a82:	4a05      	ldr	r2, [pc, #20]	; (5a98 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    5a84:	4b05      	ldr	r3, [pc, #20]	; (5a9c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    5a86:	4806      	ldr	r0, [pc, #24]	; (5aa0 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    5a88:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    5a8a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    5a8c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    5a8e:	3301      	adds	r3, #1
    5a90:	b2db      	uxtb	r3, r3
    5a92:	7013      	strb	r3, [r2, #0]
}
    5a94:	4770      	bx	lr
    5a96:	bf00      	nop
    5a98:	200149b0 	.word	0x200149b0
    5a9c:	20016b6c 	.word	0x20016b6c
    5aa0:	20018a44 	.word	0x20018a44
	...

00005ac0 <tOversampler_upsample>:
{
    5ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
    5ac4:	6807      	ldr	r7, [r0, #0]
    if (os->ratio == 1)
    5ac6:	68fb      	ldr	r3, [r7, #12]
    5ac8:	2b01      	cmp	r3, #1
    5aca:	d05b      	beq.n	5b84 <tOversampler_upsample+0xc4>
    float *pState = os->upState;                 /* State pointer */
    5acc:	69be      	ldr	r6, [r7, #24]
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
    5ace:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    5ad0:	f8d7 8014 	ldr.w	r8, [r7, #20]
    *pStateCur = input;
    5ad4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    5ad8:	ed03 0a01 	vstr	s0, [r3, #-4]
    i = os->ratio;
    5adc:	68fc      	ldr	r4, [r7, #12]
    5ade:	46a1      	mov	r9, r4
    while (i > 0U)
    5ae0:	b3ac      	cbz	r4, 5b4e <tOversampler_upsample+0x8e>
    j = 1U;
    5ae2:	f04f 0e01 	mov.w	lr, #1
        while (tapCnt > 0U)
    5ae6:	ed9f 6a29 	vldr	s12, [pc, #164]	; 5b8c <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
    5aea:	eba4 030e 	sub.w	r3, r4, lr
    5aee:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
    5af2:	b325      	cbz	r5, 5b3e <tOversampler_upsample+0x7e>
    5af4:	2c01      	cmp	r4, #1
            ptr2 += os->ratio;
    5af6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
    5afa:	d135      	bne.n	5b68 <tOversampler_upsample+0xa8>
    5afc:	462a      	mov	r2, r5
        ptr1 = pState;
    5afe:	4630      	mov	r0, r6
        sum0 = 0.0f;
    5b00:	eddf 7a22 	vldr	s15, [pc, #136]	; 5b8c <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
    5b04:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
    5b08:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
    5b0a:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
    5b0e:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
    5b10:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
    5b14:	d1f6      	bne.n	5b04 <tOversampler_upsample+0x44>
        *output++ = sum0 * os->ratio;
    5b16:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
    5b1a:	45f1      	cmp	r9, lr
        j++;
    5b1c:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
    5b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5b24:	ee67 7a27 	vmul.f32	s15, s14, s15
    5b28:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
    5b2c:	d00f      	beq.n	5b4e <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
    5b2e:	68fc      	ldr	r4, [r7, #12]
    5b30:	469e      	mov	lr, r3
    5b32:	eba4 030e 	sub.w	r3, r4, lr
    5b36:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
    5b3a:	2d00      	cmp	r5, #0
    5b3c:	d1da      	bne.n	5af4 <tOversampler_upsample+0x34>
    5b3e:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
    5b42:	45f1      	cmp	r9, lr
        j++;
    5b44:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
    5b48:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
    5b4c:	d1ef      	bne.n	5b2e <tOversampler_upsample+0x6e>
    while (tapCnt > 0U)
    5b4e:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
    5b50:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
    5b54:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
    5b56:	d005      	beq.n	5b64 <tOversampler_upsample+0xa4>
        *pStateCur++ = *pState++;
    5b58:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
    5b5c:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
    5b5e:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
    5b62:	d1f9      	bne.n	5b58 <tOversampler_upsample+0x98>
}
    5b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
    5b68:	eddf 7a08 	vldr	s15, [pc, #32]	; 5b8c <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
    5b6c:	462a      	mov	r2, r5
        ptr1 = pState;
    5b6e:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
    5b70:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
    5b74:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
    5b76:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
    5b7a:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
    5b7c:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
    5b80:	d1f6      	bne.n	5b70 <tOversampler_upsample+0xb0>
    5b82:	e7c8      	b.n	5b16 <tOversampler_upsample+0x56>
        output[0] = input;
    5b84:	ed81 0a00 	vstr	s0, [r1]
}
    5b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5b8c:	00000000 	.word	0x00000000
    5b90:	f3af 8000 	nop.w
    5b94:	f3af 8000 	nop.w
    5b98:	f3af 8000 	nop.w
    5b9c:	f3af 8000 	nop.w

00005ba0 <tOversampler_downsample>:
{
    5ba0:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
    5ba2:	6806      	ldr	r6, [r0, #0]
    if (os->ratio == 1) return input[0];
    5ba4:	68f3      	ldr	r3, [r6, #12]
    5ba6:	2b01      	cmp	r3, #1
    5ba8:	d029      	beq.n	5bfe <tOversampler_downsample+0x5e>
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
    5baa:	6a32      	ldr	r2, [r6, #32]
    pStateCur = os->downState + (numTaps - 1U);
    5bac:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
    5bb0:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
    5bb2:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
    5bb4:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
    5bb6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
        *pStateCur++ = *input++;
    5bba:	f851 cb04 	ldr.w	ip, [r1], #4
    } while (--i);
    5bbe:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
    5bc0:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
    5bc4:	d1f9      	bne.n	5bba <tOversampler_downsample+0x1a>
    while (tapCnt > 0U)
    5bc6:	b1f2      	cbz	r2, 5c06 <tOversampler_downsample+0x66>
    5bc8:	4613      	mov	r3, r2
    acc0 = 0.0f;
    5bca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 5c18 <tOversampler_downsample+0x78>
    px0 = pState;
    5bce:	4621      	mov	r1, r4
        acc0 += x0 * c0;
    5bd0:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
    5bd4:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
    5bd6:	ecf1 7a01 	vldmia	r1!, {s15}
    5bda:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
    5bde:	d1f7      	bne.n	5bd0 <tOversampler_downsample+0x30>
    pState = pState + os->ratio;
    5be0:	68f1      	ldr	r1, [r6, #12]
    while (tapCnt > 0U)
    5be2:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
    5be4:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
    5be6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
    5bea:	d006      	beq.n	5bfa <tOversampler_downsample+0x5a>
    5bec:	4602      	mov	r2, r0
        *pStateCur++ = *pState++;
    5bee:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
    5bf2:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
    5bf4:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
    5bf8:	d1f9      	bne.n	5bee <tOversampler_downsample+0x4e>
}
    5bfa:	bc70      	pop	{r4, r5, r6}
    5bfc:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
    5bfe:	ed91 0a00 	vldr	s0, [r1]
}
    5c02:	bc70      	pop	{r4, r5, r6}
    5c04:	4770      	bx	lr
    pState = pState + os->ratio;
    5c06:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
    5c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
    5c0c:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
    5c0e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 5c18 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
    5c12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
    5c16:	e7e9      	b.n	5bec <tOversampler_downsample+0x4c>
	...

00005c20 <place_step_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    5c20:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 5c8c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    5c24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    5c28:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    5c2c:	b538      	push	{r3, r4, r5, lr}
    5c2e:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    5c32:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    5c36:	460d      	mov	r5, r1
    5c38:	4604      	mov	r4, r0
    5c3a:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    5c3e:	ee38 0a67 	vsub.f32	s0, s16, s15
    5c42:	f001 f989 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5c46:	ee07 0a90 	vmov	s15, r0
    5c4a:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5c4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    5c52:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    5c56:	4b0e      	ldr	r3, [pc, #56]	; (5c90 <place_step_dd+0x70>)
    5c58:	f502 7190 	add.w	r1, r2, #288	; 0x120
    5c5c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5c60:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    5c64:	edd3 6a01 	vldr	s13, [r3, #4]
    5c68:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    5c6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    5c70:	edd2 7a00 	vldr	s15, [r2]
    5c74:	eea6 7a86 	vfma.f32	s14, s13, s12
    5c78:	eee7 7a28 	vfma.f32	s15, s14, s17
    5c7c:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    5c80:	4291      	cmp	r1, r2
    5c82:	d1ef      	bne.n	5c64 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    5c84:	ecbd 8b02 	vpop	{d8}
    5c88:	bd38      	pop	{r3, r4, r5, pc}
    5c8a:	bf00      	nop
    5c8c:	42800000 	.word	0x42800000
    5c90:	240288c0 	.word	0x240288c0
    5c94:	f3af 8000 	nop.w
    5c98:	f3af 8000 	nop.w
    5c9c:	f3af 8000 	nop.w

00005ca0 <place_slope_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    5ca0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 5d18 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    5ca4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    5ca8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    5cac:	b538      	push	{r3, r4, r5, lr}
    5cae:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    5cb2:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    5cb6:	460d      	mov	r5, r1
    5cb8:	4604      	mov	r4, r0
    5cba:	eeb0 8a60 	vmov.f32	s16, s1
    5cbe:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    5cc2:	ee38 0ae7 	vsub.f32	s0, s17, s15
    5cc6:	f001 f947 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5cca:	ee07 0a90 	vmov	s15, r0
    5cce:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5cd2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    5cd6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    5cda:	4b10      	ldr	r3, [pc, #64]	; (5d1c <place_slope_dd+0x7c>)

	slope_delta *= w;
    5cdc:	ee28 1a09 	vmul.f32	s2, s16, s18
    5ce0:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    5ce4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (float)i;
    5ce8:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    5cec:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    5cf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    5cf4:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    5cf8:	ed92 7a00 	vldr	s14, [r2]
    5cfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
    5d00:	eee6 7a86 	vfma.f32	s15, s13, s12
    5d04:	eea7 7a81 	vfma.f32	s14, s15, s2
    5d08:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    5d0c:	4291      	cmp	r1, r2
    5d0e:	d1ed      	bne.n	5cec <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    5d10:	ecbd 8b04 	vpop	{d8-d9}
    5d14:	bd38      	pop	{r3, r4, r5, pc}
    5d16:	bf00      	nop
    5d18:	42800000 	.word	0x42800000
    5d1c:	240241bc 	.word	0x240241bc

00005d20 <LEAF_clip>:
    if (min > max)
    5d20:	eeb4 0ac1 	vcmpe.f32	s0, s2
    5d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d28:	dd05      	ble.n	5d36 <LEAF_clip+0x16>
    5d2a:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
    5d2e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
    5d32:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
    5d36:	eeb4 0ae0 	vcmpe.f32	s0, s1
    5d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d3e:	dc01      	bgt.n	5d44 <LEAF_clip+0x24>
    else if (val > tempmax)
    5d40:	fe81 0a60 	vminnm.f32	s0, s2, s1
}
    5d44:	4770      	bx	lr
    5d46:	bf00      	nop
	...

00005d60 <tMBPulse_place_step_dd_noBuffer>:
{
    5d60:	b510      	push	{r4, lr}
    5d62:	ed2d 8b04 	vpush	{d8-d9}
    5d66:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 5dd0 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    5d6a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    5d6e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBPulse* c = *osc;
    5d72:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    5d74:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    5d78:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    5d7c:	eee0 7a08 	vfma.f32	s15, s0, s16
    5d80:	eeb0 0a67 	vmov.f32	s0, s15
    5d84:	f001 f8e8 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5d88:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5d8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5d90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    5d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5d98:	3301      	adds	r3, #1
	r -= (float)i;
    5d9a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5da2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5da6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    5daa:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    5dae:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5db2:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5db6:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    5dba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    5dbe:	3301      	adds	r3, #1
    5dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5dc4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    5dc8:	ecbd 8b04 	vpop	{d8-d9}
    5dcc:	bd10      	pop	{r4, pc}
    5dce:	bf00      	nop
    5dd0:	42800000 	.word	0x42800000
    5dd4:	f3af 8000 	nop.w
    5dd8:	f3af 8000 	nop.w
    5ddc:	f3af 8000 	nop.w

00005de0 <tMBTriangle_place_dd_noBuffer>:
{
    5de0:	b510      	push	{r4, lr}
    5de2:	ed2d 8b06 	vpush	{d8-d10}
    5de6:	eddf 8a1f 	vldr	s17, [pc, #124]	; 5e64 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    5dea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    5dee:	6804      	ldr	r4, [r0, #0]
{
    5df0:	eeb0 9a40 	vmov.f32	s18, s0
    5df4:	ee60 8aa8 	vmul.f32	s17, s1, s17
    5df8:	eeb0 8a41 	vmov.f32	s16, s2
    5dfc:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    5e00:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    5e04:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    5e08:	eeb0 0a67 	vmov.f32	s0, s15
    5e0c:	f001 f8a4 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5e10:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5e14:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    5e18:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (float)i;
    5e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5e20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5e24:	3301      	adds	r3, #1
	r -= (float)i;
    5e26:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5e2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e2e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    5e32:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    5e3a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5e3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5e42:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    5e46:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5e4a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    5e4e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5e52:	3301      	adds	r3, #1
    5e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5e58:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    5e5c:	ecbd 8b06 	vpop	{d8-d10}
    5e60:	bd10      	pop	{r4, pc}
    5e62:	bf00      	nop
    5e64:	42800000 	.word	0x42800000
    5e68:	f3af 8000 	nop.w
    5e6c:	f3af 8000 	nop.w
    5e70:	f3af 8000 	nop.w
    5e74:	f3af 8000 	nop.w
    5e78:	f3af 8000 	nop.w
    5e7c:	f3af 8000 	nop.w

00005e80 <tMBSineTri_place_dd_noBuffer>:
{
    5e80:	b510      	push	{r4, lr}
    5e82:	ed2d 8b06 	vpush	{d8-d10}
    5e86:	eddf 8a1f 	vldr	s17, [pc, #124]	; 5f04 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    5e8a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    5e8e:	6804      	ldr	r4, [r0, #0]
{
    5e90:	eeb0 9a40 	vmov.f32	s18, s0
    5e94:	ee60 8aa8 	vmul.f32	s17, s1, s17
    5e98:	eeb0 8a41 	vmov.f32	s16, s2
    5e9c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    5ea0:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    5ea4:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    5ea8:	eeb0 0a67 	vmov.f32	s0, s15
    5eac:	f001 f854 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5eb0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5eb4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    5eb8:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (float)i;
    5ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5ec0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5ec4:	3301      	adds	r3, #1
	r -= (float)i;
    5ec6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ece:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    5ed2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    5eda:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5ede:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5ee2:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    5ee6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5eea:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    5eee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5ef2:	3301      	adds	r3, #1
    5ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5ef8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    5efc:	ecbd 8b06 	vpop	{d8-d10}
    5f00:	bd10      	pop	{r4, pc}
    5f02:	bf00      	nop
    5f04:	42800000 	.word	0x42800000
    5f08:	f3af 8000 	nop.w
    5f0c:	f3af 8000 	nop.w
    5f10:	f3af 8000 	nop.w
    5f14:	f3af 8000 	nop.w
    5f18:	f3af 8000 	nop.w
    5f1c:	f3af 8000 	nop.w

00005f20 <tMBSaw_place_step_dd_noBuffer>:
{
    5f20:	b510      	push	{r4, lr}
    5f22:	ed2d 8b04 	vpush	{d8-d9}
    5f26:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 5f90 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    5f2a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    5f2e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBSaw* c = *osc;
    5f32:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    5f34:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    5f38:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    5f3c:	eee0 7a08 	vfma.f32	s15, s0, s16
    5f40:	eeb0 0a67 	vmov.f32	s0, s15
    5f44:	f001 f808 	bl	6f58 <__lrintf_veneer>
	r -= (float)i;
    5f48:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5f4c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5f50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    5f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5f58:	3301      	adds	r3, #1
	r -= (float)i;
    5f5a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5f62:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5f66:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    5f6a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    5f6e:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5f72:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5f76:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    5f7a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    5f7e:	3301      	adds	r3, #1
    5f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5f84:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    5f88:	ecbd 8b04 	vpop	{d8-d9}
    5f8c:	bd10      	pop	{r4, pc}
    5f8e:	bf00      	nop
    5f90:	42800000 	.word	0x42800000
    5f94:	f3af 8000 	nop.w
    5f98:	f3af 8000 	nop.w
    5f9c:	f3af 8000 	nop.w

00005fa0 <tMBSawPulse_place_step_dd_noBuffer>:
{
    5fa0:	b510      	push	{r4, lr}
    5fa2:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    5fa6:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    5fa8:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    5fac:	b36b      	cbz	r3, 600a <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    5fae:	ed9f 8a18 	vldr	s16, [pc, #96]	; 6010 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    5fb2:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    5fb6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    5fba:	ee20 8a88 	vmul.f32	s16, s1, s16
    5fbe:	eeb0 9a41 	vmov.f32	s18, s2
    5fc2:	eea8 0a88 	vfma.f32	s0, s17, s16
    5fc6:	f000 ffc7 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    5fca:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5fce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    5fd2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    5fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5fda:	3301      	adds	r3, #1
		r -= (float)i;
    5fdc:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5fe4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    5fe8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    5fec:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    5ff0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    5ff4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    5ff8:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    5ffc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    6000:	3301      	adds	r3, #1
    6002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6006:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    600a:	ecbd 8b04 	vpop	{d8-d9}
    600e:	bd10      	pop	{r4, pc}
    6010:	42800000 	.word	0x42800000
    6014:	f3af 8000 	nop.w
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <tMBSawPulse_tick>:
{
    6020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6024:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    6028:	6804      	ldr	r4, [r0, #0]
    float sawShape = 1.0f - c->shape;
    602a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    602e:	b084      	sub	sp, #16
    6030:	4607      	mov	r7, r0
    sync = c->sync;
    6032:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
    6036:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    603a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    603e:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
    6042:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    6046:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    604a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    604e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    6052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    6056:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    605a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    605e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    6062:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    6064:	f340 80d8 	ble.w	6218 <tMBSawPulse_tick+0x1f8>
    6068:	69a3      	ldr	r3, [r4, #24]
    606a:	2b00      	cmp	r3, #0
    606c:	dd65      	ble.n	613a <tMBSawPulse_tick+0x11a>
    606e:	edd4 6a05 	vldr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    6072:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    6076:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    607a:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    607e:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    6082:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    6086:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    608a:	ee37 7a27 	vadd.f32	s14, s14, s15
    608e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    6092:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    6096:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    609a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    609e:	2b00      	cmp	r3, #0
    60a0:	f040 80d1 	bne.w	6246 <tMBSawPulse_tick+0x226>
		if (sw > 0)
    60a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60a8:	f340 8210 	ble.w	64cc <tMBSawPulse_tick+0x4ac>
			if (p >= b) {
    60ac:	eeb4 8acb 	vcmpe.f32	s16, s22
    60b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60b4:	f280 81cc 	bge.w	6450 <tMBSawPulse_tick+0x430>
    60b8:	eddf 5ae3 	vldr	s11, [pc, #908]	; 6448 <tMBSawPulse_tick+0x428>
			if (p >= 1.0f) {
    60bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    60c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
    60c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60c8:	f2c0 80cb 	blt.w	6262 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
    60cc:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    60ce:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    60d2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    60d6:	2b00      	cmp	r3, #0
    60d8:	f000 81f3 	beq.w	64c2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    60dc:	eddf 7adb 	vldr	s15, [pc, #876]	; 644c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    60e0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    60e4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    60e8:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    60ec:	eea9 0a08 	vfma.f32	s0, s18, s16
    60f0:	f000 ff32 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    60f4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    60f8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    60fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6104:	eddf 5ad0 	vldr	s11, [pc, #832]	; 6448 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6108:	3301      	adds	r3, #1
		r -= (float)i;
    610a:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    610e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6112:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6116:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    611a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    611e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    6122:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6126:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    612a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    612e:	3301      	adds	r3, #1
    6130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6134:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    6138:	e093      	b.n	6262 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    613a:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    613e:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    6142:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
    6146:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    614a:	eefd 8ae7 	vcvt.s32.f32	s17, s15
    614e:	ee37 7a87 	vadd.f32	s14, s15, s14
    6152:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    6156:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
    615a:	f040 8639 	bne.w	6dd0 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
    615e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    6162:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
    6164:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    6168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
    616c:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    6170:	f340 8117 	ble.w	63a2 <tMBSawPulse_tick+0x382>
		 if (!k)
    6174:	ee1c 2a90 	vmov	r2, s25
    6178:	2a00      	cmp	r2, #0
    617a:	f040 8274 	bne.w	6666 <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
    617e:	eeb4 baed 	vcmpe.f32	s22, s27
    6182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6186:	f240 83c0 	bls.w	690a <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
    618a:	46a0      	mov	r8, r4
    if (c->active)
    618c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    6190:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
    6194:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    6198:	eef4 dae8 	vcmpe.f32	s27, s17
    619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61a0:	f280 82ad 	bge.w	66fe <tMBSawPulse_tick+0x6de>
    if (c->active)
    61a4:	b35a      	cbz	r2, 61fe <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    61a6:	eddf 8aa9 	vldr	s17, [pc, #676]	; 644c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    61aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    61ae:	ee6d da8d 	vmul.f32	s27, s27, s26
    61b2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    61b6:	eea8 0a28 	vfma.f32	s0, s16, s17
    61ba:	f000 fecd 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    61be:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    61c2:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    61c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    61ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    61ce:	3301      	adds	r3, #1
		r -= (float)i;
    61d0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    61d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    61d8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    61dc:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    61e0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    61e4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    61e8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    61ec:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    61f0:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    61f4:	3301      	adds	r3, #1
    61f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    61fa:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
    61fe:	f1b9 0f00 	cmp.w	r9, #0
    6202:	f040 8419 	bne.w	6a38 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
    6206:	eeb4 bac8 	vcmpe.f32	s22, s16
    620a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    620e:	f240 80df 	bls.w	63d0 <tMBSawPulse_tick+0x3b0>
		 if (!k)
    6212:	eddf 5a8d 	vldr	s11, [pc, #564]	; 6448 <tMBSawPulse_tick+0x428>
    6216:	e024      	b.n	6262 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    6218:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    621c:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
    6220:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    6224:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
    6228:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    622c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    6230:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    6234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    6238:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    623c:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    6240:	2b00      	cmp	r3, #0
    6242:	f43f af2f 	beq.w	60a4 <tMBSawPulse_tick+0x84>
		if (sw > 0)
    6246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    624a:	f340 81bd 	ble.w	65c8 <tMBSawPulse_tick+0x5a8>
			if (p >= 1.0f) {
    624e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    6252:	eeb4 8ae8 	vcmpe.f32	s16, s17
    6256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    625a:	f280 80ac 	bge.w	63b6 <tMBSawPulse_tick+0x396>
    c->_k = k;
    625e:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    6262:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    6266:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    6268:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    626c:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    6270:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    6274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    6278:	eea6 7a8d 	vfma.f32	s14, s13, s26
    627c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    6280:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6284:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    6288:	f89d 300d 	ldrb.w	r3, [sp, #13]
    628c:	2b00      	cmp	r3, #0
    628e:	f000 81e5 	beq.w	665c <tMBSawPulse_tick+0x63c>
    6292:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    6296:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    629a:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    629e:	2000      	movs	r0, #0
    62a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    62a4:	4d67      	ldr	r5, [pc, #412]	; (6444 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    62a6:	ebae 0300 	sub.w	r3, lr, r0
    62aa:	b29b      	uxth	r3, r3
    62ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
    62b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    62b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    62b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    62bc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    62c0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    62c4:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    62c8:	b289      	uxth	r1, r1
    62ca:	f8bd 900e 	ldrh.w	r9, [sp, #14]
    62ce:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    62d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    62d4:	fa1f f888 	uxth.w	r8, r8
    62d8:	fa1f f989 	uxth.w	r9, r9
    62dc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    62e0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    62e4:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    62e8:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    62ec:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    62f0:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    62f2:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    62f6:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    62fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    62fe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    6302:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    6306:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    630a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    630c:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    6310:	edd9 6a01 	vldr	s13, [r9, #4]
    6314:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    6318:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    631c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    6320:	eee6 7a26 	vfma.f32	s15, s12, s13
    6324:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    6328:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    632c:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    6330:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    6332:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    6336:	d32e      	bcc.n	6396 <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
    6338:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    633c:	3001      	adds	r0, #1
    633e:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
    6342:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    6344:	4282      	cmp	r2, r0
			c->numBLEPs--;
    6346:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    634a:	dcac      	bgt.n	62a6 <tMBSawPulse_tick+0x286>
    634c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    6350:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    6354:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    6358:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    635c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    635e:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    6362:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    6366:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    636a:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    636e:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    6372:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    6376:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    637a:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    637c:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    6380:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    6384:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    6388:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    638c:	b004      	add	sp, #16
    638e:	ecbd 8b0e 	vpop	{d8-d14}
    6392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    6396:	f89d 300d 	ldrb.w	r3, [sp, #13]
    639a:	3001      	adds	r0, #1
    639c:	4283      	cmp	r3, r0
    639e:	dc82      	bgt.n	62a6 <tMBSawPulse_tick+0x286>
    63a0:	e7d4      	b.n	634c <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
    63a2:	f100 8229 	bmi.w	67f8 <tMBSawPulse_tick+0x7d8>
		 if (!k)
    63a6:	ee1c 2a90 	vmov	r2, s25
    63aa:	2a00      	cmp	r2, #0
    63ac:	f040 8197 	bne.w	66de <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
    63b0:	eeb0 8a68 	vmov.f32	s16, s17
    63b4:	e72d      	b.n	6212 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    63b6:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    63b8:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    63bc:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    63c0:	2b00      	cmp	r3, #0
    63c2:	f040 8161 	bne.w	6688 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
    63c6:	eeb4 bac8 	vcmpe.f32	s22, s16
    63ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    63ce:	d878      	bhi.n	64c2 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
    63d0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    63d2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    63d6:	2b00      	cmp	r3, #0
    63d8:	f000 8151 	beq.w	667e <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
    63dc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 644c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    63e0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    63e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    63e8:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
    63ec:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    63f0:	eea8 0a89 	vfma.f32	s0, s17, s18
    63f4:	f000 fdb0 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    63f8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    63fc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6400:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6404:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6408:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    640a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    640e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6416:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    641a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    641e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6422:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6426:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    642a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    642e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6432:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6436:	3301      	adds	r3, #1
    6438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    643c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    6440:	e70f      	b.n	6262 <tMBSawPulse_tick+0x242>
    6442:	bf00      	nop
    6444:	240288c0 	.word	0x240288c0
    6448:	00000000 	.word	0x00000000
    644c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    6450:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    6452:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    6456:	2b00      	cmp	r3, #0
    6458:	f000 814c 	beq.w	66f4 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
    645c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 644c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    6460:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    6464:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    6468:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    646c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    6470:	eea9 0aa8 	vfma.f32	s0, s19, s17
    6474:	f000 fd70 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6478:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    647c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6480:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6488:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    648a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    648e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6496:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    649a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    649e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    64a2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    64a6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    64aa:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    64ae:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    64b2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    64b6:	3301      	adds	r3, #1
    64b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64bc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    64c0:	e5fc      	b.n	60bc <tMBSawPulse_tick+0x9c>
				x = 0.5f;
    64c2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    64c6:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 6448 <tMBSawPulse_tick+0x428>
    64ca:	e6ca      	b.n	6262 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
    64cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
    64d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    64d4:	f57f ae9d 	bpl.w	6212 <tMBSawPulse_tick+0x1f2>
    64d8:	eef5 7a40 	vcmp.f32	s15, #0.0
    64dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    64e0:	f57f ae97 	bpl.w	6212 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    64e4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    64e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    64ea:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    64ee:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    64f2:	b353      	cbz	r3, 654a <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
    64f4:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    64f8:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 644c <tMBSawPulse_tick+0x42c>
    64fc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    6500:	eea8 0a29 	vfma.f32	s0, s16, s19
    6504:	f000 fd28 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6508:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    650c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6510:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6518:	4ab2      	ldr	r2, [pc, #712]	; (67e4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    651a:	3301      	adds	r3, #1
		r -= (float)i;
    651c:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6524:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6528:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    652c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6530:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    6534:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6538:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    653c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6540:	3301      	adds	r3, #1
    6542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6546:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    654a:	eeb4 bae8 	vcmpe.f32	s22, s17
    654e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6552:	f340 8446 	ble.w	6de2 <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
    6556:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    6558:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    655c:	2b00      	cmp	r3, #0
    655e:	f000 8327 	beq.w	6bb0 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
    6562:	eddf 7aa4 	vldr	s15, [pc, #656]	; 67f4 <tMBSawPulse_tick+0x7d4>
    6566:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    656a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    656e:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    6572:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6576:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    657a:	eea9 0a29 	vfma.f32	s0, s18, s19
    657e:	f000 fceb 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6582:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6586:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    658a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    658e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6592:	eddf 5a97 	vldr	s11, [pc, #604]	; 67f0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6596:	3301      	adds	r3, #1
		r -= (float)i;
    6598:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    659c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    65a0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    65a4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    65a8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    65ac:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    65b0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    65b4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    65b8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    65bc:	3301      	adds	r3, #1
    65be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    65c2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    65c6:	e64c      	b.n	6262 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
    65c8:	f57f ae49 	bpl.w	625e <tMBSawPulse_tick+0x23e>
			if (p < b) {
    65cc:	eeb4 8acb 	vcmpe.f32	s16, s22
    65d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65d4:	f100 80cd 	bmi.w	6772 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
    65d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    65dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65e0:	f57f ae3d 	bpl.w	625e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    65e4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    65e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    65ea:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    65ee:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    65f2:	2b00      	cmp	r3, #0
    65f4:	f000 8302 	beq.w	6bfc <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
    65f8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    65fc:	eddf 9a7d 	vldr	s19, [pc, #500]	; 67f4 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
    6600:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    6604:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    6608:	eeb0 0a6a 	vmov.f32	s0, s21
    660c:	eea9 0a29 	vfma.f32	s0, s18, s19
    6610:	f000 fca2 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6614:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6618:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    661c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6624:	4a6f      	ldr	r2, [pc, #444]	; (67e4 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6626:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6628:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    662c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6630:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    6634:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6638:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    663c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6640:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    6644:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6648:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    664c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6650:	3301      	adds	r3, #1
    6652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6656:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    665a:	e602      	b.n	6262 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    665c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    6660:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    6664:	e674      	b.n	6350 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
    6666:	eef4 dae9 	vcmpe.f32	s27, s19
    666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    666e:	f280 8159 	bge.w	6924 <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
    6672:	46a0      	mov	r8, r4
    if (c->active)
    6674:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    6678:	ee1c 9a90 	vmov	r9, s25
    667c:	e592      	b.n	61a4 <tMBSawPulse_tick+0x184>
    667e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    6682:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    6686:	e5ec      	b.n	6262 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
    6688:	eddf 9a5a 	vldr	s19, [pc, #360]	; 67f4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    668c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    6690:	ee69 9a29 	vmul.f32	s19, s18, s19
    6694:	eea9 0a88 	vfma.f32	s0, s19, s16
    6698:	f000 fc5e 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    669c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    66a0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    66a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    66a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    66ac:	3301      	adds	r3, #1
		r -= (float)i;
    66ae:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    66b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    66b6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    66ba:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    66be:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    66c2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    66c6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    66ca:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    66ce:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    66d2:	3301      	adds	r3, #1
    66d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    66d8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    66dc:	e673      	b.n	63c6 <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
    66de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    66e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66e6:	f100 815b 	bmi.w	69a0 <tMBSawPulse_tick+0x980>
    c->_k = k;
    66ea:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    66ee:	eeb0 8a68 	vmov.f32	s16, s17
    66f2:	e5b6      	b.n	6262 <tMBSawPulse_tick+0x242>
    66f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    66f8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    66fc:	e4de      	b.n	60bc <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
    66fe:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    6702:	2a00      	cmp	r2, #0
    6704:	f000 810b 	beq.w	691e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
    6708:	eddf 9a3a 	vldr	s19, [pc, #232]	; 67f4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    670c:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
    6710:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    6714:	f04f 0900 	mov.w	r9, #0
    6718:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
    671c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    6720:	eeac 0aa9 	vfma.f32	s0, s25, s19
    6724:	f000 fc18 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6728:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    672c:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6730:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6738:	3301      	adds	r3, #1
		r -= (float)i;
    673a:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    673e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6742:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6746:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    674a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    674e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    6752:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6756:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    675a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    675e:	3301      	adds	r3, #1
    6760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6764:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6768:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    676c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    6770:	e518      	b.n	61a4 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
    6772:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    6774:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    6778:	ee1c 3a90 	vmov	r3, s25
    677c:	2b00      	cmp	r3, #0
    677e:	f000 820d 	beq.w	6b9c <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
    6782:	eddf 9a1c 	vldr	s19, [pc, #112]	; 67f4 <tMBSawPulse_tick+0x7d4>
    6786:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    678a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    678e:	eddf ca16 	vldr	s25, [pc, #88]	; 67e8 <tMBSawPulse_tick+0x7c8>
    6792:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    6796:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    679a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    679e:	f000 fbdb 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    67a2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    67a6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    67aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    67ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    67b2:	3301      	adds	r3, #1
		r -= (float)i;
    67b4:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    67b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    67bc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    67c0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    67c4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    67c8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    67cc:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    67d0:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    67d4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    67d8:	3301      	adds	r3, #1
    67da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67de:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    67e2:	e6f9      	b.n	65d8 <tMBSawPulse_tick+0x5b8>
    67e4:	bf800000 	.word	0xbf800000
    67e8:	00000000 	.word	0x00000000
    67ec:	00000001 	.word	0x00000001
    67f0:	00000000 	.word	0x00000000
    67f4:	42800000 	.word	0x42800000
		 if (!k)
    67f8:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    67fc:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    6800:	2a00      	cmp	r2, #0
    6802:	f040 80cf 	bne.w	69a4 <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
    6806:	eef5 da40 	vcmp.f32	s27, #0.0
    680a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    680e:	d571      	bpl.n	68f4 <tMBSawPulse_tick+0x8d4>
    if (c->active)
    6810:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    6814:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    6818:	2b00      	cmp	r3, #0
    681a:	f040 8231 	bne.w	6c80 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
    681e:	eeb4 baed 	vcmpe.f32	s22, s27
    6822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6826:	f340 82d7 	ble.w	6dd8 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
    682a:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    682e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    6832:	2b00      	cmp	r3, #0
    6834:	f000 81d6 	beq.w	6be4 <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
    6838:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    683c:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 67f4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    6840:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    6844:	ed5f ca17 	vldr	s25, [pc, #-92]	; 67ec <tMBSawPulse_tick+0x7cc>
    6848:	ee69 9a29 	vmul.f32	s19, s18, s19
    684c:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    6850:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    6854:	eea9 0aa8 	vfma.f32	s0, s19, s17
    6858:	f000 fb7e 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    685c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6860:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6864:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6868:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    686c:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    686e:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6876:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    687a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    687e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6882:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6886:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    688a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    688e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6892:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6896:	3301      	adds	r3, #1
    6898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    689c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    68a0:	eeb4 bace 	vcmpe.f32	s22, s28
    68a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    68a8:	f77f acd9 	ble.w	625e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    68ac:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    68ae:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    68b2:	2b00      	cmp	r3, #0
    68b4:	f43f ae05 	beq.w	64c2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    68b8:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 67f4 <tMBSawPulse_tick+0x7d4>
    68bc:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    68c0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    68c4:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    68c8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    68cc:	eea9 0a0e 	vfma.f32	s0, s18, s28
    68d0:	f000 fb42 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    68d4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    68d8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    68dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    68e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    68e4:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 67f0 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    68e8:	3301      	adds	r3, #1
		r -= (float)i;
    68ea:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    68ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68f2:	e655      	b.n	65a0 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
    68f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    68f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    68fc:	f100 814b 	bmi.w	6b96 <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
    6900:	eeb0 8a4e 	vmov.f32	s16, s28
    6904:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 67f0 <tMBSawPulse_tick+0x7d0>
    6908:	e4ab      	b.n	6262 <tMBSawPulse_tick+0x242>
    if (c->active)
    690a:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    690e:	2b00      	cmp	r3, #0
    6910:	f040 8109 	bne.w	6b26 <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
    6914:	eef4 dae9 	vcmpe.f32	s27, s19
    6918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    691c:	db0f      	blt.n	693e <tMBSawPulse_tick+0x91e>
				x = 0.5f;
    691e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6922:	e470      	b.n	6206 <tMBSawPulse_tick+0x1e6>
    if (c->active)
    6924:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    6928:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    692c:	f1b9 0f00 	cmp.w	r9, #0
    6930:	f040 8084 	bne.w	6a3c <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
    6934:	eeb4 baed 	vcmpe.f32	s22, s27
    6938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    693c:	d8ef      	bhi.n	691e <tMBSawPulse_tick+0x8fe>
    if (c->active)
    693e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    6942:	2b00      	cmp	r3, #0
    6944:	d0eb      	beq.n	691e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
    6946:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 67f4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    694a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    694e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6952:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    6956:	eea8 0a28 	vfma.f32	s0, s16, s17
    695a:	f000 fafd 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    695e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6962:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6966:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    696a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    696e:	3301      	adds	r3, #1
		r -= (float)i;
    6970:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6978:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    697c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6980:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6984:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    6988:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    698c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6990:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6994:	3301      	adds	r3, #1
    6996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    699a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    699e:	e432      	b.n	6206 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    69a0:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    69a4:	eeb4 baed 	vcmpe.f32	s22, s27
    69a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69ac:	f300 8108 	bgt.w	6bc0 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
    69b0:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    69b4:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    69b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69bc:	f100 8126 	bmi.w	6c0c <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
    69c0:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    69c4:	b38b      	cbz	r3, 6a2a <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
    69c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    69ca:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 67f4 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
    69ce:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    69d2:	ee69 9a29 	vmul.f32	s19, s18, s19
    69d6:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    69da:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
    69de:	eea9 0aae 	vfma.f32	s0, s19, s29
    69e2:	f000 fab9 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    69e6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    69ea:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    69ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    69f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    69f6:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    69f8:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    69fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6a00:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    6a04:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6a08:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6a0c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6a10:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    6a14:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6a18:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6a1c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6a20:	3301      	adds	r3, #1
    6a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a26:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    6a2a:	ee1c 3a90 	vmov	r3, s25
    6a2e:	2b00      	cmp	r3, #0
    6a30:	f47f af36 	bne.w	68a0 <tMBSawPulse_tick+0x880>
    6a34:	683d      	ldr	r5, [r7, #0]
    6a36:	e6fa      	b.n	682e <tMBSawPulse_tick+0x80e>
    6a38:	683d      	ldr	r5, [r7, #0]
    6a3a:	e780      	b.n	693e <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
    6a3c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    6a40:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 67f4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    6a44:	ee78 aa2d 	vadd.f32	s21, s16, s27
    6a48:	9301      	str	r3, [sp, #4]
    6a4a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    6a4e:	eeb0 0a6c 	vmov.f32	s0, s25
    6a52:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    6a56:	f000 fa7f 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6a5a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6a5e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6a62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
    6a6a:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6a6c:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    6a6e:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6a72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
    6a76:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    6a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    6a7e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6a82:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6a86:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6a8a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    6a8e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6a92:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6a96:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    6a9a:	f102 0201 	add.w	r2, r2, #1
    6a9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    6aa2:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6aa6:	f8d7 8000 	ldr.w	r8, [r7]
    6aaa:	4645      	mov	r5, r8
    if (c->active)
    6aac:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    6ab0:	f200 8175 	bhi.w	6d9e <tMBSawPulse_tick+0xd7e>
    if (c->active)
    6ab4:	2a00      	cmp	r2, #0
    6ab6:	f43f af42 	beq.w	693e <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6aba:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
    6abe:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
    6ac2:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
    6ac6:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6aca:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    6ace:	eea9 0aa8 	vfma.f32	s0, s19, s17
    6ad2:	f000 fa41 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6ad6:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6ada:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6ade:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6ae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6ae6:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6ae8:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6af0:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    6af4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6af8:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6afc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6b00:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    6b04:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6b08:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6b0c:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    6b10:	444b      	add	r3, r9
    6b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b16:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6b1a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    6b1e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    6b22:	f7ff bb3f 	b.w	61a4 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
    6b26:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 67f4 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6b2a:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    6b2e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    6b32:	f04f 0901 	mov.w	r9, #1
    6b36:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    6b3a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    6b3e:	eea8 0aa9 	vfma.f32	s0, s17, s19
    6b42:	f000 fa09 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6b46:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6b4a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6b4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6b52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6b56:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    6b58:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6b60:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    6b64:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6b68:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6b6c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6b70:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6b74:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6b78:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6b7c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    6b80:	444b      	add	r3, r9
    6b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b86:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6b8a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    6b8e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    6b92:	f7ff baff 	b.w	6194 <tMBSawPulse_tick+0x174>
    6b96:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    6b9a:	e711      	b.n	69c0 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
    6b9c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    6ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ba4:	f100 8100 	bmi.w	6da8 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
    6ba8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6bac:	f7ff bb57 	b.w	625e <tMBSawPulse_tick+0x23e>
				x = 0.5f;
    6bb0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6bb4:	eddf 5a8f 	vldr	s11, [pc, #572]	; 6df4 <tMBSawPulse_tick+0xdd4>
    6bb8:	eeb0 8a68 	vmov.f32	s16, s17
    6bbc:	f7ff bb51 	b.w	6262 <tMBSawPulse_tick+0x242>
    if (c->active)
    6bc0:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    6bc4:	ee1c 2a90 	vmov	r2, s25
    6bc8:	2a00      	cmp	r2, #0
    6bca:	f040 80b6 	bne.w	6d3a <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
    6bce:	eef5 dac0 	vcmpe.f32	s27, #0.0
    6bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bd6:	f100 80ef 	bmi.w	6db8 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
    6bda:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    6bde:	eeb0 8a4e 	vmov.f32	s16, s28
    6be2:	e722      	b.n	6a2a <tMBSawPulse_tick+0xa0a>
			if (p < b) {
    6be4:	eeb4 bace 	vcmpe.f32	s22, s28
    6be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bec:	f73f ac69 	bgt.w	64c2 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
    6bf0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    6bf4:	eddf ca80 	vldr	s25, [pc, #512]	; 6df8 <tMBSawPulse_tick+0xdd8>
    6bf8:	f7ff bb31 	b.w	625e <tMBSawPulse_tick+0x23e>
				x = -0.5f;
    6bfc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    6c00:	eeb0 8a67 	vmov.f32	s16, s15
    6c04:	eef0 5a68 	vmov.f32	s11, s17
    6c08:	f7ff bb2b 	b.w	6262 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
    6c0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6c10:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    6c14:	2b00      	cmp	r3, #0
    6c16:	f000 80cf 	beq.w	6db8 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
    6c1a:	ed9f 8a78 	vldr	s16, [pc, #480]	; 6dfc <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
    6c1e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    6c22:	eddf ca75 	vldr	s25, [pc, #468]	; 6df8 <tMBSawPulse_tick+0xdd8>
    6c26:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    6c2a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    6c2e:	eea8 0a28 	vfma.f32	s0, s16, s17
    6c32:	f000 f991 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6c36:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c3a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6c3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6c46:	4a6e      	ldr	r2, [pc, #440]	; (6e00 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c48:	3301      	adds	r3, #1
		r -= (float)i;
    6c4a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6c52:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c56:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6c5a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6c5e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    6c62:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6c66:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6c6a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6c6e:	3301      	adds	r3, #1
    6c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c74:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6c78:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    6c7a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    6c7e:	e69f      	b.n	69c0 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
    6c80:	eddf 9a5e 	vldr	s19, [pc, #376]	; 6dfc <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
    6c84:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    6c88:	ee69 9a29 	vmul.f32	s19, s18, s19
    6c8c:	eea9 0aa8 	vfma.f32	s0, s19, s17
    6c90:	f000 f962 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6c94:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6c98:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6c9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6ca4:	4a56      	ldr	r2, [pc, #344]	; (6e00 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6ca6:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    6ca8:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
    6cb0:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    6cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    6cb8:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6cbc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6cc0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6cc4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    6cc8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6ccc:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6cd0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    6cd4:	f103 0301 	add.w	r3, r3, #1
    6cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6cdc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6ce0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    6ce2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    6ce6:	dd6e      	ble.n	6dc6 <tMBSawPulse_tick+0xda6>
    if (c->active)
    6ce8:	2b00      	cmp	r3, #0
    6cea:	f43f ad9e 	beq.w	682a <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
    6cee:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    6cf2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    6cf6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6cfa:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    6cfe:	eea8 0a29 	vfma.f32	s0, s16, s19
    6d02:	f000 f929 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6d06:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d0a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6d0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d16:	3301      	adds	r3, #1
		r -= (float)i;
    6d18:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6d20:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d24:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6d28:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6d2c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    6d30:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6d34:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6d38:	e797      	b.n	6c6a <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
    6d3a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 6dfc <tMBSawPulse_tick+0xddc>
    6d3e:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    6d42:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    6d46:	ee0c 3a90 	vmov	s25, r3
    6d4a:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    6d4e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    6d52:	eea9 0a88 	vfma.f32	s0, s19, s16
    6d56:	f000 f8ff 	bl	6f58 <__lrintf_veneer>
		r -= (float)i;
    6d5a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d5e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    6d62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
    6d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d6a:	3301      	adds	r3, #1
		r -= (float)i;
    6d6c:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    6d74:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    6d78:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    6d7c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    6d80:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    6d84:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    6d88:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    6d8c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    6d90:	3301      	adds	r3, #1
    6d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d96:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    6d9a:	683d      	ldr	r5, [r7, #0]
    6d9c:	e608      	b.n	69b0 <tMBSawPulse_tick+0x990>
    6d9e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    6da2:	4699      	mov	r9, r3
    6da4:	f7ff b9fe 	b.w	61a4 <tMBSawPulse_tick+0x184>
				p += 1.0f;
    6da8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    6dac:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    6db0:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    6db4:	f7ff ba55 	b.w	6262 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
    6db8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    6dbc:	eddf ca0e 	vldr	s25, [pc, #56]	; 6df8 <tMBSawPulse_tick+0xdd8>
    6dc0:	eeb0 8a4e 	vmov.f32	s16, s28
    6dc4:	e56c      	b.n	68a0 <tMBSawPulse_tick+0x880>
    6dc6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    6dca:	eddf ca0b 	vldr	s25, [pc, #44]	; 6df8 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
    6dce:	e5f7      	b.n	69c0 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
    6dd0:	eeb0 8a68 	vmov.f32	s16, s17
    6dd4:	f7ff b95f 	b.w	6096 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
    6dd8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    6ddc:	eddf ca06 	vldr	s25, [pc, #24]	; 6df8 <tMBSawPulse_tick+0xdd8>
    6de0:	e6fd      	b.n	6bde <tMBSawPulse_tick+0xbbe>
    6de2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    6de6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    6dea:	eeb0 8a68 	vmov.f32	s16, s17
    6dee:	f7ff ba38 	b.w	6262 <tMBSawPulse_tick+0x242>
    6df2:	bf00      	nop
    6df4:	00000000 	.word	0x00000000
    6df8:	00000001 	.word	0x00000001
    6dfc:	42800000 	.word	0x42800000
    6e00:	bf800000 	.word	0xbf800000
    6e04:	f3af 8000 	nop.w
    6e08:	f3af 8000 	nop.w
    6e0c:	f3af 8000 	nop.w
    6e10:	f3af 8000 	nop.w
    6e14:	f3af 8000 	nop.w
    6e18:	f3af 8000 	nop.w
    6e1c:	f3af 8000 	nop.w

00006e20 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    6e20:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    6e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    6e26:	eddf 6a14 	vldr	s13, [pc, #80]	; 6e78 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    6e2a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    6e2e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    6e32:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    6e36:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    6e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    6e3e:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    6e42:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    6e46:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    6e4a:	dc0c      	bgt.n	6e66 <tMBSawPulse_setFreq+0x46>
    6e4c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 6e7c <tMBSawPulse_setFreq+0x5c>
    6e50:	eeb4 0ae7 	vcmpe.f32	s0, s15
    6e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e58:	d405      	bmi.n	6e66 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    6e5a:	2201      	movs	r2, #1
    6e5c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    6e60:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    6e64:	4770      	bx	lr
    	c->gain = 0.0f;
    6e66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 6e80 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    6e6a:	2200      	movs	r2, #0
    6e6c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    6e70:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    6e74:	4770      	bx	lr
    6e76:	bf00      	nop
    6e78:	45bb8000 	.word	0x45bb8000
    6e7c:	c5bb8000 	.word	0xc5bb8000
    6e80:	00000000 	.word	0x00000000
    6e84:	f3af 8000 	nop.w
    6e88:	f3af 8000 	nop.w
    6e8c:	f3af 8000 	nop.w
    6e90:	f3af 8000 	nop.w
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    6ea0:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    6ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
    6ea6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    6eaa:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
    6eae:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
    6eb2:	eef1 7a67 	vneg.f32	s15, s15
    6eb6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    6eba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    6ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ec2:	eef4 6ac7 	vcmpe.f32	s13, s14
    6ec6:	bfcc      	ite	gt
    6ec8:	2201      	movgt	r2, #1
    6eca:	2200      	movle	r2, #0
    6ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ed0:	f002 0201 	and.w	r2, r2, #1
    6ed4:	bf88      	it	hi
    6ed6:	2200      	movhi	r2, #0
    6ed8:	b122      	cbz	r2, 6ee4 <tMBSawPulse_sync+0x44>
    6eda:	eeb5 0a40 	vcmp.f32	s0, #0.0
    6ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ee2:	da04      	bge.n	6eee <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    6ee4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 6efc <tMBSawPulse_sync+0x5c>
    6ee8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    6eec:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    6eee:	ee37 7a66 	vsub.f32	s14, s14, s13
    6ef2:	ee27 7a06 	vmul.f32	s14, s14, s12
    6ef6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    6efa:	4770      	bx	lr
    6efc:	00000000 	.word	0x00000000

00006f00 <__tCompressor_tick_veneer>:
    6f00:	f85f f000 	ldr.w	pc, [pc]	; 6f04 <__tCompressor_tick_veneer+0x4>
    6f04:	240107b9 	.word	0x240107b9

00006f08 <__tDiodeFilter_tick_veneer>:
    6f08:	f85f f000 	ldr.w	pc, [pc]	; 6f0c <__tDiodeFilter_tick_veneer+0x4>
    6f0c:	24011ff9 	.word	0x24011ff9

00006f10 <__tMBSaw_setFreq_veneer>:
    6f10:	f85f f000 	ldr.w	pc, [pc]	; 6f14 <__tMBSaw_setFreq_veneer+0x4>
    6f14:	240166e1 	.word	0x240166e1

00006f18 <__tMBSineTri_tick_veneer>:
    6f18:	f85f f000 	ldr.w	pc, [pc]	; 6f1c <__tMBSineTri_tick_veneer+0x4>
    6f1c:	240150fd 	.word	0x240150fd

00006f20 <__audioTickString_veneer>:
    6f20:	f85f f000 	ldr.w	pc, [pc]	; 6f24 <__audioTickString_veneer+0x4>
    6f24:	240017b1 	.word	0x240017b1

00006f28 <__powf_veneer>:
    6f28:	f85f f000 	ldr.w	pc, [pc]	; 6f2c <__powf_veneer+0x4>
    6f2c:	240188a1 	.word	0x240188a1

00006f30 <__tCrusher_setRound_veneer>:
    6f30:	f85f f000 	ldr.w	pc, [pc]	; 6f34 <__tCrusher_setRound_veneer+0x4>
    6f34:	24010701 	.word	0x24010701

00006f38 <__tSVF_setFreqFast_veneer>:
    6f38:	f85f f000 	ldr.w	pc, [pc]	; 6f3c <__tSVF_setFreqFast_veneer+0x4>
    6f3c:	240113d1 	.word	0x240113d1

00006f40 <__tHighpass_tick_veneer>:
    6f40:	f85f f000 	ldr.w	pc, [pc]	; 6f44 <__tHighpass_tick_veneer+0x4>
    6f44:	24011511 	.word	0x24011511

00006f48 <__tLadderFilter_tick_veneer>:
    6f48:	f85f f000 	ldr.w	pc, [pc]	; 6f4c <__tLadderFilter_tick_veneer+0x4>
    6f4c:	240126f1 	.word	0x240126f1

00006f50 <__tMBPulse_tick_veneer>:
    6f50:	f85f f000 	ldr.w	pc, [pc]	; 6f54 <__tMBPulse_tick_veneer+0x4>
    6f54:	2401342d 	.word	0x2401342d

00006f58 <__lrintf_veneer>:
    6f58:	f85f f000 	ldr.w	pc, [pc]	; 6f5c <__lrintf_veneer+0x4>
    6f5c:	240187f1 	.word	0x240187f1

00006f60 <__fasterexpf_veneer>:
    6f60:	f85f f000 	ldr.w	pc, [pc]	; 6f64 <__fasterexpf_veneer+0x4>
    6f64:	24012a21 	.word	0x24012a21

00006f68 <__audioTickString2_veneer>:
    6f68:	f85f f000 	ldr.w	pc, [pc]	; 6f6c <__audioTickString2_veneer+0x4>
    6f6c:	240019d9 	.word	0x240019d9

00006f70 <__tLadderFilter_setFreqFast_veneer>:
    6f70:	f85f f000 	ldr.w	pc, [pc]	; 6f74 <__tLadderFilter_setFreqFast_veneer+0x4>
    6f74:	2401293d 	.word	0x2401293d

00006f78 <__tanhf_veneer>:
    6f78:	f85f f000 	ldr.w	pc, [pc]	; 6f7c <__tanhf_veneer+0x4>
    6f7c:	24018bb9 	.word	0x24018bb9

00006f80 <__tMBPulse_setFreq_veneer>:
    6f80:	f85f f000 	ldr.w	pc, [pc]	; 6f84 <__tMBPulse_setFreq_veneer+0x4>
    6f84:	24013edd 	.word	0x24013edd

00006f88 <__tMBPulse_setWidth_veneer>:
    6f88:	f85f f000 	ldr.w	pc, [pc]	; 6f8c <__tMBPulse_setWidth_veneer+0x4>
    6f8c:	24013efd 	.word	0x24013efd

00006f90 <__arm_sin_f32_veneer>:
    6f90:	f85f f000 	ldr.w	pc, [pc]	; 6f94 <__arm_sin_f32_veneer+0x4>
    6f94:	24017e79 	.word	0x24017e79

00006f98 <__tMBSaw_tick_veneer>:
    6f98:	f85f f000 	ldr.w	pc, [pc]	; 6f9c <__tMBSaw_tick_veneer+0x4>
    6f9c:	24016265 	.word	0x24016265

00006fa0 <__tLivingString2_setLevMode_veneer>:
    6fa0:	f85f f000 	ldr.w	pc, [pc]	; 6fa4 <__tLivingString2_setLevMode_veneer+0x4>
    6fa4:	240179c5 	.word	0x240179c5

00006fa8 <__waitForNewPresetDataOverI2C_veneer>:
    6fa8:	f85f f000 	ldr.w	pc, [pc]	; 6fac <__waitForNewPresetDataOverI2C_veneer+0x4>
    6fac:	240040b9 	.word	0x240040b9

00006fb0 <__tMBTriangle_sync_veneer>:
    6fb0:	f85f f000 	ldr.w	pc, [pc]	; 6fb4 <__tMBTriangle_sync_veneer+0x4>
    6fb4:	24015005 	.word	0x24015005

00006fb8 <__tMBSaw_sync_veneer>:
    6fb8:	f85f f000 	ldr.w	pc, [pc]	; 6fbc <__tMBSaw_sync_veneer+0x4>
    6fbc:	24016701 	.word	0x24016701

00006fc0 <__HAL_I2C_Slave_Receive_IT_veneer>:
    6fc0:	f85f f000 	ldr.w	pc, [pc]	; 6fc4 <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    6fc4:	24006d65 	.word	0x24006d65

00006fc8 <__tExpSmooth_setDest_veneer>:
    6fc8:	f85f f000 	ldr.w	pc, [pc]	; 6fcc <__tExpSmooth_setDest_veneer+0x4>
    6fcc:	2401103d 	.word	0x2401103d

00006fd0 <__tMBTriangle_tick_veneer>:
    6fd0:	f85f f000 	ldr.w	pc, [pc]	; 6fd4 <__tMBTriangle_tick_veneer+0x4>
    6fd4:	24014005 	.word	0x24014005

00006fd8 <__tLadderFilter_setQ_veneer>:
    6fd8:	f85f f000 	ldr.w	pc, [pc]	; 6fdc <__tLadderFilter_setQ_veneer+0x4>
    6fdc:	24012985 	.word	0x24012985

00006fe0 <__LEAF_tanh_veneer>:
    6fe0:	f85f f000 	ldr.w	pc, [pc]	; 6fe4 <__LEAF_tanh_veneer+0x4>
    6fe4:	24012b49 	.word	0x24012b49

00006fe8 <__tDiodeFilter_setQ_veneer>:
    6fe8:	f85f f000 	ldr.w	pc, [pc]	; 6fec <__tDiodeFilter_setQ_veneer+0x4>
    6fec:	24012641 	.word	0x24012641

00006ff0 <__tMBTriangle_setFreq_veneer>:
    6ff0:	f85f f000 	ldr.w	pc, [pc]	; 6ff4 <__tMBTriangle_setFreq_veneer+0x4>
    6ff4:	24014fc1 	.word	0x24014fc1

00006ff8 <__tCycle_setFreq_veneer>:
    6ff8:	f85f f000 	ldr.w	pc, [pc]	; 6ffc <__tCycle_setFreq_veneer+0x4>
    6ffc:	240132a5 	.word	0x240132a5

00007000 <__tADSRT_setLeakFactor_veneer>:
    7000:	f85f f000 	ldr.w	pc, [pc]	; 7004 <__tADSRT_setLeakFactor_veneer+0x4>
    7004:	24010afd 	.word	0x24010afd

00007008 <__tCycle_tick_veneer>:
    7008:	f85f f000 	ldr.w	pc, [pc]	; 700c <__tCycle_tick_veneer+0x4>
    700c:	24013259 	.word	0x24013259

00007010 <__tCrusher_setSamplingRatio_veneer>:
    7010:	f85f f000 	ldr.w	pc, [pc]	; 7014 <__tCrusher_setSamplingRatio_veneer+0x4>
    7014:	24010709 	.word	0x24010709

00007018 <__memset_veneer>:
    7018:	f85f f000 	ldr.w	pc, [pc]	; 701c <__memset_veneer+0x4>
    701c:	24017fa9 	.word	0x24017fa9

00007020 <__tVZFilter_tickEfficient_veneer>:
    7020:	f85f f000 	ldr.w	pc, [pc]	; 7024 <__tVZFilter_tickEfficient_veneer+0x4>
    7024:	24011555 	.word	0x24011555

00007028 <__tSVF_setQ_veneer>:
    7028:	f85f f000 	ldr.w	pc, [pc]	; 702c <__tSVF_setQ_veneer+0x4>
    702c:	2401143d 	.word	0x2401143d

00007030 <__tMBSineTri_setFreq_veneer>:
    7030:	f85f f000 	ldr.w	pc, [pc]	; 7034 <__tMBSineTri_setFreq_veneer+0x4>
    7034:	2401615d 	.word	0x2401615d

00007038 <__tADSRT_on_veneer>:
    7038:	f85f f000 	ldr.w	pc, [pc]	; 703c <__tADSRT_on_veneer+0x4>
    703c:	24010b21 	.word	0x24010b21

00007040 <__tADSRT_off_veneer>:
    7040:	f85f f000 	ldr.w	pc, [pc]	; 7044 <__tADSRT_off_veneer+0x4>
    7044:	24010b45 	.word	0x24010b45

00007048 <__tVZFilter_setFreqFast_veneer>:
    7048:	f85f f000 	ldr.w	pc, [pc]	; 704c <__tVZFilter_setFreqFast_veneer+0x4>
    704c:	24011991 	.word	0x24011991

00007050 <__tMBTriangle_setWidth_veneer>:
    7050:	f85f f000 	ldr.w	pc, [pc]	; 7054 <__tMBTriangle_setWidth_veneer+0x4>
    7054:	24014fe1 	.word	0x24014fe1

00007058 <__fastdbtoa_veneer>:
    7058:	f85f f000 	ldr.w	pc, [pc]	; 705c <__fastdbtoa_veneer+0x4>
    705c:	24012f1d 	.word	0x24012f1d

00007060 <__tADSRT_setDecay_veneer>:
    7060:	f85f f000 	ldr.w	pc, [pc]	; 7064 <__tADSRT_setDecay_veneer+0x4>
    7064:	24010a81 	.word	0x24010a81

00007068 <__tADSRT_setAttack_veneer>:
    7068:	f85f f000 	ldr.w	pc, [pc]	; 706c <__tADSRT_setAttack_veneer+0x4>
    706c:	24010a59 	.word	0x24010a59

00007070 <__tADSRT_setSustain_veneer>:
    7070:	f85f f000 	ldr.w	pc, [pc]	; 7074 <__tADSRT_setSustain_veneer+0x4>
    7074:	24010aa9 	.word	0x24010aa9

00007078 <__tMBSawPulse_setShape_veneer>:
    7078:	f85f f000 	ldr.w	pc, [pc]	; 707c <__tMBSawPulse_setShape_veneer+0x4>
    707c:	240167f5 	.word	0x240167f5

00007080 <__tMBSineTri_setShape_veneer>:
    7080:	f85f f000 	ldr.w	pc, [pc]	; 7084 <__tMBSineTri_setShape_veneer+0x4>
    7084:	240161dd 	.word	0x240161dd

00007088 <__tMBPulse_sync_veneer>:
    7088:	f85f f000 	ldr.w	pc, [pc]	; 708c <__tMBPulse_sync_veneer+0x4>
    708c:	24013f19 	.word	0x24013f19

00007090 <__tCrusher_setQuality_veneer>:
    7090:	f85f f000 	ldr.w	pc, [pc]	; 7094 <__tCrusher_setQuality_veneer+0x4>
    7094:	240106b5 	.word	0x240106b5

00007098 <__LEAF_shaper_veneer>:
    7098:	f85f f000 	ldr.w	pc, [pc]	; 709c <__LEAF_shaper_veneer+0x4>
    709c:	24012a81 	.word	0x24012a81

000070a0 <__tADSRT_tickNoInterp_veneer>:
    70a0:	f85f f000 	ldr.w	pc, [pc]	; 70a4 <__tADSRT_tickNoInterp_veneer+0x4>
    70a4:	24010e01 	.word	0x24010e01

000070a8 <__tCrusher_tick_veneer>:
    70a8:	f85f f000 	ldr.w	pc, [pc]	; 70ac <__tCrusher_tick_veneer+0x4>
    70ac:	24010621 	.word	0x24010621

000070b0 <__fasterdbtoa_veneer>:
    70b0:	f85f f000 	ldr.w	pc, [pc]	; 70b4 <__fasterdbtoa_veneer+0x4>
    70b4:	24012f2d 	.word	0x24012f2d

000070b8 <__tVZFilter_setResonance_veneer>:
    70b8:	f85f f000 	ldr.w	pc, [pc]	; 70bc <__tVZFilter_setResonance_veneer+0x4>
    70bc:	24011c85 	.word	0x24011c85

000070c0 <__tADSRT_setRelease_veneer>:
    70c0:	f85f f000 	ldr.w	pc, [pc]	; 70c4 <__tADSRT_setRelease_veneer+0x4>
    70c4:	24010ad5 	.word	0x24010ad5

000070c8 <__HAL_Delay_veneer>:
    70c8:	f85f f000 	ldr.w	pc, [pc]	; 70cc <__HAL_Delay_veneer+0x4>
    70cc:	24004ae1 	.word	0x24004ae1

000070d0 <__tLivingString2_setTargetLev_veneer>:
    70d0:	f85f f000 	ldr.w	pc, [pc]	; 70d4 <__tLivingString2_setTargetLev_veneer+0x4>
    70d4:	2401794d 	.word	0x2401794d

000070d8 <__tDiodeFilter_tickEfficient_veneer>:
    70d8:	f85f f000 	ldr.w	pc, [pc]	; 70dc <__tDiodeFilter_tickEfficient_veneer+0x4>
    70dc:	240122fd 	.word	0x240122fd

000070e0 <__tSVF_tick_veneer>:
    70e0:	f85f f000 	ldr.w	pc, [pc]	; 70e4 <__tSVF_tick_veneer+0x4>
    70e4:	24011365 	.word	0x24011365

000070e8 <__audioTickL_veneer>:
    70e8:	f85f f000 	ldr.w	pc, [pc]	; 70ec <__audioTickL_veneer+0x4>
    70ec:	2400230d 	.word	0x2400230d

000070f0 <__tLivingString2_setDecay_veneer>:
    70f0:	f85f f000 	ldr.w	pc, [pc]	; 70f4 <__tLivingString2_setDecay_veneer+0x4>
    70f4:	24017921 	.word	0x24017921

000070f8 <__tMBSineTri_sync_veneer>:
    70f8:	f85f f000 	ldr.w	pc, [pc]	; 70fc <__tMBSineTri_sync_veneer+0x4>
    70fc:	2401617d 	.word	0x2401617d

00007100 <__HAL_GPIO_WritePin_veneer>:
    7100:	f85f f000 	ldr.w	pc, [pc]	; 7104 <__HAL_GPIO_WritePin_veneer+0x4>
    7104:	24006779 	.word	0x24006779

00007108 <__tVZFilter_setGain_veneer>:
    7108:	f85f f000 	ldr.w	pc, [pc]	; 710c <__tVZFilter_setGain_veneer+0x4>
    710c:	24011c4d 	.word	0x24011c4d

00007110 <__tExpSmooth_tick_veneer>:
    7110:	f85f f000 	ldr.w	pc, [pc]	; 7114 <__tExpSmooth_tick_veneer+0x4>
    7114:	24011045 	.word	0x24011045

00007118 <__tCrusher_setOperation_veneer>:
    7118:	f85f f000 	ldr.w	pc, [pc]	; 711c <__tCrusher_setOperation_veneer+0x4>
    711c:	240106a1 	.word	0x240106a1

00007120 <__tSimpleLivingString3_pluck_veneer>:
    7120:	f85f f000 	ldr.w	pc, [pc]	; 7124 <__tSimpleLivingString3_pluck_veneer+0x4>
    7124:	24017261 	.word	0x24017261

00007128 <__LEAF_interpolation_linear_veneer>:
    7128:	f85f f000 	ldr.w	pc, [pc]	; 712c <__LEAF_interpolation_linear_veneer+0x4>
    712c:	24012dd5 	.word	0x24012dd5

00007130 <__tDiodeFilter_setFreqFast_veneer>:
    7130:	f85f f000 	ldr.w	pc, [pc]	; 7134 <__tDiodeFilter_setFreqFast_veneer+0x4>
    7134:	24012601 	.word	0x24012601
