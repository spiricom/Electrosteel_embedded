
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002d4d8  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402d770  2402d770  00058f68  2**0
                  CONTENTS
  3 .exidx        00000000  2402d770  2402d770  00058f68  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402d770  2402d770  00058f68  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402d770  2402d770  0003d770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402d774  2402d774  0003d774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003f7a0  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 000011c0  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00031f80  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000034  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000758  20000000  2402d778  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d3d4  20000758  2402ded0  00060758  2**3
                  ALLOC
 14 .itcmram      00008b68  00000400  2402ded0  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    04000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  00058f96  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  00058f96  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  00058f96  2**0
                  CONTENTS
 19 .heap         00000000  2001db2c  2001db2c  00058f96  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001db2c  2001db2c  00058f96  2**0
                  CONTENTS
 21 .debug_info   0008b45a  00000000  00000000  00058f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000a92f  00000000  00000000  000e43f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0007dcf9  00000000  00000000  000eed1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00003ac8  00000000  00000000  0016ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00010030  00000000  00000000  001704e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  00044023  00000000  00000000  00180510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   00077406  00000000  00000000  001c4533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00173b27  00000000  00000000  0023b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .comment      000000c5  00000000  00000000  003af460  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000d178  00000000  00000000  003af528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000758 	.word	0x20000758
240002b4:	00000000 	.word	0x00000000
240002b8:	00008f68 	.word	0x00008f68

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	2000075c 	.word	0x2000075c
240002d4:	00008f68 	.word	0x00008f68

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4ceb      	ldr	r4, [pc, #940]	; (24000a14 <audioInit+0x3b4>)
24000666:	f64e 2260 	movw	r2, #60000	; 0xea60
2400066a:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 24000a18 <audioInit+0x3b8>
2400066e:	4620      	mov	r0, r4
24000670:	49ea      	ldr	r1, [pc, #936]	; (24000a1c <audioInit+0x3bc>)
24000672:	4beb      	ldr	r3, [pc, #940]	; (24000a20 <audioInit+0x3c0>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000674:	4deb      	ldr	r5, [pc, #940]	; (24000a24 <audioInit+0x3c4>)
{
24000676:	ed2d 8b10 	vpush	{d8-d15}
2400067a:	b089      	sub	sp, #36	; 0x24
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000680:	f014 fa4e 	bl	24014b20 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000684:	4623      	mov	r3, r4
24000686:	4ae8      	ldr	r2, [pc, #928]	; (24000a28 <audioInit+0x3c8>)
24000688:	49e8      	ldr	r1, [pc, #928]	; (24000a2c <audioInit+0x3cc>)
2400068a:	48e9      	ldr	r0, [pc, #932]	; (24000a30 <audioInit+0x3d0>)
2400068c:	f012 fce2 	bl	24013054 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000690:	4623      	mov	r3, r4
24000692:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
24000696:	49e7      	ldr	r1, [pc, #924]	; (24000a34 <audioInit+0x3d4>)
24000698:	48e7      	ldr	r0, [pc, #924]	; (24000a38 <audioInit+0x3d8>)
2400069a:	f012 fcdb 	bl	24013054 <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a4:	eddf 1ae5 	vldr	s3, [pc, #916]	; 24000a3c <audioInit+0x3dc>
240006a8:	eddf 0ae5 	vldr	s1, [pc, #916]	; 24000a40 <audioInit+0x3e0>
240006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006b0:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 24000a44 <audioInit+0x3e4>
240006b4:	48e4      	ldr	r0, [pc, #912]	; (24000a48 <audioInit+0x3e8>)
	leaf.clearOnAllocation = 1;
240006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b8:	f012 f94c 	bl	24012954 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006bc:	48e3      	ldr	r0, [pc, #908]	; (24000a4c <audioInit+0x3ec>)
		previousStringInputs[i]	= 0;
240006be:	2200      	movs	r2, #0
240006c0:	4be3      	ldr	r3, [pc, #908]	; (24000a50 <audioInit+0x3f0>)
	tCycle_init(&testSine, &leaf);
240006c2:	4621      	mov	r1, r4
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c4:	6005      	str	r5, [r0, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c6:	4ce3      	ldr	r4, [pc, #908]	; (24000a54 <audioInit+0x3f4>)
240006c8:	48e3      	ldr	r0, [pc, #908]	; (24000a58 <audioInit+0x3f8>)
		previousStringInputs[i]	= 0;
240006ca:	601a      	str	r2, [r3, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006cc:	6004      	str	r4, [r0, #0]
		previousStringInputs[i]	= 0;
240006ce:	605a      	str	r2, [r3, #4]
	tCycle_init(&testSine, &leaf);
240006d0:	48e2      	ldr	r0, [pc, #904]	; (24000a5c <audioInit+0x3fc>)
		previousStringInputs[i]	= 0;
240006d2:	609a      	str	r2, [r3, #8]
240006d4:	60da      	str	r2, [r3, #12]
240006d6:	611a      	str	r2, [r3, #16]
240006d8:	615a      	str	r2, [r3, #20]
240006da:	619a      	str	r2, [r3, #24]
240006dc:	61da      	str	r2, [r3, #28]
240006de:	621a      	str	r2, [r3, #32]
240006e0:	625a      	str	r2, [r3, #36]	; 0x24
240006e2:	629a      	str	r2, [r3, #40]	; 0x28
240006e4:	62da      	str	r2, [r3, #44]	; 0x2c
	tCycle_init(&testSine, &leaf);
240006e6:	f012 fd35 	bl	24013154 <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006ea:	ed9f 0add 	vldr	s0, [pc, #884]	; 24000a60 <audioInit+0x400>
240006ee:	48db      	ldr	r0, [pc, #876]	; (24000a5c <audioInit+0x3fc>)
240006f0:	f012 fd72 	bl	240131d8 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006f4:	4cdb      	ldr	r4, [pc, #876]	; (24000a64 <audioInit+0x404>)
240006f6:	4adc      	ldr	r2, [pc, #880]	; (24000a68 <audioInit+0x408>)
		totalGain[1] += partialsHigh[i];
240006f8:	49dc      	ldr	r1, [pc, #880]	; (24000a6c <audioInit+0x40c>)
		totalGain[0] += partials[i];
240006fa:	ed92 0a00 	vldr	s0, [r2]
240006fe:	edd4 6a00 	vldr	s13, [r4]
		totalGain[1] += partialsHigh[i];
24000702:	ed94 7a01 	vldr	s14, [r4, #4]
24000706:	ed91 1a00 	vldr	s2, [r1]
		totalGain[0] += partials[i];
2400070a:	ee76 6a80 	vadd.f32	s13, s13, s0
2400070e:	ed92 2a01 	vldr	s4, [r2, #4]
		totalGain[1] += partialsHigh[i];
24000712:	ee37 7a01 	vadd.f32	s14, s14, s2
24000716:	edd1 2a01 	vldr	s5, [r1, #4]
		totalGain[0] += partials[i];
2400071a:	ee76 6a82 	vadd.f32	s13, s13, s4
2400071e:	ed92 4a02 	vldr	s8, [r2, #8]
		totalGain[1] += partialsHigh[i];
24000722:	ed91 1a02 	vldr	s2, [r1, #8]
24000726:	ee37 7a22 	vadd.f32	s14, s14, s5
		totalGain[0] += partials[i];
2400072a:	edd2 3a03 	vldr	s7, [r2, #12]
2400072e:	ee76 6a84 	vadd.f32	s13, s13, s8
		totalGain[1] += partialsHigh[i];
24000732:	ed91 0a03 	vldr	s0, [r1, #12]
		totalGain[0] += partials[i];
24000736:	ed92 3a04 	vldr	s6, [r2, #16]
		totalGain[1] += partialsHigh[i];
2400073a:	ee37 7a01 	vadd.f32	s14, s14, s2
2400073e:	ed91 4a04 	vldr	s8, [r1, #16]
		totalGain[0] += partials[i];
24000742:	ee76 6aa3 	vadd.f32	s13, s13, s7
24000746:	edd2 1a05 	vldr	s3, [r2, #20]
		totalGain[1] += partialsHigh[i];
2400074a:	edd1 2a05 	vldr	s5, [r1, #20]
2400074e:	ee37 7a00 	vadd.f32	s14, s14, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000752:	4bc7      	ldr	r3, [pc, #796]	; (24000a70 <audioInit+0x410>)
		totalGain[0] += partials[i];
24000754:	ee76 6a83 	vadd.f32	s13, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000758:	48c6      	ldr	r0, [pc, #792]	; (24000a74 <audioInit+0x414>)
		totalGain[0] += partials[i];
2400075a:	ed92 5a06 	vldr	s10, [r2, #24]
		totalGain[1] += partialsHigh[i];
2400075e:	ee37 7a04 	vadd.f32	s14, s14, s8
24000762:	ed91 2a06 	vldr	s4, [r1, #24]
		totalGain[0] += partials[i];
24000766:	ee76 6aa1 	vadd.f32	s13, s13, s3
2400076a:	edd2 0a07 	vldr	s1, [r2, #28]
		totalGain[1] += partialsHigh[i];
2400076e:	ed91 1a07 	vldr	s2, [r1, #28]
24000772:	ee37 7a22 	vadd.f32	s14, s14, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000776:	edd0 2a00 	vldr	s5, [r0]
		totalGain[0] += partials[i];
2400077a:	ee76 6a85 	vadd.f32	s13, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077e:	ed93 5a00 	vldr	s10, [r3]
24000782:	edd3 1a01 	vldr	s3, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000786:	ee37 7a02 	vadd.f32	s14, s14, s4
		totalGain[0] += partials[i];
2400078a:	edd2 4a08 	vldr	s9, [r2, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400078e:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
24000792:	edd1 3a08 	vldr	s7, [r1, #32]
		totalGain[0] += partials[i];
24000796:	ee76 6aa0 	vadd.f32	s13, s13, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400079a:	ed93 5a02 	vldr	s10, [r3, #8]
		totalGain[1] += partialsHigh[i];
2400079e:	ee37 7a01 	vadd.f32	s14, s14, s2
		totalGain[0] += partials[i];
240007a2:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007a6:	ee72 2aa1 	vadd.f32	s5, s5, s3
		totalGain[1] += partialsHigh[i];
240007aa:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
		totalGain[0] += partials[i];
240007ae:	ee76 6aa4 	vadd.f32	s13, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007b2:	ed93 2a03 	vldr	s4, [r3, #12]
		totalGain[1] += partialsHigh[i];
240007b6:	ee37 7a23 	vadd.f32	s14, s14, s7
		totalGain[0] += partials[i];
240007ba:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007be:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
240007c2:	ed91 3a0a 	vldr	s6, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007c6:	ee76 6a86 	vadd.f32	s13, s13, s12
240007ca:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
		totalGain[1] += partialsHigh[i];
240007ce:	ee37 7a00 	vadd.f32	s14, s14, s0
240007d2:	ed91 4a0b 	vldr	s8, [r1, #44]	; 0x2c
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d6:	ee72 2a82 	vadd.f32	s5, s5, s4
240007da:	edd3 0a04 	vldr	s1, [r3, #16]
		totalGain[0] += partials[i];
240007de:	ee76 6aa5 	vadd.f32	s13, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e2:	ed93 1a05 	vldr	s2, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007e6:	ee37 7a03 	vadd.f32	s14, s14, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ea:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
240007ee:	ed90 3a01 	vldr	s6, [r0, #4]
240007f2:	ee72 2aa0 	vadd.f32	s5, s5, s1
240007f6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007fe:	ee33 3a25 	vadd.f32	s6, s6, s11
24000802:	ed93 8a06 	vldr	s16, [r3, #24]
24000806:	ee72 2a81 	vadd.f32	s5, s5, s2
2400080a:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
2400080e:	edd3 1a07 	vldr	s3, [r3, #28]
		totalGain[1] += partialsHigh[i];
24000812:	ee37 7a04 	vadd.f32	s14, s14, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000816:	ee33 3a02 	vadd.f32	s6, s6, s4
2400081a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
2400081e:	ee72 2a88 	vadd.f32	s5, s5, s16
24000822:	edd3 3a08 	vldr	s7, [r3, #32]
24000826:	edd3 0a10 	vldr	s1, [r3, #64]	; 0x40
2400082a:	ee33 3a25 	vadd.f32	s6, s6, s11
2400082e:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
24000832:	ee72 2aa1 	vadd.f32	s5, s5, s3
24000836:	ed93 1a11 	vldr	s2, [r3, #68]	; 0x44
2400083a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
2400083e:	ee33 3a27 	vadd.f32	s6, s6, s15
24000842:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24000846:	ee72 2aa3 	vadd.f32	s5, s5, s7
2400084a:	edd0 3a02 	vldr	s7, [r0, #8]
2400084e:	ed93 2a13 	vldr	s4, [r3, #76]	; 0x4c
24000852:	ee33 3a20 	vadd.f32	s6, s6, s1
24000856:	edd3 0a18 	vldr	s1, [r3, #96]	; 0x60
2400085a:	ee72 2aa4 	vadd.f32	s5, s5, s9
2400085e:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
24000862:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000866:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
2400086a:	ee33 3a01 	vadd.f32	s6, s6, s2
2400086e:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
24000872:	ee72 2a85 	vadd.f32	s5, s5, s10
24000876:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
2400087a:	ee73 3aa4 	vadd.f32	s7, s7, s9
2400087e:	edd3 4a1b 	vldr	s9, [r3, #108]	; 0x6c
24000882:	ee33 3a00 	vadd.f32	s6, s6, s0
24000886:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
2400088a:	ed93 4a14 	vldr	s8, [r3, #80]	; 0x50
2400088e:	ee73 3a81 	vadd.f32	s7, s7, s2
24000892:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
24000896:	ee33 3a02 	vadd.f32	s6, s6, s4
2400089a:	edd3 1a16 	vldr	s3, [r3, #88]	; 0x58
2400089e:	ee72 2a86 	vadd.f32	s5, s5, s12
240008a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
240008a6:	ee73 3aa4 	vadd.f32	s7, s7, s9
240008aa:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
240008ae:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
240008b2:	ee33 3a04 	vadd.f32	s6, s6, s8
240008b6:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008ba:	ee8a aaa2 	vdiv.f32	s20, s21, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008be:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
240008c2:	edd3 4a22 	vldr	s9, [r3, #136]	; 0x88
240008c6:	ee73 3aa0 	vadd.f32	s7, s7, s1
240008ca:	edd3 0a23 	vldr	s1, [r3, #140]	; 0x8c
240008ce:	ed90 4a03 	vldr	s8, [r0, #12]
240008d2:	ee33 3a25 	vadd.f32	s6, s6, s11
240008d6:	edd3 5a25 	vldr	s11, [r3, #148]	; 0x94
240008da:	ee73 3a85 	vadd.f32	s7, s7, s10
240008de:	ed93 5a24 	vldr	s10, [r3, #144]	; 0x90
240008e2:	ee33 3a21 	vadd.f32	s6, s6, s3
240008e6:	edd3 1a27 	vldr	s3, [r3, #156]	; 0x9c
240008ea:	ee34 4a05 	vadd.f32	s8, s8, s10
240008ee:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
240008f2:	ee73 3a81 	vadd.f32	s7, s7, s2
240008f6:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008fa:	ee33 3a27 	vadd.f32	s6, s6, s15
240008fe:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
24000902:	ee34 4a25 	vadd.f32	s8, s8, s11
24000906:	edd3 5a29 	vldr	s11, [r3, #164]	; 0xa4
2400090a:	ee73 3a80 	vadd.f32	s7, s7, s0
2400090e:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000912:	eeca 9a83 	vdiv.f32	s19, s21, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000916:	ee34 4a05 	vadd.f32	s8, s8, s10
2400091a:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
2400091e:	ee73 3a86 	vadd.f32	s7, s7, s12
24000922:	ed93 6a2a 	vldr	s12, [r3, #168]	; 0xa8
24000926:	ee34 4a21 	vadd.f32	s8, s8, s3
2400092a:	edd3 1a2e 	vldr	s3, [r3, #184]	; 0xb8
2400092e:	ee73 3a82 	vadd.f32	s7, s7, s4
24000932:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
24000936:	ee34 4a01 	vadd.f32	s8, s8, s2
2400093a:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
2400093e:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000942:	edd0 4a04 	vldr	s9, [r0, #16]
24000946:	ee74 4a81 	vadd.f32	s9, s9, s2
2400094a:	ed93 1a32 	vldr	s2, [r3, #200]	; 0xc8
2400094e:	ee34 4a25 	vadd.f32	s8, s8, s11
24000952:	edd3 5a31 	vldr	s11, [r3, #196]	; 0xc4
24000956:	ee73 3aa0 	vadd.f32	s7, s7, s1
2400095a:	edd3 0a34 	vldr	s1, [r3, #208]	; 0xd0
2400095e:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000962:	edd3 5a35 	vldr	s11, [r3, #212]	; 0xd4
24000966:	ee34 4a06 	vadd.f32	s8, s8, s12
2400096a:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400096e:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000972:	ee74 4a81 	vadd.f32	s9, s9, s2
24000976:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
2400097a:	ee34 4a27 	vadd.f32	s8, s8, s15
2400097e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
24000982:	ee74 4a86 	vadd.f32	s9, s9, s12
24000986:	ed93 6a39 	vldr	s12, [r3, #228]	; 0xe4
2400098a:	ee34 4a05 	vadd.f32	s8, s8, s10
2400098e:	ed93 5a37 	vldr	s10, [r3, #220]	; 0xdc
24000992:	ee74 4aa0 	vadd.f32	s9, s9, s1
24000996:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
2400099a:	ee34 4a00 	vadd.f32	s8, s8, s0
2400099e:	ed93 0a3a 	vldr	s0, [r3, #232]	; 0xe8
240009a2:	ee74 4aa5 	vadd.f32	s9, s9, s11
240009a6:	edd0 5a05 	vldr	s11, [r0, #20]
240009aa:	ee34 4a21 	vadd.f32	s8, s8, s3
240009ae:	edd3 1a3b 	vldr	s3, [r3, #236]	; 0xec
240009b2:	ee75 5aa0 	vadd.f32	s11, s11, s1
240009b6:	ee74 4aa7 	vadd.f32	s9, s9, s15
240009ba:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
240009be:	ee34 4a02 	vadd.f32	s8, s8, s4
240009c2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
240009c6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009ca:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
240009ce:	ee74 4a85 	vadd.f32	s9, s9, s10
240009d2:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
240009d6:	ed93 5a41 	vldr	s10, [r3, #260]	; 0x104
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240009da:	eeca 8a84 	vdiv.f32	s17, s21, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240009de:	ee74 4a81 	vadd.f32	s9, s9, s2
240009e2:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
240009e6:	ee75 5a82 	vadd.f32	s11, s11, s4
240009ea:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
240009ee:	ee74 4a86 	vadd.f32	s9, s9, s12
240009f2:	ed93 6a45 	vldr	s12, [r3, #276]	; 0x114
240009f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009fa:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
240009fe:	ee74 4a80 	vadd.f32	s9, s9, s0
24000a02:	ed93 0a46 	vldr	s0, [r3, #280]	; 0x118
24000a06:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000a0a:	edd3 0a47 	vldr	s1, [r3, #284]	; 0x11c
24000a0e:	ee74 4aa1 	vadd.f32	s9, s9, s3
24000a12:	e031      	b.n	24000a78 <audioInit+0x418>
24000a14:	200052cc 	.word	0x200052cc
24000a18:	473b8000 	.word	0x473b8000
24000a1c:	20005c70 	.word	0x20005c70
24000a20:	00005081 	.word	0x00005081
24000a24:	457ff000 	.word	0x457ff000
24000a28:	0003f7a0 	.word	0x0003f7a0
24000a2c:	24040000 	.word	0x24040000
24000a30:	2000550c 	.word	0x2000550c
24000a34:	c0000000 	.word	0xc0000000
24000a38:	200052c8 	.word	0x200052c8
24000a3c:	ba51b717 	.word	0xba51b717
24000a40:	00000000 	.word	0x00000000
24000a44:	3a83126f 	.word	0x3a83126f
24000a48:	20001004 	.word	0x20001004
24000a4c:	20005004 	.word	0x20005004
24000a50:	30000000 	.word	0x30000000
24000a54:	3daaaaab 	.word	0x3daaaaab
24000a58:	20005214 	.word	0x20005214
24000a5c:	2001488c 	.word	0x2001488c
24000a60:	43dc0000 	.word	0x43dc0000
24000a64:	200148c0 	.word	0x200148c0
24000a68:	200000b8 	.word	0x200000b8
24000a6c:	20000100 	.word	0x20000100
24000a70:	20000324 	.word	0x20000324
24000a74:	200148c8 	.word	0x200148c8
24000a78:	edd3 1a48 	vldr	s3, [r3, #288]	; 0x120
24000a7c:	ee75 5a85 	vadd.f32	s11, s11, s10
24000a80:	ed90 5a06 	vldr	s10, [r0, #24]
24000a84:	ee35 5a21 	vadd.f32	s10, s10, s3
24000a88:	edd3 1a4a 	vldr	s3, [r3, #296]	; 0x128
24000a8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000a90:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000a94:	ee8a 8aa4 	vdiv.f32	s16, s21, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a98:	ee35 5a27 	vadd.f32	s10, s10, s15
24000a9c:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000aa0:	ee75 5a82 	vadd.f32	s11, s11, s4
24000aa4:	ed93 2a4c 	vldr	s4, [r3, #304]	; 0x130
24000aa8:	ee35 5a21 	vadd.f32	s10, s10, s3
24000aac:	edd3 1a50 	vldr	s3, [r3, #320]	; 0x140
24000ab0:	ee75 5a81 	vadd.f32	s11, s11, s2
24000ab4:	ed93 1a4f 	vldr	s2, [r3, #316]	; 0x13c
24000ab8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000abc:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
24000ac0:	ee75 5a86 	vadd.f32	s11, s11, s12
24000ac4:	ed93 6a4d 	vldr	s12, [r3, #308]	; 0x134
24000ac8:	ee35 5a02 	vadd.f32	s10, s10, s4
24000acc:	ed93 2a52 	vldr	s4, [r3, #328]	; 0x148
24000ad0:	ee75 5a80 	vadd.f32	s11, s11, s0
24000ad4:	ed93 0a51 	vldr	s0, [r3, #324]	; 0x144
24000ad8:	ee35 5a06 	vadd.f32	s10, s10, s12
24000adc:	ed90 6a07 	vldr	s12, [r0, #28]
24000ae0:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000ae4:	edd3 0a53 	vldr	s1, [r3, #332]	; 0x14c
24000ae8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000aec:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
24000af0:	ee36 6a27 	vadd.f32	s12, s12, s15
24000af4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
24000af8:	ee35 5a01 	vadd.f32	s10, s10, s2
24000afc:	ed93 1a57 	vldr	s2, [r3, #348]	; 0x15c
24000b00:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b04:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
24000b08:	ee35 5a21 	vadd.f32	s10, s10, s3
24000b0c:	edd3 1a59 	vldr	s3, [r3, #356]	; 0x164
24000b10:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b14:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
24000b18:	ee35 5a00 	vadd.f32	s10, s10, s0
24000b1c:	ed93 0a5d 	vldr	s0, [r3, #372]	; 0x174
24000b20:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b24:	ed93 1a5c 	vldr	s2, [r3, #368]	; 0x170
24000b28:	ee35 5a02 	vadd.f32	s10, s10, s4
24000b2c:	ed93 2a5a 	vldr	s4, [r3, #360]	; 0x168
24000b30:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b34:	edd3 7a5b 	vldr	s15, [r3, #364]	; 0x16c
24000b38:	ee35 5a20 	vadd.f32	s10, s10, s1
24000b3c:	edd3 0a5e 	vldr	s1, [r3, #376]	; 0x178
24000b40:	ed93 ba6b 	vldr	s22, [r3, #428]	; 0x1ac
24000b44:	ee36 6a21 	vadd.f32	s12, s12, s3
24000b48:	edd3 1a5f 	vldr	s3, [r3, #380]	; 0x17c
24000b4c:	edc0 2a00 	vstr	s5, [r0]
24000b50:	edc4 6a00 	vstr	s13, [r4]
24000b54:	ee36 6a02 	vadd.f32	s12, s12, s4
24000b58:	ed93 2a60 	vldr	s4, [r3, #384]	; 0x180
24000b5c:	ed84 7a01 	vstr	s14, [r4, #4]
24000b60:	ed80 3a01 	vstr	s6, [r0, #4]
24000b64:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b68:	edd0 7a08 	vldr	s15, [r0, #32]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6c:	4ce6      	ldr	r4, [pc, #920]	; (24000f08 <audioInit+0x8a8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b6e:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b72:	ed93 2a61 	vldr	s4, [r3, #388]	; 0x184
24000b76:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b7a:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000b7e:	edc0 3a02 	vstr	s7, [r0, #8]
24000b82:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b86:	ed93 2a62 	vldr	s4, [r3, #392]	; 0x188
24000b8a:	ee36 6a00 	vadd.f32	s12, s12, s0
24000b8e:	ed93 0a65 	vldr	s0, [r3, #404]	; 0x194
24000b92:	ed80 4a03 	vstr	s8, [r0, #12]
24000b96:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b9a:	ed93 2a64 	vldr	s4, [r3, #400]	; 0x190
24000b9e:	ee36 6a20 	vadd.f32	s12, s12, s1
24000ba2:	edd3 0a67 	vldr	s1, [r3, #412]	; 0x19c
24000ba6:	edc0 4a04 	vstr	s9, [r0, #16]
24000baa:	ee77 7a81 	vadd.f32	s15, s15, s2
24000bae:	ed93 1a68 	vldr	s2, [r3, #416]	; 0x1a0
24000bb2:	ee36 6a21 	vadd.f32	s12, s12, s3
24000bb6:	edd3 1a69 	vldr	s3, [r3, #420]	; 0x1a4
24000bba:	edc0 5a05 	vstr	s11, [r0, #20]
24000bbe:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bc2:	ed93 2a66 	vldr	s4, [r3, #408]	; 0x198
24000bc6:	ed80 5a06 	vstr	s10, [r0, #24]
24000bca:	ed80 6a07 	vstr	s12, [r0, #28]
24000bce:	ee77 7a80 	vadd.f32	s15, s15, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bd2:	ed84 aa00 	vstr	s20, [r4]
24000bd6:	ee8a 0aa5 	vdiv.f32	s0, s21, s11
24000bda:	edc4 9a01 	vstr	s19, [r4, #4]
24000bde:	ed84 9a02 	vstr	s18, [r4, #8]
24000be2:	edc4 8a03 	vstr	s17, [r4, #12]
24000be6:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bea:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bee:	ed93 2a6a 	vldr	s4, [r3, #424]	; 0x1a8
24000bf2:	ee77 7aa0 	vadd.f32	s15, s15, s1
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bf6:	eeca 0a85 	vdiv.f32	s1, s21, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bfa:	ee77 7a81 	vadd.f32	s15, s15, s2
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bfe:	ee8a 1a86 	vdiv.f32	s2, s21, s12
24000c02:	ed84 0a05 	vstr	s0, [r4, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c06:	ee77 7aa1 	vadd.f32	s15, s15, s3
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c0a:	eeca 1aa6 	vdiv.f32	s3, s21, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c0e:	ee77 7a82 	vadd.f32	s15, s15, s4
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c12:	ee8a 2a87 	vdiv.f32	s4, s21, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c16:	ee77 7a8b 	vadd.f32	s15, s15, s22
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c1a:	eeca 2aa7 	vdiv.f32	s5, s21, s15
24000c1e:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c22:	48ba      	ldr	r0, [pc, #744]	; (24000f0c <audioInit+0x8ac>)
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c24:	edc4 0a06 	vstr	s1, [r4, #24]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c28:	edc0 1a00 	vstr	s3, [r0]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c2c:	ed84 1a07 	vstr	s2, [r4, #28]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c30:	ed80 2a01 	vstr	s4, [r0, #4]
24000c34:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c38:	edc4 2a08 	vstr	s5, [r4, #32]
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c3c:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
24000c40:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c44:	ee6a 7a27 	vmul.f32	s15, s20, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c48:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
24000c4c:	ee21 3a83 	vmul.f32	s6, s3, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c50:	ee62 3a23 	vmul.f32	s7, s4, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c54:	ece3 7a01 	vstmia	r3!, {s15}
24000c58:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000c5c:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000c60:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000c64:	ee24 4a29 	vmul.f32	s8, s8, s19
24000c68:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000c6c:	ee64 4a89 	vmul.f32	s9, s9, s18
24000c70:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c74:	ee25 5a28 	vmul.f32	s10, s10, s17
24000c78:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c7c:	ee65 5a88 	vmul.f32	s11, s11, s16
24000c80:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c84:	ee26 6a00 	vmul.f32	s12, s12, s0
24000c88:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c8c:	ee66 6aa0 	vmul.f32	s13, s13, s1
24000c90:	ee27 7a01 	vmul.f32	s14, s14, s2
			partials[i] = partials[i] * gainNormalizers[0];
24000c94:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c98:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c9c:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c9e:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ca2:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000ca6:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000caa:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000cae:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000cb2:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000cb6:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000cba:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000cbe:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000cc2:	d1bb      	bne.n	24000c3c <audioInit+0x5dc>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cc4:	4b92      	ldr	r3, [pc, #584]	; (24000f10 <audioInit+0x8b0>)
24000cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000cca:	4c92      	ldr	r4, [pc, #584]	; (24000f14 <audioInit+0x8b4>)
24000ccc:	ed93 8a01 	vldr	s16, [r3, #4]
24000cd0:	ed93 0a04 	vldr	s0, [r3, #16]
24000cd4:	f104 0830 	add.w	r8, r4, #48	; 0x30
24000cd8:	edd3 0a07 	vldr	s1, [r3, #28]
24000cdc:	edd3 9a00 	vldr	s19, [r3]
24000ce0:	ed93 6a02 	vldr	s12, [r3, #8]
24000ce4:	ed93 9a03 	vldr	s18, [r3, #12]
24000ce8:	ee78 4a69 	vsub.f32	s9, s16, s19
24000cec:	edd3 6a05 	vldr	s13, [r3, #20]
24000cf0:	ee36 6a48 	vsub.f32	s12, s12, s16
24000cf4:	edd3 8a06 	vldr	s17, [r3, #24]
24000cf8:	ee30 5a49 	vsub.f32	s10, s0, s18
24000cfc:	ed93 7a08 	vldr	s14, [r3, #32]
24000d00:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000d04:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000d08:	f8df c274 	ldr.w	ip, [pc, #628]	; 24000f80 <audioInit+0x920>
24000d0c:	ee37 7a60 	vsub.f32	s14, s14, s1
24000d10:	4f81      	ldr	r7, [pc, #516]	; (24000f18 <audioInit+0x8b8>)
24000d12:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000d16:	4e81      	ldr	r6, [pc, #516]	; (24000f1c <audioInit+0x8bc>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eddf aa81 	vldr	s21, [pc, #516]	; 24000f20 <audioInit+0x8c0>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d1c:	ed9f aa81 	vldr	s20, [pc, #516]	; 24000f24 <audioInit+0x8c4>
24000d20:	4b81      	ldr	r3, [pc, #516]	; (24000f28 <audioInit+0x8c8>)
24000d22:	4882      	ldr	r0, [pc, #520]	; (24000f2c <audioInit+0x8cc>)
24000d24:	ee87 da86 	vdiv.f32	s26, s15, s12
24000d28:	4981      	ldr	r1, [pc, #516]	; (24000f30 <audioInit+0x8d0>)
24000d2a:	4a82      	ldr	r2, [pc, #520]	; (24000f34 <audioInit+0x8d4>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000d2c:	4d82      	ldr	r5, [pc, #520]	; (24000f38 <audioInit+0x8d8>)
24000d2e:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000d32:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000d36:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000d3a:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3e:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000d42:	3304      	adds	r3, #4
24000d44:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d48:	ecb5 2a01 	vldmia	r5!, {s4}
24000d4c:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000d54:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000d58:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
24000d5c:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5e:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000d62:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000d66:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d6a:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d6e:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d72:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d76:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d7a:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d7e:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d82:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d86:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d8a:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d92:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d96:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d9a:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d9e:	ee35 3a63 	vsub.f32	s6, s10, s7
24000da2:	ee74 2aef 	vsub.f32	s5, s9, s31
24000da6:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000daa:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dae:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db2:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000db6:	ece0 1a01 	vstmia	r0!, {s3}
24000dba:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dbe:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dc2:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc6:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dca:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dce:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dd2:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dd6:	ee62 2aac 	vmul.f32	s5, s5, s25
24000dda:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000dde:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000de2:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000de6:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000dea:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000dee:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000df2:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000df6:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dfa:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dfe:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e02:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000e06:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e0a:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
24000e0e:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e12:	ee28 2a83 	vmul.f32	s4, s17, s6
24000e16:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000e1a:	ee20 6a87 	vmul.f32	s12, s1, s14
24000e1e:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e22:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e26:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e2a:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e2e:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e32:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e36:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e3a:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e3e:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e42:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000e46:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000e4a:	ee35 5a46 	vsub.f32	s10, s10, s12
24000e4e:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000e52:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000e56:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000e5a:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
24000e5e:	f47f af6e 	bne.w	24000d3e <audioInit+0x6de>
24000e62:	4c36      	ldr	r4, [pc, #216]	; (24000f3c <audioInit+0x8dc>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = (randomNumber() * 0.5f) + 0.5f;
24000e64:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
24000e68:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
24000e6c:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000e70:	f02c fc4a 	bl	2402d708 <__randomNumber_veneer>
24000e74:	ee30 0a28 	vadd.f32	s0, s0, s17
24000e78:	ee20 0a08 	vmul.f32	s0, s0, s16
24000e7c:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
24000e80:	42ac      	cmp	r4, r5
24000e82:	d1f5      	bne.n	24000e70 <audioInit+0x810>
		}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000e88:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 24000f40 <audioInit+0x8e0>
24000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e90:	482c      	ldr	r0, [pc, #176]	; (24000f44 <audioInit+0x8e4>)
24000e92:	f011 fdc3 	bl	24012a1c <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000e96:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24000e9a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24000f48 <audioInit+0x8e8>
24000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000ea2:	482a      	ldr	r0, [pc, #168]	; (24000f4c <audioInit+0x8ec>)
24000ea4:	f011 fdde 	bl	24012a64 <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000eac:	eddf 0a28 	vldr	s1, [pc, #160]	; 24000f50 <audioInit+0x8f0>
24000eb0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 24000f54 <audioInit+0x8f4>
24000eb4:	4828      	ldr	r0, [pc, #160]	; (24000f58 <audioInit+0x8f8>)
24000eb6:	f011 fdff 	bl	24012ab8 <LEAF_generate_mtof>





	if (numStrings == 6)
24000eba:	4b28      	ldr	r3, [pc, #160]	; (24000f5c <audioInit+0x8fc>)
24000ebc:	781b      	ldrb	r3, [r3, #0]
24000ebe:	2b06      	cmp	r3, #6
24000ec0:	f000 83f3 	beq.w	240016aa <audioInit+0x104a>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000ec4:	2b0a      	cmp	r3, #10
	{
		// first two strings are one board each, other 8 are two strings each.
		if (boardNumber == 0)
24000ec6:	4b26      	ldr	r3, [pc, #152]	; (24000f60 <audioInit+0x900>)
	else if (numStrings == 10)
24000ec8:	f000 83d6 	beq.w	24001678 <audioInit+0x1018>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ecc:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
24000ece:	2002      	movs	r0, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed0:	4a24      	ldr	r2, [pc, #144]	; (24000f64 <audioInit+0x904>)
		numStringsThisBoard = 2;
24000ed2:	4925      	ldr	r1, [pc, #148]	; (24000f68 <audioInit+0x908>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed4:	005b      	lsls	r3, r3, #1
		numStringsThisBoard = 2;
24000ed6:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000ed8:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
24000eda:	4b24      	ldr	r3, [pc, #144]	; (24000f6c <audioInit+0x90c>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000edc:	f04f 0900 	mov.w	r9, #0
24000ee0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 24000f84 <audioInit+0x924>
24000ee4:	9303      	str	r3, [sp, #12]
24000ee6:	4b14      	ldr	r3, [pc, #80]	; (24000f38 <audioInit+0x8d8>)
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000ee8:	ed9f 9a21 	vldr	s18, [pc, #132]	; 24000f70 <audioInit+0x910>
24000eec:	f103 0830 	add.w	r8, r3, #48	; 0x30
24000ef0:	eddf 8a20 	vldr	s17, [pc, #128]	; 24000f74 <audioInit+0x914>
24000ef4:	ed9f 8a20 	vldr	s16, [pc, #128]	; 24000f78 <audioInit+0x918>
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000ef8:	9e03      	ldr	r6, [sp, #12]
24000efa:	465c      	mov	r4, fp
24000efc:	4d0e      	ldr	r5, [pc, #56]	; (24000f38 <audioInit+0x8d8>)
			tCycle_init(&additive[i][j], &leaf);
24000efe:	f8df a088 	ldr.w	sl, [pc, #136]	; 24000f88 <audioInit+0x928>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f02:	4f1e      	ldr	r7, [pc, #120]	; (24000f7c <audioInit+0x91c>)
24000f04:	e042      	b.n	24000f8c <audioInit+0x92c>
24000f06:	bf00      	nop
24000f08:	2000513c 	.word	0x2000513c
24000f0c:	20005134 	.word	0x20005134
24000f10:	20000300 	.word	0x20000300
24000f14:	20000070 	.word	0x20000070
24000f18:	20000f2c 	.word	0x20000f2c
24000f1c:	20000fbc 	.word	0x20000fbc
24000f20:	3b84a9fa 	.word	0x3b84a9fa
24000f24:	42f60000 	.word	0x42f60000
24000f28:	20000150 	.word	0x20000150
24000f2c:	20000ba4 	.word	0x20000ba4
24000f30:	20000a84 	.word	0x20000a84
24000f34:	20000cc4 	.word	0x20000cc4
24000f38:	20000028 	.word	0x20000028
24000f3c:	20005780 	.word	0x20005780
24000f40:	3727c5ac 	.word	0x3727c5ac
24000f44:	3000a000 	.word	0x3000a000
24000f48:	c2b40000 	.word	0xc2b40000
24000f4c:	30002000 	.word	0x30002000
24000f50:	4323d666 	.word	0x4323d666
24000f54:	c323d666 	.word	0xc323d666
24000f58:	30012000 	.word	0x30012000
24000f5c:	2000000c 	.word	0x2000000c
24000f60:	20014b15 	.word	0x20014b15
24000f64:	200050d4 	.word	0x200050d4
24000f68:	2000000d 	.word	0x2000000d
24000f6c:	20000974 	.word	0x20000974
24000f70:	447a0000 	.word	0x447a0000
24000f74:	43160000 	.word	0x43160000
24000f78:	00000000 	.word	0x00000000
24000f7c:	20001004 	.word	0x20001004
24000f80:	20000f74 	.word	0x20000f74
24000f84:	200008e4 	.word	0x200008e4
24000f88:	200052cc 	.word	0x200052cc
			tCycle_init(&additive[i][j], &leaf);
24000f8c:	4620      	mov	r0, r4
24000f8e:	4651      	mov	r1, sl
24000f90:	f012 f8e0 	bl	24013154 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f94:	ecf5 0a01 	vldmia	r5!, {s1}
24000f98:	4630      	mov	r0, r6
24000f9a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000f9e:	ee60 0a89 	vmul.f32	s1, s1, s18
24000fa2:	4653      	mov	r3, sl
24000fa4:	eef0 1a68 	vmov.f32	s3, s17
24000fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000fac:	eeb0 1a48 	vmov.f32	s2, s16
24000fb0:	4639      	mov	r1, r7
24000fb2:	f00f fb0b 	bl	240105cc <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000fb6:	4545      	cmp	r5, r8
24000fb8:	f104 0404 	add.w	r4, r4, #4
24000fbc:	f106 0604 	add.w	r6, r6, #4
24000fc0:	d1e4      	bne.n	24000f8c <audioInit+0x92c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000fc2:	9b03      	ldr	r3, [sp, #12]
24000fc4:	f109 0912 	add.w	r9, r9, #18
24000fc8:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
24000fcc:	3348      	adds	r3, #72	; 0x48
24000fce:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000fd2:	9303      	str	r3, [sp, #12]
24000fd4:	d190      	bne.n	24000ef8 <audioInit+0x898>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fd6:	4edf      	ldr	r6, [pc, #892]	; (24001354 <audioInit+0xcf4>)
24000fd8:	eddf 8adf 	vldr	s17, [pc, #892]	; 24001358 <audioInit+0xcf8>
24000fdc:	ed9f 8adf 	vldr	s16, [pc, #892]	; 2400135c <audioInit+0xcfc>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fe0:	4631      	mov	r1, r6
24000fe2:	4cdf      	ldr	r4, [pc, #892]	; (24001360 <audioInit+0xd00>)
24000fe4:	eef0 0a68 	vmov.f32	s1, s17
24000fe8:	eeb0 0a48 	vmov.f32	s0, s16
24000fec:	48dd      	ldr	r0, [pc, #884]	; (24001364 <audioInit+0xd04>)
24000fee:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000ff2:	f00f fe01 	bl	24010bf8 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ff6:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24000ff8:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ffa:	eef0 0a68 	vmov.f32	s1, s17
24000ffe:	4631      	mov	r1, r6
24001000:	eeb0 0a48 	vmov.f32	s0, s16
24001004:	f00f fdf8 	bl	24010bf8 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24001008:	42ac      	cmp	r4, r5
2400100a:	d1f4      	bne.n	24000ff6 <audioInit+0x996>
2400100c:	4cd6      	ldr	r4, [pc, #856]	; (24001368 <audioInit+0xd08>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
2400100e:	4ed1      	ldr	r6, [pc, #836]	; (24001354 <audioInit+0xcf4>)
24001010:	eddf 8ad1 	vldr	s17, [pc, #836]	; 24001358 <audioInit+0xcf8>
24001014:	f104 0528 	add.w	r5, r4, #40	; 0x28
24001018:	ed9f 8ad0 	vldr	s16, [pc, #832]	; 2400135c <audioInit+0xcfc>
2400101c:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
2400101e:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001020:	eef0 0a68 	vmov.f32	s1, s17
24001024:	4631      	mov	r1, r6
24001026:	eeb0 0a48 	vmov.f32	s0, s16
2400102a:	f00f fde5 	bl	24010bf8 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
2400102e:	42ac      	cmp	r4, r5
24001030:	d1f4      	bne.n	2400101c <audioInit+0x9bc>

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);

			freqMult[i][v] = 1.0f;
24001032:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
	for (int i = 0; i < 10; i++)
24001036:	2600      	movs	r6, #0
24001038:	4bcc      	ldr	r3, [pc, #816]	; (2400136c <audioInit+0xd0c>)
2400103a:	f8df b428 	ldr.w	fp, [pc, #1064]	; 24001464 <audioInit+0xe04>
			tPBSaw_init(&saw[i][v], &leaf);
2400103e:	4cc5      	ldr	r4, [pc, #788]	; (24001354 <audioInit+0xcf4>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001040:	eddf bacb 	vldr	s23, [pc, #812]	; 24001370 <audioInit+0xd10>
			midiAdd[i][v] = 0.0f;
24001044:	ed9f 8ac5 	vldr	s16, [pc, #788]	; 2400135c <audioInit+0xcfc>

		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001048:	eddf caca 	vldr	s25, [pc, #808]	; 24001374 <audioInit+0xd14>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
2400104c:	ed9f aaca 	vldr	s20, [pc, #808]	; 24001378 <audioInit+0xd18>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001050:	e9cd 3604 	strd	r3, r6, [sp, #16]
		for(int i = 0; i < NUM_OSC; i++)
24001054:	4bc9      	ldr	r3, [pc, #804]	; (2400137c <audioInit+0xd1c>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24001056:	4635      	mov	r5, r6
24001058:	f106 0818 	add.w	r8, r6, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
2400105c:	eddf 8ac8 	vldr	s17, [pc, #800]	; 24001380 <audioInit+0xd20>
24001060:	eb03 0906 	add.w	r9, r3, r6
24001064:	4bc7      	ldr	r3, [pc, #796]	; (24001384 <audioInit+0xd24>)
24001066:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
24001068:	4648      	mov	r0, r9
2400106a:	4621      	mov	r1, r4
2400106c:	f012 f960 	bl	24013330 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
24001070:	4638      	mov	r0, r7
24001072:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24001074:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
24001078:	f012 f942 	bl	24013300 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
2400107c:	4bc2      	ldr	r3, [pc, #776]	; (24001388 <audioInit+0xd28>)
2400107e:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24001080:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
24001082:	1958      	adds	r0, r3, r5
24001084:	f012 f866 	bl	24013154 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
24001088:	4bc0      	ldr	r3, [pc, #768]	; (2400138c <audioInit+0xd2c>)
2400108a:	4621      	mov	r1, r4
2400108c:	1958      	adds	r0, r3, r5
2400108e:	f012 f8c1 	bl	24013214 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
24001092:	4bbf      	ldr	r3, [pc, #764]	; (24001390 <audioInit+0xd30>)
24001094:	4621      	mov	r1, r4
24001096:	1958      	adds	r0, r3, r5
24001098:	f012 f95a 	bl	24013350 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
2400109c:	4bbd      	ldr	r3, [pc, #756]	; (24001394 <audioInit+0xd34>)
2400109e:	4621      	mov	r1, r4
240010a0:	1958      	adds	r0, r3, r5
240010a2:	f012 f8ed 	bl	24013280 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
240010a6:	4bbc      	ldr	r3, [pc, #752]	; (24001398 <audioInit+0xd38>)
240010a8:	eef0 0a68 	vmov.f32	s1, s17
240010ac:	4621      	mov	r1, r4
240010ae:	1958      	adds	r0, r3, r5
240010b0:	eeb0 0a6b 	vmov.f32	s0, s23
240010b4:	f00f fda0 	bl	24010bf8 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
240010b8:	4bb8      	ldr	r3, [pc, #736]	; (2400139c <audioInit+0xd3c>)
240010ba:	442b      	add	r3, r5
240010bc:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
240010c0:	4bb7      	ldr	r3, [pc, #732]	; (240013a0 <audioInit+0xd40>)
240010c2:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
240010c4:	3508      	adds	r5, #8
240010c6:	45a8      	cmp	r8, r5
			midiAdd[i][v] = 0.0f;
240010c8:	ed83 8a00 	vstr	s16, [r3]
		for(int i = 0; i < NUM_OSC; i++)
240010cc:	d1cc      	bne.n	24001068 <audioInit+0xa08>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010ce:	4bb5      	ldr	r3, [pc, #724]	; (240013a4 <audioInit+0xd44>)
240010d0:	eef0 2a6c 	vmov.f32	s5, s25
240010d4:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 24001374 <audioInit+0xd14>
240010d8:	eef0 1a48 	vmov.f32	s3, s16
240010dc:	1998      	adds	r0, r3, r6
240010de:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 240013a8 <audioInit+0xd48>
240010e2:	eddf 0ab2 	vldr	s1, [pc, #712]	; 240013ac <audioInit+0xd4c>
240010e6:	2200      	movs	r2, #0
240010e8:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 240013b0 <audioInit+0xd50>
240010ec:	2104      	movs	r1, #4
240010ee:	4bb1      	ldr	r3, [pc, #708]	; (240013b4 <audioInit+0xd54>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
240010f0:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010f2:	f012 fcf9 	bl	24013ae8 <tSimpleLivingString3_initToPool>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240010f6:	4ab0      	ldr	r2, [pc, #704]	; (240013b8 <audioInit+0xd58>)
240010f8:	eeb0 1a48 	vmov.f32	s2, s16
240010fc:	4623      	mov	r3, r4
240010fe:	eddf 1aaf 	vldr	s3, [pc, #700]	; 240013bc <audioInit+0xd5c>
24001102:	1990      	adds	r0, r2, r6
24001104:	eddf 0aae 	vldr	s1, [pc, #696]	; 240013c0 <audioInit+0xd60>
24001108:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400110c:	ed9f 0a93 	vldr	s0, [pc, #588]	; 2400135c <audioInit+0xcfc>
24001110:	f106 0710 	add.w	r7, r6, #16
24001114:	49ab      	ldr	r1, [pc, #684]	; (240013c4 <audioInit+0xd64>)
24001116:	f00f fa59 	bl	240105cc <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
2400111a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
2400111e:	4622      	mov	r2, r4
24001120:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 240013c8 <audioInit+0xd68>
24001124:	2103      	movs	r1, #3
24001126:	48a9      	ldr	r0, [pc, #676]	; (240013cc <audioInit+0xd6c>)
24001128:	f010 fa50 	bl	240115cc <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
2400112c:	4622      	mov	r2, r4
2400112e:	2101      	movs	r1, #1
24001130:	48a7      	ldr	r0, [pc, #668]	; (240013d0 <audioInit+0xd70>)
24001132:	eddf 0aa8 	vldr	s1, [pc, #672]	; 240013d4 <audioInit+0xd74>
24001136:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 240013d8 <audioInit+0xd78>
2400113a:	f010 fa47 	bl	240115cc <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
2400113e:	4622      	mov	r2, r4
24001140:	2100      	movs	r1, #0
24001142:	48a6      	ldr	r0, [pc, #664]	; (240013dc <audioInit+0xd7c>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001144:	ed9f 9aa6 	vldr	s18, [pc, #664]	; 240013e0 <audioInit+0xd80>
24001148:	eddf 8aa6 	vldr	s17, [pc, #664]	; 240013e4 <audioInit+0xd84>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
2400114c:	f012 f914 	bl	24013378 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001150:	4ba5      	ldr	r3, [pc, #660]	; (240013e8 <audioInit+0xd88>)
24001152:	eef0 0a49 	vmov.f32	s1, s18
24001156:	eeb0 0a68 	vmov.f32	s0, s17
2400115a:	2101      	movs	r1, #1
2400115c:	1958      	adds	r0, r3, r5
2400115e:	4622      	mov	r2, r4
24001160:	f00f fec6 	bl	24010ef0 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001164:	4ba1      	ldr	r3, [pc, #644]	; (240013ec <audioInit+0xd8c>)
24001166:	eef0 0a49 	vmov.f32	s1, s18
2400116a:	4622      	mov	r2, r4
2400116c:	1958      	adds	r0, r3, r5
2400116e:	eeb0 0a68 	vmov.f32	s0, s17
24001172:	2100      	movs	r1, #0
24001174:	f00f febc 	bl	24010ef0 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001178:	4b9d      	ldr	r3, [pc, #628]	; (240013f0 <audioInit+0xd90>)
2400117a:	4622      	mov	r2, r4
2400117c:	eef0 0a49 	vmov.f32	s1, s18
24001180:	1958      	adds	r0, r3, r5
24001182:	eeb0 0a68 	vmov.f32	s0, s17
24001186:	2102      	movs	r1, #2
24001188:	f00f feb2 	bl	24010ef0 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
2400118c:	4b99      	ldr	r3, [pc, #612]	; (240013f4 <audioInit+0xd94>)
2400118e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24001192:	4621      	mov	r1, r4
24001194:	1958      	adds	r0, r3, r5
24001196:	eeb0 0a68 	vmov.f32	s0, s17
2400119a:	f010 fd0b 	bl	24011bb4 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
2400119e:	4b96      	ldr	r3, [pc, #600]	; (240013f8 <audioInit+0xd98>)
240011a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011a4:	4622      	mov	r2, r4
240011a6:	1958      	adds	r0, r3, r5
240011a8:	eeb0 0a68 	vmov.f32	s0, s17
240011ac:	2105      	movs	r1, #5
240011ae:	f010 fa0d 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240011b2:	4b92      	ldr	r3, [pc, #584]	; (240013fc <audioInit+0xd9c>)
240011b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011b8:	4622      	mov	r2, r4
240011ba:	1958      	adds	r0, r3, r5
240011bc:	eeb0 0a68 	vmov.f32	s0, s17
240011c0:	2106      	movs	r1, #6
240011c2:	f010 fa03 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240011c6:	4b8e      	ldr	r3, [pc, #568]	; (24001400 <audioInit+0xda0>)
240011c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011cc:	4622      	mov	r2, r4
240011ce:	1958      	adds	r0, r3, r5
240011d0:	eeb0 0a68 	vmov.f32	s0, s17
240011d4:	2107      	movs	r1, #7
240011d6:	f010 f9f9 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240011da:	4b8a      	ldr	r3, [pc, #552]	; (24001404 <audioInit+0xda4>)
240011dc:	4622      	mov	r2, r4
240011de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011e2:	1958      	adds	r0, r3, r5
240011e4:	eeb0 0a68 	vmov.f32	s0, s17
240011e8:	2104      	movs	r1, #4
240011ea:	f010 f9ef 	bl	240115cc <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
240011ee:	4b86      	ldr	r3, [pc, #536]	; (24001408 <audioInit+0xda8>)
240011f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011f4:	4621      	mov	r1, r4
240011f6:	1958      	adds	r0, r3, r5
240011f8:	eeb0 0a68 	vmov.f32	s0, s17
240011fc:	f011 f916 	bl	2401242c <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24001200:	4b82      	ldr	r3, [pc, #520]	; (2400140c <audioInit+0xdac>)
24001202:	eef0 0a6c 	vmov.f32	s1, s25
24001206:	4621      	mov	r1, r4
24001208:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
2400120a:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400120c:	eeb0 0a6b 	vmov.f32	s0, s23
24001210:	f00f fcf2 	bl	24010bf8 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24001214:	42af      	cmp	r7, r5
24001216:	d19b      	bne.n	24001150 <audioInit+0xaf0>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001218:	4b7d      	ldr	r3, [pc, #500]	; (24001410 <audioInit+0xdb0>)
2400121a:	2500      	movs	r5, #0
2400121c:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24001220:	4b7c      	ldr	r3, [pc, #496]	; (24001414 <audioInit+0xdb4>)
24001222:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001224:	eb08 0005 	add.w	r0, r8, r5
24001228:	4621      	mov	r1, r4
2400122a:	f012 f905 	bl	24013438 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400122e:	1978      	adds	r0, r7, r5
24001230:	4621      	mov	r1, r4
24001232:	f012 f947 	bl	240134c4 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001236:	4b78      	ldr	r3, [pc, #480]	; (24001418 <audioInit+0xdb8>)
24001238:	4621      	mov	r1, r4
2400123a:	1998      	adds	r0, r3, r6
2400123c:	4428      	add	r0, r5
2400123e:	f011 ff89 	bl	24013154 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
24001242:	4b76      	ldr	r3, [pc, #472]	; (2400141c <audioInit+0xdbc>)
24001244:	4621      	mov	r1, r4
24001246:	1998      	adds	r0, r3, r6
24001248:	4428      	add	r0, r5
2400124a:	f012 fb27 	bl	2401389c <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
2400124e:	4b74      	ldr	r3, [pc, #464]	; (24001420 <audioInit+0xdc0>)
24001250:	4621      	mov	r1, r4
24001252:	1998      	adds	r0, r3, r6
24001254:	4428      	add	r0, r5
24001256:	f012 fb7d 	bl	24013954 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
2400125a:	4b72      	ldr	r3, [pc, #456]	; (24001424 <audioInit+0xdc4>)
2400125c:	4621      	mov	r1, r4
2400125e:	1998      	adds	r0, r3, r6
24001260:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
24001262:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24001264:	f012 fa58 	bl	24013718 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24001268:	2d20      	cmp	r5, #32
2400126a:	d1db      	bne.n	24001224 <audioInit+0xbc4>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
2400126c:	4b6e      	ldr	r3, [pc, #440]	; (24001428 <audioInit+0xdc8>)
2400126e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
24001272:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 2400142c <audioInit+0xdcc>
24001276:	2106      	movs	r1, #6
24001278:	1998      	adds	r0, r3, r6
2400127a:	4622      	mov	r2, r4
2400127c:	f010 f9a6 	bl	240115cc <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
24001280:	4b6b      	ldr	r3, [pc, #428]	; (24001430 <audioInit+0xdd0>)
24001282:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
24001286:	4622      	mov	r2, r4
24001288:	1998      	adds	r0, r3, r6
2400128a:	ed9f 0a77 	vldr	s0, [pc, #476]	; 24001468 <audioInit+0xe08>
2400128e:	2107      	movs	r1, #7


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001290:	ed9f 9a68 	vldr	s18, [pc, #416]	; 24001434 <audioInit+0xdd4>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
24001294:	f010 f99a 	bl	240115cc <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001298:	4b67      	ldr	r3, [pc, #412]	; (24001438 <audioInit+0xdd8>)
2400129a:	9f04      	ldr	r7, [sp, #16]
2400129c:	eeb0 0a4a 	vmov.f32	s0, s20
240012a0:	4622      	mov	r2, r4
240012a2:	eddf 0a72 	vldr	s1, [pc, #456]	; 2400146c <audioInit+0xe0c>
240012a6:	2105      	movs	r1, #5
240012a8:	1998      	adds	r0, r3, r6
240012aa:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012ae:	eddf 8a63 	vldr	s17, [pc, #396]	; 2400143c <audioInit+0xddc>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012b2:	f010 f98b 	bl	240115cc <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012b6:	4628      	mov	r0, r5
240012b8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240012bc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240012c0:	4623      	mov	r3, r4
240012c2:	eef0 0a4a 	vmov.f32	s1, s20
240012c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240012ca:	eeb0 0a49 	vmov.f32	s0, s18
240012ce:	493d      	ldr	r1, [pc, #244]	; (240013c4 <audioInit+0xd64>)
240012d0:	f00f f97c 	bl	240105cc <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012d4:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
240012d6:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012d8:	eeb0 0a68 	vmov.f32	s0, s17
240012dc:	f00f fa2c 	bl	24010738 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
240012e0:	42af      	cmp	r7, r5
240012e2:	d1e8      	bne.n	240012b6 <audioInit+0xc56>
240012e4:	4b56      	ldr	r3, [pc, #344]	; (24001440 <audioInit+0xde0>)
240012e6:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
240012e8:	ed9f ba56 	vldr	s22, [pc, #344]	; 24001444 <audioInit+0xde4>
240012ec:	eb03 0806 	add.w	r8, r3, r6
240012f0:	4b55      	ldr	r3, [pc, #340]	; (24001448 <audioInit+0xde8>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240012f2:	eddf 9a56 	vldr	s19, [pc, #344]	; 2400144c <audioInit+0xdec>
240012f6:	199f      	adds	r7, r3, r6
240012f8:	f106 0320 	add.w	r3, r6, #32
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
240012fc:	eddf aa54 	vldr	s21, [pc, #336]	; 24001450 <audioInit+0xdf0>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001300:	ed9f 9a37 	vldr	s18, [pc, #220]	; 240013e0 <audioInit+0xd80>
24001304:	eddf 8a37 	vldr	s17, [pc, #220]	; 240013e4 <audioInit+0xd84>
24001308:	e9cd 6b06 	strd	r6, fp, [sp, #24]
2400130c:	461e      	mov	r6, r3
			tCrusher_init(&bc[i][v],&leaf);
2400130e:	4640      	mov	r0, r8
24001310:	4621      	mov	r1, r4
24001312:	f00e ff65 	bl	240101e0 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24001316:	4638      	mov	r0, r7
24001318:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
2400131c:	4621      	mov	r1, r4
2400131e:	f00f fee1 	bl	240110e4 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001322:	4b4c      	ldr	r3, [pc, #304]	; (24001454 <audioInit+0xdf4>)
24001324:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001328:	4621      	mov	r1, r4
2400132a:	eb03 0b05 	add.w	fp, r3, r5
2400132e:	4b4a      	ldr	r3, [pc, #296]	; (24001458 <audioInit+0xdf8>)
		for (int i = 0; i < NUM_EFFECT; i++)
24001330:	f108 0808 	add.w	r8, r8, #8
24001334:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24001336:	1958      	adds	r0, r3, r5
24001338:	f00f fed4 	bl	240110e4 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
2400133c:	4b47      	ldr	r3, [pc, #284]	; (2400145c <audioInit+0xdfc>)
2400133e:	eef0 0a4b 	vmov.f32	s1, s22
24001342:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 2400142c <audioInit+0xdcc>
24001346:	eb03 0a05 	add.w	sl, r3, r5
2400134a:	4b45      	ldr	r3, [pc, #276]	; (24001460 <audioInit+0xe00>)
2400134c:	4622      	mov	r2, r4
2400134e:	2106      	movs	r1, #6
24001350:	e08e      	b.n	24001470 <audioInit+0xe10>
24001352:	bf00      	nop
24001354:	200052cc 	.word	0x200052cc
24001358:	3a03126f 	.word	0x3a03126f
2400135c:	00000000 	.word	0x00000000
24001360:	20005298 	.word	0x20005298
24001364:	2001491c 	.word	0x2001491c
24001368:	20005724 	.word	0x20005724
2400136c:	20005094 	.word	0x20005094
24001370:	42800000 	.word	0x42800000
24001374:	3c23d70a 	.word	0x3c23d70a
24001378:	447a0000 	.word	0x447a0000
2400137c:	20005b84 	.word	0x20005b84
24001380:	3ca3d70a 	.word	0x3ca3d70a
24001384:	20005768 	.word	0x20005768
24001388:	20005c40 	.word	0x20005c40
2400138c:	200148f4 	.word	0x200148f4
24001390:	20005b9c 	.word	0x20005b9c
24001394:	20005c58 	.word	0x20005c58
24001398:	2000574c 	.word	0x2000574c
2400139c:	200050dc 	.word	0x200050dc
240013a0:	20005510 	.word	0x20005510
240013a4:	200053f0 	.word	0x200053f0
240013a8:	3f7fff58 	.word	0x3f7fff58
240013ac:	4684d000 	.word	0x4684d000
240013b0:	435c0000 	.word	0x435c0000
240013b4:	2000550c 	.word	0x2000550c
240013b8:	20005094 	.word	0x20005094
240013bc:	43480000 	.word	0x43480000
240013c0:	42480000 	.word	0x42480000
240013c4:	20001004 	.word	0x20001004
240013c8:	44bb8000 	.word	0x44bb8000
240013cc:	20005578 	.word	0x20005578
240013d0:	2000557c 	.word	0x2000557c
240013d4:	3f666666 	.word	0x3f666666
240013d8:	44480000 	.word	0x44480000
240013dc:	20005568 	.word	0x20005568
240013e0:	3f333333 	.word	0x3f333333
240013e4:	44fa0000 	.word	0x44fa0000
240013e8:	200053f8 	.word	0x200053f8
240013ec:	20005160 	.word	0x20005160
240013f0:	20000a0c 	.word	0x20000a0c
240013f4:	20005048 	.word	0x20005048
240013f8:	200008d4 	.word	0x200008d4
240013fc:	200008c4 	.word	0x200008c4
24001400:	200008b4 	.word	0x200008b4
24001404:	200008a4 	.word	0x200008a4
24001408:	20000894 	.word	0x20000894
2400140c:	2000509c 	.word	0x2000509c
24001410:	20005340 	.word	0x20005340
24001414:	20005320 	.word	0x20005320
24001418:	20005390 	.word	0x20005390
2400141c:	200053d0 	.word	0x200053d0
24001420:	200053b0 	.word	0x200053b0
24001424:	20005360 	.word	0x20005360
24001428:	20005590 	.word	0x20005590
2400142c:	42a00000 	.word	0x42a00000
24001430:	20005598 	.word	0x20005598
24001434:	3dcccccd 	.word	0x3dcccccd
24001438:	20005570 	.word	0x20005570
2400143c:	3f7fffac 	.word	0x3f7fffac
24001440:	20000a24 	.word	0x20000a24
24001444:	42000000 	.word	0x42000000
24001448:	20000de4 	.word	0x20000de4
2400144c:	47bb8000 	.word	0x47bb8000
24001450:	457a0000 	.word	0x457a0000
24001454:	20005c00 	.word	0x20005c00
24001458:	20000e04 	.word	0x20000e04
2400145c:	20005c20 	.word	0x20005c20
24001460:	20000a44 	.word	0x20000a44
24001464:	2000550c 	.word	0x2000550c
24001468:	463b8000 	.word	0x463b8000
2400146c:	3ff33333 	.word	0x3ff33333
24001470:	eb03 0905 	add.w	r9, r3, r5
24001474:	4658      	mov	r0, fp
24001476:	f010 f8a9 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
2400147a:	4650      	mov	r0, sl
2400147c:	eef0 0a4b 	vmov.f32	s1, s22
24001480:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 24001468 <audioInit+0xe08>
24001484:	4622      	mov	r2, r4
24001486:	2107      	movs	r1, #7
24001488:	f010 f8a0 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
2400148c:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 2400146c <audioInit+0xe0c>
24001490:	4622      	mov	r2, r4
24001492:	2105      	movs	r1, #5
24001494:	4648      	mov	r0, r9
24001496:	eeb0 0a4a 	vmov.f32	s0, s20
2400149a:	f010 f897 	bl	240115cc <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400149e:	eeb0 0a69 	vmov.f32	s0, s19
240014a2:	4658      	mov	r0, fp
240014a4:	f010 fa44 	bl	24011930 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
240014a8:	4650      	mov	r0, sl
240014aa:	eeb0 0a69 	vmov.f32	s0, s19
240014ae:	f010 fa3f 	bl	24011930 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014b2:	eeb0 0a69 	vmov.f32	s0, s19
240014b6:	4648      	mov	r0, r9
240014b8:	f010 fa3a 	bl	24011930 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
240014bc:	4b84      	ldr	r3, [pc, #528]	; (240016d0 <audioInit+0x1070>)
240014be:	4621      	mov	r1, r4
240014c0:	1958      	adds	r0, r3, r5
240014c2:	4b84      	ldr	r3, [pc, #528]	; (240016d4 <audioInit+0x1074>)
240014c4:	9003      	str	r0, [sp, #12]
240014c6:	eb03 0905 	add.w	r9, r3, r5
240014ca:	f00e ff45 	bl	24010358 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
240014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240014d2:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
240014d6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 240016d8 <audioInit+0x1078>
240014da:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
240014de:	9803      	ldr	r0, [sp, #12]
240014e0:	4a7e      	ldr	r2, [pc, #504]	; (240016dc <audioInit+0x107c>)
240014e2:	497f      	ldr	r1, [pc, #508]	; (240016e0 <audioInit+0x1080>)
240014e4:	9300      	str	r3, [sp, #0]
240014e6:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 240016e4 <audioInit+0x1084>
240014ea:	f00e ffdf 	bl	240104ac <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
240014ee:	4b7e      	ldr	r3, [pc, #504]	; (240016e8 <audioInit+0x1088>)
240014f0:	eeb0 0a6a 	vmov.f32	s0, s21
240014f4:	4a7d      	ldr	r2, [pc, #500]	; (240016ec <audioInit+0x108c>)
240014f6:	1958      	adds	r0, r3, r5
240014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240014fc:	f00e fc08 	bl	2400fd10 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
24001500:	4b7b      	ldr	r3, [pc, #492]	; (240016f0 <audioInit+0x1090>)
24001502:	4a7a      	ldr	r2, [pc, #488]	; (240016ec <audioInit+0x108c>)
24001504:	eeb0 0a6a 	vmov.f32	s0, s21
24001508:	1958      	adds	r0, r3, r5
2400150a:	4b7a      	ldr	r3, [pc, #488]	; (240016f4 <audioInit+0x1094>)
2400150c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001510:	eb03 0a05 	add.w	sl, r3, r5
24001514:	f00e fbfc 	bl	2400fd10 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
24001518:	4621      	mov	r1, r4
2400151a:	4648      	mov	r0, r9
2400151c:	f011 fe1a 	bl	24013154 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001520:	4621      	mov	r1, r4
24001522:	4650      	mov	r0, sl
24001524:	f011 fe16 	bl	24013154 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24001528:	ed9f 0a73 	vldr	s0, [pc, #460]	; 240016f8 <audioInit+0x1098>
2400152c:	4648      	mov	r0, r9
2400152e:	f011 fe53 	bl	240131d8 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24001532:	4650      	mov	r0, sl
24001534:	ed9f 0a71 	vldr	s0, [pc, #452]	; 240016fc <audioInit+0x109c>
24001538:	f011 fe4e 	bl	240131d8 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
2400153c:	4b70      	ldr	r3, [pc, #448]	; (24001700 <audioInit+0x10a0>)
2400153e:	eef0 0a49 	vmov.f32	s1, s18
24001542:	4622      	mov	r2, r4
24001544:	1958      	adds	r0, r3, r5
24001546:	eeb0 0a68 	vmov.f32	s0, s17
2400154a:	2101      	movs	r1, #1
2400154c:	f00f fcd0 	bl	24010ef0 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24001550:	4b6c      	ldr	r3, [pc, #432]	; (24001704 <audioInit+0x10a4>)
24001552:	eef0 0a49 	vmov.f32	s1, s18
24001556:	4622      	mov	r2, r4
24001558:	1958      	adds	r0, r3, r5
2400155a:	eeb0 0a68 	vmov.f32	s0, s17
2400155e:	2100      	movs	r1, #0
24001560:	f00f fcc6 	bl	24010ef0 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24001564:	4b68      	ldr	r3, [pc, #416]	; (24001708 <audioInit+0x10a8>)
24001566:	4622      	mov	r2, r4
24001568:	eef0 0a49 	vmov.f32	s1, s18
2400156c:	1958      	adds	r0, r3, r5
2400156e:	eeb0 0a68 	vmov.f32	s0, s17
24001572:	2102      	movs	r1, #2
24001574:	f00f fcbc 	bl	24010ef0 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24001578:	4b64      	ldr	r3, [pc, #400]	; (2400170c <audioInit+0x10ac>)
2400157a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400157e:	4621      	mov	r1, r4
24001580:	1958      	adds	r0, r3, r5
24001582:	eeb0 0a68 	vmov.f32	s0, s17
24001586:	f010 fb15 	bl	24011bb4 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
2400158a:	4b61      	ldr	r3, [pc, #388]	; (24001710 <audioInit+0x10b0>)
2400158c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001590:	4622      	mov	r2, r4
24001592:	1958      	adds	r0, r3, r5
24001594:	eeb0 0a68 	vmov.f32	s0, s17
24001598:	2105      	movs	r1, #5
2400159a:	f010 f817 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
2400159e:	4b5d      	ldr	r3, [pc, #372]	; (24001714 <audioInit+0x10b4>)
240015a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015a4:	4622      	mov	r2, r4
240015a6:	1958      	adds	r0, r3, r5
240015a8:	eeb0 0a68 	vmov.f32	s0, s17
240015ac:	2106      	movs	r1, #6
240015ae:	f010 f80d 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
240015b2:	4b59      	ldr	r3, [pc, #356]	; (24001718 <audioInit+0x10b8>)
240015b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015b8:	4622      	mov	r2, r4
240015ba:	1958      	adds	r0, r3, r5
240015bc:	eeb0 0a68 	vmov.f32	s0, s17
240015c0:	2107      	movs	r1, #7
240015c2:	f010 f803 	bl	240115cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
240015c6:	4b55      	ldr	r3, [pc, #340]	; (2400171c <audioInit+0x10bc>)
240015c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015cc:	4622      	mov	r2, r4
240015ce:	1958      	adds	r0, r3, r5
240015d0:	eeb0 0a68 	vmov.f32	s0, s17
240015d4:	2104      	movs	r1, #4
240015d6:	f00f fff9 	bl	240115cc <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015da:	4b51      	ldr	r3, [pc, #324]	; (24001720 <audioInit+0x10c0>)
240015dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015e0:	4621      	mov	r1, r4
240015e2:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
240015e4:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240015e6:	eeb0 0a68 	vmov.f32	s0, s17
240015ea:	f010 ff1f 	bl	2401242c <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
240015ee:	42ae      	cmp	r6, r5
240015f0:	f47f ae8d 	bne.w	2400130e <audioInit+0xcae>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
240015f4:	eddf 8a4b 	vldr	s17, [pc, #300]	; 24001724 <audioInit+0x10c4>
240015f8:	e9dd 6b06 	ldrd	r6, fp, [sp, #24]
240015fc:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
24001600:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001602:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
24001604:	eef0 0a68 	vmov.f32	s1, s17
24001608:	4621      	mov	r1, r4
2400160a:	eeb0 0a48 	vmov.f32	s0, s16
2400160e:	f00f faf3 	bl	24010bf8 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
24001612:	45ab      	cmp	fp, r5
24001614:	d1f4      	bne.n	24001600 <audioInit+0xfa0>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001616:	9b04      	ldr	r3, [sp, #16]
24001618:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}


		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
2400161c:	4a42      	ldr	r2, [pc, #264]	; (24001728 <audioInit+0x10c8>)
2400161e:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001620:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001622:	4842      	ldr	r0, [pc, #264]	; (2400172c <audioInit+0x10cc>)
24001624:	2102      	movs	r1, #2
24001626:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001628:	9304      	str	r3, [sp, #16]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
2400162a:	4438      	add	r0, r7
2400162c:	9b05      	ldr	r3, [sp, #20]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400162e:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001632:	eb02 1383 	add.w	r3, r2, r3, lsl #6
24001636:	2220      	movs	r2, #32
24001638:	9300      	str	r3, [sp, #0]
2400163a:	4b3d      	ldr	r3, [pc, #244]	; (24001730 <audioInit+0x10d0>)
2400163c:	f013 faa4 	bl	24014b88 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
24001640:	4a3c      	ldr	r2, [pc, #240]	; (24001734 <audioInit+0x10d4>)
24001642:	eb06 1346 	add.w	r3, r6, r6, lsl #5
24001646:	2120      	movs	r1, #32
24001648:	19d0      	adds	r0, r2, r7
2400164a:	4a3b      	ldr	r2, [pc, #236]	; (24001738 <audioInit+0x10d8>)
2400164c:	4413      	add	r3, r2
2400164e:	2202      	movs	r2, #2
24001650:	9300      	str	r3, [sp, #0]
24001652:	9201      	str	r2, [sp, #4]
24001654:	4b36      	ldr	r3, [pc, #216]	; (24001730 <audioInit+0x10d0>)
24001656:	f013 fcd3 	bl	24015000 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400165a:	4938      	ldr	r1, [pc, #224]	; (2400173c <audioInit+0x10dc>)
2400165c:	4622      	mov	r2, r4
2400165e:	eddf 0a38 	vldr	s1, [pc, #224]	; 24001740 <audioInit+0x10e0>
24001662:	1988      	adds	r0, r1, r6
24001664:	ed9f 0a37 	vldr	s0, [pc, #220]	; 24001744 <audioInit+0x10e4>
24001668:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400166a:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400166c:	f00f fc40 	bl	24010ef0 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001670:	9b05      	ldr	r3, [sp, #20]
24001672:	b96b      	cbnz	r3, 24001690 <audioInit+0x1030>
24001674:	9505      	str	r5, [sp, #20]
24001676:	e4ed      	b.n	24001054 <audioInit+0x9f4>
		if (boardNumber == 0)
24001678:	781b      	ldrb	r3, [r3, #0]
2400167a:	b1f3      	cbz	r3, 240016ba <audioInit+0x105a>
		else if (boardNumber == 1)
2400167c:	2b01      	cmp	r3, #1
2400167e:	d022      	beq.n	240016c6 <audioInit+0x1066>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001680:	3b01      	subs	r3, #1
24001682:	4a31      	ldr	r2, [pc, #196]	; (24001748 <audioInit+0x10e8>)
			numStringsThisBoard = 2;
24001684:	4931      	ldr	r1, [pc, #196]	; (2400174c <audioInit+0x10ec>)
24001686:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
24001688:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
2400168a:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
2400168c:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
2400168e:	e424      	b.n	24000eda <audioInit+0x87a>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24001690:	2280      	movs	r2, #128	; 0x80
24001692:	2100      	movs	r1, #0
24001694:	482e      	ldr	r0, [pc, #184]	; (24001750 <audioInit+0x10f0>)
24001696:	f013 ff23 	bl	240154e0 <memset>
	}
	HAL_Delay(1);
2400169a:	9805      	ldr	r0, [sp, #20]

}
2400169c:	b009      	add	sp, #36	; 0x24
2400169e:	ecbd 8b10 	vpop	{d8-d15}
240016a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
240016a6:	f003 b841 	b.w	2400472c <HAL_Delay>
		firstString = boardNumber;
240016aa:	4a2a      	ldr	r2, [pc, #168]	; (24001754 <audioInit+0x10f4>)
		numStringsThisBoard = 1;
240016ac:	2001      	movs	r0, #1
		firstString = boardNumber;
240016ae:	4b26      	ldr	r3, [pc, #152]	; (24001748 <audioInit+0x10e8>)
		numStringsThisBoard = 1;
240016b0:	4926      	ldr	r1, [pc, #152]	; (2400174c <audioInit+0x10ec>)
		firstString = boardNumber;
240016b2:	7812      	ldrb	r2, [r2, #0]
		numStringsThisBoard = 1;
240016b4:	7008      	strb	r0, [r1, #0]
		firstString = boardNumber;
240016b6:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
240016b8:	e40f      	b.n	24000eda <audioInit+0x87a>
			firstString = 0;
240016ba:	4823      	ldr	r0, [pc, #140]	; (24001748 <audioInit+0x10e8>)
			numStringsThisBoard = 1;
240016bc:	2101      	movs	r1, #1
240016be:	4a23      	ldr	r2, [pc, #140]	; (2400174c <audioInit+0x10ec>)
			firstString = 0;
240016c0:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
240016c2:	7011      	strb	r1, [r2, #0]
240016c4:	e409      	b.n	24000eda <audioInit+0x87a>
			firstString = 1;
240016c6:	4920      	ldr	r1, [pc, #128]	; (24001748 <audioInit+0x10e8>)
			numStringsThisBoard = 1;
240016c8:	4a20      	ldr	r2, [pc, #128]	; (2400174c <audioInit+0x10ec>)
			firstString = 1;
240016ca:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
240016cc:	7013      	strb	r3, [r2, #0]
240016ce:	e404      	b.n	24000eda <audioInit+0x87a>
240016d0:	20000a64 	.word	0x20000a64
240016d4:	20005528 	.word	0x20005528
240016d8:	c2b40000 	.word	0xc2b40000
240016dc:	30002000 	.word	0x30002000
240016e0:	3000a000 	.word	0x3000a000
240016e4:	3727c5ac 	.word	0x3727c5ac
240016e8:	20005008 	.word	0x20005008
240016ec:	200052c8 	.word	0x200052c8
240016f0:	20005028 	.word	0x20005028
240016f4:	20005548 	.word	0x20005548
240016f8:	3e4ccccd 	.word	0x3e4ccccd
240016fc:	3e638e39 	.word	0x3e638e39
24001700:	20000874 	.word	0x20000874
24001704:	20000854 	.word	0x20000854
24001708:	20000814 	.word	0x20000814
2400170c:	20000834 	.word	0x20000834
24001710:	200007f4 	.word	0x200007f4
24001714:	200007d4 	.word	0x200007d4
24001718:	200007b4 	.word	0x200007b4
2400171c:	20000794 	.word	0x20000794
24001720:	20000774 	.word	0x20000774
24001724:	3d4ccccd 	.word	0x3d4ccccd
24001728:	20005170 	.word	0x20005170
2400172c:	200055c0 	.word	0x200055c0
24001730:	2401c428 	.word	0x2401c428
24001734:	200055a8 	.word	0x200055a8
24001738:	20000e24 	.word	0x20000e24
2400173c:	200050c4 	.word	0x200050c4
24001740:	3e99999a 	.word	0x3e99999a
24001744:	46947000 	.word	0x46947000
24001748:	200050d4 	.word	0x200050d4
2400174c:	2000000d 	.word	0x2000000d
24001750:	30000040 	.word	0x30000040
24001754:	20014b15 	.word	0x20014b15

24001758 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24001758:	b570      	push	{r4, r5, r6, lr}
2400175a:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400175c:	4e0b      	ldr	r6, [pc, #44]	; (2400178c <audioStart+0x34>)
	HAL_Delay(1);
2400175e:	2001      	movs	r0, #1
{
24001760:	460c      	mov	r4, r1
	HAL_Delay(1);
24001762:	f002 ffe3 	bl	2400472c <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24001766:	2220      	movs	r2, #32
24001768:	f106 0140 	add.w	r1, r6, #64	; 0x40
2400176c:	4628      	mov	r0, r5
2400176e:	f008 f8e5 	bl	2400993c <HAL_SAI_Transmit_DMA>
24001772:	4b07      	ldr	r3, [pc, #28]	; (24001790 <audioStart+0x38>)
24001774:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001776:	2220      	movs	r2, #32
24001778:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
2400177c:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400177e:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24001780:	f008 f978 	bl	24009a74 <HAL_SAI_Receive_DMA>
24001784:	4b03      	ldr	r3, [pc, #12]	; (24001794 <audioStart+0x3c>)
24001786:	7018      	strb	r0, [r3, #0]
}
24001788:	bd70      	pop	{r4, r5, r6, pc}
2400178a:	bf00      	nop
2400178c:	30000000 	.word	0x30000000
24001790:	200148ec 	.word	0x200148ec
24001794:	20005b81 	.word	0x20005b81

24001798 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001798:	4b0c      	ldr	r3, [pc, #48]	; (240017cc <MX_BDMA_Init+0x34>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
2400179a:	2081      	movs	r0, #129	; 0x81
2400179c:	2200      	movs	r2, #0
2400179e:	2109      	movs	r1, #9
{
240017a0:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
240017a2:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
240017a6:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
240017a8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
240017ac:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
240017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240017b8:	9301      	str	r3, [sp, #4]
240017ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
240017bc:	f002 ffe0 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
240017c0:	2081      	movs	r0, #129	; 0x81

}
240017c2:	b002      	add	sp, #8
240017c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
240017c8:	f003 b818 	b.w	240047fc <HAL_NVIC_EnableIRQ>
240017cc:	58024400 	.word	0x58024400

240017d0 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
240017d0:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
240017d2:	231e      	movs	r3, #30
{
240017d4:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017d6:	25fa      	movs	r5, #250	; 0xfa
240017d8:	2134      	movs	r1, #52	; 0x34
240017da:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
240017dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017e0:	9500      	str	r5, [sp, #0]
240017e2:	2302      	movs	r3, #2
{
240017e4:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017e6:	f004 ff07 	bl	240065f8 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
240017ea:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
240017ec:	260a      	movs	r6, #10
    HAL_Delay(10);
240017ee:	f002 ff9d 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240017f2:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017f6:	2302      	movs	r3, #2
240017f8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240017fa:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240017fe:	4620      	mov	r0, r4
24001800:	aa03      	add	r2, sp, #12
24001802:	9500      	str	r5, [sp, #0]
24001804:	f004 fef8 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001808:	200a      	movs	r0, #10
2400180a:	f002 ff8f 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400180e:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001812:	2302      	movs	r3, #2
24001814:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001816:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400181a:	4620      	mov	r0, r4
2400181c:	aa03      	add	r2, sp, #12
2400181e:	9500      	str	r5, [sp, #0]
24001820:	f004 feea 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001824:	200a      	movs	r0, #10
24001826:	f002 ff81 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400182a:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400182c:	2302      	movs	r3, #2
2400182e:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001830:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001834:	4620      	mov	r0, r4
24001836:	aa03      	add	r2, sp, #12
24001838:	9500      	str	r5, [sp, #0]
2400183a:	f004 fedd 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400183e:	200a      	movs	r0, #10
24001840:	f002 ff74 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001844:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001846:	2302      	movs	r3, #2
24001848:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400184a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400184e:	4620      	mov	r0, r4
24001850:	aa03      	add	r2, sp, #12
24001852:	9500      	str	r5, [sp, #0]
24001854:	f004 fed0 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001858:	200a      	movs	r0, #10
2400185a:	f002 ff67 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400185e:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001862:	2302      	movs	r3, #2
24001864:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001866:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400186a:	4620      	mov	r0, r4
2400186c:	aa03      	add	r2, sp, #12
2400186e:	9500      	str	r5, [sp, #0]
24001870:	f004 fec2 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001874:	4630      	mov	r0, r6
24001876:	f002 ff59 	bl	2400472c <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400187a:	aa03      	add	r2, sp, #12
2400187c:	2302      	movs	r3, #2
2400187e:	2134      	movs	r1, #52	; 0x34
24001880:	4620      	mov	r0, r4
24001882:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24001884:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001888:	f004 feb6 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400188c:	4630      	mov	r0, r6
2400188e:	f002 ff4d 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001892:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001896:	aa03      	add	r2, sp, #12
24001898:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400189a:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400189e:	4620      	mov	r0, r4
240018a0:	2302      	movs	r3, #2
240018a2:	9500      	str	r5, [sp, #0]
240018a4:	f004 fea8 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018a8:	4630      	mov	r0, r6
240018aa:	f002 ff3f 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018ae:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018b2:	aa03      	add	r2, sp, #12
240018b4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ba:	4620      	mov	r0, r4
240018bc:	2302      	movs	r3, #2
240018be:	9500      	str	r5, [sp, #0]
240018c0:	f004 fe9a 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018c4:	4630      	mov	r0, r6
240018c6:	f002 ff31 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018ca:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018cc:	aa03      	add	r2, sp, #12
240018ce:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018d4:	4620      	mov	r0, r4
240018d6:	2302      	movs	r3, #2
240018d8:	9500      	str	r5, [sp, #0]
240018da:	f004 fe8d 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018de:	4630      	mov	r0, r6
240018e0:	f002 ff24 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018e4:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018e6:	aa03      	add	r2, sp, #12
240018e8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ee:	4620      	mov	r0, r4
240018f0:	2302      	movs	r3, #2
240018f2:	9500      	str	r5, [sp, #0]
240018f4:	f004 fe80 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018f8:	4630      	mov	r0, r6
240018fa:	f002 ff17 	bl	2400472c <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018fe:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001902:	aa03      	add	r2, sp, #12
24001904:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24001906:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400190a:	4620      	mov	r0, r4
2400190c:	2134      	movs	r1, #52	; 0x34
2400190e:	9500      	str	r5, [sp, #0]
24001910:	f004 fe72 	bl	240065f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001914:	4630      	mov	r0, r6
24001916:	f002 ff09 	bl	2400472c <HAL_Delay>
}
2400191a:	b004      	add	sp, #16
2400191c:	bd70      	pop	{r4, r5, r6, pc}
2400191e:	bf00      	nop

24001920 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24001920:	4b24      	ldr	r3, [pc, #144]	; (240019b4 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001922:	2200      	movs	r2, #0
24001924:	2102      	movs	r1, #2
24001926:	200b      	movs	r0, #11
{
24001928:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
2400192a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
2400192e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24001930:	f044 0401 	orr.w	r4, r4, #1
24001934:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24001938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
2400193c:	f003 0301 	and.w	r3, r3, #1
24001940:	9301      	str	r3, [sp, #4]
24001942:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24001944:	f002 ff1c 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24001948:	200b      	movs	r0, #11
2400194a:	f002 ff57 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
2400194e:	2200      	movs	r2, #0
24001950:	2105      	movs	r1, #5
24001952:	200c      	movs	r0, #12
24001954:	f002 ff14 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24001958:	200c      	movs	r0, #12
2400195a:	f002 ff4f 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
2400195e:	2200      	movs	r2, #0
24001960:	2106      	movs	r1, #6
24001962:	200d      	movs	r0, #13
24001964:	f002 ff0c 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24001968:	200d      	movs	r0, #13
2400196a:	f002 ff47 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
2400196e:	2200      	movs	r2, #0
24001970:	2104      	movs	r1, #4
24001972:	200e      	movs	r0, #14
24001974:	f002 ff04 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24001978:	200e      	movs	r0, #14
2400197a:	f002 ff3f 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
2400197e:	2200      	movs	r2, #0
24001980:	2103      	movs	r1, #3
24001982:	200f      	movs	r0, #15
24001984:	f002 fefc 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001988:	200f      	movs	r0, #15
2400198a:	f002 ff37 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
2400198e:	2200      	movs	r2, #0
24001990:	2101      	movs	r1, #1
24001992:	2011      	movs	r0, #17
24001994:	f002 fef4 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001998:	2011      	movs	r0, #17
2400199a:	f002 ff2f 	bl	240047fc <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
2400199e:	2066      	movs	r0, #102	; 0x66
240019a0:	2200      	movs	r2, #0
240019a2:	2108      	movs	r1, #8
240019a4:	f002 feec 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
240019a8:	2066      	movs	r0, #102	; 0x66

}
240019aa:	b002      	add	sp, #8
240019ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
240019b0:	f002 bf24 	b.w	240047fc <HAL_NVIC_EnableIRQ>
240019b4:	58024400 	.word	0x58024400

240019b8 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240019b8:	481b      	ldr	r0, [pc, #108]	; (24001a28 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
240019ba:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
240019bc:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240019be:	2108      	movs	r1, #8
{
240019c0:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240019c2:	4c1a      	ldr	r4, [pc, #104]	; (24001a2c <MX_FMC_Init+0x74>)
{
240019c4:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
240019c6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240019c8:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
240019ca:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
240019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
240019d0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240019d2:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
240019d6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
240019d8:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
240019da:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
240019de:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
240019e0:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
240019e2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240019e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
240019ea:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
240019ec:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
240019f0:	2205      	movs	r2, #5

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
240019f2:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
240019f4:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
240019f6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24001a20 <MX_FMC_Init+0x68>
240019fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
240019fe:	2203      	movs	r2, #3
24001a00:	2302      	movs	r3, #2
24001a02:	ed8d 7b00 	vstr	d7, [sp]
24001a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001a0a:	f009 f815 	bl	2400aa38 <HAL_SDRAM_Init>
24001a0e:	b908      	cbnz	r0, 24001a14 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24001a10:	b008      	add	sp, #32
24001a12:	bd10      	pop	{r4, pc}
    Error_Handler( );
24001a14:	f002 f98a 	bl	24003d2c <Error_Handler>
}
24001a18:	b008      	add	sp, #32
24001a1a:	bd10      	pop	{r4, pc}
24001a1c:	f3af 8000 	nop.w
24001a20:	00000002 	.word	0x00000002
24001a24:	00000008 	.word	0x00000008
24001a28:	20014948 	.word	0x20014948
24001a2c:	52004140 	.word	0x52004140

24001a30 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24001a30:	4b31      	ldr	r3, [pc, #196]	; (24001af8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a32:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24001a34:	b5d0      	push	{r4, r6, r7, lr}
24001a36:	b088      	sub	sp, #32
  if (FMC_Initialized) {
24001a38:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001a3a:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24001a3c:	2a00      	cmp	r2, #0
24001a3e:	d159      	bne.n	24001af4 <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24001a40:	4a2e      	ldr	r2, [pc, #184]	; (24001afc <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24001a42:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a44:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a48:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24001a4a:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a4c:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001a4e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a52:	2600      	movs	r6, #0
24001a54:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24001a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001a5a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001a5e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a62:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24001a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24001a68:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001a6a:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24001a6c:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001a6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001a74:	a902      	add	r1, sp, #8
24001a76:	4822      	ldr	r0, [pc, #136]	; (24001b00 <HAL_SDRAM_MspInit+0xd0>)
24001a78:	f004 fb40 	bl	240060fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a7c:	f248 1237 	movw	r2, #33079	; 0x8137
24001a80:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001a82:	a902      	add	r1, sp, #8
24001a84:	481f      	ldr	r0, [pc, #124]	; (24001b04 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a86:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001a88:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001a8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001a90:	f004 fb34 	bl	240060fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001a94:	f24c 7203 	movw	r2, #50947	; 0xc703
24001a98:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001a9a:	a902      	add	r1, sp, #8
24001a9c:	481a      	ldr	r0, [pc, #104]	; (24001b08 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001a9e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001aa4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001aa8:	f004 fb28 	bl	240060fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001aac:	f240 62ff 	movw	r2, #1791	; 0x6ff
24001ab0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001ab2:	a902      	add	r1, sp, #8
24001ab4:	4815      	ldr	r0, [pc, #84]	; (24001b0c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ab6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001ab8:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001abc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001ac0:	f004 fb1c 	bl	240060fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001ac4:	f64f 722c 	movw	r2, #65324	; 0xff2c
24001ac8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001aca:	a902      	add	r1, sp, #8
24001acc:	4810      	ldr	r0, [pc, #64]	; (24001b10 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ace:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001ad0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24001ad4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001ad8:	f004 fb10 	bl	240060fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001adc:	f64f 023f 	movw	r2, #63551	; 0xf83f
24001ae0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001ae2:	a902      	add	r1, sp, #8
24001ae4:	480b      	ldr	r0, [pc, #44]	; (24001b14 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ae6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001ae8:	e9cd 6704 	strd	r6, r7, [sp, #16]
24001aec:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001af0:	f004 fb04 	bl	240060fc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24001af4:	b008      	add	sp, #32
24001af6:	bdd0      	pop	{r4, r6, r7, pc}
24001af8:	20014944 	.word	0x20014944
24001afc:	58024400 	.word	0x58024400
24001b00:	58021000 	.word	0x58021000
24001b04:	58021800 	.word	0x58021800
24001b08:	58020c00 	.word	0x58020c00
24001b0c:	58022000 	.word	0x58022000
24001b10:	58021c00 	.word	0x58021c00
24001b14:	58021400 	.word	0x58021400

24001b18 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24001b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001b1c:	4bbc      	ldr	r3, [pc, #752]	; (24001e10 <MX_GPIO_Init+0x2f8>)
{
24001b1e:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b20:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b22:	4dbc      	ldr	r5, [pc, #752]	; (24001e14 <MX_GPIO_Init+0x2fc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001b24:	4fbc      	ldr	r7, [pc, #752]	; (24001e18 <MX_GPIO_Init+0x300>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b26:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b28:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b2a:	4628      	mov	r0, r5

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001b2c:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 24001e2c <MX_GPIO_Init+0x314>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG14 PG13 PG12 PG7
                           PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001b30:	f247 08c0 	movw	r8, #28864	; 0x70c0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24001b34:	4eb9      	ldr	r6, [pc, #740]	; (24001e1c <MX_GPIO_Init+0x304>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001b36:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001b3a:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 24001e30 <MX_GPIO_Init+0x318>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b3e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24001b42:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001b46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b4a:	f042 0210 	orr.w	r2, r2, #16
24001b4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b56:	f002 0210 	and.w	r2, r2, #16
24001b5a:	9201      	str	r2, [sp, #4]
24001b5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001b5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b62:	f042 0202 	orr.w	r2, r2, #2
24001b66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b6e:	f002 0202 	and.w	r2, r2, #2
24001b72:	9202      	str	r2, [sp, #8]
24001b74:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24001b76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001b7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b86:	f002 0240 	and.w	r2, r2, #64	; 0x40
24001b8a:	9203      	str	r2, [sp, #12]
24001b8c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24001b8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b92:	f042 0208 	orr.w	r2, r2, #8
24001b96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001b9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001b9e:	f002 0208 	and.w	r2, r2, #8
24001ba2:	9204      	str	r2, [sp, #16]
24001ba4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24001ba6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001baa:	f042 0204 	orr.w	r2, r2, #4
24001bae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bb6:	f002 0204 	and.w	r2, r2, #4
24001bba:	9205      	str	r2, [sp, #20]
24001bbc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24001bbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bc2:	f042 0201 	orr.w	r2, r2, #1
24001bc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bce:	f002 0201 	and.w	r2, r2, #1
24001bd2:	9206      	str	r2, [sp, #24]
24001bd4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24001bd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24001bde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001be2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001be6:	f402 7280 	and.w	r2, r2, #256	; 0x100
24001bea:	9207      	str	r2, [sp, #28]
24001bec:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24001bee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24001bf6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bfe:	f002 0280 	and.w	r2, r2, #128	; 0x80
24001c02:	9208      	str	r2, [sp, #32]
24001c04:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001c06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c0a:	f042 0220 	orr.w	r2, r2, #32
24001c0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001c12:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001c18:	f003 0320 	and.w	r3, r3, #32
24001c1c:	9309      	str	r3, [sp, #36]	; 0x24
24001c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001c20:	f004 fbbc 	bl	2400639c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001c24:	4622      	mov	r2, r4
24001c26:	4638      	mov	r0, r7
24001c28:	f44f 7100 	mov.w	r1, #512	; 0x200
24001c2c:	f004 fbb6 	bl	2400639c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001c30:	4622      	mov	r2, r4
24001c32:	4650      	mov	r0, sl
24001c34:	2193      	movs	r1, #147	; 0x93
24001c36:	f004 fbb1 	bl	2400639c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3, GPIO_PIN_RESET);
24001c3a:	4622      	mov	r2, r4
24001c3c:	4630      	mov	r0, r6
24001c3e:	2149      	movs	r1, #73	; 0x49
24001c40:	f004 fbac 	bl	2400639c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001c44:	4622      	mov	r2, r4
24001c46:	4658      	mov	r0, fp
24001c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001c4c:	f004 fba6 	bl	2400639c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c50:	a90a      	add	r1, sp, #40	; 0x28
24001c52:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c54:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001c56:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD3 PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001c5a:	f243 08f8 	movw	r8, #12536	; 0x30f8
24001c5e:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001c62:	f004 fa4b 	bl	240060fc <HAL_GPIO_Init>
                          |GPIO_PIN_3|GPIO_PIN_13|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001c66:	a90a      	add	r1, sp, #40	; 0x28
24001c68:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c6a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001c6c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001c70:	f44f 481f 	mov.w	r8, #40704	; 0x9f00
24001c74:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001c78:	f004 fa40 	bl	240060fc <HAL_GPIO_Init>
                          |GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001c7c:	a90a      	add	r1, sp, #40	; 0x28
24001c7e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001c80:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001c82:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001c86:	f004 fa39 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001c8a:	f04f 0800 	mov.w	r8, #0
24001c8e:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001c92:	a90a      	add	r1, sp, #40	; 0x28
24001c94:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001c96:	ed9f 7b54 	vldr	d7, [pc, #336]	; 24001de8 <MX_GPIO_Init+0x2d0>
24001c9a:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24001c9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001ca2:	f004 fa2b 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001ca6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001ca8:	a90a      	add	r1, sp, #40	; 0x28
24001caa:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001cac:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001cae:	ed9f 7b50 	vldr	d7, [pc, #320]	; 24001df0 <MX_GPIO_Init+0x2d8>
24001cb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001cb6:	f004 fa21 	bl	240060fc <HAL_GPIO_Init>
  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001cba:	a90a      	add	r1, sp, #40	; 0x28
24001cbc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001cbe:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 24001df8 <MX_GPIO_Init+0x2e0>
24001cc2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
24001cc6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001cca:	f004 fa17 	bl	240060fc <HAL_GPIO_Init>
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cce:	a90a      	add	r1, sp, #40	; 0x28
24001cd0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cd2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001cd4:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 24001e00 <MX_GPIO_Init+0x2e8>
24001cd8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cdc:	f004 fa0e 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001ce0:	a90a      	add	r1, sp, #40	; 0x28
24001ce2:	484f      	ldr	r0, [pc, #316]	; (24001e20 <MX_GPIO_Init+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001ce4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001ce6:	ed9f 7b48 	vldr	d7, [pc, #288]	; 24001e08 <MX_GPIO_Init+0x2f0>
24001cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001cee:	f004 fa05 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001cf2:	2293      	movs	r2, #147	; 0x93
24001cf4:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001cf6:	4650      	mov	r0, sl
24001cf8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001cfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001cfe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001d02:	f004 f9fb 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001d06:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001d0a:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001d0c:	a90a      	add	r1, sp, #40	; 0x28
24001d0e:	4845      	ldr	r0, [pc, #276]	; (24001e24 <MX_GPIO_Init+0x30c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d10:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001d12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001d16:	f004 f9f1 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001d1a:	2208      	movs	r2, #8
24001d1c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d20:	4638      	mov	r0, r7
24001d22:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d24:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001d26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d2a:	f004 f9e7 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001d2e:	f242 4205 	movw	r2, #9221	; 0x2405
24001d32:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d34:	a90a      	add	r1, sp, #40	; 0x28
24001d36:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d38:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001d3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d3e:	f004 f9dd 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001d42:	22c0      	movs	r2, #192	; 0xc0
24001d44:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001d46:	a90a      	add	r1, sp, #40	; 0x28
24001d48:	4837      	ldr	r0, [pc, #220]	; (24001e28 <MX_GPIO_Init+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d4a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001d4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001d50:	f004 f9d4 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001d54:	2202      	movs	r2, #2
24001d56:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d58:	a90a      	add	r1, sp, #40	; 0x28
24001d5a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d5c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d62:	f004 f9cb 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24001d66:	2249      	movs	r2, #73	; 0x49
24001d68:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d6a:	a90a      	add	r1, sp, #40	; 0x28
24001d6c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_3;
24001d6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001d72:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d76:	f004 f9c1 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001d7e:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001d80:	4658      	mov	r0, fp
24001d82:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001d84:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001d88:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001d8c:	f004 f9b6 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d90:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d92:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d94:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d96:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d98:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001d9a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001d9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001da0:	f004 f9ac 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001da8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001dac:	a90a      	add	r1, sp, #40	; 0x28
24001dae:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001db0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001db2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001db6:	f004 f9a1 	bl	240060fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001dba:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001dbc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001dc0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001dc2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001dc4:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001dc6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001dc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001dcc:	f004 f996 	bl	240060fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24001dd0:	4622      	mov	r2, r4
24001dd2:	4621      	mov	r1, r4
24001dd4:	2017      	movs	r0, #23
24001dd6:	f002 fcd3 	bl	24004780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24001dda:	2017      	movs	r0, #23
24001ddc:	f002 fd0e 	bl	240047fc <HAL_NVIC_EnableIRQ>

}
24001de0:	b011      	add	sp, #68	; 0x44
24001de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24001de6:	bf00      	nop
24001de8:	00000082 	.word	0x00000082
24001dec:	00000001 	.word	0x00000001
24001df0:	00000040 	.word	0x00000040
24001df4:	00210000 	.word	0x00210000
24001df8:	00000200 	.word	0x00000200
24001dfc:	00000001 	.word	0x00000001
24001e00:	0000e06c 	.word	0x0000e06c
24001e04:	00000003 	.word	0x00000003
24001e08:	00000900 	.word	0x00000900
24001e0c:	00000003 	.word	0x00000003
24001e10:	58024400 	.word	0x58024400
24001e14:	58020400 	.word	0x58020400
24001e18:	58021800 	.word	0x58021800
24001e1c:	58020000 	.word	0x58020000
24001e20:	58022000 	.word	0x58022000
24001e24:	58021400 	.word	0x58021400
24001e28:	58021c00 	.word	0x58021c00
24001e2c:	58020800 	.word	0x58020800
24001e30:	58020c00 	.word	0x58020c00

24001e34 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24001e34:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001e36:	4818      	ldr	r0, [pc, #96]	; (24001e98 <MX_I2C1_Init+0x64>)
  hi2c1.Init.Timing = 0x00B03FDB;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e38:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x00B03FDB;
24001e3a:	4a18      	ldr	r2, [pc, #96]	; (24001e9c <MX_I2C1_Init+0x68>)
  hi2c1.Init.OwnAddress1 = 68;
24001e3c:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24001e3e:	4c18      	ldr	r4, [pc, #96]	; (24001ea0 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e40:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
24001e42:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24001e44:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001e46:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x00B03FDB;
24001e48:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e4c:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001e4e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e52:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24001e54:	f004 fb72 	bl	2400653c <HAL_I2C_Init>
24001e58:	b950      	cbnz	r0, 24001e70 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e5a:	2100      	movs	r1, #0
24001e5c:	480e      	ldr	r0, [pc, #56]	; (24001e98 <MX_I2C1_Init+0x64>)
24001e5e:	f005 f92b 	bl	240070b8 <HAL_I2CEx_ConfigAnalogFilter>
24001e62:	b968      	cbnz	r0, 24001e80 <MX_I2C1_Init+0x4c>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001e64:	2100      	movs	r1, #0
24001e66:	480c      	ldr	r0, [pc, #48]	; (24001e98 <MX_I2C1_Init+0x64>)
24001e68:	f005 f95a 	bl	24007120 <HAL_I2CEx_ConfigDigitalFilter>
24001e6c:	b980      	cbnz	r0, 24001e90 <MX_I2C1_Init+0x5c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24001e6e:	bd10      	pop	{r4, pc}
    Error_Handler();
24001e70:	f001 ff5c 	bl	24003d2c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e74:	2100      	movs	r1, #0
24001e76:	4808      	ldr	r0, [pc, #32]	; (24001e98 <MX_I2C1_Init+0x64>)
24001e78:	f005 f91e 	bl	240070b8 <HAL_I2CEx_ConfigAnalogFilter>
24001e7c:	2800      	cmp	r0, #0
24001e7e:	d0f1      	beq.n	24001e64 <MX_I2C1_Init+0x30>
    Error_Handler();
24001e80:	f001 ff54 	bl	24003d2c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001e84:	2100      	movs	r1, #0
24001e86:	4804      	ldr	r0, [pc, #16]	; (24001e98 <MX_I2C1_Init+0x64>)
24001e88:	f005 f94a 	bl	24007120 <HAL_I2CEx_ConfigDigitalFilter>
24001e8c:	2800      	cmp	r0, #0
24001e8e:	d0ee      	beq.n	24001e6e <MX_I2C1_Init+0x3a>
}
24001e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001e94:	f001 bf4a 	b.w	24003d2c <Error_Handler>
24001e98:	20014a6c 	.word	0x20014a6c
24001e9c:	00b03fdb 	.word	0x00b03fdb
24001ea0:	40005400 	.word	0x40005400

24001ea4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001ea4:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001ea6:	4817      	ldr	r0, [pc, #92]	; (24001f04 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001ea8:	2300      	movs	r3, #0
24001eaa:	4917      	ldr	r1, [pc, #92]	; (24001f08 <MX_I2C2_Init+0x64>)
24001eac:	2401      	movs	r4, #1
24001eae:	4a17      	ldr	r2, [pc, #92]	; (24001f0c <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001eb0:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001eb2:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24001eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001eba:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24001ebe:	f004 fb3d 	bl	2400653c <HAL_I2C_Init>
24001ec2:	b950      	cbnz	r0, 24001eda <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001ec4:	2100      	movs	r1, #0
24001ec6:	480f      	ldr	r0, [pc, #60]	; (24001f04 <MX_I2C2_Init+0x60>)
24001ec8:	f005 f8f6 	bl	240070b8 <HAL_I2CEx_ConfigAnalogFilter>
24001ecc:	b968      	cbnz	r0, 24001eea <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001ece:	2100      	movs	r1, #0
24001ed0:	480c      	ldr	r0, [pc, #48]	; (24001f04 <MX_I2C2_Init+0x60>)
24001ed2:	f005 f925 	bl	24007120 <HAL_I2CEx_ConfigDigitalFilter>
24001ed6:	b980      	cbnz	r0, 24001efa <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001ed8:	bd10      	pop	{r4, pc}
    Error_Handler();
24001eda:	f001 ff27 	bl	24003d2c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001ede:	2100      	movs	r1, #0
24001ee0:	4808      	ldr	r0, [pc, #32]	; (24001f04 <MX_I2C2_Init+0x60>)
24001ee2:	f005 f8e9 	bl	240070b8 <HAL_I2CEx_ConfigAnalogFilter>
24001ee6:	2800      	cmp	r0, #0
24001ee8:	d0f1      	beq.n	24001ece <MX_I2C2_Init+0x2a>
    Error_Handler();
24001eea:	f001 ff1f 	bl	24003d2c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001eee:	2100      	movs	r1, #0
24001ef0:	4804      	ldr	r0, [pc, #16]	; (24001f04 <MX_I2C2_Init+0x60>)
24001ef2:	f005 f915 	bl	24007120 <HAL_I2CEx_ConfigDigitalFilter>
24001ef6:	2800      	cmp	r0, #0
24001ef8:	d0ee      	beq.n	24001ed8 <MX_I2C2_Init+0x34>
}
24001efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001efe:	f001 bf15 	b.w	24003d2c <Error_Handler>
24001f02:	bf00      	nop
24001f04:	20014ac0 	.word	0x20014ac0
24001f08:	40005800 	.word	0x40005800
24001f0c:	00b03fdb 	.word	0x00b03fdb

24001f10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
24001f12:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001f14:	2100      	movs	r1, #0
{
24001f16:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f18:	22c0      	movs	r2, #192	; 0xc0
24001f1a:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001f1c:	910a      	str	r1, [sp, #40]	; 0x28
24001f1e:	e9cd 1106 	strd	r1, r1, [sp, #24]
24001f22:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f26:	f013 fadb 	bl	240154e0 <memset>
  if(i2cHandle->Instance==I2C1)
24001f2a:	6823      	ldr	r3, [r4, #0]
24001f2c:	4a79      	ldr	r2, [pc, #484]	; (24002114 <HAL_I2C_MspInit+0x204>)
24001f2e:	4293      	cmp	r3, r2
24001f30:	d005      	beq.n	24001f3e <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001f32:	4a79      	ldr	r2, [pc, #484]	; (24002118 <HAL_I2C_MspInit+0x208>)
24001f34:	4293      	cmp	r3, r2
24001f36:	f000 8087 	beq.w	24002048 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001f3a:	b03d      	add	sp, #244	; 0xf4
24001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f3e:	2208      	movs	r2, #8
24001f40:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f42:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f48:	f006 f806 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
24001f4c:	2800      	cmp	r0, #0
24001f4e:	f040 80db 	bne.w	24002108 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f52:	4d72      	ldr	r5, [pc, #456]	; (2400211c <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f54:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001f58:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f5a:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f5c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001f60:	4e6f      	ldr	r6, [pc, #444]	; (24002120 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f62:	f043 0302 	orr.w	r3, r3, #2
24001f66:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24001f6a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001f6e:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f70:	f003 0302 	and.w	r3, r3, #2
24001f74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f76:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f78:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f7a:	486a      	ldr	r0, [pc, #424]	; (24002124 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001f80:	2200      	movs	r2, #0
24001f82:	2302      	movs	r3, #2
24001f84:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001f88:	f004 f8b8 	bl	240060fc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f8c:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001f90:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001f92:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001f98:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001f9a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24001f9e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001fa2:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001fa4:	4a60      	ldr	r2, [pc, #384]	; (24002128 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001faa:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001fac:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fae:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24001fb0:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001fb2:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fb8:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001fba:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24001fc0:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24001fc4:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24001fc8:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001fcc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24001fd0:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001fd4:	f002 fd6a 	bl	24004aac <HAL_DMA_Init>
24001fd8:	2800      	cmp	r0, #0
24001fda:	f040 8092 	bne.w	24002102 <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fde:	4d53      	ldr	r5, [pc, #332]	; (2400212c <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001fe0:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fe2:	4953      	ldr	r1, [pc, #332]	; (24002130 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001fe4:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24001fe6:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24001fec:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001fee:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24001ff0:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001ff2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24001ff6:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24001ff8:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24001ffa:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24001ffc:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24001ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24002002:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
24002004:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24002006:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002008:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400200a:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400200c:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
2400200e:	63e6      	str	r6, [r4, #60]	; 0x3c
24002010:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24002012:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002014:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24002018:	f002 fd48 	bl	24004aac <HAL_DMA_Init>
2400201c:	2800      	cmp	r0, #0
2400201e:	d16d      	bne.n	240020fc <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002020:	2200      	movs	r2, #0
24002022:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002024:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002026:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002028:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
2400202a:	f002 fba9 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
2400202e:	201f      	movs	r0, #31
24002030:	f002 fbe4 	bl	240047fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24002034:	2200      	movs	r2, #0
24002036:	2101      	movs	r1, #1
24002038:	2020      	movs	r0, #32
2400203a:	f002 fba1 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
2400203e:	2020      	movs	r0, #32
24002040:	f002 fbdc 	bl	240047fc <HAL_NVIC_EnableIRQ>
}
24002044:	b03d      	add	sp, #244	; 0xf4
24002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002048:	2208      	movs	r2, #8
2400204a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400204c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400204e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002052:	f005 ff81 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
24002056:	2800      	cmp	r0, #0
24002058:	d159      	bne.n	2400210e <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400205a:	4c30      	ldr	r4, [pc, #192]	; (2400211c <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400205c:	2010      	movs	r0, #16
2400205e:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24002060:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
24002062:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24002066:	2600      	movs	r6, #0
24002068:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400206a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400206e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24002072:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
2400207a:	9303      	str	r3, [sp, #12]
2400207c:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400207e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24002082:	f043 0302 	orr.w	r3, r3, #2
24002086:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400208a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400208e:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002090:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24002094:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24002098:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400209a:	a906      	add	r1, sp, #24
2400209c:	4825      	ldr	r0, [pc, #148]	; (24002134 <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400209e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240020a0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240020a4:	f004 f82a 	bl	240060fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240020a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
240020ac:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240020ae:	a906      	add	r1, sp, #24
240020b0:	481c      	ldr	r0, [pc, #112]	; (24002124 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240020b2:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240020b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
240020b8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240020bc:	f004 f81e 	bl	240060fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
240020c0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020c4:	2200      	movs	r2, #0
240020c6:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
240020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020cc:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
240020ce:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240020d2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240020da:	9305      	str	r3, [sp, #20]
240020dc:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240020de:	f002 fb4f 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
240020e2:	2021      	movs	r0, #33	; 0x21
240020e4:	f002 fb8a 	bl	240047fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
240020e8:	2200      	movs	r2, #0
240020ea:	2101      	movs	r1, #1
240020ec:	2022      	movs	r0, #34	; 0x22
240020ee:	f002 fb47 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
240020f2:	2022      	movs	r0, #34	; 0x22
240020f4:	f002 fb82 	bl	240047fc <HAL_NVIC_EnableIRQ>
}
240020f8:	b03d      	add	sp, #244	; 0xf4
240020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240020fc:	f001 fe16 	bl	24003d2c <Error_Handler>
24002100:	e78e      	b.n	24002020 <HAL_I2C_MspInit+0x110>
      Error_Handler();
24002102:	f001 fe13 	bl	24003d2c <Error_Handler>
24002106:	e76a      	b.n	24001fde <HAL_I2C_MspInit+0xce>
      Error_Handler();
24002108:	f001 fe10 	bl	24003d2c <Error_Handler>
2400210c:	e721      	b.n	24001f52 <HAL_I2C_MspInit+0x42>
      Error_Handler();
2400210e:	f001 fe0d 	bl	24003d2c <Error_Handler>
24002112:	e7a2      	b.n	2400205a <HAL_I2C_MspInit+0x14a>
24002114:	40005400 	.word	0x40005400
24002118:	40005800 	.word	0x40005800
2400211c:	58024400 	.word	0x58024400
24002120:	2001497c 	.word	0x2001497c
24002124:	58020400 	.word	0x58020400
24002128:	40020058 	.word	0x40020058
2400212c:	200149f4 	.word	0x200149f4
24002130:	40020070 	.word	0x40020070
24002134:	58021c00 	.word	0x58021c00

24002138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24002138:	b500      	push	{lr}
2400213a:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2400213c:	224c      	movs	r2, #76	; 0x4c
2400213e:	2100      	movs	r1, #0
24002140:	a80c      	add	r0, sp, #48	; 0x30
24002142:	f013 f9cd 	bl	240154e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24002146:	2220      	movs	r2, #32
24002148:	2100      	movs	r1, #0
2400214a:	a804      	add	r0, sp, #16
2400214c:	f013 f9c8 	bl	240154e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24002150:	2002      	movs	r0, #2
24002152:	f005 f817 	bl	24007184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24002156:	4b3e      	ldr	r3, [pc, #248]	; (24002250 <SystemClock_Config+0x118>)
24002158:	2100      	movs	r1, #0
2400215a:	4a3e      	ldr	r2, [pc, #248]	; (24002254 <SystemClock_Config+0x11c>)
2400215c:	9101      	str	r1, [sp, #4]
2400215e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24002160:	f021 0101 	bic.w	r1, r1, #1
24002164:	62d9      	str	r1, [r3, #44]	; 0x2c
24002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24002168:	f003 0301 	and.w	r3, r3, #1
2400216c:	9301      	str	r3, [sp, #4]
2400216e:	6993      	ldr	r3, [r2, #24]
24002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24002174:	6193      	str	r3, [r2, #24]
24002176:	6993      	ldr	r3, [r2, #24]
24002178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
2400217c:	9301      	str	r3, [sp, #4]
2400217e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002180:	6993      	ldr	r3, [r2, #24]
24002182:	0499      	lsls	r1, r3, #18
24002184:	d5fc      	bpl.n	24002180 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002186:	4b34      	ldr	r3, [pc, #208]	; (24002258 <SystemClock_Config+0x120>)
24002188:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
2400218c:	f041 0102 	orr.w	r1, r1, #2
24002190:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24002194:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400219a:	f003 0302 	and.w	r3, r3, #2
2400219e:	9302      	str	r3, [sp, #8]
240021a0:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240021a2:	9103      	str	r1, [sp, #12]
240021a4:	6991      	ldr	r1, [r2, #24]
240021a6:	4b2a      	ldr	r3, [pc, #168]	; (24002250 <SystemClock_Config+0x118>)
240021a8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240021ac:	6191      	str	r1, [r2, #24]
240021ae:	6992      	ldr	r2, [r2, #24]
240021b0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240021b4:	9203      	str	r2, [sp, #12]
240021b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240021b8:	4a26      	ldr	r2, [pc, #152]	; (24002254 <SystemClock_Config+0x11c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240021ba:	f041 0101 	orr.w	r1, r1, #1
240021be:	62d9      	str	r1, [r3, #44]	; 0x2c
240021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240021c2:	f003 0301 	and.w	r3, r3, #1
240021c6:	9303      	str	r3, [sp, #12]
240021c8:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240021ca:	6993      	ldr	r3, [r2, #24]
240021cc:	049b      	lsls	r3, r3, #18
240021ce:	d5fc      	bpl.n	240021ca <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240021d0:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240021d2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240021d4:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240021d6:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
240021d8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240021da:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
240021dc:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240021de:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240021e0:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
240021e2:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240021e4:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240021e6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
240021ea:	2306      	movs	r3, #6
240021ec:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
240021ee:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240021f0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 24002238 <SystemClock_Config+0x100>
  RCC_OscInitStruct.PLL.PLLR = 8;
240021f4:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240021f6:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240021f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240021fc:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240021fe:	f005 f869 	bl	240072d4 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24002202:	2200      	movs	r2, #0
24002204:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002206:	2104      	movs	r1, #4
24002208:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400220a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 24002240 <SystemClock_Config+0x108>
2400220e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24002212:	f44f 6280 	mov.w	r2, #1024	; 0x400
24002216:	2340      	movs	r3, #64	; 0x40
24002218:	ed8d 7b04 	vstr	d7, [sp, #16]
2400221c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24002248 <SystemClock_Config+0x110>
24002220:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24002224:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002228:	f005 fbe6 	bl	240079f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400222c:	b021      	add	sp, #132	; 0x84
2400222e:	f85d fb04 	ldr.w	pc, [sp], #4
24002232:	bf00      	nop
24002234:	f3af 8000 	nop.w
24002238:	00000021 	.word	0x00000021
2400223c:	00010000 	.word	0x00010000
24002240:	0000003f 	.word	0x0000003f
24002244:	00000003 	.word	0x00000003
24002248:	00000040 	.word	0x00000040
2400224c:	00000040 	.word	0x00000040
24002250:	58000400 	.word	0x58000400
24002254:	58024800 	.word	0x58024800
24002258:	58024400 	.word	0x58024400
2400225c:	00000000 	.word	0x00000000

24002260 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24002260:	b510      	push	{r4, lr}
24002262:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002264:	22a0      	movs	r2, #160	; 0xa0
24002266:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2P = 8;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
24002268:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400226c:	a808      	add	r0, sp, #32
2400226e:	f013 f937 	bl	240154e0 <memset>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24002272:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002274:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002276:	210c      	movs	r1, #12
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24002278:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400227a:	4668      	mov	r0, sp
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
2400227c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400227e:	23c0      	movs	r3, #192	; 0xc0
24002280:	ed9f 7b13 	vldr	d7, [pc, #76]	; 240022d0 <PeriphCommonClock_Config+0x70>
24002284:	e9cd 2306 	strd	r2, r3, [sp, #24]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
24002288:	2301      	movs	r3, #1
  PeriphClkInitStruct.PLL3.PLL3P = 4;
2400228a:	2204      	movs	r2, #4
  PeriphClkInitStruct.PLL3.PLL3M = 1;
2400228c:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
24002290:	2408      	movs	r4, #8
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24002292:	2310      	movs	r3, #16
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24002294:	ed9f 6b10 	vldr	d6, [pc, #64]	; 240022d8 <PeriphCommonClock_Config+0x78>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002298:	ed8d 7b02 	vstr	d7, [sp, #8]
2400229c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240022e0 <PeriphCommonClock_Config+0x80>
  PeriphClkInitStruct.PLL3.PLL3P = 4;
240022a0:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 16;
240022a4:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240022a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240022ac:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240022b4:	910f      	str	r1, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240022b6:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240022b8:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240022ba:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
240022be:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240022c2:	f005 fe49 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240022c6:	b030      	add	sp, #192	; 0xc0
240022c8:	bd10      	pop	{r4, pc}
240022ca:	bf00      	nop
240022cc:	f3af 8000 	nop.w
240022d0:	00000001 	.word	0x00000001
240022d4:	00000025 	.word	0x00000025
240022d8:	01010100 	.word	0x01010100
240022dc:	00000000 	.word	0x00000000
240022e0:	00000008 	.word	0x00000008
240022e4:	00000002 	.word	0x00000002

240022e8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240022e8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240022ea:	2301      	movs	r3, #1
240022ec:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
240022f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
240022f4:	b002      	add	sp, #8
240022f6:	4770      	bx	lr

240022f8 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
240022f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240022fc:	2301      	movs	r3, #1
{
240022fe:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
24002300:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
24002304:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24002308:	b93b      	cbnz	r3, 2400231a <getPresetNamesFromSDCard+0x22>
2400230a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 240023b8 <getPresetNamesFromSDCard+0xc0>
			}

		}

	}
	diskBusy = 0;
2400230e:	2300      	movs	r3, #0
24002310:	f88a 3000 	strb.w	r3, [sl]
	return;
}
24002314:	b009      	add	sp, #36	; 0x24
24002316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400231a:	4b21      	ldr	r3, [pc, #132]	; (240023a0 <getPresetNamesFromSDCard+0xa8>)
		loadFailed = 0;
2400231c:	2400      	movs	r4, #0
		diskBusy = 1;
2400231e:	2501      	movs	r5, #1
24002320:	f8df a094 	ldr.w	sl, [pc, #148]	; 240023b8 <getPresetNamesFromSDCard+0xc0>
24002324:	f013 0207 	ands.w	r2, r3, #7
		disk_initialize(0);
24002328:	4620      	mov	r0, r4
			audioOutBuffer[i] = 0;
2400232a:	bf18      	it	ne
2400232c:	2200      	movne	r2, #0
			audioOutBuffer[i + 1] = 0;
2400232e:	e9c3 2200 	strd	r2, r2, [r3]
24002332:	e9c3 2202 	strd	r2, r2, [r3, #8]
24002336:	e9c3 2204 	strd	r2, r2, [r3, #16]
2400233a:	e9c3 2206 	strd	r2, r2, [r3, #24]
2400233e:	e9c3 2208 	strd	r2, r2, [r3, #32]
24002342:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
24002346:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
2400234a:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
2400234e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
24002352:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
24002356:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
2400235a:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
2400235e:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
24002362:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
24002366:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
2400236a:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
		loadFailed = 0;
2400236e:	4b0d      	ldr	r3, [pc, #52]	; (240023a4 <getPresetNamesFromSDCard+0xac>)
		diskBusy = 1;
24002370:	f88a 5000 	strb.w	r5, [sl]
		loadFailed = 0;
24002374:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
24002376:	f00a fc77 	bl	2400cc68 <disk_initialize>
	    disk_status(0);
2400237a:	4620      	mov	r0, r4
2400237c:	f00a fc6a 	bl	2400cc54 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24002380:	462a      	mov	r2, r5
24002382:	4909      	ldr	r1, [pc, #36]	; (240023a8 <getPresetNamesFromSDCard+0xb0>)
24002384:	4809      	ldr	r0, [pc, #36]	; (240023ac <getPresetNamesFromSDCard+0xb4>)
24002386:	f00c fe67 	bl	2400f058 <f_mount>
2400238a:	2800      	cmp	r0, #0
2400238c:	d1bf      	bne.n	2400230e <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400238e:	4605      	mov	r5, r0
24002390:	4e07      	ldr	r6, [pc, #28]	; (240023b0 <getPresetNamesFromSDCard+0xb8>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002392:	f8df 9014 	ldr.w	r9, [pc, #20]	; 240023a8 <getPresetNamesFromSDCard+0xb0>
24002396:	f8df 8024 	ldr.w	r8, [pc, #36]	; 240023bc <getPresetNamesFromSDCard+0xc4>
2400239a:	4f06      	ldr	r7, [pc, #24]	; (240023b4 <getPresetNamesFromSDCard+0xbc>)
2400239c:	e028      	b.n	240023f0 <getPresetNamesFromSDCard+0xf8>
2400239e:	bf00      	nop
240023a0:	30000040 	.word	0x30000040
240023a4:	20018d1c 	.word	0x20018d1c
240023a8:	2001d8f0 	.word	0x2001d8f0
240023ac:	2001d490 	.word	0x2001d490
240023b0:	24017e50 	.word	0x24017e50
240023b4:	20014b28 	.word	0x20014b28
240023b8:	20014b60 	.word	0x20014b60
240023bc:	20016bcc 	.word	0x20016bcc
					strcat(charBuf, "*.ebp");
240023c0:	aa02      	add	r2, sp, #8
240023c2:	6830      	ldr	r0, [r6, #0]
240023c4:	88b1      	ldrh	r1, [r6, #4]
240023c6:	f10d 0c08 	add.w	ip, sp, #8
240023ca:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
240023cc:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
240023ce:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
240023d2:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
240023d4:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
240023d6:	4661      	mov	r1, ip
240023d8:	f013 f874 	bl	240154c4 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240023dc:	ab05      	add	r3, sp, #20
240023de:	464a      	mov	r2, r9
240023e0:	4641      	mov	r1, r8
240023e2:	4638      	mov	r0, r7
240023e4:	f00d fb7a 	bl	2400fadc <f_findfirst>
				if(res == FR_OK)
240023e8:	b358      	cbz	r0, 24002442 <getPresetNamesFromSDCard+0x14a>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240023ea:	3501      	adds	r5, #1
240023ec:	2d40      	cmp	r5, #64	; 0x40
240023ee:	d08e      	beq.n	2400230e <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
240023f0:	220a      	movs	r2, #10
240023f2:	a902      	add	r1, sp, #8
240023f4:	4628      	mov	r0, r5
240023f6:	f013 f863 	bl	240154c0 <itoa>
				int len = ((strlen(charBuf)));
240023fa:	a802      	add	r0, sp, #8
240023fc:	f7fd ff6c 	bl	240002d8 <strlen>
				if (len == 1)
24002400:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24002402:	4603      	mov	r3, r0
				if (len == 1)
24002404:	d1dc      	bne.n	240023c0 <getPresetNamesFromSDCard+0xc8>
					finalString[2] = charBuf[1];
24002406:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
2400240a:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
2400240c:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
24002410:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24002412:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
24002416:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
24002418:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
2400241c:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
24002420:	f7fd ff5a 	bl	240002d8 <strlen>
24002424:	a905      	add	r1, sp, #20
24002426:	4603      	mov	r3, r0
24002428:	88b2      	ldrh	r2, [r6, #4]
2400242a:	4419      	add	r1, r3
2400242c:	6830      	ldr	r0, [r6, #0]
2400242e:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002430:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
24002432:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002434:	4638      	mov	r0, r7
24002436:	464a      	mov	r2, r9
24002438:	4641      	mov	r1, r8
2400243a:	f00d fb4f 	bl	2400fadc <f_findfirst>
				if(res == FR_OK)
2400243e:	2800      	cmp	r0, #0
24002440:	d1d3      	bne.n	240023ea <getPresetNamesFromSDCard+0xf2>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24002442:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 24002818 <getPresetNamesFromSDCard+0x520>
24002446:	2211      	movs	r2, #17
24002448:	49ef      	ldr	r1, [pc, #956]	; (24002808 <getPresetNamesFromSDCard+0x510>)
2400244a:	4658      	mov	r0, fp
2400244c:	f00c fe56 	bl	2400f0fc <f_open>
24002450:	2800      	cmp	r0, #0
24002452:	d1ca      	bne.n	240023ea <getPresetNamesFromSDCard+0xf2>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24002454:	4ced      	ldr	r4, [pc, #948]	; (2400280c <getPresetNamesFromSDCard+0x514>)
24002456:	ab01      	add	r3, sp, #4
24002458:	f8db 200c 	ldr.w	r2, [fp, #12]
2400245c:	4658      	mov	r0, fp
2400245e:	4621      	mov	r1, r4
24002460:	f00c ffca 	bl	2400f3f8 <f_read>
						f_close(&SDFile);
24002464:	4658      	mov	r0, fp
24002466:	f00d fa2f 	bl	2400f8c8 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
2400246a:	7823      	ldrb	r3, [r4, #0]
2400246c:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
24002470:	4ae7      	ldr	r2, [pc, #924]	; (24002810 <getPresetNamesFromSDCard+0x518>)
24002472:	f894 c001 	ldrb.w	ip, [r4, #1]
24002476:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
2400247a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400247e:	48e5      	ldr	r0, [pc, #916]	; (24002814 <getPresetNamesFromSDCard+0x51c>)
							presetNamesArray[i][j] = buffer[bufferIndex];
24002480:	f882 c001 	strb.w	ip, [r2, #1]
24002484:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24002488:	eb00 1301 	add.w	r3, r0, r1, lsl #4
2400248c:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
2400248e:	f882 c002 	strb.w	ip, [r2, #2]
24002492:	f894 c003 	ldrb.w	ip, [r4, #3]
24002496:	f882 c003 	strb.w	ip, [r2, #3]
2400249a:	f894 c004 	ldrb.w	ip, [r4, #4]
2400249e:	f882 c004 	strb.w	ip, [r2, #4]
240024a2:	f894 c005 	ldrb.w	ip, [r4, #5]
240024a6:	f882 c005 	strb.w	ip, [r2, #5]
240024aa:	f894 c006 	ldrb.w	ip, [r4, #6]
240024ae:	f882 c006 	strb.w	ip, [r2, #6]
240024b2:	f894 c007 	ldrb.w	ip, [r4, #7]
240024b6:	f882 c007 	strb.w	ip, [r2, #7]
240024ba:	f894 c008 	ldrb.w	ip, [r4, #8]
240024be:	f882 c008 	strb.w	ip, [r2, #8]
240024c2:	f894 c009 	ldrb.w	ip, [r4, #9]
240024c6:	f882 c009 	strb.w	ip, [r2, #9]
240024ca:	f894 c00a 	ldrb.w	ip, [r4, #10]
240024ce:	f882 c00a 	strb.w	ip, [r2, #10]
240024d2:	f894 c00b 	ldrb.w	ip, [r4, #11]
240024d6:	f882 c00b 	strb.w	ip, [r2, #11]
240024da:	f894 c00c 	ldrb.w	ip, [r4, #12]
240024de:	f882 c00c 	strb.w	ip, [r2, #12]
240024e2:	f894 c00d 	ldrb.w	ip, [r4, #13]
240024e6:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240024ea:	7ba2      	ldrb	r2, [r4, #14]
240024ec:	5442      	strb	r2, [r0, r1]
240024ee:	7be2      	ldrb	r2, [r4, #15]
240024f0:	705a      	strb	r2, [r3, #1]
240024f2:	7c22      	ldrb	r2, [r4, #16]
240024f4:	709a      	strb	r2, [r3, #2]
240024f6:	7c62      	ldrb	r2, [r4, #17]
240024f8:	70da      	strb	r2, [r3, #3]
240024fa:	7ca2      	ldrb	r2, [r4, #18]
240024fc:	711a      	strb	r2, [r3, #4]
240024fe:	7ce2      	ldrb	r2, [r4, #19]
24002500:	715a      	strb	r2, [r3, #5]
24002502:	7d22      	ldrb	r2, [r4, #20]
24002504:	719a      	strb	r2, [r3, #6]
24002506:	7d62      	ldrb	r2, [r4, #21]
24002508:	71da      	strb	r2, [r3, #7]
2400250a:	7da2      	ldrb	r2, [r4, #22]
2400250c:	721a      	strb	r2, [r3, #8]
2400250e:	7de2      	ldrb	r2, [r4, #23]
24002510:	725a      	strb	r2, [r3, #9]
24002512:	7e22      	ldrb	r2, [r4, #24]
24002514:	729a      	strb	r2, [r3, #10]
24002516:	7e62      	ldrb	r2, [r4, #25]
24002518:	72da      	strb	r2, [r3, #11]
2400251a:	7ea2      	ldrb	r2, [r4, #26]
2400251c:	731a      	strb	r2, [r3, #12]
2400251e:	7ee2      	ldrb	r2, [r4, #27]
24002520:	735a      	strb	r2, [r3, #13]
24002522:	7f22      	ldrb	r2, [r4, #28]
24002524:	739a      	strb	r2, [r3, #14]
24002526:	7f62      	ldrb	r2, [r4, #29]
24002528:	73da      	strb	r2, [r3, #15]
2400252a:	7fa2      	ldrb	r2, [r4, #30]
2400252c:	741a      	strb	r2, [r3, #16]
2400252e:	7fe2      	ldrb	r2, [r4, #31]
24002530:	745a      	strb	r2, [r3, #17]
24002532:	f894 2020 	ldrb.w	r2, [r4, #32]
24002536:	749a      	strb	r2, [r3, #18]
24002538:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
2400253c:	74da      	strb	r2, [r3, #19]
2400253e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
24002542:	751a      	strb	r2, [r3, #20]
24002544:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
24002548:	755a      	strb	r2, [r3, #21]
2400254a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400254e:	759a      	strb	r2, [r3, #22]
24002550:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
24002554:	75da      	strb	r2, [r3, #23]
24002556:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400255a:	761a      	strb	r2, [r3, #24]
2400255c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
24002560:	765a      	strb	r2, [r3, #25]
24002562:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
24002566:	769a      	strb	r2, [r3, #26]
24002568:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400256c:	76da      	strb	r2, [r3, #27]
2400256e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
24002572:	771a      	strb	r2, [r3, #28]
24002574:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
24002578:	775a      	strb	r2, [r3, #29]
2400257a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400257e:	779a      	strb	r2, [r3, #30]
24002580:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
24002584:	77da      	strb	r2, [r3, #31]
24002586:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400258a:	f883 2020 	strb.w	r2, [r3, #32]
2400258e:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
24002592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
24002596:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
2400259a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
2400259e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
240025a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
240025a6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
240025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
240025ae:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
240025b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
240025b6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
240025ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
240025be:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
240025c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
240025c6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
240025ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
240025ce:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
240025d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
240025d6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
240025da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
240025de:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
240025e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
240025e6:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
240025ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
240025ee:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
240025f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
240025f6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
240025fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
240025fe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
24002602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
24002606:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
2400260a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
2400260e:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
24002612:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
24002616:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
2400261a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
2400261e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24002622:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
24002626:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
2400262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2400262e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24002636:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
2400263a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
2400263e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
24002642:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
24002646:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
2400264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
2400264e:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
24002652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
24002656:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
2400265a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
2400265e:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
24002662:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
24002666:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
2400266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
2400266e:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
24002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24002676:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
2400267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
2400267e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
24002682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
24002686:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
2400268a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400268e:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
24002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24002696:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
2400269a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
2400269e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
240026a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
240026a6:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
240026aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
240026ae:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
240026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
240026b6:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
240026ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
240026be:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
240026c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
240026c6:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
240026ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
240026ce:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
240026d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
240026d6:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
240026da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
240026de:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
240026e2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
240026e6:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
240026ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
240026ee:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
240026f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
240026f6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
240026fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
240026fe:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
24002702:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
24002706:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
2400270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
2400270e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
24002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
24002716:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
2400271a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
2400271e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
24002722:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
24002726:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
2400272a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2400272e:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
24002732:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
24002736:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
2400273a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
2400273e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
24002742:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
24002746:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
2400274a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
2400274e:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
24002752:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
24002756:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
2400275a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
2400275e:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
24002762:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
24002766:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
2400276a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
2400276e:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
24002772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
24002776:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
2400277a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
2400277e:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
24002782:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
24002786:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
2400278a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
2400278e:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
24002792:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
24002796:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
2400279a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
2400279e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
240027a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
240027a6:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
240027aa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
240027ae:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
240027b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
240027b6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
240027ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
240027be:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
240027c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
240027c6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
240027ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
240027ce:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
240027d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
240027d6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
240027da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
240027de:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
240027e2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
240027e6:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
240027ea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
240027ee:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
240027f2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
240027f6:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
240027fa:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
240027fe:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
24002802:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
24002806:	e5f0      	b.n	240023ea <getPresetNamesFromSDCard+0xf2>
24002808:	20016be2 	.word	0x20016be2
2400280c:	300001c0 	.word	0x300001c0
24002810:	30032000 	.word	0x30032000
24002814:	30032380 	.word	0x30032380
24002818:	2001d6c4 	.word	0x2001d6c4

2400281c <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
2400281c:	b5d0      	push	{r4, r6, r7, lr}
	    	FMC_SDRAM_CommandTypeDef Command;

	        __IO uint32_t tmpmrd = 0;
2400281e:	2300      	movs	r3, #0
{
24002820:	b086      	sub	sp, #24
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002822:	4c22      	ldr	r4, [pc, #136]	; (240028ac <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002824:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
24002826:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002828:	2310      	movs	r3, #16
2400282a:	2601      	movs	r6, #1
2400282c:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400282e:	a902      	add	r1, sp, #8
24002830:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002832:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
2400283a:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400283e:	f008 f925 	bl	2400aa8c <HAL_SDRAM_SendCommand>

	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);
24002842:	2001      	movs	r0, #1
24002844:	f001 ff72 	bl	2400472c <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002848:	a902      	add	r1, sp, #8
2400284a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400284e:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002850:	e9cd 6704 	strd	r6, r7, [sp, #16]
24002854:	2602      	movs	r6, #2
24002856:	2710      	movs	r7, #16
24002858:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400285c:	f008 f916 	bl	2400aa8c <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002860:	2003      	movs	r0, #3
24002862:	2110      	movs	r1, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002868:	e9cd 0102 	strd	r0, r1, [sp, #8]
2400286c:	2002      	movs	r0, #2
2400286e:	2100      	movs	r1, #0
24002870:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002874:	a902      	add	r1, sp, #8
24002876:	4620      	mov	r0, r4
24002878:	f008 f908 	bl	2400aa8c <HAL_SDRAM_SendCommand>

	        /* Step 7: Program the external memory mode register */
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
2400287c:	f240 2022 	movw	r0, #546	; 0x222
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002880:	2204      	movs	r2, #4
24002882:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002884:	9001      	str	r0, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
24002886:	2001      	movs	r0, #1
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002888:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
2400288a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
2400288e:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24002894:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002898:	4620      	mov	r0, r4
2400289a:	f008 f8f7 	bl	2400aa8c <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
2400289e:	f240 21fa 	movw	r1, #762	; 0x2fa
240028a2:	4620      	mov	r0, r4
240028a4:	f008 f912 	bl	2400aacc <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
240028a8:	b006      	add	sp, #24
240028aa:	bdd0      	pop	{r4, r6, r7, pc}
240028ac:	20014948 	.word	0x20014948

240028b0 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
240028b0:	4ba4      	ldr	r3, [pc, #656]	; (24002b44 <setEffectsFunctions+0x294>)
240028b2:	2201      	movs	r2, #1
{
240028b4:	b410      	push	{r4}
	effectsActive[i] = 1;
240028b6:	545a      	strb	r2, [r3, r1]
	switch (effectType)
240028b8:	2813      	cmp	r0, #19
240028ba:	d829      	bhi.n	24002910 <setEffectsFunctions+0x60>
240028bc:	e8df f010 	tbh	[pc, r0, lsl #1]
240028c0:	01d301e2 	.word	0x01d301e2
240028c4:	013c01c4 	.word	0x013c01c4
240028c8:	01260136 	.word	0x01260136
240028cc:	00140111 	.word	0x00140111
240028d0:	00f10101 	.word	0x00f10101
240028d4:	00c700da 	.word	0x00c700da
240028d8:	00a100b4 	.word	0x00a100b4
240028dc:	007a008e 	.word	0x007a008e
240028e0:	00520066 	.word	0x00520066
240028e4:	002b003e 	.word	0x002b003e
			  effectSetters[i].setParam3 = &compressorParam3;
			  effectSetters[i].setParam4 = &compressorParam4;
			  effectSetters[i].setParam5 = &compressorParam5;
			  break;
		  case Chorus:
			  effectTick[i] = &chorusTick;
240028e8:	4b97      	ldr	r3, [pc, #604]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028ea:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
240028ee:	4c97      	ldr	r4, [pc, #604]	; (24002b4c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028f0:	4a97      	ldr	r2, [pc, #604]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &chorusTick;
240028f2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
240028f6:	4997      	ldr	r1, [pc, #604]	; (24002b54 <setEffectsFunctions+0x2a4>)
240028f8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
240028fc:	4c96      	ldr	r4, [pc, #600]	; (24002b58 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &chorusParam1;
240028fe:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
24002902:	4896      	ldr	r0, [pc, #600]	; (24002b5c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam4 = &chorusParam4;
24002904:	4996      	ldr	r1, [pc, #600]	; (24002b60 <setEffectsFunctions+0x2b0>)
			  effectSetters[i].setParam5 = &blankFunction;
24002906:	4a97      	ldr	r2, [pc, #604]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &param3Hard;
24002908:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
2400290c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
24002910:	f85d 4b04 	ldr.w	r4, [sp], #4
24002914:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
24002916:	4b8c      	ldr	r3, [pc, #560]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002918:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
2400291c:	4a92      	ldr	r2, [pc, #584]	; (24002b68 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400291e:	488c      	ldr	r0, [pc, #560]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXLadderLowpassTick;
24002920:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002924:	4991      	ldr	r1, [pc, #580]	; (24002b6c <setEffectsFunctions+0x2bc>)
24002926:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
2400292a:	4a8e      	ldr	r2, [pc, #568]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
2400292c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002930:	498f      	ldr	r1, [pc, #572]	; (24002b70 <setEffectsFunctions+0x2c0>)
			  effectSetters[i].setParam2 = &blankFunction;;
24002932:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002934:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002936:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
2400293a:	e7e9      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZbandrejectTick;
2400293c:	4b82      	ldr	r3, [pc, #520]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400293e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24002942:	4a8c      	ldr	r2, [pc, #560]	; (24002b74 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002944:	4882      	ldr	r0, [pc, #520]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZbandrejectTick;
24002946:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
2400294a:	498b      	ldr	r1, [pc, #556]	; (24002b78 <setEffectsFunctions+0x2c8>)
2400294c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002950:	4a84      	ldr	r2, [pc, #528]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002952:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002956:	4889      	ldr	r0, [pc, #548]	; (24002b7c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002958:	4989      	ldr	r1, [pc, #548]	; (24002b80 <setEffectsFunctions+0x2d0>)
			  effectSetters[i].setParam4 = &blankFunction;;
2400295a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
2400295c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
2400295e:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002962:	e7d5      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZhighshelfTick;
24002964:	4b78      	ldr	r3, [pc, #480]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002966:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
2400296a:	4a86      	ldr	r2, [pc, #536]	; (24002b84 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400296c:	4878      	ldr	r0, [pc, #480]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZhighshelfTick;
2400296e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002972:	4985      	ldr	r1, [pc, #532]	; (24002b88 <setEffectsFunctions+0x2d8>)
24002974:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002978:	4a7a      	ldr	r2, [pc, #488]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
2400297a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
2400297e:	4883      	ldr	r0, [pc, #524]	; (24002b8c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002980:	4983      	ldr	r1, [pc, #524]	; (24002b90 <setEffectsFunctions+0x2e0>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002982:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002984:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002986:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
2400298a:	e7c1      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZlowshelfTick;
2400298c:	4b6e      	ldr	r3, [pc, #440]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400298e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24002992:	4a80      	ldr	r2, [pc, #512]	; (24002b94 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002994:	486e      	ldr	r0, [pc, #440]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZlowshelfTick;
24002996:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
2400299a:	497f      	ldr	r1, [pc, #508]	; (24002b98 <setEffectsFunctions+0x2e8>)
2400299c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240029a0:	4a70      	ldr	r2, [pc, #448]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
240029a2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
240029a6:	487d      	ldr	r0, [pc, #500]	; (24002b9c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
240029a8:	497d      	ldr	r1, [pc, #500]	; (24002ba0 <setEffectsFunctions+0x2f0>)
			  effectSetters[i].setParam4 = &blankFunction;
240029aa:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240029ac:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
240029ae:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240029b2:	e7ad      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZpeakTick;
240029b4:	4b64      	ldr	r3, [pc, #400]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029b6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
240029ba:	4a7a      	ldr	r2, [pc, #488]	; (24002ba4 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029bc:	4864      	ldr	r0, [pc, #400]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZpeakTick;
240029be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029c2:	4979      	ldr	r1, [pc, #484]	; (24002ba8 <setEffectsFunctions+0x2f8>)
240029c4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240029c8:	4a66      	ldr	r2, [pc, #408]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
240029ca:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
240029ce:	4877      	ldr	r0, [pc, #476]	; (24002bac <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029d0:	4977      	ldr	r1, [pc, #476]	; (24002bb0 <setEffectsFunctions+0x300>)
			  effectSetters[i].setParam4 = &blankFunction;
240029d2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240029d4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
240029d6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
240029da:	e799      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXdiodeLowpassTick;
240029dc:	4b5a      	ldr	r3, [pc, #360]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029de:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
240029e2:	4a74      	ldr	r2, [pc, #464]	; (24002bb4 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029e4:	485a      	ldr	r0, [pc, #360]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXdiodeLowpassTick;
240029e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029ea:	4973      	ldr	r1, [pc, #460]	; (24002bb8 <setEffectsFunctions+0x308>)
240029ec:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
240029f0:	4a5c      	ldr	r2, [pc, #368]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
240029f2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029f6:	4971      	ldr	r1, [pc, #452]	; (24002bbc <setEffectsFunctions+0x30c>)
			  effectSetters[i].setParam2 = &blankFunction;
240029f8:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
240029fa:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
240029fc:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a00:	e786      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXbandpassTick;
24002a02:	4b51      	ldr	r3, [pc, #324]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a04:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
24002a08:	4a6d      	ldr	r2, [pc, #436]	; (24002bc0 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a0a:	4851      	ldr	r0, [pc, #324]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXbandpassTick;
24002a0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a10:	496c      	ldr	r1, [pc, #432]	; (24002bc4 <setEffectsFunctions+0x314>)
24002a12:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a16:	4a53      	ldr	r2, [pc, #332]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002a18:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002a1c:	496a      	ldr	r1, [pc, #424]	; (24002bc8 <setEffectsFunctions+0x318>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a1e:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002a20:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a22:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a26:	e773      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXhighpassTick;
24002a28:	4b47      	ldr	r3, [pc, #284]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a2a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24002a2e:	4a67      	ldr	r2, [pc, #412]	; (24002bcc <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a30:	4847      	ldr	r0, [pc, #284]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXhighpassTick;
24002a32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a36:	4966      	ldr	r1, [pc, #408]	; (24002bd0 <setEffectsFunctions+0x320>)
24002a38:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a3c:	4a49      	ldr	r2, [pc, #292]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002a3e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a42:	4964      	ldr	r1, [pc, #400]	; (24002bd4 <setEffectsFunctions+0x324>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a44:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002a46:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002a48:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a4c:	e760      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXlowpassTick;
24002a4e:	4b3e      	ldr	r3, [pc, #248]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a50:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24002a54:	4a60      	ldr	r2, [pc, #384]	; (24002bd8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a56:	483e      	ldr	r0, [pc, #248]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXlowpassTick;
24002a58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a5c:	495f      	ldr	r1, [pc, #380]	; (24002bdc <setEffectsFunctions+0x32c>)
24002a5e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002a62:	4a40      	ldr	r2, [pc, #256]	; (24002b64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002a64:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a68:	495d      	ldr	r1, [pc, #372]	; (24002be0 <setEffectsFunctions+0x330>)
			  effectSetters[i].setParam2 = &blankFunction;
24002a6a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002a6c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a6e:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002a72:	e74d      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectTick[i] = &wavefolderTick;
24002a74:	4b34      	ldr	r3, [pc, #208]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a76:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
24002a7a:	4c5a      	ldr	r4, [pc, #360]	; (24002be4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a7c:	4a34      	ldr	r2, [pc, #208]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &wavefolderTick;
24002a7e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a82:	4959      	ldr	r1, [pc, #356]	; (24002be8 <setEffectsFunctions+0x338>)
24002a84:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002a88:	4c58      	ldr	r4, [pc, #352]	; (24002bec <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002a8a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
24002a8e:	4858      	ldr	r0, [pc, #352]	; (24002bf0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam4 = &param4Linear;
24002a90:	4958      	ldr	r1, [pc, #352]	; (24002bf4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam5 = &param5Linear;
24002a92:	4a59      	ldr	r2, [pc, #356]	; (24002bf8 <setEffectsFunctions+0x348>)
			  effectSetters[i].setParam3 = &tiltParam3;
24002a94:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24002a98:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24002a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002aa0:	4770      	bx	lr
			  effectTick[i] = &tiltFilterTick;
24002aa2:	4b29      	ldr	r3, [pc, #164]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002aa4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
24002aa8:	4c54      	ldr	r4, [pc, #336]	; (24002bfc <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002aaa:	4a29      	ldr	r2, [pc, #164]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &tiltFilterTick;
24002aac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
24002ab0:	4953      	ldr	r1, [pc, #332]	; (24002c00 <setEffectsFunctions+0x350>)
24002ab2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
24002ab6:	4c53      	ldr	r4, [pc, #332]	; (24002c04 <setEffectsFunctions+0x354>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002ab8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
24002abc:	4852      	ldr	r0, [pc, #328]	; (24002c08 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam4 = &tiltParam4;
24002abe:	4953      	ldr	r1, [pc, #332]	; (24002c0c <setEffectsFunctions+0x35c>)
24002ac0:	e7e7      	b.n	24002a92 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &bcTick;
24002ac2:	4b21      	ldr	r3, [pc, #132]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ac4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
24002ac8:	4c51      	ldr	r4, [pc, #324]	; (24002c10 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002aca:	4a21      	ldr	r2, [pc, #132]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &bcTick;
24002acc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ad0:	4950      	ldr	r1, [pc, #320]	; (24002c14 <setEffectsFunctions+0x364>)
24002ad2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
24002ad6:	4c50      	ldr	r4, [pc, #320]	; (24002c18 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002ad8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
24002adc:	484f      	ldr	r0, [pc, #316]	; (24002c1c <setEffectsFunctions+0x36c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002ade:	4945      	ldr	r1, [pc, #276]	; (24002bf4 <setEffectsFunctions+0x344>)
24002ae0:	e7d7      	b.n	24002a92 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &compressorTick;
24002ae2:	4b19      	ldr	r3, [pc, #100]	; (24002b48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002ae4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
24002ae8:	4c4d      	ldr	r4, [pc, #308]	; (24002c20 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002aea:	4a19      	ldr	r2, [pc, #100]	; (24002b50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &compressorTick;
24002aec:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
24002af0:	494c      	ldr	r1, [pc, #304]	; (24002c24 <setEffectsFunctions+0x374>)
24002af2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
24002af6:	4c4c      	ldr	r4, [pc, #304]	; (24002c28 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002af8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
24002afc:	484b      	ldr	r0, [pc, #300]	; (24002c2c <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam4 = &compressorParam4;
24002afe:	494c      	ldr	r1, [pc, #304]	; (24002c30 <setEffectsFunctions+0x380>)
			  effectSetters[i].setParam5 = &compressorParam5;
24002b00:	4a4c      	ldr	r2, [pc, #304]	; (24002c34 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam3 = &compressorParam3;
24002b02:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24002b06:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002b0a:	e701      	b.n	24002910 <setEffectsFunctions+0x60>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b0c:	4a10      	ldr	r2, [pc, #64]	; (24002b50 <setEffectsFunctions+0x2a0>)
24002b0e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
24002b12:	4b0d      	ldr	r3, [pc, #52]	; (24002b48 <setEffectsFunctions+0x298>)
24002b14:	4c48      	ldr	r4, [pc, #288]	; (24002c38 <setEffectsFunctions+0x388>)
			  effectTick[i] = &tanhTick;
24002b16:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b1a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
24002b1e:	493d      	ldr	r1, [pc, #244]	; (24002c14 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam2 = &offsetParam2;
24002b20:	4c32      	ldr	r4, [pc, #200]	; (24002bec <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b22:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Linear;
24002b26:	4845      	ldr	r0, [pc, #276]	; (24002c3c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002b28:	4932      	ldr	r1, [pc, #200]	; (24002bf4 <setEffectsFunctions+0x344>)
24002b2a:	e6ec      	b.n	24002906 <setEffectsFunctions+0x56>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b2c:	4a08      	ldr	r2, [pc, #32]	; (24002b50 <setEffectsFunctions+0x2a0>)
24002b2e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24002b32:	4b05      	ldr	r3, [pc, #20]	; (24002b48 <setEffectsFunctions+0x298>)
24002b34:	4c42      	ldr	r4, [pc, #264]	; (24002c40 <setEffectsFunctions+0x390>)
24002b36:	e7ee      	b.n	24002b16 <setEffectsFunctions+0x266>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002b38:	4a05      	ldr	r2, [pc, #20]	; (24002b50 <setEffectsFunctions+0x2a0>)
24002b3a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &satTick;
24002b3e:	4b02      	ldr	r3, [pc, #8]	; (24002b48 <setEffectsFunctions+0x298>)
24002b40:	4c40      	ldr	r4, [pc, #256]	; (24002c44 <setEffectsFunctions+0x394>)
24002b42:	e7e8      	b.n	24002b16 <setEffectsFunctions+0x266>
24002b44:	20014bb4 	.word	0x20014bb4
24002b48:	20005060 	.word	0x20005060
24002b4c:	00002821 	.word	0x00002821
24002b50:	20014b64 	.word	0x20014b64
24002b54:	00002741 	.word	0x00002741
24002b58:	00002781 	.word	0x00002781
24002b5c:	000027a1 	.word	0x000027a1
24002b60:	000027e1 	.word	0x000027e1
24002b64:	00004e01 	.word	0x00004e01
24002b68:	00002d41 	.word	0x00002d41
24002b6c:	00003061 	.word	0x00003061
24002b70:	000032c1 	.word	0x000032c1
24002b74:	00002d21 	.word	0x00002d21
24002b78:	00003001 	.word	0x00003001
24002b7c:	00003181 	.word	0x00003181
24002b80:	000032a1 	.word	0x000032a1
24002b84:	00002d01 	.word	0x00002d01
24002b88:	00002fa1 	.word	0x00002fa1
24002b8c:	00003141 	.word	0x00003141
24002b90:	00003281 	.word	0x00003281
24002b94:	00002ce1 	.word	0x00002ce1
24002b98:	00002f41 	.word	0x00002f41
24002b9c:	00003101 	.word	0x00003101
24002ba0:	00003261 	.word	0x00003261
24002ba4:	00002cc1 	.word	0x00002cc1
24002ba8:	00002ee1 	.word	0x00002ee1
24002bac:	000030c1 	.word	0x000030c1
24002bb0:	00003241 	.word	0x00003241
24002bb4:	00002ca1 	.word	0x00002ca1
24002bb8:	00002e81 	.word	0x00002e81
24002bbc:	00003221 	.word	0x00003221
24002bc0:	00002c81 	.word	0x00002c81
24002bc4:	00002e21 	.word	0x00002e21
24002bc8:	00003201 	.word	0x00003201
24002bcc:	00002c61 	.word	0x00002c61
24002bd0:	00002dc1 	.word	0x00002dc1
24002bd4:	000031e1 	.word	0x000031e1
24002bd8:	00002c41 	.word	0x00002c41
24002bdc:	00002d61 	.word	0x00002d61
24002be0:	000031c1 	.word	0x000031c1
24002be4:	00002621 	.word	0x00002621
24002be8:	000020e1 	.word	0x000020e1
24002bec:	000023a1 	.word	0x000023a1
24002bf0:	00002121 	.word	0x00002121
24002bf4:	000024e1 	.word	0x000024e1
24002bf8:	00002501 	.word	0x00002501
24002bfc:	00002981 	.word	0x00002981
24002c00:	00002161 	.word	0x00002161
24002c04:	000021c1 	.word	0x000021c1
24002c08:	00002221 	.word	0x00002221
24002c0c:	00002261 	.word	0x00002261
24002c10:	00002be1 	.word	0x00002be1
24002c14:	000020a1 	.word	0x000020a1
24002c18:	000023c1 	.word	0x000023c1
24002c1c:	00002541 	.word	0x00002541
24002c20:	00002c21 	.word	0x00002c21
24002c24:	000022a1 	.word	0x000022a1
24002c28:	000022c1 	.word	0x000022c1
24002c2c:	00002301 	.word	0x00002301
24002c30:	00002321 	.word	0x00002321
24002c34:	00002361 	.word	0x00002361
24002c38:	00002901 	.word	0x00002901
24002c3c:	000023e1 	.word	0x000023e1
24002c40:	000029c1 	.word	0x000029c1
24002c44:	00002b61 	.word	0x00002b61
			  effectTick[i] = &hardClipTick;
24002c48:	4b18      	ldr	r3, [pc, #96]	; (24002cac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c4a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
24002c4e:	4c18      	ldr	r4, [pc, #96]	; (24002cb0 <setEffectsFunctions+0x400>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c50:	4a18      	ldr	r2, [pc, #96]	; (24002cb4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &hardClipTick;
24002c52:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c56:	4918      	ldr	r1, [pc, #96]	; (24002cb8 <setEffectsFunctions+0x408>)
24002c58:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002c5c:	4c17      	ldr	r4, [pc, #92]	; (24002cbc <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c5e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Hard;
24002c62:	4817      	ldr	r0, [pc, #92]	; (24002cc0 <setEffectsFunctions+0x410>)
24002c64:	e760      	b.n	24002b28 <setEffectsFunctions+0x278>
			  effectTick[i] = &softClipTick;
24002c66:	4b11      	ldr	r3, [pc, #68]	; (24002cac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c68:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
24002c6c:	4c15      	ldr	r4, [pc, #84]	; (24002cc4 <setEffectsFunctions+0x414>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c6e:	4a11      	ldr	r2, [pc, #68]	; (24002cb4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &softClipTick;
24002c70:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c74:	4910      	ldr	r1, [pc, #64]	; (24002cb8 <setEffectsFunctions+0x408>)
24002c76:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002c7a:	4c10      	ldr	r4, [pc, #64]	; (24002cbc <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c7c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Soft;
24002c80:	4811      	ldr	r0, [pc, #68]	; (24002cc8 <setEffectsFunctions+0x418>)
24002c82:	e751      	b.n	24002b28 <setEffectsFunctions+0x278>
			  effectSetters[i].setParam1 = &blankFunction;
24002c84:	4811      	ldr	r0, [pc, #68]	; (24002ccc <setEffectsFunctions+0x41c>)
24002c86:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
24002c8a:	4a0a      	ldr	r2, [pc, #40]	; (24002cb4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &blankTick;
24002c8c:	4c07      	ldr	r4, [pc, #28]	; (24002cac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &blankFunction;
24002c8e:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
24002c92:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24002c96:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002c9a:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24002c9e:	2200      	movs	r2, #0
24002ca0:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
24002ca2:	4b0b      	ldr	r3, [pc, #44]	; (24002cd0 <setEffectsFunctions+0x420>)
24002ca4:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
24002ca8:	e632      	b.n	24002910 <setEffectsFunctions+0x60>
24002caa:	bf00      	nop
24002cac:	20005060 	.word	0x20005060
24002cb0:	00002ac1 	.word	0x00002ac1
24002cb4:	20014b64 	.word	0x20014b64
24002cb8:	000020a1 	.word	0x000020a1
24002cbc:	000023a1 	.word	0x000023a1
24002cc0:	00002461 	.word	0x00002461
24002cc4:	00002a21 	.word	0x00002a21
24002cc8:	00002401 	.word	0x00002401
24002ccc:	00004e01 	.word	0x00004e01
24002cd0:	00002961 	.word	0x00002961

24002cd4 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002cd4:	b410      	push	{r4}
	switch (filterType)
24002cd6:	2808      	cmp	r0, #8
24002cd8:	d812      	bhi.n	24002d00 <setFilterTypes+0x2c>
24002cda:	e8df f000 	tbb	[pc, r0]
24002cde:	2314      	.short	0x2314
24002ce0:	5f504132 	.word	0x5f504132
24002ce4:	7d6e      	.short	0x7d6e
24002ce6:	05          	.byte	0x05
24002ce7:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZbandrejectSetQ;
				  filterSetters[i].setGain = &VZbandrejectSetGain;
				  break;
			  case 8:
				  filterTick[i] = &LadderLowpassTick;
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002ce8:	4b43      	ldr	r3, [pc, #268]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
24002cea:	4a44      	ldr	r2, [pc, #272]	; (24002dfc <setFilterTypes+0x128>)
24002cec:	4844      	ldr	r0, [pc, #272]	; (24002e00 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002cee:	4c45      	ldr	r4, [pc, #276]	; (24002e04 <setFilterTypes+0x130>)
				  filterTick[i] = &LadderLowpassTick;
24002cf0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002cf4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002cf8:	4843      	ldr	r0, [pc, #268]	; (24002e08 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002cfa:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002cfe:	6050      	str	r0, [r2, #4]
				  break;
			  default:
				  break;
		}
}
24002d00:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d04:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
24002d06:	4b3c      	ldr	r3, [pc, #240]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
24002d08:	4a3c      	ldr	r2, [pc, #240]	; (24002dfc <setFilterTypes+0x128>)
24002d0a:	4840      	ldr	r0, [pc, #256]	; (24002e0c <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002d0c:	4c40      	ldr	r4, [pc, #256]	; (24002e10 <setFilterTypes+0x13c>)
				  filterTick[i] = &lowpassTick;
24002d0e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002d12:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d16:	483f      	ldr	r0, [pc, #252]	; (24002e14 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002d18:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
24002d1c:	6050      	str	r0, [r2, #4]
}
24002d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d22:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
24002d24:	4b34      	ldr	r3, [pc, #208]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
24002d26:	4a35      	ldr	r2, [pc, #212]	; (24002dfc <setFilterTypes+0x128>)
24002d28:	483b      	ldr	r0, [pc, #236]	; (24002e18 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &highpassSetQ;
24002d2a:	4c3c      	ldr	r4, [pc, #240]	; (24002e1c <setFilterTypes+0x148>)
				  filterTick[i] = &highpassTick;
24002d2c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
24002d30:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d34:	483a      	ldr	r0, [pc, #232]	; (24002e20 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &highpassSetQ;
24002d36:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002d3a:	6050      	str	r0, [r2, #4]
}
24002d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d40:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
24002d42:	4b2d      	ldr	r3, [pc, #180]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
24002d44:	4a2d      	ldr	r2, [pc, #180]	; (24002dfc <setFilterTypes+0x128>)
24002d46:	4837      	ldr	r0, [pc, #220]	; (24002e24 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002d48:	4c37      	ldr	r4, [pc, #220]	; (24002e28 <setFilterTypes+0x154>)
				  filterTick[i] = &bandpassTick;
24002d4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24002d4e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d52:	4836      	ldr	r0, [pc, #216]	; (24002e2c <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002d54:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002d58:	6050      	str	r0, [r2, #4]
}
24002d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d5e:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d60:	4b25      	ldr	r3, [pc, #148]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
24002d62:	4a26      	ldr	r2, [pc, #152]	; (24002dfc <setFilterTypes+0x128>)
24002d64:	4832      	ldr	r0, [pc, #200]	; (24002e30 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d66:	4c33      	ldr	r4, [pc, #204]	; (24002e34 <setFilterTypes+0x160>)
				  filterTick[i] = &diodeLowpassTick;
24002d68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002d6c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d70:	4831      	ldr	r0, [pc, #196]	; (24002e38 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002d72:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002d76:	6050      	str	r0, [r2, #4]
}
24002d78:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d7c:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d7e:	4b1e      	ldr	r3, [pc, #120]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
24002d80:	4a1e      	ldr	r2, [pc, #120]	; (24002dfc <setFilterTypes+0x128>)
24002d82:	482e      	ldr	r0, [pc, #184]	; (24002e3c <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d84:	4c2e      	ldr	r4, [pc, #184]	; (24002e40 <setFilterTypes+0x16c>)
				  filterTick[i] = &VZpeakTick;
24002d86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002d8a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002d8e:	482d      	ldr	r0, [pc, #180]	; (24002e44 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002d90:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002d94:	6050      	str	r0, [r2, #4]
}
24002d96:	f85d 4b04 	ldr.w	r4, [sp], #4
24002d9a:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002d9c:	4b16      	ldr	r3, [pc, #88]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24002d9e:	4a17      	ldr	r2, [pc, #92]	; (24002dfc <setFilterTypes+0x128>)
24002da0:	4829      	ldr	r0, [pc, #164]	; (24002e48 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002da2:	4c2a      	ldr	r4, [pc, #168]	; (24002e4c <setFilterTypes+0x178>)
				  filterTick[i] = &VZlowshelfTick;
24002da4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002da8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dac:	4828      	ldr	r0, [pc, #160]	; (24002e50 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002dae:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002db2:	6050      	str	r0, [r2, #4]
}
24002db4:	f85d 4b04 	ldr.w	r4, [sp], #4
24002db8:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002dba:	4b0f      	ldr	r3, [pc, #60]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
24002dbc:	4a0f      	ldr	r2, [pc, #60]	; (24002dfc <setFilterTypes+0x128>)
24002dbe:	4825      	ldr	r0, [pc, #148]	; (24002e54 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002dc0:	4c25      	ldr	r4, [pc, #148]	; (24002e58 <setFilterTypes+0x184>)
				  filterTick[i] = &VZhighshelfTick;
24002dc2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002dc6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002dca:	4824      	ldr	r0, [pc, #144]	; (24002e5c <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002dcc:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002dd0:	6050      	str	r0, [r2, #4]
}
24002dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002dd6:	4770      	bx	lr
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dd8:	4b07      	ldr	r3, [pc, #28]	; (24002df8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
24002dda:	4a08      	ldr	r2, [pc, #32]	; (24002dfc <setFilterTypes+0x128>)
24002ddc:	4820      	ldr	r0, [pc, #128]	; (24002e60 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dde:	4c21      	ldr	r4, [pc, #132]	; (24002e64 <setFilterTypes+0x190>)
				  filterTick[i] = &VZbandrejectTick;
24002de0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002de4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002de8:	481f      	ldr	r0, [pc, #124]	; (24002e68 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dea:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002dee:	6050      	str	r0, [r2, #4]
}
24002df0:	f85d 4b04 	ldr.w	r4, [sp], #4
24002df4:	4770      	bx	lr
24002df6:	bf00      	nop
24002df8:	20016bb8 	.word	0x20016bb8
24002dfc:	200050bc 	.word	0x200050bc
24002e00:	00000fa1 	.word	0x00000fa1
24002e04:	000011e1 	.word	0x000011e1
24002e08:	00001401 	.word	0x00001401
24002e0c:	00000d01 	.word	0x00000d01
24002e10:	000010e1 	.word	0x000010e1
24002e14:	00001201 	.word	0x00001201
24002e18:	00000d61 	.word	0x00000d61
24002e1c:	00001101 	.word	0x00001101
24002e20:	00001241 	.word	0x00001241
24002e24:	00000dc1 	.word	0x00000dc1
24002e28:	00001121 	.word	0x00001121
24002e2c:	00001281 	.word	0x00001281
24002e30:	00000e21 	.word	0x00000e21
24002e34:	00001141 	.word	0x00001141
24002e38:	000012c1 	.word	0x000012c1
24002e3c:	00000e81 	.word	0x00000e81
24002e40:	00001161 	.word	0x00001161
24002e44:	00001301 	.word	0x00001301
24002e48:	00000ec1 	.word	0x00000ec1
24002e4c:	00001181 	.word	0x00001181
24002e50:	00001341 	.word	0x00001341
24002e54:	00000f01 	.word	0x00000f01
24002e58:	000011a1 	.word	0x000011a1
24002e5c:	00001381 	.word	0x00001381
24002e60:	00000f41 	.word	0x00000f41
24002e64:	000011c1 	.word	0x000011c1
24002e68:	000013c1 	.word	0x000013c1

24002e6c <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24002e6c:	b410      	push	{r4}
	switch(LFOShape)
24002e6e:	2805      	cmp	r0, #5
24002e70:	d814      	bhi.n	24002e9c <setLFOShapes+0x30>
24002e72:	e8df f000 	tbb	[pc, r0]
24002e76:	2916      	.short	0x2916
24002e78:	03624f3c 	.word	0x03624f3c
			lfoSetters[i].setRate = &lfoSawSetRate;
			lfoSetters[i].setShape = &lfoSawSetShape;
			lfoSetters[i].setPhase = &lfoSawSetPhase;
			break;
		case PulseLFOShapeSet:
			lfoShapeTick[i] = &lfoPulseTick;
24002e7c:	4b38      	ldr	r3, [pc, #224]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e7e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24002e82:	4c38      	ldr	r4, [pc, #224]	; (24002f64 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e84:	4a38      	ldr	r2, [pc, #224]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24002e86:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e8a:	4c38      	ldr	r4, [pc, #224]	; (24002f6c <setLFOShapes+0x100>)
24002e8c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002e90:	4937      	ldr	r1, [pc, #220]	; (24002f70 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002e92:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002e96:	4a37      	ldr	r2, [pc, #220]	; (24002f74 <setLFOShapes+0x108>)
24002e98:	e9c3 1201 	strd	r1, r2, [r3, #4]
			break;
	}
}
24002e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ea0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
24002ea2:	4b2f      	ldr	r3, [pc, #188]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002ea4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002ea8:	4c33      	ldr	r4, [pc, #204]	; (24002f78 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002eaa:	4a2f      	ldr	r2, [pc, #188]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
24002eac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002eb0:	4c32      	ldr	r4, [pc, #200]	; (24002f7c <setLFOShapes+0x110>)
24002eb2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002eb6:	4932      	ldr	r1, [pc, #200]	; (24002f80 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002eb8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002ebc:	4a31      	ldr	r2, [pc, #196]	; (24002f84 <setLFOShapes+0x118>)
24002ebe:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ec6:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ec8:	4b25      	ldr	r3, [pc, #148]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002eca:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ece:	4c2e      	ldr	r4, [pc, #184]	; (24002f88 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ed0:	4a25      	ldr	r2, [pc, #148]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ed2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ed6:	4c2d      	ldr	r4, [pc, #180]	; (24002f8c <setLFOShapes+0x120>)
24002ed8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002edc:	492c      	ldr	r1, [pc, #176]	; (24002f90 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ede:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24002ee2:	4a2c      	ldr	r2, [pc, #176]	; (24002f94 <setLFOShapes+0x128>)
24002ee4:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
24002eec:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
24002eee:	4b1c      	ldr	r3, [pc, #112]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002ef0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
24002ef4:	4c28      	ldr	r4, [pc, #160]	; (24002f98 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002ef6:	4a1c      	ldr	r2, [pc, #112]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
24002ef8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24002efc:	4c27      	ldr	r4, [pc, #156]	; (24002f9c <setLFOShapes+0x130>)
24002efe:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
24002f02:	4927      	ldr	r1, [pc, #156]	; (24002fa0 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002f04:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002f08:	4a26      	ldr	r2, [pc, #152]	; (24002fa4 <setLFOShapes+0x138>)
24002f0a:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f12:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
24002f14:	4b12      	ldr	r3, [pc, #72]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f16:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24002f1a:	4c23      	ldr	r4, [pc, #140]	; (24002fa8 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f1c:	4a12      	ldr	r2, [pc, #72]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
24002f1e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f22:	4c22      	ldr	r4, [pc, #136]	; (24002fac <setLFOShapes+0x140>)
24002f24:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
24002f28:	4921      	ldr	r1, [pc, #132]	; (24002fb0 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002f2a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24002f2e:	4a21      	ldr	r2, [pc, #132]	; (24002fb4 <setLFOShapes+0x148>)
24002f30:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f34:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f38:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawTick;
24002f3a:	4b09      	ldr	r3, [pc, #36]	; (24002f60 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f3c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
24002f40:	4c1d      	ldr	r4, [pc, #116]	; (24002fb8 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f42:	4a09      	ldr	r2, [pc, #36]	; (24002f68 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
24002f44:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f48:	4c1c      	ldr	r4, [pc, #112]	; (24002fbc <setLFOShapes+0x150>)
24002f4a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
24002f4e:	491c      	ldr	r1, [pc, #112]	; (24002fc0 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f50:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002f54:	4a1b      	ldr	r2, [pc, #108]	; (24002fc4 <setLFOShapes+0x158>)
24002f56:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002f5e:	4770      	bx	lr
24002f60:	20005380 	.word	0x20005380
24002f64:	00001e41 	.word	0x00001e41
24002f68:	20018cec 	.word	0x20018cec
24002f6c:	00001f01 	.word	0x00001f01
24002f70:	00002081 	.word	0x00002081
24002f74:	00001fc1 	.word	0x00001fc1
24002f78:	00001da1 	.word	0x00001da1
24002f7c:	00001e81 	.word	0x00001e81
24002f80:	00002001 	.word	0x00002001
24002f84:	00001f41 	.word	0x00001f41
24002f88:	00001d81 	.word	0x00001d81
24002f8c:	00001e61 	.word	0x00001e61
24002f90:	00001fe1 	.word	0x00001fe1
24002f94:	00001f21 	.word	0x00001f21
24002f98:	00001dc1 	.word	0x00001dc1
24002f9c:	00001ea1 	.word	0x00001ea1
24002fa0:	00002021 	.word	0x00002021
24002fa4:	00001f61 	.word	0x00001f61
24002fa8:	00001de1 	.word	0x00001de1
24002fac:	00001ec1 	.word	0x00001ec1
24002fb0:	00002041 	.word	0x00002041
24002fb4:	00001f81 	.word	0x00001f81
24002fb8:	00001e01 	.word	0x00001e01
24002fbc:	00001ee1 	.word	0x00001ee1
24002fc0:	00002061 	.word	0x00002061
24002fc4:	00001fa1 	.word	0x00001fa1

24002fc8 <main>:
{
24002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002fcc:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002fce:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24002fd0:	2604      	movs	r6, #4
{
24002fd2:	ed2d 8b02 	vpush	{d8}
24002fd6:	b091      	sub	sp, #68	; 0x44
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24002fd8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24002fdc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
24002fe0:	f001 fc30 	bl	24004844 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002fe4:	f248 721f 	movw	r2, #34591	; 0x871f
24002fe8:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002fec:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24002fee:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24002ff2:	930d      	str	r3, [sp, #52]	; 0x34
24002ff4:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002ff8:	f001 fc42 	bl	24004880 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
24002ffc:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003000:	4bcb      	ldr	r3, [pc, #812]	; (24003330 <main+0x368>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003002:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
24003004:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003008:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
2400300c:	4bc9      	ldr	r3, [pc, #804]	; (24003334 <main+0x36c>)
2400300e:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003010:	f001 fc36 	bl	24004880 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
24003014:	2202      	movs	r2, #2
  MPU_InitStruct.BaseAddress = 0x24040000;
24003016:	4bc8      	ldr	r3, [pc, #800]	; (24003338 <main+0x370>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003018:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
2400301a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
2400301e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x24040000;
24003022:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003024:	f001 fc2c 	bl	24004880 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
24003028:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400302c:	2203      	movs	r2, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400302e:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
24003030:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  MPU_InitStruct.BaseAddress = 0x30000000;
24003034:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24003036:	230c      	movs	r3, #12
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24003038:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
2400303c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
24003040:	f8ad 5035 	strh.w	r5, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003044:	f001 fc1c 	bl	24004880 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30002000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003048:	2311      	movs	r3, #17
  MPU_InitStruct.BaseAddress = 0x30002000;
2400304a:	4abc      	ldr	r2, [pc, #752]	; (2400333c <main+0x374>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400304c:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
2400304e:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003052:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
24003056:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.BaseAddress = 0x30002000;
2400305a:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
2400305c:	f8ad 3035 	strh.w	r3, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003060:	f001 fc0e 	bl	24004880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
  MPU_InitStruct.BaseAddress = 0x38000000;
24003064:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24003068:	2205      	movs	r2, #5
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400306a:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400306c:	f8ad 5035 	strh.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.BaseAddress = 0x38000000;
24003070:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24003072:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24003074:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24003078:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400307c:	f001 fc00 	bl	24004880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24003080:	2106      	movs	r1, #6
  MPU_InitStruct.BaseAddress = 0x38800000;
24003082:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24003086:	230b      	movs	r3, #11
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003088:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
2400308a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x38800000;
2400308e:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24003090:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24003094:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003098:	f001 fbf2 	bl	24004880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
2400309c:	2107      	movs	r1, #7
  MPU_InitStruct.BaseAddress = 0xc0000000;
2400309e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240030a2:	2319      	movs	r3, #25

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240030a4:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
240030a6:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0xc0000000;
240030aa:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240030ac:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240030b0:	f001 fbe6 	bl	24004880 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240030b4:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
240030b6:	4ba2      	ldr	r3, [pc, #648]	; (24003340 <main+0x378>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240030b8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
240030ba:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x90040000;
240030be:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240030c0:	f001 fbde 	bl	24004880 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
240030c4:	4630      	mov	r0, r6
240030c6:	f001 fbcb 	bl	24004860 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
240030ca:	4a9e      	ldr	r2, [pc, #632]	; (24003344 <main+0x37c>)
240030cc:	6953      	ldr	r3, [r2, #20]
240030ce:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
240030d2:	d111      	bne.n	240030f8 <main+0x130>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
240030d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030d8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
240030dc:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
240030e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030e4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
240030e8:	6953      	ldr	r3, [r2, #20]
240030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240030ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
240030f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030f4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
240030f8:	4892      	ldr	r0, [pc, #584]	; (24003344 <main+0x37c>)
240030fa:	6943      	ldr	r3, [r0, #20]
240030fc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24003100:	d124      	bne.n	2400314c <main+0x184>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
24003102:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24003106:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
2400310a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400310e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
24003112:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003116:	f3c5 05c9 	ubfx	r5, r5, #3, #10
2400311a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400311c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003120:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003122:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24003126:	3b01      	subs	r3, #1
24003128:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400312a:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
2400312e:	d1f8      	bne.n	24003122 <main+0x15a>
    } while(sets-- != 0U);
24003130:	3c20      	subs	r4, #32
24003132:	f114 0f20 	cmn.w	r4, #32
24003136:	d1f1      	bne.n	2400311c <main+0x154>
24003138:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
2400313c:	6943      	ldr	r3, [r0, #20]
2400313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24003142:	6143      	str	r3, [r0, #20]
24003144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003148:	f3bf 8f6f 	isb	sy
  HAL_Init();
2400314c:	f001 faac 	bl	240046a8 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
24003150:	b662      	cpsie	i
  SystemClock_Config();
24003152:	f7fe fff1 	bl	24002138 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003156:	f8df a26c 	ldr.w	sl, [pc, #620]	; 240033c4 <main+0x3fc>
  PeriphCommonClock_Config();
2400315a:	f7ff f881 	bl	24002260 <PeriphCommonClock_Config>
  MX_GPIO_Init();
2400315e:	f7fe fcdb 	bl	24001b18 <MX_GPIO_Init>
  MX_DMA_Init();
24003162:	f7fe fbdd 	bl	24001920 <MX_DMA_Init>
  MX_BDMA_Init();
24003166:	f7fe fb17 	bl	24001798 <MX_BDMA_Init>
  MX_I2C2_Init();
2400316a:	f7fe fe9b 	bl	24001ea4 <MX_I2C2_Init>
  MX_SAI1_Init();
2400316e:	f000 fe1f 	bl	24003db0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24003172:	f000 ff27 	bl	24003fc4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24003176:	f000 ff93 	bl	240040a0 <MX_SPI1_Init>
  MX_I2C1_Init();
2400317a:	f7fe fe5b 	bl	24001e34 <MX_I2C1_Init>
  MX_FMC_Init();
2400317e:	f7fe fc1b 	bl	240019b8 <MX_FMC_Init>
  MX_FATFS_Init();
24003182:	f009 fc87 	bl	2400ca94 <MX_FATFS_Init>
  MX_SPI6_Init();
24003186:	f000 ffb7 	bl	240040f8 <MX_SPI6_Init>
  MX_RNG_Init();
2400318a:	f000 fdd1 	bl	24003d30 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
2400318e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24003192:	486d      	ldr	r0, [pc, #436]	; (24003348 <main+0x380>)
24003194:	f003 f8fc 	bl	24006390 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003198:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
2400319c:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
2400319e:	486a      	ldr	r0, [pc, #424]	; (24003348 <main+0x380>)
240031a0:	f003 f8f6 	bl	24006390 <HAL_GPIO_ReadPin>
240031a4:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
240031a6:	2104      	movs	r1, #4
240031a8:	4868      	ldr	r0, [pc, #416]	; (2400334c <main+0x384>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
240031aa:	00a4      	lsls	r4, r4, #2
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
240031ac:	f003 f8f0 	bl	24006390 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
240031b0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
240031b4:	4420      	add	r0, r4
240031b6:	b2c4      	uxtb	r4, r0
240031b8:	f88a 4000 	strb.w	r4, [sl]
	if (boardNumber == 0)
240031bc:	2c00      	cmp	r4, #0
240031be:	f000 855f 	beq.w	24003c80 <main+0xcb8>
	HAL_Delay(500);
240031c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240031c6:	f001 fab1 	bl	2400472c <HAL_Delay>
    if (boardNumber !=0)
240031ca:	f89a 3000 	ldrb.w	r3, [sl]
240031ce:	2b00      	cmp	r3, #0
240031d0:	f040 854e 	bne.w	24003c70 <main+0xca8>
   PWR->CR1 |= PWR_CR1_DBP;
240031d4:	4a5e      	ldr	r2, [pc, #376]	; (24003350 <main+0x388>)
240031d6:	6813      	ldr	r3, [r2, #0]
240031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240031dc:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
240031de:	6813      	ldr	r3, [r2, #0]
240031e0:	05d9      	lsls	r1, r3, #23
240031e2:	d5fc      	bpl.n	240031de <main+0x216>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240031e4:	4b5b      	ldr	r3, [pc, #364]	; (24003354 <main+0x38c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240031e6:	2200      	movs	r2, #0
240031e8:	2180      	movs	r1, #128	; 0x80
240031ea:	485b      	ldr	r0, [pc, #364]	; (24003358 <main+0x390>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240031ec:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
240031f0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
240031f4:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
240031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24003200:	9305      	str	r3, [sp, #20]
24003202:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24003204:	f003 f8ca 	bl	2400639c <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
24003208:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
2400320c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24003210:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003214:	4a4b      	ldr	r2, [pc, #300]	; (24003344 <main+0x37c>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003216:	4951      	ldr	r1, [pc, #324]	; (2400335c <main+0x394>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003218:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400321c:	f8d1 0fb4 	ldr.w	r0, [r1, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24003224:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003228:	07c3      	lsls	r3, r0, #31
2400322a:	d502      	bpl.n	24003232 <main+0x26a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
2400322c:	4b4c      	ldr	r3, [pc, #304]	; (24003360 <main+0x398>)
2400322e:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
	  buffer[i] = 0;
24003232:	4b4c      	ldr	r3, [pc, #304]	; (24003364 <main+0x39c>)
  DWT->CYCCNT = 0;
24003234:	2100      	movs	r1, #0
24003236:	4a49      	ldr	r2, [pc, #292]	; (2400335c <main+0x394>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003238:	2403      	movs	r4, #3
  DWT->CTRL = 0x40000001;
2400323a:	484b      	ldr	r0, [pc, #300]	; (24003368 <main+0x3a0>)
  DWT->CYCCNT = 0;
2400323c:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
2400323e:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
24003240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003244:	4618      	mov	r0, r3
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
24003246:	4d41      	ldr	r5, [pc, #260]	; (2400334c <main+0x384>)
	  buffer[i] = 0;
24003248:	f012 f94a 	bl	240154e0 <memset>
  buffer[15+112] = NUM_PARAMS;
2400324c:	229c      	movs	r2, #156	; 0x9c
	  buffer[i] = 0;
2400324e:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19+112] = 1;
24003250:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003252:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003256:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
2400325a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
2400325e:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003262:	f8a3 01b8 	strh.w	r0, [r3, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003266:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
2400326a:	f883 11bb 	strb.w	r1, [r3, #443]	; 0x1bb
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
2400326e:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003272:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 2400336c <main+0x3a4>
24003276:	483e      	ldr	r0, [pc, #248]	; (24003370 <main+0x3a8>)
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
24003278:	f8a3 21c1 	strh.w	r2, [r3, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
2400327c:	f00f fb92 	bl	240129a4 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24003280:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003284:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 24003374 <main+0x3ac>
24003288:	eddf 0a3b 	vldr	s1, [pc, #236]	; 24003378 <main+0x3b0>
2400328c:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 2400337c <main+0x3b4>
24003290:	483b      	ldr	r0, [pc, #236]	; (24003380 <main+0x3b8>)
24003292:	f00f fb87 	bl	240129a4 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24003296:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
2400329a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
2400329e:	f44f 6100 	mov.w	r1, #2048	; 0x800
240032a2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 2400337c <main+0x3b4>
240032a6:	4837      	ldr	r0, [pc, #220]	; (24003384 <main+0x3bc>)
240032a8:	f00f fb7c 	bl	240129a4 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
240032ac:	2201      	movs	r2, #1
240032ae:	4628      	mov	r0, r5
240032b0:	4611      	mov	r1, r2
240032b2:	f003 f873 	bl	2400639c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
240032b6:	200a      	movs	r0, #10
240032b8:	f001 fa38 	bl	2400472c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
240032bc:	4628      	mov	r0, r5
240032be:	2200      	movs	r2, #0
240032c0:	2101      	movs	r1, #1
240032c2:	f003 f86b 	bl	2400639c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
240032c6:	200a      	movs	r0, #10
240032c8:	f001 fa30 	bl	2400472c <HAL_Delay>
  for (int i = 0; i < 3; i++)
240032cc:	3c01      	subs	r4, #1
240032ce:	d1ed      	bne.n	240032ac <main+0x2e4>
  if (boardNumber == 0)
240032d0:	f89a 3000 	ldrb.w	r3, [sl]
240032d4:	2b00      	cmp	r3, #0
240032d6:	f000 84c7 	beq.w	24003c68 <main+0xca0>
	  diskBusy = 1;
240032da:	4b2b      	ldr	r3, [pc, #172]	; (24003388 <main+0x3c0>)
  specialModeMacroNames[2][7] = "NoiseVol      ";
240032dc:	243f      	movs	r4, #63	; 0x3f
240032de:	4f2b      	ldr	r7, [pc, #172]	; (2400338c <main+0x3c4>)
	  diskBusy = 1;
240032e0:	461a      	mov	r2, r3
240032e2:	9302      	str	r3, [sp, #8]
240032e4:	2301      	movs	r3, #1
240032e6:	4e2a      	ldr	r6, [pc, #168]	; (24003390 <main+0x3c8>)
240032e8:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
240032ea:	f7ff fa97 	bl	2400281c <SDRAM_init>
  codec_init(&hi2c2);
240032ee:	4829      	ldr	r0, [pc, #164]	; (24003394 <main+0x3cc>)
240032f0:	f7fe fa6e 	bl	240017d0 <codec_init>
  audioInit();
240032f4:	f7fd f9b4 	bl	24000660 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
240032f8:	4b27      	ldr	r3, [pc, #156]	; (24003398 <main+0x3d0>)
240032fa:	4928      	ldr	r1, [pc, #160]	; (2400339c <main+0x3d4>)
  specialModeMacroNames[0][0] = "TargetLev     ";
240032fc:	4a28      	ldr	r2, [pc, #160]	; (240033a0 <main+0x3d8>)
240032fe:	461d      	mov	r5, r3
  specialModeNames[0] = "PHYS STR1     ";
24003300:	6019      	str	r1, [r3, #0]
  specialModeMacroNames[0][0] = "TargetLev     ";
24003302:	4928      	ldr	r1, [pc, #160]	; (240033a4 <main+0x3dc>)
24003304:	6011      	str	r1, [r2, #0]
  specialModeMacroNames[1][1] = "TargetLev     ";
24003306:	6251      	str	r1, [r2, #36]	; 0x24
  specialModeMacroNames[1][2] = "PickPos       ";
24003308:	4927      	ldr	r1, [pc, #156]	; (240033a8 <main+0x3e0>)
2400330a:	6291      	str	r1, [r2, #40]	; 0x28
  specialModeMacroNames[1][3] = "Decay         ";
2400330c:	4927      	ldr	r1, [pc, #156]	; (240033ac <main+0x3e4>)
2400330e:	62d1      	str	r1, [r2, #44]	; 0x2c
  specialModeMacroNames[2][3] = "Decay         ";
24003310:	64d1      	str	r1, [r2, #76]	; 0x4c
  specialModeMacroNames[2][4] = "Stretch       ";
24003312:	4927      	ldr	r1, [pc, #156]	; (240033b0 <main+0x3e8>)
24003314:	6511      	str	r1, [r2, #80]	; 0x50
  specialModeMacroNames[2][5] = "RandDecy      ";
24003316:	4927      	ldr	r1, [pc, #156]	; (240033b4 <main+0x3ec>)
24003318:	6551      	str	r1, [r2, #84]	; 0x54
  specialModeMacroNames[2][6] = "RandGain      ";
2400331a:	4927      	ldr	r1, [pc, #156]	; (240033b8 <main+0x3f0>)
2400331c:	6591      	str	r1, [r2, #88]	; 0x58
  specialModeMacroNames[2][7] = "NoiseVol      ";
2400331e:	4927      	ldr	r1, [pc, #156]	; (240033bc <main+0x3f4>)
24003320:	65d1      	str	r1, [r2, #92]	; 0x5c
  specialModeMacroNames[0][4] = "              ";
24003322:	4927      	ldr	r1, [pc, #156]	; (240033c0 <main+0x3f8>)
  specialModeMacroNames[0][5] = "              ";
24003324:	e9c2 1104 	strd	r1, r1, [r2, #16]
  specialModeMacroNames[0][7] = "              ";
24003328:	e9c2 1106 	strd	r1, r1, [r2, #24]
2400332c:	e04c      	b.n	240033c8 <main+0x400>
2400332e:	bf00      	nop
24003330:	03010011 	.word	0x03010011
24003334:	01010000 	.word	0x01010000
24003338:	24040000 	.word	0x24040000
2400333c:	30002000 	.word	0x30002000
24003340:	90040000 	.word	0x90040000
24003344:	e000ed00 	.word	0xe000ed00
24003348:	58020400 	.word	0x58020400
2400334c:	58020000 	.word	0x58020000
24003350:	58024800 	.word	0x58024800
24003354:	58024400 	.word	0x58024400
24003358:	58020800 	.word	0x58020800
2400335c:	e0001000 	.word	0xe0001000
24003360:	c5acce55 	.word	0xc5acce55
24003364:	300001c0 	.word	0x300001c0
24003368:	40000001 	.word	0x40000001
2400336c:	3c23d70a 	.word	0x3c23d70a
24003370:	2001aec4 	.word	0x2001aec4
24003374:	457a0000 	.word	0x457a0000
24003378:	469c4000 	.word	0x469c4000
2400337c:	00000000 	.word	0x00000000
24003380:	20014bb8 	.word	0x20014bb8
24003384:	20016cec 	.word	0x20016cec
24003388:	20014b60 	.word	0x20014b60
2400338c:	30032000 	.word	0x30032000
24003390:	30032380 	.word	0x30032380
24003394:	20014ac0 	.word	0x20014ac0
24003398:	2001cf24 	.word	0x2001cf24
2400339c:	24017e58 	.word	0x24017e58
240033a0:	2001cec4 	.word	0x2001cec4
240033a4:	24017e68 	.word	0x24017e68
240033a8:	24017ed8 	.word	0x24017ed8
240033ac:	24017ee8 	.word	0x24017ee8
240033b0:	24017f48 	.word	0x24017f48
240033b4:	24017f58 	.word	0x24017f58
240033b8:	24017f68 	.word	0x24017f68
240033bc:	24017f78 	.word	0x24017f78
240033c0:	24017ea8 	.word	0x24017ea8
240033c4:	20014b15 	.word	0x20014b15
  specialModeMacroNames[0][1] = "LevSmooth     ";
240033c8:	490c      	ldr	r1, [pc, #48]	; (240033fc <main+0x434>)
240033ca:	6051      	str	r1, [r2, #4]
  specialModeMacroNames[1][7] = "LevSmooth     ";
240033cc:	63d1      	str	r1, [r2, #60]	; 0x3c
  specialModeMacroNames[1][5] = "Noise1        ";
240033ce:	490c      	ldr	r1, [pc, #48]	; (24003400 <main+0x438>)
240033d0:	6351      	str	r1, [r2, #52]	; 0x34
  specialModeMacroNames[2][0] = "Noise1        ";
240033d2:	6411      	str	r1, [r2, #64]	; 0x40
  specialModeMacroNames[1][6] = "Noise2        ";
240033d4:	490b      	ldr	r1, [pc, #44]	; (24003404 <main+0x43c>)
240033d6:	6391      	str	r1, [r2, #56]	; 0x38
  specialModeMacroNames[2][1] = "Noise2        ";
240033d8:	6451      	str	r1, [r2, #68]	; 0x44
  specialModeMacroNames[0][2] = "LevStrengt    ";
240033da:	490b      	ldr	r1, [pc, #44]	; (24003408 <main+0x440>)
240033dc:	6091      	str	r1, [r2, #8]
  specialModeMacroNames[0][3] = "LevMode       ";
240033de:	490b      	ldr	r1, [pc, #44]	; (2400340c <main+0x444>)
240033e0:	60d1      	str	r1, [r2, #12]
  specialModeNames[1] = "PHYS STR2     ";
240033e2:	490b      	ldr	r1, [pc, #44]	; (24003410 <main+0x448>)
240033e4:	6059      	str	r1, [r3, #4]
  specialModeMacroNames[1][0] = "FBLev On      ";
240033e6:	490b      	ldr	r1, [pc, #44]	; (24003414 <main+0x44c>)
240033e8:	6211      	str	r1, [r2, #32]
  specialModeMacroNames[1][4] = "Touch         ";
240033ea:	490b      	ldr	r1, [pc, #44]	; (24003418 <main+0x450>)
240033ec:	6311      	str	r1, [r2, #48]	; 0x30
  specialModeNames[2] = "ADDITIVE      ";
240033ee:	490b      	ldr	r1, [pc, #44]	; (2400341c <main+0x454>)
240033f0:	6099      	str	r1, [r3, #8]
  specialModeMacroNames[2][7] = "NoiseVol      ";
240033f2:	2150      	movs	r1, #80	; 0x50
  specialModeMacroNames[2][2] = "Tone          ";
240033f4:	4b0a      	ldr	r3, [pc, #40]	; (24003420 <main+0x458>)
240033f6:	6493      	str	r3, [r2, #72]	; 0x48
240033f8:	e014      	b.n	24003424 <main+0x45c>
240033fa:	bf00      	nop
240033fc:	24017e78 	.word	0x24017e78
24003400:	24017f08 	.word	0x24017f08
24003404:	24017f18 	.word	0x24017f18
24003408:	24017e88 	.word	0x24017e88
2400340c:	24017e98 	.word	0x24017e98
24003410:	24017eb8 	.word	0x24017eb8
24003414:	24017ec8 	.word	0x24017ec8
24003418:	24017ef8 	.word	0x24017ef8
2400341c:	24017f28 	.word	0x24017f28
24003420:	24017f38 	.word	0x24017f38
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003424:	f855 3b04 	ldr.w	r3, [r5], #4
24003428:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  for (int i = 0; i < 3; i++)
2400342c:	3220      	adds	r2, #32
2400342e:	3c01      	subs	r4, #1
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003430:	f807 101c 	strb.w	r1, [r7, ip, lsl #1]
24003434:	eb07 004c 	add.w	r0, r7, ip, lsl #1
24003438:	7859      	ldrb	r1, [r3, #1]
  for (int i = 0; i < 3; i++)
2400343a:	2c3c      	cmp	r4, #60	; 0x3c
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400343c:	7041      	strb	r1, [r0, #1]
2400343e:	7899      	ldrb	r1, [r3, #2]
24003440:	7081      	strb	r1, [r0, #2]
24003442:	78d9      	ldrb	r1, [r3, #3]
24003444:	70c1      	strb	r1, [r0, #3]
24003446:	7919      	ldrb	r1, [r3, #4]
24003448:	7101      	strb	r1, [r0, #4]
2400344a:	7959      	ldrb	r1, [r3, #5]
2400344c:	7141      	strb	r1, [r0, #5]
2400344e:	7999      	ldrb	r1, [r3, #6]
24003450:	7181      	strb	r1, [r0, #6]
24003452:	79d9      	ldrb	r1, [r3, #7]
24003454:	71c1      	strb	r1, [r0, #7]
24003456:	7a19      	ldrb	r1, [r3, #8]
24003458:	7201      	strb	r1, [r0, #8]
2400345a:	7a59      	ldrb	r1, [r3, #9]
2400345c:	7241      	strb	r1, [r0, #9]
2400345e:	7a99      	ldrb	r1, [r3, #10]
24003460:	7281      	strb	r1, [r0, #10]
24003462:	7ad9      	ldrb	r1, [r3, #11]
24003464:	72c1      	strb	r1, [r0, #11]
24003466:	7b19      	ldrb	r1, [r3, #12]
24003468:	7301      	strb	r1, [r0, #12]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400346a:	f852 1c20 	ldr.w	r1, [r2, #-32]
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400346e:	7b5b      	ldrb	r3, [r3, #13]
24003470:	7343      	strb	r3, [r0, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003472:	ea4f 100c 	mov.w	r0, ip, lsl #4
24003476:	f891 e000 	ldrb.w	lr, [r1]
2400347a:	eb06 130c 	add.w	r3, r6, ip, lsl #4
2400347e:	f806 e000 	strb.w	lr, [r6, r0]
24003482:	7848      	ldrb	r0, [r1, #1]
24003484:	7058      	strb	r0, [r3, #1]
24003486:	f891 c002 	ldrb.w	ip, [r1, #2]
2400348a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
2400348e:	f883 c002 	strb.w	ip, [r3, #2]
24003492:	f891 c003 	ldrb.w	ip, [r1, #3]
24003496:	f883 c003 	strb.w	ip, [r3, #3]
2400349a:	f891 c004 	ldrb.w	ip, [r1, #4]
2400349e:	f883 c004 	strb.w	ip, [r3, #4]
240034a2:	f891 c005 	ldrb.w	ip, [r1, #5]
240034a6:	f883 c005 	strb.w	ip, [r3, #5]
240034aa:	f891 c006 	ldrb.w	ip, [r1, #6]
240034ae:	f883 c006 	strb.w	ip, [r3, #6]
240034b2:	f891 c007 	ldrb.w	ip, [r1, #7]
240034b6:	f883 c007 	strb.w	ip, [r3, #7]
240034ba:	f891 c008 	ldrb.w	ip, [r1, #8]
240034be:	f883 c008 	strb.w	ip, [r3, #8]
240034c2:	f891 c009 	ldrb.w	ip, [r1, #9]
240034c6:	f883 c009 	strb.w	ip, [r3, #9]
240034ca:	f891 c00a 	ldrb.w	ip, [r1, #10]
240034ce:	f883 c00a 	strb.w	ip, [r3, #10]
240034d2:	f891 c00b 	ldrb.w	ip, [r1, #11]
240034d6:	f883 c00b 	strb.w	ip, [r3, #11]
240034da:	f891 c00c 	ldrb.w	ip, [r1, #12]
240034de:	f883 c00c 	strb.w	ip, [r3, #12]
240034e2:	7b49      	ldrb	r1, [r1, #13]
240034e4:	7359      	strb	r1, [r3, #13]
240034e6:	7801      	ldrb	r1, [r0, #0]
240034e8:	7399      	strb	r1, [r3, #14]
240034ea:	7841      	ldrb	r1, [r0, #1]
240034ec:	73d9      	strb	r1, [r3, #15]
240034ee:	7881      	ldrb	r1, [r0, #2]
240034f0:	7419      	strb	r1, [r3, #16]
240034f2:	78c1      	ldrb	r1, [r0, #3]
240034f4:	7459      	strb	r1, [r3, #17]
240034f6:	f890 c004 	ldrb.w	ip, [r0, #4]
240034fa:	f852 1c18 	ldr.w	r1, [r2, #-24]
240034fe:	f883 c012 	strb.w	ip, [r3, #18]
24003502:	f890 c005 	ldrb.w	ip, [r0, #5]
24003506:	f883 c013 	strb.w	ip, [r3, #19]
2400350a:	f890 c006 	ldrb.w	ip, [r0, #6]
2400350e:	f883 c014 	strb.w	ip, [r3, #20]
24003512:	f890 c007 	ldrb.w	ip, [r0, #7]
24003516:	f883 c015 	strb.w	ip, [r3, #21]
2400351a:	f890 c008 	ldrb.w	ip, [r0, #8]
2400351e:	f883 c016 	strb.w	ip, [r3, #22]
24003522:	f890 c009 	ldrb.w	ip, [r0, #9]
24003526:	f883 c017 	strb.w	ip, [r3, #23]
2400352a:	f890 c00a 	ldrb.w	ip, [r0, #10]
2400352e:	f883 c018 	strb.w	ip, [r3, #24]
24003532:	f890 c00b 	ldrb.w	ip, [r0, #11]
24003536:	f883 c019 	strb.w	ip, [r3, #25]
2400353a:	f890 c00c 	ldrb.w	ip, [r0, #12]
2400353e:	f883 c01a 	strb.w	ip, [r3, #26]
24003542:	7b40      	ldrb	r0, [r0, #13]
24003544:	76d8      	strb	r0, [r3, #27]
24003546:	7808      	ldrb	r0, [r1, #0]
24003548:	7718      	strb	r0, [r3, #28]
2400354a:	7848      	ldrb	r0, [r1, #1]
2400354c:	7758      	strb	r0, [r3, #29]
2400354e:	7888      	ldrb	r0, [r1, #2]
24003550:	7798      	strb	r0, [r3, #30]
24003552:	78c8      	ldrb	r0, [r1, #3]
24003554:	77d8      	strb	r0, [r3, #31]
24003556:	7908      	ldrb	r0, [r1, #4]
24003558:	f883 0020 	strb.w	r0, [r3, #32]
2400355c:	7948      	ldrb	r0, [r1, #5]
2400355e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
24003562:	f891 c006 	ldrb.w	ip, [r1, #6]
24003566:	f852 0c14 	ldr.w	r0, [r2, #-20]
2400356a:	f883 c022 	strb.w	ip, [r3, #34]	; 0x22
2400356e:	f891 c007 	ldrb.w	ip, [r1, #7]
24003572:	f883 c023 	strb.w	ip, [r3, #35]	; 0x23
24003576:	f891 c008 	ldrb.w	ip, [r1, #8]
2400357a:	f883 c024 	strb.w	ip, [r3, #36]	; 0x24
2400357e:	f891 c009 	ldrb.w	ip, [r1, #9]
24003582:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
24003586:	f891 c00a 	ldrb.w	ip, [r1, #10]
2400358a:	f883 c026 	strb.w	ip, [r3, #38]	; 0x26
2400358e:	f891 c00b 	ldrb.w	ip, [r1, #11]
24003592:	f883 c027 	strb.w	ip, [r3, #39]	; 0x27
24003596:	f891 c00c 	ldrb.w	ip, [r1, #12]
2400359a:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
2400359e:	7b49      	ldrb	r1, [r1, #13]
240035a0:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
240035a4:	7801      	ldrb	r1, [r0, #0]
240035a6:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
240035aa:	7841      	ldrb	r1, [r0, #1]
240035ac:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
240035b0:	7881      	ldrb	r1, [r0, #2]
240035b2:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
240035b6:	78c1      	ldrb	r1, [r0, #3]
240035b8:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
240035bc:	7901      	ldrb	r1, [r0, #4]
240035be:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
240035c2:	7941      	ldrb	r1, [r0, #5]
240035c4:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
240035c8:	7981      	ldrb	r1, [r0, #6]
240035ca:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
240035ce:	79c1      	ldrb	r1, [r0, #7]
240035d0:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
240035d4:	f890 c008 	ldrb.w	ip, [r0, #8]
240035d8:	f852 1c10 	ldr.w	r1, [r2, #-16]
240035dc:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
240035e0:	f890 c009 	ldrb.w	ip, [r0, #9]
240035e4:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
240035e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
240035ec:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
240035f0:	f890 c00b 	ldrb.w	ip, [r0, #11]
240035f4:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
240035f8:	f890 c00c 	ldrb.w	ip, [r0, #12]
240035fc:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
24003600:	7b40      	ldrb	r0, [r0, #13]
24003602:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
24003606:	7808      	ldrb	r0, [r1, #0]
24003608:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
2400360c:	7848      	ldrb	r0, [r1, #1]
2400360e:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
24003612:	7888      	ldrb	r0, [r1, #2]
24003614:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
24003618:	78c8      	ldrb	r0, [r1, #3]
2400361a:	f883 003b 	strb.w	r0, [r3, #59]	; 0x3b
2400361e:	7908      	ldrb	r0, [r1, #4]
24003620:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
24003624:	7948      	ldrb	r0, [r1, #5]
24003626:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
2400362a:	7988      	ldrb	r0, [r1, #6]
2400362c:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
24003630:	79c8      	ldrb	r0, [r1, #7]
24003632:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
24003636:	7a08      	ldrb	r0, [r1, #8]
24003638:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
2400363c:	7a48      	ldrb	r0, [r1, #9]
2400363e:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
24003642:	f891 c00a 	ldrb.w	ip, [r1, #10]
24003646:	f852 0c0c 	ldr.w	r0, [r2, #-12]
2400364a:	f883 c042 	strb.w	ip, [r3, #66]	; 0x42
2400364e:	f891 c00b 	ldrb.w	ip, [r1, #11]
24003652:	f883 c043 	strb.w	ip, [r3, #67]	; 0x43
24003656:	f891 c00c 	ldrb.w	ip, [r1, #12]
2400365a:	f883 c044 	strb.w	ip, [r3, #68]	; 0x44
2400365e:	7b49      	ldrb	r1, [r1, #13]
24003660:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
24003664:	7801      	ldrb	r1, [r0, #0]
24003666:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
2400366a:	7841      	ldrb	r1, [r0, #1]
2400366c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
24003670:	7881      	ldrb	r1, [r0, #2]
24003672:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
24003676:	78c1      	ldrb	r1, [r0, #3]
24003678:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
2400367c:	7901      	ldrb	r1, [r0, #4]
2400367e:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
24003682:	7941      	ldrb	r1, [r0, #5]
24003684:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
24003688:	7981      	ldrb	r1, [r0, #6]
2400368a:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
2400368e:	79c1      	ldrb	r1, [r0, #7]
24003690:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
24003694:	7a01      	ldrb	r1, [r0, #8]
24003696:	f883 104e 	strb.w	r1, [r3, #78]	; 0x4e
2400369a:	7a41      	ldrb	r1, [r0, #9]
2400369c:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
240036a0:	7a81      	ldrb	r1, [r0, #10]
240036a2:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
240036a6:	7ac1      	ldrb	r1, [r0, #11]
240036a8:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
240036ac:	f890 c00c 	ldrb.w	ip, [r0, #12]
240036b0:	f852 1c08 	ldr.w	r1, [r2, #-8]
240036b4:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
240036b8:	7b40      	ldrb	r0, [r0, #13]
240036ba:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
240036be:	7808      	ldrb	r0, [r1, #0]
240036c0:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
240036c4:	7848      	ldrb	r0, [r1, #1]
240036c6:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
240036ca:	7888      	ldrb	r0, [r1, #2]
240036cc:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
240036d0:	78c8      	ldrb	r0, [r1, #3]
240036d2:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
240036d6:	7908      	ldrb	r0, [r1, #4]
240036d8:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
240036dc:	7948      	ldrb	r0, [r1, #5]
240036de:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
240036e2:	7988      	ldrb	r0, [r1, #6]
240036e4:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
240036e8:	79c8      	ldrb	r0, [r1, #7]
240036ea:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
240036ee:	7a08      	ldrb	r0, [r1, #8]
240036f0:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
240036f4:	7a48      	ldrb	r0, [r1, #9]
240036f6:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
240036fa:	7a88      	ldrb	r0, [r1, #10]
240036fc:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
24003700:	7ac8      	ldrb	r0, [r1, #11]
24003702:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
24003706:	7b08      	ldrb	r0, [r1, #12]
24003708:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
2400370c:	7b49      	ldrb	r1, [r1, #13]
2400370e:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
24003712:	f852 1c04 	ldr.w	r1, [r2, #-4]
24003716:	7808      	ldrb	r0, [r1, #0]
24003718:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
2400371c:	7848      	ldrb	r0, [r1, #1]
2400371e:	f883 0063 	strb.w	r0, [r3, #99]	; 0x63
24003722:	7888      	ldrb	r0, [r1, #2]
24003724:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
24003728:	78c8      	ldrb	r0, [r1, #3]
2400372a:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
2400372e:	7908      	ldrb	r0, [r1, #4]
24003730:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
24003734:	7948      	ldrb	r0, [r1, #5]
24003736:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
2400373a:	7988      	ldrb	r0, [r1, #6]
2400373c:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
24003740:	79c8      	ldrb	r0, [r1, #7]
24003742:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
24003746:	7a08      	ldrb	r0, [r1, #8]
24003748:	f883 006a 	strb.w	r0, [r3, #106]	; 0x6a
2400374c:	7a48      	ldrb	r0, [r1, #9]
2400374e:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
24003752:	7a88      	ldrb	r0, [r1, #10]
24003754:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
24003758:	7ac8      	ldrb	r0, [r1, #11]
2400375a:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
2400375e:	7b08      	ldrb	r0, [r1, #12]
24003760:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
24003764:	7b49      	ldrb	r1, [r1, #13]
24003766:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  for (int i = 0; i < 3; i++)
2400376a:	d002      	beq.n	24003772 <main+0x7aa>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
2400376c:	682b      	ldr	r3, [r5, #0]
2400376e:	7819      	ldrb	r1, [r3, #0]
24003770:	e658      	b.n	24003424 <main+0x45c>
    HAL_SPI_Receive_DMA(&hspi6, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003772:	2234      	movs	r2, #52	; 0x34
24003774:	49a2      	ldr	r1, [pc, #648]	; (24003a00 <main+0xa38>)
24003776:	48a3      	ldr	r0, [pc, #652]	; (24003a04 <main+0xa3c>)
24003778:	f007 faf0 	bl	2400ad5c <HAL_SPI_Receive_DMA>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
2400377c:	4aa2      	ldr	r2, [pc, #648]	; (24003a08 <main+0xa40>)
2400377e:	2340      	movs	r3, #64	; 0x40
24003780:	48a2      	ldr	r0, [pc, #648]	; (24003a0c <main+0xa44>)
	  if (rand > TWO_TO_31)
24003782:	eddf 8aa3 	vldr	s17, [pc, #652]	; 24003a10 <main+0xa48>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
24003786:	18d1      	adds	r1, r2, r3
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24003788:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 24003a14 <main+0xa4c>
    HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
2400378c:	f007 fbc6 	bl	2400af1c <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24003790:	49a1      	ldr	r1, [pc, #644]	; (24003a18 <main+0xa50>)
24003792:	48a2      	ldr	r0, [pc, #648]	; (24003a1c <main+0xa54>)
24003794:	4ca2      	ldr	r4, [pc, #648]	; (24003a20 <main+0xa58>)
24003796:	f7fd ffdf 	bl	24001758 <audioStart>
2400379a:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 24003a6c <main+0xaa4>
2400379e:	4ea1      	ldr	r6, [pc, #644]	; (24003a24 <main+0xa5c>)
240037a0:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 24003a70 <main+0xaa8>
240037a4:	4da0      	ldr	r5, [pc, #640]	; (24003a28 <main+0xa60>)
240037a6:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 24003a74 <main+0xaac>
240037aa:	e028      	b.n	240037fe <main+0x836>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
240037ac:	e9d6 2300 	ldrd	r2, r3, [r6]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
240037b0:	2180      	movs	r1, #128	; 0x80
240037b2:	489e      	ldr	r0, [pc, #632]	; (24003a2c <main+0xa64>)
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
240037b4:	431a      	orrs	r2, r3
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
240037b6:	bf18      	it	ne
240037b8:	2201      	movne	r2, #1
240037ba:	f002 fdef 	bl	2400639c <HAL_GPIO_WritePin>
	  if (firmwareUpdateRequested)
240037be:	f899 3000 	ldrb.w	r3, [r9]
240037c2:	2b00      	cmp	r3, #0
240037c4:	d13e      	bne.n	24003844 <main+0x87c>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
240037c6:	a90a      	add	r1, sp, #40	; 0x28
240037c8:	4899      	ldr	r0, [pc, #612]	; (24003a30 <main+0xa68>)
240037ca:	f005 fded 	bl	240093a8 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
240037ce:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
240037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240037d6:	eef4 7ae8 	vcmpe.f32	s15, s17
240037da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240037de:	dd03      	ble.n	240037e8 <main+0x820>
		  myTestInt++;
240037e0:	4a94      	ldr	r2, [pc, #592]	; (24003a34 <main+0xa6c>)
240037e2:	6813      	ldr	r3, [r2, #0]
240037e4:	3301      	adds	r3, #1
240037e6:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
240037e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240037ec:	782b      	ldrb	r3, [r5, #0]
240037ee:	1c5a      	adds	r2, r3, #1
240037f0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
240037f4:	eea7 7a88 	vfma.f32	s14, s15, s16
240037f8:	702a      	strb	r2, [r5, #0]
240037fa:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
240037fe:	f89a 3000 	ldrb.w	r3, [sl]
24003802:	b953      	cbnz	r3, 2400381a <main+0x852>
		  if (presetWaitingToLoad > 0)
24003804:	4b8c      	ldr	r3, [pc, #560]	; (24003a38 <main+0xa70>)
24003806:	6819      	ldr	r1, [r3, #0]
24003808:	2900      	cmp	r1, #0
2400380a:	d064      	beq.n	240038d6 <main+0x90e>
			  if (!i2cSending)
2400380c:	4b8b      	ldr	r3, [pc, #556]	; (24003a3c <main+0xa74>)
2400380e:	781b      	ldrb	r3, [r3, #0]
24003810:	f003 07ff 	and.w	r7, r3, #255	; 0xff
24003814:	2b00      	cmp	r3, #0
24003816:	f000 809f 	beq.w	24003958 <main+0x990>
	  if (presetWaitingToParse > 0)
2400381a:	f8d8 3000 	ldr.w	r3, [r8]
2400381e:	2b00      	cmp	r3, #0
24003820:	d0c4      	beq.n	240037ac <main+0x7e4>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
24003822:	2201      	movs	r2, #1
24003824:	2180      	movs	r1, #128	; 0x80
24003826:	4886      	ldr	r0, [pc, #536]	; (24003a40 <main+0xa78>)
24003828:	f002 fdb8 	bl	2400639c <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
2400382c:	4b85      	ldr	r3, [pc, #532]	; (24003a44 <main+0xa7c>)
2400382e:	f8d8 0000 	ldr.w	r0, [r8]
24003832:	7819      	ldrb	r1, [r3, #0]
24003834:	f029 ff84 	bl	2402d740 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
24003838:	2200      	movs	r2, #0
2400383a:	2180      	movs	r1, #128	; 0x80
2400383c:	4880      	ldr	r0, [pc, #512]	; (24003a40 <main+0xa78>)
2400383e:	f002 fdad 	bl	2400639c <HAL_GPIO_WritePin>
24003842:	e7b3      	b.n	240037ac <main+0x7e4>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003844:	2201      	movs	r2, #1
24003846:	4879      	ldr	r0, [pc, #484]	; (24003a2c <main+0xa64>)
  __IO uint8_t status = SD_PRESENT;
24003848:	4617      	mov	r7, r2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
2400384a:	4611      	mov	r1, r2
2400384c:	f002 fda6 	bl	2400639c <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003850:	f88d 7013 	strb.w	r7, [sp, #19]
  return status;
24003854:	f89d 3013 	ldrb.w	r3, [sp, #19]
	if(BSP_SD_IsDetected())
24003858:	b39b      	cbz	r3, 240038c2 <main+0x8fa>
			audioOutBuffer[i] = 0;
2400385a:	2300      	movs	r3, #0
			audioOutBuffer[i + 1] = 0;
2400385c:	e9c4 3300 	strd	r3, r3, [r4]
24003860:	e9c4 3302 	strd	r3, r3, [r4, #8]
24003864:	e9c4 3304 	strd	r3, r3, [r4, #16]
24003868:	e9c4 3306 	strd	r3, r3, [r4, #24]
2400386c:	e9c4 3308 	strd	r3, r3, [r4, #32]
24003870:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
24003874:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
24003878:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
2400387c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
24003880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
24003884:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
24003888:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
2400388c:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
24003890:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
24003894:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
24003898:	e9c4 331e 	strd	r3, r3, [r4, #120]	; 0x78
		diskBusy = 1;
2400389c:	9a02      	ldr	r2, [sp, #8]
		disk_initialize(0);
2400389e:	4618      	mov	r0, r3
		diskBusy = 1;
240038a0:	7017      	strb	r7, [r2, #0]
		loadFailed = 0;
240038a2:	4a69      	ldr	r2, [pc, #420]	; (24003a48 <main+0xa80>)
240038a4:	7013      	strb	r3, [r2, #0]
		disk_initialize(0);
240038a6:	f009 f9df 	bl	2400cc68 <disk_initialize>
	    disk_status(0);
240038aa:	2300      	movs	r3, #0
240038ac:	4618      	mov	r0, r3
240038ae:	f009 f9d1 	bl	2400cc54 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240038b2:	463a      	mov	r2, r7
240038b4:	4965      	ldr	r1, [pc, #404]	; (24003a4c <main+0xa84>)
240038b6:	4866      	ldr	r0, [pc, #408]	; (24003a50 <main+0xa88>)
240038b8:	f00b fbce 	bl	2400f058 <f_mount>
240038bc:	2800      	cmp	r0, #0
240038be:	f000 80db 	beq.w	24003a78 <main+0xab0>
	firmwareUpdateRequested = 0;
240038c2:	2200      	movs	r2, #0
	diskBusy = 0;
240038c4:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240038c6:	2101      	movs	r1, #1
240038c8:	4858      	ldr	r0, [pc, #352]	; (24003a2c <main+0xa64>)
	firmwareUpdateRequested = 0;
240038ca:	f889 2000 	strb.w	r2, [r9]
	diskBusy = 0;
240038ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240038d0:	f002 fd64 	bl	2400639c <HAL_GPIO_WritePin>
}
240038d4:	e777      	b.n	240037c6 <main+0x7fe>
		  else if (presetWaitingToWrite > 0)
240038d6:	4b5f      	ldr	r3, [pc, #380]	; (24003a54 <main+0xa8c>)
240038d8:	681b      	ldr	r3, [r3, #0]
240038da:	2b00      	cmp	r3, #0
240038dc:	d09d      	beq.n	2400381a <main+0x852>
				  writePresetToSDCard(presetWaitingToWrite);
240038de:	4b5d      	ldr	r3, [pc, #372]	; (24003a54 <main+0xa8c>)
240038e0:	681f      	ldr	r7, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
240038e2:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
240038e4:	2280      	movs	r2, #128	; 0x80
240038e6:	4620      	mov	r0, r4
240038e8:	f011 fdfa 	bl	240154e0 <memset>
  __IO uint8_t status = SD_PRESENT;
240038ec:	2301      	movs	r3, #1
240038ee:	f88d 3012 	strb.w	r3, [sp, #18]
  return status;
240038f2:	f89d 2012 	ldrb.w	r2, [sp, #18]
	if(BSP_SD_IsDetected())
240038f6:	b342      	cbz	r2, 2400394a <main+0x982>
				diskBusy = 1;
240038f8:	9a02      	ldr	r2, [sp, #8]
240038fa:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
240038fc:	4a56      	ldr	r2, [pc, #344]	; (24003a58 <main+0xa90>)
240038fe:	7813      	ldrb	r3, [r2, #0]
24003900:	2b63      	cmp	r3, #99	; 0x63
24003902:	d901      	bls.n	24003908 <main+0x940>
			        presetNumberToSave = 99;
24003904:	2363      	movs	r3, #99	; 0x63
24003906:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24003908:	4b53      	ldr	r3, [pc, #332]	; (24003a58 <main+0xa90>)
2400390a:	220a      	movs	r2, #10
2400390c:	a907      	add	r1, sp, #28
2400390e:	7818      	ldrb	r0, [r3, #0]
24003910:	f011 fdd6 	bl	240154c0 <itoa>
				int len = ((strlen(charBuf)));
24003914:	a807      	add	r0, sp, #28
24003916:	f7fc fcdf 	bl	240002d8 <strlen>
				if (len == 1)
2400391a:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
2400391c:	4602      	mov	r2, r0
				if (len == 1)
2400391e:	f000 8123 	beq.w	24003b68 <main+0xba0>
					strcat(charBuf, ".ebp");
24003922:	494e      	ldr	r1, [pc, #312]	; (24003a5c <main+0xa94>)
24003924:	ab07      	add	r3, sp, #28
24003926:	6808      	ldr	r0, [r1, #0]
24003928:	7909      	ldrb	r1, [r1, #4]
2400392a:	5098      	str	r0, [r3, r2]
2400392c:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
2400392e:	a80a      	add	r0, sp, #40	; 0x28
24003930:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24003932:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24003934:	a907      	add	r1, sp, #28
24003936:	f011 fdc5 	bl	240154c4 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
2400393a:	220a      	movs	r2, #10
2400393c:	a90a      	add	r1, sp, #40	; 0x28
2400393e:	4848      	ldr	r0, [pc, #288]	; (24003a60 <main+0xa98>)
24003940:	f00b fbdc 	bl	2400f0fc <f_open>
24003944:	2800      	cmp	r0, #0
24003946:	f000 816e 	beq.w	24003c26 <main+0xc5e>
	presetWaitingToWrite = 0;
2400394a:	2300      	movs	r3, #0
2400394c:	4a41      	ldr	r2, [pc, #260]	; (24003a54 <main+0xa8c>)
2400394e:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24003950:	9a02      	ldr	r2, [sp, #8]
24003952:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24003954:	b662      	cpsie	i
}
24003956:	e760      	b.n	2400381a <main+0x852>
				  checkForSDCardPreset(presetNumberToLoad);
24003958:	4b3a      	ldr	r3, [pc, #232]	; (24003a44 <main+0xa7c>)
	prevVoice = numberToLoad;
2400395a:	4a42      	ldr	r2, [pc, #264]	; (24003a64 <main+0xa9c>)
				  checkForSDCardPreset(presetNumberToLoad);
2400395c:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
2400395e:	4833      	ldr	r0, [pc, #204]	; (24003a2c <main+0xa64>)
				  checkForSDCardPreset(presetNumberToLoad);
24003960:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
24003962:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24003964:	4a40      	ldr	r2, [pc, #256]	; (24003a68 <main+0xaa0>)
				  checkForSDCardPreset(presetNumberToLoad);
24003966:	9303      	str	r3, [sp, #12]
	voice = numberToLoad;
24003968:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
2400396a:	2201      	movs	r2, #1
2400396c:	4611      	mov	r1, r2
2400396e:	f002 fd15 	bl	2400639c <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003972:	2301      	movs	r3, #1
24003974:	f88d 3011 	strb.w	r3, [sp, #17]
  return status;
24003978:	f89d 2011 	ldrb.w	r2, [sp, #17]
	if(BSP_SD_IsDetected())
2400397c:	b3a2      	cbz	r2, 240039e8 <main+0xa20>
		disk_initialize(0);
2400397e:	4638      	mov	r0, r7
			audioOutBuffer[i + 1] = 0;
24003980:	e9c4 7700 	strd	r7, r7, [r4]
24003984:	e9c4 7702 	strd	r7, r7, [r4, #8]
24003988:	e9c4 7704 	strd	r7, r7, [r4, #16]
2400398c:	e9c4 7706 	strd	r7, r7, [r4, #24]
24003990:	e9c4 7708 	strd	r7, r7, [r4, #32]
24003994:	e9c4 770a 	strd	r7, r7, [r4, #40]	; 0x28
24003998:	e9c4 770c 	strd	r7, r7, [r4, #48]	; 0x30
2400399c:	e9c4 770e 	strd	r7, r7, [r4, #56]	; 0x38
240039a0:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
240039a4:	e9c4 7712 	strd	r7, r7, [r4, #72]	; 0x48
240039a8:	e9c4 7714 	strd	r7, r7, [r4, #80]	; 0x50
240039ac:	e9c4 7716 	strd	r7, r7, [r4, #88]	; 0x58
240039b0:	e9c4 7718 	strd	r7, r7, [r4, #96]	; 0x60
240039b4:	e9c4 771a 	strd	r7, r7, [r4, #104]	; 0x68
240039b8:	e9c4 771c 	strd	r7, r7, [r4, #112]	; 0x70
240039bc:	e9c4 771e 	strd	r7, r7, [r4, #120]	; 0x78
		diskBusy = 1;
240039c0:	9a02      	ldr	r2, [sp, #8]
240039c2:	7013      	strb	r3, [r2, #0]
		loadFailed = 0;
240039c4:	4b20      	ldr	r3, [pc, #128]	; (24003a48 <main+0xa80>)
240039c6:	701f      	strb	r7, [r3, #0]
		presetWaitingToLoad = 0;
240039c8:	4b1b      	ldr	r3, [pc, #108]	; (24003a38 <main+0xa70>)
240039ca:	601f      	str	r7, [r3, #0]
		disk_initialize(0);
240039cc:	f009 f94c 	bl	2400cc68 <disk_initialize>
	    disk_status(0);
240039d0:	4638      	mov	r0, r7
240039d2:	f009 f93f 	bl	2400cc54 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240039d6:	2301      	movs	r3, #1
240039d8:	491c      	ldr	r1, [pc, #112]	; (24003a4c <main+0xa84>)
240039da:	461a      	mov	r2, r3
240039dc:	481c      	ldr	r0, [pc, #112]	; (24003a50 <main+0xa88>)
240039de:	f00b fb3b 	bl	2400f058 <f_mount>
240039e2:	2800      	cmp	r0, #0
240039e4:	f000 80d7 	beq.w	24003b96 <main+0xbce>
		loadFailed = 1;
240039e8:	2301      	movs	r3, #1
240039ea:	4a17      	ldr	r2, [pc, #92]	; (24003a48 <main+0xa80>)
240039ec:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
240039ee:	2200      	movs	r2, #0
240039f0:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240039f2:	2101      	movs	r1, #1
240039f4:	480d      	ldr	r0, [pc, #52]	; (24003a2c <main+0xa64>)
	diskBusy = 0;
240039f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240039f8:	f002 fcd0 	bl	2400639c <HAL_GPIO_WritePin>
	return found;
240039fc:	e70d      	b.n	2400381a <main+0x852>
240039fe:	bf00      	nop
24003a00:	38000000 	.word	0x38000000
24003a04:	2001d3f0 	.word	0x2001d3f0
24003a08:	30000140 	.word	0x30000140
24003a0c:	2001d350 	.word	0x2001d350
24003a10:	4f000000 	.word	0x4f000000
24003a14:	3000000d 	.word	0x3000000d
24003a18:	2001d03c 	.word	0x2001d03c
24003a1c:	2001d0d4 	.word	0x2001d0d4
24003a20:	30000040 	.word	0x30000040
24003a24:	20014830 	.word	0x20014830
24003a28:	20014b26 	.word	0x20014b26
24003a2c:	58020800 	.word	0x58020800
24003a30:	2001cf34 	.word	0x2001cf34
24003a34:	20019964 	.word	0x20019964
24003a38:	2001aaa8 	.word	0x2001aaa8
24003a3c:	20016ce7 	.word	0x20016ce7
24003a40:	58020400 	.word	0x58020400
24003a44:	2001aaa6 	.word	0x2001aaa6
24003a48:	20018d1c 	.word	0x20018d1c
24003a4c:	2001d8f0 	.word	0x2001d8f0
24003a50:	2001d490 	.word	0x2001d490
24003a54:	2001aab0 	.word	0x2001aab0
24003a58:	2001aaa7 	.word	0x2001aaa7
24003a5c:	24017f88 	.word	0x24017f88
24003a60:	2001d6c4 	.word	0x2001d6c4
24003a64:	2000014c 	.word	0x2000014c
24003a68:	2001490c 	.word	0x2001490c
24003a6c:	2001aaac 	.word	0x2001aaac
24003a70:	20016bc8 	.word	0x20016bc8
24003a74:	2001aac0 	.word	0x2001aac0
			strcat(finalString, "brain.bin");
24003a78:	a807      	add	r0, sp, #28
24003a7a:	f7fc fc2d 	bl	240002d8 <strlen>
24003a7e:	4684      	mov	ip, r0
24003a80:	4889      	ldr	r0, [pc, #548]	; (24003ca8 <main+0xce0>)
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a82:	ab07      	add	r3, sp, #28
24003a84:	4a89      	ldr	r2, [pc, #548]	; (24003cac <main+0xce4>)
			strcat(finalString, "brain.bin");
24003a86:	4607      	mov	r7, r0
24003a88:	eb03 0e0c 	add.w	lr, r3, ip
24003a8c:	cf03      	ldmia	r7!, {r0, r1}
24003a8e:	9703      	str	r7, [sp, #12]
24003a90:	f843 000c 	str.w	r0, [r3, ip]
24003a94:	9803      	ldr	r0, [sp, #12]
24003a96:	f8ce 1004 	str.w	r1, [lr, #4]
24003a9a:	8801      	ldrh	r1, [r0, #0]
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003a9c:	4884      	ldr	r0, [pc, #528]	; (24003cb0 <main+0xce8>)
			strcat(finalString, "brain.bin");
24003a9e:	f8ae 1008 	strh.w	r1, [lr, #8]
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003aa2:	4984      	ldr	r1, [pc, #528]	; (24003cb4 <main+0xcec>)
24003aa4:	f00c f81a 	bl	2400fadc <f_findfirst>
			if(res == FR_OK)
24003aa8:	2800      	cmp	r0, #0
24003aaa:	d037      	beq.n	24003b1c <main+0xb54>
			strcat(finalString2, "pluck.bin");
24003aac:	a80a      	add	r0, sp, #40	; 0x28
24003aae:	f7fc fc13 	bl	240002d8 <strlen>
24003ab2:	4684      	mov	ip, r0
24003ab4:	4880      	ldr	r0, [pc, #512]	; (24003cb8 <main+0xcf0>)
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003ab6:	ab0a      	add	r3, sp, #40	; 0x28
24003ab8:	4a7c      	ldr	r2, [pc, #496]	; (24003cac <main+0xce4>)
			strcat(finalString2, "pluck.bin");
24003aba:	4607      	mov	r7, r0
24003abc:	eb03 0e0c 	add.w	lr, r3, ip
24003ac0:	cf03      	ldmia	r7!, {r0, r1}
24003ac2:	9703      	str	r7, [sp, #12]
24003ac4:	f843 000c 	str.w	r0, [r3, ip]
24003ac8:	9803      	ldr	r0, [sp, #12]
24003aca:	f8ce 1004 	str.w	r1, [lr, #4]
24003ace:	8801      	ldrh	r1, [r0, #0]
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003ad0:	4877      	ldr	r0, [pc, #476]	; (24003cb0 <main+0xce8>)
			strcat(finalString2, "pluck.bin");
24003ad2:	f8ae 1008 	strh.w	r1, [lr, #8]
			res = f_findfirst(&dir, &fno, SDPath, finalString2);
24003ad6:	4977      	ldr	r1, [pc, #476]	; (24003cb4 <main+0xcec>)
24003ad8:	f00c f800 	bl	2400fadc <f_findfirst>
			if(res == FR_OK)
24003adc:	2800      	cmp	r0, #0
24003ade:	f47f aef0 	bne.w	240038c2 <main+0x8fa>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003ae2:	2211      	movs	r2, #17
24003ae4:	4975      	ldr	r1, [pc, #468]	; (24003cbc <main+0xcf4>)
24003ae6:	4876      	ldr	r0, [pc, #472]	; (24003cc0 <main+0xcf8>)
24003ae8:	f00b fb08 	bl	2400f0fc <f_open>
24003aec:	4607      	mov	r7, r0
24003aee:	2800      	cmp	r0, #0
24003af0:	f47f aee7 	bne.w	240038c2 <main+0x8fa>
					brainFirmwareSize = f_size(&SDFile);
24003af4:	4b72      	ldr	r3, [pc, #456]	; (24003cc0 <main+0xcf8>)
24003af6:	4a73      	ldr	r2, [pc, #460]	; (24003cc4 <main+0xcfc>)
24003af8:	68db      	ldr	r3, [r3, #12]
					f_read(&SDFile, &pluckFirmwareBuffer, pluckFirmwareSize, &bytesRead);
24003afa:	4973      	ldr	r1, [pc, #460]	; (24003cc8 <main+0xd00>)
					brainFirmwareSize = f_size(&SDFile);
24003afc:	6013      	str	r3, [r2, #0]
					f_read(&SDFile, &pluckFirmwareBuffer, pluckFirmwareSize, &bytesRead);
24003afe:	ab06      	add	r3, sp, #24
24003b00:	4a72      	ldr	r2, [pc, #456]	; (24003ccc <main+0xd04>)
24003b02:	486f      	ldr	r0, [pc, #444]	; (24003cc0 <main+0xcf8>)
24003b04:	6812      	ldr	r2, [r2, #0]
24003b06:	f00b fc77 	bl	2400f3f8 <f_read>
					f_close(&SDFile);
24003b0a:	486d      	ldr	r0, [pc, #436]	; (24003cc0 <main+0xcf8>)
24003b0c:	f00b fedc 	bl	2400f8c8 <f_close>
					pluckFirmwareBufferIndex = 0;
24003b10:	4b6f      	ldr	r3, [pc, #444]	; (24003cd0 <main+0xd08>)
					foundPluckFirmware = 1;
24003b12:	4a70      	ldr	r2, [pc, #448]	; (24003cd4 <main+0xd0c>)
					pluckFirmwareBufferIndex = 0;
24003b14:	601f      	str	r7, [r3, #0]
					foundPluckFirmware = 1;
24003b16:	2301      	movs	r3, #1
24003b18:	7013      	strb	r3, [r2, #0]
					pluckFirmwareBufferIndex = 0;
24003b1a:	e6d2      	b.n	240038c2 <main+0x8fa>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003b1c:	2211      	movs	r2, #17
24003b1e:	4967      	ldr	r1, [pc, #412]	; (24003cbc <main+0xcf4>)
24003b20:	4867      	ldr	r0, [pc, #412]	; (24003cc0 <main+0xcf8>)
24003b22:	f00b faeb 	bl	2400f0fc <f_open>
24003b26:	2800      	cmp	r0, #0
24003b28:	d1c0      	bne.n	24003aac <main+0xae4>
				    brainFirmwareSize = f_size(&SDFile);
24003b2a:	4b65      	ldr	r3, [pc, #404]	; (24003cc0 <main+0xcf8>)
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003b2c:	496a      	ldr	r1, [pc, #424]	; (24003cd8 <main+0xd10>)
				    brainFirmwareSize = f_size(&SDFile);
24003b2e:	68da      	ldr	r2, [r3, #12]
24003b30:	4b64      	ldr	r3, [pc, #400]	; (24003cc4 <main+0xcfc>)
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003b32:	4863      	ldr	r0, [pc, #396]	; (24003cc0 <main+0xcf8>)
				    brainFirmwareSize = f_size(&SDFile);
24003b34:	601a      	str	r2, [r3, #0]
					f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003b36:	ab06      	add	r3, sp, #24
24003b38:	f00b fc5e 	bl	2400f3f8 <f_read>
					f_close(&SDFile);
24003b3c:	4860      	ldr	r0, [pc, #384]	; (24003cc0 <main+0xcf8>)
24003b3e:	f00b fec3 	bl	2400f8c8 <f_close>
					for (int i = 0; i< 700; i++)
24003b42:	4b66      	ldr	r3, [pc, #408]	; (24003cdc <main+0xd14>)
24003b44:	1c5a      	adds	r2, r3, #1
24003b46:	f1c2 0001 	rsb	r0, r2, #1
24003b4a:	18c2      	adds	r2, r0, r3
						memoryTest[i] = brainFirmwareBuffer[i];
24003b4c:	4f64      	ldr	r7, [pc, #400]	; (24003ce0 <main+0xd18>)
24003b4e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003b52:	54b9      	strb	r1, [r7, r2]
					for (int i = 0; i< 700; i++)
24003b54:	4a63      	ldr	r2, [pc, #396]	; (24003ce4 <main+0xd1c>)
24003b56:	4293      	cmp	r3, r2
24003b58:	d1f7      	bne.n	24003b4a <main+0xb82>
					foundBrainFirmware = 1;
24003b5a:	2301      	movs	r3, #1
24003b5c:	4a62      	ldr	r2, [pc, #392]	; (24003ce8 <main+0xd20>)
24003b5e:	7013      	strb	r3, [r2, #0]
					brainFirmwareBufferIndex = 0;
24003b60:	2300      	movs	r3, #0
24003b62:	4a62      	ldr	r2, [pc, #392]	; (24003cec <main+0xd24>)
24003b64:	6013      	str	r3, [r2, #0]
24003b66:	e7a1      	b.n	24003aac <main+0xae4>
					finalString[2] = charBuf[1];
24003b68:	f89d 301d 	ldrb.w	r3, [sp, #29]
					strcat(finalString, ".ebp");
24003b6c:	a80a      	add	r0, sp, #40	; 0x28
					finalString[2] = charBuf[1];
24003b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
					finalString[1] = charBuf[0];
24003b72:	f89d 301c 	ldrb.w	r3, [sp, #28]
24003b76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					finalString[0] = '0';
24003b7a:	2330      	movs	r3, #48	; 0x30
24003b7c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					strcat(finalString, ".ebp");
24003b80:	f7fc fbaa 	bl	240002d8 <strlen>
24003b84:	4a5a      	ldr	r2, [pc, #360]	; (24003cf0 <main+0xd28>)
24003b86:	4603      	mov	r3, r0
24003b88:	a90a      	add	r1, sp, #40	; 0x28
24003b8a:	6810      	ldr	r0, [r2, #0]
24003b8c:	7912      	ldrb	r2, [r2, #4]
24003b8e:	50c8      	str	r0, [r1, r3]
24003b90:	440b      	add	r3, r1
24003b92:	711a      	strb	r2, [r3, #4]
24003b94:	e6d1      	b.n	2400393a <main+0x972>
			itoa(numberToLoad, charBuf, 10);
24003b96:	220a      	movs	r2, #10
24003b98:	a907      	add	r1, sp, #28
24003b9a:	9803      	ldr	r0, [sp, #12]
24003b9c:	f011 fc90 	bl	240154c0 <itoa>
			int len = ((strlen(charBuf)));
24003ba0:	a807      	add	r0, sp, #28
24003ba2:	f7fc fb99 	bl	240002d8 <strlen>
			if (len == 1)
24003ba6:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24003ba8:	4602      	mov	r2, r0
			if (len == 1)
24003baa:	d046      	beq.n	24003c3a <main+0xc72>
				strcat(charBuf, "*.ebp");
24003bac:	4951      	ldr	r1, [pc, #324]	; (24003cf4 <main+0xd2c>)
24003bae:	ab07      	add	r3, sp, #28
24003bb0:	6808      	ldr	r0, [r1, #0]
24003bb2:	8889      	ldrh	r1, [r1, #4]
24003bb4:	5098      	str	r0, [r3, r2]
24003bb6:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003bb8:	a80a      	add	r0, sp, #40	; 0x28
24003bba:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
24003bbc:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003bbe:	a907      	add	r1, sp, #28
24003bc0:	f011 fc80 	bl	240154c4 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003bc4:	ab0a      	add	r3, sp, #40	; 0x28
24003bc6:	4a39      	ldr	r2, [pc, #228]	; (24003cac <main+0xce4>)
24003bc8:	493a      	ldr	r1, [pc, #232]	; (24003cb4 <main+0xcec>)
24003bca:	4839      	ldr	r0, [pc, #228]	; (24003cb0 <main+0xce8>)
24003bcc:	f00b ff86 	bl	2400fadc <f_findfirst>
			if(res == FR_OK)
24003bd0:	2800      	cmp	r0, #0
24003bd2:	f47f af09 	bne.w	240039e8 <main+0xa20>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003bd6:	2211      	movs	r2, #17
24003bd8:	4938      	ldr	r1, [pc, #224]	; (24003cbc <main+0xcf4>)
24003bda:	4839      	ldr	r0, [pc, #228]	; (24003cc0 <main+0xcf8>)
24003bdc:	f00b fa8e 	bl	2400f0fc <f_open>
24003be0:	4607      	mov	r7, r0
24003be2:	2800      	cmp	r0, #0
24003be4:	f47f af00 	bne.w	240039e8 <main+0xa20>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003be8:	4a35      	ldr	r2, [pc, #212]	; (24003cc0 <main+0xcf8>)
24003bea:	ab06      	add	r3, sp, #24
24003bec:	4942      	ldr	r1, [pc, #264]	; (24003cf8 <main+0xd30>)
24003bee:	68d2      	ldr	r2, [r2, #12]
24003bf0:	4833      	ldr	r0, [pc, #204]	; (24003cc0 <main+0xcf8>)
24003bf2:	f00b fc01 	bl	2400f3f8 <f_read>
					presetWaitingToParse = bytesRead;
24003bf6:	9b06      	ldr	r3, [sp, #24]
					f_close(&SDFile);
24003bf8:	4831      	ldr	r0, [pc, #196]	; (24003cc0 <main+0xcf8>)
					presetWaitingToParse = bytesRead;
24003bfa:	f8c8 3000 	str.w	r3, [r8]
					f_close(&SDFile);
24003bfe:	f00b fe63 	bl	2400f8c8 <f_close>
	  	  i2cSending = 1;
24003c02:	2301      	movs	r3, #1
24003c04:	4a3d      	ldr	r2, [pc, #244]	; (24003cfc <main+0xd34>)
24003c06:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003c08:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003c0a:	f242 7310 	movw	r3, #10000	; 0x2710
24003c0e:	4a3a      	ldr	r2, [pc, #232]	; (24003cf8 <main+0xd30>)
24003c10:	2144      	movs	r1, #68	; 0x44
24003c12:	483b      	ldr	r0, [pc, #236]	; (24003d00 <main+0xd38>)
24003c14:	9300      	str	r3, [sp, #0]
24003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003c1a:	f002 fced 	bl	240065f8 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003c1e:	b662      	cpsie	i
	  	i2cSending = 0;
24003c20:	4a36      	ldr	r2, [pc, #216]	; (24003cfc <main+0xd34>)
24003c22:	7017      	strb	r7, [r2, #0]
24003c24:	e6e3      	b.n	240039ee <main+0xa26>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24003c26:	463a      	mov	r2, r7
24003c28:	ab06      	add	r3, sp, #24
24003c2a:	4933      	ldr	r1, [pc, #204]	; (24003cf8 <main+0xd30>)
24003c2c:	4824      	ldr	r0, [pc, #144]	; (24003cc0 <main+0xcf8>)
24003c2e:	f00b fd09 	bl	2400f644 <f_write>
					f_close(&SDFile);
24003c32:	4823      	ldr	r0, [pc, #140]	; (24003cc0 <main+0xcf8>)
24003c34:	f00b fe48 	bl	2400f8c8 <f_close>
24003c38:	e687      	b.n	2400394a <main+0x982>
				finalString[2] = charBuf[1];
24003c3a:	f89d 301d 	ldrb.w	r3, [sp, #29]
				strcat(finalString, "*.ebp");
24003c3e:	a80a      	add	r0, sp, #40	; 0x28
				finalString[2] = charBuf[1];
24003c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				finalString[1] = charBuf[0];
24003c44:	f89d 301c 	ldrb.w	r3, [sp, #28]
24003c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				finalString[0] = '0';
24003c4c:	2330      	movs	r3, #48	; 0x30
24003c4e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				strcat(finalString, "*.ebp");
24003c52:	f7fc fb41 	bl	240002d8 <strlen>
24003c56:	4a27      	ldr	r2, [pc, #156]	; (24003cf4 <main+0xd2c>)
24003c58:	4603      	mov	r3, r0
24003c5a:	a90a      	add	r1, sp, #40	; 0x28
24003c5c:	6810      	ldr	r0, [r2, #0]
24003c5e:	8892      	ldrh	r2, [r2, #4]
24003c60:	50c8      	str	r0, [r1, r3]
24003c62:	440b      	add	r3, r1
24003c64:	809a      	strh	r2, [r3, #4]
24003c66:	e7ad      	b.n	24003bc4 <main+0xbfc>
	  getPresetNamesFromSDCard();
24003c68:	f7fe fb46 	bl	240022f8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
24003c6c:	f7ff bb35 	b.w	240032da <main+0x312>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003c74:	4920      	ldr	r1, [pc, #128]	; (24003cf8 <main+0xd30>)
24003c76:	4822      	ldr	r0, [pc, #136]	; (24003d00 <main+0xd38>)
24003c78:	f002 fe8a 	bl	24006990 <HAL_I2C_Slave_Receive_IT>
24003c7c:	f7ff baaa 	b.w	240031d4 <main+0x20c>
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003c84:	2301      	movs	r3, #1
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003c86:	a90a      	add	r1, sp, #40	; 0x28
24003c88:	481e      	ldr	r0, [pc, #120]	; (24003d04 <main+0xd3c>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003c8a:	940e      	str	r4, [sp, #56]	; 0x38
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003c8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003c90:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003c94:	f002 fa32 	bl	240060fc <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003c98:	4622      	mov	r2, r4
24003c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24003c9e:	4819      	ldr	r0, [pc, #100]	; (24003d04 <main+0xd3c>)
24003ca0:	f002 fb7c 	bl	2400639c <HAL_GPIO_WritePin>
24003ca4:	f7ff ba8d 	b.w	240031c2 <main+0x1fa>
24003ca8:	24017f90 	.word	0x24017f90
24003cac:	2001d8f0 	.word	0x2001d8f0
24003cb0:	20014b28 	.word	0x20014b28
24003cb4:	20016bcc 	.word	0x20016bcc
24003cb8:	24017f9c 	.word	0x24017f9c
24003cbc:	20016be2 	.word	0x20016be2
24003cc0:	2001d6c4 	.word	0x2001d6c4
24003cc4:	20014b20 	.word	0x20014b20
24003cc8:	c3c00000 	.word	0xc3c00000
24003ccc:	2001aa90 	.word	0x2001aa90
24003cd0:	2001aa8c 	.word	0x2001aa8c
24003cd4:	20016ce5 	.word	0x20016ce5
24003cd8:	c3e00000 	.word	0xc3e00000
24003cdc:	c3dfffff 	.word	0xc3dfffff
24003ce0:	200196a0 	.word	0x200196a0
24003ce4:	c3e002bb 	.word	0xc3e002bb
24003ce8:	20016ce4 	.word	0x20016ce4
24003cec:	20014b18 	.word	0x20014b18
24003cf0:	24017f88 	.word	0x24017f88
24003cf4:	24017e50 	.word	0x24017e50
24003cf8:	300001c0 	.word	0x300001c0
24003cfc:	20016ce7 	.word	0x20016ce7
24003d00:	20014a6c 	.word	0x20014a6c
24003d04:	58020400 	.word	0x58020400

24003d08 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003d08:	2840      	cmp	r0, #64	; 0x40
24003d0a:	d000      	beq.n	24003d0e <HAL_GPIO_EXTI_Callback+0x6>
24003d0c:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003d0e:	4601      	mov	r1, r0
24003d10:	4804      	ldr	r0, [pc, #16]	; (24003d24 <HAL_GPIO_EXTI_Callback+0x1c>)
{
24003d12:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003d14:	f002 fb3c 	bl	24006390 <HAL_GPIO_ReadPin>
24003d18:	b910      	cbnz	r0, 24003d20 <HAL_GPIO_EXTI_Callback+0x18>
    	firmwareUpdateRequested = 1;
24003d1a:	4b03      	ldr	r3, [pc, #12]	; (24003d28 <HAL_GPIO_EXTI_Callback+0x20>)
24003d1c:	2201      	movs	r2, #1
24003d1e:	701a      	strb	r2, [r3, #0]
}
24003d20:	bd08      	pop	{r3, pc}
24003d22:	bf00      	nop
24003d24:	58020400 	.word	0x58020400
24003d28:	20016bc8 	.word	0x20016bc8

24003d2c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24003d2c:	4770      	bx	lr
24003d2e:	bf00      	nop

24003d30 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003d30:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003d32:	4806      	ldr	r0, [pc, #24]	; (24003d4c <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003d34:	2300      	movs	r3, #0
24003d36:	4a06      	ldr	r2, [pc, #24]	; (24003d50 <MX_RNG_Init+0x20>)
24003d38:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24003d3c:	f005 faf2 	bl	24009324 <HAL_RNG_Init>
24003d40:	b900      	cbnz	r0, 24003d44 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003d42:	bd08      	pop	{r3, pc}
24003d44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003d48:	f7ff bff0 	b.w	24003d2c <Error_Handler>
24003d4c:	2001cf34 	.word	0x2001cf34
24003d50:	48021800 	.word	0x48021800

24003d54 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003d54:	b510      	push	{r4, lr}
24003d56:	b0b2      	sub	sp, #200	; 0xc8
24003d58:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003d5a:	22c0      	movs	r2, #192	; 0xc0
24003d5c:	2100      	movs	r1, #0
24003d5e:	a802      	add	r0, sp, #8
24003d60:	f011 fbbe 	bl	240154e0 <memset>
  if(rngHandle->Instance==RNG)
24003d64:	4b10      	ldr	r3, [pc, #64]	; (24003da8 <HAL_RNG_MspInit+0x54>)
24003d66:	6822      	ldr	r2, [r4, #0]
24003d68:	429a      	cmp	r2, r3
24003d6a:	d001      	beq.n	24003d70 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003d6c:	b032      	add	sp, #200	; 0xc8
24003d6e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003d70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24003d74:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003d76:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003d7c:	f004 f8ec 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
24003d80:	b970      	cbnz	r0, 24003da0 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
24003d82:	4b0a      	ldr	r3, [pc, #40]	; (24003dac <HAL_RNG_MspInit+0x58>)
24003d84:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003d8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003d90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003d98:	9301      	str	r3, [sp, #4]
24003d9a:	9b01      	ldr	r3, [sp, #4]
}
24003d9c:	b032      	add	sp, #200	; 0xc8
24003d9e:	bd10      	pop	{r4, pc}
      Error_Handler();
24003da0:	f7ff ffc4 	bl	24003d2c <Error_Handler>
24003da4:	e7ed      	b.n	24003d82 <HAL_RNG_MspInit+0x2e>
24003da6:	bf00      	nop
24003da8:	48021800 	.word	0x48021800
24003dac:	58024400 	.word	0x58024400

24003db0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24003db0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003db2:	4817      	ldr	r0, [pc, #92]	; (24003e10 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003db4:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24003db6:	4c17      	ldr	r4, [pc, #92]	; (24003e14 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003db8:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003dba:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003dbc:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24003dbe:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003dc0:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003dc4:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003dc6:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003dc8:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003dcc:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003dd0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003dd4:	461a      	mov	r2, r3
24003dd6:	f005 fcf7 	bl	240097c8 <HAL_SAI_InitProtocol>
24003dda:	b990      	cbnz	r0, 24003e02 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24003ddc:	480e      	ldr	r0, [pc, #56]	; (24003e18 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003dde:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003de0:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003de2:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003de4:	4c0d      	ldr	r4, [pc, #52]	; (24003e1c <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003de6:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003de8:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003dea:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24003dec:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24003dee:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003df0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003df4:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003df6:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003dfa:	f005 fce5 	bl	240097c8 <HAL_SAI_InitProtocol>
24003dfe:	b918      	cbnz	r0, 24003e08 <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003e00:	bd10      	pop	{r4, pc}
    Error_Handler();
24003e02:	f7ff ff93 	bl	24003d2c <Error_Handler>
24003e06:	e7e9      	b.n	24003ddc <MX_SAI1_Init+0x2c>
}
24003e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003e0c:	f7ff bf8e 	b.w	24003d2c <Error_Handler>
24003e10:	2001d03c 	.word	0x2001d03c
24003e14:	40015804 	.word	0x40015804
24003e18:	2001d0d4 	.word	0x2001d0d4
24003e1c:	40015824 	.word	0x40015824

24003e20 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24003e20:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003e22:	4a5f      	ldr	r2, [pc, #380]	; (24003fa0 <HAL_SAI_MspInit+0x180>)
{
24003e24:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
24003e26:	6803      	ldr	r3, [r0, #0]
{
24003e28:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
24003e2a:	4293      	cmp	r3, r2
24003e2c:	d004      	beq.n	24003e38 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24003e2e:	4a5d      	ldr	r2, [pc, #372]	; (24003fa4 <HAL_SAI_MspInit+0x184>)
24003e30:	4293      	cmp	r3, r2
24003e32:	d04f      	beq.n	24003ed4 <HAL_SAI_MspInit+0xb4>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003e34:	b00d      	add	sp, #52	; 0x34
24003e36:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
24003e38:	4b5b      	ldr	r3, [pc, #364]	; (24003fa8 <HAL_SAI_MspInit+0x188>)
24003e3a:	681a      	ldr	r2, [r3, #0]
24003e3c:	2a00      	cmp	r2, #0
24003e3e:	f000 8093 	beq.w	24003f68 <HAL_SAI_MspInit+0x148>
    SAI1_client ++;
24003e42:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003e44:	2074      	movs	r0, #116	; 0x74
24003e46:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
24003e48:	4d58      	ldr	r5, [pc, #352]	; (24003fac <HAL_SAI_MspInit+0x18c>)
    SAI1_client ++;
24003e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003e4c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003e4e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 24003f98 <HAL_SAI_MspInit+0x178>
24003e52:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e56:	a906      	add	r1, sp, #24
24003e58:	4855      	ldr	r0, [pc, #340]	; (24003fb0 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003e5a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003e5c:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003e60:	f002 f94c 	bl	240060fc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24003e64:	4953      	ldr	r1, [pc, #332]	; (24003fb4 <HAL_SAI_MspInit+0x194>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003e66:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003e68:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003e6a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003e6c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003e6e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003e7a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24003e86:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003e8a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003e8e:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003e92:	2304      	movs	r3, #4
24003e94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24003e98:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003e9c:	f000 fe06 	bl	24004aac <HAL_DMA_Init>
24003ea0:	2800      	cmp	r0, #0
24003ea2:	d175      	bne.n	24003f90 <HAL_SAI_MspInit+0x170>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003ea4:	2006      	movs	r0, #6
24003ea6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24003eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
24003eae:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003eb4:	a902      	add	r1, sp, #8
24003eb6:	483d      	ldr	r0, [pc, #244]	; (24003fac <HAL_SAI_MspInit+0x18c>)
    pSyncConfig.SyncEnable = DISABLE;
24003eb8:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
24003ebc:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003ebe:	f002 f8b3 	bl	24006028 <HAL_DMAEx_ConfigMuxSync>
24003ec2:	2800      	cmp	r0, #0
24003ec4:	d161      	bne.n	24003f8a <HAL_SAI_MspInit+0x16a>
    if(saiHandle->Instance==SAI1_Block_B)
24003ec6:	4a37      	ldr	r2, [pc, #220]	; (24003fa4 <HAL_SAI_MspInit+0x184>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24003ec8:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24003eca:	6823      	ldr	r3, [r4, #0]
24003ecc:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003ece:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24003ed2:	d1af      	bne.n	24003e34 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24003ed4:	4b34      	ldr	r3, [pc, #208]	; (24003fa8 <HAL_SAI_MspInit+0x188>)
24003ed6:	681a      	ldr	r2, [r3, #0]
24003ed8:	2a00      	cmp	r2, #0
24003eda:	d037      	beq.n	24003f4c <HAL_SAI_MspInit+0x12c>
    SAI1_client ++;
24003edc:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003ede:	2008      	movs	r0, #8
24003ee0:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
24003ee2:	4d35      	ldr	r5, [pc, #212]	; (24003fb8 <HAL_SAI_MspInit+0x198>)
    SAI1_client ++;
24003ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003ee6:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003ee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24003f98 <HAL_SAI_MspInit+0x178>
24003eec:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003ef0:	a906      	add	r1, sp, #24
24003ef2:	482f      	ldr	r0, [pc, #188]	; (24003fb0 <HAL_SAI_MspInit+0x190>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003ef4:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003ef6:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003efa:	f002 f8ff 	bl	240060fc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24003efe:	492f      	ldr	r1, [pc, #188]	; (24003fbc <HAL_SAI_MspInit+0x19c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003f00:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003f02:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003f04:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003f06:	60eb      	str	r3, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003f08:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003f0a:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003f12:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003f14:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003f18:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003f1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003f22:	60a9      	str	r1, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003f24:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003f28:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
24003f30:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003f34:	2304      	movs	r3, #4
24003f36:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003f38:	f000 fdb8 	bl	24004aac <HAL_DMA_Init>
24003f3c:	bb10      	cbnz	r0, 24003f84 <HAL_SAI_MspInit+0x164>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003f3e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24003f42:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24003f44:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24003f48:	b00d      	add	sp, #52	; 0x34
24003f4a:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24003f4c:	491c      	ldr	r1, [pc, #112]	; (24003fc0 <HAL_SAI_MspInit+0x1a0>)
24003f4e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003f52:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003f56:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003f5a:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003f5e:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003f62:	9101      	str	r1, [sp, #4]
24003f64:	9901      	ldr	r1, [sp, #4]
24003f66:	e7b9      	b.n	24003edc <HAL_SAI_MspInit+0xbc>
       __HAL_RCC_SAI1_CLK_ENABLE();
24003f68:	4915      	ldr	r1, [pc, #84]	; (24003fc0 <HAL_SAI_MspInit+0x1a0>)
24003f6a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003f6e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003f72:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003f76:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003f7a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003f7e:	9100      	str	r1, [sp, #0]
24003f80:	9900      	ldr	r1, [sp, #0]
24003f82:	e75e      	b.n	24003e42 <HAL_SAI_MspInit+0x22>
      Error_Handler();
24003f84:	f7ff fed2 	bl	24003d2c <Error_Handler>
24003f88:	e7d9      	b.n	24003f3e <HAL_SAI_MspInit+0x11e>
      Error_Handler();
24003f8a:	f7ff fecf 	bl	24003d2c <Error_Handler>
24003f8e:	e79a      	b.n	24003ec6 <HAL_SAI_MspInit+0xa6>
      Error_Handler();
24003f90:	f7ff fecc 	bl	24003d2c <Error_Handler>
24003f94:	e786      	b.n	24003ea4 <HAL_SAI_MspInit+0x84>
24003f96:	bf00      	nop
24003f98:	00000000 	.word	0x00000000
24003f9c:	00000002 	.word	0x00000002
24003fa0:	40015804 	.word	0x40015804
24003fa4:	40015824 	.word	0x40015824
24003fa8:	2001cf48 	.word	0x2001cf48
24003fac:	2001cf4c 	.word	0x2001cf4c
24003fb0:	58021000 	.word	0x58021000
24003fb4:	40020028 	.word	0x40020028
24003fb8:	2001cfc4 	.word	0x2001cfc4
24003fbc:	40020040 	.word	0x40020040
24003fc0:	58024400 	.word	0x58024400

24003fc4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24003fc4:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24003fc6:	4b07      	ldr	r3, [pc, #28]	; (24003fe4 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24003fc8:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
24003fca:	4c07      	ldr	r4, [pc, #28]	; (24003fe8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003fcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24003fd0:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24003fd2:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24003fd6:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
24003fda:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24003fde:	f85d 4b04 	ldr.w	r4, [sp], #4
24003fe2:	4770      	bx	lr
24003fe4:	2001d16c 	.word	0x2001d16c
24003fe8:	52007000 	.word	0x52007000

24003fec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
24003fec:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
24003fee:	4a27      	ldr	r2, [pc, #156]	; (2400408c <HAL_SD_MspInit+0xa0>)
{
24003ff0:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
24003ff2:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003ff4:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
24003ff6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003ff8:	9308      	str	r3, [sp, #32]
24003ffa:	e9cd 3304 	strd	r3, r3, [sp, #16]
24003ffe:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24004002:	d001      	beq.n	24004008 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24004004:	b00a      	add	sp, #40	; 0x28
24004006:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004008:	4b21      	ldr	r3, [pc, #132]	; (24004090 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400400a:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
2400400e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004010:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004012:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24004016:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400401a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
2400401e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24004022:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
24004026:	9201      	str	r2, [sp, #4]
24004028:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
2400402a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400402e:	f042 0204 	orr.w	r2, r2, #4
24004032:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24004036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400403a:	f002 0204 	and.w	r2, r2, #4
2400403e:	9202      	str	r2, [sp, #8]
24004040:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004042:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004046:	f042 0208 	orr.w	r2, r2, #8
2400404a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400404e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24004054:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004056:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400405a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400405c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004060:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004062:	a904      	add	r1, sp, #16
24004064:	480b      	ldr	r0, [pc, #44]	; (24004094 <HAL_SD_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
24004066:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004068:	f002 f848 	bl	240060fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400406c:	2204      	movs	r2, #4
2400406e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004070:	a904      	add	r1, sp, #16
24004072:	4809      	ldr	r0, [pc, #36]	; (24004098 <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004074:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24004076:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400407a:	2200      	movs	r2, #0
2400407c:	2302      	movs	r3, #2
2400407e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24004082:	f002 f83b 	bl	240060fc <HAL_GPIO_Init>
}
24004086:	b00a      	add	sp, #40	; 0x28
24004088:	bd10      	pop	{r4, pc}
2400408a:	bf00      	nop
2400408c:	52007000 	.word	0x52007000
24004090:	58024400 	.word	0x58024400
24004094:	58020800 	.word	0x58020800
24004098:	58020c00 	.word	0x58020c00
2400409c:	00000000 	.word	0x00000000

240040a0 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
240040a0:	4813      	ldr	r0, [pc, #76]	; (240040f0 <MX_SPI1_Init+0x50>)
240040a2:	4a14      	ldr	r2, [pc, #80]	; (240040f4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240040a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240040e8 <MX_SPI1_Init+0x48>
{
240040a8:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
240040aa:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
240040ac:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240040ae:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
240040b0:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240040b2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240040b4:	ed80 7b08 	vstr	d7, [r0, #32]
240040b8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
240040bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
240040c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240040c4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240040c8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240040cc:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240040d0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240040d4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
240040d8:	f006 fd74 	bl	2400abc4 <HAL_SPI_Init>
240040dc:	b900      	cbnz	r0, 240040e0 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
240040de:	bd08      	pop	{r3, pc}
240040e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240040e4:	f7ff be22 	b.w	24003d2c <Error_Handler>
	...
240040f0:	2001d350 	.word	0x2001d350
240040f4:	40013000 	.word	0x40013000

240040f8 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
240040f8:	4815      	ldr	r0, [pc, #84]	; (24004150 <MX_SPI6_Init+0x58>)
240040fa:	4a16      	ldr	r2, [pc, #88]	; (24004154 <MX_SPI6_Init+0x5c>)
{
240040fc:	b508      	push	{r3, lr}
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
240040fe:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24004148 <MX_SPI6_Init+0x50>
  hspi6.Instance = SPI6;
24004102:	6002      	str	r2, [r0, #0]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
24004104:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi6.Init.Mode = SPI_MODE_SLAVE;
24004108:	2300      	movs	r3, #0
  hspi6.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
2400410a:	6082      	str	r2, [r0, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
2400410c:	2207      	movs	r2, #7
  hspi6.Init.Mode = SPI_MODE_SLAVE;
2400410e:	6043      	str	r3, [r0, #4]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
24004110:	6103      	str	r3, [r0, #16]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24004112:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004114:	ed80 7b08 	vstr	d7, [r0, #32]
24004118:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
2400411c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004120:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004124:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24004128:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
2400412c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004130:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24004134:	f006 fd46 	bl	2400abc4 <HAL_SPI_Init>
24004138:	b900      	cbnz	r0, 2400413c <MX_SPI6_Init+0x44>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
2400413a:	bd08      	pop	{r3, pc}
2400413c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24004140:	f7ff bdf4 	b.w	24003d2c <Error_Handler>
24004144:	f3af 8000 	nop.w
	...
24004150:	2001d3f0 	.word	0x2001d3f0
24004154:	58001400 	.word	0x58001400

24004158 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24004158:	b5f0      	push	{r4, r5, r6, r7, lr}
2400415a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400415c:	2100      	movs	r1, #0
{
2400415e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24004160:	22c0      	movs	r2, #192	; 0xc0
24004162:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004164:	910a      	str	r1, [sp, #40]	; 0x28
24004166:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400416a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400416e:	f011 f9b7 	bl	240154e0 <memset>
  if(spiHandle->Instance==SPI1)
24004172:	6823      	ldr	r3, [r4, #0]
24004174:	4a80      	ldr	r2, [pc, #512]	; (24004378 <HAL_SPI_MspInit+0x220>)
24004176:	4293      	cmp	r3, r2
24004178:	d005      	beq.n	24004186 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
2400417a:	4a80      	ldr	r2, [pc, #512]	; (2400437c <HAL_SPI_MspInit+0x224>)
2400417c:	4293      	cmp	r3, r2
2400417e:	f000 8097 	beq.w	240042b0 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24004182:	b03d      	add	sp, #244	; 0xf4
24004184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24004186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400418a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400418c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400418e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004192:	f003 fee1 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
24004196:	2800      	cmp	r0, #0
24004198:	f040 80e4 	bne.w	24004364 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI1_CLK_ENABLE();
2400419c:	4b78      	ldr	r3, [pc, #480]	; (24004380 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400419e:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240041a0:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240041a2:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
240041a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240041a8:	4876      	ldr	r0, [pc, #472]	; (24004384 <HAL_SPI_MspInit+0x22c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
240041aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240041ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
240041b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
240041b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
240041ba:	9201      	str	r2, [sp, #4]
240041bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240041be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240041c2:	f042 0202 	orr.w	r2, r2, #2
240041c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240041ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240041ce:	f002 0202 	and.w	r2, r2, #2
240041d2:	9202      	str	r2, [sp, #8]
240041d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
240041d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240041da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240041de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240041e2:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
240041e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240041e8:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
240041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
240041ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240041f0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
240041f2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240041f4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240041f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
240041fa:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240041fe:	f001 ff7d 	bl	240060fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004202:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24004206:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004208:	a906      	add	r1, sp, #24
2400420a:	485f      	ldr	r0, [pc, #380]	; (24004388 <HAL_SPI_MspInit+0x230>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400420c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400420e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004212:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004216:	f001 ff71 	bl	240060fc <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400421a:	4e5c      	ldr	r6, [pc, #368]	; (2400438c <HAL_SPI_MspInit+0x234>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400421c:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400421e:	495c      	ldr	r1, [pc, #368]	; (24004390 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004220:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24004222:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004224:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004228:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400422c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004230:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004234:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004238:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400423c:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400423e:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24004240:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004244:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24004246:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400424a:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
2400424c:	f000 fc2e 	bl	24004aac <HAL_DMA_Init>
24004250:	2800      	cmp	r0, #0
24004252:	f040 8084 	bne.w	2400435e <HAL_SPI_MspInit+0x206>
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004256:	4d4f      	ldr	r5, [pc, #316]	; (24004394 <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24004258:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400425a:	494f      	ldr	r1, [pc, #316]	; (24004398 <HAL_SPI_MspInit+0x240>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400425c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400425e:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004260:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24004264:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004266:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24004268:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400426a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400426e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004270:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24004272:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24004274:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24004276:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400427a:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400427c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400427e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004280:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004282:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24004284:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24004286:	67e6      	str	r6, [r4, #124]	; 0x7c
24004288:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400428a:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400428c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24004290:	f000 fc0c 	bl	24004aac <HAL_DMA_Init>
24004294:	2800      	cmp	r0, #0
24004296:	d15f      	bne.n	24004358 <HAL_SPI_MspInit+0x200>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004298:	2200      	movs	r2, #0
2400429a:	2101      	movs	r1, #1
2400429c:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
2400429e:	67a5      	str	r5, [r4, #120]	; 0x78
240042a0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240042a2:	f000 fa6d 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
240042a6:	2023      	movs	r0, #35	; 0x23
240042a8:	f000 faa8 	bl	240047fc <HAL_NVIC_EnableIRQ>
}
240042ac:	b03d      	add	sp, #244	; 0xf4
240042ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240042b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240042b4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240042b6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240042b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240042bc:	f003 fe4c 	bl	24007f58 <HAL_RCCEx_PeriphCLKConfig>
240042c0:	2800      	cmp	r0, #0
240042c2:	d152      	bne.n	2400436a <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI6_CLK_ENABLE();
240042c4:	4b2e      	ldr	r3, [pc, #184]	; (24004380 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240042c6:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240042c8:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI6_CLK_ENABLE();
240042ca:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240042ce:	f042 0220 	orr.w	r2, r2, #32
240042d2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
240042d6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240042da:	f002 0220 	and.w	r2, r2, #32
240042de:	9204      	str	r2, [sp, #16]
240042e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240042e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240042e6:	f042 0201 	orr.w	r2, r2, #1
240042ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240042ee:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
240042f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240042f4:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
240042f6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240042fa:	4828      	ldr	r0, [pc, #160]	; (2400439c <HAL_SPI_MspInit+0x244>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
240042fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
240042fe:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004300:	9d05      	ldr	r5, [sp, #20]
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004302:	4d27      	ldr	r5, [pc, #156]	; (240043a0 <HAL_SPI_MspInit+0x248>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
24004304:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004308:	2200      	movs	r2, #0
2400430a:	2302      	movs	r3, #2
2400430c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004310:	f001 fef4 	bl	240060fc <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24004314:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004316:	4923      	ldr	r1, [pc, #140]	; (240043a4 <HAL_SPI_MspInit+0x24c>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24004318:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400431a:	4628      	mov	r0, r5
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
2400431c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24004320:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004324:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
24004328:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400432c:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004330:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004334:	6129      	str	r1, [r5, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004336:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400433a:	f000 fbb7 	bl	24004aac <HAL_DMA_Init>
2400433e:	b9b8      	cbnz	r0, 24004370 <HAL_SPI_MspInit+0x218>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
24004340:	2200      	movs	r2, #0
24004342:	2107      	movs	r1, #7
24004344:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24004346:	67e5      	str	r5, [r4, #124]	; 0x7c
24004348:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
2400434a:	f000 fa19 	bl	24004780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
2400434e:	2056      	movs	r0, #86	; 0x56
24004350:	f000 fa54 	bl	240047fc <HAL_NVIC_EnableIRQ>
}
24004354:	b03d      	add	sp, #244	; 0xf4
24004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24004358:	f7ff fce8 	bl	24003d2c <Error_Handler>
2400435c:	e79c      	b.n	24004298 <HAL_SPI_MspInit+0x140>
      Error_Handler();
2400435e:	f7ff fce5 	bl	24003d2c <Error_Handler>
24004362:	e778      	b.n	24004256 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
24004364:	f7ff fce2 	bl	24003d2c <Error_Handler>
24004368:	e718      	b.n	2400419c <HAL_SPI_MspInit+0x44>
      Error_Handler();
2400436a:	f7ff fcdf 	bl	24003d2c <Error_Handler>
2400436e:	e7a9      	b.n	240042c4 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
24004370:	f7ff fcdc 	bl	24003d2c <Error_Handler>
24004374:	e7e4      	b.n	24004340 <HAL_SPI_MspInit+0x1e8>
24004376:	bf00      	nop
24004378:	40013000 	.word	0x40013000
2400437c:	58001400 	.word	0x58001400
24004380:	58024400 	.word	0x58024400
24004384:	58020400 	.word	0x58020400
24004388:	58021800 	.word	0x58021800
2400438c:	2001d1e8 	.word	0x2001d1e8
24004390:	400200a0 	.word	0x400200a0
24004394:	2001d260 	.word	0x2001d260
24004398:	40020010 	.word	0x40020010
2400439c:	58020000 	.word	0x58020000
240043a0:	2001d2d8 	.word	0x2001d2d8
240043a4:	58025408 	.word	0x58025408

240043a8 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
240043a8:	e7fe      	b.n	240043a8 <Default_Handler>
240043aa:	bf00      	nop

240043ac <Reset_Handler>:
	asm ("ldr sp, =_estack");
240043ac:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 24004470 <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
240043b0:	481f      	ldr	r0, [pc, #124]	; (24004430 <Reset_Handler+0x84>)
240043b2:	4a20      	ldr	r2, [pc, #128]	; (24004434 <Reset_Handler+0x88>)
240043b4:	4290      	cmp	r0, r2
240043b6:	d003      	beq.n	240043c0 <Reset_Handler+0x14>
		*pDest = *pSource;
240043b8:	1a12      	subs	r2, r2, r0
240043ba:	491f      	ldr	r1, [pc, #124]	; (24004438 <Reset_Handler+0x8c>)
240043bc:	f011 f882 	bl	240154c4 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
240043c0:	481e      	ldr	r0, [pc, #120]	; (2400443c <Reset_Handler+0x90>)
240043c2:	4a1f      	ldr	r2, [pc, #124]	; (24004440 <Reset_Handler+0x94>)
240043c4:	4290      	cmp	r0, r2
240043c6:	d003      	beq.n	240043d0 <Reset_Handler+0x24>
		*pDest = 0;
240043c8:	1a12      	subs	r2, r2, r0
240043ca:	2100      	movs	r1, #0
240043cc:	f011 f888 	bl	240154e0 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
240043d0:	481c      	ldr	r0, [pc, #112]	; (24004444 <Reset_Handler+0x98>)
240043d2:	4a1d      	ldr	r2, [pc, #116]	; (24004448 <Reset_Handler+0x9c>)
240043d4:	4290      	cmp	r0, r2
240043d6:	d003      	beq.n	240043e0 <Reset_Handler+0x34>
		*pDest = 0;
240043d8:	1a12      	subs	r2, r2, r0
240043da:	2100      	movs	r1, #0
240043dc:	f011 f880 	bl	240154e0 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
240043e0:	481a      	ldr	r0, [pc, #104]	; (2400444c <Reset_Handler+0xa0>)
240043e2:	4a1b      	ldr	r2, [pc, #108]	; (24004450 <Reset_Handler+0xa4>)
240043e4:	4290      	cmp	r0, r2
240043e6:	d003      	beq.n	240043f0 <Reset_Handler+0x44>
		*pDest = 0;
240043e8:	1a12      	subs	r2, r2, r0
240043ea:	2100      	movs	r1, #0
240043ec:	f011 f878 	bl	240154e0 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
240043f0:	4818      	ldr	r0, [pc, #96]	; (24004454 <Reset_Handler+0xa8>)
240043f2:	4a19      	ldr	r2, [pc, #100]	; (24004458 <Reset_Handler+0xac>)
240043f4:	4290      	cmp	r0, r2
240043f6:	d003      	beq.n	24004400 <Reset_Handler+0x54>
		*pDest = 0;
240043f8:	1a12      	subs	r2, r2, r0
240043fa:	2100      	movs	r1, #0
240043fc:	f011 f870 	bl	240154e0 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
24004400:	4816      	ldr	r0, [pc, #88]	; (2400445c <Reset_Handler+0xb0>)
24004402:	4a17      	ldr	r2, [pc, #92]	; (24004460 <Reset_Handler+0xb4>)
24004404:	4290      	cmp	r0, r2
24004406:	d003      	beq.n	24004410 <Reset_Handler+0x64>
		*pDest = 0;
24004408:	1a12      	subs	r2, r2, r0
2400440a:	2100      	movs	r1, #0
2400440c:	f011 f868 	bl	240154e0 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24004410:	4814      	ldr	r0, [pc, #80]	; (24004464 <Reset_Handler+0xb8>)
24004412:	4a15      	ldr	r2, [pc, #84]	; (24004468 <Reset_Handler+0xbc>)
24004414:	4290      	cmp	r0, r2
24004416:	d003      	beq.n	24004420 <Reset_Handler+0x74>
		*pDest = *pSource;
24004418:	1a12      	subs	r2, r2, r0
2400441a:	4914      	ldr	r1, [pc, #80]	; (2400446c <Reset_Handler+0xc0>)
2400441c:	f011 f852 	bl	240154c4 <memcpy>
	SystemInit();
24004420:	f000 f8a4 	bl	2400456c <SystemInit>
	__libc_init_array();
24004424:	f011 f810 	bl	24015448 <__libc_init_array>
	(void)main();
24004428:	f7fe fdce 	bl	24002fc8 <main>
	for (;;) ;
2400442c:	e7fe      	b.n	2400442c <Reset_Handler+0x80>
2400442e:	bf00      	nop
24004430:	20000000 	.word	0x20000000
24004434:	20000758 	.word	0x20000758
24004438:	2402d778 	.word	0x2402d778
2400443c:	20000758 	.word	0x20000758
24004440:	2001db2c 	.word	0x2001db2c
24004444:	24040000 	.word	0x24040000
24004448:	2407f7a0 	.word	0x2407f7a0
2400444c:	30000000 	.word	0x30000000
24004450:	300011c0 	.word	0x300011c0
24004454:	30002000 	.word	0x30002000
24004458:	30033f80 	.word	0x30033f80
2400445c:	38000000 	.word	0x38000000
24004460:	38000034 	.word	0x38000034
24004464:	00000400 	.word	0x00000400
24004468:	00008f68 	.word	0x00008f68
2400446c:	2402ded0 	.word	0x2402ded0
24004470:	20020000 	.word	0x20020000

24004474 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004474:	4b07      	ldr	r3, [pc, #28]	; (24004494 <HAL_MspInit+0x20>)
{
24004476:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004478:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400447c:	f042 0202 	orr.w	r2, r2, #2
24004480:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24004488:	f003 0302 	and.w	r3, r3, #2
2400448c:	9301      	str	r3, [sp, #4]
2400448e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24004490:	b002      	add	sp, #8
24004492:	4770      	bx	lr
24004494:	58024400 	.word	0x58024400

24004498 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24004498:	e7fe      	b.n	24004498 <NMI_Handler>
2400449a:	bf00      	nop

2400449c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2400449c:	e7fe      	b.n	2400449c <HardFault_Handler>
2400449e:	bf00      	nop

240044a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
240044a0:	e7fe      	b.n	240044a0 <MemManage_Handler>
240044a2:	bf00      	nop

240044a4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
240044a4:	e7fe      	b.n	240044a4 <BusFault_Handler>
240044a6:	bf00      	nop

240044a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240044a8:	e7fe      	b.n	240044a8 <UsageFault_Handler>
240044aa:	bf00      	nop

240044ac <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240044ac:	4770      	bx	lr
240044ae:	bf00      	nop

240044b0 <DebugMon_Handler>:
240044b0:	4770      	bx	lr
240044b2:	bf00      	nop

240044b4 <PendSV_Handler>:
240044b4:	4770      	bx	lr
240044b6:	bf00      	nop

240044b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240044b8:	f000 b926 	b.w	24004708 <HAL_IncTick>

240044bc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
240044bc:	4801      	ldr	r0, [pc, #4]	; (240044c4 <DMA1_Stream0_IRQHandler+0x8>)
240044be:	f001 b949 	b.w	24005754 <HAL_DMA_IRQHandler>
240044c2:	bf00      	nop
240044c4:	2001d260 	.word	0x2001d260

240044c8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240044c8:	4801      	ldr	r0, [pc, #4]	; (240044d0 <DMA1_Stream1_IRQHandler+0x8>)
240044ca:	f001 b943 	b.w	24005754 <HAL_DMA_IRQHandler>
240044ce:	bf00      	nop
240044d0:	2001cf4c 	.word	0x2001cf4c

240044d4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
240044d4:	4801      	ldr	r0, [pc, #4]	; (240044dc <DMA1_Stream2_IRQHandler+0x8>)
240044d6:	f001 b93d 	b.w	24005754 <HAL_DMA_IRQHandler>
240044da:	bf00      	nop
240044dc:	2001cfc4 	.word	0x2001cfc4

240044e0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
240044e0:	4801      	ldr	r0, [pc, #4]	; (240044e8 <DMA1_Stream3_IRQHandler+0x8>)
240044e2:	f001 b937 	b.w	24005754 <HAL_DMA_IRQHandler>
240044e6:	bf00      	nop
240044e8:	2001497c 	.word	0x2001497c

240044ec <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
240044ec:	4801      	ldr	r0, [pc, #4]	; (240044f4 <DMA1_Stream4_IRQHandler+0x8>)
240044ee:	f001 b931 	b.w	24005754 <HAL_DMA_IRQHandler>
240044f2:	bf00      	nop
240044f4:	200149f4 	.word	0x200149f4

240044f8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
240044f8:	4801      	ldr	r0, [pc, #4]	; (24004500 <DMA1_Stream6_IRQHandler+0x8>)
240044fa:	f001 b92b 	b.w	24005754 <HAL_DMA_IRQHandler>
240044fe:	bf00      	nop
24004500:	2001d1e8 	.word	0x2001d1e8

24004504 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
24004504:	2040      	movs	r0, #64	; 0x40
24004506:	f001 bf4d 	b.w	240063a4 <HAL_GPIO_EXTI_IRQHandler>
2400450a:	bf00      	nop

2400450c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
2400450c:	4801      	ldr	r0, [pc, #4]	; (24004514 <I2C1_EV_IRQHandler+0x8>)
2400450e:	f002 ba73 	b.w	240069f8 <HAL_I2C_EV_IRQHandler>
24004512:	bf00      	nop
24004514:	20014a6c 	.word	0x20014a6c

24004518 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24004518:	4801      	ldr	r0, [pc, #4]	; (24004520 <I2C1_ER_IRQHandler+0x8>)
2400451a:	f002 bd8b 	b.w	24007034 <HAL_I2C_ER_IRQHandler>
2400451e:	bf00      	nop
24004520:	20014a6c 	.word	0x20014a6c

24004524 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24004524:	4801      	ldr	r0, [pc, #4]	; (2400452c <I2C2_EV_IRQHandler+0x8>)
24004526:	f002 ba67 	b.w	240069f8 <HAL_I2C_EV_IRQHandler>
2400452a:	bf00      	nop
2400452c:	20014ac0 	.word	0x20014ac0

24004530 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
24004530:	4801      	ldr	r0, [pc, #4]	; (24004538 <I2C2_ER_IRQHandler+0x8>)
24004532:	f002 bd7f 	b.w	24007034 <HAL_I2C_ER_IRQHandler>
24004536:	bf00      	nop
24004538:	20014ac0 	.word	0x20014ac0

2400453c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
2400453c:	4801      	ldr	r0, [pc, #4]	; (24004544 <SPI1_IRQHandler+0x8>)
2400453e:	f006 bec7 	b.w	2400b2d0 <HAL_SPI_IRQHandler>
24004542:	bf00      	nop
24004544:	2001d350 	.word	0x2001d350

24004548 <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24004548:	4801      	ldr	r0, [pc, #4]	; (24004550 <SPI6_IRQHandler+0x8>)
2400454a:	f006 bec1 	b.w	2400b2d0 <HAL_SPI_IRQHandler>
2400454e:	bf00      	nop
24004550:	2001d3f0 	.word	0x2001d3f0

24004554 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24004554:	4801      	ldr	r0, [pc, #4]	; (2400455c <DMAMUX1_OVR_IRQHandler+0x8>)
24004556:	f001 bda1 	b.w	2400609c <HAL_DMAEx_MUX_IRQHandler>
2400455a:	bf00      	nop
2400455c:	2001cf4c 	.word	0x2001cf4c

24004560 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24004560:	4801      	ldr	r0, [pc, #4]	; (24004568 <BDMA_Channel0_IRQHandler+0x8>)
24004562:	f001 b8f7 	b.w	24005754 <HAL_DMA_IRQHandler>
24004566:	bf00      	nop
24004568:	2001d2d8 	.word	0x2001d2d8

2400456c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2400456c:	4930      	ldr	r1, [pc, #192]	; (24004630 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400456e:	4a31      	ldr	r2, [pc, #196]	; (24004634 <SystemInit+0xc8>)
{
24004570:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004572:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
24004576:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2400457c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004580:	6813      	ldr	r3, [r2, #0]
24004582:	f003 030f 	and.w	r3, r3, #15
24004586:	2b06      	cmp	r3, #6
24004588:	d805      	bhi.n	24004596 <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400458a:	6813      	ldr	r3, [r2, #0]
2400458c:	f023 030f 	bic.w	r3, r3, #15
24004590:	f043 0307 	orr.w	r3, r3, #7
24004594:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24004596:	4b28      	ldr	r3, [pc, #160]	; (24004638 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24004598:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400459a:	4a28      	ldr	r2, [pc, #160]	; (2400463c <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
2400459c:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400459e:	4825      	ldr	r0, [pc, #148]	; (24004634 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
240045a0:	f041 0101 	orr.w	r1, r1, #1
240045a4:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
240045a6:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
240045a8:	6819      	ldr	r1, [r3, #0]
240045aa:	400a      	ands	r2, r1
240045ac:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240045ae:	6803      	ldr	r3, [r0, #0]
240045b0:	071b      	lsls	r3, r3, #28
240045b2:	d505      	bpl.n	240045c0 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240045b4:	6803      	ldr	r3, [r0, #0]
240045b6:	f023 030f 	bic.w	r3, r3, #15
240045ba:	f043 0307 	orr.w	r3, r3, #7
240045be:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
240045c0:	4b1d      	ldr	r3, [pc, #116]	; (24004638 <SystemInit+0xcc>)
240045c2:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
240045c4:	491e      	ldr	r1, [pc, #120]	; (24004640 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
240045c6:	4c1f      	ldr	r4, [pc, #124]	; (24004644 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
240045c8:	481f      	ldr	r0, [pc, #124]	; (24004648 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
240045ca:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
240045cc:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
240045ce:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
240045d0:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
240045d2:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
240045d4:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
240045d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
240045d8:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
240045da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
240045dc:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
240045de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
240045e0:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240045e2:	4c1a      	ldr	r4, [pc, #104]	; (2400464c <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
240045e4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240045e8:	4919      	ldr	r1, [pc, #100]	; (24004650 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
240045ea:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
240045ec:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240045ee:	6823      	ldr	r3, [r4, #0]
240045f0:	4019      	ands	r1, r3
240045f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240045f6:	d203      	bcs.n	24004600 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
240045f8:	4b16      	ldr	r3, [pc, #88]	; (24004654 <SystemInit+0xe8>)
240045fa:	2201      	movs	r2, #1
240045fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004600:	4b0d      	ldr	r3, [pc, #52]	; (24004638 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24004602:	f243 04d2 	movw	r4, #12498	; 0x30d2
24004606:	4814      	ldr	r0, [pc, #80]	; (24004658 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004608:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
2400460c:	4908      	ldr	r1, [pc, #32]	; (24004630 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
2400460e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
24004612:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
24004616:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
2400461a:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
2400461c:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
24004620:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24004622:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004624:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
24004626:	b003      	add	sp, #12
24004628:	f85d 4b04 	ldr.w	r4, [sp], #4
2400462c:	4770      	bx	lr
2400462e:	bf00      	nop
24004630:	e000ed00 	.word	0xe000ed00
24004634:	52002000 	.word	0x52002000
24004638:	58024400 	.word	0x58024400
2400463c:	eaf6ed7f 	.word	0xeaf6ed7f
24004640:	01010280 	.word	0x01010280
24004644:	02020200 	.word	0x02020200
24004648:	01ff0000 	.word	0x01ff0000
2400464c:	5c001000 	.word	0x5c001000
24004650:	ffff0000 	.word	0xffff0000
24004654:	51008000 	.word	0x51008000
24004658:	52004000 	.word	0x52004000

2400465c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
2400465c:	4b0f      	ldr	r3, [pc, #60]	; (2400469c <HAL_InitTick+0x40>)
2400465e:	781b      	ldrb	r3, [r3, #0]
24004660:	b90b      	cbnz	r3, 24004666 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24004662:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24004664:	4770      	bx	lr
{
24004666:	b510      	push	{r4, lr}
24004668:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400466a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2400466e:	4a0c      	ldr	r2, [pc, #48]	; (240046a0 <HAL_InitTick+0x44>)
24004670:	fbb0 f3f3 	udiv	r3, r0, r3
24004674:	6810      	ldr	r0, [r2, #0]
24004676:	fbb0 f0f3 	udiv	r0, r0, r3
2400467a:	f000 f8cd 	bl	24004818 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2400467e:	2c0f      	cmp	r4, #15
24004680:	d800      	bhi.n	24004684 <HAL_InitTick+0x28>
24004682:	b108      	cbz	r0, 24004688 <HAL_InitTick+0x2c>
    return HAL_ERROR;
24004684:	2001      	movs	r0, #1
}
24004686:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24004688:	2200      	movs	r2, #0
2400468a:	4621      	mov	r1, r4
2400468c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24004690:	f000 f876 	bl	24004780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24004694:	4b03      	ldr	r3, [pc, #12]	; (240046a4 <HAL_InitTick+0x48>)
24004696:	2000      	movs	r0, #0
24004698:	601c      	str	r4, [r3, #0]
}
2400469a:	bd10      	pop	{r4, pc}
2400469c:	200006e8 	.word	0x200006e8
240046a0:	200006e0 	.word	0x200006e0
240046a4:	200006ec 	.word	0x200006ec

240046a8 <HAL_Init>:
{
240046a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240046aa:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046ac:	4c12      	ldr	r4, [pc, #72]	; (240046f8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240046ae:	f000 f855 	bl	2400475c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240046b2:	f003 f901 	bl	240078b8 <HAL_RCC_GetSysClockFreq>
240046b6:	4b11      	ldr	r3, [pc, #68]	; (240046fc <HAL_Init+0x54>)
240046b8:	4911      	ldr	r1, [pc, #68]	; (24004700 <HAL_Init+0x58>)
240046ba:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046bc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240046be:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046c2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240046c6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046c8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240046ca:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
240046ce:	490d      	ldr	r1, [pc, #52]	; (24004704 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046d0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240046d4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046d6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
240046da:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
240046dc:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240046de:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
240046e0:	f7ff ffbc 	bl	2400465c <HAL_InitTick>
240046e4:	b110      	cbz	r0, 240046ec <HAL_Init+0x44>
    return HAL_ERROR;
240046e6:	2401      	movs	r4, #1
}
240046e8:	4620      	mov	r0, r4
240046ea:	bd10      	pop	{r4, pc}
240046ec:	4604      	mov	r4, r0
  HAL_MspInit();
240046ee:	f7ff fec1 	bl	24004474 <HAL_MspInit>
}
240046f2:	4620      	mov	r0, r4
240046f4:	bd10      	pop	{r4, pc}
240046f6:	bf00      	nop
240046f8:	200006e4 	.word	0x200006e4
240046fc:	58024400 	.word	0x58024400
24004700:	24017fa8 	.word	0x24017fa8
24004704:	200006e0 	.word	0x200006e0

24004708 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24004708:	4a03      	ldr	r2, [pc, #12]	; (24004718 <HAL_IncTick+0x10>)
2400470a:	4b04      	ldr	r3, [pc, #16]	; (2400471c <HAL_IncTick+0x14>)
2400470c:	6811      	ldr	r1, [r2, #0]
2400470e:	781b      	ldrb	r3, [r3, #0]
24004710:	440b      	add	r3, r1
24004712:	6013      	str	r3, [r2, #0]
}
24004714:	4770      	bx	lr
24004716:	bf00      	nop
24004718:	2001d48c 	.word	0x2001d48c
2400471c:	200006e8 	.word	0x200006e8

24004720 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24004720:	4b01      	ldr	r3, [pc, #4]	; (24004728 <HAL_GetTick+0x8>)
24004722:	6818      	ldr	r0, [r3, #0]
}
24004724:	4770      	bx	lr
24004726:	bf00      	nop
24004728:	2001d48c 	.word	0x2001d48c

2400472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2400472c:	b538      	push	{r3, r4, r5, lr}
2400472e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004730:	f7ff fff6 	bl	24004720 <HAL_GetTick>
24004734:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24004736:	1c63      	adds	r3, r4, #1
24004738:	d002      	beq.n	24004740 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
2400473a:	4b04      	ldr	r3, [pc, #16]	; (2400474c <HAL_Delay+0x20>)
2400473c:	781b      	ldrb	r3, [r3, #0]
2400473e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24004740:	f7ff ffee 	bl	24004720 <HAL_GetTick>
24004744:	1b43      	subs	r3, r0, r5
24004746:	42a3      	cmp	r3, r4
24004748:	d3fa      	bcc.n	24004740 <HAL_Delay+0x14>
  {
  }
}
2400474a:	bd38      	pop	{r3, r4, r5, pc}
2400474c:	200006e8 	.word	0x200006e8

24004750 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24004750:	4b01      	ldr	r3, [pc, #4]	; (24004758 <HAL_GetREVID+0x8>)
24004752:	6818      	ldr	r0, [r3, #0]
}
24004754:	0c00      	lsrs	r0, r0, #16
24004756:	4770      	bx	lr
24004758:	5c001000 	.word	0x5c001000

2400475c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2400475c:	4906      	ldr	r1, [pc, #24]	; (24004778 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400475e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004762:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24004764:	4b05      	ldr	r3, [pc, #20]	; (2400477c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004766:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004768:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400476c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24004770:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24004772:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24004774:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24004776:	4770      	bx	lr
24004778:	e000ed00 	.word	0xe000ed00
2400477c:	05fa0000 	.word	0x05fa0000

24004780 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24004780:	4b1b      	ldr	r3, [pc, #108]	; (240047f0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24004782:	b500      	push	{lr}
24004784:	68db      	ldr	r3, [r3, #12]
24004786:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2400478a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400478e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004792:	f1be 0f04 	cmp.w	lr, #4
24004796:	bf28      	it	cs
24004798:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400479c:	f1bc 0f06 	cmp.w	ip, #6
240047a0:	d91a      	bls.n	240047d8 <HAL_NVIC_SetPriority+0x58>
240047a2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
240047a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
240047a8:	fa0c fc03 	lsl.w	ip, ip, r3
240047ac:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240047b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
240047b4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240047b6:	fa0c fc0e 	lsl.w	ip, ip, lr
240047ba:	ea21 010c 	bic.w	r1, r1, ip
240047be:	fa01 f103 	lsl.w	r1, r1, r3
240047c2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
240047c6:	db0a      	blt.n	240047de <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240047c8:	0109      	lsls	r1, r1, #4
240047ca:	4b0a      	ldr	r3, [pc, #40]	; (240047f4 <HAL_NVIC_SetPriority+0x74>)
240047cc:	b2c9      	uxtb	r1, r1
240047ce:	4403      	add	r3, r0
240047d0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
240047d4:	f85d fb04 	ldr.w	pc, [sp], #4
240047d8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
240047da:	4613      	mov	r3, r2
240047dc:	e7e8      	b.n	240047b0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240047de:	f000 000f 	and.w	r0, r0, #15
240047e2:	0109      	lsls	r1, r1, #4
240047e4:	4b04      	ldr	r3, [pc, #16]	; (240047f8 <HAL_NVIC_SetPriority+0x78>)
240047e6:	b2c9      	uxtb	r1, r1
240047e8:	4403      	add	r3, r0
240047ea:	7619      	strb	r1, [r3, #24]
240047ec:	f85d fb04 	ldr.w	pc, [sp], #4
240047f0:	e000ed00 	.word	0xe000ed00
240047f4:	e000e100 	.word	0xe000e100
240047f8:	e000ecfc 	.word	0xe000ecfc

240047fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
240047fc:	2800      	cmp	r0, #0
240047fe:	db07      	blt.n	24004810 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24004800:	2301      	movs	r3, #1
24004802:	f000 011f 	and.w	r1, r0, #31
24004806:	4a03      	ldr	r2, [pc, #12]	; (24004814 <HAL_NVIC_EnableIRQ+0x18>)
24004808:	0940      	lsrs	r0, r0, #5
2400480a:	408b      	lsls	r3, r1
2400480c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24004810:	4770      	bx	lr
24004812:	bf00      	nop
24004814:	e000e100 	.word	0xe000e100

24004818 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24004818:	1e43      	subs	r3, r0, #1
2400481a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2400481e:	d20c      	bcs.n	2400483a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004820:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004824:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004826:	4906      	ldr	r1, [pc, #24]	; (24004840 <HAL_SYSTICK_Config+0x28>)
24004828:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2400482c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2400482e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004830:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24004834:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004836:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24004838:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
2400483a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
2400483c:	4770      	bx	lr
2400483e:	bf00      	nop
24004840:	e000ed00 	.word	0xe000ed00

24004844 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24004844:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004848:	4b04      	ldr	r3, [pc, #16]	; (2400485c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
2400484a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2400484c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400484e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24004852:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24004854:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24004858:	4770      	bx	lr
2400485a:	bf00      	nop
2400485c:	e000ed00 	.word	0xe000ed00

24004860 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24004860:	4b06      	ldr	r3, [pc, #24]	; (2400487c <HAL_MPU_Enable+0x1c>)
24004862:	f040 0001 	orr.w	r0, r0, #1
24004866:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
2400486a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400486c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004870:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24004872:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004876:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2400487a:	4770      	bx	lr
2400487c:	e000ed00 	.word	0xe000ed00

24004880 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24004880:	7843      	ldrb	r3, [r0, #1]
24004882:	4a16      	ldr	r2, [pc, #88]	; (240048dc <HAL_MPU_ConfigRegion+0x5c>)
24004884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24004888:	7803      	ldrb	r3, [r0, #0]
2400488a:	b313      	cbz	r3, 240048d2 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
2400488c:	6843      	ldr	r3, [r0, #4]
2400488e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004892:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004894:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004898:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
2400489a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400489c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
240048a0:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240048a4:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
240048a6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240048a8:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
240048ac:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240048b0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
240048b4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240048b6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
240048ba:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240048be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240048c2:	7a01      	ldrb	r1, [r0, #8]
240048c4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
240048c8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
240048cc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
240048d0:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
240048d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
240048d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
240048da:	4770      	bx	lr
240048dc:	e000ed00 	.word	0xe000ed00

240048e0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240048e0:	4b34      	ldr	r3, [pc, #208]	; (240049b4 <DMA_CalcBaseAndBitshift+0xd4>)
240048e2:	4935      	ldr	r1, [pc, #212]	; (240049b8 <DMA_CalcBaseAndBitshift+0xd8>)
{
240048e4:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240048e6:	4d35      	ldr	r5, [pc, #212]	; (240049bc <DMA_CalcBaseAndBitshift+0xdc>)
240048e8:	6802      	ldr	r2, [r0, #0]
240048ea:	4c35      	ldr	r4, [pc, #212]	; (240049c0 <DMA_CalcBaseAndBitshift+0xe0>)
240048ec:	42aa      	cmp	r2, r5
240048ee:	bf18      	it	ne
240048f0:	429a      	cmpne	r2, r3
240048f2:	bf0c      	ite	eq
240048f4:	2301      	moveq	r3, #1
240048f6:	2300      	movne	r3, #0
240048f8:	428a      	cmp	r2, r1
240048fa:	bf08      	it	eq
240048fc:	f043 0301 	orreq.w	r3, r3, #1
24004900:	3130      	adds	r1, #48	; 0x30
24004902:	42a2      	cmp	r2, r4
24004904:	bf08      	it	eq
24004906:	f043 0301 	orreq.w	r3, r3, #1
2400490a:	3430      	adds	r4, #48	; 0x30
2400490c:	428a      	cmp	r2, r1
2400490e:	bf08      	it	eq
24004910:	f043 0301 	orreq.w	r3, r3, #1
24004914:	3130      	adds	r1, #48	; 0x30
24004916:	42a2      	cmp	r2, r4
24004918:	bf08      	it	eq
2400491a:	f043 0301 	orreq.w	r3, r3, #1
2400491e:	3430      	adds	r4, #48	; 0x30
24004920:	428a      	cmp	r2, r1
24004922:	bf08      	it	eq
24004924:	f043 0301 	orreq.w	r3, r3, #1
24004928:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400492c:	42a2      	cmp	r2, r4
2400492e:	bf08      	it	eq
24004930:	f043 0301 	orreq.w	r3, r3, #1
24004934:	f504 745c 	add.w	r4, r4, #880	; 0x370
24004938:	428a      	cmp	r2, r1
2400493a:	bf08      	it	eq
2400493c:	f043 0301 	orreq.w	r3, r3, #1
24004940:	3130      	adds	r1, #48	; 0x30
24004942:	42a2      	cmp	r2, r4
24004944:	bf08      	it	eq
24004946:	f043 0301 	orreq.w	r3, r3, #1
2400494a:	3430      	adds	r4, #48	; 0x30
2400494c:	428a      	cmp	r2, r1
2400494e:	bf08      	it	eq
24004950:	f043 0301 	orreq.w	r3, r3, #1
24004954:	3130      	adds	r1, #48	; 0x30
24004956:	42a2      	cmp	r2, r4
24004958:	bf08      	it	eq
2400495a:	f043 0301 	orreq.w	r3, r3, #1
2400495e:	3430      	adds	r4, #48	; 0x30
24004960:	428a      	cmp	r2, r1
24004962:	bf08      	it	eq
24004964:	f043 0301 	orreq.w	r3, r3, #1
24004968:	3130      	adds	r1, #48	; 0x30
2400496a:	42a2      	cmp	r2, r4
2400496c:	bf08      	it	eq
2400496e:	f043 0301 	orreq.w	r3, r3, #1
24004972:	428a      	cmp	r2, r1
24004974:	bf08      	it	eq
24004976:	f043 0301 	orreq.w	r3, r3, #1
2400497a:	b913      	cbnz	r3, 24004982 <DMA_CalcBaseAndBitshift+0xa2>
2400497c:	4b11      	ldr	r3, [pc, #68]	; (240049c4 <DMA_CalcBaseAndBitshift+0xe4>)
2400497e:	429a      	cmp	r2, r3
24004980:	d113      	bne.n	240049aa <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004982:	b2d3      	uxtb	r3, r2
24004984:	4910      	ldr	r1, [pc, #64]	; (240049c8 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004986:	4c11      	ldr	r4, [pc, #68]	; (240049cc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004988:	3b10      	subs	r3, #16
2400498a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
2400498e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004990:	4b0f      	ldr	r3, [pc, #60]	; (240049d0 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004992:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004996:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2400499a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2400499c:	bf88      	it	hi
2400499e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
240049a0:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
240049a2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
240049a4:	4618      	mov	r0, r3
240049a6:	bc30      	pop	{r4, r5}
240049a8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
240049aa:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
240049ae:	6583      	str	r3, [r0, #88]	; 0x58
240049b0:	e7f8      	b.n	240049a4 <DMA_CalcBaseAndBitshift+0xc4>
240049b2:	bf00      	nop
240049b4:	40020010 	.word	0x40020010
240049b8:	40020040 	.word	0x40020040
240049bc:	40020028 	.word	0x40020028
240049c0:	40020058 	.word	0x40020058
240049c4:	400204b8 	.word	0x400204b8
240049c8:	aaaaaaab 	.word	0xaaaaaaab
240049cc:	24017fb8 	.word	0x24017fb8
240049d0:	fffffc00 	.word	0xfffffc00

240049d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240049d4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240049d6:	4a29      	ldr	r2, [pc, #164]	; (24004a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
240049d8:	4929      	ldr	r1, [pc, #164]	; (24004a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
240049da:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240049dc:	4d29      	ldr	r5, [pc, #164]	; (24004a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
240049de:	4c2a      	ldr	r4, [pc, #168]	; (24004a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
240049e0:	42ab      	cmp	r3, r5
240049e2:	bf18      	it	ne
240049e4:	4293      	cmpne	r3, r2
240049e6:	bf0c      	ite	eq
240049e8:	2201      	moveq	r2, #1
240049ea:	2200      	movne	r2, #0
240049ec:	428b      	cmp	r3, r1
240049ee:	bf08      	it	eq
240049f0:	f042 0201 	orreq.w	r2, r2, #1
240049f4:	3128      	adds	r1, #40	; 0x28
240049f6:	42a3      	cmp	r3, r4
240049f8:	bf08      	it	eq
240049fa:	f042 0201 	orreq.w	r2, r2, #1
240049fe:	3428      	adds	r4, #40	; 0x28
24004a00:	428b      	cmp	r3, r1
24004a02:	bf08      	it	eq
24004a04:	f042 0201 	orreq.w	r2, r2, #1
24004a08:	3128      	adds	r1, #40	; 0x28
24004a0a:	42a3      	cmp	r3, r4
24004a0c:	bf08      	it	eq
24004a0e:	f042 0201 	orreq.w	r2, r2, #1
24004a12:	428b      	cmp	r3, r1
24004a14:	bf08      	it	eq
24004a16:	f042 0201 	orreq.w	r2, r2, #1
24004a1a:	b912      	cbnz	r2, 24004a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24004a1c:	4a1b      	ldr	r2, [pc, #108]	; (24004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
24004a1e:	4293      	cmp	r3, r2
24004a20:	d113      	bne.n	24004a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004a22:	b2db      	uxtb	r3, r3
24004a24:	4c1a      	ldr	r4, [pc, #104]	; (24004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004a26:	4a1b      	ldr	r2, [pc, #108]	; (24004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a28:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004a2a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004a2c:	4d1a      	ldr	r5, [pc, #104]	; (24004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004a2e:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004a32:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004a34:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a38:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004a3c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a3e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004a42:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a44:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24004a46:	bc30      	pop	{r4, r5}
24004a48:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a4a:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004a4c:	4913      	ldr	r1, [pc, #76]	; (24004a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a4e:	4c14      	ldr	r4, [pc, #80]	; (24004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004a50:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a52:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004a54:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a56:	fba4 2302 	umull	r2, r3, r4, r2
24004a5a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004a5e:	d800      	bhi.n	24004a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24004a60:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a62:	4a10      	ldr	r2, [pc, #64]	; (24004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a64:	f003 051f 	and.w	r5, r3, #31
24004a68:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004a6a:	4c0f      	ldr	r4, [pc, #60]	; (24004aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a6c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a6e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24004a70:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a72:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004a74:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004a76:	6602      	str	r2, [r0, #96]	; 0x60
}
24004a78:	e7e5      	b.n	24004a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
24004a7a:	bf00      	nop
24004a7c:	58025408 	.word	0x58025408
24004a80:	58025430 	.word	0x58025430
24004a84:	5802541c 	.word	0x5802541c
24004a88:	58025444 	.word	0x58025444
24004a8c:	58025494 	.word	0x58025494
24004a90:	cccccccd 	.word	0xcccccccd
24004a94:	16009600 	.word	0x16009600
24004a98:	58025880 	.word	0x58025880
24004a9c:	bffdfbf0 	.word	0xbffdfbf0
24004aa0:	aaaaaaab 	.word	0xaaaaaaab
24004aa4:	10008200 	.word	0x10008200
24004aa8:	40020880 	.word	0x40020880

24004aac <HAL_DMA_Init>:
{
24004aac:	b538      	push	{r3, r4, r5, lr}
24004aae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004ab0:	f7ff fe36 	bl	24004720 <HAL_GetTick>
  if(hdma == NULL)
24004ab4:	2c00      	cmp	r4, #0
24004ab6:	f000 816b 	beq.w	24004d90 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004aba:	6822      	ldr	r2, [r4, #0]
24004abc:	4605      	mov	r5, r0
24004abe:	4ba3      	ldr	r3, [pc, #652]	; (24004d4c <HAL_DMA_Init+0x2a0>)
24004ac0:	429a      	cmp	r2, r3
24004ac2:	d048      	beq.n	24004b56 <HAL_DMA_Init+0xaa>
24004ac4:	3318      	adds	r3, #24
24004ac6:	429a      	cmp	r2, r3
24004ac8:	d045      	beq.n	24004b56 <HAL_DMA_Init+0xaa>
24004aca:	3330      	adds	r3, #48	; 0x30
24004acc:	49a0      	ldr	r1, [pc, #640]	; (24004d50 <HAL_DMA_Init+0x2a4>)
24004ace:	428a      	cmp	r2, r1
24004ad0:	bf18      	it	ne
24004ad2:	429a      	cmpne	r2, r3
24004ad4:	f101 0130 	add.w	r1, r1, #48	; 0x30
24004ad8:	bf0c      	ite	eq
24004ada:	2301      	moveq	r3, #1
24004adc:	2300      	movne	r3, #0
24004ade:	428a      	cmp	r2, r1
24004ae0:	bf08      	it	eq
24004ae2:	f043 0301 	orreq.w	r3, r3, #1
24004ae6:	3118      	adds	r1, #24
24004ae8:	428a      	cmp	r2, r1
24004aea:	bf08      	it	eq
24004aec:	f043 0301 	orreq.w	r3, r3, #1
24004af0:	3118      	adds	r1, #24
24004af2:	428a      	cmp	r2, r1
24004af4:	bf08      	it	eq
24004af6:	f043 0301 	orreq.w	r3, r3, #1
24004afa:	3118      	adds	r1, #24
24004afc:	428a      	cmp	r2, r1
24004afe:	bf08      	it	eq
24004b00:	f043 0301 	orreq.w	r3, r3, #1
24004b04:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004b08:	428a      	cmp	r2, r1
24004b0a:	bf08      	it	eq
24004b0c:	f043 0301 	orreq.w	r3, r3, #1
24004b10:	3118      	adds	r1, #24
24004b12:	428a      	cmp	r2, r1
24004b14:	bf08      	it	eq
24004b16:	f043 0301 	orreq.w	r3, r3, #1
24004b1a:	3118      	adds	r1, #24
24004b1c:	428a      	cmp	r2, r1
24004b1e:	bf08      	it	eq
24004b20:	f043 0301 	orreq.w	r3, r3, #1
24004b24:	3118      	adds	r1, #24
24004b26:	428a      	cmp	r2, r1
24004b28:	bf08      	it	eq
24004b2a:	f043 0301 	orreq.w	r3, r3, #1
24004b2e:	3118      	adds	r1, #24
24004b30:	428a      	cmp	r2, r1
24004b32:	bf08      	it	eq
24004b34:	f043 0301 	orreq.w	r3, r3, #1
24004b38:	3118      	adds	r1, #24
24004b3a:	428a      	cmp	r2, r1
24004b3c:	bf08      	it	eq
24004b3e:	f043 0301 	orreq.w	r3, r3, #1
24004b42:	3118      	adds	r1, #24
24004b44:	428a      	cmp	r2, r1
24004b46:	bf08      	it	eq
24004b48:	f043 0301 	orreq.w	r3, r3, #1
24004b4c:	b91b      	cbnz	r3, 24004b56 <HAL_DMA_Init+0xaa>
24004b4e:	4b81      	ldr	r3, [pc, #516]	; (24004d54 <HAL_DMA_Init+0x2a8>)
24004b50:	429a      	cmp	r2, r3
24004b52:	f040 8184 	bne.w	24004e5e <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
24004b56:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004b58:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
24004b5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
24004b5e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24004b62:	6813      	ldr	r3, [r2, #0]
24004b64:	f023 0301 	bic.w	r3, r3, #1
24004b68:	6013      	str	r3, [r2, #0]
24004b6a:	e005      	b.n	24004b78 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004b6c:	f7ff fdd8 	bl	24004720 <HAL_GetTick>
24004b70:	1b43      	subs	r3, r0, r5
24004b72:	2b05      	cmp	r3, #5
24004b74:	f200 80fe 	bhi.w	24004d74 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004b78:	6823      	ldr	r3, [r4, #0]
24004b7a:	681a      	ldr	r2, [r3, #0]
24004b7c:	07d0      	lsls	r0, r2, #31
24004b7e:	d4f5      	bmi.n	24004b6c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24004b80:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b84:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24004b86:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004b88:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b8c:	430a      	orrs	r2, r1
24004b8e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004b90:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004b92:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004b96:	69a1      	ldr	r1, [r4, #24]
24004b98:	ea42 0201 	orr.w	r2, r2, r1
24004b9c:	69e1      	ldr	r1, [r4, #28]
24004b9e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004ba2:	6a21      	ldr	r1, [r4, #32]
24004ba4:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004ba8:	496b      	ldr	r1, [pc, #428]	; (24004d58 <HAL_DMA_Init+0x2ac>)
24004baa:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24004bae:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004bb2:	d103      	bne.n	24004bbc <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004bb4:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24004bb8:	4301      	orrs	r1, r0
24004bba:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004bbc:	4867      	ldr	r0, [pc, #412]	; (24004d5c <HAL_DMA_Init+0x2b0>)
24004bbe:	4968      	ldr	r1, [pc, #416]	; (24004d60 <HAL_DMA_Init+0x2b4>)
24004bc0:	6800      	ldr	r0, [r0, #0]
24004bc2:	4001      	ands	r1, r0
24004bc4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004bc8:	d30a      	bcc.n	24004be0 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004bca:	6861      	ldr	r1, [r4, #4]
24004bcc:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24004bd0:	281f      	cmp	r0, #31
24004bd2:	f240 80d6 	bls.w	24004d82 <HAL_DMA_Init+0x2d6>
24004bd6:	394f      	subs	r1, #79	; 0x4f
24004bd8:	2903      	cmp	r1, #3
24004bda:	d801      	bhi.n	24004be0 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24004bdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004be0:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004be2:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24004be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004be6:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004be8:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004bea:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24004bee:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004bf2:	d10e      	bne.n	24004c12 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004bf4:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24004bf8:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004bfa:	b150      	cbz	r0, 24004c12 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24004bfc:	69a5      	ldr	r5, [r4, #24]
24004bfe:	2d00      	cmp	r5, #0
24004c00:	f040 8108 	bne.w	24004e14 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
24004c04:	2a01      	cmp	r2, #1
24004c06:	f000 8125 	beq.w	24004e54 <HAL_DMA_Init+0x3a8>
24004c0a:	f032 0202 	bics.w	r2, r2, #2
24004c0e:	f000 8109 	beq.w	24004e24 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004c12:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004c14:	4620      	mov	r0, r4
24004c16:	f7ff fe63 	bl	240048e0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004c1a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004c1c:	233f      	movs	r3, #63	; 0x3f
24004c1e:	f002 021f 	and.w	r2, r2, #31
24004c22:	4093      	lsls	r3, r2
24004c24:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004c26:	6822      	ldr	r2, [r4, #0]
24004c28:	4b48      	ldr	r3, [pc, #288]	; (24004d4c <HAL_DMA_Init+0x2a0>)
24004c2a:	484e      	ldr	r0, [pc, #312]	; (24004d64 <HAL_DMA_Init+0x2b8>)
24004c2c:	4948      	ldr	r1, [pc, #288]	; (24004d50 <HAL_DMA_Init+0x2a4>)
24004c2e:	4282      	cmp	r2, r0
24004c30:	bf18      	it	ne
24004c32:	429a      	cmpne	r2, r3
24004c34:	f100 0030 	add.w	r0, r0, #48	; 0x30
24004c38:	bf0c      	ite	eq
24004c3a:	2301      	moveq	r3, #1
24004c3c:	2300      	movne	r3, #0
24004c3e:	428a      	cmp	r2, r1
24004c40:	bf08      	it	eq
24004c42:	f043 0301 	orreq.w	r3, r3, #1
24004c46:	3130      	adds	r1, #48	; 0x30
24004c48:	4282      	cmp	r2, r0
24004c4a:	bf08      	it	eq
24004c4c:	f043 0301 	orreq.w	r3, r3, #1
24004c50:	3030      	adds	r0, #48	; 0x30
24004c52:	428a      	cmp	r2, r1
24004c54:	bf08      	it	eq
24004c56:	f043 0301 	orreq.w	r3, r3, #1
24004c5a:	3130      	adds	r1, #48	; 0x30
24004c5c:	4282      	cmp	r2, r0
24004c5e:	bf08      	it	eq
24004c60:	f043 0301 	orreq.w	r3, r3, #1
24004c64:	3030      	adds	r0, #48	; 0x30
24004c66:	428a      	cmp	r2, r1
24004c68:	bf08      	it	eq
24004c6a:	f043 0301 	orreq.w	r3, r3, #1
24004c6e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24004c72:	4282      	cmp	r2, r0
24004c74:	bf08      	it	eq
24004c76:	f043 0301 	orreq.w	r3, r3, #1
24004c7a:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004c7e:	428a      	cmp	r2, r1
24004c80:	bf08      	it	eq
24004c82:	f043 0301 	orreq.w	r3, r3, #1
24004c86:	3130      	adds	r1, #48	; 0x30
24004c88:	4282      	cmp	r2, r0
24004c8a:	bf08      	it	eq
24004c8c:	f043 0301 	orreq.w	r3, r3, #1
24004c90:	3030      	adds	r0, #48	; 0x30
24004c92:	428a      	cmp	r2, r1
24004c94:	bf08      	it	eq
24004c96:	f043 0301 	orreq.w	r3, r3, #1
24004c9a:	3130      	adds	r1, #48	; 0x30
24004c9c:	4282      	cmp	r2, r0
24004c9e:	bf08      	it	eq
24004ca0:	f043 0301 	orreq.w	r3, r3, #1
24004ca4:	3030      	adds	r0, #48	; 0x30
24004ca6:	428a      	cmp	r2, r1
24004ca8:	bf08      	it	eq
24004caa:	f043 0301 	orreq.w	r3, r3, #1
24004cae:	3130      	adds	r1, #48	; 0x30
24004cb0:	4282      	cmp	r2, r0
24004cb2:	bf08      	it	eq
24004cb4:	f043 0301 	orreq.w	r3, r3, #1
24004cb8:	3030      	adds	r0, #48	; 0x30
24004cba:	428a      	cmp	r2, r1
24004cbc:	bf08      	it	eq
24004cbe:	f043 0301 	orreq.w	r3, r3, #1
24004cc2:	4929      	ldr	r1, [pc, #164]	; (24004d68 <HAL_DMA_Init+0x2bc>)
24004cc4:	4282      	cmp	r2, r0
24004cc6:	bf08      	it	eq
24004cc8:	f043 0301 	orreq.w	r3, r3, #1
24004ccc:	4827      	ldr	r0, [pc, #156]	; (24004d6c <HAL_DMA_Init+0x2c0>)
24004cce:	428a      	cmp	r2, r1
24004cd0:	bf08      	it	eq
24004cd2:	f043 0301 	orreq.w	r3, r3, #1
24004cd6:	3128      	adds	r1, #40	; 0x28
24004cd8:	4282      	cmp	r2, r0
24004cda:	bf08      	it	eq
24004cdc:	f043 0301 	orreq.w	r3, r3, #1
24004ce0:	3028      	adds	r0, #40	; 0x28
24004ce2:	428a      	cmp	r2, r1
24004ce4:	bf08      	it	eq
24004ce6:	f043 0301 	orreq.w	r3, r3, #1
24004cea:	3128      	adds	r1, #40	; 0x28
24004cec:	4282      	cmp	r2, r0
24004cee:	bf08      	it	eq
24004cf0:	f043 0301 	orreq.w	r3, r3, #1
24004cf4:	3028      	adds	r0, #40	; 0x28
24004cf6:	428a      	cmp	r2, r1
24004cf8:	bf08      	it	eq
24004cfa:	f043 0301 	orreq.w	r3, r3, #1
24004cfe:	3128      	adds	r1, #40	; 0x28
24004d00:	4282      	cmp	r2, r0
24004d02:	bf08      	it	eq
24004d04:	f043 0301 	orreq.w	r3, r3, #1
24004d08:	428a      	cmp	r2, r1
24004d0a:	bf08      	it	eq
24004d0c:	f043 0301 	orreq.w	r3, r3, #1
24004d10:	b913      	cbnz	r3, 24004d18 <HAL_DMA_Init+0x26c>
24004d12:	4b17      	ldr	r3, [pc, #92]	; (24004d70 <HAL_DMA_Init+0x2c4>)
24004d14:	429a      	cmp	r2, r3
24004d16:	d113      	bne.n	24004d40 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004d18:	4620      	mov	r0, r4
24004d1a:	f7ff fe5b 	bl	240049d4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24004d1e:	68a3      	ldr	r3, [r4, #8]
24004d20:	2b80      	cmp	r3, #128	; 0x80
24004d22:	d037      	beq.n	24004d94 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24004d24:	7922      	ldrb	r2, [r4, #4]
24004d26:	6e23      	ldr	r3, [r4, #96]	; 0x60
24004d28:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004d2a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24004d2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24004d30:	6861      	ldr	r1, [r4, #4]
24004d32:	1e4b      	subs	r3, r1, #1
24004d34:	2b07      	cmp	r3, #7
24004d36:	d931      	bls.n	24004d9c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
24004d38:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24004d3a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004d3e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004d40:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24004d42:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004d44:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24004d46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004d4a:	bd38      	pop	{r3, r4, r5, pc}
24004d4c:	40020010 	.word	0x40020010
24004d50:	40020040 	.word	0x40020040
24004d54:	400204b8 	.word	0x400204b8
24004d58:	fe10803f 	.word	0xfe10803f
24004d5c:	5c001000 	.word	0x5c001000
24004d60:	ffff0000 	.word	0xffff0000
24004d64:	40020028 	.word	0x40020028
24004d68:	58025408 	.word	0x58025408
24004d6c:	5802541c 	.word	0x5802541c
24004d70:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004d74:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24004d76:	2303      	movs	r3, #3
        return HAL_ERROR;
24004d78:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004d7a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24004d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004d80:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004d82:	496a      	ldr	r1, [pc, #424]	; (24004f2c <HAL_DMA_Init+0x480>)
24004d84:	fa21 f000 	lsr.w	r0, r1, r0
24004d88:	07c1      	lsls	r1, r0, #31
24004d8a:	f57f af29 	bpl.w	24004be0 <HAL_DMA_Init+0x134>
24004d8e:	e725      	b.n	24004bdc <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24004d90:	2001      	movs	r0, #1
}
24004d92:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24004d94:	2300      	movs	r3, #0
24004d96:	461a      	mov	r2, r3
24004d98:	6063      	str	r3, [r4, #4]
24004d9a:	e7c4      	b.n	24004d26 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004d9c:	6820      	ldr	r0, [r4, #0]
24004d9e:	4a64      	ldr	r2, [pc, #400]	; (24004f30 <HAL_DMA_Init+0x484>)
24004da0:	4d64      	ldr	r5, [pc, #400]	; (24004f34 <HAL_DMA_Init+0x488>)
24004da2:	42a8      	cmp	r0, r5
24004da4:	bf18      	it	ne
24004da6:	4290      	cmpne	r0, r2
24004da8:	f105 0514 	add.w	r5, r5, #20
24004dac:	bf0c      	ite	eq
24004dae:	2201      	moveq	r2, #1
24004db0:	2200      	movne	r2, #0
24004db2:	42a8      	cmp	r0, r5
24004db4:	bf08      	it	eq
24004db6:	f042 0201 	orreq.w	r2, r2, #1
24004dba:	3514      	adds	r5, #20
24004dbc:	42a8      	cmp	r0, r5
24004dbe:	bf08      	it	eq
24004dc0:	f042 0201 	orreq.w	r2, r2, #1
24004dc4:	3514      	adds	r5, #20
24004dc6:	42a8      	cmp	r0, r5
24004dc8:	bf08      	it	eq
24004dca:	f042 0201 	orreq.w	r2, r2, #1
24004dce:	3514      	adds	r5, #20
24004dd0:	42a8      	cmp	r0, r5
24004dd2:	bf08      	it	eq
24004dd4:	f042 0201 	orreq.w	r2, r2, #1
24004dd8:	3514      	adds	r5, #20
24004dda:	42a8      	cmp	r0, r5
24004ddc:	bf08      	it	eq
24004dde:	f042 0201 	orreq.w	r2, r2, #1
24004de2:	b93a      	cbnz	r2, 24004df4 <HAL_DMA_Init+0x348>
24004de4:	4a54      	ldr	r2, [pc, #336]	; (24004f38 <HAL_DMA_Init+0x48c>)
24004de6:	4290      	cmp	r0, r2
24004de8:	d004      	beq.n	24004df4 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004dea:	4a54      	ldr	r2, [pc, #336]	; (24004f3c <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004dec:	4854      	ldr	r0, [pc, #336]	; (24004f40 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004dee:	440a      	add	r2, r1
24004df0:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004df2:	e003      	b.n	24004dfc <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004df4:	4a53      	ldr	r2, [pc, #332]	; (24004f44 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24004df6:	4854      	ldr	r0, [pc, #336]	; (24004f48 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004df8:	440a      	add	r2, r1
24004dfa:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004dfc:	2101      	movs	r1, #1
24004dfe:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004e02:	2100      	movs	r1, #0
24004e04:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004e08:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004e0a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004e0c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24004e10:	605a      	str	r2, [r3, #4]
24004e12:	e795      	b.n	24004d40 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24004e14:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24004e18:	d00e      	beq.n	24004e38 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
24004e1a:	2a02      	cmp	r2, #2
24004e1c:	d905      	bls.n	24004e2a <HAL_DMA_Init+0x37e>
24004e1e:	2a03      	cmp	r2, #3
24004e20:	f47f aef7 	bne.w	24004c12 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24004e24:	01c2      	lsls	r2, r0, #7
24004e26:	f57f aef4 	bpl.w	24004c12 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
24004e2a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004e2c:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24004e2e:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004e30:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24004e32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004e36:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24004e38:	2a03      	cmp	r2, #3
24004e3a:	f63f aeea 	bhi.w	24004c12 <HAL_DMA_Init+0x166>
24004e3e:	a501      	add	r5, pc, #4	; (adr r5, 24004e44 <HAL_DMA_Init+0x398>)
24004e40:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24004e44:	24004e2b 	.word	0x24004e2b
24004e48:	24004e25 	.word	0x24004e25
24004e4c:	24004e2b 	.word	0x24004e2b
24004e50:	24004e55 	.word	0x24004e55
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24004e54:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24004e58:	f47f aedb 	bne.w	24004c12 <HAL_DMA_Init+0x166>
24004e5c:	e7e5      	b.n	24004e2a <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24004e5e:	4b34      	ldr	r3, [pc, #208]	; (24004f30 <HAL_DMA_Init+0x484>)
24004e60:	4834      	ldr	r0, [pc, #208]	; (24004f34 <HAL_DMA_Init+0x488>)
24004e62:	493a      	ldr	r1, [pc, #232]	; (24004f4c <HAL_DMA_Init+0x4a0>)
24004e64:	4282      	cmp	r2, r0
24004e66:	bf18      	it	ne
24004e68:	429a      	cmpne	r2, r3
24004e6a:	f100 0028 	add.w	r0, r0, #40	; 0x28
24004e6e:	bf0c      	ite	eq
24004e70:	2301      	moveq	r3, #1
24004e72:	2300      	movne	r3, #0
24004e74:	428a      	cmp	r2, r1
24004e76:	bf08      	it	eq
24004e78:	f043 0301 	orreq.w	r3, r3, #1
24004e7c:	3128      	adds	r1, #40	; 0x28
24004e7e:	4282      	cmp	r2, r0
24004e80:	bf08      	it	eq
24004e82:	f043 0301 	orreq.w	r3, r3, #1
24004e86:	3028      	adds	r0, #40	; 0x28
24004e88:	428a      	cmp	r2, r1
24004e8a:	bf08      	it	eq
24004e8c:	f043 0301 	orreq.w	r3, r3, #1
24004e90:	3128      	adds	r1, #40	; 0x28
24004e92:	4282      	cmp	r2, r0
24004e94:	bf08      	it	eq
24004e96:	f043 0301 	orreq.w	r3, r3, #1
24004e9a:	428a      	cmp	r2, r1
24004e9c:	bf08      	it	eq
24004e9e:	f043 0301 	orreq.w	r3, r3, #1
24004ea2:	b913      	cbnz	r3, 24004eaa <HAL_DMA_Init+0x3fe>
24004ea4:	4b24      	ldr	r3, [pc, #144]	; (24004f38 <HAL_DMA_Init+0x48c>)
24004ea6:	429a      	cmp	r2, r3
24004ea8:	d139      	bne.n	24004f1e <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
24004eaa:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004eac:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004eae:	4928      	ldr	r1, [pc, #160]	; (24004f50 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004eb0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004eb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004eb8:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004eba:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004ebc:	68a3      	ldr	r3, [r4, #8]
24004ebe:	2b40      	cmp	r3, #64	; 0x40
24004ec0:	d02b      	beq.n	24004f1a <HAL_DMA_Init+0x46e>
24004ec2:	2b80      	cmp	r3, #128	; 0x80
24004ec4:	bf0c      	ite	eq
24004ec6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
24004eca:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24004ecc:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24004ed0:	08db      	lsrs	r3, r3, #3
24004ed2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24004ed6:	6965      	ldr	r5, [r4, #20]
24004ed8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24004edc:	69a5      	ldr	r5, [r4, #24]
24004ede:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24004ee2:	69e5      	ldr	r5, [r4, #28]
24004ee4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24004ee8:	6a25      	ldr	r5, [r4, #32]
24004eea:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24004eee:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004ef0:	4918      	ldr	r1, [pc, #96]	; (24004f54 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004ef2:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004ef4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24004ef6:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004ef8:	6822      	ldr	r2, [r4, #0]
24004efa:	4b17      	ldr	r3, [pc, #92]	; (24004f58 <HAL_DMA_Init+0x4ac>)
24004efc:	4411      	add	r1, r2
24004efe:	fba3 2301 	umull	r2, r3, r3, r1
24004f02:	091b      	lsrs	r3, r3, #4
24004f04:	009b      	lsls	r3, r3, #2
24004f06:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004f08:	f7ff fcea 	bl	240048e0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004f0c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004f0e:	2301      	movs	r3, #1
24004f10:	f002 021f 	and.w	r2, r2, #31
24004f14:	4093      	lsls	r3, r2
24004f16:	6043      	str	r3, [r0, #4]
24004f18:	e685      	b.n	24004c26 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004f1a:	2010      	movs	r0, #16
24004f1c:	e7d6      	b.n	24004ecc <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004f1e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24004f20:	2303      	movs	r3, #3
    return HAL_ERROR;
24004f22:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004f24:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24004f26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004f2a:	bd38      	pop	{r3, r4, r5, pc}
24004f2c:	c3c0003f 	.word	0xc3c0003f
24004f30:	58025408 	.word	0x58025408
24004f34:	5802541c 	.word	0x5802541c
24004f38:	58025494 	.word	0x58025494
24004f3c:	1000823f 	.word	0x1000823f
24004f40:	40020940 	.word	0x40020940
24004f44:	1600963f 	.word	0x1600963f
24004f48:	58025940 	.word	0x58025940
24004f4c:	58025430 	.word	0x58025430
24004f50:	fffe000f 	.word	0xfffe000f
24004f54:	a7fdabf8 	.word	0xa7fdabf8
24004f58:	cccccccd 	.word	0xcccccccd

24004f5c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24004f5c:	2800      	cmp	r0, #0
24004f5e:	f000 8270 	beq.w	24005442 <HAL_DMA_Start_IT+0x4e6>
24004f62:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24004f64:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24004f68:	2801      	cmp	r0, #1
24004f6a:	f000 826c 	beq.w	24005446 <HAL_DMA_Start_IT+0x4ea>
24004f6e:	2001      	movs	r0, #1
{
24004f70:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
24004f72:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24004f76:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24004f7a:	4284      	cmp	r4, r0
24004f7c:	d008      	beq.n	24004f90 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24004f82:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004f84:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24004f88:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24004f8c:	bc70      	pop	{r4, r5, r6}
24004f8e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
24004f90:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24004f92:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004f96:	4ea2      	ldr	r6, [pc, #648]	; (24005220 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004f98:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004f9c:	2000      	movs	r0, #0
24004f9e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24004fa2:	6820      	ldr	r0, [r4, #0]
24004fa4:	f020 0001 	bic.w	r0, r0, #1
24004fa8:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004faa:	489e      	ldr	r0, [pc, #632]	; (24005224 <HAL_DMA_Start_IT+0x2c8>)
24004fac:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24004fb0:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004fb4:	42b4      	cmp	r4, r6
24004fb6:	bf18      	it	ne
24004fb8:	4284      	cmpne	r4, r0
24004fba:	f106 0618 	add.w	r6, r6, #24
24004fbe:	bf0c      	ite	eq
24004fc0:	2001      	moveq	r0, #1
24004fc2:	2000      	movne	r0, #0
24004fc4:	42b4      	cmp	r4, r6
24004fc6:	bf08      	it	eq
24004fc8:	f040 0001 	orreq.w	r0, r0, #1
24004fcc:	3618      	adds	r6, #24
24004fce:	42b4      	cmp	r4, r6
24004fd0:	bf08      	it	eq
24004fd2:	f040 0001 	orreq.w	r0, r0, #1
24004fd6:	3618      	adds	r6, #24
24004fd8:	42b4      	cmp	r4, r6
24004fda:	bf08      	it	eq
24004fdc:	f040 0001 	orreq.w	r0, r0, #1
24004fe0:	3618      	adds	r6, #24
24004fe2:	42b4      	cmp	r4, r6
24004fe4:	bf08      	it	eq
24004fe6:	f040 0001 	orreq.w	r0, r0, #1
24004fea:	3618      	adds	r6, #24
24004fec:	42b4      	cmp	r4, r6
24004fee:	bf08      	it	eq
24004ff0:	f040 0001 	orreq.w	r0, r0, #1
24004ff4:	3618      	adds	r6, #24
24004ff6:	42b4      	cmp	r4, r6
24004ff8:	bf08      	it	eq
24004ffa:	f040 0001 	orreq.w	r0, r0, #1
24004ffe:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005002:	42b4      	cmp	r4, r6
24005004:	bf08      	it	eq
24005006:	f040 0001 	orreq.w	r0, r0, #1
2400500a:	3618      	adds	r6, #24
2400500c:	42b4      	cmp	r4, r6
2400500e:	bf08      	it	eq
24005010:	f040 0001 	orreq.w	r0, r0, #1
24005014:	3618      	adds	r6, #24
24005016:	42b4      	cmp	r4, r6
24005018:	bf08      	it	eq
2400501a:	f040 0001 	orreq.w	r0, r0, #1
2400501e:	3618      	adds	r6, #24
24005020:	42b4      	cmp	r4, r6
24005022:	bf08      	it	eq
24005024:	f040 0001 	orreq.w	r0, r0, #1
24005028:	3618      	adds	r6, #24
2400502a:	42b4      	cmp	r4, r6
2400502c:	bf08      	it	eq
2400502e:	f040 0001 	orreq.w	r0, r0, #1
24005032:	3618      	adds	r6, #24
24005034:	42b4      	cmp	r4, r6
24005036:	bf08      	it	eq
24005038:	f040 0001 	orreq.w	r0, r0, #1
2400503c:	3618      	adds	r6, #24
2400503e:	42b4      	cmp	r4, r6
24005040:	bf08      	it	eq
24005042:	f040 0001 	orreq.w	r0, r0, #1
24005046:	3618      	adds	r6, #24
24005048:	42b4      	cmp	r4, r6
2400504a:	bf08      	it	eq
2400504c:	f040 0001 	orreq.w	r0, r0, #1
24005050:	4e75      	ldr	r6, [pc, #468]	; (24005228 <HAL_DMA_Start_IT+0x2cc>)
24005052:	42b4      	cmp	r4, r6
24005054:	bf08      	it	eq
24005056:	f040 0001 	orreq.w	r0, r0, #1
2400505a:	3614      	adds	r6, #20
2400505c:	42b4      	cmp	r4, r6
2400505e:	bf08      	it	eq
24005060:	f040 0001 	orreq.w	r0, r0, #1
24005064:	3614      	adds	r6, #20
24005066:	42b4      	cmp	r4, r6
24005068:	bf08      	it	eq
2400506a:	f040 0001 	orreq.w	r0, r0, #1
2400506e:	3614      	adds	r6, #20
24005070:	42b4      	cmp	r4, r6
24005072:	bf08      	it	eq
24005074:	f040 0001 	orreq.w	r0, r0, #1
24005078:	3614      	adds	r6, #20
2400507a:	42b4      	cmp	r4, r6
2400507c:	bf08      	it	eq
2400507e:	f040 0001 	orreq.w	r0, r0, #1
24005082:	3614      	adds	r6, #20
24005084:	42b4      	cmp	r4, r6
24005086:	bf08      	it	eq
24005088:	f040 0001 	orreq.w	r0, r0, #1
2400508c:	3614      	adds	r6, #20
2400508e:	42b4      	cmp	r4, r6
24005090:	bf08      	it	eq
24005092:	f040 0001 	orreq.w	r0, r0, #1
24005096:	b910      	cbnz	r0, 2400509e <HAL_DMA_Start_IT+0x142>
24005098:	4864      	ldr	r0, [pc, #400]	; (2400522c <HAL_DMA_Start_IT+0x2d0>)
2400509a:	4284      	cmp	r4, r0
2400509c:	d10a      	bne.n	240050b4 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400509e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
240050a2:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
240050a4:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
240050a8:	b110      	cbz	r0, 240050b0 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240050aa:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
240050ae:	6044      	str	r4, [r0, #4]
240050b0:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240050b4:	485b      	ldr	r0, [pc, #364]	; (24005224 <HAL_DMA_Start_IT+0x2c8>)
240050b6:	4e5a      	ldr	r6, [pc, #360]	; (24005220 <HAL_DMA_Start_IT+0x2c4>)
240050b8:	42b4      	cmp	r4, r6
240050ba:	bf18      	it	ne
240050bc:	4284      	cmpne	r4, r0
240050be:	f106 0618 	add.w	r6, r6, #24
240050c2:	bf0c      	ite	eq
240050c4:	2001      	moveq	r0, #1
240050c6:	2000      	movne	r0, #0
240050c8:	42b4      	cmp	r4, r6
240050ca:	bf08      	it	eq
240050cc:	f040 0001 	orreq.w	r0, r0, #1
240050d0:	3618      	adds	r6, #24
240050d2:	42b4      	cmp	r4, r6
240050d4:	bf08      	it	eq
240050d6:	f040 0001 	orreq.w	r0, r0, #1
240050da:	3618      	adds	r6, #24
240050dc:	42b4      	cmp	r4, r6
240050de:	bf08      	it	eq
240050e0:	f040 0001 	orreq.w	r0, r0, #1
240050e4:	3618      	adds	r6, #24
240050e6:	42b4      	cmp	r4, r6
240050e8:	bf08      	it	eq
240050ea:	f040 0001 	orreq.w	r0, r0, #1
240050ee:	3618      	adds	r6, #24
240050f0:	42b4      	cmp	r4, r6
240050f2:	bf08      	it	eq
240050f4:	f040 0001 	orreq.w	r0, r0, #1
240050f8:	3618      	adds	r6, #24
240050fa:	42b4      	cmp	r4, r6
240050fc:	bf08      	it	eq
240050fe:	f040 0001 	orreq.w	r0, r0, #1
24005102:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005106:	42b4      	cmp	r4, r6
24005108:	bf08      	it	eq
2400510a:	f040 0001 	orreq.w	r0, r0, #1
2400510e:	3618      	adds	r6, #24
24005110:	42b4      	cmp	r4, r6
24005112:	bf08      	it	eq
24005114:	f040 0001 	orreq.w	r0, r0, #1
24005118:	3618      	adds	r6, #24
2400511a:	42b4      	cmp	r4, r6
2400511c:	bf08      	it	eq
2400511e:	f040 0001 	orreq.w	r0, r0, #1
24005122:	3618      	adds	r6, #24
24005124:	42b4      	cmp	r4, r6
24005126:	bf08      	it	eq
24005128:	f040 0001 	orreq.w	r0, r0, #1
2400512c:	3618      	adds	r6, #24
2400512e:	42b4      	cmp	r4, r6
24005130:	bf08      	it	eq
24005132:	f040 0001 	orreq.w	r0, r0, #1
24005136:	3618      	adds	r6, #24
24005138:	42b4      	cmp	r4, r6
2400513a:	bf08      	it	eq
2400513c:	f040 0001 	orreq.w	r0, r0, #1
24005140:	3618      	adds	r6, #24
24005142:	42b4      	cmp	r4, r6
24005144:	bf08      	it	eq
24005146:	f040 0001 	orreq.w	r0, r0, #1
2400514a:	b918      	cbnz	r0, 24005154 <HAL_DMA_Start_IT+0x1f8>
2400514c:	4838      	ldr	r0, [pc, #224]	; (24005230 <HAL_DMA_Start_IT+0x2d4>)
2400514e:	4284      	cmp	r4, r0
24005150:	f040 817b 	bne.w	2400544a <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005154:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005158:	f000 041f 	and.w	r4, r0, #31
2400515c:	203f      	movs	r0, #63	; 0x3f
2400515e:	40a0      	lsls	r0, r4
24005160:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24005162:	f8dc 4000 	ldr.w	r4, [ip]
24005166:	6820      	ldr	r0, [r4, #0]
24005168:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
2400516c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400516e:	f8dc 0000 	ldr.w	r0, [ip]
24005172:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005174:	f8dc 3008 	ldr.w	r3, [ip, #8]
24005178:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2400517a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400517e:	f000 815b 	beq.w	24005438 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24005182:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005184:	f8dc 3000 	ldr.w	r3, [ip]
24005188:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400518a:	f8dc 4000 	ldr.w	r4, [ip]
2400518e:	4b25      	ldr	r3, [pc, #148]	; (24005224 <HAL_DMA_Start_IT+0x2c8>)
24005190:	4923      	ldr	r1, [pc, #140]	; (24005220 <HAL_DMA_Start_IT+0x2c4>)
24005192:	4a28      	ldr	r2, [pc, #160]	; (24005234 <HAL_DMA_Start_IT+0x2d8>)
24005194:	428c      	cmp	r4, r1
24005196:	bf18      	it	ne
24005198:	429c      	cmpne	r4, r3
2400519a:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400519e:	bf0c      	ite	eq
240051a0:	2301      	moveq	r3, #1
240051a2:	2300      	movne	r3, #0
240051a4:	4294      	cmp	r4, r2
240051a6:	bf08      	it	eq
240051a8:	f043 0301 	orreq.w	r3, r3, #1
240051ac:	3230      	adds	r2, #48	; 0x30
240051ae:	428c      	cmp	r4, r1
240051b0:	bf08      	it	eq
240051b2:	f043 0301 	orreq.w	r3, r3, #1
240051b6:	3130      	adds	r1, #48	; 0x30
240051b8:	4294      	cmp	r4, r2
240051ba:	bf08      	it	eq
240051bc:	f043 0301 	orreq.w	r3, r3, #1
240051c0:	3230      	adds	r2, #48	; 0x30
240051c2:	428c      	cmp	r4, r1
240051c4:	bf08      	it	eq
240051c6:	f043 0301 	orreq.w	r3, r3, #1
240051ca:	3130      	adds	r1, #48	; 0x30
240051cc:	4294      	cmp	r4, r2
240051ce:	bf08      	it	eq
240051d0:	f043 0301 	orreq.w	r3, r3, #1
240051d4:	f502 725c 	add.w	r2, r2, #880	; 0x370
240051d8:	428c      	cmp	r4, r1
240051da:	bf08      	it	eq
240051dc:	f043 0301 	orreq.w	r3, r3, #1
240051e0:	f501 715c 	add.w	r1, r1, #880	; 0x370
240051e4:	4294      	cmp	r4, r2
240051e6:	bf08      	it	eq
240051e8:	f043 0301 	orreq.w	r3, r3, #1
240051ec:	3230      	adds	r2, #48	; 0x30
240051ee:	428c      	cmp	r4, r1
240051f0:	bf08      	it	eq
240051f2:	f043 0301 	orreq.w	r3, r3, #1
240051f6:	3130      	adds	r1, #48	; 0x30
240051f8:	4294      	cmp	r4, r2
240051fa:	bf08      	it	eq
240051fc:	f043 0301 	orreq.w	r3, r3, #1
24005200:	3230      	adds	r2, #48	; 0x30
24005202:	428c      	cmp	r4, r1
24005204:	bf08      	it	eq
24005206:	f043 0301 	orreq.w	r3, r3, #1
2400520a:	3130      	adds	r1, #48	; 0x30
2400520c:	4294      	cmp	r4, r2
2400520e:	bf08      	it	eq
24005210:	f043 0301 	orreq.w	r3, r3, #1
24005214:	3230      	adds	r2, #48	; 0x30
24005216:	428c      	cmp	r4, r1
24005218:	bf08      	it	eq
2400521a:	f043 0301 	orreq.w	r3, r3, #1
2400521e:	e00b      	b.n	24005238 <HAL_DMA_Start_IT+0x2dc>
24005220:	40020028 	.word	0x40020028
24005224:	40020010 	.word	0x40020010
24005228:	58025408 	.word	0x58025408
2400522c:	58025494 	.word	0x58025494
24005230:	400204b8 	.word	0x400204b8
24005234:	40020040 	.word	0x40020040
24005238:	4294      	cmp	r4, r2
2400523a:	bf08      	it	eq
2400523c:	f043 0301 	orreq.w	r3, r3, #1
24005240:	b91b      	cbnz	r3, 2400524a <HAL_DMA_Start_IT+0x2ee>
24005242:	4b9b      	ldr	r3, [pc, #620]	; (240054b0 <HAL_DMA_Start_IT+0x554>)
24005244:	429c      	cmp	r4, r3
24005246:	f040 8143 	bne.w	240054d0 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2400524a:	6823      	ldr	r3, [r4, #0]
2400524c:	f023 031e 	bic.w	r3, r3, #30
24005250:	f043 0316 	orr.w	r3, r3, #22
24005254:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005256:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400525a:	b12b      	cbz	r3, 24005268 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
2400525c:	f8dc 2000 	ldr.w	r2, [ip]
24005260:	6813      	ldr	r3, [r2, #0]
24005262:	f043 0308 	orr.w	r3, r3, #8
24005266:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005268:	f8dc 4000 	ldr.w	r4, [ip]
2400526c:	4b91      	ldr	r3, [pc, #580]	; (240054b4 <HAL_DMA_Start_IT+0x558>)
2400526e:	4992      	ldr	r1, [pc, #584]	; (240054b8 <HAL_DMA_Start_IT+0x55c>)
24005270:	4a92      	ldr	r2, [pc, #584]	; (240054bc <HAL_DMA_Start_IT+0x560>)
24005272:	428c      	cmp	r4, r1
24005274:	bf18      	it	ne
24005276:	429c      	cmpne	r4, r3
24005278:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400527c:	bf0c      	ite	eq
2400527e:	2301      	moveq	r3, #1
24005280:	2300      	movne	r3, #0
24005282:	4294      	cmp	r4, r2
24005284:	bf08      	it	eq
24005286:	f043 0301 	orreq.w	r3, r3, #1
2400528a:	3230      	adds	r2, #48	; 0x30
2400528c:	428c      	cmp	r4, r1
2400528e:	bf08      	it	eq
24005290:	f043 0301 	orreq.w	r3, r3, #1
24005294:	3130      	adds	r1, #48	; 0x30
24005296:	4294      	cmp	r4, r2
24005298:	bf08      	it	eq
2400529a:	f043 0301 	orreq.w	r3, r3, #1
2400529e:	3230      	adds	r2, #48	; 0x30
240052a0:	428c      	cmp	r4, r1
240052a2:	bf08      	it	eq
240052a4:	f043 0301 	orreq.w	r3, r3, #1
240052a8:	3130      	adds	r1, #48	; 0x30
240052aa:	4294      	cmp	r4, r2
240052ac:	bf08      	it	eq
240052ae:	f043 0301 	orreq.w	r3, r3, #1
240052b2:	f502 725c 	add.w	r2, r2, #880	; 0x370
240052b6:	428c      	cmp	r4, r1
240052b8:	bf08      	it	eq
240052ba:	f043 0301 	orreq.w	r3, r3, #1
240052be:	f501 715c 	add.w	r1, r1, #880	; 0x370
240052c2:	4294      	cmp	r4, r2
240052c4:	bf08      	it	eq
240052c6:	f043 0301 	orreq.w	r3, r3, #1
240052ca:	3230      	adds	r2, #48	; 0x30
240052cc:	428c      	cmp	r4, r1
240052ce:	bf08      	it	eq
240052d0:	f043 0301 	orreq.w	r3, r3, #1
240052d4:	3130      	adds	r1, #48	; 0x30
240052d6:	4294      	cmp	r4, r2
240052d8:	bf08      	it	eq
240052da:	f043 0301 	orreq.w	r3, r3, #1
240052de:	3230      	adds	r2, #48	; 0x30
240052e0:	428c      	cmp	r4, r1
240052e2:	bf08      	it	eq
240052e4:	f043 0301 	orreq.w	r3, r3, #1
240052e8:	3130      	adds	r1, #48	; 0x30
240052ea:	4294      	cmp	r4, r2
240052ec:	bf08      	it	eq
240052ee:	f043 0301 	orreq.w	r3, r3, #1
240052f2:	3230      	adds	r2, #48	; 0x30
240052f4:	428c      	cmp	r4, r1
240052f6:	bf08      	it	eq
240052f8:	f043 0301 	orreq.w	r3, r3, #1
240052fc:	3130      	adds	r1, #48	; 0x30
240052fe:	4294      	cmp	r4, r2
24005300:	bf08      	it	eq
24005302:	f043 0301 	orreq.w	r3, r3, #1
24005306:	4a6e      	ldr	r2, [pc, #440]	; (240054c0 <HAL_DMA_Start_IT+0x564>)
24005308:	428c      	cmp	r4, r1
2400530a:	bf08      	it	eq
2400530c:	f043 0301 	orreq.w	r3, r3, #1
24005310:	496c      	ldr	r1, [pc, #432]	; (240054c4 <HAL_DMA_Start_IT+0x568>)
24005312:	4294      	cmp	r4, r2
24005314:	bf08      	it	eq
24005316:	f043 0301 	orreq.w	r3, r3, #1
2400531a:	3228      	adds	r2, #40	; 0x28
2400531c:	428c      	cmp	r4, r1
2400531e:	bf08      	it	eq
24005320:	f043 0301 	orreq.w	r3, r3, #1
24005324:	3128      	adds	r1, #40	; 0x28
24005326:	4294      	cmp	r4, r2
24005328:	bf08      	it	eq
2400532a:	f043 0301 	orreq.w	r3, r3, #1
2400532e:	3228      	adds	r2, #40	; 0x28
24005330:	428c      	cmp	r4, r1
24005332:	bf08      	it	eq
24005334:	f043 0301 	orreq.w	r3, r3, #1
24005338:	3128      	adds	r1, #40	; 0x28
2400533a:	4294      	cmp	r4, r2
2400533c:	bf08      	it	eq
2400533e:	f043 0301 	orreq.w	r3, r3, #1
24005342:	3228      	adds	r2, #40	; 0x28
24005344:	428c      	cmp	r4, r1
24005346:	bf08      	it	eq
24005348:	f043 0301 	orreq.w	r3, r3, #1
2400534c:	4294      	cmp	r4, r2
2400534e:	bf08      	it	eq
24005350:	f043 0301 	orreq.w	r3, r3, #1
24005354:	b913      	cbnz	r3, 2400535c <HAL_DMA_Start_IT+0x400>
24005356:	4b5c      	ldr	r3, [pc, #368]	; (240054c8 <HAL_DMA_Start_IT+0x56c>)
24005358:	429c      	cmp	r4, r3
2400535a:	d111      	bne.n	24005380 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2400535c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24005360:	681a      	ldr	r2, [r3, #0]
24005362:	03d2      	lsls	r2, r2, #15
24005364:	d503      	bpl.n	2400536e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24005366:	681a      	ldr	r2, [r3, #0]
24005368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400536c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400536e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
24005372:	b11b      	cbz	r3, 2400537c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24005374:	681a      	ldr	r2, [r3, #0]
24005376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400537a:	601a      	str	r2, [r3, #0]
2400537c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
24005380:	4b4c      	ldr	r3, [pc, #304]	; (240054b4 <HAL_DMA_Start_IT+0x558>)
24005382:	494d      	ldr	r1, [pc, #308]	; (240054b8 <HAL_DMA_Start_IT+0x55c>)
24005384:	4a4d      	ldr	r2, [pc, #308]	; (240054bc <HAL_DMA_Start_IT+0x560>)
24005386:	428c      	cmp	r4, r1
24005388:	bf18      	it	ne
2400538a:	429c      	cmpne	r4, r3
2400538c:	484f      	ldr	r0, [pc, #316]	; (240054cc <HAL_DMA_Start_IT+0x570>)
2400538e:	f101 0160 	add.w	r1, r1, #96	; 0x60
24005392:	bf0c      	ite	eq
24005394:	2301      	moveq	r3, #1
24005396:	2300      	movne	r3, #0
24005398:	4294      	cmp	r4, r2
2400539a:	bf08      	it	eq
2400539c:	f043 0301 	orreq.w	r3, r3, #1
240053a0:	3230      	adds	r2, #48	; 0x30
240053a2:	4284      	cmp	r4, r0
240053a4:	bf08      	it	eq
240053a6:	f043 0301 	orreq.w	r3, r3, #1
240053aa:	3060      	adds	r0, #96	; 0x60
240053ac:	4294      	cmp	r4, r2
240053ae:	bf08      	it	eq
240053b0:	f043 0301 	orreq.w	r3, r3, #1
240053b4:	3230      	adds	r2, #48	; 0x30
240053b6:	428c      	cmp	r4, r1
240053b8:	bf08      	it	eq
240053ba:	f043 0301 	orreq.w	r3, r3, #1
240053be:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
240053c2:	4294      	cmp	r4, r2
240053c4:	bf08      	it	eq
240053c6:	f043 0301 	orreq.w	r3, r3, #1
240053ca:	f502 725c 	add.w	r2, r2, #880	; 0x370
240053ce:	4284      	cmp	r4, r0
240053d0:	bf08      	it	eq
240053d2:	f043 0301 	orreq.w	r3, r3, #1
240053d6:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
240053da:	4294      	cmp	r4, r2
240053dc:	bf08      	it	eq
240053de:	f043 0301 	orreq.w	r3, r3, #1
240053e2:	3230      	adds	r2, #48	; 0x30
240053e4:	428c      	cmp	r4, r1
240053e6:	bf08      	it	eq
240053e8:	f043 0301 	orreq.w	r3, r3, #1
240053ec:	3160      	adds	r1, #96	; 0x60
240053ee:	4294      	cmp	r4, r2
240053f0:	bf08      	it	eq
240053f2:	f043 0301 	orreq.w	r3, r3, #1
240053f6:	3230      	adds	r2, #48	; 0x30
240053f8:	4284      	cmp	r4, r0
240053fa:	bf08      	it	eq
240053fc:	f043 0301 	orreq.w	r3, r3, #1
24005400:	4294      	cmp	r4, r2
24005402:	bf08      	it	eq
24005404:	f043 0301 	orreq.w	r3, r3, #1
24005408:	3230      	adds	r2, #48	; 0x30
2400540a:	428c      	cmp	r4, r1
2400540c:	bf08      	it	eq
2400540e:	f043 0301 	orreq.w	r3, r3, #1
24005412:	4294      	cmp	r4, r2
24005414:	bf08      	it	eq
24005416:	f043 0301 	orreq.w	r3, r3, #1
2400541a:	b933      	cbnz	r3, 2400542a <HAL_DMA_Start_IT+0x4ce>
2400541c:	3060      	adds	r0, #96	; 0x60
2400541e:	1a20      	subs	r0, r4, r0
24005420:	fab0 f080 	clz	r0, r0
24005424:	0940      	lsrs	r0, r0, #5
24005426:	2800      	cmp	r0, #0
24005428:	d03d      	beq.n	240054a6 <HAL_DMA_Start_IT+0x54a>
2400542a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400542c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
2400542e:	f043 0301 	orr.w	r3, r3, #1
24005432:	6023      	str	r3, [r4, #0]
}
24005434:	bc70      	pop	{r4, r5, r6}
24005436:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005438:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
2400543a:	f8dc 3000 	ldr.w	r3, [ip]
2400543e:	60d9      	str	r1, [r3, #12]
24005440:	e6a3      	b.n	2400518a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
24005442:	2001      	movs	r0, #1
24005444:	4770      	bx	lr
  __HAL_LOCK(hdma);
24005446:	2002      	movs	r0, #2
}
24005448:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400544a:	481d      	ldr	r0, [pc, #116]	; (240054c0 <HAL_DMA_Start_IT+0x564>)
2400544c:	4e1d      	ldr	r6, [pc, #116]	; (240054c4 <HAL_DMA_Start_IT+0x568>)
2400544e:	42b4      	cmp	r4, r6
24005450:	bf18      	it	ne
24005452:	4284      	cmpne	r4, r0
24005454:	f106 0614 	add.w	r6, r6, #20
24005458:	bf0c      	ite	eq
2400545a:	2001      	moveq	r0, #1
2400545c:	2000      	movne	r0, #0
2400545e:	42b4      	cmp	r4, r6
24005460:	bf08      	it	eq
24005462:	f040 0001 	orreq.w	r0, r0, #1
24005466:	3614      	adds	r6, #20
24005468:	42b4      	cmp	r4, r6
2400546a:	bf08      	it	eq
2400546c:	f040 0001 	orreq.w	r0, r0, #1
24005470:	3614      	adds	r6, #20
24005472:	42b4      	cmp	r4, r6
24005474:	bf08      	it	eq
24005476:	f040 0001 	orreq.w	r0, r0, #1
2400547a:	3614      	adds	r6, #20
2400547c:	42b4      	cmp	r4, r6
2400547e:	bf08      	it	eq
24005480:	f040 0001 	orreq.w	r0, r0, #1
24005484:	3614      	adds	r6, #20
24005486:	42b4      	cmp	r4, r6
24005488:	bf08      	it	eq
2400548a:	f040 0001 	orreq.w	r0, r0, #1
2400548e:	b910      	cbnz	r0, 24005496 <HAL_DMA_Start_IT+0x53a>
24005490:	480d      	ldr	r0, [pc, #52]	; (240054c8 <HAL_DMA_Start_IT+0x56c>)
24005492:	4284      	cmp	r4, r0
24005494:	d11c      	bne.n	240054d0 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005496:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
2400549a:	f000 041f 	and.w	r4, r0, #31
2400549e:	2001      	movs	r0, #1
240054a0:	40a0      	lsls	r0, r4
240054a2:	6068      	str	r0, [r5, #4]
240054a4:	e663      	b.n	2400516e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
240054a6:	6823      	ldr	r3, [r4, #0]
240054a8:	f043 0301 	orr.w	r3, r3, #1
240054ac:	6023      	str	r3, [r4, #0]
240054ae:	e56d      	b.n	24004f8c <HAL_DMA_Start_IT+0x30>
240054b0:	400204b8 	.word	0x400204b8
240054b4:	40020010 	.word	0x40020010
240054b8:	40020028 	.word	0x40020028
240054bc:	40020040 	.word	0x40020040
240054c0:	58025408 	.word	0x58025408
240054c4:	5802541c 	.word	0x5802541c
240054c8:	58025494 	.word	0x58025494
240054cc:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
240054d0:	6823      	ldr	r3, [r4, #0]
240054d2:	f023 030e 	bic.w	r3, r3, #14
240054d6:	f043 030a 	orr.w	r3, r3, #10
240054da:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
240054dc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
240054e0:	2b00      	cmp	r3, #0
240054e2:	f43f aec1 	beq.w	24005268 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
240054e6:	f8dc 2000 	ldr.w	r2, [ip]
240054ea:	6813      	ldr	r3, [r2, #0]
240054ec:	f043 0304 	orr.w	r3, r3, #4
240054f0:	6013      	str	r3, [r2, #0]
240054f2:	e6b9      	b.n	24005268 <HAL_DMA_Start_IT+0x30c>

240054f4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
240054f4:	2800      	cmp	r0, #0
240054f6:	d065      	beq.n	240055c4 <HAL_DMA_Abort_IT+0xd0>
{
240054f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
240054fc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24005500:	4603      	mov	r3, r0
24005502:	2a02      	cmp	r2, #2
24005504:	d159      	bne.n	240055ba <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005506:	6801      	ldr	r1, [r0, #0]
24005508:	4883      	ldr	r0, [pc, #524]	; (24005718 <HAL_DMA_Abort_IT+0x224>)
2400550a:	4281      	cmp	r1, r0
2400550c:	d04b      	beq.n	240055a6 <HAL_DMA_Abort_IT+0xb2>
2400550e:	4c83      	ldr	r4, [pc, #524]	; (2400571c <HAL_DMA_Abort_IT+0x228>)
24005510:	42a1      	cmp	r1, r4
24005512:	d048      	beq.n	240055a6 <HAL_DMA_Abort_IT+0xb2>
24005514:	f8df a228 	ldr.w	sl, [pc, #552]	; 24005740 <HAL_DMA_Abort_IT+0x24c>
24005518:	f8df b214 	ldr.w	fp, [pc, #532]	; 24005730 <HAL_DMA_Abort_IT+0x23c>
2400551c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 24005744 <HAL_DMA_Abort_IT+0x250>
24005520:	4559      	cmp	r1, fp
24005522:	bf18      	it	ne
24005524:	4551      	cmpne	r1, sl
24005526:	f8df 8220 	ldr.w	r8, [pc, #544]	; 24005748 <HAL_DMA_Abort_IT+0x254>
2400552a:	f8df e220 	ldr.w	lr, [pc, #544]	; 2400574c <HAL_DMA_Abort_IT+0x258>
2400552e:	bf0c      	ite	eq
24005530:	2201      	moveq	r2, #1
24005532:	2200      	movne	r2, #0
24005534:	f8df c218 	ldr.w	ip, [pc, #536]	; 24005750 <HAL_DMA_Abort_IT+0x25c>
24005538:	4549      	cmp	r1, r9
2400553a:	bf08      	it	eq
2400553c:	f042 0201 	orreq.w	r2, r2, #1
24005540:	4d77      	ldr	r5, [pc, #476]	; (24005720 <HAL_DMA_Abort_IT+0x22c>)
24005542:	4f78      	ldr	r7, [pc, #480]	; (24005724 <HAL_DMA_Abort_IT+0x230>)
24005544:	4541      	cmp	r1, r8
24005546:	bf08      	it	eq
24005548:	f042 0201 	orreq.w	r2, r2, #1
2400554c:	4e76      	ldr	r6, [pc, #472]	; (24005728 <HAL_DMA_Abort_IT+0x234>)
2400554e:	4571      	cmp	r1, lr
24005550:	bf08      	it	eq
24005552:	f042 0201 	orreq.w	r2, r2, #1
24005556:	4561      	cmp	r1, ip
24005558:	bf08      	it	eq
2400555a:	f042 0201 	orreq.w	r2, r2, #1
2400555e:	42a9      	cmp	r1, r5
24005560:	bf08      	it	eq
24005562:	f042 0201 	orreq.w	r2, r2, #1
24005566:	3518      	adds	r5, #24
24005568:	42a9      	cmp	r1, r5
2400556a:	bf08      	it	eq
2400556c:	f042 0201 	orreq.w	r2, r2, #1
24005570:	3518      	adds	r5, #24
24005572:	42a9      	cmp	r1, r5
24005574:	bf08      	it	eq
24005576:	f042 0201 	orreq.w	r2, r2, #1
2400557a:	3518      	adds	r5, #24
2400557c:	42a9      	cmp	r1, r5
2400557e:	bf08      	it	eq
24005580:	f042 0201 	orreq.w	r2, r2, #1
24005584:	3548      	adds	r5, #72	; 0x48
24005586:	42b9      	cmp	r1, r7
24005588:	bf08      	it	eq
2400558a:	f042 0201 	orreq.w	r2, r2, #1
2400558e:	42b1      	cmp	r1, r6
24005590:	bf08      	it	eq
24005592:	f042 0201 	orreq.w	r2, r2, #1
24005596:	42a9      	cmp	r1, r5
24005598:	bf08      	it	eq
2400559a:	f042 0201 	orreq.w	r2, r2, #1
2400559e:	b912      	cbnz	r2, 240055a6 <HAL_DMA_Abort_IT+0xb2>
240055a0:	4a62      	ldr	r2, [pc, #392]	; (2400572c <HAL_DMA_Abort_IT+0x238>)
240055a2:	4291      	cmp	r1, r2
240055a4:	d110      	bne.n	240055c8 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
240055a6:	2204      	movs	r2, #4
  return HAL_OK;
240055a8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
240055aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
240055ae:	680b      	ldr	r3, [r1, #0]
240055b0:	f023 0301 	bic.w	r3, r3, #1
240055b4:	600b      	str	r3, [r1, #0]
}
240055b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240055ba:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
240055bc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240055be:	655a      	str	r2, [r3, #84]	; 0x54
}
240055c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
240055c4:	2001      	movs	r0, #1
}
240055c6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240055c8:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240055ca:	4c54      	ldr	r4, [pc, #336]	; (2400571c <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240055cc:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240055d0:	4857      	ldr	r0, [pc, #348]	; (24005730 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240055d2:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
240055d4:	6819      	ldr	r1, [r3, #0]
240055d6:	680a      	ldr	r2, [r1, #0]
240055d8:	f022 0201 	bic.w	r2, r2, #1
240055dc:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240055de:	4a4e      	ldr	r2, [pc, #312]	; (24005718 <HAL_DMA_Abort_IT+0x224>)
240055e0:	6819      	ldr	r1, [r3, #0]
240055e2:	42a1      	cmp	r1, r4
240055e4:	bf18      	it	ne
240055e6:	4291      	cmpne	r1, r2
240055e8:	f104 0430 	add.w	r4, r4, #48	; 0x30
240055ec:	bf0c      	ite	eq
240055ee:	2201      	moveq	r2, #1
240055f0:	2200      	movne	r2, #0
240055f2:	4281      	cmp	r1, r0
240055f4:	bf08      	it	eq
240055f6:	f042 0201 	orreq.w	r2, r2, #1
240055fa:	3030      	adds	r0, #48	; 0x30
240055fc:	42a1      	cmp	r1, r4
240055fe:	bf08      	it	eq
24005600:	f042 0201 	orreq.w	r2, r2, #1
24005604:	3430      	adds	r4, #48	; 0x30
24005606:	4281      	cmp	r1, r0
24005608:	bf08      	it	eq
2400560a:	f042 0201 	orreq.w	r2, r2, #1
2400560e:	3030      	adds	r0, #48	; 0x30
24005610:	42a1      	cmp	r1, r4
24005612:	bf08      	it	eq
24005614:	f042 0201 	orreq.w	r2, r2, #1
24005618:	3430      	adds	r4, #48	; 0x30
2400561a:	4281      	cmp	r1, r0
2400561c:	bf08      	it	eq
2400561e:	f042 0201 	orreq.w	r2, r2, #1
24005622:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005626:	42a1      	cmp	r1, r4
24005628:	bf08      	it	eq
2400562a:	f042 0201 	orreq.w	r2, r2, #1
2400562e:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005632:	4281      	cmp	r1, r0
24005634:	bf08      	it	eq
24005636:	f042 0201 	orreq.w	r2, r2, #1
2400563a:	3030      	adds	r0, #48	; 0x30
2400563c:	42a1      	cmp	r1, r4
2400563e:	bf08      	it	eq
24005640:	f042 0201 	orreq.w	r2, r2, #1
24005644:	3430      	adds	r4, #48	; 0x30
24005646:	4281      	cmp	r1, r0
24005648:	bf08      	it	eq
2400564a:	f042 0201 	orreq.w	r2, r2, #1
2400564e:	3030      	adds	r0, #48	; 0x30
24005650:	42a1      	cmp	r1, r4
24005652:	bf08      	it	eq
24005654:	f042 0201 	orreq.w	r2, r2, #1
24005658:	3430      	adds	r4, #48	; 0x30
2400565a:	4281      	cmp	r1, r0
2400565c:	bf08      	it	eq
2400565e:	f042 0201 	orreq.w	r2, r2, #1
24005662:	3030      	adds	r0, #48	; 0x30
24005664:	42a1      	cmp	r1, r4
24005666:	bf08      	it	eq
24005668:	f042 0201 	orreq.w	r2, r2, #1
2400566c:	3430      	adds	r4, #48	; 0x30
2400566e:	4281      	cmp	r1, r0
24005670:	bf08      	it	eq
24005672:	f042 0201 	orreq.w	r2, r2, #1
24005676:	482f      	ldr	r0, [pc, #188]	; (24005734 <HAL_DMA_Abort_IT+0x240>)
24005678:	42a1      	cmp	r1, r4
2400567a:	bf08      	it	eq
2400567c:	f042 0201 	orreq.w	r2, r2, #1
24005680:	4c2d      	ldr	r4, [pc, #180]	; (24005738 <HAL_DMA_Abort_IT+0x244>)
24005682:	4281      	cmp	r1, r0
24005684:	bf08      	it	eq
24005686:	f042 0201 	orreq.w	r2, r2, #1
2400568a:	3028      	adds	r0, #40	; 0x28
2400568c:	42a1      	cmp	r1, r4
2400568e:	bf08      	it	eq
24005690:	f042 0201 	orreq.w	r2, r2, #1
24005694:	3428      	adds	r4, #40	; 0x28
24005696:	4281      	cmp	r1, r0
24005698:	bf08      	it	eq
2400569a:	f042 0201 	orreq.w	r2, r2, #1
2400569e:	3028      	adds	r0, #40	; 0x28
240056a0:	42a1      	cmp	r1, r4
240056a2:	bf08      	it	eq
240056a4:	f042 0201 	orreq.w	r2, r2, #1
240056a8:	3428      	adds	r4, #40	; 0x28
240056aa:	4281      	cmp	r1, r0
240056ac:	bf08      	it	eq
240056ae:	f042 0201 	orreq.w	r2, r2, #1
240056b2:	3028      	adds	r0, #40	; 0x28
240056b4:	42a1      	cmp	r1, r4
240056b6:	bf08      	it	eq
240056b8:	f042 0201 	orreq.w	r2, r2, #1
240056bc:	4281      	cmp	r1, r0
240056be:	bf08      	it	eq
240056c0:	f042 0201 	orreq.w	r2, r2, #1
240056c4:	b912      	cbnz	r2, 240056cc <HAL_DMA_Abort_IT+0x1d8>
240056c6:	4a1d      	ldr	r2, [pc, #116]	; (2400573c <HAL_DMA_Abort_IT+0x248>)
240056c8:	4291      	cmp	r1, r2
240056ca:	d117      	bne.n	240056fc <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240056cc:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240056ce:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240056d0:	6801      	ldr	r1, [r0, #0]
240056d2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240056d6:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240056d8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240056dc:	f001 011f 	and.w	r1, r1, #31
240056e0:	408a      	lsls	r2, r1
240056e2:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240056e4:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
240056e8:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
240056ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
240056ec:	b132      	cbz	r2, 240056fc <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240056ee:	6811      	ldr	r1, [r2, #0]
240056f0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240056f4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240056f6:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
240056fa:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
240056fc:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
240056fe:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24005700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24005702:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24005706:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
2400570a:	b11a      	cbz	r2, 24005714 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
2400570c:	4618      	mov	r0, r3
2400570e:	4790      	blx	r2
  return HAL_OK;
24005710:	4620      	mov	r0, r4
24005712:	e755      	b.n	240055c0 <HAL_DMA_Abort_IT+0xcc>
24005714:	4610      	mov	r0, r2
24005716:	e753      	b.n	240055c0 <HAL_DMA_Abort_IT+0xcc>
24005718:	40020010 	.word	0x40020010
2400571c:	40020028 	.word	0x40020028
24005720:	40020410 	.word	0x40020410
24005724:	40020470 	.word	0x40020470
24005728:	40020488 	.word	0x40020488
2400572c:	400204b8 	.word	0x400204b8
24005730:	40020040 	.word	0x40020040
24005734:	58025408 	.word	0x58025408
24005738:	5802541c 	.word	0x5802541c
2400573c:	58025494 	.word	0x58025494
24005740:	40020058 	.word	0x40020058
24005744:	40020070 	.word	0x40020070
24005748:	40020088 	.word	0x40020088
2400574c:	400200a0 	.word	0x400200a0
24005750:	400200b8 	.word	0x400200b8

24005754 <HAL_DMA_IRQHandler>:
{
24005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
24005758:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
2400575a:	4b9e      	ldr	r3, [pc, #632]	; (240059d4 <HAL_DMA_IRQHandler+0x280>)
{
2400575c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400575e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
24005760:	681e      	ldr	r6, [r3, #0]
{
24005762:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
24005764:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005766:	6803      	ldr	r3, [r0, #0]
24005768:	4a9b      	ldr	r2, [pc, #620]	; (240059d8 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
2400576a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400576c:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
2400576e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005770:	d048      	beq.n	24005804 <HAL_DMA_IRQHandler+0xb0>
24005772:	3218      	adds	r2, #24
24005774:	4293      	cmp	r3, r2
24005776:	d045      	beq.n	24005804 <HAL_DMA_IRQHandler+0xb0>
24005778:	3218      	adds	r2, #24
2400577a:	4f98      	ldr	r7, [pc, #608]	; (240059dc <HAL_DMA_IRQHandler+0x288>)
2400577c:	42bb      	cmp	r3, r7
2400577e:	bf18      	it	ne
24005780:	4293      	cmpne	r3, r2
24005782:	f107 0718 	add.w	r7, r7, #24
24005786:	bf0c      	ite	eq
24005788:	2201      	moveq	r2, #1
2400578a:	2200      	movne	r2, #0
2400578c:	42bb      	cmp	r3, r7
2400578e:	bf08      	it	eq
24005790:	f042 0201 	orreq.w	r2, r2, #1
24005794:	3718      	adds	r7, #24
24005796:	42bb      	cmp	r3, r7
24005798:	bf08      	it	eq
2400579a:	f042 0201 	orreq.w	r2, r2, #1
2400579e:	3718      	adds	r7, #24
240057a0:	42bb      	cmp	r3, r7
240057a2:	bf08      	it	eq
240057a4:	f042 0201 	orreq.w	r2, r2, #1
240057a8:	3718      	adds	r7, #24
240057aa:	42bb      	cmp	r3, r7
240057ac:	bf08      	it	eq
240057ae:	f042 0201 	orreq.w	r2, r2, #1
240057b2:	f507 7756 	add.w	r7, r7, #856	; 0x358
240057b6:	42bb      	cmp	r3, r7
240057b8:	bf08      	it	eq
240057ba:	f042 0201 	orreq.w	r2, r2, #1
240057be:	3718      	adds	r7, #24
240057c0:	42bb      	cmp	r3, r7
240057c2:	bf08      	it	eq
240057c4:	f042 0201 	orreq.w	r2, r2, #1
240057c8:	3718      	adds	r7, #24
240057ca:	42bb      	cmp	r3, r7
240057cc:	bf08      	it	eq
240057ce:	f042 0201 	orreq.w	r2, r2, #1
240057d2:	3718      	adds	r7, #24
240057d4:	42bb      	cmp	r3, r7
240057d6:	bf08      	it	eq
240057d8:	f042 0201 	orreq.w	r2, r2, #1
240057dc:	3718      	adds	r7, #24
240057de:	42bb      	cmp	r3, r7
240057e0:	bf08      	it	eq
240057e2:	f042 0201 	orreq.w	r2, r2, #1
240057e6:	3718      	adds	r7, #24
240057e8:	42bb      	cmp	r3, r7
240057ea:	bf08      	it	eq
240057ec:	f042 0201 	orreq.w	r2, r2, #1
240057f0:	3718      	adds	r7, #24
240057f2:	42bb      	cmp	r3, r7
240057f4:	bf08      	it	eq
240057f6:	f042 0201 	orreq.w	r2, r2, #1
240057fa:	b91a      	cbnz	r2, 24005804 <HAL_DMA_IRQHandler+0xb0>
240057fc:	4a78      	ldr	r2, [pc, #480]	; (240059e0 <HAL_DMA_IRQHandler+0x28c>)
240057fe:	4293      	cmp	r3, r2
24005800:	f040 82b3 	bne.w	24005d6a <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005804:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
24005808:	2208      	movs	r2, #8
2400580a:	f000 011f 	and.w	r1, r0, #31
2400580e:	408a      	lsls	r2, r1
24005810:	4222      	tst	r2, r4
24005812:	f040 81a5 	bne.w	24005b60 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005816:	fa24 f201 	lsr.w	r2, r4, r1
2400581a:	07d2      	lsls	r2, r2, #31
2400581c:	d511      	bpl.n	24005842 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
2400581e:	695a      	ldr	r2, [r3, #20]
24005820:	0612      	lsls	r2, r2, #24
24005822:	f140 8269 	bpl.w	24005cf8 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005826:	2301      	movs	r3, #1
24005828:	fa03 f101 	lsl.w	r1, r3, r1
2400582c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2400582e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005832:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005836:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400583a:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2400583e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005842:	f04f 0c04 	mov.w	ip, #4
24005846:	fa0c fc01 	lsl.w	ip, ip, r1
2400584a:	ea1c 0f04 	tst.w	ip, r4
2400584e:	d062      	beq.n	24005916 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005850:	f8d8 2000 	ldr.w	r2, [r8]
24005854:	4f60      	ldr	r7, [pc, #384]	; (240059d8 <HAL_DMA_IRQHandler+0x284>)
24005856:	4b63      	ldr	r3, [pc, #396]	; (240059e4 <HAL_DMA_IRQHandler+0x290>)
24005858:	429a      	cmp	r2, r3
2400585a:	bf18      	it	ne
2400585c:	42ba      	cmpne	r2, r7
2400585e:	f103 0318 	add.w	r3, r3, #24
24005862:	bf0c      	ite	eq
24005864:	2701      	moveq	r7, #1
24005866:	2700      	movne	r7, #0
24005868:	429a      	cmp	r2, r3
2400586a:	bf08      	it	eq
2400586c:	f047 0701 	orreq.w	r7, r7, #1
24005870:	3318      	adds	r3, #24
24005872:	429a      	cmp	r2, r3
24005874:	bf08      	it	eq
24005876:	f047 0701 	orreq.w	r7, r7, #1
2400587a:	3318      	adds	r3, #24
2400587c:	429a      	cmp	r2, r3
2400587e:	bf08      	it	eq
24005880:	f047 0701 	orreq.w	r7, r7, #1
24005884:	3318      	adds	r3, #24
24005886:	429a      	cmp	r2, r3
24005888:	bf08      	it	eq
2400588a:	f047 0701 	orreq.w	r7, r7, #1
2400588e:	3318      	adds	r3, #24
24005890:	429a      	cmp	r2, r3
24005892:	bf08      	it	eq
24005894:	f047 0701 	orreq.w	r7, r7, #1
24005898:	3318      	adds	r3, #24
2400589a:	429a      	cmp	r2, r3
2400589c:	bf08      	it	eq
2400589e:	f047 0701 	orreq.w	r7, r7, #1
240058a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
240058a6:	429a      	cmp	r2, r3
240058a8:	bf08      	it	eq
240058aa:	f047 0701 	orreq.w	r7, r7, #1
240058ae:	3318      	adds	r3, #24
240058b0:	429a      	cmp	r2, r3
240058b2:	bf08      	it	eq
240058b4:	f047 0701 	orreq.w	r7, r7, #1
240058b8:	3318      	adds	r3, #24
240058ba:	429a      	cmp	r2, r3
240058bc:	bf08      	it	eq
240058be:	f047 0701 	orreq.w	r7, r7, #1
240058c2:	3318      	adds	r3, #24
240058c4:	429a      	cmp	r2, r3
240058c6:	bf08      	it	eq
240058c8:	f047 0701 	orreq.w	r7, r7, #1
240058cc:	3318      	adds	r3, #24
240058ce:	429a      	cmp	r2, r3
240058d0:	bf08      	it	eq
240058d2:	f047 0701 	orreq.w	r7, r7, #1
240058d6:	3318      	adds	r3, #24
240058d8:	429a      	cmp	r2, r3
240058da:	bf08      	it	eq
240058dc:	f047 0701 	orreq.w	r7, r7, #1
240058e0:	3318      	adds	r3, #24
240058e2:	429a      	cmp	r2, r3
240058e4:	bf08      	it	eq
240058e6:	f047 0701 	orreq.w	r7, r7, #1
240058ea:	4613      	mov	r3, r2
240058ec:	b91f      	cbnz	r7, 240058f6 <HAL_DMA_IRQHandler+0x1a2>
240058ee:	4f3c      	ldr	r7, [pc, #240]	; (240059e0 <HAL_DMA_IRQHandler+0x28c>)
240058f0:	42ba      	cmp	r2, r7
240058f2:	f040 8277 	bne.w	24005de4 <HAL_DMA_IRQHandler+0x690>
240058f6:	681a      	ldr	r2, [r3, #0]
240058f8:	0797      	lsls	r7, r2, #30
240058fa:	f140 8209 	bpl.w	24005d10 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
240058fe:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005902:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005906:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2400590a:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400590e:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005912:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005916:	f04f 0c10 	mov.w	ip, #16
2400591a:	fa0c fc01 	lsl.w	ip, ip, r1
2400591e:	ea1c 0f04 	tst.w	ip, r4
24005922:	d079      	beq.n	24005a18 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005924:	f8d8 2000 	ldr.w	r2, [r8]
24005928:	4f2b      	ldr	r7, [pc, #172]	; (240059d8 <HAL_DMA_IRQHandler+0x284>)
2400592a:	4b2e      	ldr	r3, [pc, #184]	; (240059e4 <HAL_DMA_IRQHandler+0x290>)
2400592c:	429a      	cmp	r2, r3
2400592e:	bf18      	it	ne
24005930:	42ba      	cmpne	r2, r7
24005932:	f103 0318 	add.w	r3, r3, #24
24005936:	bf0c      	ite	eq
24005938:	2701      	moveq	r7, #1
2400593a:	2700      	movne	r7, #0
2400593c:	429a      	cmp	r2, r3
2400593e:	bf08      	it	eq
24005940:	f047 0701 	orreq.w	r7, r7, #1
24005944:	3318      	adds	r3, #24
24005946:	429a      	cmp	r2, r3
24005948:	bf08      	it	eq
2400594a:	f047 0701 	orreq.w	r7, r7, #1
2400594e:	3318      	adds	r3, #24
24005950:	429a      	cmp	r2, r3
24005952:	bf08      	it	eq
24005954:	f047 0701 	orreq.w	r7, r7, #1
24005958:	3318      	adds	r3, #24
2400595a:	429a      	cmp	r2, r3
2400595c:	bf08      	it	eq
2400595e:	f047 0701 	orreq.w	r7, r7, #1
24005962:	3318      	adds	r3, #24
24005964:	429a      	cmp	r2, r3
24005966:	bf08      	it	eq
24005968:	f047 0701 	orreq.w	r7, r7, #1
2400596c:	3318      	adds	r3, #24
2400596e:	429a      	cmp	r2, r3
24005970:	bf08      	it	eq
24005972:	f047 0701 	orreq.w	r7, r7, #1
24005976:	f503 7356 	add.w	r3, r3, #856	; 0x358
2400597a:	429a      	cmp	r2, r3
2400597c:	bf08      	it	eq
2400597e:	f047 0701 	orreq.w	r7, r7, #1
24005982:	3318      	adds	r3, #24
24005984:	429a      	cmp	r2, r3
24005986:	bf08      	it	eq
24005988:	f047 0701 	orreq.w	r7, r7, #1
2400598c:	3318      	adds	r3, #24
2400598e:	429a      	cmp	r2, r3
24005990:	bf08      	it	eq
24005992:	f047 0701 	orreq.w	r7, r7, #1
24005996:	3318      	adds	r3, #24
24005998:	429a      	cmp	r2, r3
2400599a:	bf08      	it	eq
2400599c:	f047 0701 	orreq.w	r7, r7, #1
240059a0:	3318      	adds	r3, #24
240059a2:	429a      	cmp	r2, r3
240059a4:	bf08      	it	eq
240059a6:	f047 0701 	orreq.w	r7, r7, #1
240059aa:	3318      	adds	r3, #24
240059ac:	429a      	cmp	r2, r3
240059ae:	bf08      	it	eq
240059b0:	f047 0701 	orreq.w	r7, r7, #1
240059b4:	3318      	adds	r3, #24
240059b6:	429a      	cmp	r2, r3
240059b8:	bf08      	it	eq
240059ba:	f047 0701 	orreq.w	r7, r7, #1
240059be:	4613      	mov	r3, r2
240059c0:	b91f      	cbnz	r7, 240059ca <HAL_DMA_IRQHandler+0x276>
240059c2:	4f07      	ldr	r7, [pc, #28]	; (240059e0 <HAL_DMA_IRQHandler+0x28c>)
240059c4:	42ba      	cmp	r2, r7
240059c6:	f040 814b 	bne.w	24005c60 <HAL_DMA_IRQHandler+0x50c>
240059ca:	681a      	ldr	r2, [r3, #0]
240059cc:	0710      	lsls	r0, r2, #28
240059ce:	f140 818c 	bpl.w	24005cea <HAL_DMA_IRQHandler+0x596>
240059d2:	e009      	b.n	240059e8 <HAL_DMA_IRQHandler+0x294>
240059d4:	200006e0 	.word	0x200006e0
240059d8:	40020010 	.word	0x40020010
240059dc:	40020058 	.word	0x40020058
240059e0:	400204b8 	.word	0x400204b8
240059e4:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
240059e8:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240059ec:	f8d8 3000 	ldr.w	r3, [r8]
240059f0:	681a      	ldr	r2, [r3, #0]
240059f2:	0352      	lsls	r2, r2, #13
240059f4:	f100 8195 	bmi.w	24005d22 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240059f8:	681a      	ldr	r2, [r3, #0]
240059fa:	05d7      	lsls	r7, r2, #23
240059fc:	d403      	bmi.n	24005a06 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240059fe:	681a      	ldr	r2, [r3, #0]
24005a00:	f022 0208 	bic.w	r2, r2, #8
24005a04:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24005a06:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005a0a:	b10b      	cbz	r3, 24005a10 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
24005a0c:	4640      	mov	r0, r8
24005a0e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005a10:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
24005a14:	f001 011f 	and.w	r1, r1, #31
24005a18:	2320      	movs	r3, #32
24005a1a:	fa03 f101 	lsl.w	r1, r3, r1
24005a1e:	4221      	tst	r1, r4
24005a20:	d069      	beq.n	24005af6 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005a22:	f8d8 3000 	ldr.w	r3, [r8]
24005a26:	4a97      	ldr	r2, [pc, #604]	; (24005c84 <HAL_DMA_IRQHandler+0x530>)
24005a28:	4c97      	ldr	r4, [pc, #604]	; (24005c88 <HAL_DMA_IRQHandler+0x534>)
24005a2a:	42a3      	cmp	r3, r4
24005a2c:	bf18      	it	ne
24005a2e:	4293      	cmpne	r3, r2
24005a30:	f104 0418 	add.w	r4, r4, #24
24005a34:	bf0c      	ite	eq
24005a36:	2201      	moveq	r2, #1
24005a38:	2200      	movne	r2, #0
24005a3a:	42a3      	cmp	r3, r4
24005a3c:	bf08      	it	eq
24005a3e:	f042 0201 	orreq.w	r2, r2, #1
24005a42:	3418      	adds	r4, #24
24005a44:	42a3      	cmp	r3, r4
24005a46:	bf08      	it	eq
24005a48:	f042 0201 	orreq.w	r2, r2, #1
24005a4c:	3418      	adds	r4, #24
24005a4e:	42a3      	cmp	r3, r4
24005a50:	bf08      	it	eq
24005a52:	f042 0201 	orreq.w	r2, r2, #1
24005a56:	3418      	adds	r4, #24
24005a58:	42a3      	cmp	r3, r4
24005a5a:	bf08      	it	eq
24005a5c:	f042 0201 	orreq.w	r2, r2, #1
24005a60:	3418      	adds	r4, #24
24005a62:	42a3      	cmp	r3, r4
24005a64:	bf08      	it	eq
24005a66:	f042 0201 	orreq.w	r2, r2, #1
24005a6a:	3418      	adds	r4, #24
24005a6c:	42a3      	cmp	r3, r4
24005a6e:	bf08      	it	eq
24005a70:	f042 0201 	orreq.w	r2, r2, #1
24005a74:	f504 7456 	add.w	r4, r4, #856	; 0x358
24005a78:	42a3      	cmp	r3, r4
24005a7a:	bf08      	it	eq
24005a7c:	f042 0201 	orreq.w	r2, r2, #1
24005a80:	3418      	adds	r4, #24
24005a82:	42a3      	cmp	r3, r4
24005a84:	bf08      	it	eq
24005a86:	f042 0201 	orreq.w	r2, r2, #1
24005a8a:	3418      	adds	r4, #24
24005a8c:	42a3      	cmp	r3, r4
24005a8e:	bf08      	it	eq
24005a90:	f042 0201 	orreq.w	r2, r2, #1
24005a94:	3418      	adds	r4, #24
24005a96:	42a3      	cmp	r3, r4
24005a98:	bf08      	it	eq
24005a9a:	f042 0201 	orreq.w	r2, r2, #1
24005a9e:	3418      	adds	r4, #24
24005aa0:	42a3      	cmp	r3, r4
24005aa2:	bf08      	it	eq
24005aa4:	f042 0201 	orreq.w	r2, r2, #1
24005aa8:	3418      	adds	r4, #24
24005aaa:	42a3      	cmp	r3, r4
24005aac:	bf08      	it	eq
24005aae:	f042 0201 	orreq.w	r2, r2, #1
24005ab2:	3418      	adds	r4, #24
24005ab4:	42a3      	cmp	r3, r4
24005ab6:	bf08      	it	eq
24005ab8:	f042 0201 	orreq.w	r2, r2, #1
24005abc:	b91a      	cbnz	r2, 24005ac6 <HAL_DMA_IRQHandler+0x372>
24005abe:	4a73      	ldr	r2, [pc, #460]	; (24005c8c <HAL_DMA_IRQHandler+0x538>)
24005ac0:	4293      	cmp	r3, r2
24005ac2:	f040 80da 	bne.w	24005c7a <HAL_DMA_IRQHandler+0x526>
24005ac6:	681b      	ldr	r3, [r3, #0]
24005ac8:	06dc      	lsls	r4, r3, #27
24005aca:	d514      	bpl.n	24005af6 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005acc:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24005ace:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
24005ad2:	2b04      	cmp	r3, #4
24005ad4:	f000 80de 	beq.w	24005c94 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005ad8:	f8d8 3000 	ldr.w	r3, [r8]
24005adc:	681a      	ldr	r2, [r3, #0]
24005ade:	0352      	lsls	r2, r2, #13
24005ae0:	f140 8129 	bpl.w	24005d36 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005ae4:	681b      	ldr	r3, [r3, #0]
24005ae6:	031b      	lsls	r3, r3, #12
24005ae8:	f140 8134 	bpl.w	24005d54 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
24005aec:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24005af0:	b10b      	cbz	r3, 24005af6 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
24005af2:	4640      	mov	r0, r8
24005af4:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005af6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005afa:	2b00      	cmp	r3, #0
24005afc:	f000 80f2 	beq.w	24005ce4 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005b00:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
24005b04:	07df      	lsls	r7, r3, #31
24005b06:	d521      	bpl.n	24005b4c <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
24005b08:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
24005b0c:	2104      	movs	r1, #4
24005b0e:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24005b12:	6813      	ldr	r3, [r2, #0]
24005b14:	f023 0301 	bic.w	r3, r3, #1
24005b18:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24005b1a:	4b5d      	ldr	r3, [pc, #372]	; (24005c90 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005b1c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
24005b20:	fba3 3606 	umull	r3, r6, r3, r6
24005b24:	0ab6      	lsrs	r6, r6, #10
24005b26:	e002      	b.n	24005b2e <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005b28:	6813      	ldr	r3, [r2, #0]
24005b2a:	07dd      	lsls	r5, r3, #31
24005b2c:	d504      	bpl.n	24005b38 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
24005b2e:	9b01      	ldr	r3, [sp, #4]
24005b30:	3301      	adds	r3, #1
24005b32:	42b3      	cmp	r3, r6
24005b34:	9301      	str	r3, [sp, #4]
24005b36:	d9f7      	bls.n	24005b28 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005b38:	6813      	ldr	r3, [r2, #0]
24005b3a:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24005b3c:	bf4c      	ite	mi
24005b3e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24005b40:	2301      	movpl	r3, #1
24005b42:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24005b46:	2300      	movs	r3, #0
24005b48:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24005b4c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
24005b50:	2b00      	cmp	r3, #0
24005b52:	f000 80c7 	beq.w	24005ce4 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
24005b56:	4640      	mov	r0, r8
}
24005b58:	b002      	add	sp, #8
24005b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
24005b5e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005b60:	681a      	ldr	r2, [r3, #0]
24005b62:	0752      	lsls	r2, r2, #29
24005b64:	d514      	bpl.n	24005b90 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24005b66:	681a      	ldr	r2, [r3, #0]
24005b68:	f022 0204 	bic.w	r2, r2, #4
24005b6c:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b6e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24005b72:	f003 021f 	and.w	r2, r3, #31
24005b76:	2308      	movs	r3, #8
24005b78:	4093      	lsls	r3, r2
24005b7a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b7c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b80:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b84:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b88:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005b8c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b90:	fa24 f301 	lsr.w	r3, r4, r1
24005b94:	07df      	lsls	r7, r3, #31
24005b96:	f57f ae54 	bpl.w	24005842 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005b9a:	f8d8 2000 	ldr.w	r2, [r8]
24005b9e:	4f39      	ldr	r7, [pc, #228]	; (24005c84 <HAL_DMA_IRQHandler+0x530>)
24005ba0:	4b39      	ldr	r3, [pc, #228]	; (24005c88 <HAL_DMA_IRQHandler+0x534>)
24005ba2:	429a      	cmp	r2, r3
24005ba4:	bf18      	it	ne
24005ba6:	42ba      	cmpne	r2, r7
24005ba8:	f103 0318 	add.w	r3, r3, #24
24005bac:	bf0c      	ite	eq
24005bae:	2701      	moveq	r7, #1
24005bb0:	2700      	movne	r7, #0
24005bb2:	429a      	cmp	r2, r3
24005bb4:	bf08      	it	eq
24005bb6:	f047 0701 	orreq.w	r7, r7, #1
24005bba:	3318      	adds	r3, #24
24005bbc:	429a      	cmp	r2, r3
24005bbe:	bf08      	it	eq
24005bc0:	f047 0701 	orreq.w	r7, r7, #1
24005bc4:	3318      	adds	r3, #24
24005bc6:	429a      	cmp	r2, r3
24005bc8:	bf08      	it	eq
24005bca:	f047 0701 	orreq.w	r7, r7, #1
24005bce:	3318      	adds	r3, #24
24005bd0:	429a      	cmp	r2, r3
24005bd2:	bf08      	it	eq
24005bd4:	f047 0701 	orreq.w	r7, r7, #1
24005bd8:	3318      	adds	r3, #24
24005bda:	429a      	cmp	r2, r3
24005bdc:	bf08      	it	eq
24005bde:	f047 0701 	orreq.w	r7, r7, #1
24005be2:	3318      	adds	r3, #24
24005be4:	429a      	cmp	r2, r3
24005be6:	bf08      	it	eq
24005be8:	f047 0701 	orreq.w	r7, r7, #1
24005bec:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005bf0:	429a      	cmp	r2, r3
24005bf2:	bf08      	it	eq
24005bf4:	f047 0701 	orreq.w	r7, r7, #1
24005bf8:	3318      	adds	r3, #24
24005bfa:	429a      	cmp	r2, r3
24005bfc:	bf08      	it	eq
24005bfe:	f047 0701 	orreq.w	r7, r7, #1
24005c02:	3318      	adds	r3, #24
24005c04:	429a      	cmp	r2, r3
24005c06:	bf08      	it	eq
24005c08:	f047 0701 	orreq.w	r7, r7, #1
24005c0c:	3318      	adds	r3, #24
24005c0e:	429a      	cmp	r2, r3
24005c10:	bf08      	it	eq
24005c12:	f047 0701 	orreq.w	r7, r7, #1
24005c16:	3318      	adds	r3, #24
24005c18:	429a      	cmp	r2, r3
24005c1a:	bf08      	it	eq
24005c1c:	f047 0701 	orreq.w	r7, r7, #1
24005c20:	3318      	adds	r3, #24
24005c22:	429a      	cmp	r2, r3
24005c24:	bf08      	it	eq
24005c26:	f047 0701 	orreq.w	r7, r7, #1
24005c2a:	3318      	adds	r3, #24
24005c2c:	429a      	cmp	r2, r3
24005c2e:	bf08      	it	eq
24005c30:	f047 0701 	orreq.w	r7, r7, #1
24005c34:	4613      	mov	r3, r2
24005c36:	2f00      	cmp	r7, #0
24005c38:	f47f adf1 	bne.w	2400581e <HAL_DMA_IRQHandler+0xca>
24005c3c:	4f13      	ldr	r7, [pc, #76]	; (24005c8c <HAL_DMA_IRQHandler+0x538>)
24005c3e:	42ba      	cmp	r2, r7
24005c40:	f43f aded 	beq.w	2400581e <HAL_DMA_IRQHandler+0xca>
24005c44:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c46:	2304      	movs	r3, #4
24005c48:	408b      	lsls	r3, r1
24005c4a:	4223      	tst	r3, r4
24005c4c:	f040 80ca 	bne.w	24005de4 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c50:	f04f 0c10 	mov.w	ip, #16
24005c54:	fa0c fc01 	lsl.w	ip, ip, r1
24005c58:	ea14 0f0c 	tst.w	r4, ip
24005c5c:	f43f aedc 	beq.w	24005a18 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005c60:	6813      	ldr	r3, [r2, #0]
24005c62:	0759      	lsls	r1, r3, #29
24005c64:	f53f aec0 	bmi.w	240059e8 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c68:	f000 0e1f 	and.w	lr, r0, #31
24005c6c:	2120      	movs	r1, #32
24005c6e:	fa01 f10e 	lsl.w	r1, r1, lr
24005c72:	420c      	tst	r4, r1
24005c74:	f43f af3f 	beq.w	24005af6 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005c78:	4613      	mov	r3, r2
24005c7a:	681b      	ldr	r3, [r3, #0]
24005c7c:	0798      	lsls	r0, r3, #30
24005c7e:	f57f af3a 	bpl.w	24005af6 <HAL_DMA_IRQHandler+0x3a2>
24005c82:	e723      	b.n	24005acc <HAL_DMA_IRQHandler+0x378>
24005c84:	40020010 	.word	0x40020010
24005c88:	40020028 	.word	0x40020028
24005c8c:	400204b8 	.word	0x400204b8
24005c90:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005c94:	f8d8 2000 	ldr.w	r2, [r8]
24005c98:	6813      	ldr	r3, [r2, #0]
24005c9a:	f023 0316 	bic.w	r3, r3, #22
24005c9e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005ca0:	f8d8 2000 	ldr.w	r2, [r8]
24005ca4:	6953      	ldr	r3, [r2, #20]
24005ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005caa:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005cac:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005cb0:	2b00      	cmp	r3, #0
24005cb2:	d055      	beq.n	24005d60 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005cb4:	f8d8 2000 	ldr.w	r2, [r8]
24005cb8:	6813      	ldr	r3, [r2, #0]
24005cba:	f023 0308 	bic.w	r3, r3, #8
24005cbe:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005cc0:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
24005cc4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24005cc6:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005cc8:	f002 021f 	and.w	r2, r2, #31
24005ccc:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24005cce:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005cd0:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
24005cd2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24005cd6:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24005cda:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24005cde:	2b00      	cmp	r3, #0
24005ce0:	f47f af39 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
}
24005ce4:	b002      	add	sp, #8
24005ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cea:	2220      	movs	r2, #32
24005cec:	fa02 f101 	lsl.w	r1, r2, r1
24005cf0:	420c      	tst	r4, r1
24005cf2:	f47f aee8 	bne.w	24005ac6 <HAL_DMA_IRQHandler+0x372>
24005cf6:	e6fe      	b.n	24005af6 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cf8:	f04f 0c04 	mov.w	ip, #4
24005cfc:	fa0c fc01 	lsl.w	ip, ip, r1
24005d00:	ea14 0f0c 	tst.w	r4, ip
24005d04:	f43f ae07 	beq.w	24005916 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005d08:	681a      	ldr	r2, [r3, #0]
24005d0a:	0797      	lsls	r7, r2, #30
24005d0c:	f53f adf7 	bmi.w	240058fe <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d10:	f04f 0c10 	mov.w	ip, #16
24005d14:	fa0c fc01 	lsl.w	ip, ip, r1
24005d18:	ea14 0f0c 	tst.w	r4, ip
24005d1c:	f47f ae55 	bne.w	240059ca <HAL_DMA_IRQHandler+0x276>
24005d20:	e67a      	b.n	24005a18 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005d22:	681b      	ldr	r3, [r3, #0]
24005d24:	031b      	lsls	r3, r3, #12
24005d26:	f57f ae6e 	bpl.w	24005a06 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
24005d2a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005d2e:	2b00      	cmp	r3, #0
24005d30:	f47f ae6c 	bne.w	24005a0c <HAL_DMA_IRQHandler+0x2b8>
24005d34:	e66c      	b.n	24005a10 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005d36:	681a      	ldr	r2, [r3, #0]
24005d38:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24005d3c:	f47f aed6 	bne.w	24005aec <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005d40:	6819      	ldr	r1, [r3, #0]
24005d42:	f021 0110 	bic.w	r1, r1, #16
24005d46:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24005d48:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24005d4a:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24005d4e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24005d52:	e6cb      	b.n	24005aec <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
24005d54:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24005d58:	2b00      	cmp	r3, #0
24005d5a:	f47f aeca 	bne.w	24005af2 <HAL_DMA_IRQHandler+0x39e>
24005d5e:	e6ca      	b.n	24005af6 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005d60:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005d64:	2b00      	cmp	r3, #0
24005d66:	d1a5      	bne.n	24005cb4 <HAL_DMA_IRQHandler+0x560>
24005d68:	e7aa      	b.n	24005cc0 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005d6a:	4aa0      	ldr	r2, [pc, #640]	; (24005fec <HAL_DMA_IRQHandler+0x898>)
24005d6c:	4ca0      	ldr	r4, [pc, #640]	; (24005ff0 <HAL_DMA_IRQHandler+0x89c>)
24005d6e:	42a3      	cmp	r3, r4
24005d70:	bf18      	it	ne
24005d72:	4293      	cmpne	r3, r2
24005d74:	f104 0414 	add.w	r4, r4, #20
24005d78:	bf0c      	ite	eq
24005d7a:	2201      	moveq	r2, #1
24005d7c:	2200      	movne	r2, #0
24005d7e:	42a3      	cmp	r3, r4
24005d80:	bf08      	it	eq
24005d82:	f042 0201 	orreq.w	r2, r2, #1
24005d86:	3414      	adds	r4, #20
24005d88:	42a3      	cmp	r3, r4
24005d8a:	bf08      	it	eq
24005d8c:	f042 0201 	orreq.w	r2, r2, #1
24005d90:	3414      	adds	r4, #20
24005d92:	42a3      	cmp	r3, r4
24005d94:	bf08      	it	eq
24005d96:	f042 0201 	orreq.w	r2, r2, #1
24005d9a:	3414      	adds	r4, #20
24005d9c:	42a3      	cmp	r3, r4
24005d9e:	bf08      	it	eq
24005da0:	f042 0201 	orreq.w	r2, r2, #1
24005da4:	3414      	adds	r4, #20
24005da6:	42a3      	cmp	r3, r4
24005da8:	bf08      	it	eq
24005daa:	f042 0201 	orreq.w	r2, r2, #1
24005dae:	b912      	cbnz	r2, 24005db6 <HAL_DMA_IRQHandler+0x662>
24005db0:	4a90      	ldr	r2, [pc, #576]	; (24005ff4 <HAL_DMA_IRQHandler+0x8a0>)
24005db2:	4293      	cmp	r3, r2
24005db4:	d196      	bne.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005db6:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
24005dba:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005dbc:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005dbe:	f004 041f 	and.w	r4, r4, #31
24005dc2:	40a6      	lsls	r6, r4
24005dc4:	420e      	tst	r6, r1
24005dc6:	d019      	beq.n	24005dfc <HAL_DMA_IRQHandler+0x6a8>
24005dc8:	0750      	lsls	r0, r2, #29
24005dca:	d517      	bpl.n	24005dfc <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005dcc:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005dce:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005dd0:	d549      	bpl.n	24005e66 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005dd2:	03d2      	lsls	r2, r2, #15
24005dd4:	f100 809f 	bmi.w	24005f16 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
24005dd8:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
24005ddc:	2b00      	cmp	r3, #0
24005dde:	f47f aeba 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
24005de2:	e77f      	b.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005de4:	f000 011f 	and.w	r1, r0, #31
24005de8:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005dec:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005dee:	fa0c fc01 	lsl.w	ip, ip, r1
24005df2:	ea14 0f0c 	tst.w	r4, ip
24005df6:	f47f af33 	bne.w	24005c60 <HAL_DMA_IRQHandler+0x50c>
24005dfa:	e60d      	b.n	24005a18 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005dfc:	2602      	movs	r6, #2
24005dfe:	40a6      	lsls	r6, r4
24005e00:	420e      	tst	r6, r1
24005e02:	d00e      	beq.n	24005e22 <HAL_DMA_IRQHandler+0x6ce>
24005e04:	0797      	lsls	r7, r2, #30
24005e06:	d50c      	bpl.n	24005e22 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005e08:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e0a:	0415      	lsls	r5, r2, #16
24005e0c:	f140 8089 	bpl.w	24005f22 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005e10:	03d4      	lsls	r4, r2, #15
24005e12:	f100 80e4 	bmi.w	24005fde <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
24005e16:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
24005e1a:	2b00      	cmp	r3, #0
24005e1c:	f47f ae9b 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
24005e20:	e760      	b.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24005e22:	2608      	movs	r6, #8
24005e24:	fa06 f404 	lsl.w	r4, r6, r4
24005e28:	420c      	tst	r4, r1
24005e2a:	f43f af5b 	beq.w	24005ce4 <HAL_DMA_IRQHandler+0x590>
24005e2e:	0711      	lsls	r1, r2, #28
24005e30:	f57f af58 	bpl.w	24005ce4 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005e34:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005e36:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005e38:	f021 010e 	bic.w	r1, r1, #14
24005e3c:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24005e3e:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005e40:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
24005e44:	f003 031f 	and.w	r3, r3, #31
24005e48:	fa02 f303 	lsl.w	r3, r2, r3
24005e4c:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
24005e4e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005e52:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24005e56:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24005e5a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24005e5e:	2b00      	cmp	r3, #0
24005e60:	f47f ae79 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
24005e64:	e73e      	b.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005e66:	0693      	lsls	r3, r2, #26
24005e68:	d455      	bmi.n	24005f16 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005e6a:	f8d8 2000 	ldr.w	r2, [r8]
24005e6e:	4b62      	ldr	r3, [pc, #392]	; (24005ff8 <HAL_DMA_IRQHandler+0x8a4>)
24005e70:	4c62      	ldr	r4, [pc, #392]	; (24005ffc <HAL_DMA_IRQHandler+0x8a8>)
24005e72:	4963      	ldr	r1, [pc, #396]	; (24006000 <HAL_DMA_IRQHandler+0x8ac>)
24005e74:	42a2      	cmp	r2, r4
24005e76:	bf18      	it	ne
24005e78:	429a      	cmpne	r2, r3
24005e7a:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005e7e:	bf0c      	ite	eq
24005e80:	2301      	moveq	r3, #1
24005e82:	2300      	movne	r3, #0
24005e84:	428a      	cmp	r2, r1
24005e86:	bf08      	it	eq
24005e88:	f043 0301 	orreq.w	r3, r3, #1
24005e8c:	3130      	adds	r1, #48	; 0x30
24005e8e:	42a2      	cmp	r2, r4
24005e90:	bf08      	it	eq
24005e92:	f043 0301 	orreq.w	r3, r3, #1
24005e96:	3430      	adds	r4, #48	; 0x30
24005e98:	428a      	cmp	r2, r1
24005e9a:	bf08      	it	eq
24005e9c:	f043 0301 	orreq.w	r3, r3, #1
24005ea0:	3130      	adds	r1, #48	; 0x30
24005ea2:	42a2      	cmp	r2, r4
24005ea4:	bf08      	it	eq
24005ea6:	f043 0301 	orreq.w	r3, r3, #1
24005eaa:	3430      	adds	r4, #48	; 0x30
24005eac:	428a      	cmp	r2, r1
24005eae:	bf08      	it	eq
24005eb0:	f043 0301 	orreq.w	r3, r3, #1
24005eb4:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005eb8:	42a2      	cmp	r2, r4
24005eba:	bf08      	it	eq
24005ebc:	f043 0301 	orreq.w	r3, r3, #1
24005ec0:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005ec4:	428a      	cmp	r2, r1
24005ec6:	bf08      	it	eq
24005ec8:	f043 0301 	orreq.w	r3, r3, #1
24005ecc:	3130      	adds	r1, #48	; 0x30
24005ece:	42a2      	cmp	r2, r4
24005ed0:	bf08      	it	eq
24005ed2:	f043 0301 	orreq.w	r3, r3, #1
24005ed6:	3430      	adds	r4, #48	; 0x30
24005ed8:	428a      	cmp	r2, r1
24005eda:	bf08      	it	eq
24005edc:	f043 0301 	orreq.w	r3, r3, #1
24005ee0:	3130      	adds	r1, #48	; 0x30
24005ee2:	42a2      	cmp	r2, r4
24005ee4:	bf08      	it	eq
24005ee6:	f043 0301 	orreq.w	r3, r3, #1
24005eea:	3430      	adds	r4, #48	; 0x30
24005eec:	428a      	cmp	r2, r1
24005eee:	bf08      	it	eq
24005ef0:	f043 0301 	orreq.w	r3, r3, #1
24005ef4:	3130      	adds	r1, #48	; 0x30
24005ef6:	42a2      	cmp	r2, r4
24005ef8:	bf08      	it	eq
24005efa:	f043 0301 	orreq.w	r3, r3, #1
24005efe:	428a      	cmp	r2, r1
24005f00:	bf08      	it	eq
24005f02:	f043 0301 	orreq.w	r3, r3, #1
24005f06:	b913      	cbnz	r3, 24005f0e <HAL_DMA_IRQHandler+0x7ba>
24005f08:	4b3e      	ldr	r3, [pc, #248]	; (24006004 <HAL_DMA_IRQHandler+0x8b0>)
24005f0a:	429a      	cmp	r2, r3
24005f0c:	d17c      	bne.n	24006008 <HAL_DMA_IRQHandler+0x8b4>
24005f0e:	6813      	ldr	r3, [r2, #0]
24005f10:	f023 0308 	bic.w	r3, r3, #8
24005f14:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24005f16:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
24005f1a:	2b00      	cmp	r3, #0
24005f1c:	f47f ae1b 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
24005f20:	e6e0      	b.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005f22:	0690      	lsls	r0, r2, #26
24005f24:	d45b      	bmi.n	24005fde <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005f26:	f8d8 2000 	ldr.w	r2, [r8]
24005f2a:	4b33      	ldr	r3, [pc, #204]	; (24005ff8 <HAL_DMA_IRQHandler+0x8a4>)
24005f2c:	4c33      	ldr	r4, [pc, #204]	; (24005ffc <HAL_DMA_IRQHandler+0x8a8>)
24005f2e:	4934      	ldr	r1, [pc, #208]	; (24006000 <HAL_DMA_IRQHandler+0x8ac>)
24005f30:	42a2      	cmp	r2, r4
24005f32:	bf18      	it	ne
24005f34:	429a      	cmpne	r2, r3
24005f36:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005f3a:	bf0c      	ite	eq
24005f3c:	2301      	moveq	r3, #1
24005f3e:	2300      	movne	r3, #0
24005f40:	428a      	cmp	r2, r1
24005f42:	bf08      	it	eq
24005f44:	f043 0301 	orreq.w	r3, r3, #1
24005f48:	3130      	adds	r1, #48	; 0x30
24005f4a:	42a2      	cmp	r2, r4
24005f4c:	bf08      	it	eq
24005f4e:	f043 0301 	orreq.w	r3, r3, #1
24005f52:	3430      	adds	r4, #48	; 0x30
24005f54:	428a      	cmp	r2, r1
24005f56:	bf08      	it	eq
24005f58:	f043 0301 	orreq.w	r3, r3, #1
24005f5c:	3130      	adds	r1, #48	; 0x30
24005f5e:	42a2      	cmp	r2, r4
24005f60:	bf08      	it	eq
24005f62:	f043 0301 	orreq.w	r3, r3, #1
24005f66:	3430      	adds	r4, #48	; 0x30
24005f68:	428a      	cmp	r2, r1
24005f6a:	bf08      	it	eq
24005f6c:	f043 0301 	orreq.w	r3, r3, #1
24005f70:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005f74:	42a2      	cmp	r2, r4
24005f76:	bf08      	it	eq
24005f78:	f043 0301 	orreq.w	r3, r3, #1
24005f7c:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005f80:	428a      	cmp	r2, r1
24005f82:	bf08      	it	eq
24005f84:	f043 0301 	orreq.w	r3, r3, #1
24005f88:	3130      	adds	r1, #48	; 0x30
24005f8a:	42a2      	cmp	r2, r4
24005f8c:	bf08      	it	eq
24005f8e:	f043 0301 	orreq.w	r3, r3, #1
24005f92:	3430      	adds	r4, #48	; 0x30
24005f94:	428a      	cmp	r2, r1
24005f96:	bf08      	it	eq
24005f98:	f043 0301 	orreq.w	r3, r3, #1
24005f9c:	3130      	adds	r1, #48	; 0x30
24005f9e:	42a2      	cmp	r2, r4
24005fa0:	bf08      	it	eq
24005fa2:	f043 0301 	orreq.w	r3, r3, #1
24005fa6:	3430      	adds	r4, #48	; 0x30
24005fa8:	428a      	cmp	r2, r1
24005faa:	bf08      	it	eq
24005fac:	f043 0301 	orreq.w	r3, r3, #1
24005fb0:	3130      	adds	r1, #48	; 0x30
24005fb2:	42a2      	cmp	r2, r4
24005fb4:	bf08      	it	eq
24005fb6:	f043 0301 	orreq.w	r3, r3, #1
24005fba:	428a      	cmp	r2, r1
24005fbc:	bf08      	it	eq
24005fbe:	f043 0301 	orreq.w	r3, r3, #1
24005fc2:	b913      	cbnz	r3, 24005fca <HAL_DMA_IRQHandler+0x876>
24005fc4:	4b0f      	ldr	r3, [pc, #60]	; (24006004 <HAL_DMA_IRQHandler+0x8b0>)
24005fc6:	429a      	cmp	r2, r3
24005fc8:	d123      	bne.n	24006012 <HAL_DMA_IRQHandler+0x8be>
24005fca:	6813      	ldr	r3, [r2, #0]
24005fcc:	f023 0314 	bic.w	r3, r3, #20
24005fd0:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
24005fd2:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
24005fd4:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24005fd6:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24005fda:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24005fde:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
24005fe2:	2b00      	cmp	r3, #0
24005fe4:	f47f adb7 	bne.w	24005b56 <HAL_DMA_IRQHandler+0x402>
24005fe8:	e67c      	b.n	24005ce4 <HAL_DMA_IRQHandler+0x590>
24005fea:	bf00      	nop
24005fec:	58025408 	.word	0x58025408
24005ff0:	5802541c 	.word	0x5802541c
24005ff4:	58025494 	.word	0x58025494
24005ff8:	40020010 	.word	0x40020010
24005ffc:	40020028 	.word	0x40020028
24006000:	40020040 	.word	0x40020040
24006004:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006008:	6813      	ldr	r3, [r2, #0]
2400600a:	f023 0304 	bic.w	r3, r3, #4
2400600e:	6013      	str	r3, [r2, #0]
24006010:	e781      	b.n	24005f16 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006012:	6813      	ldr	r3, [r2, #0]
24006014:	f023 030a 	bic.w	r3, r3, #10
24006018:	6013      	str	r3, [r2, #0]
2400601a:	e7da      	b.n	24005fd2 <HAL_DMA_IRQHandler+0x87e>

2400601c <HAL_DMA_GetState>:
  return hdma->State;
2400601c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24006020:	4770      	bx	lr
24006022:	bf00      	nop

24006024 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24006024:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24006026:	4770      	bx	lr

24006028 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006028:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
2400602a:	7a0a      	ldrb	r2, [r1, #8]
{
2400602c:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
2400602e:	2a01      	cmp	r2, #1
24006030:	d02e      	beq.n	24006090 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
24006032:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24006034:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24006036:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
2400603a:	2801      	cmp	r0, #1
2400603c:	b2c2      	uxtb	r2, r0
2400603e:	d122      	bne.n	24006086 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006040:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
24006044:	2801      	cmp	r0, #1
24006046:	d026      	beq.n	24006096 <HAL_DMAEx_ConfigMuxSync+0x6e>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24006048:	6e18      	ldr	r0, [r3, #96]	; 0x60
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
2400604a:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hdma);
2400604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24006052:	6802      	ldr	r2, [r0, #0]
24006054:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24006058:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400605a:	68ca      	ldr	r2, [r1, #12]
2400605c:	6e1e      	ldr	r6, [r3, #96]	; 0x60
2400605e:	1e50      	subs	r0, r2, #1
24006060:	7a0a      	ldrb	r2, [r1, #8]
24006062:	f891 e009 	ldrb.w	lr, [r1, #9]
24006066:	0412      	lsls	r2, r2, #16
24006068:	6831      	ldr	r1, [r6, #0]
2400606a:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
2400606e:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006070:	b2c9      	uxtb	r1, r1
24006072:	430a      	orrs	r2, r1
24006074:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006078:	4322      	orrs	r2, r4
2400607a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
2400607e:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
24006080:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
24006084:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24006086:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
2400608a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400608c:	655a      	str	r2, [r3, #84]	; 0x54
}
2400608e:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
24006090:	e9d1 5400 	ldrd	r5, r4, [r1]
24006094:	e7cf      	b.n	24006036 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
24006096:	2002      	movs	r0, #2
}
24006098:	bd70      	pop	{r4, r5, r6, pc}
2400609a:	bf00      	nop

2400609c <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
2400609c:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
2400609e:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
240060a2:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240060a4:	6812      	ldr	r2, [r2, #0]
240060a6:	421a      	tst	r2, r3
240060a8:	d00e      	beq.n	240060c8 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240060aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
240060ac:	6813      	ldr	r3, [r2, #0]
240060ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240060b2:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240060b4:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
240060b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240060ba:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
240060bc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240060be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240060c2:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
240060c4:	b102      	cbz	r2, 240060c8 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240060c6:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240060c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240060ca:	b1ab      	cbz	r3, 240060f8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240060cc:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
240060d0:	6809      	ldr	r1, [r1, #0]
240060d2:	4211      	tst	r1, r2
240060d4:	d010      	beq.n	240060f8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240060d6:	681a      	ldr	r2, [r3, #0]
240060d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240060dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240060de:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
240060e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240060e4:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
240060e6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
240060e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
240060ec:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
240060ee:	b11a      	cbz	r2, 240060f8 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
240060f0:	4620      	mov	r0, r4
      }
    }
  }
}
240060f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
240060f6:	4710      	bx	r2
}
240060f8:	bd10      	pop	{r4, pc}
240060fa:	bf00      	nop

240060fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240060fc:	680b      	ldr	r3, [r1, #0]
240060fe:	2b00      	cmp	r3, #0
24006100:	f000 811a 	beq.w	24006338 <HAL_GPIO_Init+0x23c>
24006104:	f04f 0c00 	mov.w	ip, #0
{
24006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
2400610c:	4662      	mov	r2, ip
{
2400610e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006110:	4d94      	ldr	r5, [pc, #592]	; (24006364 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006112:	4f95      	ldr	r7, [pc, #596]	; (24006368 <HAL_GPIO_Init+0x26c>)
24006114:	f8df 8268 	ldr.w	r8, [pc, #616]	; 24006380 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24006118:	f04f 0901 	mov.w	r9, #1
2400611c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24006120:	ea19 0e03 	ands.w	lr, r9, r3
24006124:	f000 80c2 	beq.w	240062ac <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006128:	684b      	ldr	r3, [r1, #4]
2400612a:	f003 0303 	and.w	r3, r3, #3
2400612e:	1e5c      	subs	r4, r3, #1
24006130:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006132:	f04f 0403 	mov.w	r4, #3
24006136:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400613a:	f240 80c1 	bls.w	240062c0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400613e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006140:	2b03      	cmp	r3, #3
24006142:	d026      	beq.n	24006192 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24006144:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24006146:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2400614a:	688b      	ldr	r3, [r1, #8]
2400614c:	fa03 f30c 	lsl.w	r3, r3, ip
24006150:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24006154:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24006156:	684b      	ldr	r3, [r1, #4]
24006158:	f003 0303 	and.w	r3, r3, #3
2400615c:	2b02      	cmp	r3, #2
2400615e:	d118      	bne.n	24006192 <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006160:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
24006164:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006168:	ea4f 0b83 	mov.w	fp, r3, lsl #2
2400616c:	230f      	movs	r3, #15
2400616e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
24006172:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
24006176:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2400617a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400617e:	690b      	ldr	r3, [r1, #16]
24006180:	fa03 f30b 	lsl.w	r3, r3, fp
24006184:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
24006188:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400618c:	684b      	ldr	r3, [r1, #4]
2400618e:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
24006192:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24006196:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2400619a:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400619e:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
240061a0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240061a2:	684b      	ldr	r3, [r1, #4]
240061a4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
240061a8:	d07f      	beq.n	240062aa <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240061aa:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240061ae:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240061b2:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240061b6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240061b8:	f043 0302 	orr.w	r3, r3, #2
240061bc:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240061c0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240061c4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
240061c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240061cc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240061d0:	f003 0302 	and.w	r3, r3, #2
240061d4:	9301      	str	r3, [sp, #4]
240061d6:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240061d8:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
240061dc:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240061e0:	fa03 f309 	lsl.w	r3, r3, r9
240061e4:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240061e8:	d02b      	beq.n	24006242 <HAL_GPIO_Init+0x146>
240061ea:	4540      	cmp	r0, r8
240061ec:	f000 8088 	beq.w	24006300 <HAL_GPIO_Init+0x204>
240061f0:	4e5e      	ldr	r6, [pc, #376]	; (2400636c <HAL_GPIO_Init+0x270>)
240061f2:	42b0      	cmp	r0, r6
240061f4:	f000 808b 	beq.w	2400630e <HAL_GPIO_Init+0x212>
240061f8:	4e5d      	ldr	r6, [pc, #372]	; (24006370 <HAL_GPIO_Init+0x274>)
240061fa:	42b0      	cmp	r0, r6
240061fc:	d079      	beq.n	240062f2 <HAL_GPIO_Init+0x1f6>
240061fe:	4e5d      	ldr	r6, [pc, #372]	; (24006374 <HAL_GPIO_Init+0x278>)
24006200:	42b0      	cmp	r0, r6
24006202:	f000 8092 	beq.w	2400632a <HAL_GPIO_Init+0x22e>
24006206:	4e5c      	ldr	r6, [pc, #368]	; (24006378 <HAL_GPIO_Init+0x27c>)
24006208:	42b0      	cmp	r0, r6
2400620a:	f000 8096 	beq.w	2400633a <HAL_GPIO_Init+0x23e>
2400620e:	4e5b      	ldr	r6, [pc, #364]	; (2400637c <HAL_GPIO_Init+0x280>)
24006210:	42b0      	cmp	r0, r6
24006212:	f000 8083 	beq.w	2400631c <HAL_GPIO_Init+0x220>
24006216:	f8df a16c 	ldr.w	sl, [pc, #364]	; 24006384 <HAL_GPIO_Init+0x288>
2400621a:	4550      	cmp	r0, sl
2400621c:	f000 8094 	beq.w	24006348 <HAL_GPIO_Init+0x24c>
24006220:	f8df a164 	ldr.w	sl, [pc, #356]	; 24006388 <HAL_GPIO_Init+0x28c>
24006224:	4550      	cmp	r0, sl
24006226:	f000 8096 	beq.w	24006356 <HAL_GPIO_Init+0x25a>
2400622a:	f8df a160 	ldr.w	sl, [pc, #352]	; 2400638c <HAL_GPIO_Init+0x290>
2400622e:	4550      	cmp	r0, sl
24006230:	bf0c      	ite	eq
24006232:	f04f 0a09 	moveq.w	sl, #9
24006236:	f04f 0a0a 	movne.w	sl, #10
2400623a:	fa0a f909 	lsl.w	r9, sl, r9
2400623e:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24006242:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24006244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006248:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
2400624a:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
2400624e:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
24006250:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006254:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24006256:	bf54      	ite	pl
24006258:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400625a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
2400625e:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006262:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
24006264:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24006268:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400626c:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
2400626e:	bf54      	ite	pl
24006270:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006272:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24006276:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400627a:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
2400627c:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
24006280:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006284:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
24006286:	bf54      	ite	pl
24006288:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400628a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
2400628e:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006292:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
24006294:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24006298:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
2400629a:	bf54      	ite	pl
2400629c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
2400629e:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
240062a2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240062a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240062aa:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
240062ac:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240062ae:	f10c 0c02 	add.w	ip, ip, #2
240062b2:	fa33 f402 	lsrs.w	r4, r3, r2
240062b6:	f47f af2f 	bne.w	24006118 <HAL_GPIO_Init+0x1c>
  }
}
240062ba:	b003      	add	sp, #12
240062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
240062c0:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240062c2:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240062c6:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240062c8:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240062ca:	fa03 f30c 	lsl.w	r3, r3, ip
240062ce:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
240062d2:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240062d4:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
240062d6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240062da:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240062de:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240062e2:	4093      	lsls	r3, r2
240062e4:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
240062e8:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
240062ea:	684b      	ldr	r3, [r1, #4]
240062ec:	f003 0303 	and.w	r3, r3, #3
240062f0:	e726      	b.n	24006140 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240062f2:	f04f 0a03 	mov.w	sl, #3
240062f6:	fa0a f909 	lsl.w	r9, sl, r9
240062fa:	ea43 0309 	orr.w	r3, r3, r9
240062fe:	e7a0      	b.n	24006242 <HAL_GPIO_Init+0x146>
24006300:	f04f 0a01 	mov.w	sl, #1
24006304:	fa0a f909 	lsl.w	r9, sl, r9
24006308:	ea43 0309 	orr.w	r3, r3, r9
2400630c:	e799      	b.n	24006242 <HAL_GPIO_Init+0x146>
2400630e:	f04f 0a02 	mov.w	sl, #2
24006312:	fa0a f909 	lsl.w	r9, sl, r9
24006316:	ea43 0309 	orr.w	r3, r3, r9
2400631a:	e792      	b.n	24006242 <HAL_GPIO_Init+0x146>
2400631c:	f04f 0a06 	mov.w	sl, #6
24006320:	fa0a f909 	lsl.w	r9, sl, r9
24006324:	ea43 0309 	orr.w	r3, r3, r9
24006328:	e78b      	b.n	24006242 <HAL_GPIO_Init+0x146>
2400632a:	f04f 0a04 	mov.w	sl, #4
2400632e:	fa0a f909 	lsl.w	r9, sl, r9
24006332:	ea43 0309 	orr.w	r3, r3, r9
24006336:	e784      	b.n	24006242 <HAL_GPIO_Init+0x146>
24006338:	4770      	bx	lr
2400633a:	f04f 0a05 	mov.w	sl, #5
2400633e:	fa0a f909 	lsl.w	r9, sl, r9
24006342:	ea43 0309 	orr.w	r3, r3, r9
24006346:	e77c      	b.n	24006242 <HAL_GPIO_Init+0x146>
24006348:	f04f 0a07 	mov.w	sl, #7
2400634c:	fa0a f909 	lsl.w	r9, sl, r9
24006350:	ea43 0309 	orr.w	r3, r3, r9
24006354:	e775      	b.n	24006242 <HAL_GPIO_Init+0x146>
24006356:	f04f 0a08 	mov.w	sl, #8
2400635a:	fa0a f909 	lsl.w	r9, sl, r9
2400635e:	ea43 0309 	orr.w	r3, r3, r9
24006362:	e76e      	b.n	24006242 <HAL_GPIO_Init+0x146>
24006364:	58024400 	.word	0x58024400
24006368:	58020000 	.word	0x58020000
2400636c:	58020800 	.word	0x58020800
24006370:	58020c00 	.word	0x58020c00
24006374:	58021000 	.word	0x58021000
24006378:	58021400 	.word	0x58021400
2400637c:	58021800 	.word	0x58021800
24006380:	58020400 	.word	0x58020400
24006384:	58021c00 	.word	0x58021c00
24006388:	58022000 	.word	0x58022000
2400638c:	58022400 	.word	0x58022400

24006390 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24006390:	6903      	ldr	r3, [r0, #16]
24006392:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24006394:	bf14      	ite	ne
24006396:	2001      	movne	r0, #1
24006398:	2000      	moveq	r0, #0
2400639a:	4770      	bx	lr

2400639c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2400639c:	b902      	cbnz	r2, 240063a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400639e:	0409      	lsls	r1, r1, #16
240063a0:	6181      	str	r1, [r0, #24]
  }
}
240063a2:	4770      	bx	lr

240063a4 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240063a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240063a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240063ac:	4201      	tst	r1, r0
240063ae:	d100      	bne.n	240063b2 <HAL_GPIO_EXTI_IRQHandler+0xe>
240063b0:	4770      	bx	lr
{
240063b2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240063b4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240063b8:	f7fd fca6 	bl	24003d08 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240063bc:	bd08      	pop	{r3, pc}
240063be:	bf00      	nop

240063c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240063c4:	6803      	ldr	r3, [r0, #0]
{
240063c6:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240063c8:	699a      	ldr	r2, [r3, #24]
240063ca:	0694      	lsls	r4, r2, #26
240063cc:	d46d      	bmi.n	240064aa <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
240063ce:	4605      	mov	r5, r0
240063d0:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240063d2:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
240063d6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240063d8:	f014 0410 	ands.w	r4, r4, #16
240063dc:	d068      	beq.n	240064b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
240063de:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240063e0:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
240063e4:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240063e6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
240063e8:	46b2      	mov	sl, r6
240063ea:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240063ec:	699a      	ldr	r2, [r3, #24]
240063ee:	d161      	bne.n	240064b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
240063f0:	0690      	lsls	r0, r2, #26
240063f2:	f100 8085 	bmi.w	24006500 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240063f6:	f1ba 0f00 	cmp.w	sl, #0
240063fa:	d105      	bne.n	24006408 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
240063fc:	699c      	ldr	r4, [r3, #24]
240063fe:	06a1      	lsls	r1, r4, #26
24006400:	d5fc      	bpl.n	240063fc <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006402:	2220      	movs	r2, #32
24006404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24006406:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24006408:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
2400640c:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
2400640e:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006410:	05d0      	lsls	r0, r2, #23
24006412:	d535      	bpl.n	24006480 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006414:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006418:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400641a:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400641e:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006420:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006422:	d505      	bpl.n	24006430 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006424:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006428:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400642c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400642e:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006430:	0597      	lsls	r7, r2, #22
24006432:	d505      	bpl.n	24006440 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006434:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006438:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400643c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400643e:	682b      	ldr	r3, [r5, #0]
24006440:	699a      	ldr	r2, [r3, #24]
24006442:	0790      	lsls	r0, r2, #30
24006444:	d502      	bpl.n	2400644c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24006446:	2200      	movs	r2, #0
24006448:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400644a:	682b      	ldr	r3, [r5, #0]
2400644c:	699a      	ldr	r2, [r3, #24]
2400644e:	07d1      	lsls	r1, r2, #31
24006450:	d404      	bmi.n	2400645c <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006452:	699a      	ldr	r2, [r3, #24]
24006454:	f042 0201 	orr.w	r2, r2, #1
24006458:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400645a:	682b      	ldr	r3, [r5, #0]
2400645c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400645e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
24006460:	4835      	ldr	r0, [pc, #212]	; (24006538 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
24006462:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24006464:	4002      	ands	r2, r0
      return HAL_ERROR;
24006466:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006468:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
2400646a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400646c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006470:	431c      	orrs	r4, r3
24006472:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006474:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006478:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
2400647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006480:	0550      	lsls	r0, r2, #21
24006482:	d4cf      	bmi.n	24006424 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006484:	0596      	lsls	r6, r2, #22
24006486:	d4d5      	bmi.n	24006434 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
24006488:	2900      	cmp	r1, #0
2400648a:	d1d9      	bne.n	24006440 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400648c:	f7fe f948 	bl	24004720 <HAL_GetTick>
24006490:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24006494:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006496:	42b8      	cmp	r0, r7
24006498:	d800      	bhi.n	2400649c <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
2400649a:	b91f      	cbnz	r7, 240064a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
2400649c:	699a      	ldr	r2, [r3, #24]
2400649e:	f012 0220 	ands.w	r2, r2, #32
240064a2:	d032      	beq.n	2400650a <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240064a4:	699a      	ldr	r2, [r3, #24]
240064a6:	0692      	lsls	r2, r2, #26
240064a8:	d595      	bpl.n	240063d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
240064aa:	2000      	movs	r0, #0
}
240064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
240064b0:	4621      	mov	r1, r4
240064b2:	e7ac      	b.n	2400640e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240064b4:	0692      	lsls	r2, r2, #26
240064b6:	d423      	bmi.n	24006500 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240064b8:	f1ba 0f00 	cmp.w	sl, #0
240064bc:	d1a4      	bne.n	24006408 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240064be:	f7fe f92f 	bl	24004720 <HAL_GetTick>
240064c2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240064c4:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240064c6:	4287      	cmp	r7, r0
240064c8:	d301      	bcc.n	240064ce <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
240064ca:	2f00      	cmp	r7, #0
240064cc:	d18d      	bne.n	240063ea <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240064ce:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240064d0:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240064d4:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240064d6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240064d8:	0409      	lsls	r1, r1, #16
240064da:	d503      	bpl.n	240064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
240064dc:	0441      	lsls	r1, r0, #17
240064de:	d401      	bmi.n	240064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
240064e0:	2a20      	cmp	r2, #32
240064e2:	d11f      	bne.n	24006524 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240064e4:	699a      	ldr	r2, [r3, #24]
240064e6:	0690      	lsls	r0, r2, #26
240064e8:	f53f af7f 	bmi.w	240063ea <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240064ec:	f7fe f918 	bl	24004720 <HAL_GetTick>
240064f0:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240064f2:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240064f4:	2819      	cmp	r0, #25
240064f6:	d9f5      	bls.n	240064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240064f8:	2620      	movs	r6, #32
              status = HAL_ERROR;
240064fa:	f04f 0a01 	mov.w	sl, #1
240064fe:	e774      	b.n	240063ea <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24006500:	f1ba 0f00 	cmp.w	sl, #0
24006504:	f43f af7d 	beq.w	24006402 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24006508:	e77e      	b.n	24006408 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400650a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400650c:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
2400650e:	2001      	movs	r0, #1
24006510:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006514:	430b      	orrs	r3, r1
24006516:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006518:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400651c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006524:	685a      	ldr	r2, [r3, #4]
24006526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400652a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
2400652c:	f7fe f8f8 	bl	24004720 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006530:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24006532:	4604      	mov	r4, r0
24006534:	e7d6      	b.n	240064e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006536:	bf00      	nop
24006538:	fe00e800 	.word	0xfe00e800

2400653c <HAL_I2C_Init>:
  if (hi2c == NULL)
2400653c:	2800      	cmp	r0, #0
2400653e:	d056      	beq.n	240065ee <HAL_I2C_Init+0xb2>
{
24006540:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24006542:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006546:	4604      	mov	r4, r0
24006548:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400654c:	2b00      	cmp	r3, #0
2400654e:	d049      	beq.n	240065e4 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24006550:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24006552:	2324      	movs	r3, #36	; 0x24
24006554:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24006558:	6813      	ldr	r3, [r2, #0]
2400655a:	f023 0301 	bic.w	r3, r3, #1
2400655e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24006560:	e9d4 2300 	ldrd	r2, r3, [r4]
24006564:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24006568:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400656a:	6822      	ldr	r2, [r4, #0]
2400656c:	6893      	ldr	r3, [r2, #8]
2400656e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006572:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006574:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006576:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006578:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400657a:	68a3      	ldr	r3, [r4, #8]
2400657c:	bf0c      	ite	eq
2400657e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24006582:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
24006586:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006588:	68e3      	ldr	r3, [r4, #12]
2400658a:	2b02      	cmp	r3, #2
2400658c:	d103      	bne.n	24006596 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
2400658e:	6823      	ldr	r3, [r4, #0]
24006590:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006594:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006596:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24006598:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400659c:	4b15      	ldr	r3, [pc, #84]	; (240065f4 <HAL_I2C_Init+0xb8>)
2400659e:	6851      	ldr	r1, [r2, #4]
240065a0:	430b      	orrs	r3, r1
240065a2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
240065a4:	6822      	ldr	r2, [r4, #0]
240065a6:	68d3      	ldr	r3, [r2, #12]
240065a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240065ac:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
240065ae:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240065b0:	6821      	ldr	r1, [r4, #0]
240065b2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
240065b6:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240065b8:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
240065ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
240065be:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240065c0:	6821      	ldr	r1, [r4, #0]
240065c2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
240065c6:	4303      	orrs	r3, r0
  return HAL_OK;
240065c8:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
240065ca:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
240065cc:	6821      	ldr	r1, [r4, #0]
240065ce:	680b      	ldr	r3, [r1, #0]
240065d0:	f043 0301 	orr.w	r3, r3, #1
240065d4:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240065d6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
240065d8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
240065dc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
240065de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
240065e2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
240065e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
240065e8:	f7fb fc92 	bl	24001f10 <HAL_I2C_MspInit>
240065ec:	e7b0      	b.n	24006550 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
240065ee:	2001      	movs	r0, #1
}
240065f0:	4770      	bx	lr
240065f2:	bf00      	nop
240065f4:	02008000 	.word	0x02008000

240065f8 <HAL_I2C_Master_Transmit>:
{
240065f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240065fc:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
240065fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006602:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24006604:	2b20      	cmp	r3, #32
24006606:	d12c      	bne.n	24006662 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24006608:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
2400660c:	4683      	mov	fp, r0
2400660e:	2b01      	cmp	r3, #1
24006610:	d027      	beq.n	24006662 <HAL_I2C_Master_Transmit+0x6a>
24006612:	2301      	movs	r3, #1
24006614:	468a      	mov	sl, r1
24006616:	4616      	mov	r6, r2
24006618:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
2400661c:	f7fe f880 	bl	24004720 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006620:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24006624:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006626:	699a      	ldr	r2, [r3, #24]
24006628:	0417      	lsls	r7, r2, #16
2400662a:	d51d      	bpl.n	24006668 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400662c:	f7fe f878 	bl	24004720 <HAL_GetTick>
24006630:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006634:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006638:	2819      	cmp	r0, #25
2400663a:	d9f4      	bls.n	24006626 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400663c:	699a      	ldr	r2, [r3, #24]
2400663e:	0410      	lsls	r0, r2, #16
24006640:	d5f1      	bpl.n	24006626 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006642:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006646:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006648:	2200      	movs	r2, #0
      return HAL_ERROR;
2400664a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400664c:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
2400664e:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006652:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006656:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400665a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
2400665e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24006662:	2002      	movs	r0, #2
}
24006664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006668:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400666a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
2400666c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006670:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006674:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
24006676:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400667a:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400667e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24006682:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006686:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
2400668a:	b292      	uxth	r2, r2
2400668c:	2aff      	cmp	r2, #255	; 0xff
2400668e:	d87e      	bhi.n	2400678e <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
24006690:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24006694:	48ad      	ldr	r0, [pc, #692]	; (2400694c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
24006696:	b292      	uxth	r2, r2
24006698:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400669c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
2400669e:	6859      	ldr	r1, [r3, #4]
240066a0:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240066a2:	f3ca 0109 	ubfx	r1, sl, #0, #10
240066a6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240066aa:	4301      	orrs	r1, r0
240066ac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
240066b0:	49a7      	ldr	r1, [pc, #668]	; (24006950 <HAL_I2C_Master_Transmit+0x358>)
240066b2:	4311      	orrs	r1, r2
240066b4:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240066b6:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
240066ba:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240066be:	b29b      	uxth	r3, r3
240066c0:	2b00      	cmp	r3, #0
240066c2:	f000 8107 	beq.w	240068d4 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240066c6:	f8db 3000 	ldr.w	r3, [fp]
240066ca:	699c      	ldr	r4, [r3, #24]
240066cc:	f014 0402 	ands.w	r4, r4, #2
240066d0:	f040 80c5 	bne.w	2400685e <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
240066d4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240066d6:	f012 0210 	ands.w	r2, r2, #16
240066da:	f000 808d 	beq.w	240067f8 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240066de:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
240066e0:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
240066e2:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240066e4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240066e6:	f8db 3000 	ldr.w	r3, [fp]
240066ea:	1c69      	adds	r1, r5, #1
240066ec:	699a      	ldr	r2, [r3, #24]
240066ee:	f040 8085 	bne.w	240067fc <HAL_I2C_Master_Transmit+0x204>
240066f2:	0690      	lsls	r0, r2, #26
240066f4:	f100 8106 	bmi.w	24006904 <HAL_I2C_Master_Transmit+0x30c>
240066f8:	b937      	cbnz	r7, 24006708 <HAL_I2C_Master_Transmit+0x110>
240066fa:	699a      	ldr	r2, [r3, #24]
240066fc:	0691      	lsls	r1, r2, #26
240066fe:	d5fc      	bpl.n	240066fa <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006700:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24006704:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24006708:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
2400670c:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
2400670e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006710:	05ce      	lsls	r6, r1, #23
24006712:	d54b      	bpl.n	240067ac <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006714:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006718:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
2400671a:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400671e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006720:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006724:	d506      	bpl.n	24006734 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006726:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
2400672a:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400672e:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006730:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006734:	0589      	lsls	r1, r1, #22
24006736:	d506      	bpl.n	24006746 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006738:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
2400673c:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006740:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006742:	f8db 3000 	ldr.w	r3, [fp]
24006746:	6999      	ldr	r1, [r3, #24]
24006748:	078e      	lsls	r6, r1, #30
2400674a:	d503      	bpl.n	24006754 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
2400674c:	2100      	movs	r1, #0
2400674e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006750:	f8db 3000 	ldr.w	r3, [fp]
24006754:	6999      	ldr	r1, [r3, #24]
24006756:	07cd      	lsls	r5, r1, #31
24006758:	d405      	bmi.n	24006766 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400675a:	6999      	ldr	r1, [r3, #24]
2400675c:	f041 0101 	orr.w	r1, r1, #1
24006760:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24006762:	f8db 3000 	ldr.w	r3, [fp]
24006766:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006768:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
2400676a:	487a      	ldr	r0, [pc, #488]	; (24006954 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
2400676c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
2400676e:	4001      	ands	r1, r0
        return HAL_ERROR;
24006770:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006772:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006774:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24006778:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
2400677c:	431a      	orrs	r2, r3
2400677e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006782:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006786:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
2400678a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400678e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006790:	496e      	ldr	r1, [pc, #440]	; (2400694c <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006792:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006796:	685a      	ldr	r2, [r3, #4]
24006798:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
2400679a:	f3ca 0109 	ubfx	r1, sl, #0, #10
2400679e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240067a2:	4311      	orrs	r1, r2
240067a4:	4a6c      	ldr	r2, [pc, #432]	; (24006958 <HAL_I2C_Master_Transmit+0x360>)
240067a6:	430a      	orrs	r2, r1
240067a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240067aa:	e784      	b.n	240066b6 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240067ac:	054c      	lsls	r4, r1, #21
240067ae:	d4ba      	bmi.n	24006726 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240067b0:	058f      	lsls	r7, r1, #22
240067b2:	d4c1      	bmi.n	24006738 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
240067b4:	2800      	cmp	r0, #0
240067b6:	d1c6      	bne.n	24006746 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
240067b8:	1c6a      	adds	r2, r5, #1
240067ba:	d086      	beq.n	240066ca <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240067bc:	f7fd ffb0 	bl	24004720 <HAL_GetTick>
240067c0:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
240067c4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240067c8:	4285      	cmp	r5, r0
240067ca:	d302      	bcc.n	240067d2 <HAL_I2C_Master_Transmit+0x1da>
240067cc:	2d00      	cmp	r5, #0
240067ce:	f47f af7c 	bne.w	240066ca <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
240067d2:	699a      	ldr	r2, [r3, #24]
240067d4:	f012 0202 	ands.w	r2, r2, #2
240067d8:	f47f af77 	bne.w	240066ca <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240067dc:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240067e0:	2120      	movs	r1, #32
        return HAL_ERROR;
240067e2:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
240067e4:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240067e8:	430b      	orrs	r3, r1
240067ea:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240067ee:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240067f2:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
240067f6:	e735      	b.n	24006664 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
240067f8:	4610      	mov	r0, r2
240067fa:	e788      	b.n	2400670e <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240067fc:	0692      	lsls	r2, r2, #26
240067fe:	f100 8081 	bmi.w	24006904 <HAL_I2C_Master_Transmit+0x30c>
24006802:	2f00      	cmp	r7, #0
24006804:	d180      	bne.n	24006708 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006806:	f7fd ff8b 	bl	24004720 <HAL_GetTick>
2400680a:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400680c:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006810:	4285      	cmp	r5, r0
24006812:	d302      	bcc.n	2400681a <HAL_I2C_Master_Transmit+0x222>
24006814:	2d00      	cmp	r5, #0
24006816:	f47f af68 	bne.w	240066ea <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400681a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
2400681c:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006820:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24006822:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006824:	0409      	lsls	r1, r1, #16
24006826:	d50c      	bpl.n	24006842 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24006828:	0441      	lsls	r1, r0, #17
2400682a:	d40a      	bmi.n	24006842 <HAL_I2C_Master_Transmit+0x24a>
2400682c:	2a20      	cmp	r2, #32
2400682e:	d008      	beq.n	24006842 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006830:	685a      	ldr	r2, [r3, #4]
24006832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006836:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006838:	f7fd ff72 	bl	24004720 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400683c:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24006840:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006842:	699a      	ldr	r2, [r3, #24]
24006844:	0690      	lsls	r0, r2, #26
24006846:	f53f af50 	bmi.w	240066ea <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400684a:	f7fd ff69 	bl	24004720 <HAL_GetTick>
2400684e:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006850:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006854:	2819      	cmp	r0, #25
24006856:	d9f4      	bls.n	24006842 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006858:	2420      	movs	r4, #32
              status = HAL_ERROR;
2400685a:	2701      	movs	r7, #1
2400685c:	e745      	b.n	240066ea <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400685e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
24006862:	7812      	ldrb	r2, [r2, #0]
24006864:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006866:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
2400686a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
2400686e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
24006870:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
24006874:	3b01      	subs	r3, #1
      hi2c->XferCount--;
24006876:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24006878:	3101      	adds	r1, #1
      hi2c->XferSize--;
2400687a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
2400687c:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006880:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006884:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006888:	b292      	uxth	r2, r2
      hi2c->XferSize--;
2400688a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400688e:	2a00      	cmp	r2, #0
24006890:	f43f af13 	beq.w	240066ba <HAL_I2C_Master_Transmit+0xc2>
24006894:	2b00      	cmp	r3, #0
24006896:	f47f af10 	bne.w	240066ba <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400689a:	f8db 2000 	ldr.w	r2, [fp]
2400689e:	1c6c      	adds	r4, r5, #1
240068a0:	d134      	bne.n	2400690c <HAL_I2C_Master_Transmit+0x314>
240068a2:	6993      	ldr	r3, [r2, #24]
240068a4:	0618      	lsls	r0, r3, #24
240068a6:	d5fc      	bpl.n	240068a2 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
240068a8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240068ac:	b29b      	uxth	r3, r3
240068ae:	2bff      	cmp	r3, #255	; 0xff
240068b0:	d958      	bls.n	24006964 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
240068b2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240068b4:	4929      	ldr	r1, [pc, #164]	; (2400695c <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
240068b6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240068ba:	6853      	ldr	r3, [r2, #4]
240068bc:	400b      	ands	r3, r1
240068be:	4928      	ldr	r1, [pc, #160]	; (24006960 <HAL_I2C_Master_Transmit+0x368>)
240068c0:	ea4a 0303 	orr.w	r3, sl, r3
240068c4:	4319      	orrs	r1, r3
240068c6:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
240068c8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
240068cc:	b29b      	uxth	r3, r3
240068ce:	2b00      	cmp	r3, #0
240068d0:	f47f aef9 	bne.w	240066c6 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
240068d4:	4642      	mov	r2, r8
240068d6:	4629      	mov	r1, r5
240068d8:	4658      	mov	r0, fp
240068da:	f7ff fd71 	bl	240063c0 <I2C_WaitOnSTOPFlagUntilTimeout>
240068de:	2800      	cmp	r0, #0
240068e0:	d151      	bne.n	24006986 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240068e2:	f8db 3000 	ldr.w	r3, [fp]
240068e6:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
240068e8:	4c1a      	ldr	r4, [pc, #104]	; (24006954 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240068ea:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
240068ec:	f8db 1000 	ldr.w	r1, [fp]
240068f0:	684b      	ldr	r3, [r1, #4]
240068f2:	4023      	ands	r3, r4
240068f4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
240068f6:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240068fa:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
240068fe:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24006902:	e6af      	b.n	24006664 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24006904:	2f00      	cmp	r7, #0
24006906:	f43f aefb 	beq.w	24006700 <HAL_I2C_Master_Transmit+0x108>
2400690a:	e6fd      	b.n	24006708 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400690c:	6993      	ldr	r3, [r2, #24]
2400690e:	0619      	lsls	r1, r3, #24
24006910:	d4ca      	bmi.n	240068a8 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006912:	f7fd ff05 	bl	24004720 <HAL_GetTick>
24006916:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400691a:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400691e:	4285      	cmp	r5, r0
24006920:	d301      	bcc.n	24006926 <HAL_I2C_Master_Transmit+0x32e>
24006922:	2d00      	cmp	r5, #0
24006924:	d1bb      	bne.n	2400689e <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006926:	6993      	ldr	r3, [r2, #24]
24006928:	f013 0380 	ands.w	r3, r3, #128	; 0x80
2400692c:	d1b7      	bne.n	2400689e <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400692e:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006932:	2120      	movs	r1, #32
          return HAL_ERROR;
24006934:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006936:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400693a:	430a      	orrs	r2, r1
2400693c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006940:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006944:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24006948:	e68c      	b.n	24006664 <HAL_I2C_Master_Transmit+0x6c>
2400694a:	bf00      	nop
2400694c:	fc009800 	.word	0xfc009800
24006950:	02002000 	.word	0x02002000
24006954:	fe00e800 	.word	0xfe00e800
24006958:	01ff2000 	.word	0x01ff2000
2400695c:	fc009c00 	.word	0xfc009c00
24006960:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
24006964:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24006968:	4808      	ldr	r0, [pc, #32]	; (2400698c <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
2400696a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400696c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
2400696e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006972:	6853      	ldr	r3, [r2, #4]
24006974:	4003      	ands	r3, r0
24006976:	ea4a 0303 	orr.w	r3, sl, r3
2400697a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400697e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24006982:	6053      	str	r3, [r2, #4]
}
24006984:	e699      	b.n	240066ba <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
24006986:	2001      	movs	r0, #1
24006988:	e66c      	b.n	24006664 <HAL_I2C_Master_Transmit+0x6c>
2400698a:	bf00      	nop
2400698c:	fc009c00 	.word	0xfc009c00

24006990 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
24006990:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006994:	2b20      	cmp	r3, #32
24006996:	d126      	bne.n	240069e6 <HAL_I2C_Slave_Receive_IT+0x56>
{
24006998:	b4f0      	push	{r4, r5, r6, r7}
2400699a:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
2400699c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240069a0:	2b01      	cmp	r3, #1
240069a2:	d022      	beq.n	240069ea <HAL_I2C_Slave_Receive_IT+0x5a>
240069a4:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240069a6:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240069a8:	4e11      	ldr	r6, [pc, #68]	; (240069f0 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
240069aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
240069ae:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240069b0:	4f10      	ldr	r7, [pc, #64]	; (240069f4 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
240069b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240069b6:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
240069b8:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
240069bc:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240069be:	686c      	ldr	r4, [r5, #4]
240069c0:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
240069c4:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
240069c6:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
240069c8:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
240069ca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240069cc:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
240069ce:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
240069d0:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240069d2:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
240069d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
240069d8:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240069da:	680a      	ldr	r2, [r1, #0]
240069dc:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
240069e0:	600a      	str	r2, [r1, #0]
}
240069e2:	bcf0      	pop	{r4, r5, r6, r7}
240069e4:	4770      	bx	lr
    return HAL_BUSY;
240069e6:	2002      	movs	r0, #2
}
240069e8:	4770      	bx	lr
    return HAL_BUSY;
240069ea:	2002      	movs	r0, #2
}
240069ec:	bcf0      	pop	{r4, r5, r6, r7}
240069ee:	4770      	bx	lr
240069f0:	ffff0000 	.word	0xffff0000
240069f4:	24006e91 	.word	0x24006e91

240069f8 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
240069f8:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
240069fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
240069fc:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
240069fe:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24006a00:	b103      	cbz	r3, 24006a04 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24006a02:	4718      	bx	r3
}
24006a04:	4770      	bx	lr
24006a06:	bf00      	nop

24006a08 <HAL_I2C_SlaveTxCpltCallback>:
24006a08:	4770      	bx	lr
24006a0a:	bf00      	nop

24006a0c <I2C_ITSlaveSeqCplt>:
{
24006a0c:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006a0e:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006a10:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006a12:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006a14:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006a18:	0451      	lsls	r1, r2, #17
24006a1a:	d50c      	bpl.n	24006a36 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006a1c:	681a      	ldr	r2, [r3, #0]
24006a1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006a22:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006a24:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a28:	2b29      	cmp	r3, #41	; 0x29
24006a2a:	d00e      	beq.n	24006a4a <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24006a2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a30:	2b2a      	cmp	r3, #42	; 0x2a
24006a32:	d024      	beq.n	24006a7e <I2C_ITSlaveSeqCplt+0x72>
}
24006a34:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006a36:	0412      	lsls	r2, r2, #16
24006a38:	d5f4      	bpl.n	24006a24 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006a3a:	681a      	ldr	r2, [r3, #0]
24006a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006a40:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006a42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a46:	2b29      	cmp	r3, #41	; 0x29
24006a48:	d1f0      	bne.n	24006a2c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a4a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006a4c:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a4e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006a50:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a54:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006a58:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a5a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a5e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a60:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006a64:	2a28      	cmp	r2, #40	; 0x28
24006a66:	bf0c      	ite	eq
24006a68:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24006a6c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a70:	4013      	ands	r3, r2
24006a72:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006a74:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006a78:	f7ff ffc6 	bl	24006a08 <HAL_I2C_SlaveTxCpltCallback>
}
24006a7c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a7e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a80:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a82:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006a84:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a88:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a8c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a8e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a92:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a94:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006a98:	2a28      	cmp	r2, #40	; 0x28
24006a9a:	bf0c      	ite	eq
24006a9c:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24006aa0:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006aa4:	4013      	ands	r3, r2
24006aa6:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006aa8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006aac:	f026 fe40 	bl	2402d730 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006ab0:	bd08      	pop	{r3, pc}
24006ab2:	bf00      	nop

24006ab4 <HAL_I2C_AddrCallback>:
}
24006ab4:	4770      	bx	lr
24006ab6:	bf00      	nop

24006ab8 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006ab8:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24006aba:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006abc:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006abe:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24006ac0:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006ac2:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006ac4:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006ac6:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24006ac8:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006acc:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24006ad0:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006ad2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006ad6:	d10f      	bne.n	24006af8 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006ad8:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006adc:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006ae0:	f013 0306 	ands.w	r3, r3, #6
24006ae4:	d106      	bne.n	24006af4 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24006ae6:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006ae8:	3501      	adds	r5, #1
24006aea:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24006aec:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006aee:	2d02      	cmp	r5, #2
24006af0:	d00c      	beq.n	24006b0c <I2C_ITAddrCplt.part.0+0x54>
}
24006af2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006af4:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006af8:	6823      	ldr	r3, [r4, #0]
24006afa:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24006afe:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24006b00:	2300      	movs	r3, #0
24006b02:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006b06:	f7ff ffd5 	bl	24006ab4 <HAL_I2C_AddrCallback>
}
24006b0a:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006b0c:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24006b0e:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006b10:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24006b12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006b16:	f7ff ffcd 	bl	24006ab4 <HAL_I2C_AddrCallback>
}
24006b1a:	bd70      	pop	{r4, r5, r6, pc}

24006b1c <HAL_I2C_ListenCpltCallback>:
24006b1c:	4770      	bx	lr
24006b1e:	bf00      	nop

24006b20 <HAL_I2C_AbortCpltCallback>:
24006b20:	4770      	bx	lr
24006b22:	bf00      	nop

24006b24 <I2C_DMAAbort>:
{
24006b24:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24006b26:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24006b28:	6b83      	ldr	r3, [r0, #56]	; 0x38
24006b2a:	b10b      	cbz	r3, 24006b30 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24006b2c:	2200      	movs	r2, #0
24006b2e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24006b30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24006b32:	b10b      	cbz	r3, 24006b38 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24006b34:	2200      	movs	r2, #0
24006b36:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006b3c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006b3e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b42:	d005      	beq.n	24006b50 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24006b44:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006b46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006b4a:	f026 fdf5 	bl	2402d738 <__HAL_I2C_ErrorCallback_veneer>
}
24006b4e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006b50:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24006b52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006b56:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006b5a:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006b5c:	f7ff ffe0 	bl	24006b20 <HAL_I2C_AbortCpltCallback>
}
24006b60:	bd08      	pop	{r3, pc}
24006b62:	bf00      	nop

24006b64 <I2C_ITError>:
{
24006b64:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006b66:	4a5d      	ldr	r2, [pc, #372]	; (24006cdc <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006b68:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006b6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006b6e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006b70:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b74:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006b76:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24006b78:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24006b7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b7c:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24006b7e:	ea41 0102 	orr.w	r1, r1, r2
24006b82:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006b84:	d874      	bhi.n	24006c70 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b86:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b8a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b8e:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b92:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b94:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b98:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b9a:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006b9c:	bf14      	ite	ne
24006b9e:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24006ba2:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006ba6:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006ba8:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bac:	bf18      	it	ne
24006bae:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006bb2:	4013      	ands	r3, r2
24006bb4:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006bb6:	4b4a      	ldr	r3, [pc, #296]	; (24006ce0 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006bb8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006bbc:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006bbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24006bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006bc2:	b118      	cbz	r0, 24006bcc <I2C_ITError+0x68>
24006bc4:	2b11      	cmp	r3, #17
24006bc6:	d01e      	beq.n	24006c06 <I2C_ITError+0xa2>
24006bc8:	2b21      	cmp	r3, #33	; 0x21
24006bca:	d01c      	beq.n	24006c06 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24006bcc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006bce:	b118      	cbz	r0, 24006bd8 <I2C_ITError+0x74>
24006bd0:	2b12      	cmp	r3, #18
24006bd2:	d030      	beq.n	24006c36 <I2C_ITError+0xd2>
24006bd4:	2b22      	cmp	r3, #34	; 0x22
24006bd6:	d02e      	beq.n	24006c36 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006bd8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006bdc:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006bde:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006be2:	d006      	beq.n	24006bf2 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24006be4:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24006be6:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006be8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006bec:	f026 fda4 	bl	2402d738 <__HAL_I2C_ErrorCallback_veneer>
}
24006bf0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006bf2:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24006bf4:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006bf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006bfa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006bfe:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006c00:	f7ff ff8e 	bl	24006b20 <HAL_I2C_AbortCpltCallback>
}
24006c04:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24006c06:	6823      	ldr	r3, [r4, #0]
24006c08:	681a      	ldr	r2, [r3, #0]
24006c0a:	0451      	lsls	r1, r2, #17
24006c0c:	d460      	bmi.n	24006cd0 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006c0e:	f7ff fa05 	bl	2400601c <HAL_DMA_GetState>
24006c12:	2801      	cmp	r0, #1
24006c14:	d0e0      	beq.n	24006bd8 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006c16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24006c18:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006c1a:	4932      	ldr	r1, [pc, #200]	; (24006ce4 <I2C_ITError+0x180>)
24006c1c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24006c22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006c24:	f7fe fc66 	bl	240054f4 <HAL_DMA_Abort_IT>
24006c28:	2800      	cmp	r0, #0
24006c2a:	d0e1      	beq.n	24006bf0 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006c2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24006c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006c32:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006c34:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24006c36:	6823      	ldr	r3, [r4, #0]
24006c38:	681a      	ldr	r2, [r3, #0]
24006c3a:	0412      	lsls	r2, r2, #16
24006c3c:	d504      	bpl.n	24006c48 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006c3e:	681a      	ldr	r2, [r3, #0]
24006c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006c44:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24006c46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006c48:	f7ff f9e8 	bl	2400601c <HAL_DMA_GetState>
24006c4c:	2801      	cmp	r0, #1
24006c4e:	d0c3      	beq.n	24006bd8 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006c50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24006c52:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006c54:	4923      	ldr	r1, [pc, #140]	; (24006ce4 <I2C_ITError+0x180>)
24006c56:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006c58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24006c5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006c5e:	f7fe fc49 	bl	240054f4 <HAL_DMA_Abort_IT>
24006c62:	2800      	cmp	r0, #0
24006c64:	d0c4      	beq.n	24006bf0 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006c66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24006c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006c6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006c6e:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006c70:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006c72:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006c76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006c7a:	6813      	ldr	r3, [r2, #0]
24006c7c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006c80:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006c82:	6803      	ldr	r3, [r0, #0]
24006c84:	699a      	ldr	r2, [r3, #24]
24006c86:	0792      	lsls	r2, r2, #30
24006c88:	d501      	bpl.n	24006c8e <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24006c8a:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006c8c:	6803      	ldr	r3, [r0, #0]
24006c8e:	699a      	ldr	r2, [r3, #24]
24006c90:	07d6      	lsls	r6, r2, #31
24006c92:	d403      	bmi.n	24006c9c <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006c94:	699a      	ldr	r2, [r3, #24]
24006c96:	f042 0201 	orr.w	r2, r2, #1
24006c9a:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24006c9c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006ca0:	2b60      	cmp	r3, #96	; 0x60
24006ca2:	d012      	beq.n	24006cca <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24006ca4:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006ca6:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
24006ca8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006cac:	699a      	ldr	r2, [r3, #24]
24006cae:	0695      	lsls	r5, r2, #26
24006cb0:	d50b      	bpl.n	24006cca <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24006cb2:	699a      	ldr	r2, [r3, #24]
24006cb4:	06d0      	lsls	r0, r2, #27
24006cb6:	d506      	bpl.n	24006cc6 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006cb8:	2210      	movs	r2, #16
24006cba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006cbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cbe:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006cc0:	f042 0204 	orr.w	r2, r2, #4
24006cc4:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cc6:	2220      	movs	r2, #32
24006cc8:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24006cca:	2300      	movs	r3, #0
24006ccc:	6363      	str	r3, [r4, #52]	; 0x34
24006cce:	e776      	b.n	24006bbe <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006cd0:	681a      	ldr	r2, [r3, #0]
24006cd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006cd6:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006cd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006cda:	e798      	b.n	24006c0e <I2C_ITError+0xaa>
24006cdc:	ffff0000 	.word	0xffff0000
24006ce0:	24006e91 	.word	0x24006e91
24006ce4:	24006b25 	.word	0x24006b25

24006ce8 <I2C_ITSlaveCplt>:
{
24006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006cea:	6802      	ldr	r2, [r0, #0]
{
24006cec:	460d      	mov	r5, r1
24006cee:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006cf0:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006cf2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cf6:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006cf8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006cfc:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006cfe:	2b21      	cmp	r3, #33	; 0x21
24006d00:	d16f      	bne.n	24006de2 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006d02:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006d04:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006d08:	6802      	ldr	r2, [r0, #0]
24006d0a:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
24006d0e:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006d10:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006d12:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
24006d14:	485c      	ldr	r0, [pc, #368]	; (24006e88 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006d16:	6853      	ldr	r3, [r2, #4]
24006d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24006d1c:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24006d1e:	6822      	ldr	r2, [r4, #0]
24006d20:	6853      	ldr	r3, [r2, #4]
24006d22:	4003      	ands	r3, r0
24006d24:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006d26:	6823      	ldr	r3, [r4, #0]
24006d28:	699a      	ldr	r2, [r3, #24]
24006d2a:	0797      	lsls	r7, r2, #30
24006d2c:	d502      	bpl.n	24006d34 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
24006d2e:	2200      	movs	r2, #0
24006d30:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006d32:	6823      	ldr	r3, [r4, #0]
24006d34:	699a      	ldr	r2, [r3, #24]
24006d36:	07d6      	lsls	r6, r2, #31
24006d38:	d403      	bmi.n	24006d42 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006d3a:	699a      	ldr	r2, [r3, #24]
24006d3c:	f042 0201 	orr.w	r2, r2, #1
24006d40:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006d42:	0448      	lsls	r0, r1, #17
24006d44:	d558      	bpl.n	24006df8 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006d46:	6822      	ldr	r2, [r4, #0]
24006d48:	6813      	ldr	r3, [r2, #0]
24006d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24006d4e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24006d50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24006d52:	b11b      	cbz	r3, 24006d5c <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24006d54:	681a      	ldr	r2, [r3, #0]
24006d56:	6853      	ldr	r3, [r2, #4]
24006d58:	b29b      	uxth	r3, r3
24006d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24006d5c:	076a      	lsls	r2, r5, #29
24006d5e:	d50a      	bpl.n	24006d76 <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006d60:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
24006d62:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006d6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006d6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006d70:	3301      	adds	r3, #1
24006d72:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006d74:	bb72      	cbnz	r2, 24006dd4 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
24006d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006d78:	b29b      	uxth	r3, r3
24006d7a:	b11b      	cbz	r3, 24006d84 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006d7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006d7e:	f043 0304 	orr.w	r3, r3, #4
24006d82:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006d84:	2700      	movs	r7, #0
24006d86:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006d8a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24006d8c:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006d8e:	2e00      	cmp	r6, #0
24006d90:	d13d      	bne.n	24006e0e <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24006d92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24006d94:	4d3d      	ldr	r5, [pc, #244]	; (24006e8c <I2C_ITSlaveCplt+0x1a4>)
24006d96:	42ab      	cmp	r3, r5
24006d98:	d10e      	bne.n	24006db8 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006d9a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006d9e:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006da0:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006da4:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24006da6:	f04f 0320 	mov.w	r3, #32
24006daa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006dae:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006db0:	d066      	beq.n	24006e80 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006db2:	f7ff fe29 	bl	24006a08 <HAL_I2C_SlaveTxCpltCallback>
}
24006db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24006db8:	4620      	mov	r0, r4
24006dba:	f7ff fe27 	bl	24006a0c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24006dbe:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006dc0:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24006dc2:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24006dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006dc8:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24006dcc:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24006dce:	f7ff fea5 	bl	24006b1c <HAL_I2C_ListenCpltCallback>
}
24006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
24006dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006dd6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006dd8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006dda:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006ddc:	b29b      	uxth	r3, r3
24006dde:	8563      	strh	r3, [r4, #42]	; 0x2a
24006de0:	e7c9      	b.n	24006d76 <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24006de2:	2b22      	cmp	r3, #34	; 0x22
24006de4:	d195      	bne.n	24006d12 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006de6:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006de8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006dec:	6802      	ldr	r2, [r0, #0]
24006dee:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24006df2:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006df4:	6323      	str	r3, [r4, #48]	; 0x30
24006df6:	e78c      	b.n	24006d12 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006df8:	0409      	lsls	r1, r1, #16
24006dfa:	d5af      	bpl.n	24006d5c <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006dfc:	6822      	ldr	r2, [r4, #0]
24006dfe:	6813      	ldr	r3, [r2, #0]
24006e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006e04:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24006e06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006e08:	2b00      	cmp	r3, #0
24006e0a:	d1a3      	bne.n	24006d54 <I2C_ITSlaveCplt+0x6c>
24006e0c:	e7a6      	b.n	24006d5c <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24006e0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006e10:	4620      	mov	r0, r4
24006e12:	f7ff fea7 	bl	24006b64 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24006e16:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006e1a:	2b28      	cmp	r3, #40	; 0x28
24006e1c:	d1cb      	bne.n	24006db6 <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
24006e1e:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006e20:	4a1a      	ldr	r2, [pc, #104]	; (24006e8c <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
24006e22:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006e24:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24006e26:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24006e28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006e2c:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006e2e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006e32:	d512      	bpl.n	24006e5a <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006e34:	6822      	ldr	r2, [r4, #0]
24006e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006e3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006e3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006e40:	3301      	adds	r3, #1
24006e42:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006e44:	b14a      	cbz	r2, 24006e5a <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
24006e46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006e48:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006e4a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006e4c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006e4e:	b29b      	uxth	r3, r3
24006e50:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006e54:	f043 0304 	orr.w	r3, r3, #4
24006e58:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e5a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e5c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e5e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24006e62:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006e64:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006e68:	6813      	ldr	r3, [r2, #0]
24006e6a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006e6e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006e70:	6823      	ldr	r3, [r4, #0]
24006e72:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24006e74:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24006e76:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24006e7a:	f7ff fe4f 	bl	24006b1c <HAL_I2C_ListenCpltCallback>
}
24006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006e80:	f026 fc56 	bl	2402d730 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24006e86:	bf00      	nop
24006e88:	fe00e800 	.word	0xfe00e800
24006e8c:	ffff0000 	.word	0xffff0000

24006e90 <I2C_Slave_ISR_IT>:
{
24006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24006e92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24006e96:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24006e98:	2b01      	cmp	r3, #1
24006e9a:	d07f      	beq.n	24006f9c <I2C_Slave_ISR_IT+0x10c>
24006e9c:	4617      	mov	r7, r2
24006e9e:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006ea0:	068a      	lsls	r2, r1, #26
24006ea2:	4604      	mov	r4, r0
24006ea4:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24006ea6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006eaa:	d501      	bpl.n	24006eb0 <I2C_Slave_ISR_IT+0x20>
24006eac:	06bb      	lsls	r3, r7, #26
24006eae:	d461      	bmi.n	24006f74 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24006eb0:	06ea      	lsls	r2, r5, #27
24006eb2:	d51b      	bpl.n	24006eec <I2C_Slave_ISR_IT+0x5c>
24006eb4:	06fb      	lsls	r3, r7, #27
24006eb6:	d519      	bpl.n	24006eec <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
24006eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006eba:	b29b      	uxth	r3, r3
24006ebc:	2b00      	cmp	r3, #0
24006ebe:	d15e      	bne.n	24006f7e <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24006ec0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24006ec4:	2a28      	cmp	r2, #40	; 0x28
24006ec6:	d102      	bne.n	24006ece <I2C_Slave_ISR_IT+0x3e>
24006ec8:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24006ecc:	d07f      	beq.n	24006fce <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006ece:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006ed2:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006ed4:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006ed6:	6823      	ldr	r3, [r4, #0]
24006ed8:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006eda:	d102      	bne.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
24006edc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006ee0:	d162      	bne.n	24006fa8 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
24006ee2:	2300      	movs	r3, #0
  return HAL_OK;
24006ee4:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24006ee6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006eec:	076a      	lsls	r2, r5, #29
24006eee:	d40d      	bmi.n	24006f0c <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24006ef0:	0728      	lsls	r0, r5, #28
24006ef2:	d529      	bpl.n	24006f48 <I2C_Slave_ISR_IT+0xb8>
24006ef4:	0739      	lsls	r1, r7, #28
24006ef6:	d527      	bpl.n	24006f48 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24006ef8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
24006f00:	2b28      	cmp	r3, #40	; 0x28
24006f02:	d060      	beq.n	24006fc6 <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006f04:	6823      	ldr	r3, [r4, #0]
24006f06:	2208      	movs	r2, #8
24006f08:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24006f0a:	e7ea      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006f0c:	077b      	lsls	r3, r7, #29
24006f0e:	d5ef      	bpl.n	24006ef0 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
24006f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006f12:	b29b      	uxth	r3, r3
24006f14:	b16b      	cbz	r3, 24006f32 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006f16:	6822      	ldr	r2, [r4, #0]
24006f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006f1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006f1c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24006f1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006f20:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f24:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24006f26:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006f28:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006f2a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24006f2c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f2e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f30:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24006f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006f34:	b29b      	uxth	r3, r3
24006f36:	2b00      	cmp	r3, #0
24006f38:	d1d3      	bne.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
24006f3a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006f3e:	d0d0      	beq.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
24006f40:	4620      	mov	r0, r4
24006f42:	f7ff fd63 	bl	24006a0c <I2C_ITSlaveSeqCplt>
24006f46:	e7cc      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24006f48:	07aa      	lsls	r2, r5, #30
24006f4a:	d5ca      	bpl.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
24006f4c:	07bb      	lsls	r3, r7, #30
24006f4e:	d5c8      	bpl.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
24006f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006f52:	b29b      	uxth	r3, r3
24006f54:	b323      	cbz	r3, 24006fa0 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24006f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
24006f58:	6823      	ldr	r3, [r4, #0]
24006f5a:	7812      	ldrb	r2, [r2, #0]
24006f5c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006f5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f64:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24006f66:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006f68:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006f6a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24006f6c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006f6e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006f70:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006f72:	e7b6      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24006f74:	f7ff feb8 	bl	24006ce8 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24006f78:	06ea      	lsls	r2, r5, #27
24006f7a:	d5b7      	bpl.n	24006eec <I2C_Slave_ISR_IT+0x5c>
24006f7c:	e79a      	b.n	24006eb4 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f7e:	6823      	ldr	r3, [r4, #0]
24006f80:	2210      	movs	r2, #16
24006f82:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006f84:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006f86:	f043 0304 	orr.w	r3, r3, #4
24006f8a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24006f8c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24006f90:	d1a7      	bne.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24006f92:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006f94:	4620      	mov	r0, r4
24006f96:	f7ff fde5 	bl	24006b64 <I2C_ITError>
24006f9a:	e7a2      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
24006f9c:	2002      	movs	r0, #2
}
24006f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24006fa0:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24006fa4:	d19d      	bne.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
24006fa6:	e7cb      	b.n	24006f40 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006fa8:	6823      	ldr	r3, [r4, #0]
24006faa:	699a      	ldr	r2, [r3, #24]
24006fac:	0790      	lsls	r0, r2, #30
24006fae:	d502      	bpl.n	24006fb6 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
24006fb0:	2200      	movs	r2, #0
24006fb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006fb4:	6823      	ldr	r3, [r4, #0]
24006fb6:	699a      	ldr	r2, [r3, #24]
24006fb8:	07d1      	lsls	r1, r2, #31
24006fba:	d4c1      	bmi.n	24006f40 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006fbc:	699a      	ldr	r2, [r3, #24]
24006fbe:	f042 0201 	orr.w	r2, r2, #1
24006fc2:	619a      	str	r2, [r3, #24]
24006fc4:	e7bc      	b.n	24006f40 <I2C_Slave_ISR_IT+0xb0>
24006fc6:	4620      	mov	r0, r4
24006fc8:	f7ff fd76 	bl	24006ab8 <I2C_ITAddrCplt.part.0>
24006fcc:	e789      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006fce:	4918      	ldr	r1, [pc, #96]	; (24007030 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
24006fd0:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006fd2:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24006fd4:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006fd6:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24006fd8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24006fda:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24006fe2:	d512      	bpl.n	2400700a <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006fe4:	6822      	ldr	r2, [r4, #0]
24006fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006fea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006fee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006ff0:	3301      	adds	r3, #1
24006ff2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006ff4:	b14a      	cbz	r2, 2400700a <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
24006ff6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006ff8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006ffa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006ffc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006ffe:	b29b      	uxth	r3, r3
24007000:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007002:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007004:	f043 0304 	orr.w	r3, r3, #4
24007008:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400700a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400700c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400700e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24007012:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007014:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007018:	6813      	ldr	r3, [r2, #0]
2400701a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400701e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007020:	6823      	ldr	r3, [r4, #0]
24007022:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24007024:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24007026:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
2400702a:	f7ff fd77 	bl	24006b1c <HAL_I2C_ListenCpltCallback>
}
2400702e:	e758      	b.n	24006ee2 <I2C_Slave_ISR_IT+0x52>
24007030:	ffff0000 	.word	0xffff0000

24007034 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007034:	6803      	ldr	r3, [r0, #0]
{
24007036:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007038:	699a      	ldr	r2, [r3, #24]
2400703a:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400703c:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400703e:	f412 7f80 	tst.w	r2, #256	; 0x100
24007042:	d032      	beq.n	240070aa <HAL_I2C_ER_IRQHandler+0x76>
24007044:	f011 0f80 	tst.w	r1, #128	; 0x80
24007048:	d021      	beq.n	2400708e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400704a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400704c:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007050:	f041 0101 	orr.w	r1, r1, #1
24007054:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007056:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007058:	0553      	lsls	r3, r2, #21
2400705a:	d507      	bpl.n	2400706c <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400705c:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400705e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007060:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007064:	f041 0108 	orr.w	r1, r1, #8
24007068:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400706a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400706c:	0592      	lsls	r2, r2, #22
2400706e:	d507      	bpl.n	24007080 <HAL_I2C_ER_IRQHandler+0x4c>
24007070:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007072:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007074:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007078:	f043 0302 	orr.w	r3, r3, #2
2400707c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400707e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007080:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007082:	f011 0f0b 	tst.w	r1, #11
24007086:	d10c      	bne.n	240070a2 <HAL_I2C_ER_IRQHandler+0x6e>
}
24007088:	f85d 4b04 	ldr.w	r4, [sp], #4
2400708c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400708e:	0553      	lsls	r3, r2, #21
24007090:	d4f6      	bmi.n	24007080 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007092:	0593      	lsls	r3, r2, #22
24007094:	d5f4      	bpl.n	24007080 <HAL_I2C_ER_IRQHandler+0x4c>
24007096:	060a      	lsls	r2, r1, #24
24007098:	d4eb      	bmi.n	24007072 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
2400709a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400709c:	f011 0f0b 	tst.w	r1, #11
240070a0:	d0f2      	beq.n	24007088 <HAL_I2C_ER_IRQHandler+0x54>
}
240070a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
240070a6:	f7ff bd5d 	b.w	24006b64 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
240070aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
240070ae:	d0f0      	beq.n	24007092 <HAL_I2C_ER_IRQHandler+0x5e>
240070b0:	0609      	lsls	r1, r1, #24
240070b2:	d5e5      	bpl.n	24007080 <HAL_I2C_ER_IRQHandler+0x4c>
240070b4:	e7d3      	b.n	2400705e <HAL_I2C_ER_IRQHandler+0x2a>
240070b6:	bf00      	nop

240070b8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240070b8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240070bc:	2a20      	cmp	r2, #32
240070be:	d129      	bne.n	24007114 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
240070c0:	4603      	mov	r3, r0
{
240070c2:	b500      	push	{lr}
240070c4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240070c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240070cc:	2a01      	cmp	r2, #1
240070ce:	d023      	beq.n	24007118 <HAL_I2CEx_ConfigAnalogFilter+0x60>
240070d0:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240070d2:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240070d4:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240070dc:	2224      	movs	r2, #36	; 0x24
240070de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240070e2:	6802      	ldr	r2, [r0, #0]
240070e4:	f022 0201 	bic.w	r2, r2, #1
240070e8:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240070ea:	6818      	ldr	r0, [r3, #0]
240070ec:	6802      	ldr	r2, [r0, #0]
240070ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
240070f2:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
240070f4:	6818      	ldr	r0, [r3, #0]
240070f6:	6802      	ldr	r2, [r0, #0]
240070f8:	4311      	orrs	r1, r2
240070fa:	6001      	str	r1, [r0, #0]

    return HAL_OK;
240070fc:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
240070fe:	6819      	ldr	r1, [r3, #0]
24007100:	680a      	ldr	r2, [r1, #0]
24007102:	f042 0201 	orr.w	r2, r2, #1
24007106:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007108:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400710c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007110:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007114:	2002      	movs	r0, #2
}
24007116:	4770      	bx	lr
    return HAL_BUSY;
24007118:	2002      	movs	r0, #2
}
2400711a:	f85d fb04 	ldr.w	pc, [sp], #4
2400711e:	bf00      	nop

24007120 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007120:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24007124:	2a20      	cmp	r2, #32
24007126:	d127      	bne.n	24007178 <HAL_I2CEx_ConfigDigitalFilter+0x58>
24007128:	4603      	mov	r3, r0
{
2400712a:	b500      	push	{lr}
2400712c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007130:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24007134:	2a01      	cmp	r2, #1
24007136:	d021      	beq.n	2400717c <HAL_I2CEx_ConfigDigitalFilter+0x5c>
24007138:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2400713a:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400713c:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007144:	2224      	movs	r2, #36	; 0x24
24007146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
2400714a:	6802      	ldr	r2, [r0, #0]
2400714c:	f022 0201 	bic.w	r2, r2, #1
24007150:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
24007152:	6818      	ldr	r0, [r3, #0]
24007154:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
24007156:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
2400715a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
2400715e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24007160:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
24007162:	6819      	ldr	r1, [r3, #0]
24007164:	680a      	ldr	r2, [r1, #0]
24007166:	f042 0201 	orr.w	r2, r2, #1
2400716a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
2400716c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007170:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007174:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007178:	2002      	movs	r0, #2
}
2400717a:	4770      	bx	lr
    return HAL_BUSY;
2400717c:	2002      	movs	r0, #2
}
2400717e:	f85d fb04 	ldr.w	pc, [sp], #4
24007182:	bf00      	nop

24007184 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007184:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007186:	4c10      	ldr	r4, [pc, #64]	; (240071c8 <HAL_PWREx_ConfigSupply+0x44>)
24007188:	68e3      	ldr	r3, [r4, #12]
2400718a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2400718e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007190:	d105      	bne.n	2400719e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24007192:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24007196:	1a18      	subs	r0, r3, r0
24007198:	bf18      	it	ne
2400719a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
2400719c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2400719e:	f023 0307 	bic.w	r3, r3, #7
240071a2:	4318      	orrs	r0, r3
240071a4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
240071a6:	f7fd fabb 	bl	24004720 <HAL_GetTick>
240071aa:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240071ac:	e005      	b.n	240071ba <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240071ae:	f7fd fab7 	bl	24004720 <HAL_GetTick>
240071b2:	1b40      	subs	r0, r0, r5
240071b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
240071b8:	d804      	bhi.n	240071c4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240071ba:	6863      	ldr	r3, [r4, #4]
240071bc:	049b      	lsls	r3, r3, #18
240071be:	d5f6      	bpl.n	240071ae <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
240071c0:	2000      	movs	r0, #0
}
240071c2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
240071c4:	2001      	movs	r0, #1
}
240071c6:	bd38      	pop	{r3, r4, r5, pc}
240071c8:	58024800 	.word	0x58024800

240071cc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240071cc:	4b3b      	ldr	r3, [pc, #236]	; (240072bc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
240071ce:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240071d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240071d2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240071d4:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
240071d6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240071da:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240071dc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240071e0:	d038      	beq.n	24007254 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240071e2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240071e6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240071ea:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240071ee:	fb05 f101 	mul.w	r1, r5, r1
240071f2:	2a01      	cmp	r2, #1
240071f4:	ee07 1a90 	vmov	s15, r1
240071f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
240071fc:	d002      	beq.n	24007204 <HAL_RCC_GetSysClockFreq.part.0+0x38>
240071fe:	2a02      	cmp	r2, #2
24007200:	d04e      	beq.n	240072a0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
24007202:	b34a      	cbz	r2, 24007258 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007204:	ee07 0a90 	vmov	s15, r0
24007208:	eddf 6a2d 	vldr	s13, [pc, #180]	; 240072c0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
2400720c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007212:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24007216:	eddf 5a2b 	vldr	s11, [pc, #172]	; 240072c4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
2400721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400721e:	ee06 3a90 	vmov	s13, r3
24007222:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24007226:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400722a:	ee76 6a85 	vadd.f32	s13, s13, s10
2400722e:	eee7 6a25 	vfma.f32	s13, s14, s11
24007232:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007236:	4b21      	ldr	r3, [pc, #132]	; (240072bc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
24007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400723a:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400723e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007240:	ee07 3a90 	vmov	s15, r3
24007244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007248:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400724c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007250:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24007254:	bc30      	pop	{r4, r5}
24007256:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007258:	681a      	ldr	r2, [r3, #0]
2400725a:	0692      	lsls	r2, r2, #26
2400725c:	d527      	bpl.n	240072ae <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400725e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007260:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007264:	4a18      	ldr	r2, [pc, #96]	; (240072c8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007266:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400726c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007274:	ed9f 5a13 	vldr	s10, [pc, #76]	; 240072c4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007278:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400727c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400727e:	ee06 3a90 	vmov	s13, r3
24007282:	ee05 2a90 	vmov	s11, r2
24007286:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400728a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400728e:	ee76 6a86 	vadd.f32	s13, s13, s12
24007292:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24007296:	eee7 6a05 	vfma.f32	s13, s14, s10
2400729a:	ee66 6a26 	vmul.f32	s13, s12, s13
2400729e:	e7ca      	b.n	24007236 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072a0:	ee07 0a90 	vmov	s15, r0
240072a4:	eddf 6a09 	vldr	s13, [pc, #36]	; 240072cc <HAL_RCC_GetSysClockFreq.part.0+0x100>
240072a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240072ac:	e7b0      	b.n	24007210 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072ae:	ee07 0a90 	vmov	s15, r0
240072b2:	eddf 6a07 	vldr	s13, [pc, #28]	; 240072d0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
240072b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240072ba:	e7a9      	b.n	24007210 <HAL_RCC_GetSysClockFreq.part.0+0x44>
240072bc:	58024400 	.word	0x58024400
240072c0:	4a742400 	.word	0x4a742400
240072c4:	39000000 	.word	0x39000000
240072c8:	03d09000 	.word	0x03d09000
240072cc:	4b742400 	.word	0x4b742400
240072d0:	4c742400 	.word	0x4c742400

240072d4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
240072d4:	2800      	cmp	r0, #0
240072d6:	f000 81ef 	beq.w	240076b8 <HAL_RCC_OscConfig+0x3e4>
{
240072da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240072dc:	6803      	ldr	r3, [r0, #0]
240072de:	4604      	mov	r4, r0
240072e0:	07d9      	lsls	r1, r3, #31
240072e2:	d52e      	bpl.n	24007342 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240072e4:	49a4      	ldr	r1, [pc, #656]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
240072e6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240072e8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240072ea:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240072ee:	2a10      	cmp	r2, #16
240072f0:	f000 8107 	beq.w	24007502 <HAL_RCC_OscConfig+0x22e>
240072f4:	2a18      	cmp	r2, #24
240072f6:	f000 80ff 	beq.w	240074f8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240072fa:	6863      	ldr	r3, [r4, #4]
240072fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007300:	f000 812a 	beq.w	24007558 <HAL_RCC_OscConfig+0x284>
24007304:	2b00      	cmp	r3, #0
24007306:	f040 8188 	bne.w	2400761a <HAL_RCC_OscConfig+0x346>
2400730a:	4b9b      	ldr	r3, [pc, #620]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
2400730c:	681a      	ldr	r2, [r3, #0]
2400730e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007312:	601a      	str	r2, [r3, #0]
24007314:	681a      	ldr	r2, [r3, #0]
24007316:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400731a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2400731c:	6863      	ldr	r3, [r4, #4]
2400731e:	2b00      	cmp	r3, #0
24007320:	f000 815c 	beq.w	240075dc <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
24007324:	f7fd f9fc 	bl	24004720 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007328:	4e93      	ldr	r6, [pc, #588]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
2400732a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400732c:	e005      	b.n	2400733a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2400732e:	f7fd f9f7 	bl	24004720 <HAL_GetTick>
24007332:	1b40      	subs	r0, r0, r5
24007334:	2864      	cmp	r0, #100	; 0x64
24007336:	f200 814f 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400733a:	6833      	ldr	r3, [r6, #0]
2400733c:	039b      	lsls	r3, r3, #14
2400733e:	d5f6      	bpl.n	2400732e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007340:	6823      	ldr	r3, [r4, #0]
24007342:	079d      	lsls	r5, r3, #30
24007344:	f100 808a 	bmi.w	2400745c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007348:	06d9      	lsls	r1, r3, #27
2400734a:	d533      	bpl.n	240073b4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400734c:	4a8a      	ldr	r2, [pc, #552]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
2400734e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007350:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007352:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007356:	2b08      	cmp	r3, #8
24007358:	f000 80e3 	beq.w	24007522 <HAL_RCC_OscConfig+0x24e>
2400735c:	2b18      	cmp	r3, #24
2400735e:	f000 80db 	beq.w	24007518 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007362:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007364:	4d84      	ldr	r5, [pc, #528]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007366:	2b00      	cmp	r3, #0
24007368:	f000 8176 	beq.w	24007658 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
2400736c:	682b      	ldr	r3, [r5, #0]
2400736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007372:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007374:	f7fd f9d4 	bl	24004720 <HAL_GetTick>
24007378:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400737a:	e005      	b.n	24007388 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400737c:	f7fd f9d0 	bl	24004720 <HAL_GetTick>
24007380:	1b80      	subs	r0, r0, r6
24007382:	2802      	cmp	r0, #2
24007384:	f200 8128 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007388:	682b      	ldr	r3, [r5, #0]
2400738a:	05db      	lsls	r3, r3, #23
2400738c:	d5f6      	bpl.n	2400737c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400738e:	f7fd f9df 	bl	24004750 <HAL_GetREVID>
24007392:	f241 0303 	movw	r3, #4099	; 0x1003
24007396:	4298      	cmp	r0, r3
24007398:	f200 8266 	bhi.w	24007868 <HAL_RCC_OscConfig+0x594>
2400739c:	6a22      	ldr	r2, [r4, #32]
2400739e:	686b      	ldr	r3, [r5, #4]
240073a0:	2a20      	cmp	r2, #32
240073a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240073a6:	bf0c      	ite	eq
240073a8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
240073ac:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
240073b0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240073b2:	6823      	ldr	r3, [r4, #0]
240073b4:	071d      	lsls	r5, r3, #28
240073b6:	d516      	bpl.n	240073e6 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240073b8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
240073ba:	4d6f      	ldr	r5, [pc, #444]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240073bc:	2b00      	cmp	r3, #0
240073be:	f000 811b 	beq.w	240075f8 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
240073c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240073c4:	f043 0301 	orr.w	r3, r3, #1
240073c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
240073ca:	f7fd f9a9 	bl	24004720 <HAL_GetTick>
240073ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240073d0:	e005      	b.n	240073de <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240073d2:	f7fd f9a5 	bl	24004720 <HAL_GetTick>
240073d6:	1b80      	subs	r0, r0, r6
240073d8:	2802      	cmp	r0, #2
240073da:	f200 80fd 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240073de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240073e0:	0798      	lsls	r0, r3, #30
240073e2:	d5f6      	bpl.n	240073d2 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
240073e4:	6823      	ldr	r3, [r4, #0]
240073e6:	069a      	lsls	r2, r3, #26
240073e8:	d516      	bpl.n	24007418 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240073ea:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
240073ec:	4d62      	ldr	r5, [pc, #392]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240073ee:	2b00      	cmp	r3, #0
240073f0:	f000 8121 	beq.w	24007636 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
240073f4:	682b      	ldr	r3, [r5, #0]
240073f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240073fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
240073fc:	f7fd f990 	bl	24004720 <HAL_GetTick>
24007400:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007402:	e005      	b.n	24007410 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007404:	f7fd f98c 	bl	24004720 <HAL_GetTick>
24007408:	1b80      	subs	r0, r0, r6
2400740a:	2802      	cmp	r0, #2
2400740c:	f200 80e4 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007410:	682b      	ldr	r3, [r5, #0]
24007412:	049f      	lsls	r7, r3, #18
24007414:	d5f6      	bpl.n	24007404 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24007416:	6823      	ldr	r3, [r4, #0]
24007418:	0759      	lsls	r1, r3, #29
2400741a:	f100 80a3 	bmi.w	24007564 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2400741e:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007420:	b1d0      	cbz	r0, 24007458 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007422:	4d55      	ldr	r5, [pc, #340]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
24007424:	692b      	ldr	r3, [r5, #16]
24007426:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400742a:	2b18      	cmp	r3, #24
2400742c:	f000 81b6 	beq.w	2400779c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24007430:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007432:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007438:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400743a:	f000 8149 	beq.w	240076d0 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
2400743e:	f7fd f96f 	bl	24004720 <HAL_GetTick>
24007442:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007444:	e005      	b.n	24007452 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007446:	f7fd f96b 	bl	24004720 <HAL_GetTick>
2400744a:	1b00      	subs	r0, r0, r4
2400744c:	2802      	cmp	r0, #2
2400744e:	f200 80c3 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007452:	682b      	ldr	r3, [r5, #0]
24007454:	019b      	lsls	r3, r3, #6
24007456:	d4f6      	bmi.n	24007446 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24007458:	2000      	movs	r0, #0
}
2400745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400745c:	4a46      	ldr	r2, [pc, #280]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
2400745e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007460:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007462:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24007466:	d12d      	bne.n	240074c4 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24007468:	4b43      	ldr	r3, [pc, #268]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
2400746a:	68e2      	ldr	r2, [r4, #12]
2400746c:	681b      	ldr	r3, [r3, #0]
2400746e:	0759      	lsls	r1, r3, #29
24007470:	d501      	bpl.n	24007476 <HAL_RCC_OscConfig+0x1a2>
24007472:	2a00      	cmp	r2, #0
24007474:	d04e      	beq.n	24007514 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007476:	4d40      	ldr	r5, [pc, #256]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
24007478:	682b      	ldr	r3, [r5, #0]
2400747a:	f023 0319 	bic.w	r3, r3, #25
2400747e:	4313      	orrs	r3, r2
24007480:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007482:	f7fd f94d 	bl	24004720 <HAL_GetTick>
24007486:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007488:	e005      	b.n	24007496 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400748a:	f7fd f949 	bl	24004720 <HAL_GetTick>
2400748e:	1b80      	subs	r0, r0, r6
24007490:	2802      	cmp	r0, #2
24007492:	f200 80a1 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007496:	682b      	ldr	r3, [r5, #0]
24007498:	075b      	lsls	r3, r3, #29
2400749a:	d5f6      	bpl.n	2400748a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2400749c:	f7fd f958 	bl	24004750 <HAL_GetREVID>
240074a0:	f241 0303 	movw	r3, #4099	; 0x1003
240074a4:	4298      	cmp	r0, r3
240074a6:	f200 80fe 	bhi.w	240076a6 <HAL_RCC_OscConfig+0x3d2>
240074aa:	6922      	ldr	r2, [r4, #16]
240074ac:	686b      	ldr	r3, [r5, #4]
240074ae:	2a40      	cmp	r2, #64	; 0x40
240074b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240074b4:	bf0c      	ite	eq
240074b6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
240074ba:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
240074be:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240074c0:	6823      	ldr	r3, [r4, #0]
240074c2:	e741      	b.n	24007348 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240074c4:	2b18      	cmp	r3, #24
240074c6:	f000 80ea 	beq.w	2400769e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240074ca:	4d2b      	ldr	r5, [pc, #172]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240074cc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240074ce:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240074d0:	2a00      	cmp	r2, #0
240074d2:	f000 80d3 	beq.w	2400767c <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240074d6:	f023 0319 	bic.w	r3, r3, #25
240074da:	4313      	orrs	r3, r2
240074dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240074de:	f7fd f91f 	bl	24004720 <HAL_GetTick>
240074e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240074e4:	e004      	b.n	240074f0 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240074e6:	f7fd f91b 	bl	24004720 <HAL_GetTick>
240074ea:	1b80      	subs	r0, r0, r6
240074ec:	2802      	cmp	r0, #2
240074ee:	d873      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240074f0:	682b      	ldr	r3, [r5, #0]
240074f2:	075f      	lsls	r7, r3, #29
240074f4:	d5f7      	bpl.n	240074e6 <HAL_RCC_OscConfig+0x212>
240074f6:	e7d1      	b.n	2400749c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240074f8:	f001 0103 	and.w	r1, r1, #3
240074fc:	2902      	cmp	r1, #2
240074fe:	f47f aefc 	bne.w	240072fa <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007502:	4a1d      	ldr	r2, [pc, #116]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
24007504:	6812      	ldr	r2, [r2, #0]
24007506:	0392      	lsls	r2, r2, #14
24007508:	f57f af1b 	bpl.w	24007342 <HAL_RCC_OscConfig+0x6e>
2400750c:	6862      	ldr	r2, [r4, #4]
2400750e:	2a00      	cmp	r2, #0
24007510:	f47f af17 	bne.w	24007342 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24007514:	2001      	movs	r0, #1
}
24007516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007518:	f002 0203 	and.w	r2, r2, #3
2400751c:	2a01      	cmp	r2, #1
2400751e:	f47f af20 	bne.w	24007362 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007522:	4b15      	ldr	r3, [pc, #84]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
24007524:	681b      	ldr	r3, [r3, #0]
24007526:	05da      	lsls	r2, r3, #23
24007528:	d502      	bpl.n	24007530 <HAL_RCC_OscConfig+0x25c>
2400752a:	69e3      	ldr	r3, [r4, #28]
2400752c:	2b80      	cmp	r3, #128	; 0x80
2400752e:	d1f1      	bne.n	24007514 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007530:	f7fd f90e 	bl	24004750 <HAL_GetREVID>
24007534:	f241 0303 	movw	r3, #4099	; 0x1003
24007538:	4298      	cmp	r0, r3
2400753a:	f200 80bf 	bhi.w	240076bc <HAL_RCC_OscConfig+0x3e8>
2400753e:	6a22      	ldr	r2, [r4, #32]
24007540:	2a20      	cmp	r2, #32
24007542:	f000 81ad 	beq.w	240078a0 <HAL_RCC_OscConfig+0x5cc>
24007546:	490c      	ldr	r1, [pc, #48]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
24007548:	684b      	ldr	r3, [r1, #4]
2400754a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400754e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24007552:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007554:	6823      	ldr	r3, [r4, #0]
24007556:	e72d      	b.n	240073b4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007558:	4a07      	ldr	r2, [pc, #28]	; (24007578 <HAL_RCC_OscConfig+0x2a4>)
2400755a:	6813      	ldr	r3, [r2, #0]
2400755c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007560:	6013      	str	r3, [r2, #0]
24007562:	e6db      	b.n	2400731c <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24007564:	4d05      	ldr	r5, [pc, #20]	; (2400757c <HAL_RCC_OscConfig+0x2a8>)
24007566:	682b      	ldr	r3, [r5, #0]
24007568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400756c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
2400756e:	f7fd f8d7 	bl	24004720 <HAL_GetTick>
24007572:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007574:	e009      	b.n	2400758a <HAL_RCC_OscConfig+0x2b6>
24007576:	bf00      	nop
24007578:	58024400 	.word	0x58024400
2400757c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007580:	f7fd f8ce 	bl	24004720 <HAL_GetTick>
24007584:	1b80      	subs	r0, r0, r6
24007586:	2864      	cmp	r0, #100	; 0x64
24007588:	d826      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400758a:	682b      	ldr	r3, [r5, #0]
2400758c:	05da      	lsls	r2, r3, #23
2400758e:	d5f7      	bpl.n	24007580 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007590:	68a3      	ldr	r3, [r4, #8]
24007592:	2b01      	cmp	r3, #1
24007594:	f000 8171 	beq.w	2400787a <HAL_RCC_OscConfig+0x5a6>
24007598:	2b00      	cmp	r3, #0
2400759a:	f040 8174 	bne.w	24007886 <HAL_RCC_OscConfig+0x5b2>
2400759e:	4baa      	ldr	r3, [pc, #680]	; (24007848 <HAL_RCC_OscConfig+0x574>)
240075a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240075a2:	f022 0201 	bic.w	r2, r2, #1
240075a6:	671a      	str	r2, [r3, #112]	; 0x70
240075a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240075aa:	f022 0204 	bic.w	r2, r2, #4
240075ae:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
240075b0:	68a3      	ldr	r3, [r4, #8]
240075b2:	2b00      	cmp	r3, #0
240075b4:	f000 8140 	beq.w	24007838 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
240075b8:	f7fd f8b2 	bl	24004720 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240075bc:	4ea2      	ldr	r6, [pc, #648]	; (24007848 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240075be:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
240075c2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240075c4:	e004      	b.n	240075d0 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240075c6:	f7fd f8ab 	bl	24004720 <HAL_GetTick>
240075ca:	1b40      	subs	r0, r0, r5
240075cc:	42b8      	cmp	r0, r7
240075ce:	d803      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240075d0:	6f33      	ldr	r3, [r6, #112]	; 0x70
240075d2:	079b      	lsls	r3, r3, #30
240075d4:	d5f7      	bpl.n	240075c6 <HAL_RCC_OscConfig+0x2f2>
240075d6:	e722      	b.n	2400741e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
240075d8:	2003      	movs	r0, #3
}
240075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
240075dc:	f7fd f8a0 	bl	24004720 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240075e0:	4e99      	ldr	r6, [pc, #612]	; (24007848 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
240075e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240075e4:	e004      	b.n	240075f0 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240075e6:	f7fd f89b 	bl	24004720 <HAL_GetTick>
240075ea:	1b40      	subs	r0, r0, r5
240075ec:	2864      	cmp	r0, #100	; 0x64
240075ee:	d8f3      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240075f0:	6833      	ldr	r3, [r6, #0]
240075f2:	039f      	lsls	r7, r3, #14
240075f4:	d4f7      	bmi.n	240075e6 <HAL_RCC_OscConfig+0x312>
240075f6:	e6a3      	b.n	24007340 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
240075f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240075fa:	f023 0301 	bic.w	r3, r3, #1
240075fe:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24007600:	f7fd f88e 	bl	24004720 <HAL_GetTick>
24007604:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007606:	e004      	b.n	24007612 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007608:	f7fd f88a 	bl	24004720 <HAL_GetTick>
2400760c:	1b80      	subs	r0, r0, r6
2400760e:	2802      	cmp	r0, #2
24007610:	d8e2      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007612:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007614:	0799      	lsls	r1, r3, #30
24007616:	d4f7      	bmi.n	24007608 <HAL_RCC_OscConfig+0x334>
24007618:	e6e4      	b.n	240073e4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400761a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400761e:	4b8a      	ldr	r3, [pc, #552]	; (24007848 <HAL_RCC_OscConfig+0x574>)
24007620:	681a      	ldr	r2, [r3, #0]
24007622:	f47f ae74 	bne.w	2400730e <HAL_RCC_OscConfig+0x3a>
24007626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400762a:	601a      	str	r2, [r3, #0]
2400762c:	681a      	ldr	r2, [r3, #0]
2400762e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007632:	601a      	str	r2, [r3, #0]
24007634:	e672      	b.n	2400731c <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24007636:	682b      	ldr	r3, [r5, #0]
24007638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2400763c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400763e:	f7fd f86f 	bl	24004720 <HAL_GetTick>
24007642:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007644:	e004      	b.n	24007650 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007646:	f7fd f86b 	bl	24004720 <HAL_GetTick>
2400764a:	1b80      	subs	r0, r0, r6
2400764c:	2802      	cmp	r0, #2
2400764e:	d8c3      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007650:	682b      	ldr	r3, [r5, #0]
24007652:	0498      	lsls	r0, r3, #18
24007654:	d4f7      	bmi.n	24007646 <HAL_RCC_OscConfig+0x372>
24007656:	e6de      	b.n	24007416 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24007658:	682b      	ldr	r3, [r5, #0]
2400765a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400765e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007660:	f7fd f85e 	bl	24004720 <HAL_GetTick>
24007664:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007666:	e004      	b.n	24007672 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007668:	f7fd f85a 	bl	24004720 <HAL_GetTick>
2400766c:	1b80      	subs	r0, r0, r6
2400766e:	2802      	cmp	r0, #2
24007670:	d8b2      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007672:	682b      	ldr	r3, [r5, #0]
24007674:	05df      	lsls	r7, r3, #23
24007676:	d4f7      	bmi.n	24007668 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007678:	6823      	ldr	r3, [r4, #0]
2400767a:	e69b      	b.n	240073b4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
2400767c:	f023 0301 	bic.w	r3, r3, #1
24007680:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007682:	f7fd f84d 	bl	24004720 <HAL_GetTick>
24007686:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007688:	e004      	b.n	24007694 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400768a:	f7fd f849 	bl	24004720 <HAL_GetTick>
2400768e:	1b80      	subs	r0, r0, r6
24007690:	2802      	cmp	r0, #2
24007692:	d8a1      	bhi.n	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007694:	682b      	ldr	r3, [r5, #0]
24007696:	0758      	lsls	r0, r3, #29
24007698:	d4f7      	bmi.n	2400768a <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400769a:	6823      	ldr	r3, [r4, #0]
2400769c:	e654      	b.n	24007348 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2400769e:	0790      	lsls	r0, r2, #30
240076a0:	f47f af13 	bne.w	240074ca <HAL_RCC_OscConfig+0x1f6>
240076a4:	e6e0      	b.n	24007468 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240076a6:	686b      	ldr	r3, [r5, #4]
240076a8:	6922      	ldr	r2, [r4, #16]
240076aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
240076ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240076b2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240076b4:	6823      	ldr	r3, [r4, #0]
240076b6:	e647      	b.n	24007348 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
240076b8:	2001      	movs	r0, #1
}
240076ba:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240076bc:	4a62      	ldr	r2, [pc, #392]	; (24007848 <HAL_RCC_OscConfig+0x574>)
240076be:	6a21      	ldr	r1, [r4, #32]
240076c0:	68d3      	ldr	r3, [r2, #12]
240076c2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240076c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
240076ca:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240076cc:	6823      	ldr	r3, [r4, #0]
240076ce:	e671      	b.n	240073b4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
240076d0:	f7fd f826 	bl	24004720 <HAL_GetTick>
240076d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240076d6:	e005      	b.n	240076e4 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240076d8:	f7fd f822 	bl	24004720 <HAL_GetTick>
240076dc:	1b80      	subs	r0, r0, r6
240076de:	2802      	cmp	r0, #2
240076e0:	f63f af7a 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240076e4:	682b      	ldr	r3, [r5, #0]
240076e6:	0199      	lsls	r1, r3, #6
240076e8:	d4f6      	bmi.n	240076d8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240076ea:	6aa9      	ldr	r1, [r5, #40]	; 0x28
240076ec:	4b57      	ldr	r3, [pc, #348]	; (2400784c <HAL_RCC_OscConfig+0x578>)
240076ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
240076f0:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240076f2:	4957      	ldr	r1, [pc, #348]	; (24007850 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240076f4:	4e54      	ldr	r6, [pc, #336]	; (24007848 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240076f6:	4313      	orrs	r3, r2
240076f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240076fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240076fe:	62ab      	str	r3, [r5, #40]	; 0x28
24007700:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24007704:	3b01      	subs	r3, #1
24007706:	3a01      	subs	r2, #1
24007708:	025b      	lsls	r3, r3, #9
2400770a:	0412      	lsls	r2, r2, #16
2400770c:	b29b      	uxth	r3, r3
2400770e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007712:	4313      	orrs	r3, r2
24007714:	6b22      	ldr	r2, [r4, #48]	; 0x30
24007716:	3a01      	subs	r2, #1
24007718:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400771c:	4313      	orrs	r3, r2
2400771e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24007720:	3a01      	subs	r2, #1
24007722:	0612      	lsls	r2, r2, #24
24007724:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007728:	4313      	orrs	r3, r2
2400772a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
2400772c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400772e:	f023 0301 	bic.w	r3, r3, #1
24007732:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007734:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24007736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24007738:	4011      	ands	r1, r2
2400773a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
2400773e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24007740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007742:	6c22      	ldr	r2, [r4, #64]	; 0x40
24007744:	f023 030c 	bic.w	r3, r3, #12
24007748:	4313      	orrs	r3, r2
2400774a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2400774c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400774e:	6c62      	ldr	r2, [r4, #68]	; 0x44
24007750:	f023 0302 	bic.w	r3, r3, #2
24007754:	4313      	orrs	r3, r2
24007756:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24007758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400775a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400775e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007760:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007766:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24007768:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400776a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400776e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24007770:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007772:	f043 0301 	orr.w	r3, r3, #1
24007776:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24007778:	682b      	ldr	r3, [r5, #0]
2400777a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400777e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007780:	f7fc ffce 	bl	24004720 <HAL_GetTick>
24007784:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007786:	e005      	b.n	24007794 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007788:	f7fc ffca 	bl	24004720 <HAL_GetTick>
2400778c:	1b00      	subs	r0, r0, r4
2400778e:	2802      	cmp	r0, #2
24007790:	f63f af22 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007794:	6833      	ldr	r3, [r6, #0]
24007796:	019a      	lsls	r2, r3, #6
24007798:	d5f6      	bpl.n	24007788 <HAL_RCC_OscConfig+0x4b4>
2400779a:	e65d      	b.n	24007458 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400779c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
2400779e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
240077a0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240077a2:	f43f ae5a 	beq.w	2400745a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240077a6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240077aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
240077ac:	428b      	cmp	r3, r1
240077ae:	f47f aeb1 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240077b2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240077b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240077b8:	429a      	cmp	r2, r3
240077ba:	f47f aeab 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240077be:	6b23      	ldr	r3, [r4, #48]	; 0x30
240077c0:	f3c6 0208 	ubfx	r2, r6, #0, #9
240077c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240077c6:	429a      	cmp	r2, r3
240077c8:	f47f aea4 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240077cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
240077ce:	f3c6 2246 	ubfx	r2, r6, #9, #7
240077d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240077d4:	429a      	cmp	r2, r3
240077d6:	f47f ae9d 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240077da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240077dc:	f3c6 4206 	ubfx	r2, r6, #16, #7
240077e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240077e2:	429a      	cmp	r2, r3
240077e4:	f47f ae96 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240077e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240077ea:	f3c6 6606 	ubfx	r6, r6, #24, #7
240077ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240077f0:	429e      	cmp	r6, r3
240077f2:	f47f ae8f 	bne.w	24007514 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240077f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240077f8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240077fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240077fe:	429a      	cmp	r2, r3
24007800:	f43f ae2a 	beq.w	24007458 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
24007804:	4a10      	ldr	r2, [pc, #64]	; (24007848 <HAL_RCC_OscConfig+0x574>)
24007806:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007808:	f023 0301 	bic.w	r3, r3, #1
2400780c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
2400780e:	f7fc ff87 	bl	24004720 <HAL_GetTick>
24007812:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24007814:	f7fc ff84 	bl	24004720 <HAL_GetTick>
24007818:	42a8      	cmp	r0, r5
2400781a:	d0fb      	beq.n	24007814 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400781c:	4a0a      	ldr	r2, [pc, #40]	; (24007848 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
2400781e:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007820:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24007822:	4b0b      	ldr	r3, [pc, #44]	; (24007850 <HAL_RCC_OscConfig+0x57c>)
24007824:	6b54      	ldr	r4, [r2, #52]	; 0x34
24007826:	4023      	ands	r3, r4
24007828:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
2400782c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400782e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007830:	f043 0301 	orr.w	r3, r3, #1
24007834:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24007836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24007838:	f7fc ff72 	bl	24004720 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400783c:	4e02      	ldr	r6, [pc, #8]	; (24007848 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400783e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007842:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007844:	e00c      	b.n	24007860 <HAL_RCC_OscConfig+0x58c>
24007846:	bf00      	nop
24007848:	58024400 	.word	0x58024400
2400784c:	fffffc0c 	.word	0xfffffc0c
24007850:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007854:	f7fc ff64 	bl	24004720 <HAL_GetTick>
24007858:	1b40      	subs	r0, r0, r5
2400785a:	42b8      	cmp	r0, r7
2400785c:	f63f aebc 	bhi.w	240075d8 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007860:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007862:	0798      	lsls	r0, r3, #30
24007864:	d4f6      	bmi.n	24007854 <HAL_RCC_OscConfig+0x580>
24007866:	e5da      	b.n	2400741e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007868:	68eb      	ldr	r3, [r5, #12]
2400786a:	6a22      	ldr	r2, [r4, #32]
2400786c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007870:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007874:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007876:	6823      	ldr	r3, [r4, #0]
24007878:	e59c      	b.n	240073b4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400787a:	4a0e      	ldr	r2, [pc, #56]	; (240078b4 <HAL_RCC_OscConfig+0x5e0>)
2400787c:	6f13      	ldr	r3, [r2, #112]	; 0x70
2400787e:	f043 0301 	orr.w	r3, r3, #1
24007882:	6713      	str	r3, [r2, #112]	; 0x70
24007884:	e694      	b.n	240075b0 <HAL_RCC_OscConfig+0x2dc>
24007886:	2b05      	cmp	r3, #5
24007888:	4b0a      	ldr	r3, [pc, #40]	; (240078b4 <HAL_RCC_OscConfig+0x5e0>)
2400788a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400788c:	f47f ae89 	bne.w	240075a2 <HAL_RCC_OscConfig+0x2ce>
24007890:	f042 0204 	orr.w	r2, r2, #4
24007894:	671a      	str	r2, [r3, #112]	; 0x70
24007896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007898:	f042 0201 	orr.w	r2, r2, #1
2400789c:	671a      	str	r2, [r3, #112]	; 0x70
2400789e:	e687      	b.n	240075b0 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240078a0:	4a04      	ldr	r2, [pc, #16]	; (240078b4 <HAL_RCC_OscConfig+0x5e0>)
240078a2:	6853      	ldr	r3, [r2, #4]
240078a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240078a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240078ac:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240078ae:	6823      	ldr	r3, [r4, #0]
240078b0:	e580      	b.n	240073b4 <HAL_RCC_OscConfig+0xe0>
240078b2:	bf00      	nop
240078b4:	58024400 	.word	0x58024400

240078b8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240078b8:	4a47      	ldr	r2, [pc, #284]	; (240079d8 <HAL_RCC_GetSysClockFreq+0x120>)
240078ba:	6913      	ldr	r3, [r2, #16]
240078bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
240078c0:	2b10      	cmp	r3, #16
240078c2:	d004      	beq.n	240078ce <HAL_RCC_GetSysClockFreq+0x16>
240078c4:	2b18      	cmp	r3, #24
240078c6:	d00d      	beq.n	240078e4 <HAL_RCC_GetSysClockFreq+0x2c>
240078c8:	b11b      	cbz	r3, 240078d2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
240078ca:	4844      	ldr	r0, [pc, #272]	; (240079dc <HAL_RCC_GetSysClockFreq+0x124>)
240078cc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
240078ce:	4844      	ldr	r0, [pc, #272]	; (240079e0 <HAL_RCC_GetSysClockFreq+0x128>)
240078d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240078d2:	6813      	ldr	r3, [r2, #0]
240078d4:	0699      	lsls	r1, r3, #26
240078d6:	d54a      	bpl.n	2400796e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240078d8:	6813      	ldr	r3, [r2, #0]
240078da:	4842      	ldr	r0, [pc, #264]	; (240079e4 <HAL_RCC_GetSysClockFreq+0x12c>)
240078dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240078e0:	40d8      	lsrs	r0, r3
240078e2:	4770      	bx	lr
{
240078e4:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240078e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240078e8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240078ea:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
240078ec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240078f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240078f2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240078f6:	d038      	beq.n	2400796a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240078f8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240078fc:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007900:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007904:	fb05 f101 	mul.w	r1, r5, r1
24007908:	2b01      	cmp	r3, #1
2400790a:	ee07 1a90 	vmov	s15, r1
2400790e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24007912:	d002      	beq.n	2400791a <HAL_RCC_GetSysClockFreq+0x62>
24007914:	2b02      	cmp	r3, #2
24007916:	d02c      	beq.n	24007972 <HAL_RCC_GetSysClockFreq+0xba>
24007918:	b393      	cbz	r3, 24007980 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400791a:	ee07 0a90 	vmov	s15, r0
2400791e:	eddf 6a32 	vldr	s13, [pc, #200]	; 240079e8 <HAL_RCC_GetSysClockFreq+0x130>
24007922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007926:	6b13      	ldr	r3, [r2, #48]	; 0x30
24007928:	ee86 6aa7 	vdiv.f32	s12, s13, s15
2400792c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 240079ec <HAL_RCC_GetSysClockFreq+0x134>
24007930:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007934:	ee06 3a90 	vmov	s13, r3
24007938:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2400793c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24007940:	ee76 6a85 	vadd.f32	s13, s13, s10
24007944:	eee7 6a25 	vfma.f32	s13, s14, s11
24007948:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400794c:	4b22      	ldr	r3, [pc, #136]	; (240079d8 <HAL_RCC_GetSysClockFreq+0x120>)
2400794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007950:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007954:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007956:	ee07 3a90 	vmov	s15, r3
2400795a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2400795e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007966:	ee17 0a90 	vmov	r0, s15
}
2400796a:	bc30      	pop	{r4, r5}
2400796c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
2400796e:	481d      	ldr	r0, [pc, #116]	; (240079e4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
24007970:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007972:	ee07 0a90 	vmov	s15, r0
24007976:	eddf 6a1e 	vldr	s13, [pc, #120]	; 240079f0 <HAL_RCC_GetSysClockFreq+0x138>
2400797a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400797e:	e7d2      	b.n	24007926 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007980:	6813      	ldr	r3, [r2, #0]
24007982:	069b      	lsls	r3, r3, #26
24007984:	d520      	bpl.n	240079c8 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007986:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007988:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400798c:	4915      	ldr	r1, [pc, #84]	; (240079e4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400798e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24007992:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007994:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400799c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 240079ec <HAL_RCC_GetSysClockFreq+0x134>
240079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240079a4:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079a6:	ee06 3a90 	vmov	s13, r3
240079aa:	ee05 1a90 	vmov	s11, r1
240079ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240079b2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240079b6:	ee76 6a86 	vadd.f32	s13, s13, s12
240079ba:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240079be:	eee7 6a05 	vfma.f32	s13, s14, s10
240079c2:	ee66 6a26 	vmul.f32	s13, s12, s13
240079c6:	e7c1      	b.n	2400794c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079c8:	ee07 0a90 	vmov	s15, r0
240079cc:	eddf 6a09 	vldr	s13, [pc, #36]	; 240079f4 <HAL_RCC_GetSysClockFreq+0x13c>
240079d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240079d4:	e7a7      	b.n	24007926 <HAL_RCC_GetSysClockFreq+0x6e>
240079d6:	bf00      	nop
240079d8:	58024400 	.word	0x58024400
240079dc:	003d0900 	.word	0x003d0900
240079e0:	00f42400 	.word	0x00f42400
240079e4:	03d09000 	.word	0x03d09000
240079e8:	4a742400 	.word	0x4a742400
240079ec:	39000000 	.word	0x39000000
240079f0:	4b742400 	.word	0x4b742400
240079f4:	4c742400 	.word	0x4c742400

240079f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
240079f8:	2800      	cmp	r0, #0
240079fa:	f000 811a 	beq.w	24007c32 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
240079fe:	4a92      	ldr	r2, [pc, #584]	; (24007c48 <HAL_RCC_ClockConfig+0x250>)
{
24007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007a04:	6813      	ldr	r3, [r2, #0]
24007a06:	4604      	mov	r4, r0
24007a08:	460d      	mov	r5, r1
24007a0a:	f003 030f 	and.w	r3, r3, #15
24007a0e:	428b      	cmp	r3, r1
24007a10:	d20c      	bcs.n	24007a2c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007a12:	6813      	ldr	r3, [r2, #0]
24007a14:	f023 030f 	bic.w	r3, r3, #15
24007a18:	430b      	orrs	r3, r1
24007a1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007a1c:	6813      	ldr	r3, [r2, #0]
24007a1e:	f003 030f 	and.w	r3, r3, #15
24007a22:	428b      	cmp	r3, r1
24007a24:	d002      	beq.n	24007a2c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24007a26:	2001      	movs	r0, #1
}
24007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007a2c:	6823      	ldr	r3, [r4, #0]
24007a2e:	075f      	lsls	r7, r3, #29
24007a30:	d50c      	bpl.n	24007a4c <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007a32:	4986      	ldr	r1, [pc, #536]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007a34:	6920      	ldr	r0, [r4, #16]
24007a36:	698a      	ldr	r2, [r1, #24]
24007a38:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007a3c:	4290      	cmp	r0, r2
24007a3e:	d905      	bls.n	24007a4c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007a40:	698b      	ldr	r3, [r1, #24]
24007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007a46:	4303      	orrs	r3, r0
24007a48:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007a4a:	6823      	ldr	r3, [r4, #0]
24007a4c:	071e      	lsls	r6, r3, #28
24007a4e:	d50c      	bpl.n	24007a6a <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007a50:	497e      	ldr	r1, [pc, #504]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007a52:	6960      	ldr	r0, [r4, #20]
24007a54:	69ca      	ldr	r2, [r1, #28]
24007a56:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007a5a:	4290      	cmp	r0, r2
24007a5c:	d905      	bls.n	24007a6a <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007a5e:	69cb      	ldr	r3, [r1, #28]
24007a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007a64:	4303      	orrs	r3, r0
24007a66:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007a68:	6823      	ldr	r3, [r4, #0]
24007a6a:	06d8      	lsls	r0, r3, #27
24007a6c:	d50c      	bpl.n	24007a88 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007a6e:	4977      	ldr	r1, [pc, #476]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007a70:	69a0      	ldr	r0, [r4, #24]
24007a72:	69ca      	ldr	r2, [r1, #28]
24007a74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007a78:	4290      	cmp	r0, r2
24007a7a:	d905      	bls.n	24007a88 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007a7c:	69cb      	ldr	r3, [r1, #28]
24007a7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007a82:	4303      	orrs	r3, r0
24007a84:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007a86:	6823      	ldr	r3, [r4, #0]
24007a88:	0699      	lsls	r1, r3, #26
24007a8a:	d50c      	bpl.n	24007aa6 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007a8c:	496f      	ldr	r1, [pc, #444]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007a8e:	69e0      	ldr	r0, [r4, #28]
24007a90:	6a0a      	ldr	r2, [r1, #32]
24007a92:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007a96:	4290      	cmp	r0, r2
24007a98:	d905      	bls.n	24007aa6 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007a9a:	6a0b      	ldr	r3, [r1, #32]
24007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007aa0:	4303      	orrs	r3, r0
24007aa2:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007aa4:	6823      	ldr	r3, [r4, #0]
24007aa6:	079a      	lsls	r2, r3, #30
24007aa8:	f140 8083 	bpl.w	24007bb2 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007aac:	4867      	ldr	r0, [pc, #412]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007aae:	68e1      	ldr	r1, [r4, #12]
24007ab0:	6982      	ldr	r2, [r0, #24]
24007ab2:	f002 020f 	and.w	r2, r2, #15
24007ab6:	4291      	cmp	r1, r2
24007ab8:	f240 80a9 	bls.w	24007c0e <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007abc:	6983      	ldr	r3, [r0, #24]
24007abe:	f023 030f 	bic.w	r3, r3, #15
24007ac2:	4319      	orrs	r1, r3
24007ac4:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007ac6:	6823      	ldr	r3, [r4, #0]
24007ac8:	07df      	lsls	r7, r3, #31
24007aca:	d474      	bmi.n	24007bb6 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007acc:	079f      	lsls	r7, r3, #30
24007ace:	d507      	bpl.n	24007ae0 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007ad0:	4a5e      	ldr	r2, [pc, #376]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007ad2:	68e1      	ldr	r1, [r4, #12]
24007ad4:	6993      	ldr	r3, [r2, #24]
24007ad6:	f003 030f 	and.w	r3, r3, #15
24007ada:	428b      	cmp	r3, r1
24007adc:	f200 80a0 	bhi.w	24007c20 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007ae0:	4a59      	ldr	r2, [pc, #356]	; (24007c48 <HAL_RCC_ClockConfig+0x250>)
24007ae2:	6813      	ldr	r3, [r2, #0]
24007ae4:	f003 030f 	and.w	r3, r3, #15
24007ae8:	42ab      	cmp	r3, r5
24007aea:	d909      	bls.n	24007b00 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007aec:	6813      	ldr	r3, [r2, #0]
24007aee:	f023 030f 	bic.w	r3, r3, #15
24007af2:	432b      	orrs	r3, r5
24007af4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007af6:	6813      	ldr	r3, [r2, #0]
24007af8:	f003 030f 	and.w	r3, r3, #15
24007afc:	42ab      	cmp	r3, r5
24007afe:	d192      	bne.n	24007a26 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007b00:	6823      	ldr	r3, [r4, #0]
24007b02:	075e      	lsls	r6, r3, #29
24007b04:	d50c      	bpl.n	24007b20 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007b06:	4951      	ldr	r1, [pc, #324]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007b08:	6920      	ldr	r0, [r4, #16]
24007b0a:	698a      	ldr	r2, [r1, #24]
24007b0c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007b10:	4290      	cmp	r0, r2
24007b12:	d205      	bcs.n	24007b20 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007b14:	698b      	ldr	r3, [r1, #24]
24007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b1a:	4303      	orrs	r3, r0
24007b1c:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007b1e:	6823      	ldr	r3, [r4, #0]
24007b20:	071d      	lsls	r5, r3, #28
24007b22:	d50c      	bpl.n	24007b3e <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007b24:	4949      	ldr	r1, [pc, #292]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007b26:	6960      	ldr	r0, [r4, #20]
24007b28:	69ca      	ldr	r2, [r1, #28]
24007b2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007b2e:	4290      	cmp	r0, r2
24007b30:	d205      	bcs.n	24007b3e <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007b32:	69cb      	ldr	r3, [r1, #28]
24007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b38:	4303      	orrs	r3, r0
24007b3a:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007b3c:	6823      	ldr	r3, [r4, #0]
24007b3e:	06d8      	lsls	r0, r3, #27
24007b40:	d50c      	bpl.n	24007b5c <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007b42:	4942      	ldr	r1, [pc, #264]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007b44:	69a0      	ldr	r0, [r4, #24]
24007b46:	69ca      	ldr	r2, [r1, #28]
24007b48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007b4c:	4290      	cmp	r0, r2
24007b4e:	d205      	bcs.n	24007b5c <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007b50:	69cb      	ldr	r3, [r1, #28]
24007b52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007b56:	4303      	orrs	r3, r0
24007b58:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007b5a:	6823      	ldr	r3, [r4, #0]
24007b5c:	0699      	lsls	r1, r3, #26
24007b5e:	d50b      	bpl.n	24007b78 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007b60:	4a3a      	ldr	r2, [pc, #232]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007b62:	69e1      	ldr	r1, [r4, #28]
24007b64:	6a13      	ldr	r3, [r2, #32]
24007b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007b6a:	4299      	cmp	r1, r3
24007b6c:	d204      	bcs.n	24007b78 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007b6e:	6a13      	ldr	r3, [r2, #32]
24007b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b74:	430b      	orrs	r3, r1
24007b76:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b78:	f7ff fe9e 	bl	240078b8 <HAL_RCC_GetSysClockFreq>
24007b7c:	4a33      	ldr	r2, [pc, #204]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007b7e:	4603      	mov	r3, r0
24007b80:	4833      	ldr	r0, [pc, #204]	; (24007c50 <HAL_RCC_ClockConfig+0x258>)
24007b82:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b84:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b86:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
24007b8a:	4d32      	ldr	r5, [pc, #200]	; (24007c54 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b8c:	f002 020f 	and.w	r2, r2, #15
24007b90:	4c31      	ldr	r4, [pc, #196]	; (24007c58 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b92:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b94:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007b96:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
24007b9a:	4830      	ldr	r0, [pc, #192]	; (24007c5c <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007b9c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007ba0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
24007ba2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
24007ba4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007ba6:	40d3      	lsrs	r3, r2
24007ba8:	6023      	str	r3, [r4, #0]
}
24007baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24007bae:	f7fc bd55 	b.w	2400465c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007bb2:	07db      	lsls	r3, r3, #31
24007bb4:	d594      	bpl.n	24007ae0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24007bb6:	4a25      	ldr	r2, [pc, #148]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007bb8:	68a1      	ldr	r1, [r4, #8]
24007bba:	6993      	ldr	r3, [r2, #24]
24007bbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24007bc0:	430b      	orrs	r3, r1
24007bc2:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007bc4:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007bc6:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007bc8:	2902      	cmp	r1, #2
24007bca:	d034      	beq.n	24007c36 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24007bcc:	2903      	cmp	r1, #3
24007bce:	d02d      	beq.n	24007c2c <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24007bd0:	2901      	cmp	r1, #1
24007bd2:	d035      	beq.n	24007c40 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007bd4:	075b      	lsls	r3, r3, #29
24007bd6:	f57f af26 	bpl.w	24007a26 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007bda:	4e1c      	ldr	r6, [pc, #112]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007be0:	6933      	ldr	r3, [r6, #16]
24007be2:	f023 0307 	bic.w	r3, r3, #7
24007be6:	430b      	orrs	r3, r1
24007be8:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24007bea:	f7fc fd99 	bl	24004720 <HAL_GetTick>
24007bee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007bf0:	e004      	b.n	24007bfc <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007bf2:	f7fc fd95 	bl	24004720 <HAL_GetTick>
24007bf6:	1bc0      	subs	r0, r0, r7
24007bf8:	4540      	cmp	r0, r8
24007bfa:	d81f      	bhi.n	24007c3c <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007bfc:	6933      	ldr	r3, [r6, #16]
24007bfe:	6862      	ldr	r2, [r4, #4]
24007c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c04:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24007c08:	d1f3      	bne.n	24007bf2 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007c0a:	6823      	ldr	r3, [r4, #0]
24007c0c:	e75e      	b.n	24007acc <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007c0e:	07da      	lsls	r2, r3, #31
24007c10:	d4d1      	bmi.n	24007bb6 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007c12:	4a0e      	ldr	r2, [pc, #56]	; (24007c4c <HAL_RCC_ClockConfig+0x254>)
24007c14:	6993      	ldr	r3, [r2, #24]
24007c16:	f003 030f 	and.w	r3, r3, #15
24007c1a:	428b      	cmp	r3, r1
24007c1c:	f67f af60 	bls.w	24007ae0 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007c20:	6993      	ldr	r3, [r2, #24]
24007c22:	f023 030f 	bic.w	r3, r3, #15
24007c26:	4319      	orrs	r1, r3
24007c28:	6191      	str	r1, [r2, #24]
24007c2a:	e759      	b.n	24007ae0 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007c2c:	0198      	lsls	r0, r3, #6
24007c2e:	d4d4      	bmi.n	24007bda <HAL_RCC_ClockConfig+0x1e2>
24007c30:	e6f9      	b.n	24007a26 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24007c32:	2001      	movs	r0, #1
}
24007c34:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007c36:	039e      	lsls	r6, r3, #14
24007c38:	d4cf      	bmi.n	24007bda <HAL_RCC_ClockConfig+0x1e2>
24007c3a:	e6f4      	b.n	24007a26 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24007c3c:	2003      	movs	r0, #3
24007c3e:	e6f3      	b.n	24007a28 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007c40:	05da      	lsls	r2, r3, #23
24007c42:	d4ca      	bmi.n	24007bda <HAL_RCC_ClockConfig+0x1e2>
24007c44:	e6ef      	b.n	24007a26 <HAL_RCC_ClockConfig+0x2e>
24007c46:	bf00      	nop
24007c48:	52002000 	.word	0x52002000
24007c4c:	58024400 	.word	0x58024400
24007c50:	24017fa8 	.word	0x24017fa8
24007c54:	200006e0 	.word	0x200006e0
24007c58:	200006e4 	.word	0x200006e4
24007c5c:	200006ec 	.word	0x200006ec

24007c60 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c60:	4a18      	ldr	r2, [pc, #96]	; (24007cc4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24007c62:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007c64:	6913      	ldr	r3, [r2, #16]
24007c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c6a:	2b10      	cmp	r3, #16
24007c6c:	d01a      	beq.n	24007ca4 <HAL_RCC_GetHCLKFreq+0x44>
24007c6e:	2b18      	cmp	r3, #24
24007c70:	d023      	beq.n	24007cba <HAL_RCC_GetHCLKFreq+0x5a>
24007c72:	b1cb      	cbz	r3, 24007ca8 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24007c74:	4814      	ldr	r0, [pc, #80]	; (24007cc8 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c76:	4b13      	ldr	r3, [pc, #76]	; (24007cc4 <HAL_RCC_GetHCLKFreq+0x64>)
24007c78:	4914      	ldr	r1, [pc, #80]	; (24007ccc <HAL_RCC_GetHCLKFreq+0x6c>)
24007c7a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c7c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c7e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c82:	4c13      	ldr	r4, [pc, #76]	; (24007cd0 <HAL_RCC_GetHCLKFreq+0x70>)
24007c84:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24007c88:	4d12      	ldr	r5, [pc, #72]	; (24007cd4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c8a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c8c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007c8e:	f002 021f 	and.w	r2, r2, #31
24007c92:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007c96:	f003 001f 	and.w	r0, r3, #31
24007c9a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24007c9e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007ca0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24007ca2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007ca4:	480c      	ldr	r0, [pc, #48]	; (24007cd8 <HAL_RCC_GetHCLKFreq+0x78>)
24007ca6:	e7e6      	b.n	24007c76 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007ca8:	6813      	ldr	r3, [r2, #0]
24007caa:	069b      	lsls	r3, r3, #26
24007cac:	d508      	bpl.n	24007cc0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007cae:	6812      	ldr	r2, [r2, #0]
24007cb0:	480a      	ldr	r0, [pc, #40]	; (24007cdc <HAL_RCC_GetHCLKFreq+0x7c>)
24007cb2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
24007cb6:	40d0      	lsrs	r0, r2
24007cb8:	e7dd      	b.n	24007c76 <HAL_RCC_GetHCLKFreq+0x16>
24007cba:	f7ff fa87 	bl	240071cc <HAL_RCC_GetSysClockFreq.part.0>
24007cbe:	e7da      	b.n	24007c76 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007cc0:	4806      	ldr	r0, [pc, #24]	; (24007cdc <HAL_RCC_GetHCLKFreq+0x7c>)
24007cc2:	e7d8      	b.n	24007c76 <HAL_RCC_GetHCLKFreq+0x16>
24007cc4:	58024400 	.word	0x58024400
24007cc8:	003d0900 	.word	0x003d0900
24007ccc:	24017fa8 	.word	0x24017fa8
24007cd0:	200006e4 	.word	0x200006e4
24007cd4:	200006e0 	.word	0x200006e0
24007cd8:	00f42400 	.word	0x00f42400
24007cdc:	03d09000 	.word	0x03d09000

24007ce0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007ce0:	4a1c      	ldr	r2, [pc, #112]	; (24007d54 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24007ce2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007ce4:	6913      	ldr	r3, [r2, #16]
24007ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007cea:	2b10      	cmp	r3, #16
24007cec:	d021      	beq.n	24007d32 <HAL_RCC_GetPCLK1Freq+0x52>
24007cee:	2b18      	cmp	r3, #24
24007cf0:	d02b      	beq.n	24007d4a <HAL_RCC_GetPCLK1Freq+0x6a>
24007cf2:	b303      	cbz	r3, 24007d36 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
24007cf4:	4818      	ldr	r0, [pc, #96]	; (24007d58 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007cf6:	4a17      	ldr	r2, [pc, #92]	; (24007d54 <HAL_RCC_GetPCLK1Freq+0x74>)
24007cf8:	4918      	ldr	r1, [pc, #96]	; (24007d5c <HAL_RCC_GetPCLK1Freq+0x7c>)
24007cfa:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
24007cfc:	4d18      	ldr	r5, [pc, #96]	; (24007d60 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007cfe:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d02:	4c18      	ldr	r4, [pc, #96]	; (24007d64 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007d04:	5ccb      	ldrb	r3, [r1, r3]
24007d06:	f003 031f 	and.w	r3, r3, #31
24007d0a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d0e:	6990      	ldr	r0, [r2, #24]
24007d10:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
24007d14:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d16:	5c08      	ldrb	r0, [r1, r0]
24007d18:	f000 001f 	and.w	r0, r0, #31
24007d1c:	40c3      	lsrs	r3, r0
24007d1e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24007d20:	69d2      	ldr	r2, [r2, #28]
24007d22:	f3c2 1202 	ubfx	r2, r2, #4, #3
24007d26:	5c88      	ldrb	r0, [r1, r2]
24007d28:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24007d2c:	fa23 f000 	lsr.w	r0, r3, r0
24007d30:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007d32:	480d      	ldr	r0, [pc, #52]	; (24007d68 <HAL_RCC_GetPCLK1Freq+0x88>)
24007d34:	e7df      	b.n	24007cf6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007d36:	6813      	ldr	r3, [r2, #0]
24007d38:	069b      	lsls	r3, r3, #26
24007d3a:	d509      	bpl.n	24007d50 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d3c:	6810      	ldr	r0, [r2, #0]
24007d3e:	4b0b      	ldr	r3, [pc, #44]	; (24007d6c <HAL_RCC_GetPCLK1Freq+0x8c>)
24007d40:	f3c0 00c1 	ubfx	r0, r0, #3, #2
24007d44:	fa23 f000 	lsr.w	r0, r3, r0
24007d48:	e7d5      	b.n	24007cf6 <HAL_RCC_GetPCLK1Freq+0x16>
24007d4a:	f7ff fa3f 	bl	240071cc <HAL_RCC_GetSysClockFreq.part.0>
24007d4e:	e7d2      	b.n	24007cf6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007d50:	4806      	ldr	r0, [pc, #24]	; (24007d6c <HAL_RCC_GetPCLK1Freq+0x8c>)
24007d52:	e7d0      	b.n	24007cf6 <HAL_RCC_GetPCLK1Freq+0x16>
24007d54:	58024400 	.word	0x58024400
24007d58:	003d0900 	.word	0x003d0900
24007d5c:	24017fa8 	.word	0x24017fa8
24007d60:	200006e0 	.word	0x200006e0
24007d64:	200006e4 	.word	0x200006e4
24007d68:	00f42400 	.word	0x00f42400
24007d6c:	03d09000 	.word	0x03d09000

24007d70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007d72:	4c3a      	ldr	r4, [pc, #232]	; (24007e5c <RCCEx_PLL2_Config+0xec>)
24007d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007d76:	f003 0303 	and.w	r3, r3, #3
24007d7a:	2b03      	cmp	r3, #3
24007d7c:	d067      	beq.n	24007e4e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24007d7e:	6823      	ldr	r3, [r4, #0]
24007d80:	4606      	mov	r6, r0
24007d82:	460f      	mov	r7, r1
24007d84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24007d88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007d8a:	f7fc fcc9 	bl	24004720 <HAL_GetTick>
24007d8e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007d90:	e004      	b.n	24007d9c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007d92:	f7fc fcc5 	bl	24004720 <HAL_GetTick>
24007d96:	1b43      	subs	r3, r0, r5
24007d98:	2b02      	cmp	r3, #2
24007d9a:	d856      	bhi.n	24007e4a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007d9c:	6823      	ldr	r3, [r4, #0]
24007d9e:	011a      	lsls	r2, r3, #4
24007da0:	d4f7      	bmi.n	24007d92 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24007da2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007da4:	6832      	ldr	r2, [r6, #0]
24007da6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007daa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24007dae:	62a3      	str	r3, [r4, #40]	; 0x28
24007db0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007db4:	3b01      	subs	r3, #1
24007db6:	3a01      	subs	r2, #1
24007db8:	025b      	lsls	r3, r3, #9
24007dba:	0412      	lsls	r2, r2, #16
24007dbc:	b29b      	uxth	r3, r3
24007dbe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007dc2:	4313      	orrs	r3, r2
24007dc4:	6872      	ldr	r2, [r6, #4]
24007dc6:	3a01      	subs	r2, #1
24007dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007dcc:	4313      	orrs	r3, r2
24007dce:	6932      	ldr	r2, [r6, #16]
24007dd0:	3a01      	subs	r2, #1
24007dd2:	0612      	lsls	r2, r2, #24
24007dd4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007dd8:	4313      	orrs	r3, r2
24007dda:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24007ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007dde:	6972      	ldr	r2, [r6, #20]
24007de0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24007de4:	4313      	orrs	r3, r2
24007de6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007dea:	69b3      	ldr	r3, [r6, #24]
24007dec:	f022 0220 	bic.w	r2, r2, #32
24007df0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007df2:	4b1b      	ldr	r3, [pc, #108]	; (24007e60 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007df4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24007df6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007df8:	f022 0210 	bic.w	r2, r2, #16
24007dfc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007dfe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24007e00:	69f2      	ldr	r2, [r6, #28]
24007e02:	400b      	ands	r3, r1
24007e04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007e08:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24007e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007e0c:	f043 0310 	orr.w	r3, r3, #16
24007e10:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007e14:	b1ef      	cbz	r7, 24007e52 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007e16:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24007e18:	bf0c      	ite	eq
24007e1a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24007e1e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24007e22:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24007e24:	4c0d      	ldr	r4, [pc, #52]	; (24007e5c <RCCEx_PLL2_Config+0xec>)
24007e26:	6823      	ldr	r3, [r4, #0]
24007e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24007e2c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007e2e:	f7fc fc77 	bl	24004720 <HAL_GetTick>
24007e32:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007e34:	e004      	b.n	24007e40 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007e36:	f7fc fc73 	bl	24004720 <HAL_GetTick>
24007e3a:	1b40      	subs	r0, r0, r5
24007e3c:	2802      	cmp	r0, #2
24007e3e:	d804      	bhi.n	24007e4a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007e40:	6823      	ldr	r3, [r4, #0]
24007e42:	011b      	lsls	r3, r3, #4
24007e44:	d5f7      	bpl.n	24007e36 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24007e46:	2000      	movs	r0, #0
}
24007e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007e4a:	2003      	movs	r0, #3
}
24007e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007e4e:	2001      	movs	r0, #1
}
24007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24007e56:	62e3      	str	r3, [r4, #44]	; 0x2c
24007e58:	e7e4      	b.n	24007e24 <RCCEx_PLL2_Config+0xb4>
24007e5a:	bf00      	nop
24007e5c:	58024400 	.word	0x58024400
24007e60:	ffff0007 	.word	0xffff0007

24007e64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007e66:	4c3a      	ldr	r4, [pc, #232]	; (24007f50 <RCCEx_PLL3_Config+0xec>)
24007e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007e6a:	f003 0303 	and.w	r3, r3, #3
24007e6e:	2b03      	cmp	r3, #3
24007e70:	d067      	beq.n	24007f42 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24007e72:	6823      	ldr	r3, [r4, #0]
24007e74:	4606      	mov	r6, r0
24007e76:	460f      	mov	r7, r1
24007e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24007e7c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007e7e:	f7fc fc4f 	bl	24004720 <HAL_GetTick>
24007e82:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007e84:	e004      	b.n	24007e90 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007e86:	f7fc fc4b 	bl	24004720 <HAL_GetTick>
24007e8a:	1b43      	subs	r3, r0, r5
24007e8c:	2b02      	cmp	r3, #2
24007e8e:	d856      	bhi.n	24007f3e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007e90:	6823      	ldr	r3, [r4, #0]
24007e92:	009a      	lsls	r2, r3, #2
24007e94:	d4f7      	bmi.n	24007e86 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24007e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007e98:	6832      	ldr	r2, [r6, #0]
24007e9a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24007e9e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24007ea2:	62a3      	str	r3, [r4, #40]	; 0x28
24007ea4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007ea8:	3b01      	subs	r3, #1
24007eaa:	3a01      	subs	r2, #1
24007eac:	025b      	lsls	r3, r3, #9
24007eae:	0412      	lsls	r2, r2, #16
24007eb0:	b29b      	uxth	r3, r3
24007eb2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007eb6:	4313      	orrs	r3, r2
24007eb8:	6872      	ldr	r2, [r6, #4]
24007eba:	3a01      	subs	r2, #1
24007ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007ec0:	4313      	orrs	r3, r2
24007ec2:	6932      	ldr	r2, [r6, #16]
24007ec4:	3a01      	subs	r2, #1
24007ec6:	0612      	lsls	r2, r2, #24
24007ec8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007ecc:	4313      	orrs	r3, r2
24007ece:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24007ed0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007ed2:	6972      	ldr	r2, [r6, #20]
24007ed4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24007ed8:	4313      	orrs	r3, r2
24007eda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007ede:	69b3      	ldr	r3, [r6, #24]
24007ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24007ee4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007ee6:	4b1b      	ldr	r3, [pc, #108]	; (24007f54 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007ee8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
24007eea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007ef0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007ef2:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007ef4:	69f2      	ldr	r2, [r6, #28]
24007ef6:	400b      	ands	r3, r1
24007ef8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007efc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24007efe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007f04:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007f06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007f08:	b1ef      	cbz	r7, 24007f46 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007f0a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24007f0c:	bf0c      	ite	eq
24007f0e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24007f12:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24007f16:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24007f18:	4c0d      	ldr	r4, [pc, #52]	; (24007f50 <RCCEx_PLL3_Config+0xec>)
24007f1a:	6823      	ldr	r3, [r4, #0]
24007f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24007f20:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007f22:	f7fc fbfd 	bl	24004720 <HAL_GetTick>
24007f26:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007f28:	e004      	b.n	24007f34 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007f2a:	f7fc fbf9 	bl	24004720 <HAL_GetTick>
24007f2e:	1b40      	subs	r0, r0, r5
24007f30:	2802      	cmp	r0, #2
24007f32:	d804      	bhi.n	24007f3e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007f34:	6823      	ldr	r3, [r4, #0]
24007f36:	009b      	lsls	r3, r3, #2
24007f38:	d5f7      	bpl.n	24007f2a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24007f3a:	2000      	movs	r0, #0
}
24007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007f3e:	2003      	movs	r0, #3
}
24007f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007f42:	2001      	movs	r0, #1
}
24007f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24007f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
24007f4c:	e7e4      	b.n	24007f18 <RCCEx_PLL3_Config+0xb4>
24007f4e:	bf00      	nop
24007f50:	58024400 	.word	0x58024400
24007f54:	ffff0007 	.word	0xffff0007

24007f58 <HAL_RCCEx_PeriphCLKConfig>:
{
24007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007f5c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24007f60:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007f62:	011d      	lsls	r5, r3, #4
24007f64:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24007f68:	d521      	bpl.n	24007fae <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007f6a:	6e81      	ldr	r1, [r0, #104]	; 0x68
24007f6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24007f70:	f000 8572 	beq.w	24008a58 <HAL_RCCEx_PeriphCLKConfig+0xb00>
24007f74:	d80e      	bhi.n	24007f94 <HAL_RCCEx_PeriphCLKConfig+0x3c>
24007f76:	2900      	cmp	r1, #0
24007f78:	f000 85cd 	beq.w	24008b16 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
24007f7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24007f80:	f040 85c6 	bne.w	24008b10 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007f84:	2102      	movs	r1, #2
24007f86:	3008      	adds	r0, #8
24007f88:	f7ff fef2 	bl	24007d70 <RCCEx_PLL2_Config>
24007f8c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24007f8e:	b966      	cbnz	r6, 24007faa <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007f90:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24007f92:	e003      	b.n	24007f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007f94:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24007f98:	f040 85ba 	bne.w	24008b10 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007f9c:	4aa3      	ldr	r2, [pc, #652]	; (2400822c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24007f9e:	2600      	movs	r6, #0
24007fa0:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007fa2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24007fa6:	4319      	orrs	r1, r3
24007fa8:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24007faa:	e9d4 3200 	ldrd	r3, r2, [r4]
24007fae:	05d8      	lsls	r0, r3, #23
24007fb0:	d50a      	bpl.n	24007fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24007fb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
24007fb4:	2904      	cmp	r1, #4
24007fb6:	d806      	bhi.n	24007fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
24007fb8:	e8df f011 	tbh	[pc, r1, lsl #1]
24007fbc:	055f0558 	.word	0x055f0558
24007fc0:	030e0576 	.word	0x030e0576
24007fc4:	030e      	.short	0x030e
24007fc6:	2601      	movs	r6, #1
24007fc8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24007fca:	0599      	lsls	r1, r3, #22
24007fcc:	d517      	bpl.n	24007ffe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
24007fce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24007fd0:	2980      	cmp	r1, #128	; 0x80
24007fd2:	f000 8570 	beq.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
24007fd6:	f200 80e1 	bhi.w	2400819c <HAL_RCCEx_PeriphCLKConfig+0x244>
24007fda:	2900      	cmp	r1, #0
24007fdc:	f000 8442 	beq.w	24008864 <HAL_RCCEx_PeriphCLKConfig+0x90c>
24007fe0:	2940      	cmp	r1, #64	; 0x40
24007fe2:	f040 80e2 	bne.w	240081aa <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24007fe6:	2100      	movs	r1, #0
24007fe8:	f104 0008 	add.w	r0, r4, #8
24007fec:	f7ff fec0 	bl	24007d70 <RCCEx_PLL2_Config>
24007ff0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24007ff2:	2d00      	cmp	r5, #0
24007ff4:	f000 83f4 	beq.w	240087e0 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24007ff8:	462e      	mov	r6, r5
24007ffa:	e9d4 3200 	ldrd	r3, r2, [r4]
24007ffe:	055f      	lsls	r7, r3, #21
24008000:	d51a      	bpl.n	24008038 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
24008002:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008006:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400800a:	f000 851d 	beq.w	24008a48 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
2400800e:	f200 80cf 	bhi.w	240081b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
24008012:	2900      	cmp	r1, #0
24008014:	f000 842d 	beq.w	24008872 <HAL_RCCEx_PeriphCLKConfig+0x91a>
24008018:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400801c:	f040 80d0 	bne.w	240081c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008020:	2100      	movs	r1, #0
24008022:	f104 0008 	add.w	r0, r4, #8
24008026:	f7ff fea3 	bl	24007d70 <RCCEx_PLL2_Config>
2400802a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400802c:	2d00      	cmp	r5, #0
2400802e:	f000 83f6 	beq.w	2400881e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008032:	462e      	mov	r6, r5
24008034:	e9d4 3200 	ldrd	r3, r2, [r4]
24008038:	0518      	lsls	r0, r3, #20
2400803a:	d51a      	bpl.n	24008072 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
2400803c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008040:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008044:	f000 8528 	beq.w	24008a98 <HAL_RCCEx_PeriphCLKConfig+0xb40>
24008048:	f200 80bd 	bhi.w	240081c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
2400804c:	2900      	cmp	r1, #0
2400804e:	f000 8403 	beq.w	24008858 <HAL_RCCEx_PeriphCLKConfig+0x900>
24008052:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24008056:	f040 80be 	bne.w	240081d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400805a:	2100      	movs	r1, #0
2400805c:	f104 0008 	add.w	r0, r4, #8
24008060:	f7ff fe86 	bl	24007d70 <RCCEx_PLL2_Config>
24008064:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008066:	2d00      	cmp	r5, #0
24008068:	f000 83af 	beq.w	240087ca <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
2400806c:	462e      	mov	r6, r5
2400806e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008072:	0199      	lsls	r1, r3, #6
24008074:	d51a      	bpl.n	240080ac <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
24008076:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008078:	2920      	cmp	r1, #32
2400807a:	f000 84b0 	beq.w	240089de <HAL_RCCEx_PeriphCLKConfig+0xa86>
2400807e:	f200 80ad 	bhi.w	240081dc <HAL_RCCEx_PeriphCLKConfig+0x284>
24008082:	b139      	cbz	r1, 24008094 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008084:	2910      	cmp	r1, #16
24008086:	f040 80ac 	bne.w	240081e2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400808a:	4a68      	ldr	r2, [pc, #416]	; (2400822c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400808c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400808e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008092:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008094:	2d00      	cmp	r5, #0
24008096:	f040 8414 	bne.w	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
2400809a:	4a64      	ldr	r2, [pc, #400]	; (2400822c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400809c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400809e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240080a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
240080a4:	430b      	orrs	r3, r1
240080a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240080a8:	e9d4 3200 	ldrd	r3, r2, [r4]
240080ac:	04df      	lsls	r7, r3, #19
240080ae:	d519      	bpl.n	240080e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
240080b0:	6e21      	ldr	r1, [r4, #96]	; 0x60
240080b2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240080b6:	f000 84e7 	beq.w	24008a88 <HAL_RCCEx_PeriphCLKConfig+0xb30>
240080ba:	f200 8095 	bhi.w	240081e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
240080be:	2900      	cmp	r1, #0
240080c0:	f000 83c4 	beq.w	2400884c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
240080c4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
240080c8:	f040 8096 	bne.w	240081f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240080cc:	2100      	movs	r1, #0
240080ce:	f104 0008 	add.w	r0, r4, #8
240080d2:	f7ff fe4d 	bl	24007d70 <RCCEx_PLL2_Config>
240080d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240080d8:	2d00      	cmp	r5, #0
240080da:	f000 838b 	beq.w	240087f4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240080de:	462e      	mov	r6, r5
240080e0:	e9d4 3200 	ldrd	r3, r2, [r4]
240080e4:	0498      	lsls	r0, r3, #18
240080e6:	d51d      	bpl.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
240080e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
240080ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
240080ee:	f000 8462 	beq.w	240089b6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
240080f2:	f200 8084 	bhi.w	240081fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
240080f6:	b149      	cbz	r1, 2400810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
240080f8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
240080fc:	f040 8088 	bne.w	24008210 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008100:	2101      	movs	r1, #1
24008102:	f104 0008 	add.w	r0, r4, #8
24008106:	f7ff fe33 	bl	24007d70 <RCCEx_PLL2_Config>
2400810a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400810c:	2d00      	cmp	r5, #0
2400810e:	f040 83e7 	bne.w	240088e0 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24008112:	4a46      	ldr	r2, [pc, #280]	; (2400822c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008114:	6e61      	ldr	r1, [r4, #100]	; 0x64
24008116:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008118:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
2400811c:	430b      	orrs	r3, r1
2400811e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008120:	e9d4 3200 	ldrd	r3, r2, [r4]
24008124:	0459      	lsls	r1, r3, #17
24008126:	d51d      	bpl.n	24008164 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
24008128:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
2400812c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008130:	f000 844b 	beq.w	240089ca <HAL_RCCEx_PeriphCLKConfig+0xa72>
24008134:	d86f      	bhi.n	24008216 <HAL_RCCEx_PeriphCLKConfig+0x2be>
24008136:	b141      	cbz	r1, 2400814a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008138:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400813c:	d173      	bne.n	24008226 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400813e:	2101      	movs	r1, #1
24008140:	f104 0008 	add.w	r0, r4, #8
24008144:	f7ff fe14 	bl	24007d70 <RCCEx_PLL2_Config>
24008148:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400814a:	2d00      	cmp	r5, #0
2400814c:	f040 83d0 	bne.w	240088f0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008150:	4a36      	ldr	r2, [pc, #216]	; (2400822c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008152:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008156:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008158:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
2400815c:	430b      	orrs	r3, r1
2400815e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008160:	e9d4 3200 	ldrd	r3, r2, [r4]
24008164:	041f      	lsls	r7, r3, #16
24008166:	d50d      	bpl.n	24008184 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
24008168:	6f21      	ldr	r1, [r4, #112]	; 0x70
2400816a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400816e:	f000 8419 	beq.w	240089a4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
24008172:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008176:	f000 8237 	beq.w	240085e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
2400817a:	2900      	cmp	r1, #0
2400817c:	f000 823a 	beq.w	240085f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
24008180:	2601      	movs	r6, #1
24008182:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008184:	01d8      	lsls	r0, r3, #7
24008186:	d55f      	bpl.n	24008248 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
24008188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400818a:	2903      	cmp	r1, #3
2400818c:	f200 84ee 	bhi.w	24008b6c <HAL_RCCEx_PeriphCLKConfig+0xc14>
24008190:	e8df f011 	tbh	[pc, r1, lsl #1]
24008194:	04390054 	.word	0x04390054
24008198:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
2400819c:	29c0      	cmp	r1, #192	; 0xc0
2400819e:	f43f af28 	beq.w	24007ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
240081a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240081a6:	f43f af24 	beq.w	24007ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
240081aa:	2601      	movs	r6, #1
240081ac:	4635      	mov	r5, r6
240081ae:	e726      	b.n	24007ffe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
240081b0:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
240081b4:	f43f af3a 	beq.w	2400802c <HAL_RCCEx_PeriphCLKConfig+0xd4>
240081b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240081bc:	f43f af36 	beq.w	2400802c <HAL_RCCEx_PeriphCLKConfig+0xd4>
240081c0:	2601      	movs	r6, #1
240081c2:	4635      	mov	r5, r6
240081c4:	e738      	b.n	24008038 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
240081c6:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
240081ca:	f43f af4c 	beq.w	24008066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
240081ce:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
240081d2:	f43f af48 	beq.w	24008066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
240081d6:	2601      	movs	r6, #1
240081d8:	4635      	mov	r5, r6
240081da:	e74a      	b.n	24008072 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
240081dc:	2930      	cmp	r1, #48	; 0x30
240081de:	f43f af59 	beq.w	24008094 <HAL_RCCEx_PeriphCLKConfig+0x13c>
240081e2:	2601      	movs	r6, #1
240081e4:	4635      	mov	r5, r6
240081e6:	e761      	b.n	240080ac <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
240081e8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
240081ec:	f43f af74 	beq.w	240080d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
240081f0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240081f4:	f43f af70 	beq.w	240080d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
240081f8:	2601      	movs	r6, #1
240081fa:	4635      	mov	r5, r6
240081fc:	e772      	b.n	240080e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
240081fe:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24008202:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24008206:	d081      	beq.n	2400810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008208:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
2400820c:	f43f af7e 	beq.w	2400810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008210:	2601      	movs	r6, #1
24008212:	4635      	mov	r5, r6
24008214:	e786      	b.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
24008216:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400821a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
2400821e:	d094      	beq.n	2400814a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008220:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008224:	d091      	beq.n	2400814a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008226:	2601      	movs	r6, #1
24008228:	4635      	mov	r5, r6
2400822a:	e79b      	b.n	24008164 <HAL_RCCEx_PeriphCLKConfig+0x20c>
2400822c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008230:	2102      	movs	r1, #2
24008232:	f104 0008 	add.w	r0, r4, #8
24008236:	f7ff fd9b 	bl	24007d70 <RCCEx_PLL2_Config>
2400823a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400823c:	2d00      	cmp	r5, #0
2400823e:	f000 8345 	beq.w	240088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008242:	462e      	mov	r6, r5
24008244:	e9d4 3200 	ldrd	r3, r2, [r4]
24008248:	0259      	lsls	r1, r3, #9
2400824a:	f100 826c 	bmi.w	24008726 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400824e:	07d8      	lsls	r0, r3, #31
24008250:	d52f      	bpl.n	240082b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
24008252:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008254:	2928      	cmp	r1, #40	; 0x28
24008256:	d82a      	bhi.n	240082ae <HAL_RCCEx_PeriphCLKConfig+0x356>
24008258:	e8df f011 	tbh	[pc, r1, lsl #1]
2400825c:	0029020a 	.word	0x0029020a
24008260:	00290029 	.word	0x00290029
24008264:	00290029 	.word	0x00290029
24008268:	00290029 	.word	0x00290029
2400826c:	0029044a 	.word	0x0029044a
24008270:	00290029 	.word	0x00290029
24008274:	00290029 	.word	0x00290029
24008278:	00290029 	.word	0x00290029
2400827c:	00290204 	.word	0x00290204
24008280:	00290029 	.word	0x00290029
24008284:	00290029 	.word	0x00290029
24008288:	00290029 	.word	0x00290029
2400828c:	0029020a 	.word	0x0029020a
24008290:	00290029 	.word	0x00290029
24008294:	00290029 	.word	0x00290029
24008298:	00290029 	.word	0x00290029
2400829c:	0029020a 	.word	0x0029020a
240082a0:	00290029 	.word	0x00290029
240082a4:	00290029 	.word	0x00290029
240082a8:	00290029 	.word	0x00290029
240082ac:	020a      	.short	0x020a
240082ae:	2601      	movs	r6, #1
240082b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240082b2:	0799      	lsls	r1, r3, #30
240082b4:	d517      	bpl.n	240082e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
240082b6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240082b8:	2905      	cmp	r1, #5
240082ba:	f200 845f 	bhi.w	24008b7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
240082be:	e8df f011 	tbh	[pc, r1, lsl #1]
240082c2:	000c      	.short	0x000c
240082c4:	0006040c 	.word	0x0006040c
240082c8:	000c000c 	.word	0x000c000c
240082cc:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240082ce:	2101      	movs	r1, #1
240082d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
240082d4:	f7ff fdc6 	bl	24007e64 <RCCEx_PLL3_Config>
240082d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240082da:	2d00      	cmp	r5, #0
240082dc:	f000 82d8 	beq.w	24008890 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240082e0:	462e      	mov	r6, r5
240082e2:	e9d4 3200 	ldrd	r3, r2, [r4]
240082e6:	075f      	lsls	r7, r3, #29
240082e8:	d518      	bpl.n	2400831c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
240082ea:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
240082ee:	2905      	cmp	r1, #5
240082f0:	f200 8440 	bhi.w	24008b74 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
240082f4:	e8df f011 	tbh	[pc, r1, lsl #1]
240082f8:	03e7000c 	.word	0x03e7000c
240082fc:	000c0006 	.word	0x000c0006
24008300:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008304:	2101      	movs	r1, #1
24008306:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400830a:	f7ff fdab 	bl	24007e64 <RCCEx_PLL3_Config>
2400830e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008310:	2d00      	cmp	r5, #0
24008312:	f000 82c7 	beq.w	240088a4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008316:	462e      	mov	r6, r5
24008318:	e9d4 3200 	ldrd	r3, r2, [r4]
2400831c:	0698      	lsls	r0, r3, #26
2400831e:	d51f      	bpl.n	24008360 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
24008320:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008324:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008328:	f000 8363 	beq.w	240089f2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
2400832c:	f200 811c 	bhi.w	24008568 <HAL_RCCEx_PeriphCLKConfig+0x610>
24008330:	b149      	cbz	r1, 24008346 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008332:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008336:	f040 8121 	bne.w	2400857c <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400833a:	2100      	movs	r1, #0
2400833c:	f104 0008 	add.w	r0, r4, #8
24008340:	f7ff fd16 	bl	24007d70 <RCCEx_PLL2_Config>
24008344:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008346:	2d00      	cmp	r5, #0
24008348:	f040 82b7 	bne.w	240088ba <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2400834c:	4ab0      	ldr	r2, [pc, #704]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400834e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008352:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008354:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008358:	430b      	orrs	r3, r1
2400835a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400835c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008360:	0659      	lsls	r1, r3, #25
24008362:	d51f      	bpl.n	240083a4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008364:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008368:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
2400836c:	f000 8306 	beq.w	2400897c <HAL_RCCEx_PeriphCLKConfig+0xa24>
24008370:	f200 8107 	bhi.w	24008582 <HAL_RCCEx_PeriphCLKConfig+0x62a>
24008374:	b149      	cbz	r1, 2400838a <HAL_RCCEx_PeriphCLKConfig+0x432>
24008376:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
2400837a:	f040 810c 	bne.w	24008596 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400837e:	2100      	movs	r1, #0
24008380:	f104 0008 	add.w	r0, r4, #8
24008384:	f7ff fcf4 	bl	24007d70 <RCCEx_PLL2_Config>
24008388:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400838a:	2d00      	cmp	r5, #0
2400838c:	f040 82b4 	bne.w	240088f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24008390:	4a9f      	ldr	r2, [pc, #636]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008392:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008396:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008398:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
2400839c:	430b      	orrs	r3, r1
2400839e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240083a0:	e9d4 3200 	ldrd	r3, r2, [r4]
240083a4:	061f      	lsls	r7, r3, #24
240083a6:	d51f      	bpl.n	240083e8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
240083a8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240083ac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240083b0:	f000 82ee 	beq.w	24008990 <HAL_RCCEx_PeriphCLKConfig+0xa38>
240083b4:	f200 80f2 	bhi.w	2400859c <HAL_RCCEx_PeriphCLKConfig+0x644>
240083b8:	b149      	cbz	r1, 240083ce <HAL_RCCEx_PeriphCLKConfig+0x476>
240083ba:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240083be:	f040 80f7 	bne.w	240085b0 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240083c2:	2100      	movs	r1, #0
240083c4:	f104 0008 	add.w	r0, r4, #8
240083c8:	f7ff fcd2 	bl	24007d70 <RCCEx_PLL2_Config>
240083cc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240083ce:	2d00      	cmp	r5, #0
240083d0:	f040 828a 	bne.w	240088e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
240083d4:	4a8e      	ldr	r2, [pc, #568]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240083d6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240083da:	6d93      	ldr	r3, [r2, #88]	; 0x58
240083dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
240083e0:	430b      	orrs	r3, r1
240083e2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
240083e4:	e9d4 3200 	ldrd	r3, r2, [r4]
240083e8:	0718      	lsls	r0, r3, #28
240083ea:	d50d      	bpl.n	24008408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
240083ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
240083f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
240083f4:	f000 8310 	beq.w	24008a18 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240083f8:	4985      	ldr	r1, [pc, #532]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240083fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
240083fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24008400:	4313      	orrs	r3, r2
24008402:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24008404:	e9d4 3200 	ldrd	r3, r2, [r4]
24008408:	06d9      	lsls	r1, r3, #27
2400840a:	d50d      	bpl.n	24008428 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2400840c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
24008410:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008414:	f000 830c 	beq.w	24008a30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008418:	497d      	ldr	r1, [pc, #500]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400841a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
2400841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008420:	4313      	orrs	r3, r2
24008422:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24008424:	e9d4 3200 	ldrd	r3, r2, [r4]
24008428:	031f      	lsls	r7, r3, #12
2400842a:	d50e      	bpl.n	2400844a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
2400842c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008430:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008434:	f000 8102 	beq.w	2400863c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
24008438:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
2400843c:	f000 8104 	beq.w	24008648 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
24008440:	2900      	cmp	r1, #0
24008442:	f000 8290 	beq.w	24008966 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
24008446:	2601      	movs	r6, #1
24008448:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400844a:	0358      	lsls	r0, r3, #13
2400844c:	d50f      	bpl.n	2400846e <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
2400844e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008452:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008456:	f000 80dd 	beq.w	24008614 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
2400845a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400845e:	f000 80df 	beq.w	24008620 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
24008462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008466:	f000 8275 	beq.w	24008954 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
2400846a:	2601      	movs	r6, #1
2400846c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400846e:	03d9      	lsls	r1, r3, #15
24008470:	d509      	bpl.n	24008486 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
24008472:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008474:	2900      	cmp	r1, #0
24008476:	f000 8258 	beq.w	2400892a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
2400847a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400847e:	f000 81d9 	beq.w	24008834 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
24008482:	2601      	movs	r6, #1
24008484:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008486:	009f      	lsls	r7, r3, #2
24008488:	f100 80ff 	bmi.w	2400868a <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2400848c:	0398      	lsls	r0, r3, #14
2400848e:	d50e      	bpl.n	240084ae <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
24008490:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008494:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24008498:	f000 823e 	beq.w	24008918 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
2400849c:	f240 808b 	bls.w	240085b6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
240084a0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240084a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
240084a8:	f000 8088 	beq.w	240085bc <HAL_RCCEx_PeriphCLKConfig+0x664>
240084ac:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240084ae:	02d9      	lsls	r1, r3, #11
240084b0:	d508      	bpl.n	240084c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
240084b2:	4a57      	ldr	r2, [pc, #348]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084b4:	6f61      	ldr	r1, [r4, #116]	; 0x74
240084b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240084b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240084bc:	430b      	orrs	r3, r1
240084be:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
240084c0:	e9d4 3200 	ldrd	r3, r2, [r4]
240084c4:	00df      	lsls	r7, r3, #3
240084c6:	d509      	bpl.n	240084dc <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
240084c8:	4a51      	ldr	r2, [pc, #324]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084ca:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
240084ce:	6913      	ldr	r3, [r2, #16]
240084d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240084d4:	430b      	orrs	r3, r1
240084d6:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240084d8:	e9d4 3200 	ldrd	r3, r2, [r4]
240084dc:	029d      	lsls	r5, r3, #10
240084de:	d508      	bpl.n	240084f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240084e0:	4a4b      	ldr	r2, [pc, #300]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084e2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
240084e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
240084e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240084ea:	430b      	orrs	r3, r1
240084ec:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240084ee:	e9d4 3200 	ldrd	r3, r2, [r4]
240084f2:	0058      	lsls	r0, r3, #1
240084f4:	d50b      	bpl.n	2400850e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240084f6:	4b46      	ldr	r3, [pc, #280]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240084f8:	691a      	ldr	r2, [r3, #16]
240084fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
240084fe:	611a      	str	r2, [r3, #16]
24008500:	691a      	ldr	r2, [r3, #16]
24008502:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24008506:	430a      	orrs	r2, r1
24008508:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2400850a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400850e:	2b00      	cmp	r3, #0
24008510:	da08      	bge.n	24008524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24008512:	4a3f      	ldr	r2, [pc, #252]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
24008514:	6d61      	ldr	r1, [r4, #84]	; 0x54
24008516:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008518:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400851c:	430b      	orrs	r3, r1
2400851e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24008520:	e9d4 3200 	ldrd	r3, r2, [r4]
24008524:	0219      	lsls	r1, r3, #8
24008526:	d508      	bpl.n	2400853a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24008528:	4a39      	ldr	r2, [pc, #228]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
2400852a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
2400852e:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008530:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24008534:	430b      	orrs	r3, r1
24008536:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24008538:	6862      	ldr	r2, [r4, #4]
2400853a:	07d3      	lsls	r3, r2, #31
2400853c:	f100 80b1 	bmi.w	240086a2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008540:	0797      	lsls	r7, r2, #30
24008542:	f100 80bb 	bmi.w	240086bc <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008546:	0755      	lsls	r5, r2, #29
24008548:	f100 80c5 	bmi.w	240086d6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2400854c:	0710      	lsls	r0, r2, #28
2400854e:	f100 80cf 	bmi.w	240086f0 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008552:	06d1      	lsls	r1, r2, #27
24008554:	f100 80d9 	bmi.w	2400870a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008558:	0692      	lsls	r2, r2, #26
2400855a:	f100 812a 	bmi.w	240087b2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
2400855e:	1e30      	subs	r0, r6, #0
24008560:	bf18      	it	ne
24008562:	2001      	movne	r0, #1
}
24008564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24008568:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400856c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008570:	f43f aee9 	beq.w	24008346 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
24008574:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008578:	f43f aee5 	beq.w	24008346 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
2400857c:	2601      	movs	r6, #1
2400857e:	4635      	mov	r5, r6
24008580:	e6ee      	b.n	24008360 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008582:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24008586:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400858a:	f43f aefe 	beq.w	2400838a <HAL_RCCEx_PeriphCLKConfig+0x432>
2400858e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008592:	f43f aefa 	beq.w	2400838a <HAL_RCCEx_PeriphCLKConfig+0x432>
24008596:	2601      	movs	r6, #1
24008598:	4635      	mov	r5, r6
2400859a:	e703      	b.n	240083a4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
2400859c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
240085a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
240085a4:	f43f af13 	beq.w	240083ce <HAL_RCCEx_PeriphCLKConfig+0x476>
240085a8:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
240085ac:	f43f af0f 	beq.w	240083ce <HAL_RCCEx_PeriphCLKConfig+0x476>
240085b0:	2601      	movs	r6, #1
240085b2:	4635      	mov	r5, r6
240085b4:	e718      	b.n	240083e8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
240085b6:	2900      	cmp	r1, #0
240085b8:	f47f af78 	bne.w	240084ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
240085bc:	2d00      	cmp	r5, #0
240085be:	f040 81c5 	bne.w	2400894c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
240085c2:	4a13      	ldr	r2, [pc, #76]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240085c4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
240085c8:	6d53      	ldr	r3, [r2, #84]	; 0x54
240085ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240085ce:	430b      	orrs	r3, r1
240085d0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240085d2:	e9d4 3200 	ldrd	r3, r2, [r4]
240085d6:	e76a      	b.n	240084ae <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
240085d8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
240085da:	2d00      	cmp	r5, #0
240085dc:	f000 8114 	beq.w	24008808 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240085e0:	462e      	mov	r6, r5
240085e2:	e9d4 3200 	ldrd	r3, r2, [r4]
240085e6:	e4f0      	b.n	24007fca <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240085e8:	2101      	movs	r1, #1
240085ea:	f104 0008 	add.w	r0, r4, #8
240085ee:	f7ff fbbf 	bl	24007d70 <RCCEx_PLL2_Config>
240085f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240085f4:	2d00      	cmp	r5, #0
240085f6:	f040 8147 	bne.w	24008888 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
240085fa:	4a05      	ldr	r2, [pc, #20]	; (24008610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
240085fc:	6f21      	ldr	r1, [r4, #112]	; 0x70
240085fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008600:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24008604:	430b      	orrs	r3, r1
24008606:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008608:	e9d4 3200 	ldrd	r3, r2, [r4]
2400860c:	e5ba      	b.n	24008184 <HAL_RCCEx_PeriphCLKConfig+0x22c>
2400860e:	bf00      	nop
24008610:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008614:	2101      	movs	r1, #1
24008616:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400861a:	f7ff fc23 	bl	24007e64 <RCCEx_PLL3_Config>
2400861e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008620:	2d00      	cmp	r5, #0
24008622:	f040 8171 	bne.w	24008908 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24008626:	4aba      	ldr	r2, [pc, #744]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008628:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400862c:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400862e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24008632:	430b      	orrs	r3, r1
24008634:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008636:	e9d4 3200 	ldrd	r3, r2, [r4]
2400863a:	e718      	b.n	2400846e <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400863c:	2102      	movs	r1, #2
2400863e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008642:	f7ff fc0f 	bl	24007e64 <RCCEx_PLL3_Config>
24008646:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008648:	2d00      	cmp	r5, #0
2400864a:	f040 8159 	bne.w	24008900 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400864e:	4ab0      	ldr	r2, [pc, #704]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008650:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008654:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008656:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
2400865a:	430b      	orrs	r3, r1
2400865c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400865e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008662:	e6f2      	b.n	2400844a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008664:	2101      	movs	r1, #1
24008666:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400866a:	f7ff fbfb 	bl	24007e64 <RCCEx_PLL3_Config>
2400866e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008670:	2d00      	cmp	r5, #0
24008672:	f040 8105 	bne.w	24008880 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24008676:	4aa6      	ldr	r2, [pc, #664]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008678:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400867a:	6d53      	ldr	r3, [r2, #84]	; 0x54
2400867c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24008680:	430b      	orrs	r3, r1
24008682:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008684:	e9d4 3200 	ldrd	r3, r2, [r4]
24008688:	e613      	b.n	240082b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2400868a:	2102      	movs	r1, #2
2400868c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008690:	f7ff fbe8 	bl	24007e64 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008694:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008698:	2800      	cmp	r0, #0
2400869a:	f43f aef7 	beq.w	2400848c <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
2400869e:	2601      	movs	r6, #1
240086a0:	e6f4      	b.n	2400848c <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240086a2:	2100      	movs	r1, #0
240086a4:	f104 0008 	add.w	r0, r4, #8
240086a8:	f7ff fb62 	bl	24007d70 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240086ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240086ae:	2800      	cmp	r0, #0
240086b0:	f43f af46 	beq.w	24008540 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240086b4:	0797      	lsls	r7, r2, #30
240086b6:	4606      	mov	r6, r0
240086b8:	f57f af45 	bpl.w	24008546 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240086bc:	2101      	movs	r1, #1
240086be:	f104 0008 	add.w	r0, r4, #8
240086c2:	f7ff fb55 	bl	24007d70 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240086c6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240086c8:	2800      	cmp	r0, #0
240086ca:	f43f af3c 	beq.w	24008546 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240086ce:	0755      	lsls	r5, r2, #29
240086d0:	4606      	mov	r6, r0
240086d2:	f57f af3b 	bpl.w	2400854c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240086d6:	2102      	movs	r1, #2
240086d8:	f104 0008 	add.w	r0, r4, #8
240086dc:	f7ff fb48 	bl	24007d70 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240086e0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240086e2:	2800      	cmp	r0, #0
240086e4:	f43f af32 	beq.w	2400854c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240086e8:	4606      	mov	r6, r0
240086ea:	0710      	lsls	r0, r2, #28
240086ec:	f57f af31 	bpl.w	24008552 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240086f0:	2100      	movs	r1, #0
240086f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
240086f6:	f7ff fbb5 	bl	24007e64 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240086fa:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240086fc:	2800      	cmp	r0, #0
240086fe:	f43f af28 	beq.w	24008552 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008702:	06d1      	lsls	r1, r2, #27
24008704:	4606      	mov	r6, r0
24008706:	f57f af27 	bpl.w	24008558 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400870a:	f104 0528 	add.w	r5, r4, #40	; 0x28
2400870e:	2101      	movs	r1, #1
24008710:	4628      	mov	r0, r5
24008712:	f7ff fba7 	bl	24007e64 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008716:	2800      	cmp	r0, #0
24008718:	f000 812e 	beq.w	24008978 <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2400871c:	6863      	ldr	r3, [r4, #4]
2400871e:	069b      	lsls	r3, r3, #26
24008720:	d550      	bpl.n	240087c4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
24008722:	4606      	mov	r6, r0
24008724:	e047      	b.n	240087b6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24008726:	4f7b      	ldr	r7, [pc, #492]	; (24008914 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
24008728:	683b      	ldr	r3, [r7, #0]
2400872a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400872e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24008730:	f7fb fff6 	bl	24004720 <HAL_GetTick>
24008734:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008736:	e006      	b.n	24008746 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008738:	f7fb fff2 	bl	24004720 <HAL_GetTick>
2400873c:	eba0 0008 	sub.w	r0, r0, r8
24008740:	2864      	cmp	r0, #100	; 0x64
24008742:	f200 81df 	bhi.w	24008b04 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008746:	683b      	ldr	r3, [r7, #0]
24008748:	05da      	lsls	r2, r3, #23
2400874a:	d5f5      	bpl.n	24008738 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
2400874c:	2d00      	cmp	r5, #0
2400874e:	f040 8208 	bne.w	24008b62 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24008752:	4b6f      	ldr	r3, [pc, #444]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008754:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008758:	6f19      	ldr	r1, [r3, #112]	; 0x70
2400875a:	4051      	eors	r1, r2
2400875c:	f411 7f40 	tst.w	r1, #768	; 0x300
24008760:	d00d      	beq.n	2400877e <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24008764:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008766:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
2400876a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
2400876e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24008770:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008772:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24008776:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24008778:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2400877a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400877e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008782:	f000 81d0 	beq.w	24008b26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008786:	f402 7340 	and.w	r3, r2, #768	; 0x300
2400878a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2400878e:	f000 81de 	beq.w	24008b4e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
24008792:	4a5f      	ldr	r2, [pc, #380]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008794:	6913      	ldr	r3, [r2, #16]
24008796:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2400879a:	6113      	str	r3, [r2, #16]
2400879c:	4a5c      	ldr	r2, [pc, #368]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400879e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240087a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
240087a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
240087a8:	430b      	orrs	r3, r1
240087aa:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240087ac:	e9d4 3200 	ldrd	r3, r2, [r4]
240087b0:	e54d      	b.n	2400824e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240087b2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240087b6:	2102      	movs	r1, #2
240087b8:	4628      	mov	r0, r5
240087ba:	f7ff fb53 	bl	24007e64 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240087be:	2800      	cmp	r0, #0
240087c0:	f43f aecd 	beq.w	2400855e <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
240087c4:	2001      	movs	r0, #1
}
240087c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
240087ca:	4a51      	ldr	r2, [pc, #324]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087cc:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
240087d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
240087d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
240087d6:	430b      	orrs	r3, r1
240087d8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240087da:	e9d4 3200 	ldrd	r3, r2, [r4]
240087de:	e448      	b.n	24008072 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240087e0:	4a4b      	ldr	r2, [pc, #300]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240087e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
240087e6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
240087ea:	430b      	orrs	r3, r1
240087ec:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240087ee:	e9d4 3200 	ldrd	r3, r2, [r4]
240087f2:	e404      	b.n	24007ffe <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
240087f4:	4a46      	ldr	r2, [pc, #280]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240087f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
240087f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
240087fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
240087fe:	430b      	orrs	r3, r1
24008800:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008802:	e9d4 3200 	ldrd	r3, r2, [r4]
24008806:	e46d      	b.n	240080e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008808:	4a41      	ldr	r2, [pc, #260]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400880a:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400880c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400880e:	f023 0307 	bic.w	r3, r3, #7
24008812:	430b      	orrs	r3, r1
24008814:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008816:	e9d4 3200 	ldrd	r3, r2, [r4]
2400881a:	f7ff bbd6 	b.w	24007fca <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
2400881e:	4a3c      	ldr	r2, [pc, #240]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008820:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008824:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008826:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
2400882a:	430b      	orrs	r3, r1
2400882c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400882e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008832:	e401      	b.n	24008038 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008834:	2102      	movs	r1, #2
24008836:	f104 0008 	add.w	r0, r4, #8
2400883a:	f7ff fa99 	bl	24007d70 <RCCEx_PLL2_Config>
2400883e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008840:	2d00      	cmp	r5, #0
24008842:	d079      	beq.n	24008938 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008844:	462e      	mov	r6, r5
24008846:	e9d4 3200 	ldrd	r3, r2, [r4]
2400884a:	e61c      	b.n	24008486 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400884c:	4a30      	ldr	r2, [pc, #192]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400884e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008854:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008856:	e43f      	b.n	240080d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008858:	4a2d      	ldr	r2, [pc, #180]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
2400885a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400885c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008860:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008862:	e400      	b.n	24008066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008864:	4a2a      	ldr	r2, [pc, #168]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008866:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400886c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400886e:	f7ff bbc0 	b.w	24007ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008872:	4a27      	ldr	r2, [pc, #156]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008874:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400887a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
2400887c:	f7ff bbd6 	b.w	2400802c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008880:	e9d4 3200 	ldrd	r3, r2, [r4]
24008884:	462e      	mov	r6, r5
24008886:	e514      	b.n	240082b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008888:	e9d4 3200 	ldrd	r3, r2, [r4]
2400888c:	462e      	mov	r6, r5
2400888e:	e479      	b.n	24008184 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24008890:	4a1f      	ldr	r2, [pc, #124]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
24008892:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008894:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008896:	f023 0307 	bic.w	r3, r3, #7
2400889a:	430b      	orrs	r3, r1
2400889c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2400889e:	e9d4 3200 	ldrd	r3, r2, [r4]
240088a2:	e520      	b.n	240082e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
240088a4:	4a1a      	ldr	r2, [pc, #104]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240088a6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
240088aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
240088ac:	f023 0307 	bic.w	r3, r3, #7
240088b0:	430b      	orrs	r3, r1
240088b2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
240088b4:	e9d4 3200 	ldrd	r3, r2, [r4]
240088b8:	e530      	b.n	2400831c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240088ba:	e9d4 3200 	ldrd	r3, r2, [r4]
240088be:	462e      	mov	r6, r5
240088c0:	e54e      	b.n	24008360 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240088c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240088c6:	462e      	mov	r6, r5
240088c8:	f7ff bbf0 	b.w	240080ac <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240088cc:	4a10      	ldr	r2, [pc, #64]	; (24008910 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
240088ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240088d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240088d2:	f023 0303 	bic.w	r3, r3, #3
240088d6:	430b      	orrs	r3, r1
240088d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240088da:	e9d4 3200 	ldrd	r3, r2, [r4]
240088de:	e4b3      	b.n	24008248 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240088e0:	e9d4 3200 	ldrd	r3, r2, [r4]
240088e4:	462e      	mov	r6, r5
240088e6:	e41d      	b.n	24008124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
240088e8:	e9d4 3200 	ldrd	r3, r2, [r4]
240088ec:	462e      	mov	r6, r5
240088ee:	e57b      	b.n	240083e8 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
240088f0:	e9d4 3200 	ldrd	r3, r2, [r4]
240088f4:	462e      	mov	r6, r5
240088f6:	e435      	b.n	24008164 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240088f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240088fc:	462e      	mov	r6, r5
240088fe:	e551      	b.n	240083a4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008900:	e9d4 3200 	ldrd	r3, r2, [r4]
24008904:	462e      	mov	r6, r5
24008906:	e5a0      	b.n	2400844a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008908:	e9d4 3200 	ldrd	r3, r2, [r4]
2400890c:	462e      	mov	r6, r5
2400890e:	e5ae      	b.n	2400846e <HAL_RCCEx_PeriphCLKConfig+0x516>
24008910:	58024400 	.word	0x58024400
24008914:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008918:	4a9a      	ldr	r2, [pc, #616]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400891a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400891c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008920:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008922:	2d00      	cmp	r5, #0
24008924:	f43f ae4d 	beq.w	240085c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
24008928:	e010      	b.n	2400894c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400892a:	4a96      	ldr	r2, [pc, #600]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400892c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400892e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008932:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008934:	2d00      	cmp	r5, #0
24008936:	d185      	bne.n	24008844 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24008938:	4a92      	ldr	r2, [pc, #584]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
2400893a:	6d21      	ldr	r1, [r4, #80]	; 0x50
2400893c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400893e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24008942:	430b      	orrs	r3, r1
24008944:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008946:	e9d4 3200 	ldrd	r3, r2, [r4]
2400894a:	e59c      	b.n	24008486 <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400894c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008950:	462e      	mov	r6, r5
24008952:	e5ac      	b.n	240084ae <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008954:	4a8b      	ldr	r2, [pc, #556]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008956:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400895c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400895e:	2d00      	cmp	r5, #0
24008960:	f43f ae61 	beq.w	24008626 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
24008964:	e7d0      	b.n	24008908 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008966:	f104 0008 	add.w	r0, r4, #8
2400896a:	f7ff fa01 	bl	24007d70 <RCCEx_PLL2_Config>
2400896e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008970:	2d00      	cmp	r5, #0
24008972:	f43f ae6c 	beq.w	2400864e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
24008976:	e7c3      	b.n	24008900 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008978:	6862      	ldr	r2, [r4, #4]
2400897a:	e5ed      	b.n	24008558 <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400897c:	2102      	movs	r1, #2
2400897e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008982:	f7ff fa6f 	bl	24007e64 <RCCEx_PLL3_Config>
24008986:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008988:	2d00      	cmp	r5, #0
2400898a:	f43f ad01 	beq.w	24008390 <HAL_RCCEx_PeriphCLKConfig+0x438>
2400898e:	e7b3      	b.n	240088f8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008990:	2102      	movs	r1, #2
24008992:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008996:	f7ff fa65 	bl	24007e64 <RCCEx_PLL3_Config>
2400899a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400899c:	2d00      	cmp	r5, #0
2400899e:	f43f ad19 	beq.w	240083d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
240089a2:	e7a1      	b.n	240088e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240089a4:	4a77      	ldr	r2, [pc, #476]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
240089a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240089a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240089ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240089ae:	2d00      	cmp	r5, #0
240089b0:	f43f ae23 	beq.w	240085fa <HAL_RCCEx_PeriphCLKConfig+0x6a2>
240089b4:	e768      	b.n	24008888 <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240089b6:	2101      	movs	r1, #1
240089b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089bc:	f7ff fa52 	bl	24007e64 <RCCEx_PLL3_Config>
240089c0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089c2:	2d00      	cmp	r5, #0
240089c4:	f43f aba5 	beq.w	24008112 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
240089c8:	e78a      	b.n	240088e0 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240089ca:	2101      	movs	r1, #1
240089cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089d0:	f7ff fa48 	bl	24007e64 <RCCEx_PLL3_Config>
240089d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089d6:	2d00      	cmp	r5, #0
240089d8:	f43f abba 	beq.w	24008150 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
240089dc:	e788      	b.n	240088f0 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240089de:	2102      	movs	r1, #2
240089e0:	f104 0008 	add.w	r0, r4, #8
240089e4:	f7ff f9c4 	bl	24007d70 <RCCEx_PLL2_Config>
240089e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089ea:	2d00      	cmp	r5, #0
240089ec:	f43f ab55 	beq.w	2400809a <HAL_RCCEx_PeriphCLKConfig+0x142>
240089f0:	e767      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240089f2:	2102      	movs	r1, #2
240089f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089f8:	f7ff fa34 	bl	24007e64 <RCCEx_PLL3_Config>
240089fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089fe:	2d00      	cmp	r5, #0
24008a00:	f43f aca4 	beq.w	2400834c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
24008a04:	e759      	b.n	240088ba <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a06:	4a5f      	ldr	r2, [pc, #380]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008a08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008a10:	2d00      	cmp	r5, #0
24008a12:	f43f af5b 	beq.w	240088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
24008a16:	e414      	b.n	24008242 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a18:	2102      	movs	r1, #2
24008a1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a1e:	f7ff fa21 	bl	24007e64 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008a22:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a26:	2800      	cmp	r0, #0
24008a28:	f43f ace6 	beq.w	240083f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
24008a2c:	2601      	movs	r6, #1
24008a2e:	e4e3      	b.n	240083f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a30:	2102      	movs	r1, #2
24008a32:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a36:	f7ff fa15 	bl	24007e64 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008a3a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a3e:	2800      	cmp	r0, #0
24008a40:	f43f acea 	beq.w	24008418 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
24008a44:	2601      	movs	r6, #1
24008a46:	e4e7      	b.n	24008418 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a48:	2100      	movs	r1, #0
24008a4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a4e:	f7ff fa09 	bl	24007e64 <RCCEx_PLL3_Config>
24008a52:	4605      	mov	r5, r0
        break;
24008a54:	f7ff baea 	b.w	2400802c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008a58:	2102      	movs	r1, #2
24008a5a:	3028      	adds	r0, #40	; 0x28
24008a5c:	f7ff fa02 	bl	24007e64 <RCCEx_PLL3_Config>
24008a60:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008a62:	2e00      	cmp	r6, #0
24008a64:	f43f aa94 	beq.w	24007f90 <HAL_RCCEx_PeriphCLKConfig+0x38>
24008a68:	f7ff ba9f 	b.w	24007faa <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a6c:	4a45      	ldr	r2, [pc, #276]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
24008a6e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008a76:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008a78:	e5af      	b.n	240085da <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008a7a:	2100      	movs	r1, #0
24008a7c:	f104 0008 	add.w	r0, r4, #8
24008a80:	f7ff f976 	bl	24007d70 <RCCEx_PLL2_Config>
24008a84:	4605      	mov	r5, r0
        break;
24008a86:	e5a8      	b.n	240085da <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a88:	2100      	movs	r1, #0
24008a8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a8e:	f7ff f9e9 	bl	24007e64 <RCCEx_PLL3_Config>
24008a92:	4605      	mov	r5, r0
        break;
24008a94:	f7ff bb20 	b.w	240080d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008a98:	2100      	movs	r1, #0
24008a9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a9e:	f7ff f9e1 	bl	24007e64 <RCCEx_PLL3_Config>
24008aa2:	4605      	mov	r5, r0
        break;
24008aa4:	f7ff badf 	b.w	24008066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008aa8:	2100      	movs	r1, #0
24008aaa:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008aae:	f7ff f9d9 	bl	24007e64 <RCCEx_PLL3_Config>
24008ab2:	4605      	mov	r5, r0
        break;
24008ab4:	e591      	b.n	240085da <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008ab6:	2100      	movs	r1, #0
24008ab8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008abc:	f7ff f9d2 	bl	24007e64 <RCCEx_PLL3_Config>
24008ac0:	4605      	mov	r5, r0
        break;
24008ac2:	f7ff ba96 	b.w	24007ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008ac6:	2101      	movs	r1, #1
24008ac8:	f104 0008 	add.w	r0, r4, #8
24008acc:	f7ff f950 	bl	24007d70 <RCCEx_PLL2_Config>
24008ad0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ad2:	2d00      	cmp	r5, #0
24008ad4:	f43f aee6 	beq.w	240088a4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
24008ad8:	e41d      	b.n	24008316 <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008ada:	2101      	movs	r1, #1
24008adc:	f104 0008 	add.w	r0, r4, #8
24008ae0:	f7ff f946 	bl	24007d70 <RCCEx_PLL2_Config>
24008ae4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ae6:	2d00      	cmp	r5, #0
24008ae8:	f43f aed2 	beq.w	24008890 <HAL_RCCEx_PeriphCLKConfig+0x938>
24008aec:	f7ff bbf8 	b.w	240082e0 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008af0:	2101      	movs	r1, #1
24008af2:	f104 0008 	add.w	r0, r4, #8
24008af6:	f7ff f93b 	bl	24007d70 <RCCEx_PLL2_Config>
24008afa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008afc:	2d00      	cmp	r5, #0
24008afe:	f43f adba 	beq.w	24008676 <HAL_RCCEx_PeriphCLKConfig+0x71e>
24008b02:	e6bd      	b.n	24008880 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
24008b04:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008b06:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
24008b0a:	4635      	mov	r5, r6
24008b0c:	f7ff bb9f 	b.w	2400824e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008b10:	2601      	movs	r6, #1
24008b12:	f7ff ba4c 	b.w	24007fae <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008b16:	4a1b      	ldr	r2, [pc, #108]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008b18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008b20:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008b22:	f7ff ba3b 	b.w	24007f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24008b26:	f7fb fdfb 	bl	24004720 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b2a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
24008b2e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008b30:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b34:	e004      	b.n	24008b40 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008b36:	f7fb fdf3 	bl	24004720 <HAL_GetTick>
24008b3a:	1bc0      	subs	r0, r0, r7
24008b3c:	4548      	cmp	r0, r9
24008b3e:	d8e1      	bhi.n	24008b04 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b40:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24008b44:	079b      	lsls	r3, r3, #30
24008b46:	d5f6      	bpl.n	24008b36 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008b48:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008b4c:	e61b      	b.n	24008786 <HAL_RCCEx_PeriphCLKConfig+0x82e>
24008b4e:	490d      	ldr	r1, [pc, #52]	; (24008b84 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
24008b50:	4b0d      	ldr	r3, [pc, #52]	; (24008b88 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
24008b52:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24008b56:	690a      	ldr	r2, [r1, #16]
24008b58:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24008b5c:	4313      	orrs	r3, r2
24008b5e:	610b      	str	r3, [r1, #16]
24008b60:	e61c      	b.n	2400879c <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008b62:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b66:	462e      	mov	r6, r5
24008b68:	f7ff bb71 	b.w	2400824e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
24008b6c:	2601      	movs	r6, #1
24008b6e:	4635      	mov	r5, r6
24008b70:	f7ff bb6a 	b.w	24008248 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008b74:	2601      	movs	r6, #1
24008b76:	4635      	mov	r5, r6
24008b78:	f7ff bbd0 	b.w	2400831c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008b7c:	2601      	movs	r6, #1
24008b7e:	4635      	mov	r5, r6
24008b80:	f7ff bbb1 	b.w	240082e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
24008b84:	58024400 	.word	0x58024400
24008b88:	00ffffcf 	.word	0x00ffffcf

24008b8c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008b8c:	4b4f      	ldr	r3, [pc, #316]	; (24008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
24008b8e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008b90:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008b92:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008b94:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
24008b96:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008b9a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008b9e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
24008ba0:	d05c      	beq.n	24008c5c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008ba2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008ba6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008baa:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008bae:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008bb2:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008bb4:	ee07 4a90 	vmov	s15, r4
24008bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008bbc:	d003      	beq.n	24008bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
24008bbe:	2902      	cmp	r1, #2
24008bc0:	d075      	beq.n	24008cae <HAL_RCCEx_GetPLL2ClockFreq+0x122>
24008bc2:	2900      	cmp	r1, #0
24008bc4:	d04f      	beq.n	24008c66 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008bc6:	ee07 2a90 	vmov	s15, r2
24008bca:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
24008bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24008bd4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008bd8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008be0:	ee06 3a90 	vmov	s13, r3
24008be4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008be8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008bec:	ee76 6a85 	vadd.f32	s13, s13, s10
24008bf0:	eee7 6a25 	vfma.f32	s13, s14, s11
24008bf4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008bf8:	4a34      	ldr	r2, [pc, #208]	; (24008ccc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
24008bfa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008bfe:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c00:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008c04:	ee07 3a10 	vmov	s14, r3
24008c08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008c0c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008c0e:	ee37 7a06 	vadd.f32	s14, s14, s12
24008c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008c1a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24008c1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c20:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008c24:	ee07 3a10 	vmov	s14, r3
24008c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008c2c:	ee37 7a06 	vadd.f32	s14, s14, s12
24008c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008c38:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24008c3c:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c3e:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008c42:	ee07 3a90 	vmov	s15, r3
24008c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c4a:	ee77 7a86 	vadd.f32	s15, s15, s12
24008c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008c52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008c56:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008c5a:	4770      	bx	lr
24008c5c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24008c5e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24008c62:	6082      	str	r2, [r0, #8]
}
24008c64:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008c66:	6819      	ldr	r1, [r3, #0]
24008c68:	0689      	lsls	r1, r1, #26
24008c6a:	d527      	bpl.n	24008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c6c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c6e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c72:	4919      	ldr	r1, [pc, #100]	; (24008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c7a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c82:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008c8a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c8c:	ee06 3a90 	vmov	s13, r3
24008c90:	ee05 1a90 	vmov	s11, r1
24008c94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008c98:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008c9c:	ee76 6a86 	vadd.f32	s13, s13, s12
24008ca0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008ca4:	eee7 6a05 	vfma.f32	s13, s14, s10
24008ca8:	ee66 6a26 	vmul.f32	s13, s12, s13
24008cac:	e7a4      	b.n	24008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008cae:	ee07 2a90 	vmov	s15, r2
24008cb2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008cdc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
24008cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008cba:	e78a      	b.n	24008bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008cbc:	ee07 2a90 	vmov	s15, r2
24008cc0:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24008cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008cc8:	e783      	b.n	24008bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
24008cca:	bf00      	nop
24008ccc:	58024400 	.word	0x58024400
24008cd0:	4a742400 	.word	0x4a742400
24008cd4:	39000000 	.word	0x39000000
24008cd8:	03d09000 	.word	0x03d09000
24008cdc:	4b742400 	.word	0x4b742400
24008ce0:	4c742400 	.word	0x4c742400

24008ce4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ce4:	4b4f      	ldr	r3, [pc, #316]	; (24008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
24008ce6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ce8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008cea:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008cec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
24008cee:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008cf2:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008cf6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
24008cf8:	d05c      	beq.n	24008db4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008cfa:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008cfe:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008d02:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d06:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008d0a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d0c:	ee07 4a90 	vmov	s15, r4
24008d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008d14:	d003      	beq.n	24008d1e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
24008d16:	2902      	cmp	r1, #2
24008d18:	d075      	beq.n	24008e06 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
24008d1a:	2900      	cmp	r1, #0
24008d1c:	d04f      	beq.n	24008dbe <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d1e:	ee07 2a90 	vmov	s15, r2
24008d22:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
24008d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24008d2c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008d30:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008d38:	ee06 3a90 	vmov	s13, r3
24008d3c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008d40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008d44:	ee76 6a85 	vadd.f32	s13, s13, s10
24008d48:	eee7 6a25 	vfma.f32	s13, s14, s11
24008d4c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008d50:	4a34      	ldr	r2, [pc, #208]	; (24008e24 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
24008d52:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008d56:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d58:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008d5c:	ee07 3a10 	vmov	s14, r3
24008d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008d64:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008d66:	ee37 7a06 	vadd.f32	s14, s14, s12
24008d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008d72:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24008d76:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d78:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008d7c:	ee07 3a10 	vmov	s14, r3
24008d80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008d84:	ee37 7a06 	vadd.f32	s14, s14, s12
24008d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008d90:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24008d94:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d96:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008d9a:	ee07 3a90 	vmov	s15, r3
24008d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008da2:	ee77 7a86 	vadd.f32	s15, s15, s12
24008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008daa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008dae:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008db2:	4770      	bx	lr
24008db4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24008db6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
24008dba:	6082      	str	r2, [r0, #8]
}
24008dbc:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008dbe:	6819      	ldr	r1, [r3, #0]
24008dc0:	0689      	lsls	r1, r1, #26
24008dc2:	d527      	bpl.n	24008e14 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008dc4:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008dc6:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008dca:	4919      	ldr	r1, [pc, #100]	; (24008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008dcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008dd2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008dda:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008de2:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008de4:	ee06 3a90 	vmov	s13, r3
24008de8:	ee05 1a90 	vmov	s11, r1
24008dec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008df0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008df4:	ee76 6a86 	vadd.f32	s13, s13, s12
24008df8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008dfc:	eee7 6a05 	vfma.f32	s13, s14, s10
24008e00:	ee66 6a26 	vmul.f32	s13, s12, s13
24008e04:	e7a4      	b.n	24008d50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e06:	ee07 2a90 	vmov	s15, r2
24008e0a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008e34 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
24008e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e12:	e78a      	b.n	24008d2a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e14:	ee07 2a90 	vmov	s15, r2
24008e18:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
24008e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e20:	e783      	b.n	24008d2a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24008e22:	bf00      	nop
24008e24:	58024400 	.word	0x58024400
24008e28:	4a742400 	.word	0x4a742400
24008e2c:	39000000 	.word	0x39000000
24008e30:	03d09000 	.word	0x03d09000
24008e34:	4b742400 	.word	0x4b742400
24008e38:	4c742400 	.word	0x4c742400

24008e3c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008e3c:	4b4f      	ldr	r3, [pc, #316]	; (24008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
24008e3e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008e40:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008e42:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008e44:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
24008e46:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008e4a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008e4e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
24008e50:	d05c      	beq.n	24008f0c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008e52:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008e56:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008e5a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008e5e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008e62:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008e64:	ee07 4a90 	vmov	s15, r4
24008e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008e6c:	d07e      	beq.n	24008f6c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
24008e6e:	2902      	cmp	r1, #2
24008e70:	d075      	beq.n	24008f5e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
24008e72:	2900      	cmp	r1, #0
24008e74:	d04f      	beq.n	24008f16 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008e76:	ee07 2a90 	vmov	s15, r2
24008e7a:	eddf 6a41 	vldr	s13, [pc, #260]	; 24008f80 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
24008e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008e84:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24008e88:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24008e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008e90:	ee06 3a90 	vmov	s13, r3
24008e94:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24008e98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008e9c:	ee76 6a85 	vadd.f32	s13, s13, s10
24008ea0:	eee7 6a25 	vfma.f32	s13, s14, s11
24008ea4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008ea8:	4a34      	ldr	r2, [pc, #208]	; (24008f7c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
24008eaa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008eae:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008eb0:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008eb4:	ee07 3a10 	vmov	s14, r3
24008eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24008ebc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008ebe:	ee37 7a06 	vadd.f32	s14, s14, s12
24008ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008eca:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24008ece:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008ed0:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008ed4:	ee07 3a10 	vmov	s14, r3
24008ed8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008edc:	ee37 7a06 	vadd.f32	s14, s14, s12
24008ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008ee8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24008eec:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008eee:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008ef2:	ee07 3a90 	vmov	s15, r3
24008ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008efa:	ee77 7a86 	vadd.f32	s15, s15, s12
24008efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008f02:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008f06:	ed80 7a02 	vstr	s14, [r0, #8]
}
24008f0a:	4770      	bx	lr
24008f0c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24008f0e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24008f12:	6082      	str	r2, [r0, #8]
}
24008f14:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008f16:	6819      	ldr	r1, [r3, #0]
24008f18:	0689      	lsls	r1, r1, #26
24008f1a:	d5ac      	bpl.n	24008e76 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f1c:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f1e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f22:	4919      	ldr	r1, [pc, #100]	; (24008f88 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f2a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f32:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008f84 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
24008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f3a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f3c:	ee06 3a90 	vmov	s13, r3
24008f40:	ee05 1a90 	vmov	s11, r1
24008f44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24008f48:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008f4c:	ee76 6a86 	vadd.f32	s13, s13, s12
24008f50:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24008f54:	eee7 6a05 	vfma.f32	s13, s14, s10
24008f58:	ee66 6a26 	vmul.f32	s13, s12, s13
24008f5c:	e7a4      	b.n	24008ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f5e:	ee07 2a90 	vmov	s15, r2
24008f62:	eddf 6a0a 	vldr	s13, [pc, #40]	; 24008f8c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24008f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f6a:	e78a      	b.n	24008e82 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f6c:	ee07 2a90 	vmov	s15, r2
24008f70:	eddf 6a07 	vldr	s13, [pc, #28]	; 24008f90 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
24008f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f78:	e783      	b.n	24008e82 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
24008f7a:	bf00      	nop
24008f7c:	58024400 	.word	0x58024400
24008f80:	4c742400 	.word	0x4c742400
24008f84:	39000000 	.word	0x39000000
24008f88:	03d09000 	.word	0x03d09000
24008f8c:	4b742400 	.word	0x4b742400
24008f90:	4a742400 	.word	0x4a742400

24008f94 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24008f94:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24008f98:	430b      	orrs	r3, r1
{
24008f9a:	b500      	push	{lr}
24008f9c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24008f9e:	f000 8084 	beq.w	240090aa <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24008fa2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24008fa6:	430b      	orrs	r3, r1
24008fa8:	d039      	beq.n	2400901e <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24008faa:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
24008fae:	430b      	orrs	r3, r1
24008fb0:	f000 80e6 	beq.w	24009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24008fb4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24008fb8:	430b      	orrs	r3, r1
24008fba:	f000 8089 	beq.w	240090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24008fbe:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24008fc2:	430b      	orrs	r3, r1
24008fc4:	d061      	beq.n	2400908a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24008fc6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
24008fca:	430b      	orrs	r3, r1
24008fcc:	f000 8112 	beq.w	240091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24008fd0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24008fd4:	430b      	orrs	r3, r1
24008fd6:	f000 80a3 	beq.w	24009120 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24008fda:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24008fde:	430b      	orrs	r3, r1
24008fe0:	f000 80fa 	beq.w	240091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24008fe4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24008fe8:	430b      	orrs	r3, r1
24008fea:	f000 8143 	beq.w	24009274 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24008fee:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24008ff2:	ea50 0301 	orrs.w	r3, r0, r1
24008ff6:	d137      	bne.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24008ff8:	4a99      	ldr	r2, [pc, #612]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24008ffa:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24009000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009004:	f000 8083 	beq.w	2400910e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400900c:	f000 8156 	beq.w	240092bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009010:	bb53      	cbnz	r3, 24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009012:	6810      	ldr	r0, [r2, #0]
24009014:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009018:	d044      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
2400901a:	4892      	ldr	r0, [pc, #584]	; (24009264 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
2400901c:	e042      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
2400901e:	4a90      	ldr	r2, [pc, #576]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009020:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009022:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24009026:	2b80      	cmp	r3, #128	; 0x80
24009028:	f000 80a5 	beq.w	24009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400902c:	d920      	bls.n	24009070 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
2400902e:	2bc0      	cmp	r3, #192	; 0xc0
24009030:	d037      	beq.n	240090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009036:	d117      	bne.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009038:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400903a:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400903c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009040:	0749      	lsls	r1, r1, #29
24009042:	d502      	bpl.n	2400904a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24009044:	2b00      	cmp	r3, #0
24009046:	f000 80c1 	beq.w	240091cc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400904a:	4a85      	ldr	r2, [pc, #532]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400904c:	6812      	ldr	r2, [r2, #0]
2400904e:	05d0      	lsls	r0, r2, #23
24009050:	d503      	bpl.n	2400905a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
24009052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009056:	f000 8101 	beq.w	2400925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400905a:	4a81      	ldr	r2, [pc, #516]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400905c:	6812      	ldr	r2, [r2, #0]
2400905e:	0391      	lsls	r1, r2, #14
24009060:	d502      	bpl.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24009062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009066:	d0d8      	beq.n	2400901a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009068:	2000      	movs	r0, #0
}
2400906a:	b005      	add	sp, #20
2400906c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24009070:	2b00      	cmp	r3, #0
24009072:	d04c      	beq.n	2400910e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009074:	2b40      	cmp	r3, #64	; 0x40
24009076:	d1f7      	bne.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009078:	6810      	ldr	r0, [r2, #0]
2400907a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400907e:	d011      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009080:	a801      	add	r0, sp, #4
24009082:	f7ff fd83 	bl	24008b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009086:	9801      	ldr	r0, [sp, #4]
24009088:	e00c      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2400908a:	4a75      	ldr	r2, [pc, #468]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400908c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400908e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009096:	d06e      	beq.n	24009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009098:	d937      	bls.n	2400910a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
2400909a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2400909e:	f040 8087 	bne.w	240091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
240090a2:	4871      	ldr	r0, [pc, #452]	; (24009268 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
240090a4:	b005      	add	sp, #20
240090a6:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240090aa:	4b6d      	ldr	r3, [pc, #436]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240090ae:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
240090b2:	2b04      	cmp	r3, #4
240090b4:	d8d8      	bhi.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
240090b6:	a201      	add	r2, pc, #4	; (adr r2, 240090bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
240090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240090bc:	2400915f 	.word	0x2400915f
240090c0:	2400913b 	.word	0x2400913b
240090c4:	2400914b 	.word	0x2400914b
240090c8:	240090a3 	.word	0x240090a3
240090cc:	24009147 	.word	0x24009147
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
240090d0:	4a63      	ldr	r2, [pc, #396]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
240090d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
240090d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240090dc:	d04b      	beq.n	24009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240090de:	d944      	bls.n	2400916a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
240090e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240090e4:	d0dd      	beq.n	240090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240090e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240090ea:	d1bd      	bne.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240090ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240090ee:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240090f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240090f4:	0752      	lsls	r2, r2, #29
240090f6:	d5a8      	bpl.n	2400904a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
240090f8:	2b00      	cmp	r3, #0
240090fa:	d1a6      	bne.n	2400904a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240090fc:	4b58      	ldr	r3, [pc, #352]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090fe:	485b      	ldr	r0, [pc, #364]	; (2400926c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009100:	681b      	ldr	r3, [r3, #0]
24009102:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009106:	40d8      	lsrs	r0, r3
24009108:	e7cc      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
2400910a:	2b00      	cmp	r3, #0
2400910c:	d154      	bne.n	240091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400910e:	6810      	ldr	r0, [r2, #0]
24009110:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009114:	d0c6      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009116:	a801      	add	r0, sp, #4
24009118:	f7ff fe90 	bl	24008e3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400911c:	9802      	ldr	r0, [sp, #8]
2400911e:	e7c1      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24009120:	4a4f      	ldr	r2, [pc, #316]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009122:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
24009128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400912c:	f000 80d0 	beq.w	240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24009130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009134:	d0da      	beq.n	240090ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009136:	2b00      	cmp	r3, #0
24009138:	d196      	bne.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400913a:	4b49      	ldr	r3, [pc, #292]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400913c:	6818      	ldr	r0, [r3, #0]
2400913e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009142:	d0af      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009144:	e79c      	b.n	24009080 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009146:	4a46      	ldr	r2, [pc, #280]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009148:	e776      	b.n	24009038 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400914a:	4b45      	ldr	r3, [pc, #276]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400914c:	6818      	ldr	r0, [r3, #0]
2400914e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009152:	d0a7      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009154:	a801      	add	r0, sp, #4
24009156:	f7ff fdc5 	bl	24008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400915a:	9801      	ldr	r0, [sp, #4]
2400915c:	e7a2      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400915e:	4b40      	ldr	r3, [pc, #256]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009160:	6818      	ldr	r0, [r3, #0]
24009162:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009166:	d09d      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009168:	e7d5      	b.n	24009116 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400916a:	2b00      	cmp	r3, #0
2400916c:	d0cf      	beq.n	2400910e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400916e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24009172:	d081      	beq.n	24009078 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009174:	e778      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009176:	6810      	ldr	r0, [r2, #0]
24009178:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400917c:	d092      	beq.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2400917e:	e7e9      	b.n	24009154 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24009180:	4a37      	ldr	r2, [pc, #220]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009182:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009184:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24009188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400918c:	d0f3      	beq.n	24009176 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400918e:	d806      	bhi.n	2400919e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009190:	2b00      	cmp	r3, #0
24009192:	d0bc      	beq.n	2400910e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009198:	f43f af6e 	beq.w	24009078 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
2400919c:	e764      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
2400919e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240091a2:	f43f af7e 	beq.w	240090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240091a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240091aa:	f43f af45 	beq.w	24009038 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
240091ae:	e75b      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
240091b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240091b4:	d09a      	beq.n	240090ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
240091b6:	e757      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
240091b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240091bc:	f43f af5c 	beq.w	24009078 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
240091c0:	e752      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240091c2:	6810      	ldr	r0, [r2, #0]
240091c4:	f010 0004 	ands.w	r0, r0, #4
240091c8:	f43f af6c 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091cc:	6813      	ldr	r3, [r2, #0]
240091ce:	4827      	ldr	r0, [pc, #156]	; (2400926c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
240091d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240091d4:	40d8      	lsrs	r0, r3
240091d6:	e765      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
240091d8:	4b21      	ldr	r3, [pc, #132]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
240091dc:	03d2      	lsls	r2, r2, #15
240091de:	d5bf      	bpl.n	24009160 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240091e0:	6818      	ldr	r0, [r3, #0]
240091e2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240091e6:	f43f af5d 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240091ea:	a801      	add	r0, sp, #4
240091ec:	f7ff fcce 	bl	24008b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
240091f0:	9803      	ldr	r0, [sp, #12]
240091f2:	e757      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
240091f4:	4a1a      	ldr	r2, [pc, #104]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
240091f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
240091fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24009200:	d0df      	beq.n	240091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24009202:	d810      	bhi.n	24009226 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24009204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009208:	d058      	beq.n	240092bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400920a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400920e:	d118      	bne.n	24009242 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009210:	4b13      	ldr	r3, [pc, #76]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009212:	6818      	ldr	r0, [r3, #0]
24009214:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009218:	f43f af44 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400921c:	a801      	add	r0, sp, #4
2400921e:	f7ff fd61 	bl	24008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009222:	9802      	ldr	r0, [sp, #8]
24009224:	e73e      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24009226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400922a:	d012      	beq.n	24009252 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
2400922c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009230:	f47f af1a 	bne.w	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009234:	4b0a      	ldr	r3, [pc, #40]	; (24009260 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009236:	6818      	ldr	r0, [r3, #0]
24009238:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400923c:	f43f af32 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009240:	e6eb      	b.n	2400901a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24009242:	2b00      	cmp	r3, #0
24009244:	f47f af10 	bne.w	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
24009248:	b005      	add	sp, #20
2400924a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
2400924e:	f7fe bd47 	b.w	24007ce0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009252:	6810      	ldr	r0, [r2, #0]
24009254:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009258:	f43f af24 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
2400925c:	4804      	ldr	r0, [pc, #16]	; (24009270 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
2400925e:	e721      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009260:	58024400 	.word	0x58024400
24009264:	00f42400 	.word	0x00f42400
24009268:	00bb8000 	.word	0x00bb8000
2400926c:	03d09000 	.word	0x03d09000
24009270:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24009274:	4b28      	ldr	r3, [pc, #160]	; (24009318 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009278:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
2400927c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009280:	d037      	beq.n	240092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24009282:	d814      	bhi.n	240092ae <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24009284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009288:	d03f      	beq.n	2400930a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
2400928a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400928e:	d0bf      	beq.n	24009210 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009290:	2b00      	cmp	r3, #0
24009292:	f47f aee9 	bne.w	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009296:	f7fe fce3 	bl	24007c60 <HAL_RCC_GetHCLKFreq>
2400929a:	4b1f      	ldr	r3, [pc, #124]	; (24009318 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400929c:	4a1f      	ldr	r2, [pc, #124]	; (2400931c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
2400929e:	6a1b      	ldr	r3, [r3, #32]
240092a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
240092a4:	5cd3      	ldrb	r3, [r2, r3]
240092a6:	f003 031f 	and.w	r3, r3, #31
240092aa:	40d8      	lsrs	r0, r3
        break;
240092ac:	e6fa      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
240092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240092b2:	d017      	beq.n	240092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
240092b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
240092b8:	d0bc      	beq.n	24009234 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
240092ba:	e6d5      	b.n	24009068 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240092bc:	6810      	ldr	r0, [r2, #0]
240092be:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240092c2:	f43f aeef 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240092c6:	a801      	add	r0, sp, #4
240092c8:	f7ff fc60 	bl	24008b8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
240092cc:	9802      	ldr	r0, [sp, #8]
240092ce:	e6e9      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240092d0:	6810      	ldr	r0, [r2, #0]
240092d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240092d6:	f43f aee5 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240092da:	a801      	add	r0, sp, #4
240092dc:	f7ff fd02 	bl	24008ce4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
240092e0:	9803      	ldr	r0, [sp, #12]
240092e2:	e6df      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240092e4:	4b0c      	ldr	r3, [pc, #48]	; (24009318 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240092e6:	6818      	ldr	r0, [r3, #0]
240092e8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
240092ec:	f43f aeda 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
240092f0:	e7b4      	b.n	2400925c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240092f2:	4b09      	ldr	r3, [pc, #36]	; (24009318 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240092f4:	6818      	ldr	r0, [r3, #0]
240092f6:	f010 0004 	ands.w	r0, r0, #4
240092fa:	f43f aed3 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092fe:	681b      	ldr	r3, [r3, #0]
24009300:	4807      	ldr	r0, [pc, #28]	; (24009320 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24009302:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009306:	40d8      	lsrs	r0, r3
24009308:	e6cc      	b.n	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400930a:	4b03      	ldr	r3, [pc, #12]	; (24009318 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400930c:	6818      	ldr	r0, [r3, #0]
2400930e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009312:	f43f aec7 	beq.w	240090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24009316:	e7d6      	b.n	240092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
24009318:	58024400 	.word	0x58024400
2400931c:	24017fa8 	.word	0x24017fa8
24009320:	03d09000 	.word	0x03d09000

24009324 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24009324:	2800      	cmp	r0, #0
24009326:	d03c      	beq.n	240093a2 <HAL_RNG_Init+0x7e>
{
24009328:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400932a:	7a43      	ldrb	r3, [r0, #9]
2400932c:	4604      	mov	r4, r0
2400932e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009332:	2b00      	cmp	r3, #0
24009334:	d031      	beq.n	2400939a <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009336:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
24009338:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400933a:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
2400933c:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400933e:	6813      	ldr	r3, [r2, #0]
24009340:	f023 0320 	bic.w	r3, r3, #32
24009344:	430b      	orrs	r3, r1
24009346:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
24009348:	6822      	ldr	r2, [r4, #0]
2400934a:	6813      	ldr	r3, [r2, #0]
2400934c:	f043 0304 	orr.w	r3, r3, #4
24009350:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24009352:	6823      	ldr	r3, [r4, #0]
24009354:	685b      	ldr	r3, [r3, #4]
24009356:	0658      	lsls	r0, r3, #25
24009358:	d503      	bpl.n	24009362 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400935a:	2304      	movs	r3, #4
    return HAL_ERROR;
2400935c:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
2400935e:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009360:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009362:	f7fb f9dd 	bl	24004720 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009366:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
24009368:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400936a:	685b      	ldr	r3, [r3, #4]
2400936c:	0759      	lsls	r1, r3, #29
2400936e:	d50e      	bpl.n	2400938e <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009370:	f7fb f9d6 	bl	24004720 <HAL_GetTick>
24009374:	1b43      	subs	r3, r0, r5
24009376:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24009378:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400937a:	d9f6      	bls.n	2400936a <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400937c:	685a      	ldr	r2, [r3, #4]
2400937e:	0752      	lsls	r2, r2, #29
24009380:	d5f3      	bpl.n	2400936a <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
24009382:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009384:	2302      	movs	r3, #2
        return HAL_ERROR;
24009386:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
24009388:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400938a:	60e3      	str	r3, [r4, #12]
}
2400938c:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
2400938e:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009390:	2201      	movs	r2, #1
  return HAL_OK;
24009392:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009394:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009396:	60e3      	str	r3, [r4, #12]
}
24009398:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400939a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400939c:	f7fa fcda 	bl	24003d54 <HAL_RNG_MspInit>
240093a0:	e7c9      	b.n	24009336 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
240093a2:	2001      	movs	r0, #1
}
240093a4:	4770      	bx	lr
240093a6:	bf00      	nop

240093a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
240093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
240093aa:	7a03      	ldrb	r3, [r0, #8]
240093ac:	2b01      	cmp	r3, #1
240093ae:	d027      	beq.n	24009400 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
240093b0:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
240093b2:	2201      	movs	r2, #1
240093b4:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
240093b6:	4293      	cmp	r3, r2
240093b8:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
240093ba:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
240093bc:	d006      	beq.n	240093cc <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
240093be:	2304      	movs	r3, #4
    status = HAL_ERROR;
240093c0:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
240093c2:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
240093c4:	2300      	movs	r3, #0
240093c6:	7223      	strb	r3, [r4, #8]

  return status;
}
240093c8:	4630      	mov	r0, r6
240093ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
240093cc:	2302      	movs	r3, #2
240093ce:	460d      	mov	r5, r1
240093d0:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
240093d2:	f7fb f9a5 	bl	24004720 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240093d6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
240093d8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240093da:	685a      	ldr	r2, [r3, #4]
240093dc:	07d2      	lsls	r2, r2, #31
240093de:	d412      	bmi.n	24009406 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240093e0:	f7fb f99e 	bl	24004720 <HAL_GetTick>
240093e4:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240093e6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240093e8:	2802      	cmp	r0, #2
240093ea:	d9f6      	bls.n	240093da <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
240093ec:	685a      	ldr	r2, [r3, #4]
240093ee:	f012 0201 	ands.w	r2, r2, #1
240093f2:	d1f2      	bne.n	240093da <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
240093f4:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240093f6:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
240093f8:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
240093fa:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240093fc:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
240093fe:	e7e3      	b.n	240093c8 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24009400:	2602      	movs	r6, #2
}
24009402:	4630      	mov	r0, r6
24009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
24009406:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
24009408:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400940a:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
2400940c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
2400940e:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24009410:	7262      	strb	r2, [r4, #9]
24009412:	e7d7      	b.n	240093c4 <HAL_RNG_GenerateRandomNumber+0x1c>

24009414 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009416:	4ba6      	ldr	r3, [pc, #664]	; (240096b0 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009418:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400941a:	6802      	ldr	r2, [r0, #0]
2400941c:	429a      	cmp	r2, r3
2400941e:	d01c      	beq.n	2400945a <HAL_SAI_Init.part.0+0x46>
24009420:	3320      	adds	r3, #32
24009422:	429a      	cmp	r2, r3
24009424:	d019      	beq.n	2400945a <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009426:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400942a:	429a      	cmp	r2, r3
2400942c:	d04d      	beq.n	240094ca <HAL_SAI_Init.part.0+0xb6>
2400942e:	3320      	adds	r3, #32
24009430:	429a      	cmp	r2, r3
24009432:	d04a      	beq.n	240094ca <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009434:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24009438:	429a      	cmp	r2, r3
2400943a:	f000 8134 	beq.w	240096a6 <HAL_SAI_Init.part.0+0x292>
2400943e:	3320      	adds	r3, #32
24009440:	429a      	cmp	r2, r3
24009442:	f000 8130 	beq.w	240096a6 <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
24009446:	4b9b      	ldr	r3, [pc, #620]	; (240096b4 <HAL_SAI_Init.part.0+0x2a0>)
24009448:	429a      	cmp	r2, r3
2400944a:	f000 812e 	beq.w	240096aa <HAL_SAI_Init.part.0+0x296>
2400944e:	3320      	adds	r3, #32
24009450:	429a      	cmp	r2, r3
24009452:	f000 812a 	beq.w	240096aa <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
24009456:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
24009458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400945a:	4e97      	ldr	r6, [pc, #604]	; (240096b8 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
2400945c:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24009460:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009464:	2b00      	cmp	r3, #0
24009466:	d037      	beq.n	240094d8 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009468:	4b94      	ldr	r3, [pc, #592]	; (240096bc <HAL_SAI_Init.part.0+0x2a8>)
2400946a:	4995      	ldr	r1, [pc, #596]	; (240096c0 <HAL_SAI_Init.part.0+0x2ac>)
2400946c:	681b      	ldr	r3, [r3, #0]
2400946e:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24009472:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009474:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009476:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400947a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400947c:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2400947e:	2b00      	cmp	r3, #0
24009480:	d031      	beq.n	240094e6 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009482:	6822      	ldr	r2, [r4, #0]
    count--;
24009484:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009486:	6815      	ldr	r5, [r2, #0]
24009488:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
2400948c:	d1f7      	bne.n	2400947e <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
2400948e:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
24009490:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
24009492:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
24009494:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24009498:	f000 8156 	beq.w	24009748 <HAL_SAI_Init.part.0+0x334>
2400949c:	4293      	cmp	r3, r2
2400949e:	bf19      	ittee	ne
240094a0:	4610      	movne	r0, r2
240094a2:	2103      	movne	r1, #3
240094a4:	2123      	moveq	r1, #35	; 0x23
240094a6:	2022      	moveq	r0, #34	; 0x22
240094a8:	bf15      	itete	ne
240094aa:	2701      	movne	r7, #1
240094ac:	2721      	moveq	r7, #33	; 0x21
240094ae:	2200      	movne	r2, #0
240094b0:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
240094b2:	68a3      	ldr	r3, [r4, #8]
240094b4:	3b01      	subs	r3, #1
240094b6:	2b04      	cmp	r3, #4
240094b8:	f200 8181 	bhi.w	240097be <HAL_SAI_Init.part.0+0x3aa>
240094bc:	e8df f013 	tbh	[pc, r3, lsl #1]
240094c0:	001c00e8 	.word	0x001c00e8
240094c4:	001b00ef 	.word	0x001b00ef
240094c8:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
240094ca:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
240094ce:	4e7d      	ldr	r6, [pc, #500]	; (240096c4 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
240094d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
240094d4:	2b00      	cmp	r3, #0
240094d6:	d1c7      	bne.n	24009468 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
240094d8:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
240094da:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
240094de:	f7fa fc9f 	bl	24003e20 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
240094e2:	6822      	ldr	r2, [r4, #0]
240094e4:	e7c0      	b.n	24009468 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240094e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
240094ea:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240094ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240094f0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
240094f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
240094f6:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
240094f8:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
240094fc:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
240094fe:	6a23      	ldr	r3, [r4, #32]
24009500:	2b00      	cmp	r3, #0
24009502:	d04a      	beq.n	2400959a <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009504:	6823      	ldr	r3, [r4, #0]
24009506:	4a6a      	ldr	r2, [pc, #424]	; (240096b0 <HAL_SAI_Init.part.0+0x29c>)
24009508:	4293      	cmp	r3, r2
2400950a:	f000 8131 	beq.w	24009770 <HAL_SAI_Init.part.0+0x35c>
2400950e:	486e      	ldr	r0, [pc, #440]	; (240096c8 <HAL_SAI_Init.part.0+0x2b4>)
24009510:	1a18      	subs	r0, r3, r0
24009512:	fab0 f080 	clz	r0, r0
24009516:	0940      	lsrs	r0, r0, #5
24009518:	2800      	cmp	r0, #0
2400951a:	f040 8129 	bne.w	24009770 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400951e:	4a6b      	ldr	r2, [pc, #428]	; (240096cc <HAL_SAI_Init.part.0+0x2b8>)
24009520:	4293      	cmp	r3, r2
24009522:	f000 8133 	beq.w	2400978c <HAL_SAI_Init.part.0+0x378>
24009526:	3220      	adds	r2, #32
24009528:	4293      	cmp	r3, r2
2400952a:	f000 812f 	beq.w	2400978c <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400952e:	4a68      	ldr	r2, [pc, #416]	; (240096d0 <HAL_SAI_Init.part.0+0x2bc>)
24009530:	4293      	cmp	r3, r2
24009532:	f000 8124 	beq.w	2400977e <HAL_SAI_Init.part.0+0x36a>
24009536:	3220      	adds	r2, #32
24009538:	4293      	cmp	r3, r2
2400953a:	f000 8120 	beq.w	2400977e <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
2400953e:	4a5d      	ldr	r2, [pc, #372]	; (240096b4 <HAL_SAI_Init.part.0+0x2a0>)
24009540:	4293      	cmp	r3, r2
24009542:	f000 8133 	beq.w	240097ac <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
24009546:	4a63      	ldr	r2, [pc, #396]	; (240096d4 <HAL_SAI_Init.part.0+0x2c0>)
24009548:	4293      	cmp	r3, r2
2400954a:	f000 8129 	beq.w	240097a0 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2400954e:	69a3      	ldr	r3, [r4, #24]
24009550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009554:	f000 80fd 	beq.w	24009752 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009558:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2400955a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2400955e:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009560:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009564:	ea4f 0340 	mov.w	r3, r0, lsl #1
24009568:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2400956a:	bf0c      	ite	eq
2400956c:	2202      	moveq	r2, #2
2400956e:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009570:	fb00 f202 	mul.w	r2, r0, r2
24009574:	0212      	lsls	r2, r2, #8
24009576:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
2400957a:	4a57      	ldr	r2, [pc, #348]	; (240096d8 <HAL_SAI_Init.part.0+0x2c4>)
2400957c:	fba2 0203 	umull	r0, r2, r2, r3
24009580:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009582:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24009586:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
2400958a:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
2400958c:	bf08      	it	eq
2400958e:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009590:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009592:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009594:	d101      	bne.n	2400959a <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009596:	0852      	lsrs	r2, r2, #1
24009598:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400959a:	6863      	ldr	r3, [r4, #4]
2400959c:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
240095a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240095a2:	f040 80cc 	bne.w	2400973e <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
240095a6:	2b01      	cmp	r3, #1
240095a8:	bf14      	ite	ne
240095aa:	f44f 7500 	movne.w	r5, #512	; 0x200
240095ae:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
240095b0:	f7fb f8ce 	bl	24004750 <HAL_GetREVID>
240095b4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240095b8:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
240095ba:	f0c0 80ac 	bcc.w	24009716 <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240095be:	6811      	ldr	r1, [r2, #0]
240095c0:	4b46      	ldr	r3, [pc, #280]	; (240096dc <HAL_SAI_Init.part.0+0x2c8>)
240095c2:	400b      	ands	r3, r1
240095c4:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240095c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
240095c8:	e9d4 1300 	ldrd	r1, r3, [r4]
240095cc:	431a      	orrs	r2, r3
240095ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
240095d0:	431a      	orrs	r2, r3
240095d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
240095d4:	431a      	orrs	r2, r3
240095d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240095d8:	431a      	orrs	r2, r3
240095da:	6963      	ldr	r3, [r4, #20]
240095dc:	431a      	orrs	r2, r3
240095de:	69a3      	ldr	r3, [r4, #24]
240095e0:	431a      	orrs	r2, r3
240095e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240095e4:	431a      	orrs	r2, r3
240095e6:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240095e8:	431a      	orrs	r2, r3
240095ea:	680b      	ldr	r3, [r1, #0]
240095ec:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240095ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240095f0:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
240095f4:	4b3a      	ldr	r3, [pc, #232]	; (240096e0 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240095f6:	433a      	orrs	r2, r7
240095f8:	432a      	orrs	r2, r5
240095fa:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
240095fc:	6822      	ldr	r2, [r4, #0]
240095fe:	6851      	ldr	r1, [r2, #4]
24009600:	400b      	ands	r3, r1
24009602:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009604:	6b21      	ldr	r1, [r4, #48]	; 0x30
24009606:	69e3      	ldr	r3, [r4, #28]
24009608:	6822      	ldr	r2, [r4, #0]
2400960a:	430b      	orrs	r3, r1
2400960c:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400960e:	430b      	orrs	r3, r1
24009610:	6851      	ldr	r1, [r2, #4]
24009612:	430b      	orrs	r3, r1
24009614:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24009616:	6822      	ldr	r2, [r4, #0]
24009618:	4b32      	ldr	r3, [pc, #200]	; (240096e4 <HAL_SAI_Init.part.0+0x2d0>)
2400961a:	6891      	ldr	r1, [r2, #8]
2400961c:	400b      	ands	r3, r1
2400961e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009620:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24009622:	6e63      	ldr	r3, [r4, #100]	; 0x64
24009624:	6821      	ldr	r1, [r4, #0]
24009626:	4313      	orrs	r3, r2
24009628:	6e22      	ldr	r2, [r4, #96]	; 0x60
2400962a:	6888      	ldr	r0, [r1, #8]
2400962c:	4313      	orrs	r3, r2
2400962e:	6d62      	ldr	r2, [r4, #84]	; 0x54
24009630:	4303      	orrs	r3, r0
24009632:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009634:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009638:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2400963a:	6da2      	ldr	r2, [r4, #88]	; 0x58
2400963c:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400963e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
24009642:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009644:	6822      	ldr	r2, [r4, #0]
24009646:	68d3      	ldr	r3, [r2, #12]
24009648:	4003      	ands	r3, r0
2400964a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400964c:	6821      	ldr	r1, [r4, #0]
2400964e:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
24009652:	68ca      	ldr	r2, [r1, #12]
24009654:	4303      	orrs	r3, r0
24009656:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009658:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2400965a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2400965e:	6f22      	ldr	r2, [r4, #112]	; 0x70
24009660:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009662:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009666:	4a12      	ldr	r2, [pc, #72]	; (240096b0 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009668:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
2400966a:	6823      	ldr	r3, [r4, #0]
2400966c:	4293      	cmp	r3, r2
2400966e:	d03f      	beq.n	240096f0 <HAL_SAI_Init.part.0+0x2dc>
24009670:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009674:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009678:	4293      	cmp	r3, r2
2400967a:	d039      	beq.n	240096f0 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400967c:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400967e:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009680:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
24009684:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
24009686:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
2400968a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400968e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
24009690:	f44f 6780 	mov.w	r7, #1024	; 0x400
24009694:	e732      	b.n	240094fc <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24009696:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009698:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
2400969c:	e72e      	b.n	240094fc <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400969e:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
240096a0:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
240096a4:	e72a      	b.n	240094fc <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
240096a6:	4e10      	ldr	r6, [pc, #64]	; (240096e8 <HAL_SAI_Init.part.0+0x2d4>)
240096a8:	e6d8      	b.n	2400945c <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
240096aa:	4e10      	ldr	r6, [pc, #64]	; (240096ec <HAL_SAI_Init.part.0+0x2d8>)
240096ac:	e6d6      	b.n	2400945c <HAL_SAI_Init.part.0+0x48>
240096ae:	bf00      	nop
240096b0:	40015804 	.word	0x40015804
240096b4:	58005404 	.word	0x58005404
240096b8:	40015800 	.word	0x40015800
240096bc:	200006e0 	.word	0x200006e0
240096c0:	95cbec1b 	.word	0x95cbec1b
240096c4:	40015c00 	.word	0x40015c00
240096c8:	40015824 	.word	0x40015824
240096cc:	40015c04 	.word	0x40015c04
240096d0:	40016004 	.word	0x40016004
240096d4:	58005424 	.word	0x58005424
240096d8:	cccccccd 	.word	0xcccccccd
240096dc:	f005c010 	.word	0xf005c010
240096e0:	ffff1ff0 	.word	0xffff1ff0
240096e4:	fff88000 	.word	0xfff88000
240096e8:	40016000 	.word	0x40016000
240096ec:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
240096f0:	6c73      	ldr	r3, [r6, #68]	; 0x44
240096f2:	f023 0301 	bic.w	r3, r3, #1
240096f6:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
240096f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
240096fc:	2b01      	cmp	r3, #1
240096fe:	d1bd      	bne.n	2400967c <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009700:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
24009704:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009706:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400970a:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400970c:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400970e:	f043 0301 	orr.w	r3, r3, #1
24009712:	6473      	str	r3, [r6, #68]	; 0x44
24009714:	e7b2      	b.n	2400967c <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009716:	6811      	ldr	r1, [r2, #0]
24009718:	4b2a      	ldr	r3, [pc, #168]	; (240097c4 <HAL_SAI_Init.part.0+0x3b0>)
2400971a:	400b      	ands	r3, r1
2400971c:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400971e:	6c62      	ldr	r2, [r4, #68]	; 0x44
24009720:	e9d4 1300 	ldrd	r1, r3, [r4]
24009724:	431a      	orrs	r2, r3
24009726:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24009728:	431a      	orrs	r2, r3
2400972a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
2400972c:	431a      	orrs	r2, r3
2400972e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24009730:	431a      	orrs	r2, r3
24009732:	6963      	ldr	r3, [r4, #20]
24009734:	431a      	orrs	r2, r3
24009736:	69a3      	ldr	r3, [r4, #24]
24009738:	431a      	orrs	r2, r3
2400973a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400973c:	e754      	b.n	240095e8 <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400973e:	2b01      	cmp	r3, #1
24009740:	bf08      	it	eq
24009742:	f44f 7500 	moveq.w	r5, #512	; 0x200
24009746:	e733      	b.n	240095b0 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
24009748:	2113      	movs	r1, #19
2400974a:	2012      	movs	r0, #18
2400974c:	2711      	movs	r7, #17
2400974e:	2210      	movs	r2, #16
24009750:	e6af      	b.n	240094b2 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009752:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009754:	2904      	cmp	r1, #4
24009756:	d030      	beq.n	240097ba <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
24009758:	2908      	cmp	r1, #8
2400975a:	d01e      	beq.n	2400979a <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
2400975c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2400975e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
24009762:	0043      	lsls	r3, r0, #1
24009764:	6a20      	ldr	r0, [r4, #32]
24009766:	fb00 f202 	mul.w	r2, r0, r2
2400976a:	fbb3 f3f2 	udiv	r3, r3, r2
2400976e:	e704      	b.n	2400957a <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24009770:	f44f 7080 	mov.w	r0, #256	; 0x100
24009774:	2100      	movs	r1, #0
24009776:	f7ff fc0d 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400977a:	6823      	ldr	r3, [r4, #0]
2400977c:	e6cf      	b.n	2400951e <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
2400977e:	f44f 7000 	mov.w	r0, #512	; 0x200
24009782:	2100      	movs	r1, #0
24009784:	f7ff fc06 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
24009788:	6823      	ldr	r3, [r4, #0]
2400978a:	e6d8      	b.n	2400953e <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
2400978c:	f44f 7000 	mov.w	r0, #512	; 0x200
24009790:	2100      	movs	r1, #0
24009792:	f7ff fbff 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009796:	6823      	ldr	r3, [r4, #0]
24009798:	e6c9      	b.n	2400952e <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400979a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400979e:	e7de      	b.n	2400975e <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
240097a0:	2100      	movs	r1, #0
240097a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
240097a6:	f7ff fbf5 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
240097aa:	e6d0      	b.n	2400954e <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
240097ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
240097b0:	2100      	movs	r1, #0
240097b2:	f7ff fbef 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
240097b6:	6823      	ldr	r3, [r4, #0]
240097b8:	e6c5      	b.n	24009546 <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
240097ba:	2240      	movs	r2, #64	; 0x40
240097bc:	e7cf      	b.n	2400975e <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
240097be:	2700      	movs	r7, #0
240097c0:	e69c      	b.n	240094fc <HAL_SAI_Init.part.0+0xe8>
240097c2:	bf00      	nop
240097c4:	f805c010 	.word	0xf805c010

240097c8 <HAL_SAI_InitProtocol>:
  switch (protocol)
240097c8:	2902      	cmp	r1, #2
{
240097ca:	b538      	push	{r3, r4, r5, lr}
240097cc:	4604      	mov	r4, r0
  switch (protocol)
240097ce:	d935      	bls.n	2400983c <HAL_SAI_InitProtocol+0x74>
240097d0:	1ec8      	subs	r0, r1, #3
240097d2:	2801      	cmp	r0, #1
240097d4:	d830      	bhi.n	24009838 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240097d6:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
240097d8:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240097da:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
240097dc:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
240097de:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
240097e0:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
240097e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
240097e6:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240097e8:	6860      	ldr	r0, [r4, #4]
240097ea:	f030 0002 	bics.w	r0, r0, #2
240097ee:	bf0c      	ite	eq
240097f0:	2501      	moveq	r5, #1
240097f2:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
240097f4:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
240097f6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
240097fa:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
240097fc:	bf0c      	ite	eq
240097fe:	2001      	moveq	r0, #1
24009800:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009802:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24009804:	f44f 2180 	mov.w	r1, #262144	; 0x40000
24009808:	65a0      	str	r0, [r4, #88]	; 0x58
2400980a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
2400980c:	2a03      	cmp	r2, #3
2400980e:	d813      	bhi.n	24009838 <HAL_SAI_InitProtocol+0x70>
24009810:	e8df f002 	tbb	[pc, r2]
24009814:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24009818:	6823      	ldr	r3, [r4, #0]
2400981a:	4a47      	ldr	r2, [pc, #284]	; (24009938 <HAL_SAI_InitProtocol+0x170>)
2400981c:	4293      	cmp	r3, r2
2400981e:	d005      	beq.n	2400982c <HAL_SAI_InitProtocol+0x64>
24009820:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009824:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009828:	4293      	cmp	r3, r2
2400982a:	d105      	bne.n	24009838 <HAL_SAI_InitProtocol+0x70>
2400982c:	6863      	ldr	r3, [r4, #4]
2400982e:	2b01      	cmp	r3, #1
24009830:	d102      	bne.n	24009838 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24009832:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009834:	2b00      	cmp	r3, #0
24009836:	d037      	beq.n	240098a8 <HAL_SAI_InitProtocol+0xe0>
}
24009838:	2001      	movs	r0, #1
2400983a:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400983c:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400983e:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009840:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009842:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
24009844:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009846:	6860      	ldr	r0, [r4, #4]
24009848:	f030 0002 	bics.w	r0, r0, #2
2400984c:	bf14      	ite	ne
2400984e:	2001      	movne	r0, #1
24009850:	2000      	moveq	r0, #0
24009852:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
24009854:	f44f 3080 	mov.w	r0, #65536	; 0x10000
24009858:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400985a:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400985e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
24009860:	f013 0001 	ands.w	r0, r3, #1
24009864:	d1e8      	bne.n	24009838 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
24009866:	b949      	cbnz	r1, 2400987c <HAL_SAI_InitProtocol+0xb4>
24009868:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400986c:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
24009870:	2a03      	cmp	r2, #3
24009872:	d8e1      	bhi.n	24009838 <HAL_SAI_InitProtocol+0x70>
24009874:	e8df f002 	tbb	[pc, r2]
24009878:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2400987c:	6660      	str	r0, [r4, #100]	; 0x64
2400987e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
24009882:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
24009884:	2a03      	cmp	r2, #3
24009886:	d8d7      	bhi.n	24009838 <HAL_SAI_InitProtocol+0x70>
24009888:	e8df f002 	tbb	[pc, r2]
2400988c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009890:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009892:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009894:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009896:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009898:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400989a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
2400989c:	f7fa ff58 	bl	24004750 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
240098a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
240098a4:	2b01      	cmp	r3, #1
240098a6:	d0b7      	beq.n	24009818 <HAL_SAI_InitProtocol+0x50>
240098a8:	4620      	mov	r0, r4
}
240098aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240098ae:	f7ff bdb1 	b.w	24009414 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098b2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
240098b4:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098b6:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
240098b8:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098ba:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
240098bc:	e7ee      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
240098be:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
240098c0:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098c2:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
240098c4:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
240098c6:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098c8:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
240098ca:	e7e7      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
240098cc:	21e0      	movs	r1, #224	; 0xe0
240098ce:	e7f7      	b.n	240098c0 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098d0:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
240098d2:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098d4:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098d6:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
240098d8:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098da:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098dc:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098de:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098e2:	e7db      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098e4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
240098e6:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098e8:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098ea:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098ec:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
240098f0:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098f2:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
240098f6:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
240098f8:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
240098fa:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240098fc:	d1ce      	bne.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
240098fe:	2308      	movs	r3, #8
24009900:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009902:	e7cb      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009904:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009906:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009908:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400990a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400990e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009910:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009914:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009916:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400991a:	d1bf      	bne.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
2400991c:	2310      	movs	r3, #16
2400991e:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009920:	e7bc      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009922:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009924:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009926:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009928:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400992a:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400992c:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400992e:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009930:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009934:	e7b2      	b.n	2400989c <HAL_SAI_InitProtocol+0xd4>
24009936:	bf00      	nop
24009938:	40015804 	.word	0x40015804

2400993c <HAL_SAI_Transmit_DMA>:
{
2400993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24009940:	460f      	mov	r7, r1
24009942:	4604      	mov	r4, r0
24009944:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
24009946:	f7fa feeb 	bl	24004720 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
2400994a:	2f00      	cmp	r7, #0
2400994c:	d06b      	beq.n	24009a26 <HAL_SAI_Transmit_DMA+0xea>
2400994e:	fab5 f885 	clz	r8, r5
24009952:	ea4f 1858 	mov.w	r8, r8, lsr #5
24009956:	2d00      	cmp	r5, #0
24009958:	d065      	beq.n	24009a26 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
2400995a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
2400995e:	2b01      	cmp	r3, #1
24009960:	fa5f f983 	uxtb.w	r9, r3
24009964:	d15a      	bne.n	24009a1c <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
24009966:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
2400996a:	2b01      	cmp	r3, #1
2400996c:	d056      	beq.n	24009a1c <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
2400996e:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009970:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009974:	4a3c      	ldr	r2, [pc, #240]	; (24009a68 <HAL_SAI_Transmit_DMA+0x12c>)
24009976:	4606      	mov	r6, r0
    hsai->XferSize = Size;
24009978:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
2400997c:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
2400997e:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
24009982:	f365 431f 	bfi	r3, r5, #16, #16
24009986:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009988:	2312      	movs	r3, #18
2400998a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2400998e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009992:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009994:	4a35      	ldr	r2, [pc, #212]	; (24009a6c <HAL_SAI_Transmit_DMA+0x130>)
24009996:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400999a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2400999c:	4a34      	ldr	r2, [pc, #208]	; (24009a70 <HAL_SAI_Transmit_DMA+0x134>)
2400999e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
240099a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
240099a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
240099a8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240099ac:	6822      	ldr	r2, [r4, #0]
240099ae:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
240099b2:	321c      	adds	r2, #28
240099b4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240099b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
240099ba:	f7fb facf 	bl	24004f5c <HAL_DMA_Start_IT>
240099be:	2800      	cmp	r0, #0
240099c0:	d13f      	bne.n	24009a42 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240099c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
240099c4:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240099c6:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240099c8:	d032      	beq.n	24009a30 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240099ca:	2205      	movs	r2, #5
240099cc:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240099ce:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
240099d0:	2b01      	cmp	r3, #1
240099d2:	bf98      	it	ls
240099d4:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240099d6:	6821      	ldr	r1, [r4, #0]
240099d8:	690b      	ldr	r3, [r1, #16]
240099da:	4313      	orrs	r3, r2
240099dc:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
240099de:	6822      	ldr	r2, [r4, #0]
240099e0:	6813      	ldr	r3, [r2, #0]
240099e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240099e6:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
240099e8:	e005      	b.n	240099f6 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
240099ea:	f7fa fe99 	bl	24004720 <HAL_GetTick>
240099ee:	1b83      	subs	r3, r0, r6
240099f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240099f4:	d82a      	bhi.n	24009a4c <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
240099f6:	6822      	ldr	r2, [r4, #0]
240099f8:	6955      	ldr	r5, [r2, #20]
240099fa:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
240099fe:	d0f4      	beq.n	240099ea <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009a00:	6813      	ldr	r3, [r2, #0]
24009a02:	03db      	lsls	r3, r3, #15
24009a04:	d403      	bmi.n	24009a0e <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
24009a06:	6813      	ldr	r3, [r2, #0]
24009a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009a0c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
24009a0e:	2300      	movs	r3, #0
    return HAL_OK;
24009a10:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
24009a12:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009a16:	4648      	mov	r0, r9
24009a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
24009a1c:	f04f 0902 	mov.w	r9, #2
}
24009a20:	4648      	mov	r0, r9
24009a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
24009a26:	f04f 0901 	mov.w	r9, #1
}
24009a2a:	4648      	mov	r0, r9
24009a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a30:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009a34:	2a01      	cmp	r2, #1
24009a36:	bf0b      	itete	eq
24009a38:	2215      	moveq	r2, #21
24009a3a:	2205      	movne	r2, #5
24009a3c:	2171      	moveq	r1, #113	; 0x71
24009a3e:	2161      	movne	r1, #97	; 0x61
24009a40:	e7c5      	b.n	240099ce <HAL_SAI_Transmit_DMA+0x92>
}
24009a42:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
24009a44:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
24009a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009a4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
24009a50:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
24009a54:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
24009a5c:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009a5e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24009a66:	bf00      	nop
24009a68:	24009bc1 	.word	0x24009bc1
24009a6c:	24009b5d 	.word	0x24009b5d
24009a70:	24009c45 	.word	0x24009c45

24009a74 <HAL_SAI_Receive_DMA>:
{
24009a74:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
24009a76:	2900      	cmp	r1, #0
24009a78:	d059      	beq.n	24009b2e <HAL_SAI_Receive_DMA+0xba>
24009a7a:	fab2 f582 	clz	r5, r2
24009a7e:	096d      	lsrs	r5, r5, #5
24009a80:	2a00      	cmp	r2, #0
24009a82:	d054      	beq.n	24009b2e <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
24009a84:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
24009a88:	4604      	mov	r4, r0
24009a8a:	2b01      	cmp	r3, #1
24009a8c:	b2de      	uxtb	r6, r3
24009a8e:	d14b      	bne.n	24009b28 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
24009a90:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
24009a94:	2b01      	cmp	r3, #1
24009a96:	d047      	beq.n	24009b28 <HAL_SAI_Receive_DMA+0xb4>
    hsai->XferSize = Size;
24009a98:	462b      	mov	r3, r5
    hsai->pBuffPtr = pData;
24009a9a:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009a9c:	2122      	movs	r1, #34	; 0x22
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009a9e:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
24009aa2:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
24009aa6:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009aaa:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
24009aae:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009ab2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    hsai->XferSize = Size;
24009ab6:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009ab8:	4b25      	ldr	r3, [pc, #148]	; (24009b50 <HAL_SAI_Receive_DMA+0xdc>)
24009aba:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009abc:	4a25      	ldr	r2, [pc, #148]	; (24009b54 <HAL_SAI_Receive_DMA+0xe0>)
24009abe:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009ac4:	4a24      	ldr	r2, [pc, #144]	; (24009b58 <HAL_SAI_Receive_DMA+0xe4>)
24009ac6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009aca:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009acc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009ad0:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
24009ad2:	6801      	ldr	r1, [r0, #0]
24009ad4:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
24009ad8:	6f82      	ldr	r2, [r0, #120]	; 0x78
24009ada:	311c      	adds	r1, #28
24009adc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
24009ae0:	f7fb fa3c 	bl	24004f5c <HAL_DMA_Start_IT>
24009ae4:	bb30      	cbnz	r0, 24009b34 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009ae6:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009ae8:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009aea:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009aec:	d026      	beq.n	24009b3c <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009aee:	2205      	movs	r2, #5
24009af0:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009af2:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009af4:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009af6:	2b01      	cmp	r3, #1
24009af8:	bf98      	it	ls
24009afa:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009afc:	690b      	ldr	r3, [r1, #16]
24009afe:	4313      	orrs	r3, r2
24009b00:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009b02:	6822      	ldr	r2, [r4, #0]
24009b04:	6813      	ldr	r3, [r2, #0]
24009b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009b0a:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009b0c:	6823      	ldr	r3, [r4, #0]
24009b0e:	681a      	ldr	r2, [r3, #0]
24009b10:	03d2      	lsls	r2, r2, #15
24009b12:	d403      	bmi.n	24009b1c <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
24009b14:	681a      	ldr	r2, [r3, #0]
24009b16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24009b1a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
24009b1c:	2300      	movs	r3, #0
    return HAL_OK;
24009b1e:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
24009b20:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009b24:	4630      	mov	r0, r6
24009b26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
24009b28:	2602      	movs	r6, #2
}
24009b2a:	4630      	mov	r0, r6
24009b2c:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
24009b2e:	2601      	movs	r6, #1
}
24009b30:	4630      	mov	r0, r6
24009b32:	bd70      	pop	{r4, r5, r6, pc}
24009b34:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
24009b36:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
24009b3a:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b3c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b40:	2a01      	cmp	r2, #1
24009b42:	bf0b      	itete	eq
24009b44:	2215      	moveq	r2, #21
24009b46:	2205      	movne	r2, #5
24009b48:	2071      	moveq	r0, #113	; 0x71
24009b4a:	2061      	movne	r0, #97	; 0x61
24009b4c:	e7d1      	b.n	24009af2 <HAL_SAI_Receive_DMA+0x7e>
24009b4e:	bf00      	nop
24009b50:	24009c39 	.word	0x24009c39
24009b54:	24009bd1 	.word	0x24009bd1
24009b58:	24009c45 	.word	0x24009c45

24009b5c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24009b5c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009b5e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009b60:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009b66:	d01b      	beq.n	24009ba0 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b68:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009b6a:	2300      	movs	r3, #0
24009b6c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009b70:	6813      	ldr	r3, [r2, #0]
24009b72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009b76:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b78:	6c43      	ldr	r3, [r0, #68]	; 0x44
24009b7a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b7c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b7e:	d012      	beq.n	24009ba6 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b80:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009b84:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b88:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009b8a:	3b02      	subs	r3, #2
24009b8c:	2b01      	cmp	r3, #1
24009b8e:	bf98      	it	ls
24009b90:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b92:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009b94:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b98:	4013      	ands	r3, r2
24009b9a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009b9c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24009ba0:	f023 fdbe 	bl	2402d720 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
24009ba4:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009ba6:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009baa:	2a01      	cmp	r2, #1
24009bac:	bf0b      	itete	eq
24009bae:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009bb2:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009bb6:	f06f 0215 	mvneq.w	r2, #21
24009bba:	f06f 0205 	mvnne.w	r2, #5
24009bbe:	e7e3      	b.n	24009b88 <SAI_DMATxCplt+0x2c>

24009bc0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009bc0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24009bc2:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009bc4:	f023 fdd0 	bl	2402d768 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
24009bc8:	bd08      	pop	{r3, pc}
24009bca:	bf00      	nop

24009bcc <HAL_SAI_RxCpltCallback>:
24009bcc:	4770      	bx	lr
24009bce:	bf00      	nop

24009bd0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
24009bd0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009bd2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009bd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009bda:	d01b      	beq.n	24009c14 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009bdc:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009bde:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009be0:	6813      	ldr	r3, [r2, #0]
24009be2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009be6:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009be8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
24009bea:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009bee:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009bf0:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009bf2:	d012      	beq.n	24009c1a <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009bf4:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009bf8:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009bfc:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009bfe:	3b02      	subs	r3, #2
24009c00:	2b01      	cmp	r3, #1
24009c02:	bf98      	it	ls
24009c04:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c06:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009c08:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c0c:	4013      	ands	r3, r2
24009c0e:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009c10:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24009c14:	f7ff ffda 	bl	24009bcc <HAL_SAI_RxCpltCallback>
#endif
}
24009c18:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009c1a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c1e:	2a01      	cmp	r2, #1
24009c20:	bf0b      	itete	eq
24009c22:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009c26:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009c2a:	f06f 0215 	mvneq.w	r2, #21
24009c2e:	f06f 0205 	mvnne.w	r2, #5
24009c32:	e7e3      	b.n	24009bfc <SAI_DMARxCplt+0x2c>

24009c34 <HAL_SAI_RxHalfCpltCallback>:
24009c34:	4770      	bx	lr
24009c36:	bf00      	nop

24009c38 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009c38:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
24009c3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009c3c:	f7ff fffa 	bl	24009c34 <HAL_SAI_RxHalfCpltCallback>
#endif
}
24009c40:	bd08      	pop	{r3, pc}
24009c42:	bf00      	nop

24009c44 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24009c44:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009c46:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24009c48:	f7fc f9ec 	bl	24006024 <HAL_DMA_GetError>
24009c4c:	2802      	cmp	r0, #2
24009c4e:	d025      	beq.n	24009c9c <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009c50:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009c54:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c5a:	4b14      	ldr	r3, [pc, #80]	; (24009cac <SAI_DMAError+0x68>)
24009c5c:	4814      	ldr	r0, [pc, #80]	; (24009cb0 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009c5e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009c62:	680a      	ldr	r2, [r1, #0]
24009c64:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24009c68:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c6a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
24009c6c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c6e:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
24009c72:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c74:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009c76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009c7a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009c7c:	600a      	str	r2, [r1, #0]
    if (count == 0U)
24009c7e:	b173      	cbz	r3, 24009c9e <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009c80:	6822      	ldr	r2, [r4, #0]
    count--;
24009c82:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009c84:	6812      	ldr	r2, [r2, #0]
24009c86:	03d2      	lsls	r2, r2, #15
24009c88:	d4f9      	bmi.n	24009c7e <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
24009c8a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
24009c8c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
24009c8e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
24009c90:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
24009c94:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
24009c98:	f023 fd46 	bl	2402d728 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
24009c9c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009c9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
24009ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009ca6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
24009caa:	e7ee      	b.n	24009c8a <SAI_DMAError+0x46>
24009cac:	200006e0 	.word	0x200006e0
24009cb0:	95cbec1b 	.word	0x95cbec1b

24009cb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
24009cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24009cb8:	4605      	mov	r5, r0
24009cba:	b086      	sub	sp, #24
24009cbc:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
24009cbe:	f7fa fd2f 	bl	24004720 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009cc2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
24009cc4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009cc6:	6828      	ldr	r0, [r5, #0]
24009cc8:	f001 fd38 	bl	2400b73c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009ccc:	4604      	mov	r4, r0
24009cce:	b118      	cbz	r0, 24009cd8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
24009cd0:	4620      	mov	r0, r4
24009cd2:	b006      	add	sp, #24
24009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
24009cd8:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009cda:	6828      	ldr	r0, [r5, #0]
24009cdc:	0409      	lsls	r1, r1, #16
24009cde:	f002 fa87 	bl	2400c1f0 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009ce2:	4604      	mov	r4, r0
24009ce4:	2800      	cmp	r0, #0
24009ce6:	d1f3      	bne.n	24009cd0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009cec:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009cee:	4669      	mov	r1, sp
24009cf0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009cf2:	e9cd 2300 	strd	r2, r3, [sp]
24009cf6:	2230      	movs	r2, #48	; 0x30
24009cf8:	2302      	movs	r3, #2
24009cfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
24009cfe:	2200      	movs	r2, #0
24009d00:	2301      	movs	r3, #1
24009d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009d06:	f001 fd03 	bl	2400b710 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
24009d0a:	6828      	ldr	r0, [r5, #0]
24009d0c:	f002 fbf6 	bl	2400c4fc <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d10:	4604      	mov	r4, r0
24009d12:	2800      	cmp	r0, #0
24009d14:	d1dc      	bne.n	24009cd0 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
24009d16:	4682      	mov	sl, r0
24009d18:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009d1a:	f240 582a 	movw	r8, #1322	; 0x52a
24009d1e:	e004      	b.n	24009d2a <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009d20:	f7fa fcfe 	bl	24004720 <HAL_GetTick>
24009d24:	1b83      	subs	r3, r0, r6
24009d26:	3301      	adds	r3, #1
24009d28:	d024      	beq.n	24009d74 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009d2a:	6828      	ldr	r0, [r5, #0]
24009d2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009d2e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009d34:	d10c      	bne.n	24009d50 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009d36:	0319      	lsls	r1, r3, #12
24009d38:	d4f2      	bmi.n	24009d20 <SD_FindSCR+0x6c>
24009d3a:	2c00      	cmp	r4, #0
24009d3c:	d1f0      	bne.n	24009d20 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
24009d3e:	f001 fccd 	bl	2400b6dc <SDMMC_ReadFIFO>
24009d42:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009d44:	6828      	ldr	r0, [r5, #0]
      index++;
24009d46:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009d48:	f001 fcc8 	bl	2400b6dc <SDMMC_ReadFIFO>
24009d4c:	4682      	mov	sl, r0
      index++;
24009d4e:	e7e7      	b.n	24009d20 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009d50:	071a      	lsls	r2, r3, #28
24009d52:	d416      	bmi.n	24009d82 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009d54:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009d56:	079b      	lsls	r3, r3, #30
24009d58:	d40f      	bmi.n	24009d7a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009d5a:	6b44      	ldr	r4, [r0, #52]	; 0x34
24009d5c:	f014 0420 	ands.w	r4, r4, #32
24009d60:	d113      	bne.n	24009d8a <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009d62:	fa9a f28a 	rev.w	r2, sl
24009d66:	fa99 f389 	rev.w	r3, r9
24009d6a:	490a      	ldr	r1, [pc, #40]	; (24009d94 <SD_FindSCR+0xe0>)
24009d6c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
24009d6e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
24009d72:	e7ad      	b.n	24009cd0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
24009d74:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
24009d78:	e7aa      	b.n	24009cd0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009d7a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009d7c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009d7e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009d80:	e7a6      	b.n	24009cd0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009d82:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009d84:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009d86:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009d88:	e7a2      	b.n	24009cd0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009d8a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
24009d8c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009d8e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
24009d90:	e79e      	b.n	24009cd0 <SD_FindSCR+0x1c>
24009d92:	bf00      	nop
24009d94:	18000f3a 	.word	0x18000f3a

24009d98 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
24009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24009d9c:	4604      	mov	r4, r0
24009d9e:	b096      	sub	sp, #88	; 0x58
24009da0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
24009da2:	f7fa fcbd 	bl	24004720 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009da6:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
24009da8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009daa:	6820      	ldr	r0, [r4, #0]
24009dac:	f001 fcac 	bl	2400b708 <SDMMC_GetResponse>
24009db0:	0182      	lsls	r2, r0, #6
24009db2:	d45c      	bmi.n	24009e6e <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
24009db4:	2140      	movs	r1, #64	; 0x40
24009db6:	6820      	ldr	r0, [r4, #0]
24009db8:	f001 fcc0 	bl	2400b73c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009dbc:	4603      	mov	r3, r0
24009dbe:	b1e8      	cbz	r0, 24009dfc <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
24009dc0:	6b62      	ldr	r2, [r4, #52]	; 0x34
24009dc2:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009dc4:	6820      	ldr	r0, [r4, #0]
24009dc6:	4956      	ldr	r1, [pc, #344]	; (24009f20 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
24009dc8:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009dca:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
24009dcc:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
24009dce:	6b60      	ldr	r0, [r4, #52]	; 0x34
24009dd0:	4303      	orrs	r3, r0
24009dd2:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009dd4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24009dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
24009ddc:	6820      	ldr	r0, [r4, #0]
24009dde:	f001 fcad 	bl	2400b73c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009de2:	b138      	cbz	r0, 24009df4 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
24009de4:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009de6:	6822      	ldr	r2, [r4, #0]
24009de8:	494d      	ldr	r1, [pc, #308]	; (24009f20 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
24009dea:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009dec:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
24009dee:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009df0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
24009df4:	4630      	mov	r0, r6
24009df6:	b016      	add	sp, #88	; 0x58
24009df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009dfc:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009dfe:	6820      	ldr	r0, [r4, #0]
24009e00:	0409      	lsls	r1, r1, #16
24009e02:	f002 f9f5 	bl	2400c1f0 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009e06:	4603      	mov	r3, r0
24009e08:	2800      	cmp	r0, #0
24009e0a:	d1d9      	bne.n	24009dc0 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009e10:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009e12:	4669      	mov	r1, sp
24009e14:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009e16:	e9cd 2300 	strd	r2, r3, [sp]
24009e1a:	2260      	movs	r2, #96	; 0x60
24009e1c:	2302      	movs	r3, #2
24009e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
24009e22:	2301      	movs	r3, #1
24009e24:	2200      	movs	r2, #0
24009e26:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009e2a:	f001 fc71 	bl	2400b710 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
24009e2e:	6820      	ldr	r0, [r4, #0]
24009e30:	f002 fd88 	bl	2400c944 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
24009e34:	4603      	mov	r3, r0
24009e36:	2800      	cmp	r0, #0
24009e38:	d1c2      	bne.n	24009dc0 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
24009e3a:	ae06      	add	r6, sp, #24
24009e3c:	e004      	b.n	24009e48 <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009e3e:	f7fa fc6f 	bl	24004720 <HAL_GetTick>
24009e42:	1bc0      	subs	r0, r0, r7
24009e44:	3001      	adds	r0, #1
24009e46:	d016      	beq.n	24009e76 <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009e48:	6820      	ldr	r0, [r4, #0]
24009e4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e4c:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009e50:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009e52:	d113      	bne.n	24009e7c <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009e54:	041b      	lsls	r3, r3, #16
24009e56:	d5f2      	bpl.n	24009e3e <HAL_SD_GetCardStatus.part.0+0xa6>
24009e58:	f106 0820 	add.w	r8, r6, #32
24009e5c:	e000      	b.n	24009e60 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
24009e5e:	6820      	ldr	r0, [r4, #0]
24009e60:	f001 fc3c 	bl	2400b6dc <SDMMC_ReadFIFO>
24009e64:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
24009e68:	4546      	cmp	r6, r8
24009e6a:	d1f8      	bne.n	24009e5e <HAL_SD_GetCardStatus.part.0+0xc6>
24009e6c:	e7e7      	b.n	24009e3e <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009e6e:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
24009e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
24009e74:	e7a7      	b.n	24009dc6 <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
24009e76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24009e7a:	e7a3      	b.n	24009dc4 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009e7c:	0719      	lsls	r1, r3, #28
24009e7e:	d448      	bmi.n	24009f12 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009e80:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e82:	079a      	lsls	r2, r3, #30
24009e84:	d447      	bmi.n	24009f16 <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009e88:	069b      	lsls	r3, r3, #26
24009e8a:	d50a      	bpl.n	24009ea2 <HAL_SD_GetCardStatus.part.0+0x10a>
24009e8c:	e045      	b.n	24009f1a <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24009e8e:	f001 fc25 	bl	2400b6dc <SDMMC_ReadFIFO>
24009e92:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009e96:	f7fa fc43 	bl	24004720 <HAL_GetTick>
24009e9a:	1bc0      	subs	r0, r0, r7
24009e9c:	3001      	adds	r0, #1
24009e9e:	d0ea      	beq.n	24009e76 <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24009ea0:	6820      	ldr	r0, [r4, #0]
24009ea2:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009ea4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
24009ea8:	d1f1      	bne.n	24009e8e <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009eaa:	4a1e      	ldr	r2, [pc, #120]	; (24009f24 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
24009eac:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24009eae:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009eb0:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24009eb2:	f3c3 1281 	ubfx	r2, r3, #6, #2
24009eb6:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
24009eb8:	f3c3 1240 	ubfx	r2, r3, #5, #1
24009ebc:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24009ebe:	0a1a      	lsrs	r2, r3, #8
24009ec0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
24009ec4:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
24009ec8:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
24009ecc:	b292      	uxth	r2, r2
24009ece:	ba09      	rev	r1, r1
24009ed0:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009ed2:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
24009ed4:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009ed6:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009ed8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009edc:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009ee0:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009ee2:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009ee6:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009ee8:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
24009eec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24009ef0:	b2d0      	uxtb	r0, r2
24009ef2:	4303      	orrs	r3, r0
24009ef4:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
24009ef6:	f3c2 2385 	ubfx	r3, r2, #10, #6
24009efa:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
24009efc:	f3c2 2301 	ubfx	r3, r2, #8, #2
24009f00:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009f02:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009f06:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009f0a:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009f0c:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009f0e:	74a9      	strb	r1, [r5, #18]
24009f10:	e762      	b.n	24009dd8 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009f12:	2308      	movs	r3, #8
24009f14:	e757      	b.n	24009dc6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009f16:	2302      	movs	r3, #2
24009f18:	e755      	b.n	24009dc6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
24009f1a:	2320      	movs	r3, #32
24009f1c:	e753      	b.n	24009dc6 <HAL_SD_GetCardStatus.part.0+0x2e>
24009f1e:	bf00      	nop
24009f20:	1fe00fff 	.word	0x1fe00fff
24009f24:	18000f3a 	.word	0x18000f3a

24009f28 <HAL_SD_ReadBlocks>:
{
24009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24009f2c:	460d      	mov	r5, r1
24009f2e:	b087      	sub	sp, #28
24009f30:	4604      	mov	r4, r0
24009f32:	4692      	mov	sl, r2
24009f34:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
24009f36:	f7fa fbf3 	bl	24004720 <HAL_GetTick>
  if (NULL == pData)
24009f3a:	2d00      	cmp	r5, #0
24009f3c:	f000 8093 	beq.w	2400a066 <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
24009f40:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
24009f44:	2b01      	cmp	r3, #1
24009f46:	fa5f f983 	uxtb.w	r9, r3
24009f4a:	d17b      	bne.n	2400a044 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009f4c:	eb0a 0307 	add.w	r3, sl, r7
24009f50:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009f52:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009f54:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009f56:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009f58:	f200 808f 	bhi.w	2400a07a <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
24009f5c:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009f5e:	f04f 0b02 	mov.w	fp, #2
24009f62:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
24009f64:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
24009f68:	6823      	ldr	r3, [r4, #0]
24009f6a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f6c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f70:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009f72:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009f74:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
24009f78:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
24009f80:	bf18      	it	ne
24009f82:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009f86:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24009f88:	027b      	lsls	r3, r7, #9
24009f8a:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009f8c:	2390      	movs	r3, #144	; 0x90
24009f8e:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009f92:	f001 fbbd 	bl	2400b710 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009f96:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
24009f98:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009f9a:	68d3      	ldr	r3, [r2, #12]
24009f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009fa0:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
24009fa2:	d959      	bls.n	2400a058 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24009fa4:	4651      	mov	r1, sl
24009fa6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
24009fa8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24009fac:	f001 fd12 	bl	2400b9d4 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
24009fb0:	2800      	cmp	r0, #0
24009fb2:	d16a      	bne.n	2400a08a <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
24009fb4:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009fb8:	e005      	b.n	24009fc6 <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24009fba:	f7fa fbb1 	bl	24004720 <HAL_GetTick>
24009fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
24009fc0:	1b80      	subs	r0, r0, r6
24009fc2:	4298      	cmp	r0, r3
24009fc4:	d22c      	bcs.n	2400a020 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009fc6:	6820      	ldr	r0, [r4, #0]
24009fc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009fca:	f413 7f95 	tst.w	r3, #298	; 0x12a
24009fce:	d168      	bne.n	2400a0a2 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
24009fd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009fd2:	041a      	lsls	r2, r3, #16
24009fd4:	d5f1      	bpl.n	24009fba <HAL_SD_ReadBlocks+0x92>
24009fd6:	f1bb 0f1f 	cmp.w	fp, #31
24009fda:	d9ee      	bls.n	24009fba <HAL_SD_ReadBlocks+0x92>
24009fdc:	f105 0804 	add.w	r8, r5, #4
24009fe0:	f105 0a24 	add.w	sl, r5, #36	; 0x24
24009fe4:	e000      	b.n	24009fe8 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
24009fe6:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
24009fe8:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
24009fec:	f001 fb76 	bl	2400b6dc <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24009ff0:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
24009ff4:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
24009ff6:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24009ff8:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
24009ffc:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
2400a000:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
2400a004:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
2400a008:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
2400a00c:	d1eb      	bne.n	24009fe6 <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a00e:	f7fa fb87 	bl	24004720 <HAL_GetTick>
2400a012:	9b10      	ldr	r3, [sp, #64]	; 0x40
2400a014:	1b80      	subs	r0, r0, r6
          tempbuff++;
2400a016:	3520      	adds	r5, #32
        dataremaining -= 32U;
2400a018:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a01c:	4298      	cmp	r0, r3
2400a01e:	d3d2      	bcc.n	24009fc6 <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a020:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
2400a022:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a026:	4842      	ldr	r0, [pc, #264]	; (2400a130 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
2400a028:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
2400a02a:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a02c:	6398      	str	r0, [r3, #56]	; 0x38
}
2400a02e:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400a030:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a036:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a038:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a03c:	62e2      	str	r2, [r4, #44]	; 0x2c
}
2400a03e:	b007      	add	sp, #28
2400a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a044:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a046:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a04a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a04e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a050:	4648      	mov	r0, r9
2400a052:	b007      	add	sp, #28
2400a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a058:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a05a:	4651      	mov	r1, sl
2400a05c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a05e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a060:	f001 fc12 	bl	2400b888 <SDMMC_CmdReadSingleBlock>
2400a064:	e7a4      	b.n	24009fb0 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a066:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a068:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a06c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a070:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a072:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a074:	b007      	add	sp, #28
2400a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a07a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a07c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a07e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a082:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a084:	b007      	add	sp, #28
2400a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a08a:	6823      	ldr	r3, [r4, #0]
2400a08c:	4a28      	ldr	r2, [pc, #160]	; (2400a130 <HAL_SD_ReadBlocks+0x208>)
2400a08e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a090:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a092:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a094:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a096:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a098:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a09a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a09e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a0a0:	e7d6      	b.n	2400a050 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a0a2:	68c3      	ldr	r3, [r0, #12]
2400a0a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a0a8:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a0aa:	6820      	ldr	r0, [r4, #0]
2400a0ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0ae:	05db      	lsls	r3, r3, #23
2400a0b0:	d509      	bpl.n	2400a0c6 <HAL_SD_ReadBlocks+0x19e>
2400a0b2:	2f01      	cmp	r7, #1
2400a0b4:	d907      	bls.n	2400a0c6 <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a0b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a0b8:	2b03      	cmp	r3, #3
2400a0ba:	d004      	beq.n	2400a0c6 <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a0bc:	f001 fe7c 	bl	2400bdb8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a0c0:	2800      	cmp	r0, #0
2400a0c2:	d1e2      	bne.n	2400a08a <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a0c4:	6820      	ldr	r0, [r4, #0]
2400a0c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0c8:	f013 0308 	ands.w	r3, r3, #8
2400a0cc:	d112      	bne.n	2400a0f4 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a0ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a0d0:	f012 0202 	ands.w	r2, r2, #2
2400a0d4:	d11a      	bne.n	2400a10c <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a0d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0d8:	f013 0320 	ands.w	r3, r3, #32
2400a0dc:	d021      	beq.n	2400a122 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0de:	4b14      	ldr	r3, [pc, #80]	; (2400a130 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a0e0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0e2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400a0e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a0e6:	f043 0320 	orr.w	r3, r3, #32
2400a0ea:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a0ec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a0f0:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a0f2:	e7ad      	b.n	2400a050 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0f4:	4b0e      	ldr	r3, [pc, #56]	; (2400a130 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a0f6:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0f8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a0fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a0fc:	f043 0308 	orr.w	r3, r3, #8
2400a100:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a102:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a104:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a108:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a10a:	e7a1      	b.n	2400a050 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a10c:	4a08      	ldr	r2, [pc, #32]	; (2400a130 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
2400a10e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a110:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a112:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a114:	f042 0202 	orr.w	r2, r2, #2
2400a118:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a11a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a11e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a120:	e796      	b.n	2400a050 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a122:	4904      	ldr	r1, [pc, #16]	; (2400a134 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
2400a124:	2201      	movs	r2, #1
    return HAL_OK;
2400a126:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a128:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a12a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a12e:	e78f      	b.n	2400a050 <HAL_SD_ReadBlocks+0x128>
2400a130:	1fe00fff 	.word	0x1fe00fff
2400a134:	18000f3a 	.word	0x18000f3a

2400a138 <HAL_SD_WriteBlocks>:
{
2400a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a13c:	460d      	mov	r5, r1
2400a13e:	b089      	sub	sp, #36	; 0x24
2400a140:	4604      	mov	r4, r0
2400a142:	4692      	mov	sl, r2
2400a144:	461f      	mov	r7, r3
2400a146:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400a14a:	f7fa fae9 	bl	24004720 <HAL_GetTick>
  if (NULL == pData)
2400a14e:	2d00      	cmp	r5, #0
2400a150:	d07c      	beq.n	2400a24c <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
2400a152:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a156:	2b01      	cmp	r3, #1
2400a158:	fa5f f983 	uxtb.w	r9, r3
2400a15c:	d166      	bne.n	2400a22c <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a15e:	eb0a 0307 	add.w	r3, sl, r7
2400a162:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a164:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a166:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a168:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a16a:	d879      	bhi.n	2400a260 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
2400a16c:	2303      	movs	r3, #3
2400a16e:	4606      	mov	r6, r0
2400a170:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a174:	6823      	ldr	r3, [r4, #0]
2400a176:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a178:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a17c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a17e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400a180:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a184:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a188:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a18e:	bf18      	it	ne
2400a190:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a194:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a196:	027b      	lsls	r3, r7, #9
2400a198:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400a19a:	2390      	movs	r3, #144	; 0x90
2400a19c:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a19e:	f001 fab7 	bl	2400b710 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a1a2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a1a4:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1a6:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a1a8:	68d3      	ldr	r3, [r2, #12]
2400a1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a1ae:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a1b0:	d946      	bls.n	2400a240 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a1b2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1b4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a1b6:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1b8:	f001 fd58 	bl	2400bc6c <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a1bc:	2800      	cmp	r0, #0
2400a1be:	d157      	bne.n	2400a270 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
2400a1c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a1c4:	e004      	b.n	2400a1d0 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a1c6:	f7fa faab 	bl	24004720 <HAL_GetTick>
2400a1ca:	1b80      	subs	r0, r0, r6
2400a1cc:	4540      	cmp	r0, r8
2400a1ce:	d21d      	bcs.n	2400a20c <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a1d0:	6820      	ldr	r0, [r4, #0]
2400a1d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a1d4:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400a1d8:	d156      	bne.n	2400a288 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400a1da:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a1dc:	045a      	lsls	r2, r3, #17
2400a1de:	d5f2      	bpl.n	2400a1c6 <HAL_SD_WriteBlocks+0x8e>
2400a1e0:	f1bb 0f1f 	cmp.w	fp, #31
2400a1e4:	d9ef      	bls.n	2400a1c6 <HAL_SD_WriteBlocks+0x8e>
2400a1e6:	f105 0a20 	add.w	sl, r5, #32
2400a1ea:	e000      	b.n	2400a1ee <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a1ec:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a1ee:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a1f2:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a1f4:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a1f6:	f001 fa75 	bl	2400b6e4 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400a1fa:	4555      	cmp	r5, sl
2400a1fc:	d1f6      	bne.n	2400a1ec <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a1fe:	f7fa fa8f 	bl	24004720 <HAL_GetTick>
2400a202:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
2400a204:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a208:	4540      	cmp	r0, r8
2400a20a:	d3e1      	bcc.n	2400a1d0 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a20c:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
2400a20e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a212:	4841      	ldr	r0, [pc, #260]	; (2400a318 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
2400a214:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
2400a216:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a218:	6388      	str	r0, [r1, #56]	; 0x38
}
2400a21a:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
2400a21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400a21e:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a220:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a224:	62e3      	str	r3, [r4, #44]	; 0x2c
}
2400a226:	b009      	add	sp, #36	; 0x24
2400a228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a22e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a236:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a238:	4648      	mov	r0, r9
2400a23a:	b009      	add	sp, #36	; 0x24
2400a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a240:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a242:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a244:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a246:	f001 fc6b 	bl	2400bb20 <SDMMC_CmdWriteSingleBlock>
2400a24a:	e7b7      	b.n	2400a1bc <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a24c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a24e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a256:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a258:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a25a:	b009      	add	sp, #36	; 0x24
2400a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a260:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a262:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a268:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a26a:	b009      	add	sp, #36	; 0x24
2400a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a270:	6823      	ldr	r3, [r4, #0]
2400a272:	4a29      	ldr	r2, [pc, #164]	; (2400a318 <HAL_SD_WriteBlocks+0x1e0>)
2400a274:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a276:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a278:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a27a:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
2400a27c:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
2400a27e:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
2400a280:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a284:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a286:	e7d7      	b.n	2400a238 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a288:	68c3      	ldr	r3, [r0, #12]
2400a28a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a28e:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a290:	6820      	ldr	r0, [r4, #0]
2400a292:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a294:	05db      	lsls	r3, r3, #23
2400a296:	d509      	bpl.n	2400a2ac <HAL_SD_WriteBlocks+0x174>
2400a298:	2f01      	cmp	r7, #1
2400a29a:	d907      	bls.n	2400a2ac <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a29c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a29e:	2b03      	cmp	r3, #3
2400a2a0:	d004      	beq.n	2400a2ac <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a2a2:	f001 fd89 	bl	2400bdb8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a2a6:	2800      	cmp	r0, #0
2400a2a8:	d1e2      	bne.n	2400a270 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a2aa:	6820      	ldr	r0, [r4, #0]
2400a2ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a2ae:	f013 0308 	ands.w	r3, r3, #8
2400a2b2:	d112      	bne.n	2400a2da <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a2b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a2b6:	f012 0202 	ands.w	r2, r2, #2
2400a2ba:	d11a      	bne.n	2400a2f2 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400a2bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a2be:	f013 0310 	ands.w	r3, r3, #16
2400a2c2:	d021      	beq.n	2400a308 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2c4:	4b14      	ldr	r3, [pc, #80]	; (2400a318 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a2c6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2c8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400a2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a2cc:	f043 0310 	orr.w	r3, r3, #16
2400a2d0:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a2d2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a2d6:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a2d8:	e7ae      	b.n	2400a238 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2da:	4b0f      	ldr	r3, [pc, #60]	; (2400a318 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a2dc:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2de:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a2e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a2e2:	f043 0308 	orr.w	r3, r3, #8
2400a2e6:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a2e8:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a2ea:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a2ee:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a2f0:	e7a2      	b.n	2400a238 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2f2:	4a09      	ldr	r2, [pc, #36]	; (2400a318 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
2400a2f4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2f6:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a2f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a2fa:	f042 0202 	orr.w	r2, r2, #2
2400a2fe:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a300:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a304:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a306:	e797      	b.n	2400a238 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a308:	4904      	ldr	r1, [pc, #16]	; (2400a31c <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
2400a30a:	2201      	movs	r2, #1
    return HAL_OK;
2400a30c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a30e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a310:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a314:	e790      	b.n	2400a238 <HAL_SD_WriteBlocks+0x100>
2400a316:	bf00      	nop
2400a318:	1fe00fff 	.word	0x1fe00fff
2400a31c:	18000f3a 	.word	0x18000f3a

2400a320 <HAL_SD_GetCardCSD>:
{
2400a320:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a322:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a324:	f04f 0c00 	mov.w	ip, #0
{
2400a328:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a32a:	0f92      	lsrs	r2, r2, #30
2400a32c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400a32e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400a330:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400a334:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400a336:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400a33a:	f002 0203 	and.w	r2, r2, #3
2400a33e:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400a340:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400a344:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400a346:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400a34a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400a34c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400a350:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400a352:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a354:	0d12      	lsrs	r2, r2, #20
2400a356:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400a358:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400a35c:	f002 020f 	and.w	r2, r2, #15
2400a360:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400a362:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a364:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a368:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400a36a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a36c:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a370:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400a372:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a374:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a378:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400a37a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a37c:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a380:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a382:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400a386:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400a388:	2a00      	cmp	r2, #0
2400a38a:	f040 808a 	bne.w	2400a4a2 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400a38e:	f640 72fc 	movw	r2, #4092	; 0xffc
2400a392:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
2400a396:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400a39a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400a39e:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400a3a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3a2:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400a3a6:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400a3a8:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400a3ac:	f002 0207 	and.w	r2, r2, #7
2400a3b0:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400a3b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3b4:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400a3b8:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400a3ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3bc:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400a3c0:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400a3c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3c4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400a3c8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400a3ca:	690a      	ldr	r2, [r1, #16]
2400a3cc:	3201      	adds	r2, #1
2400a3ce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a3d0:	7e08      	ldrb	r0, [r1, #24]
2400a3d2:	f000 0007 	and.w	r0, r0, #7
2400a3d6:	3002      	adds	r0, #2
2400a3d8:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a3da:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a3dc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a3de:	f891 c008 	ldrb.w	ip, [r1, #8]
2400a3e2:	f00c 0c0f 	and.w	ip, ip, #15
2400a3e6:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a3ea:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a3ee:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
2400a3f0:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a3f4:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
2400a3f8:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a3fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
2400a3fe:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400a400:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a404:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a408:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400a40a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a40c:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400a410:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400a412:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400a418:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400a41a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a41c:	0fd2      	lsrs	r2, r2, #31
2400a41e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400a420:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a422:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400a426:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400a428:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a42a:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400a42e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400a430:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a432:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400a436:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400a438:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a43a:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400a43e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400a442:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400a446:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400a44a:	ea02 020c 	and.w	r2, r2, ip
2400a44e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400a452:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a454:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a458:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400a45c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a45e:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a462:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400a466:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a468:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a46c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400a470:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a472:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a476:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400a47a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a47c:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400a480:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400a484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a486:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400a48a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400a48e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400a490:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400a494:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400a498:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400a49c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a4a0:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a4a2:	2a01      	cmp	r2, #1
2400a4a4:	d112      	bne.n	2400a4cc <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a4a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a4a8:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400a4ac:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a4b0:	0412      	lsls	r2, r2, #16
2400a4b2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400a4b6:	ea42 020c 	orr.w	r2, r2, ip
2400a4ba:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a4bc:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400a4be:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a4c0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a4c2:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a4c4:	0292      	lsls	r2, r2, #10
2400a4c6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400a4c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a4ca:	e797      	b.n	2400a3fc <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4cc:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a4ce:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4d0:	4805      	ldr	r0, [pc, #20]	; (2400a4e8 <HAL_SD_GetCardCSD+0x1c8>)
2400a4d2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400a4d4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a4d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a4d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400a4dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a4de:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400a4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a4e6:	4770      	bx	lr
2400a4e8:	1fe00fff 	.word	0x1fe00fff

2400a4ec <HAL_SD_InitCard>:
{
2400a4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a4ee:	2200      	movs	r2, #0
{
2400a4f0:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a4f2:	2300      	movs	r3, #0
{
2400a4f4:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a4f6:	2100      	movs	r1, #0
2400a4f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a4fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400a500:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a504:	f7fe fd46 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400a508:	b940      	cbnz	r0, 2400a51c <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400a50a:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a50c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400a510:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a514:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a516:	4630      	mov	r0, r6
2400a518:	b015      	add	sp, #84	; 0x54
2400a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a51c:	0a06      	lsrs	r6, r0, #8
2400a51e:	4b8f      	ldr	r3, [pc, #572]	; (2400a75c <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400a520:	aa07      	add	r2, sp, #28
2400a522:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a524:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400a528:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a52a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400a52c:	9608      	str	r6, [sp, #32]
2400a52e:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a532:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a536:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a538:	6820      	ldr	r0, [r4, #0]
2400a53a:	f001 f8b3 	bl	2400b6a4 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400a53e:	6820      	ldr	r0, [r4, #0]
2400a540:	f001 f8d6 	bl	2400b6f0 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400a544:	4b86      	ldr	r3, [pc, #536]	; (2400a760 <HAL_SD_InitCard+0x274>)
2400a546:	429d      	cmp	r5, r3
2400a548:	d902      	bls.n	2400a550 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400a54a:	0076      	lsls	r6, r6, #1
2400a54c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400a550:	4884      	ldr	r0, [pc, #528]	; (2400a764 <HAL_SD_InitCard+0x278>)
2400a552:	fbb0 f0f5 	udiv	r0, r0, r5
2400a556:	3001      	adds	r0, #1
2400a558:	f7fa f8e8 	bl	2400472c <HAL_Delay>
  __IO uint32_t count = 0U;
2400a55c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a55e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400a560:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a562:	f001 fdd9 	bl	2400c118 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a566:	4605      	mov	r5, r0
2400a568:	b140      	cbz	r0, 2400a57c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400a56a:	2601      	movs	r6, #1
2400a56c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400a570:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400a572:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a574:	431d      	orrs	r5, r3
2400a576:	6365      	str	r5, [r4, #52]	; 0x34
}
2400a578:	b015      	add	sp, #84	; 0x54
2400a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400a57c:	6820      	ldr	r0, [r4, #0]
2400a57e:	f001 fdf7 	bl	2400c170 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400a582:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400a586:	d06c      	beq.n	2400a662 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400a588:	2301      	movs	r3, #1
2400a58a:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a58c:	2100      	movs	r1, #0
2400a58e:	6820      	ldr	r0, [r4, #0]
2400a590:	f001 fe2e 	bl	2400c1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a594:	bb08      	cbnz	r0, 2400a5da <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a596:	9b03      	ldr	r3, [sp, #12]
2400a598:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400a59c:	42b3      	cmp	r3, r6
2400a59e:	f200 80d6 	bhi.w	2400a74e <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a5a2:	4f71      	ldr	r7, [pc, #452]	; (2400a768 <HAL_SD_InitCard+0x27c>)
2400a5a4:	e00b      	b.n	2400a5be <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a5a6:	6820      	ldr	r0, [r4, #0]
2400a5a8:	f001 f8ae 	bl	2400b708 <SDMMC_GetResponse>
    count++;
2400a5ac:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a5ae:	2800      	cmp	r0, #0
    count++;
2400a5b0:	f103 0301 	add.w	r3, r3, #1
2400a5b4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a5b6:	9b03      	ldr	r3, [sp, #12]
2400a5b8:	db12      	blt.n	2400a5e0 <HAL_SD_InitCard+0xf4>
2400a5ba:	42b3      	cmp	r3, r6
2400a5bc:	d810      	bhi.n	2400a5e0 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a5be:	2100      	movs	r1, #0
2400a5c0:	6820      	ldr	r0, [r4, #0]
2400a5c2:	f001 fe15 	bl	2400c1f0 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a5c6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400a5c8:	4605      	mov	r5, r0
2400a5ca:	2800      	cmp	r0, #0
2400a5cc:	d1cd      	bne.n	2400a56a <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a5ce:	6820      	ldr	r0, [r4, #0]
2400a5d0:	f001 feb4 	bl	2400c33c <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a5d4:	4601      	mov	r1, r0
2400a5d6:	2800      	cmp	r0, #0
2400a5d8:	d0e5      	beq.n	2400a5a6 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a5da:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400a5de:	e7c4      	b.n	2400a56a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a5e0:	9a03      	ldr	r2, [sp, #12]
2400a5e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400a5e6:	429a      	cmp	r2, r3
2400a5e8:	f200 80ab 	bhi.w	2400a742 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400a5ec:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
2400a5f0:	d043      	beq.n	2400a67a <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400a5f2:	2301      	movs	r3, #1
2400a5f4:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400a5f6:	2300      	movs	r3, #0
2400a5f8:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400a5fc:	f7fa f890 	bl	24004720 <HAL_GetTick>
2400a600:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400a602:	6820      	ldr	r0, [r4, #0]
2400a604:	f001 f87c 	bl	2400b700 <SDMMC_GetPowerState>
2400a608:	2800      	cmp	r0, #0
2400a60a:	d038      	beq.n	2400a67e <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a60c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a60e:	2b03      	cmp	r3, #3
2400a610:	d140      	bne.n	2400a694 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a612:	2104      	movs	r1, #4
2400a614:	6820      	ldr	r0, [r4, #0]
2400a616:	f001 f877 	bl	2400b708 <SDMMC_GetResponse>
2400a61a:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a61c:	a909      	add	r1, sp, #36	; 0x24
2400a61e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a620:	0d1b      	lsrs	r3, r3, #20
2400a622:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a624:	f7ff fe7c 	bl	2400a320 <HAL_SD_GetCardCSD>
2400a628:	4606      	mov	r6, r0
2400a62a:	2800      	cmp	r0, #0
2400a62c:	f040 808c 	bne.w	2400a748 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400a630:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a632:	6820      	ldr	r0, [r4, #0]
2400a634:	0409      	lsls	r1, r1, #16
2400a636:	f001 fcc9 	bl	2400bfcc <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a63a:	bb10      	cbnz	r0, 2400a682 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a63c:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a640:	6820      	ldr	r0, [r4, #0]
2400a642:	f001 f87b 	bl	2400b73c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a646:	2800      	cmp	r0, #0
2400a648:	f43f af65 	beq.w	2400a516 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a64c:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a64e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a650:	4946      	ldr	r1, [pc, #280]	; (2400a76c <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400a652:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a654:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a656:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a658:	4310      	orrs	r0, r2
2400a65a:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a65c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400a660:	e759      	b.n	2400a516 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400a662:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a664:	6820      	ldr	r0, [r4, #0]
2400a666:	f001 fd57 	bl	2400c118 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a66a:	4605      	mov	r5, r0
2400a66c:	2800      	cmp	r0, #0
2400a66e:	f47f af7c 	bne.w	2400a56a <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400a672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400a674:	2b01      	cmp	r3, #1
2400a676:	d18e      	bne.n	2400a596 <HAL_SD_InitCard+0xaa>
2400a678:	e788      	b.n	2400a58c <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
2400a67a:	63a0      	str	r0, [r4, #56]	; 0x38
2400a67c:	e7bb      	b.n	2400a5f6 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a67e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400a682:	2601      	movs	r6, #1
2400a684:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400a688:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a68a:	4318      	orrs	r0, r3
2400a68c:	6360      	str	r0, [r4, #52]	; 0x34
}
2400a68e:	4630      	mov	r0, r6
2400a690:	b015      	add	sp, #84	; 0x54
2400a692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400a694:	6820      	ldr	r0, [r4, #0]
2400a696:	f001 ffd9 	bl	2400c64c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a69a:	2800      	cmp	r0, #0
2400a69c:	d1f1      	bne.n	2400a682 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a69e:	4601      	mov	r1, r0
2400a6a0:	6820      	ldr	r0, [r4, #0]
2400a6a2:	f001 f831 	bl	2400b708 <SDMMC_GetResponse>
2400a6a6:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6a8:	2104      	movs	r1, #4
2400a6aa:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a6ac:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6ae:	f001 f82b 	bl	2400b708 <SDMMC_GetResponse>
2400a6b2:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6b4:	2108      	movs	r1, #8
2400a6b6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6b8:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6ba:	f001 f825 	bl	2400b708 <SDMMC_GetResponse>
2400a6be:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6c0:	210c      	movs	r1, #12
2400a6c2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6c4:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6c6:	f001 f81f 	bl	2400b708 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a6ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6cc:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a6ce:	2b03      	cmp	r3, #3
2400a6d0:	d09f      	beq.n	2400a612 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a6d2:	f241 3687 	movw	r6, #4999	; 0x1387
2400a6d6:	e009      	b.n	2400a6ec <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a6d8:	6820      	ldr	r0, [r4, #0]
2400a6da:	f002 f835 	bl	2400c748 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400a6de:	2800      	cmp	r0, #0
2400a6e0:	d1cf      	bne.n	2400a682 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a6e2:	f7fa f81d 	bl	24004720 <HAL_GetTick>
2400a6e6:	1b43      	subs	r3, r0, r5
2400a6e8:	42b3      	cmp	r3, r6
2400a6ea:	d827      	bhi.n	2400a73c <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
2400a6ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a6f0:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400a6f4:	2b00      	cmp	r3, #0
2400a6f6:	d0ef      	beq.n	2400a6d8 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a6f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400a6fa:	2a03      	cmp	r2, #3
2400a6fc:	d089      	beq.n	2400a612 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a6fe:	0419      	lsls	r1, r3, #16
2400a700:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400a702:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a704:	f001 ffe0 	bl	2400c6c8 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a708:	2800      	cmp	r0, #0
2400a70a:	d1ba      	bne.n	2400a682 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a70c:	4601      	mov	r1, r0
2400a70e:	6820      	ldr	r0, [r4, #0]
2400a710:	f000 fffa 	bl	2400b708 <SDMMC_GetResponse>
2400a714:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a716:	2104      	movs	r1, #4
2400a718:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a71a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a71c:	f000 fff4 	bl	2400b708 <SDMMC_GetResponse>
2400a720:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a722:	2108      	movs	r1, #8
2400a724:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a726:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a728:	f000 ffee 	bl	2400b708 <SDMMC_GetResponse>
2400a72c:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a72e:	210c      	movs	r1, #12
2400a730:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a732:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a734:	f000 ffe8 	bl	2400b708 <SDMMC_GetResponse>
2400a738:	66a0      	str	r0, [r4, #104]	; 0x68
2400a73a:	e76a      	b.n	2400a612 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
2400a73c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400a740:	e79f      	b.n	2400a682 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400a742:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400a746:	e710      	b.n	2400a56a <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400a74c:	e799      	b.n	2400a682 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a74e:	9b03      	ldr	r3, [sp, #12]
2400a750:	42b3      	cmp	r3, r6
2400a752:	d8f6      	bhi.n	2400a742 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
2400a754:	2300      	movs	r3, #0
2400a756:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
2400a758:	e74d      	b.n	2400a5f6 <HAL_SD_InitCard+0x10a>
2400a75a:	bf00      	nop
2400a75c:	014f8b59 	.word	0x014f8b59
2400a760:	000c34ff 	.word	0x000c34ff
2400a764:	00012110 	.word	0x00012110
2400a768:	c1100000 	.word	0xc1100000
2400a76c:	1fe00fff 	.word	0x1fe00fff

2400a770 <HAL_SD_GetCardInfo>:
{
2400a770:	4603      	mov	r3, r0
}
2400a772:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400a774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400a776:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400a778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a77a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400a77c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400a77e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400a780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400a782:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400a784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400a786:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400a788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400a78a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400a78c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400a78e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400a790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400a792:	61cb      	str	r3, [r1, #28]
}
2400a794:	4770      	bx	lr
2400a796:	bf00      	nop

2400a798 <HAL_SD_ConfigWideBusOperation>:
{
2400a798:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400a79a:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a79c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400a79e:	b089      	sub	sp, #36	; 0x24
2400a7a0:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a7a2:	4293      	cmp	r3, r2
{
2400a7a4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400a7a6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a7aa:	d033      	beq.n	2400a814 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400a7ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400a7b0:	d030      	beq.n	2400a814 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400a7b2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400a7b6:	f000 8084 	beq.w	2400a8c2 <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400a7ba:	2900      	cmp	r1, #0
2400a7bc:	d062      	beq.n	2400a884 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a7be:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a7c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a7c4:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7c8:	bb5b      	cbnz	r3, 2400a822 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a7ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a7ce:	2100      	movs	r1, #0
2400a7d0:	f7fe fbe0 	bl	24008f94 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400a7d4:	2800      	cmp	r0, #0
2400a7d6:	d03b      	beq.n	2400a850 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a7d8:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7da:	4b55      	ldr	r3, [pc, #340]	; (2400a930 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a7dc:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400a7de:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a7e0:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7e2:	fba3 5300 	umull	r5, r3, r3, r0
2400a7e6:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a7e8:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7ea:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a7ee:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7f0:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a7f4:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7f6:	d238      	bcs.n	2400a86a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400a7f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a7fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400a7fe:	d034      	beq.n	2400a86a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400a800:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400a804:	d07f      	beq.n	2400a906 <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
2400a806:	bb4a      	cbnz	r2, 2400a85c <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
2400a808:	4b4a      	ldr	r3, [pc, #296]	; (2400a934 <HAL_SD_ConfigWideBusOperation+0x19c>)
2400a80a:	4298      	cmp	r0, r3
2400a80c:	f240 8085 	bls.w	2400a91a <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a810:	9506      	str	r5, [sp, #24]
2400a812:	e02b      	b.n	2400a86c <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a814:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a81a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a81c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a81e:	2b00      	cmp	r3, #0
2400a820:	d0d3      	beq.n	2400a7ca <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a822:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a824:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a826:	4a44      	ldr	r2, [pc, #272]	; (2400a938 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400a828:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a82a:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a82e:	6820      	ldr	r0, [r4, #0]
2400a830:	f000 ff84 	bl	2400b73c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a834:	b130      	cbz	r0, 2400a844 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a836:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a838:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a83a:	4a3f      	ldr	r2, [pc, #252]	; (2400a938 <HAL_SD_ConfigWideBusOperation+0x1a0>)
2400a83c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a83e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a840:	4318      	orrs	r0, r3
2400a842:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400a844:	2301      	movs	r3, #1
}
2400a846:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400a848:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a84c:	b009      	add	sp, #36	; 0x24
2400a84e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a850:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a852:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a854:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a858:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a85a:	e7e6      	b.n	2400a82a <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400a85c:	0053      	lsls	r3, r2, #1
2400a85e:	fbb0 f0f3 	udiv	r0, r0, r3
2400a862:	4b34      	ldr	r3, [pc, #208]	; (2400a934 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
2400a864:	4298      	cmp	r0, r3
2400a866:	bf88      	it	hi
2400a868:	462a      	movhi	r2, r5
2400a86a:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400a86c:	aa05      	add	r2, sp, #20
2400a86e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400a870:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400a872:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a876:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a87a:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a87c:	6820      	ldr	r0, [r4, #0]
2400a87e:	f000 ff11 	bl	2400b6a4 <SDMMC_Init>
2400a882:	e7d2      	b.n	2400a82a <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
2400a884:	2200      	movs	r2, #0
2400a886:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a888:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a88a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a88e:	f000 ff3b 	bl	2400b708 <SDMMC_GetResponse>
2400a892:	0182      	lsls	r2, r0, #6
2400a894:	d434      	bmi.n	2400a900 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400a896:	a902      	add	r1, sp, #8
2400a898:	4620      	mov	r0, r4
2400a89a:	f7ff fa0b 	bl	24009cb4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a89e:	b960      	cbnz	r0, 2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a8a0:	9b03      	ldr	r3, [sp, #12]
2400a8a2:	03db      	lsls	r3, r3, #15
2400a8a4:	d536      	bpl.n	2400a914 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a8a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a8a8:	6820      	ldr	r0, [r4, #0]
2400a8aa:	0409      	lsls	r1, r1, #16
2400a8ac:	f001 fca0 	bl	2400c1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a8b0:	b918      	cbnz	r0, 2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400a8b2:	4601      	mov	r1, r0
2400a8b4:	6820      	ldr	r0, [r4, #0]
2400a8b6:	f001 fd7b 	bl	2400c3b0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400a8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a8bc:	4318      	orrs	r0, r3
2400a8be:	6360      	str	r0, [r4, #52]	; 0x34
2400a8c0:	e7ac      	b.n	2400a81c <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
2400a8c2:	2200      	movs	r2, #0
2400a8c4:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a8c6:	2100      	movs	r1, #0
2400a8c8:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a8ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a8ce:	f000 ff1b 	bl	2400b708 <SDMMC_GetResponse>
2400a8d2:	0180      	lsls	r0, r0, #6
2400a8d4:	d414      	bmi.n	2400a900 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
2400a8d6:	a902      	add	r1, sp, #8
2400a8d8:	4620      	mov	r0, r4
2400a8da:	f7ff f9eb 	bl	24009cb4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8de:	2800      	cmp	r0, #0
2400a8e0:	d1eb      	bne.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a8e2:	9b03      	ldr	r3, [sp, #12]
2400a8e4:	0359      	lsls	r1, r3, #13
2400a8e6:	d515      	bpl.n	2400a914 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a8e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a8ea:	6820      	ldr	r0, [r4, #0]
2400a8ec:	0409      	lsls	r1, r1, #16
2400a8ee:	f001 fc7f 	bl	2400c1f0 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a8f2:	2800      	cmp	r0, #0
2400a8f4:	d1e1      	bne.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400a8f6:	2102      	movs	r1, #2
2400a8f8:	6820      	ldr	r0, [r4, #0]
2400a8fa:	f001 fd59 	bl	2400c3b0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a8fe:	e7dc      	b.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a900:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a904:	e7d9      	b.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
2400a906:	b95a      	cbnz	r2, 2400a920 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400a908:	4a0c      	ldr	r2, [pc, #48]	; (2400a93c <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400a90a:	4290      	cmp	r0, r2
2400a90c:	d905      	bls.n	2400a91a <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400a90e:	0e5b      	lsrs	r3, r3, #25
2400a910:	9306      	str	r3, [sp, #24]
2400a912:	e7ab      	b.n	2400a86c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a914:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400a918:	e7cf      	b.n	2400a8ba <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400a91a:	2300      	movs	r3, #0
2400a91c:	9306      	str	r3, [sp, #24]
2400a91e:	e7a5      	b.n	2400a86c <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400a920:	0051      	lsls	r1, r2, #1
2400a922:	fbb0 f0f1 	udiv	r0, r0, r1
2400a926:	4905      	ldr	r1, [pc, #20]	; (2400a93c <HAL_SD_ConfigWideBusOperation+0x1a4>)
2400a928:	4288      	cmp	r0, r1
2400a92a:	d99e      	bls.n	2400a86a <HAL_SD_ConfigWideBusOperation+0xd2>
2400a92c:	e7ef      	b.n	2400a90e <HAL_SD_ConfigWideBusOperation+0x176>
2400a92e:	bf00      	nop
2400a930:	55e63b89 	.word	0x55e63b89
2400a934:	017d7840 	.word	0x017d7840
2400a938:	1fe00fff 	.word	0x1fe00fff
2400a93c:	02faf080 	.word	0x02faf080

2400a940 <HAL_SD_Init>:
{
2400a940:	b5f0      	push	{r4, r5, r6, r7, lr}
2400a942:	b087      	sub	sp, #28
  if (hsd == NULL)
2400a944:	2800      	cmp	r0, #0
2400a946:	d044      	beq.n	2400a9d2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
2400a948:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400a94c:	4604      	mov	r4, r0
2400a94e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400a952:	2b00      	cmp	r3, #0
2400a954:	d041      	beq.n	2400a9da <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a956:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a958:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a95a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a95e:	f7ff fdc5 	bl	2400a4ec <HAL_SD_InitCard>
2400a962:	2800      	cmp	r0, #0
2400a964:	d135      	bne.n	2400a9d2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400a966:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a96a:	2b03      	cmp	r3, #3
2400a96c:	d031      	beq.n	2400a9d2 <HAL_SD_Init+0x92>
2400a96e:	a901      	add	r1, sp, #4
2400a970:	4620      	mov	r0, r4
2400a972:	f7ff fa11 	bl	24009d98 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400a976:	bb60      	cbnz	r0, 2400a9d2 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a978:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400a97a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a97e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a980:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400a984:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a986:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a988:	d02b      	beq.n	2400a9e2 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400a98a:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400a98c:	68e1      	ldr	r1, [r4, #12]
2400a98e:	4620      	mov	r0, r4
2400a990:	f7ff ff02 	bl	2400a798 <HAL_SD_ConfigWideBusOperation>
2400a994:	4606      	mov	r6, r0
2400a996:	b9e0      	cbnz	r0, 2400a9d2 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
2400a998:	f7f9 fec2 	bl	24004720 <HAL_GetTick>
2400a99c:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a99e:	e00c      	b.n	2400a9ba <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a9a0:	6820      	ldr	r0, [r4, #0]
2400a9a2:	4629      	mov	r1, r5
2400a9a4:	f000 feb0 	bl	2400b708 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400a9a8:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a9ac:	2804      	cmp	r0, #4
2400a9ae:	d020      	beq.n	2400a9f2 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a9b0:	f7f9 feb6 	bl	24004720 <HAL_GetTick>
2400a9b4:	1bc3      	subs	r3, r0, r7
2400a9b6:	3301      	adds	r3, #1
2400a9b8:	d021      	beq.n	2400a9fe <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a9ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a9bc:	6820      	ldr	r0, [r4, #0]
2400a9be:	0409      	lsls	r1, r1, #16
2400a9c0:	f001 ff1a 	bl	2400c7f8 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a9c4:	4605      	mov	r5, r0
2400a9c6:	2800      	cmp	r0, #0
2400a9c8:	d0ea      	beq.n	2400a9a0 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
2400a9ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a9cc:	4303      	orrs	r3, r0
2400a9ce:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400a9d0:	e7ee      	b.n	2400a9b0 <HAL_SD_Init+0x70>
    return HAL_ERROR;
2400a9d2:	2601      	movs	r6, #1
}
2400a9d4:	4630      	mov	r0, r6
2400a9d6:	b007      	add	sp, #28
2400a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400a9da:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400a9dc:	f7f9 fb06 	bl	24003fec <HAL_SD_MspInit>
2400a9e0:	e7b9      	b.n	2400a956 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a9e2:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400a9e4:	bf14      	ite	ne
2400a9e6:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
2400a9ea:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400a9ee:	65a3      	str	r3, [r4, #88]	; 0x58
2400a9f0:	e7cc      	b.n	2400a98c <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400a9f2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a9f4:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400a9f6:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400a9f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400a9fc:	e7ea      	b.n	2400a9d4 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400a9fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400aa02:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400aa04:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400aa06:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400aa08:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400aa0c:	e7e2      	b.n	2400a9d4 <HAL_SD_Init+0x94>
2400aa0e:	bf00      	nop

2400aa10 <HAL_SD_GetCardState>:
{
2400aa10:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aa12:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400aa14:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aa16:	6800      	ldr	r0, [r0, #0]
2400aa18:	0409      	lsls	r1, r1, #16
2400aa1a:	f001 feed 	bl	2400c7f8 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa1e:	4601      	mov	r1, r0
2400aa20:	b120      	cbz	r0, 2400aa2c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400aa22:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aa24:	2000      	movs	r0, #0
2400aa26:	4319      	orrs	r1, r3
2400aa28:	6361      	str	r1, [r4, #52]	; 0x34
}
2400aa2a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aa2c:	6820      	ldr	r0, [r4, #0]
2400aa2e:	f000 fe6b 	bl	2400b708 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400aa32:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400aa36:	bd10      	pop	{r4, pc}

2400aa38 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400aa38:	b318      	cbz	r0, 2400aa82 <HAL_SDRAM_Init+0x4a>
{
2400aa3a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400aa3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400aa40:	4604      	mov	r4, r0
2400aa42:	460d      	mov	r5, r1
2400aa44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400aa48:	b1b3      	cbz	r3, 2400aa78 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400aa4a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa4c:	2302      	movs	r3, #2
2400aa4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400aa52:	f851 0b04 	ldr.w	r0, [r1], #4
2400aa56:	f000 fd73 	bl	2400b540 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400aa5a:	6862      	ldr	r2, [r4, #4]
2400aa5c:	4629      	mov	r1, r5
2400aa5e:	6820      	ldr	r0, [r4, #0]
2400aa60:	f000 fdac 	bl	2400b5bc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400aa64:	4a08      	ldr	r2, [pc, #32]	; (2400aa88 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa66:	2101      	movs	r1, #1

  return HAL_OK;
2400aa68:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400aa6a:	6813      	ldr	r3, [r2, #0]
2400aa6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400aa70:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa72:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400aa76:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400aa78:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400aa7c:	f7f6 ffd8 	bl	24001a30 <HAL_SDRAM_MspInit>
2400aa80:	e7e3      	b.n	2400aa4a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400aa82:	2001      	movs	r0, #1
}
2400aa84:	4770      	bx	lr
2400aa86:	bf00      	nop
2400aa88:	52004000 	.word	0x52004000

2400aa8c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400aa8c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aa8e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aa92:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400aa94:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aa96:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400aa98:	d004      	beq.n	2400aaa4 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400aa9a:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400aa9e:	2e01      	cmp	r6, #1
2400aaa0:	d001      	beq.n	2400aaa6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400aaa2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aaa4:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aaa6:	2302      	movs	r3, #2
2400aaa8:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aaaa:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aaac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aab0:	f000 fdd2 	bl	2400b658 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400aab4:	682b      	ldr	r3, [r5, #0]
2400aab6:	2b02      	cmp	r3, #2
2400aab8:	d003      	beq.n	2400aac2 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400aaba:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400aabc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400aac0:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aac2:	2305      	movs	r3, #5
  return HAL_OK;
2400aac4:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aac6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400aaca:	bd70      	pop	{r4, r5, r6, pc}

2400aacc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400aacc:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aace:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aad2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aad4:	2b02      	cmp	r3, #2
2400aad6:	b2d8      	uxtb	r0, r3
2400aad8:	d005      	beq.n	2400aae6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400aada:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400aade:	2b01      	cmp	r3, #1
2400aae0:	b2dd      	uxtb	r5, r3
2400aae2:	d001      	beq.n	2400aae8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400aae4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aae6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aae8:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aaea:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aaec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aaf0:	f000 fdca 	bl	2400b688 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400aaf4:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400aaf6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400aafa:	bd38      	pop	{r3, r4, r5, pc}

2400aafc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400aafc:	6802      	ldr	r2, [r0, #0]
{
2400aafe:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400ab00:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ab02:	6991      	ldr	r1, [r2, #24]
2400ab04:	f041 0108 	orr.w	r1, r1, #8
2400ab08:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400ab0a:	6801      	ldr	r1, [r0, #0]
2400ab0c:	698a      	ldr	r2, [r1, #24]
2400ab0e:	f042 0210 	orr.w	r2, r2, #16
2400ab12:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400ab14:	6801      	ldr	r1, [r0, #0]
2400ab16:	680a      	ldr	r2, [r1, #0]
2400ab18:	f022 0201 	bic.w	r2, r2, #1
2400ab1c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400ab1e:	6801      	ldr	r1, [r0, #0]
2400ab20:	4a27      	ldr	r2, [pc, #156]	; (2400abc0 <SPI_CloseTransfer+0xc4>)
2400ab22:	690c      	ldr	r4, [r1, #16]
2400ab24:	4022      	ands	r2, r4
2400ab26:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ab28:	6801      	ldr	r1, [r0, #0]
2400ab2a:	688a      	ldr	r2, [r1, #8]
2400ab2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400ab30:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400ab32:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400ab36:	2a04      	cmp	r2, #4
2400ab38:	d001      	beq.n	2400ab3e <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400ab3a:	069c      	lsls	r4, r3, #26
2400ab3c:	d433      	bmi.n	2400aba6 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400ab3e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400ab42:	2a03      	cmp	r2, #3
2400ab44:	d001      	beq.n	2400ab4a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400ab46:	0659      	lsls	r1, r3, #25
2400ab48:	d421      	bmi.n	2400ab8e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400ab4a:	059a      	lsls	r2, r3, #22
2400ab4c:	d50a      	bpl.n	2400ab64 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ab4e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ab52:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ab54:	f042 0201 	orr.w	r2, r2, #1
2400ab58:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ab5c:	698a      	ldr	r2, [r1, #24]
2400ab5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400ab62:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400ab64:	05db      	lsls	r3, r3, #23
2400ab66:	d50a      	bpl.n	2400ab7e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab68:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab6c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab6e:	f043 0308 	orr.w	r3, r3, #8
2400ab72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab76:	6993      	ldr	r3, [r2, #24]
2400ab78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400ab7c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400ab7e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400ab80:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400ab84:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ab88:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400ab8c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ab8e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ab92:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ab94:	f042 0204 	orr.w	r2, r2, #4
2400ab98:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400ab9c:	698a      	ldr	r2, [r1, #24]
2400ab9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400aba2:	618a      	str	r2, [r1, #24]
2400aba4:	e7d1      	b.n	2400ab4a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400aba6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400abaa:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400abac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400abb0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400abb4:	698a      	ldr	r2, [r1, #24]
2400abb6:	f042 0220 	orr.w	r2, r2, #32
2400abba:	618a      	str	r2, [r1, #24]
2400abbc:	e7bf      	b.n	2400ab3e <SPI_CloseTransfer+0x42>
2400abbe:	bf00      	nop
2400abc0:	fffffc90 	.word	0xfffffc90

2400abc4 <HAL_SPI_Init>:
  if (hspi == NULL)
2400abc4:	2800      	cmp	r0, #0
2400abc6:	f000 80be 	beq.w	2400ad46 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abca:	4a62      	ldr	r2, [pc, #392]	; (2400ad54 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400abcc:	2100      	movs	r1, #0
{
2400abce:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abd0:	6803      	ldr	r3, [r0, #0]
2400abd2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400abd4:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abd6:	4293      	cmp	r3, r2
2400abd8:	d015      	beq.n	2400ac06 <HAL_SPI_Init+0x42>
2400abda:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400abde:	4293      	cmp	r3, r2
2400abe0:	d011      	beq.n	2400ac06 <HAL_SPI_Init+0x42>
2400abe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400abe6:	4293      	cmp	r3, r2
2400abe8:	68c2      	ldr	r2, [r0, #12]
2400abea:	f000 80a5 	beq.w	2400ad38 <HAL_SPI_Init+0x174>
2400abee:	2a0f      	cmp	r2, #15
2400abf0:	d807      	bhi.n	2400ac02 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400abf2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400abf4:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400abf6:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400abf8:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400abfa:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400abfe:	2a08      	cmp	r2, #8
2400ac00:	d914      	bls.n	2400ac2c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400ac02:	2001      	movs	r0, #1
}
2400ac04:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400ac06:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ac0a:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400ac0c:	4d51      	ldr	r5, [pc, #324]	; (2400ad54 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac0e:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
2400ac10:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400ac12:	4951      	ldr	r1, [pc, #324]	; (2400ad58 <HAL_SPI_Init+0x194>)
2400ac14:	428b      	cmp	r3, r1
2400ac16:	bf18      	it	ne
2400ac18:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
2400ac1a:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400ac1e:	d003      	beq.n	2400ac28 <HAL_SPI_Init+0x64>
2400ac20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400ac24:	428b      	cmp	r3, r1
2400ac26:	d101      	bne.n	2400ac2c <HAL_SPI_Init+0x68>
2400ac28:	2a10      	cmp	r2, #16
2400ac2a:	d8ea      	bhi.n	2400ac02 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400ac2c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400ac30:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400ac34:	2a00      	cmp	r2, #0
2400ac36:	d078      	beq.n	2400ad2a <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400ac38:	2202      	movs	r2, #2
2400ac3a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400ac3e:	681a      	ldr	r2, [r3, #0]
2400ac40:	f022 0201 	bic.w	r2, r2, #1
2400ac44:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400ac46:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac48:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400ac4a:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac4c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
2400ac50:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400ac52:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac56:	d058      	beq.n	2400ad0a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400ac58:	0258      	lsls	r0, r3, #9
2400ac5a:	d502      	bpl.n	2400ac62 <HAL_SPI_Init+0x9e>
2400ac5c:	68e3      	ldr	r3, [r4, #12]
2400ac5e:	2b06      	cmp	r3, #6
2400ac60:	d84c      	bhi.n	2400acfc <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ac62:	6813      	ldr	r3, [r2, #0]
2400ac64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400ac68:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400ac6a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400ac6c:	69e3      	ldr	r3, [r4, #28]
2400ac6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400ac70:	432b      	orrs	r3, r5
2400ac72:	6822      	ldr	r2, [r4, #0]
2400ac74:	4303      	orrs	r3, r0
2400ac76:	68e0      	ldr	r0, [r4, #12]
2400ac78:	4303      	orrs	r3, r0
2400ac7a:	430b      	orrs	r3, r1
2400ac7c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400ac7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400ac80:	69a0      	ldr	r0, [r4, #24]
2400ac82:	6822      	ldr	r2, [r4, #0]
2400ac84:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400ac88:	432b      	orrs	r3, r5
2400ac8a:	430b      	orrs	r3, r1
2400ac8c:	6921      	ldr	r1, [r4, #16]
2400ac8e:	4303      	orrs	r3, r0
2400ac90:	6960      	ldr	r0, [r4, #20]
2400ac92:	430b      	orrs	r3, r1
2400ac94:	6a21      	ldr	r1, [r4, #32]
2400ac96:	4303      	orrs	r3, r0
2400ac98:	6860      	ldr	r0, [r4, #4]
2400ac9a:	430b      	orrs	r3, r1
2400ac9c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400ac9e:	4303      	orrs	r3, r0
2400aca0:	68a0      	ldr	r0, [r4, #8]
2400aca2:	430b      	orrs	r3, r1
2400aca4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400aca6:	4303      	orrs	r3, r0
2400aca8:	430b      	orrs	r3, r1
2400acaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400acac:	430b      	orrs	r3, r1
2400acae:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400acb0:	6863      	ldr	r3, [r4, #4]
2400acb2:	b96b      	cbnz	r3, 2400acd0 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400acb4:	6822      	ldr	r2, [r4, #0]
2400acb6:	6893      	ldr	r3, [r2, #8]
2400acb8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400acbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400acc0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400acc2:	6822      	ldr	r2, [r4, #0]
2400acc4:	6893      	ldr	r3, [r2, #8]
2400acc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400acca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400acce:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400acd0:	6822      	ldr	r2, [r4, #0]
2400acd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400acd4:	f023 0301 	bic.w	r3, r3, #1
2400acd8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400acda:	6863      	ldr	r3, [r4, #4]
2400acdc:	025b      	lsls	r3, r3, #9
2400acde:	d506      	bpl.n	2400acee <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400ace0:	6822      	ldr	r2, [r4, #0]
2400ace2:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400ace4:	68d3      	ldr	r3, [r2, #12]
2400ace6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400acea:	430b      	orrs	r3, r1
2400acec:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400acee:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400acf0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400acf2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400acf6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400acfa:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400acfc:	6813      	ldr	r3, [r2, #0]
2400acfe:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400ad00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400ad04:	4303      	orrs	r3, r0
2400ad06:	6013      	str	r3, [r2, #0]
2400ad08:	e7af      	b.n	2400ac6a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ad0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400ad0e:	d01c      	beq.n	2400ad4a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400ad10:	2b00      	cmp	r3, #0
2400ad12:	d1a1      	bne.n	2400ac58 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400ad14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400ad16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2400ad1a:	d1a2      	bne.n	2400ac62 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400ad1c:	6813      	ldr	r3, [r2, #0]
2400ad1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400ad22:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ad24:	e9d4 2300 	ldrd	r2, r3, [r4]
2400ad28:	e796      	b.n	2400ac58 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400ad2a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400ad2c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400ad30:	f7f9 fa12 	bl	24004158 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400ad34:	6823      	ldr	r3, [r4, #0]
2400ad36:	e77f      	b.n	2400ac38 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ad38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ad3a:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ad3c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ad3e:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400ad40:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ad44:	e770      	b.n	2400ac28 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400ad46:	2001      	movs	r0, #1
}
2400ad48:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ad4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400ad4c:	2b00      	cmp	r3, #0
2400ad4e:	d0e5      	beq.n	2400ad1c <HAL_SPI_Init+0x158>
2400ad50:	e784      	b.n	2400ac5c <HAL_SPI_Init+0x98>
2400ad52:	bf00      	nop
2400ad54:	40013000 	.word	0x40013000
2400ad58:	40003800 	.word	0x40003800

2400ad5c <HAL_SPI_Receive_DMA>:
{
2400ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
2400ad5e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400ad62:	2b01      	cmp	r3, #1
2400ad64:	f000 80a9 	beq.w	2400aeba <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad68:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400ad6c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
2400ad6e:	2201      	movs	r2, #1
2400ad70:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad72:	b2de      	uxtb	r6, r3
2400ad74:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
2400ad76:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad7a:	f040 8093 	bne.w	2400aea4 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
2400ad7e:	2900      	cmp	r1, #0
2400ad80:	f000 808b 	beq.w	2400ae9a <HAL_SPI_Receive_DMA+0x13e>
2400ad84:	fab5 f385 	clz	r3, r5
2400ad88:	095b      	lsrs	r3, r3, #5
2400ad8a:	2d00      	cmp	r5, #0
2400ad8c:	f000 8085 	beq.w	2400ae9a <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400ad90:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2400ad92:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400ad94:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400ad96:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
2400ad9a:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2400ad9e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
2400ada2:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400ada4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
2400ada8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
2400adac:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400adb0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
2400adb4:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2400adb8:	d07a      	beq.n	2400aeb0 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
2400adba:	68d3      	ldr	r3, [r2, #12]
2400adbc:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400adc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400adc4:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400adc6:	68e3      	ldr	r3, [r4, #12]
2400adc8:	2b0f      	cmp	r3, #15
2400adca:	d861      	bhi.n	2400ae90 <HAL_SPI_Receive_DMA+0x134>
2400adcc:	2b07      	cmp	r3, #7
2400adce:	f200 8092 	bhi.w	2400aef6 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400add2:	6822      	ldr	r2, [r4, #0]
2400add4:	6893      	ldr	r3, [r2, #8]
2400add6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400adda:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2400addc:	68e3      	ldr	r3, [r4, #12]
2400adde:	2b07      	cmp	r3, #7
2400ade0:	d86e      	bhi.n	2400aec0 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400ade2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ade4:	699a      	ldr	r2, [r3, #24]
2400ade6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400adea:	d107      	bne.n	2400adfc <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400adec:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400adf0:	b292      	uxth	r2, r2
2400adf2:	3201      	adds	r2, #1
2400adf4:	0852      	lsrs	r2, r2, #1
2400adf6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400adfa:	699a      	ldr	r2, [r3, #24]
2400adfc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400ae00:	d106      	bne.n	2400ae10 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400ae02:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400ae06:	b292      	uxth	r2, r2
2400ae08:	3203      	adds	r2, #3
2400ae0a:	0892      	lsrs	r2, r2, #2
2400ae0c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400ae10:	4a3e      	ldr	r2, [pc, #248]	; (2400af0c <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400ae12:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2400ae14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
2400ae16:	4a3e      	ldr	r2, [pc, #248]	; (2400af10 <HAL_SPI_Receive_DMA+0x1b4>)
2400ae18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400ae1c:	4a3d      	ldr	r2, [pc, #244]	; (2400af14 <HAL_SPI_Receive_DMA+0x1b8>)
2400ae1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400ae22:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae24:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400ae26:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400ae2a:	6821      	ldr	r1, [r4, #0]
2400ae2c:	b29b      	uxth	r3, r3
2400ae2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400ae30:	3130      	adds	r1, #48	; 0x30
2400ae32:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400ae34:	f7fa f892 	bl	24004f5c <HAL_DMA_Start_IT>
2400ae38:	2800      	cmp	r0, #0
2400ae3a:	d150      	bne.n	2400aede <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400ae3c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400ae3e:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400ae40:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400ae42:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400ae44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400ae48:	4b33      	ldr	r3, [pc, #204]	; (2400af18 <HAL_SPI_Receive_DMA+0x1bc>)
2400ae4a:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400ae4e:	bf18      	it	ne
2400ae50:	432b      	orrne	r3, r5
2400ae52:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400ae54:	6822      	ldr	r2, [r4, #0]
2400ae56:	6893      	ldr	r3, [r2, #8]
2400ae58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400ae5c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
2400ae5e:	6822      	ldr	r2, [r4, #0]
2400ae60:	6913      	ldr	r3, [r2, #16]
2400ae62:	f443 7350 	orr.w	r3, r3, #832	; 0x340
2400ae66:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400ae68:	6822      	ldr	r2, [r4, #0]
2400ae6a:	6813      	ldr	r3, [r2, #0]
2400ae6c:	f043 0301 	orr.w	r3, r3, #1
2400ae70:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400ae72:	6863      	ldr	r3, [r4, #4]
2400ae74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400ae78:	d104      	bne.n	2400ae84 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400ae7a:	6822      	ldr	r2, [r4, #0]
2400ae7c:	6813      	ldr	r3, [r2, #0]
2400ae7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400ae82:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400ae84:	2300      	movs	r3, #0
  return errorcode;
2400ae86:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400ae88:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400ae8c:	4630      	mov	r0, r6
2400ae8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400ae90:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae92:	699b      	ldr	r3, [r3, #24]
2400ae94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ae98:	d09b      	beq.n	2400add2 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
2400ae9a:	2300      	movs	r3, #0
2400ae9c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400aea0:	4630      	mov	r0, r6
2400aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
2400aea4:	2300      	movs	r3, #0
    return errorcode;
2400aea6:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400aea8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400aeac:	4630      	mov	r0, r6
2400aeae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
2400aeb0:	6813      	ldr	r3, [r2, #0]
2400aeb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2400aeb6:	6013      	str	r3, [r2, #0]
2400aeb8:	e785      	b.n	2400adc6 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
2400aeba:	2602      	movs	r6, #2
}
2400aebc:	4630      	mov	r0, r6
2400aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400aec0:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400aec2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
2400aec4:	d8a4      	bhi.n	2400ae10 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400aec6:	699a      	ldr	r2, [r3, #24]
2400aec8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400aecc:	d1a0      	bne.n	2400ae10 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400aece:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400aed2:	b292      	uxth	r2, r2
2400aed4:	3201      	adds	r2, #1
2400aed6:	0852      	lsrs	r2, r2, #1
2400aed8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400aedc:	e798      	b.n	2400ae10 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400aede:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400aee2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400aee4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400aee8:	f043 0310 	orr.w	r3, r3, #16
2400aeec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400aef0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400aef4:	e7d4      	b.n	2400aea0 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400aef6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400aef8:	699b      	ldr	r3, [r3, #24]
2400aefa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400aefe:	f43f af68 	beq.w	2400add2 <HAL_SPI_Receive_DMA+0x76>
2400af02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400af06:	d1c8      	bne.n	2400ae9a <HAL_SPI_Receive_DMA+0x13e>
2400af08:	e763      	b.n	2400add2 <HAL_SPI_Receive_DMA+0x76>
2400af0a:	bf00      	nop
2400af0c:	2400b1ad 	.word	0x2400b1ad
2400af10:	2400b15d 	.word	0x2400b15d
2400af14:	2400b1c9 	.word	0x2400b1c9
2400af18:	ffff0000 	.word	0xffff0000

2400af1c <HAL_SPI_TransmitReceive_DMA>:
{
2400af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400af20:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400af22:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400af26:	2b01      	cmp	r3, #1
2400af28:	f000 809a 	beq.w	2400b060 <HAL_SPI_TransmitReceive_DMA+0x144>
2400af2c:	2301      	movs	r3, #1
2400af2e:	4604      	mov	r4, r0
2400af30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400af34:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400af38:	2b01      	cmp	r3, #1
2400af3a:	b2de      	uxtb	r6, r3
2400af3c:	d158      	bne.n	2400aff0 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400af3e:	2d00      	cmp	r5, #0
2400af40:	bf18      	it	ne
2400af42:	2a00      	cmpne	r2, #0
2400af44:	d04e      	beq.n	2400afe4 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400af46:	fab1 f381 	clz	r3, r1
2400af4a:	095b      	lsrs	r3, r3, #5
2400af4c:	2900      	cmp	r1, #0
2400af4e:	d049      	beq.n	2400afe4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400af50:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400af52:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400af54:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400af56:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400af58:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400af5c:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400af60:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400af64:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400af68:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400af6c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400af70:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400af74:	68d3      	ldr	r3, [r2, #12]
2400af76:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400af7a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400af7c:	6802      	ldr	r2, [r0, #0]
2400af7e:	6893      	ldr	r3, [r2, #8]
2400af80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400af84:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400af86:	68c3      	ldr	r3, [r0, #12]
2400af88:	2b0f      	cmp	r3, #15
2400af8a:	d938      	bls.n	2400affe <HAL_SPI_TransmitReceive_DMA+0xe2>
2400af8c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400af8e:	699a      	ldr	r2, [r3, #24]
2400af90:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400af94:	d126      	bne.n	2400afe4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400af96:	4a6c      	ldr	r2, [pc, #432]	; (2400b148 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400af98:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400af9c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400b154 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400afa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400afa2:	4a6a      	ldr	r2, [pc, #424]	; (2400b14c <HAL_SPI_TransmitReceive_DMA+0x230>)
2400afa4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400afa6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400afa8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400afaa:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400afae:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400afb0:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400afb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400afb8:	6821      	ldr	r1, [r4, #0]
2400afba:	b29b      	uxth	r3, r3
2400afbc:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400afbe:	3130      	adds	r1, #48	; 0x30
2400afc0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400afc2:	f7f9 ffcb 	bl	24004f5c <HAL_DMA_Start_IT>
2400afc6:	4607      	mov	r7, r0
2400afc8:	2800      	cmp	r0, #0
2400afca:	d04d      	beq.n	2400b068 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400afcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400afd0:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400afd2:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400afd6:	f043 0310 	orr.w	r3, r3, #16
2400afda:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400afde:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400afe2:	e002      	b.n	2400afea <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400afe4:	2300      	movs	r3, #0
2400afe6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400afea:	4630      	mov	r0, r6
2400afec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400aff0:	2300      	movs	r3, #0
    return errorcode;
2400aff2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400aff4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400aff8:	4630      	mov	r0, r6
2400affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400affe:	2b07      	cmp	r3, #7
2400b000:	d87f      	bhi.n	2400b102 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b002:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400b004:	6993      	ldr	r3, [r2, #24]
2400b006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b00a:	d107      	bne.n	2400b01c <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b00c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400b010:	b29b      	uxth	r3, r3
2400b012:	3301      	adds	r3, #1
2400b014:	085b      	lsrs	r3, r3, #1
2400b016:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b01a:	6993      	ldr	r3, [r2, #24]
2400b01c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b020:	d106      	bne.n	2400b030 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400b022:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400b026:	b29b      	uxth	r3, r3
2400b028:	3303      	adds	r3, #3
2400b02a:	089b      	lsrs	r3, r3, #2
2400b02c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b030:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b032:	699a      	ldr	r2, [r3, #24]
2400b034:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b038:	d107      	bne.n	2400b04a <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b03a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b03e:	b292      	uxth	r2, r2
2400b040:	3201      	adds	r2, #1
2400b042:	0852      	lsrs	r2, r2, #1
2400b044:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b048:	699a      	ldr	r2, [r3, #24]
2400b04a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b04e:	d1a2      	bne.n	2400af96 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400b050:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b054:	b292      	uxth	r2, r2
2400b056:	3203      	adds	r2, #3
2400b058:	0892      	lsrs	r2, r2, #2
2400b05a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b05e:	e79a      	b.n	2400af96 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400b060:	2602      	movs	r6, #2
}
2400b062:	4630      	mov	r0, r6
2400b064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b068:	6822      	ldr	r2, [r4, #0]
2400b06a:	6893      	ldr	r3, [r2, #8]
2400b06c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b070:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400b072:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b074:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400b076:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b078:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400b07a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b07c:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400b07e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b080:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400b084:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400b088:	6822      	ldr	r2, [r4, #0]
2400b08a:	b29b      	uxth	r3, r3
2400b08c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b08e:	3220      	adds	r2, #32
2400b090:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b092:	f7f9 ff63 	bl	24004f5c <HAL_DMA_Start_IT>
2400b096:	bb40      	cbnz	r0, 2400b0ea <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b098:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b09a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b09c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b09e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b0a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b0a4:	4b2a      	ldr	r3, [pc, #168]	; (2400b150 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400b0a6:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b0aa:	bf18      	it	ne
2400b0ac:	432b      	orrne	r3, r5
2400b0ae:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400b0b0:	6822      	ldr	r2, [r4, #0]
2400b0b2:	6893      	ldr	r3, [r2, #8]
2400b0b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400b0b8:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400b0ba:	6822      	ldr	r2, [r4, #0]
2400b0bc:	6913      	ldr	r3, [r2, #16]
2400b0be:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400b0c2:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b0c4:	6822      	ldr	r2, [r4, #0]
2400b0c6:	6813      	ldr	r3, [r2, #0]
2400b0c8:	f043 0301 	orr.w	r3, r3, #1
2400b0cc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b0ce:	6863      	ldr	r3, [r4, #4]
2400b0d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b0d4:	d104      	bne.n	2400b0e0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b0d6:	6822      	ldr	r2, [r4, #0]
2400b0d8:	6813      	ldr	r3, [r2, #0]
2400b0da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b0de:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b0e0:	2300      	movs	r3, #0
  return errorcode;
2400b0e2:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b0e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400b0e8:	e77f      	b.n	2400afea <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b0ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b0ee:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b0f0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b0f4:	f043 0310 	orr.w	r3, r3, #16
2400b0f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b0fc:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b100:	e773      	b.n	2400afea <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b102:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b104:	699a      	ldr	r2, [r3, #24]
2400b106:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b10a:	d003      	beq.n	2400b114 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400b10c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b110:	f47f af68 	bne.w	2400afe4 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b114:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b116:	6989      	ldr	r1, [r1, #24]
2400b118:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b11c:	d107      	bne.n	2400b12e <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b11e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400b122:	b292      	uxth	r2, r2
2400b124:	3201      	adds	r2, #1
2400b126:	0852      	lsrs	r2, r2, #1
2400b128:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b12c:	699a      	ldr	r2, [r3, #24]
2400b12e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b132:	f47f af30 	bne.w	2400af96 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b136:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b13a:	b292      	uxth	r2, r2
2400b13c:	3201      	adds	r2, #1
2400b13e:	0852      	lsrs	r2, r2, #1
2400b140:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b144:	e727      	b.n	2400af96 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400b146:	bf00      	nop
2400b148:	2400b1b9 	.word	0x2400b1b9
2400b14c:	2400b185 	.word	0x2400b185
2400b150:	ffff0000 	.word	0xffff0000
2400b154:	2400b1c9 	.word	0x2400b1c9

2400b158 <HAL_SPI_TxCpltCallback>:
2400b158:	4770      	bx	lr
2400b15a:	bf00      	nop

2400b15c <SPI_DMAReceiveCplt>:
{
2400b15c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b15e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b160:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b164:	2b07      	cmp	r3, #7
2400b166:	d009      	beq.n	2400b17c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
2400b168:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b16a:	69db      	ldr	r3, [r3, #28]
2400b16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b170:	d005      	beq.n	2400b17e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b172:	6802      	ldr	r2, [r0, #0]
2400b174:	6913      	ldr	r3, [r2, #16]
2400b176:	f043 0308 	orr.w	r3, r3, #8
2400b17a:	6113      	str	r3, [r2, #16]
}
2400b17c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
2400b17e:	f022 faeb 	bl	2402d758 <__HAL_SPI_RxCpltCallback_veneer>
}
2400b182:	bd08      	pop	{r3, pc}

2400b184 <SPI_DMATransmitReceiveCplt>:
{
2400b184:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b186:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b188:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b18c:	2b07      	cmp	r3, #7
2400b18e:	d009      	beq.n	2400b1a4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b190:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400b192:	69db      	ldr	r3, [r3, #28]
2400b194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b198:	d005      	beq.n	2400b1a6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b19a:	6802      	ldr	r2, [r0, #0]
2400b19c:	6913      	ldr	r3, [r2, #16]
2400b19e:	f043 0308 	orr.w	r3, r3, #8
2400b1a2:	6113      	str	r3, [r2, #16]
}
2400b1a4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400b1a6:	f022 fab7 	bl	2402d718 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400b1aa:	bd08      	pop	{r3, pc}

2400b1ac <SPI_DMAHalfReceiveCplt>:
{
2400b1ac:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
2400b1ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b1b0:	f022 faa6 	bl	2402d700 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
2400b1b4:	bd08      	pop	{r3, pc}
2400b1b6:	bf00      	nop

2400b1b8 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400b1b8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400b1ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b1bc:	f022 fac4 	bl	2402d748 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400b1c0:	bd08      	pop	{r3, pc}
2400b1c2:	bf00      	nop

2400b1c4 <HAL_SPI_ErrorCallback>:
2400b1c4:	4770      	bx	lr
2400b1c6:	bf00      	nop

2400b1c8 <SPI_DMAError>:
{
2400b1c8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b1ca:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400b1cc:	f7fa ff2a 	bl	24006024 <HAL_DMA_GetError>
2400b1d0:	2802      	cmp	r0, #2
2400b1d2:	d100      	bne.n	2400b1d6 <SPI_DMAError+0xe>
}
2400b1d4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400b1d6:	6822      	ldr	r2, [r4, #0]
2400b1d8:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b1da:	6991      	ldr	r1, [r2, #24]
2400b1dc:	f041 0108 	orr.w	r1, r1, #8
2400b1e0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b1e2:	6821      	ldr	r1, [r4, #0]
2400b1e4:	698a      	ldr	r2, [r1, #24]
2400b1e6:	f042 0210 	orr.w	r2, r2, #16
2400b1ea:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400b1ec:	6821      	ldr	r1, [r4, #0]
2400b1ee:	680a      	ldr	r2, [r1, #0]
2400b1f0:	f022 0201 	bic.w	r2, r2, #1
2400b1f4:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b1f6:	6821      	ldr	r1, [r4, #0]
2400b1f8:	4a2c      	ldr	r2, [pc, #176]	; (2400b2ac <SPI_DMAError+0xe4>)
2400b1fa:	6908      	ldr	r0, [r1, #16]
2400b1fc:	4002      	ands	r2, r0
2400b1fe:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b200:	6821      	ldr	r1, [r4, #0]
2400b202:	688a      	ldr	r2, [r1, #8]
2400b204:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b208:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b20a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b20e:	2a04      	cmp	r2, #4
2400b210:	d001      	beq.n	2400b216 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b212:	0698      	lsls	r0, r3, #26
2400b214:	d43d      	bmi.n	2400b292 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b216:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b21a:	2a03      	cmp	r2, #3
2400b21c:	d001      	beq.n	2400b222 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b21e:	0659      	lsls	r1, r3, #25
2400b220:	d42b      	bmi.n	2400b27a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b222:	059a      	lsls	r2, r3, #22
2400b224:	d50a      	bpl.n	2400b23c <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b226:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b22a:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b22c:	f042 0201 	orr.w	r2, r2, #1
2400b230:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b234:	698a      	ldr	r2, [r1, #24]
2400b236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b23a:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b23c:	05db      	lsls	r3, r3, #23
2400b23e:	d50a      	bpl.n	2400b256 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b240:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b244:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b246:	f043 0308 	orr.w	r3, r3, #8
2400b24a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b24e:	6993      	ldr	r3, [r2, #24]
2400b250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b254:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b256:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400b258:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400b25a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400b25c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b260:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b264:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b268:	f043 0310 	orr.w	r3, r3, #16
2400b26c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b270:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400b274:	f7ff ffa6 	bl	2400b1c4 <HAL_SPI_ErrorCallback>
}
2400b278:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b27a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b27e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b280:	f042 0204 	orr.w	r2, r2, #4
2400b284:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b288:	698a      	ldr	r2, [r1, #24]
2400b28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b28e:	618a      	str	r2, [r1, #24]
2400b290:	e7c7      	b.n	2400b222 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b292:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b296:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b29c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b2a0:	698a      	ldr	r2, [r1, #24]
2400b2a2:	f042 0220 	orr.w	r2, r2, #32
2400b2a6:	618a      	str	r2, [r1, #24]
2400b2a8:	e7b5      	b.n	2400b216 <SPI_DMAError+0x4e>
2400b2aa:	bf00      	nop
2400b2ac:	fffffc90 	.word	0xfffffc90

2400b2b0 <SPI_DMAAbortOnError>:
{
2400b2b0:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400b2b2:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b2b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400b2b6:	2300      	movs	r3, #0
2400b2b8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b2bc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400b2c0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400b2c4:	f7ff ff7e 	bl	2400b1c4 <HAL_SPI_ErrorCallback>
}
2400b2c8:	bd08      	pop	{r3, pc}
2400b2ca:	bf00      	nop

2400b2cc <HAL_SPI_SuspendCallback>:
2400b2cc:	4770      	bx	lr
2400b2ce:	bf00      	nop

2400b2d0 <HAL_SPI_IRQHandler>:
{
2400b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
2400b2d4:	6806      	ldr	r6, [r0, #0]
{
2400b2d6:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400b2d8:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400b2da:	6973      	ldr	r3, [r6, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400b2dc:	f8d6 8008 	ldr.w	r8, [r6, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b2e0:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400b2e2:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400b2e6:	ea02 0903 	and.w	r9, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400b2ea:	b2ed      	uxtb	r5, r5
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b2ec:	d502      	bpl.n	2400b2f4 <HAL_SPI_IRQHandler+0x24>
2400b2ee:	0713      	lsls	r3, r2, #28
2400b2f0:	f100 8091 	bmi.w	2400b416 <HAL_SPI_IRQHandler+0x146>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400b2f4:	f009 0364 	and.w	r3, r9, #100	; 0x64
2400b2f8:	2b04      	cmp	r3, #4
2400b2fa:	f000 8084 	beq.w	2400b406 <HAL_SPI_IRQHandler+0x136>
  uint32_t handled  = 0UL;
2400b2fe:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400b300:	f009 0745 	and.w	r7, r9, #69	; 0x45
2400b304:	2f01      	cmp	r7, #1
2400b306:	d103      	bne.n	2400b310 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
2400b308:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b30a:	4620      	mov	r0, r4
2400b30c:	4798      	blx	r3
    handled = 1UL;
2400b30e:	463b      	mov	r3, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b310:	f009 0226 	and.w	r2, r9, #38	; 0x26
2400b314:	2a02      	cmp	r2, #2
2400b316:	d066      	beq.n	2400b3e6 <HAL_SPI_IRQHandler+0x116>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b318:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b31c:	d144      	bne.n	2400b3a8 <HAL_SPI_IRQHandler+0xd8>
  if (handled != 0UL)
2400b31e:	2b00      	cmp	r3, #0
2400b320:	d140      	bne.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400b322:	f019 0f08 	tst.w	r9, #8
2400b326:	d03a      	beq.n	2400b39e <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b328:	6822      	ldr	r2, [r4, #0]
2400b32a:	6993      	ldr	r3, [r2, #24]
2400b32c:	f043 0308 	orr.w	r3, r3, #8
2400b330:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b332:	6822      	ldr	r2, [r4, #0]
2400b334:	6993      	ldr	r3, [r2, #24]
2400b336:	f043 0310 	orr.w	r3, r3, #16
2400b33a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b33c:	6822      	ldr	r2, [r4, #0]
2400b33e:	6993      	ldr	r3, [r2, #24]
2400b340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b344:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b346:	6822      	ldr	r2, [r4, #0]
2400b348:	6913      	ldr	r3, [r2, #16]
2400b34a:	f023 0308 	bic.w	r3, r3, #8
2400b34e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b350:	6823      	ldr	r3, [r4, #0]
2400b352:	689b      	ldr	r3, [r3, #8]
2400b354:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400b358:	d12f      	bne.n	2400b3ba <HAL_SPI_IRQHandler+0xea>
      while (hspi->RxXferCount != 0UL)
2400b35a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b35e:	b29b      	uxth	r3, r3
2400b360:	b35b      	cbz	r3, 2400b3ba <HAL_SPI_IRQHandler+0xea>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400b362:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b364:	e00f      	b.n	2400b386 <HAL_SPI_IRQHandler+0xb6>
2400b366:	6823      	ldr	r3, [r4, #0]
2400b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b36a:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b36c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b36e:	3204      	adds	r2, #4
2400b370:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400b372:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b376:	3b01      	subs	r3, #1
2400b378:	b29b      	uxth	r3, r3
2400b37a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400b37e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b382:	b29b      	uxth	r3, r3
2400b384:	b1cb      	cbz	r3, 2400b3ba <HAL_SPI_IRQHandler+0xea>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400b386:	68e3      	ldr	r3, [r4, #12]
2400b388:	2b0f      	cmp	r3, #15
2400b38a:	d8ec      	bhi.n	2400b366 <HAL_SPI_IRQHandler+0x96>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400b38c:	2b07      	cmp	r3, #7
2400b38e:	f240 80c4 	bls.w	2400b51a <HAL_SPI_IRQHandler+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400b392:	8e33      	ldrh	r3, [r6, #48]	; 0x30
2400b394:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400b396:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b398:	3202      	adds	r2, #2
2400b39a:	6662      	str	r2, [r4, #100]	; 0x64
2400b39c:	e7e9      	b.n	2400b372 <HAL_SPI_IRQHandler+0xa2>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400b39e:	f419 7f58 	tst.w	r9, #864	; 0x360
2400b3a2:	d140      	bne.n	2400b426 <HAL_SPI_IRQHandler+0x156>
}
2400b3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b3a8:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b3aa:	2200      	movs	r2, #0
2400b3ac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b3b0:	698a      	ldr	r2, [r1, #24]
2400b3b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2400b3b6:	618a      	str	r2, [r1, #24]
2400b3b8:	e7b1      	b.n	2400b31e <HAL_SPI_IRQHandler+0x4e>
    SPI_CloseTransfer(hspi);
2400b3ba:	4620      	mov	r0, r4
2400b3bc:	f7ff fb9e 	bl	2400aafc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400b3c0:	2301      	movs	r3, #1
2400b3c2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b3c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b3ca:	2b00      	cmp	r3, #0
2400b3cc:	f040 80a1 	bne.w	2400b512 <HAL_SPI_IRQHandler+0x242>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400b3d0:	2d05      	cmp	r5, #5
2400b3d2:	f000 80aa 	beq.w	2400b52a <HAL_SPI_IRQHandler+0x25a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400b3d6:	2d04      	cmp	r5, #4
2400b3d8:	f000 80aa 	beq.w	2400b530 <HAL_SPI_IRQHandler+0x260>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400b3dc:	2d03      	cmp	r5, #3
2400b3de:	d1e1      	bne.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
2400b3e0:	f7ff feba 	bl	2400b158 <HAL_SPI_TxCpltCallback>
2400b3e4:	e7de      	b.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
2400b3e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b3e8:	4620      	mov	r0, r4
2400b3ea:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b3ec:	f419 6f80 	tst.w	r9, #1024	; 0x400
2400b3f0:	d0d8      	beq.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b3f2:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b3f4:	2300      	movs	r3, #0
2400b3f6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b3fa:	6993      	ldr	r3, [r2, #24]
2400b3fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b400:	6193      	str	r3, [r2, #24]
}
2400b402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
2400b406:	4620      	mov	r0, r4
2400b408:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b40a:	4798      	blx	r3
    hspi->RxISR(hspi);
2400b40c:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b40e:	4620      	mov	r0, r4
2400b410:	4798      	blx	r3
    handled = 1UL;
2400b412:	2301      	movs	r3, #1
2400b414:	e774      	b.n	2400b300 <HAL_SPI_IRQHandler+0x30>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b416:	69b3      	ldr	r3, [r6, #24]
2400b418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b41c:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
2400b41e:	f7ff ff55 	bl	2400b2cc <HAL_SPI_SuspendCallback>
}
2400b422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400b426:	f019 0f40 	tst.w	r9, #64	; 0x40
2400b42a:	d00a      	beq.n	2400b442 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b42c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b430:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b432:	f043 0304 	orr.w	r3, r3, #4
2400b436:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b43a:	6993      	ldr	r3, [r2, #24]
2400b43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b440:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400b442:	f419 7f00 	tst.w	r9, #512	; 0x200
2400b446:	d00a      	beq.n	2400b45e <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b448:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b44c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b44e:	f043 0301 	orr.w	r3, r3, #1
2400b452:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b456:	6993      	ldr	r3, [r2, #24]
2400b458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b45c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400b45e:	f419 7f80 	tst.w	r9, #256	; 0x100
2400b462:	d00a      	beq.n	2400b47a <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b464:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b468:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b46a:	f043 0308 	orr.w	r3, r3, #8
2400b46e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b472:	6993      	ldr	r3, [r2, #24]
2400b474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b478:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400b47a:	f019 0f20 	tst.w	r9, #32
2400b47e:	d00a      	beq.n	2400b496 <HAL_SPI_IRQHandler+0x1c6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b480:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b484:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b48a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b48e:	6993      	ldr	r3, [r2, #24]
2400b490:	f043 0320 	orr.w	r3, r3, #32
2400b494:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b496:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b49a:	2b00      	cmp	r3, #0
2400b49c:	d082      	beq.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
2400b49e:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b4a0:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b4a4:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b4a6:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b4aa:	f023 0301 	bic.w	r3, r3, #1
2400b4ae:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400b4b0:	6822      	ldr	r2, [r4, #0]
2400b4b2:	4b21      	ldr	r3, [pc, #132]	; (2400b538 <HAL_SPI_IRQHandler+0x268>)
2400b4b4:	6911      	ldr	r1, [r2, #16]
2400b4b6:	ea03 0301 	and.w	r3, r3, r1
2400b4ba:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b4bc:	d125      	bne.n	2400b50a <HAL_SPI_IRQHandler+0x23a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b4be:	6822      	ldr	r2, [r4, #0]
2400b4c0:	6893      	ldr	r3, [r2, #8]
2400b4c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b4c6:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400b4c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b4ca:	b15b      	cbz	r3, 2400b4e4 <HAL_SPI_IRQHandler+0x214>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400b4cc:	4a1b      	ldr	r2, [pc, #108]	; (2400b53c <HAL_SPI_IRQHandler+0x26c>)
2400b4ce:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400b4d0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b4d2:	f7fa f80f 	bl	240054f4 <HAL_DMA_Abort_IT>
2400b4d6:	b128      	cbz	r0, 2400b4e4 <HAL_SPI_IRQHandler+0x214>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b4d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b4e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400b4e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b4e6:	2b00      	cmp	r3, #0
2400b4e8:	f43f af5c 	beq.w	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400b4ec:	4a13      	ldr	r2, [pc, #76]	; (2400b53c <HAL_SPI_IRQHandler+0x26c>)
2400b4ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400b4f0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b4f2:	f7f9 ffff 	bl	240054f4 <HAL_DMA_Abort_IT>
2400b4f6:	2800      	cmp	r0, #0
2400b4f8:	f43f af54 	beq.w	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b4fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b504:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b508:	e74c      	b.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
2400b50a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400b50c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400b50e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400b512:	f7ff fe57 	bl	2400b1c4 <HAL_SPI_ErrorCallback>
}
2400b516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400b51a:	6823      	ldr	r3, [r4, #0]
2400b51c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400b520:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400b522:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b524:	3201      	adds	r2, #1
2400b526:	6662      	str	r2, [r4, #100]	; 0x64
2400b528:	e723      	b.n	2400b372 <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
2400b52a:	f022 f8f5 	bl	2402d718 <__HAL_SPI_TxRxCpltCallback_veneer>
2400b52e:	e739      	b.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
2400b530:	f022 f912 	bl	2402d758 <__HAL_SPI_RxCpltCallback_veneer>
2400b534:	e736      	b.n	2400b3a4 <HAL_SPI_IRQHandler+0xd4>
2400b536:	bf00      	nop
2400b538:	fffffc94 	.word	0xfffffc94
2400b53c:	2400b2b1 	.word	0x2400b2b1

2400b540 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b540:	680b      	ldr	r3, [r1, #0]
{
2400b542:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b544:	b9d3      	cbnz	r3, 2400b57c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b546:	6804      	ldr	r4, [r0, #0]
2400b548:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400b54c:	684a      	ldr	r2, [r1, #4]
2400b54e:	4023      	ands	r3, r4
2400b550:	4313      	orrs	r3, r2
2400b552:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b556:	4323      	orrs	r3, r4
2400b558:	4313      	orrs	r3, r2
2400b55a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400b55e:	4323      	orrs	r3, r4
2400b560:	4313      	orrs	r3, r2
2400b562:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400b566:	4323      	orrs	r3, r4
2400b568:	4313      	orrs	r3, r2
2400b56a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400b56e:	4323      	orrs	r3, r4
2400b570:	4313      	orrs	r3, r2
2400b572:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400b574:	2000      	movs	r0, #0
2400b576:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b57a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b57c:	6802      	ldr	r2, [r0, #0]
2400b57e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400b582:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400b586:	4322      	orrs	r2, r4
2400b588:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400b58a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b58c:	4b0a      	ldr	r3, [pc, #40]	; (2400b5b8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b58e:	4322      	orrs	r2, r4
2400b590:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b592:	6842      	ldr	r2, [r0, #4]
2400b594:	4013      	ands	r3, r2
2400b596:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400b59a:	4323      	orrs	r3, r4
2400b59c:	4313      	orrs	r3, r2
2400b59e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400b5a2:	4323      	orrs	r3, r4
2400b5a4:	4313      	orrs	r3, r2
2400b5a6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400b5aa:	4323      	orrs	r3, r4
2400b5ac:	4313      	orrs	r3, r2
2400b5ae:	6043      	str	r3, [r0, #4]
}
2400b5b0:	2000      	movs	r0, #0
2400b5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b5b6:	4770      	bx	lr
2400b5b8:	ffff8000 	.word	0xffff8000

2400b5bc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400b5bc:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400b5be:	bb02      	cbnz	r2, 2400b602 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b5c0:	6883      	ldr	r3, [r0, #8]
2400b5c2:	e9d1 2400 	ldrd	r2, r4, [r1]
2400b5c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b5ca:	3c01      	subs	r4, #1
2400b5cc:	3a01      	subs	r2, #1
2400b5ce:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400b5d2:	4313      	orrs	r3, r2
2400b5d4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
2400b5d8:	3a01      	subs	r2, #1
2400b5da:	3c01      	subs	r4, #1
2400b5dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400b5e0:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
2400b5e4:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
2400b5e8:	6989      	ldr	r1, [r1, #24]
2400b5ea:	3b01      	subs	r3, #1
2400b5ec:	3c01      	subs	r4, #1
2400b5ee:	3901      	subs	r1, #1
2400b5f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
2400b5f4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
2400b5f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400b5fc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400b5fe:	2000      	movs	r0, #0
2400b600:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b602:	6885      	ldr	r5, [r0, #8]
2400b604:	68ca      	ldr	r2, [r1, #12]
2400b606:	4b13      	ldr	r3, [pc, #76]	; (2400b654 <FMC_SDRAM_Timing_Init+0x98>)
2400b608:	1e54      	subs	r4, r2, #1
2400b60a:	694a      	ldr	r2, [r1, #20]
2400b60c:	402b      	ands	r3, r5
2400b60e:	3a01      	subs	r2, #1
2400b610:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400b614:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400b618:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400b61a:	68c3      	ldr	r3, [r0, #12]
2400b61c:	e9d1 4200 	ldrd	r4, r2, [r1]
2400b620:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b624:	3a01      	subs	r2, #1
2400b626:	3c01      	subs	r4, #1
2400b628:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400b62c:	ea43 0204 	orr.w	r2, r3, r4
2400b630:	688c      	ldr	r4, [r1, #8]
2400b632:	690b      	ldr	r3, [r1, #16]
2400b634:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
2400b638:	6989      	ldr	r1, [r1, #24]
2400b63a:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400b63e:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
2400b642:	3901      	subs	r1, #1
2400b644:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
2400b648:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400b64c:	60c3      	str	r3, [r0, #12]
}
2400b64e:	2000      	movs	r0, #0
2400b650:	bd30      	pop	{r4, r5, pc}
2400b652:	bf00      	nop
2400b654:	ff0f0fff 	.word	0xff0f0fff

2400b658 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400b658:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b65a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400b65e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b660:	6900      	ldr	r0, [r0, #16]
2400b662:	4323      	orrs	r3, r4
2400b664:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400b668:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400b66c:	4c05      	ldr	r4, [pc, #20]	; (2400b684 <FMC_SDRAM_SendCommand+0x2c>)
2400b66e:	3901      	subs	r1, #1
2400b670:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400b672:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b674:	4323      	orrs	r3, r4
2400b676:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400b67a:	6113      	str	r3, [r2, #16]
}
2400b67c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b680:	4770      	bx	lr
2400b682:	bf00      	nop
2400b684:	ffc00000 	.word	0xffc00000

2400b688 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400b688:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b68a:	4b05      	ldr	r3, [pc, #20]	; (2400b6a0 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400b68c:	2000      	movs	r0, #0
{
2400b68e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b690:	6954      	ldr	r4, [r2, #20]
2400b692:	4023      	ands	r3, r4
2400b694:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400b698:	6151      	str	r1, [r2, #20]
}
2400b69a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b69e:	4770      	bx	lr
2400b6a0:	ffffc001 	.word	0xffffc001

2400b6a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400b6a4:	b084      	sub	sp, #16
2400b6a6:	b410      	push	{r4}
2400b6a8:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400b6ac:	4614      	mov	r4, r2
{
2400b6ae:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400b6b2:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400b6b4:	9904      	ldr	r1, [sp, #16]
{
2400b6b6:	4602      	mov	r2, r0
             Init.BusWide             | \
2400b6b8:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400b6ba:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b6bc:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400b6be:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400b6c0:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400b6c2:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400b6c4:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400b6c6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b6c8:	4903      	ldr	r1, [pc, #12]	; (2400b6d8 <SDMMC_Init+0x34>)
2400b6ca:	4021      	ands	r1, r4
2400b6cc:	430b      	orrs	r3, r1
2400b6ce:	6053      	str	r3, [r2, #4]
}
2400b6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b6d4:	b004      	add	sp, #16
2400b6d6:	4770      	bx	lr
2400b6d8:	ffc02c00 	.word	0xffc02c00

2400b6dc <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400b6dc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400b6e0:	4770      	bx	lr
2400b6e2:	bf00      	nop

2400b6e4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400b6e4:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400b6e6:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400b6e8:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400b6ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400b6ee:	4770      	bx	lr

2400b6f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400b6f0:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400b6f2:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400b6f4:	681a      	ldr	r2, [r3, #0]
2400b6f6:	f042 0203 	orr.w	r2, r2, #3
2400b6fa:	601a      	str	r2, [r3, #0]
}
2400b6fc:	4770      	bx	lr
2400b6fe:	bf00      	nop

2400b700 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400b700:	6800      	ldr	r0, [r0, #0]
}
2400b702:	f000 0003 	and.w	r0, r0, #3
2400b706:	4770      	bx	lr

2400b708 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400b708:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400b70a:	5840      	ldr	r0, [r0, r1]
}
2400b70c:	4770      	bx	lr
2400b70e:	bf00      	nop

2400b710 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400b710:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b712:	680b      	ldr	r3, [r1, #0]
{
2400b714:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b716:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400b718:	684b      	ldr	r3, [r1, #4]
2400b71a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400b71c:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b71e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400b720:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400b724:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400b726:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b728:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400b72c:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400b72e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400b730:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b732:	430b      	orrs	r3, r1
2400b734:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400b736:	bc30      	pop	{r4, r5}
2400b738:	4770      	bx	lr
2400b73a:	bf00      	nop

2400b73c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b73c:	4a4c      	ldr	r2, [pc, #304]	; (2400b870 <SDMMC_CmdBlockLength+0x134>)
2400b73e:	4b4d      	ldr	r3, [pc, #308]	; (2400b874 <SDMMC_CmdBlockLength+0x138>)
{
2400b740:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b742:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b744:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b746:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b74a:	68c1      	ldr	r1, [r0, #12]
2400b74c:	4c4a      	ldr	r4, [pc, #296]	; (2400b878 <SDMMC_CmdBlockLength+0x13c>)
2400b74e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b752:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b754:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b756:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b75a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b75c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b760:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
2400b762:	b14a      	cbz	r2, 2400b778 <SDMMC_CmdBlockLength+0x3c>
2400b764:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b766:	4945      	ldr	r1, [pc, #276]	; (2400b87c <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
2400b768:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400b76a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b76c:	420a      	tst	r2, r1
2400b76e:	d001      	beq.n	2400b774 <SDMMC_CmdBlockLength+0x38>
2400b770:	0492      	lsls	r2, r2, #18
2400b772:	d507      	bpl.n	2400b784 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
2400b774:	1c5c      	adds	r4, r3, #1
2400b776:	d1f7      	bne.n	2400b768 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400b778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400b77c:	4618      	mov	r0, r3
2400b77e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b782:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b784:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b786:	075c      	lsls	r4, r3, #29
2400b788:	d43d      	bmi.n	2400b806 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b78a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b78c:	f013 0301 	ands.w	r3, r3, #1
2400b790:	d134      	bne.n	2400b7fc <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b792:	4b3b      	ldr	r3, [pc, #236]	; (2400b880 <SDMMC_CmdBlockLength+0x144>)
2400b794:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b796:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b798:	b2db      	uxtb	r3, r3
2400b79a:	2b10      	cmp	r3, #16
2400b79c:	d131      	bne.n	2400b802 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400b79e:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b7a0:	4b38      	ldr	r3, [pc, #224]	; (2400b884 <SDMMC_CmdBlockLength+0x148>)
2400b7a2:	4013      	ands	r3, r2
2400b7a4:	2b00      	cmp	r3, #0
2400b7a6:	d0e9      	beq.n	2400b77c <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b7a8:	2a00      	cmp	r2, #0
2400b7aa:	db30      	blt.n	2400b80e <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b7ac:	0051      	lsls	r1, r2, #1
2400b7ae:	d431      	bmi.n	2400b814 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b7b0:	0094      	lsls	r4, r2, #2
2400b7b2:	d431      	bmi.n	2400b818 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b7b4:	00d0      	lsls	r0, r2, #3
2400b7b6:	d431      	bmi.n	2400b81c <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b7b8:	0111      	lsls	r1, r2, #4
2400b7ba:	d432      	bmi.n	2400b822 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b7bc:	0154      	lsls	r4, r2, #5
2400b7be:	d433      	bmi.n	2400b828 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b7c0:	01d0      	lsls	r0, r2, #7
2400b7c2:	d434      	bmi.n	2400b82e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b7c4:	0211      	lsls	r1, r2, #8
2400b7c6:	d435      	bmi.n	2400b834 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b7c8:	0254      	lsls	r4, r2, #9
2400b7ca:	d436      	bmi.n	2400b83a <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b7cc:	0290      	lsls	r0, r2, #10
2400b7ce:	d440      	bmi.n	2400b852 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b7d0:	02d1      	lsls	r1, r2, #11
2400b7d2:	d43b      	bmi.n	2400b84c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b7d4:	0354      	lsls	r4, r2, #13
2400b7d6:	d436      	bmi.n	2400b846 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b7d8:	0390      	lsls	r0, r2, #14
2400b7da:	d431      	bmi.n	2400b840 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b7dc:	03d1      	lsls	r1, r2, #15
2400b7de:	d444      	bmi.n	2400b86a <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b7e0:	0414      	lsls	r4, r2, #16
2400b7e2:	d43f      	bmi.n	2400b864 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b7e4:	0450      	lsls	r0, r2, #17
2400b7e6:	d43a      	bmi.n	2400b85e <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b7e8:	0491      	lsls	r1, r2, #18
2400b7ea:	d435      	bmi.n	2400b858 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b7ec:	f012 0f08 	tst.w	r2, #8
2400b7f0:	bf14      	ite	ne
2400b7f2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400b7f6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400b7fa:	e7bf      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b7fc:	2201      	movs	r2, #1
2400b7fe:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b800:	e7bc      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b802:	2301      	movs	r3, #1
2400b804:	e7ba      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b806:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b808:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b80a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b80c:	e7b6      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b80e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b812:	e7b3      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b814:	2340      	movs	r3, #64	; 0x40
2400b816:	e7b1      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b818:	2380      	movs	r3, #128	; 0x80
2400b81a:	e7af      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b81c:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b820:	e7ac      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b822:	f44f 7300 	mov.w	r3, #512	; 0x200
2400b826:	e7a9      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b828:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400b82c:	e7a6      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b82e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400b832:	e7a3      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b838:	e7a0      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b83a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400b83e:	e79d      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b840:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400b844:	e79a      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400b84a:	e797      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
2400b84c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400b850:	e794      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400b856:	e791      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400b858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400b85c:	e78e      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b85e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400b862:	e78b      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b864:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400b868:	e788      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b86a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400b86e:	e785      	b.n	2400b77c <SDMMC_CmdBlockLength+0x40>
2400b870:	200006e0 	.word	0x200006e0
2400b874:	10624dd3 	.word	0x10624dd3
2400b878:	fffee0c0 	.word	0xfffee0c0
2400b87c:	00200045 	.word	0x00200045
2400b880:	002000c5 	.word	0x002000c5
2400b884:	fdffe008 	.word	0xfdffe008

2400b888 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b888:	4a4c      	ldr	r2, [pc, #304]	; (2400b9bc <SDMMC_CmdReadSingleBlock+0x134>)
2400b88a:	4b4d      	ldr	r3, [pc, #308]	; (2400b9c0 <SDMMC_CmdReadSingleBlock+0x138>)
{
2400b88c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b88e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b890:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b892:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b896:	68c1      	ldr	r1, [r0, #12]
2400b898:	4c4a      	ldr	r4, [pc, #296]	; (2400b9c4 <SDMMC_CmdReadSingleBlock+0x13c>)
2400b89a:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b89e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b8a0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b8a2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b8a6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b8a8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b8ac:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400b8ae:	b14a      	cbz	r2, 2400b8c4 <SDMMC_CmdReadSingleBlock+0x3c>
2400b8b0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b8b2:	4945      	ldr	r1, [pc, #276]	; (2400b9c8 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400b8b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400b8b6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b8b8:	420a      	tst	r2, r1
2400b8ba:	d001      	beq.n	2400b8c0 <SDMMC_CmdReadSingleBlock+0x38>
2400b8bc:	0492      	lsls	r2, r2, #18
2400b8be:	d507      	bpl.n	2400b8d0 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
2400b8c0:	1c5c      	adds	r4, r3, #1
2400b8c2:	d1f7      	bne.n	2400b8b4 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400b8c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400b8c8:	4618      	mov	r0, r3
2400b8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b8ce:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b8d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b8d2:	075c      	lsls	r4, r3, #29
2400b8d4:	d43d      	bmi.n	2400b952 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b8d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400b8d8:	f013 0301 	ands.w	r3, r3, #1
2400b8dc:	d134      	bne.n	2400b948 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b8de:	4b3b      	ldr	r3, [pc, #236]	; (2400b9cc <SDMMC_CmdReadSingleBlock+0x144>)
2400b8e0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b8e2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b8e4:	b2db      	uxtb	r3, r3
2400b8e6:	2b11      	cmp	r3, #17
2400b8e8:	d131      	bne.n	2400b94e <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400b8ea:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b8ec:	4b38      	ldr	r3, [pc, #224]	; (2400b9d0 <SDMMC_CmdReadSingleBlock+0x148>)
2400b8ee:	4013      	ands	r3, r2
2400b8f0:	2b00      	cmp	r3, #0
2400b8f2:	d0e9      	beq.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b8f4:	2a00      	cmp	r2, #0
2400b8f6:	db30      	blt.n	2400b95a <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b8f8:	0051      	lsls	r1, r2, #1
2400b8fa:	d431      	bmi.n	2400b960 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b8fc:	0094      	lsls	r4, r2, #2
2400b8fe:	d431      	bmi.n	2400b964 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b900:	00d0      	lsls	r0, r2, #3
2400b902:	d431      	bmi.n	2400b968 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b904:	0111      	lsls	r1, r2, #4
2400b906:	d432      	bmi.n	2400b96e <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b908:	0154      	lsls	r4, r2, #5
2400b90a:	d433      	bmi.n	2400b974 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b90c:	01d0      	lsls	r0, r2, #7
2400b90e:	d434      	bmi.n	2400b97a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b910:	0211      	lsls	r1, r2, #8
2400b912:	d435      	bmi.n	2400b980 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b914:	0254      	lsls	r4, r2, #9
2400b916:	d436      	bmi.n	2400b986 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b918:	0290      	lsls	r0, r2, #10
2400b91a:	d440      	bmi.n	2400b99e <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b91c:	02d1      	lsls	r1, r2, #11
2400b91e:	d43b      	bmi.n	2400b998 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b920:	0354      	lsls	r4, r2, #13
2400b922:	d436      	bmi.n	2400b992 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b924:	0390      	lsls	r0, r2, #14
2400b926:	d431      	bmi.n	2400b98c <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b928:	03d1      	lsls	r1, r2, #15
2400b92a:	d444      	bmi.n	2400b9b6 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b92c:	0414      	lsls	r4, r2, #16
2400b92e:	d43f      	bmi.n	2400b9b0 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b930:	0450      	lsls	r0, r2, #17
2400b932:	d43a      	bmi.n	2400b9aa <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b934:	0491      	lsls	r1, r2, #18
2400b936:	d435      	bmi.n	2400b9a4 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b938:	f012 0f08 	tst.w	r2, #8
2400b93c:	bf14      	ite	ne
2400b93e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400b942:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400b946:	e7bf      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b948:	2201      	movs	r2, #1
2400b94a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b94c:	e7bc      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b94e:	2301      	movs	r3, #1
2400b950:	e7ba      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b952:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b954:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b956:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b958:	e7b6      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b95a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400b95e:	e7b3      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b960:	2340      	movs	r3, #64	; 0x40
2400b962:	e7b1      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b964:	2380      	movs	r3, #128	; 0x80
2400b966:	e7af      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b968:	f44f 7380 	mov.w	r3, #256	; 0x100
2400b96c:	e7ac      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b96e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400b972:	e7a9      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b974:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400b978:	e7a6      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b97a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400b97e:	e7a3      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400b984:	e7a0      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400b98a:	e79d      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b98c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400b990:	e79a      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400b996:	e797      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400b998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400b99c:	e794      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b99e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400b9a2:	e791      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400b9a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400b9a8:	e78e      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b9aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400b9ae:	e78b      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b9b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400b9b4:	e788      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b9b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400b9ba:	e785      	b.n	2400b8c8 <SDMMC_CmdReadSingleBlock+0x40>
2400b9bc:	200006e0 	.word	0x200006e0
2400b9c0:	10624dd3 	.word	0x10624dd3
2400b9c4:	fffee0c0 	.word	0xfffee0c0
2400b9c8:	00200045 	.word	0x00200045
2400b9cc:	002000c5 	.word	0x002000c5
2400b9d0:	fdffe008 	.word	0xfdffe008

2400b9d4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9d4:	4a4c      	ldr	r2, [pc, #304]	; (2400bb08 <SDMMC_CmdReadMultiBlock+0x134>)
2400b9d6:	4b4d      	ldr	r3, [pc, #308]	; (2400bb0c <SDMMC_CmdReadMultiBlock+0x138>)
{
2400b9d8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9da:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b9dc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9de:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b9e2:	68c1      	ldr	r1, [r0, #12]
2400b9e4:	4c4a      	ldr	r4, [pc, #296]	; (2400bb10 <SDMMC_CmdReadMultiBlock+0x13c>)
2400b9e6:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b9ec:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9ee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b9f2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b9f4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b9f8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400b9fa:	b14a      	cbz	r2, 2400ba10 <SDMMC_CmdReadMultiBlock+0x3c>
2400b9fc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b9fe:	4945      	ldr	r1, [pc, #276]	; (2400bb14 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400ba00:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400ba02:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ba04:	420a      	tst	r2, r1
2400ba06:	d001      	beq.n	2400ba0c <SDMMC_CmdReadMultiBlock+0x38>
2400ba08:	0492      	lsls	r2, r2, #18
2400ba0a:	d507      	bpl.n	2400ba1c <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400ba0c:	1c5c      	adds	r4, r3, #1
2400ba0e:	d1f7      	bne.n	2400ba00 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400ba10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400ba14:	4618      	mov	r0, r3
2400ba16:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ba1a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ba1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ba1e:	075c      	lsls	r4, r3, #29
2400ba20:	d43d      	bmi.n	2400ba9e <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ba22:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400ba24:	f013 0301 	ands.w	r3, r3, #1
2400ba28:	d134      	bne.n	2400ba94 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ba2a:	4b3b      	ldr	r3, [pc, #236]	; (2400bb18 <SDMMC_CmdReadMultiBlock+0x144>)
2400ba2c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ba2e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ba30:	b2db      	uxtb	r3, r3
2400ba32:	2b12      	cmp	r3, #18
2400ba34:	d131      	bne.n	2400ba9a <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400ba36:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ba38:	4b38      	ldr	r3, [pc, #224]	; (2400bb1c <SDMMC_CmdReadMultiBlock+0x148>)
2400ba3a:	4013      	ands	r3, r2
2400ba3c:	2b00      	cmp	r3, #0
2400ba3e:	d0e9      	beq.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ba40:	2a00      	cmp	r2, #0
2400ba42:	db30      	blt.n	2400baa6 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ba44:	0051      	lsls	r1, r2, #1
2400ba46:	d431      	bmi.n	2400baac <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ba48:	0094      	lsls	r4, r2, #2
2400ba4a:	d431      	bmi.n	2400bab0 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ba4c:	00d0      	lsls	r0, r2, #3
2400ba4e:	d431      	bmi.n	2400bab4 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ba50:	0111      	lsls	r1, r2, #4
2400ba52:	d432      	bmi.n	2400baba <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ba54:	0154      	lsls	r4, r2, #5
2400ba56:	d433      	bmi.n	2400bac0 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ba58:	01d0      	lsls	r0, r2, #7
2400ba5a:	d434      	bmi.n	2400bac6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ba5c:	0211      	lsls	r1, r2, #8
2400ba5e:	d435      	bmi.n	2400bacc <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ba60:	0254      	lsls	r4, r2, #9
2400ba62:	d436      	bmi.n	2400bad2 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ba64:	0290      	lsls	r0, r2, #10
2400ba66:	d440      	bmi.n	2400baea <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ba68:	02d1      	lsls	r1, r2, #11
2400ba6a:	d43b      	bmi.n	2400bae4 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ba6c:	0354      	lsls	r4, r2, #13
2400ba6e:	d436      	bmi.n	2400bade <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ba70:	0390      	lsls	r0, r2, #14
2400ba72:	d431      	bmi.n	2400bad8 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ba74:	03d1      	lsls	r1, r2, #15
2400ba76:	d444      	bmi.n	2400bb02 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ba78:	0414      	lsls	r4, r2, #16
2400ba7a:	d43f      	bmi.n	2400bafc <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ba7c:	0450      	lsls	r0, r2, #17
2400ba7e:	d43a      	bmi.n	2400baf6 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ba80:	0491      	lsls	r1, r2, #18
2400ba82:	d435      	bmi.n	2400baf0 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ba84:	f012 0f08 	tst.w	r2, #8
2400ba88:	bf14      	ite	ne
2400ba8a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400ba8e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400ba92:	e7bf      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ba94:	2201      	movs	r2, #1
2400ba96:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba98:	e7bc      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba9a:	2301      	movs	r3, #1
2400ba9c:	e7ba      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ba9e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400baa0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400baa2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400baa4:	e7b6      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400baa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400baaa:	e7b3      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400baac:	2340      	movs	r3, #64	; 0x40
2400baae:	e7b1      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bab0:	2380      	movs	r3, #128	; 0x80
2400bab2:	e7af      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bab4:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bab8:	e7ac      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400baba:	f44f 7300 	mov.w	r3, #512	; 0x200
2400babe:	e7a9      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bac4:	e7a6      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400baca:	e7a3      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bacc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bad0:	e7a0      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bad6:	e79d      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bad8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400badc:	e79a      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bae2:	e797      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bae8:	e794      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400baea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400baee:	e791      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400baf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400baf4:	e78e      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400baf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bafa:	e78b      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bafc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bb00:	e788      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bb02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bb06:	e785      	b.n	2400ba14 <SDMMC_CmdReadMultiBlock+0x40>
2400bb08:	200006e0 	.word	0x200006e0
2400bb0c:	10624dd3 	.word	0x10624dd3
2400bb10:	fffee0c0 	.word	0xfffee0c0
2400bb14:	00200045 	.word	0x00200045
2400bb18:	002000c5 	.word	0x002000c5
2400bb1c:	fdffe008 	.word	0xfdffe008

2400bb20 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb20:	4a4c      	ldr	r2, [pc, #304]	; (2400bc54 <SDMMC_CmdWriteSingleBlock+0x134>)
2400bb22:	4b4d      	ldr	r3, [pc, #308]	; (2400bc58 <SDMMC_CmdWriteSingleBlock+0x138>)
{
2400bb24:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb26:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bb28:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb2a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb2e:	68c1      	ldr	r1, [r0, #12]
2400bb30:	4c4a      	ldr	r4, [pc, #296]	; (2400bc5c <SDMMC_CmdWriteSingleBlock+0x13c>)
2400bb32:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb36:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb38:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb3a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb3e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bb40:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bb44:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bb46:	b14a      	cbz	r2, 2400bb5c <SDMMC_CmdWriteSingleBlock+0x3c>
2400bb48:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bb4a:	4945      	ldr	r1, [pc, #276]	; (2400bc60 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bb4c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bb4e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bb50:	420a      	tst	r2, r1
2400bb52:	d001      	beq.n	2400bb58 <SDMMC_CmdWriteSingleBlock+0x38>
2400bb54:	0492      	lsls	r2, r2, #18
2400bb56:	d507      	bpl.n	2400bb68 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
2400bb58:	1c5c      	adds	r4, r3, #1
2400bb5a:	d1f7      	bne.n	2400bb4c <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bb5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bb60:	4618      	mov	r0, r3
2400bb62:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb66:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bb68:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb6a:	075c      	lsls	r4, r3, #29
2400bb6c:	d43d      	bmi.n	2400bbea <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bb6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bb70:	f013 0301 	ands.w	r3, r3, #1
2400bb74:	d134      	bne.n	2400bbe0 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bb76:	4b3b      	ldr	r3, [pc, #236]	; (2400bc64 <SDMMC_CmdWriteSingleBlock+0x144>)
2400bb78:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bb7a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bb7c:	b2db      	uxtb	r3, r3
2400bb7e:	2b18      	cmp	r3, #24
2400bb80:	d131      	bne.n	2400bbe6 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bb82:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bb84:	4b38      	ldr	r3, [pc, #224]	; (2400bc68 <SDMMC_CmdWriteSingleBlock+0x148>)
2400bb86:	4013      	ands	r3, r2
2400bb88:	2b00      	cmp	r3, #0
2400bb8a:	d0e9      	beq.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bb8c:	2a00      	cmp	r2, #0
2400bb8e:	db30      	blt.n	2400bbf2 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bb90:	0051      	lsls	r1, r2, #1
2400bb92:	d431      	bmi.n	2400bbf8 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bb94:	0094      	lsls	r4, r2, #2
2400bb96:	d431      	bmi.n	2400bbfc <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bb98:	00d0      	lsls	r0, r2, #3
2400bb9a:	d431      	bmi.n	2400bc00 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bb9c:	0111      	lsls	r1, r2, #4
2400bb9e:	d432      	bmi.n	2400bc06 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bba0:	0154      	lsls	r4, r2, #5
2400bba2:	d433      	bmi.n	2400bc0c <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bba4:	01d0      	lsls	r0, r2, #7
2400bba6:	d434      	bmi.n	2400bc12 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bba8:	0211      	lsls	r1, r2, #8
2400bbaa:	d435      	bmi.n	2400bc18 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bbac:	0254      	lsls	r4, r2, #9
2400bbae:	d436      	bmi.n	2400bc1e <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bbb0:	0290      	lsls	r0, r2, #10
2400bbb2:	d440      	bmi.n	2400bc36 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bbb4:	02d1      	lsls	r1, r2, #11
2400bbb6:	d43b      	bmi.n	2400bc30 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bbb8:	0354      	lsls	r4, r2, #13
2400bbba:	d436      	bmi.n	2400bc2a <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bbbc:	0390      	lsls	r0, r2, #14
2400bbbe:	d431      	bmi.n	2400bc24 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bbc0:	03d1      	lsls	r1, r2, #15
2400bbc2:	d444      	bmi.n	2400bc4e <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bbc4:	0414      	lsls	r4, r2, #16
2400bbc6:	d43f      	bmi.n	2400bc48 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bbc8:	0450      	lsls	r0, r2, #17
2400bbca:	d43a      	bmi.n	2400bc42 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bbcc:	0491      	lsls	r1, r2, #18
2400bbce:	d435      	bmi.n	2400bc3c <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bbd0:	f012 0f08 	tst.w	r2, #8
2400bbd4:	bf14      	ite	ne
2400bbd6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bbda:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bbde:	e7bf      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bbe0:	2201      	movs	r2, #1
2400bbe2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bbe4:	e7bc      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bbe6:	2301      	movs	r3, #1
2400bbe8:	e7ba      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bbea:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bbec:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bbee:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bbf0:	e7b6      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bbf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bbf6:	e7b3      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bbf8:	2340      	movs	r3, #64	; 0x40
2400bbfa:	e7b1      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bbfc:	2380      	movs	r3, #128	; 0x80
2400bbfe:	e7af      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bc00:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bc04:	e7ac      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bc06:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bc0a:	e7a9      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bc0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bc10:	e7a6      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bc12:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bc16:	e7a3      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bc1c:	e7a0      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bc1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bc22:	e79d      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bc24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bc28:	e79a      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bc2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bc2e:	e797      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bc30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bc34:	e794      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bc36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bc3a:	e791      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bc3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bc40:	e78e      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bc42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bc46:	e78b      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bc48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bc4c:	e788      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bc4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bc52:	e785      	b.n	2400bb60 <SDMMC_CmdWriteSingleBlock+0x40>
2400bc54:	200006e0 	.word	0x200006e0
2400bc58:	10624dd3 	.word	0x10624dd3
2400bc5c:	fffee0c0 	.word	0xfffee0c0
2400bc60:	00200045 	.word	0x00200045
2400bc64:	002000c5 	.word	0x002000c5
2400bc68:	fdffe008 	.word	0xfdffe008

2400bc6c <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc6c:	4a4c      	ldr	r2, [pc, #304]	; (2400bda0 <SDMMC_CmdWriteMultiBlock+0x134>)
2400bc6e:	4b4d      	ldr	r3, [pc, #308]	; (2400bda4 <SDMMC_CmdWriteMultiBlock+0x138>)
{
2400bc70:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc72:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bc74:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc76:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc7a:	68c1      	ldr	r1, [r0, #12]
2400bc7c:	4c4a      	ldr	r4, [pc, #296]	; (2400bda8 <SDMMC_CmdWriteMultiBlock+0x13c>)
2400bc7e:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc82:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc84:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc86:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc8a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc8c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc90:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bc92:	b14a      	cbz	r2, 2400bca8 <SDMMC_CmdWriteMultiBlock+0x3c>
2400bc94:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bc96:	4945      	ldr	r1, [pc, #276]	; (2400bdac <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
2400bc98:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bc9a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bc9c:	420a      	tst	r2, r1
2400bc9e:	d001      	beq.n	2400bca4 <SDMMC_CmdWriteMultiBlock+0x38>
2400bca0:	0492      	lsls	r2, r2, #18
2400bca2:	d507      	bpl.n	2400bcb4 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
2400bca4:	1c5c      	adds	r4, r3, #1
2400bca6:	d1f7      	bne.n	2400bc98 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400bca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400bcac:	4618      	mov	r0, r3
2400bcae:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bcb2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bcb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcb6:	075c      	lsls	r4, r3, #29
2400bcb8:	d43d      	bmi.n	2400bd36 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bcba:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400bcbc:	f013 0301 	ands.w	r3, r3, #1
2400bcc0:	d134      	bne.n	2400bd2c <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bcc2:	4b3b      	ldr	r3, [pc, #236]	; (2400bdb0 <SDMMC_CmdWriteMultiBlock+0x144>)
2400bcc4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bcc6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bcc8:	b2db      	uxtb	r3, r3
2400bcca:	2b19      	cmp	r3, #25
2400bccc:	d131      	bne.n	2400bd32 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400bcce:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bcd0:	4b38      	ldr	r3, [pc, #224]	; (2400bdb4 <SDMMC_CmdWriteMultiBlock+0x148>)
2400bcd2:	4013      	ands	r3, r2
2400bcd4:	2b00      	cmp	r3, #0
2400bcd6:	d0e9      	beq.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bcd8:	2a00      	cmp	r2, #0
2400bcda:	db30      	blt.n	2400bd3e <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bcdc:	0051      	lsls	r1, r2, #1
2400bcde:	d431      	bmi.n	2400bd44 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bce0:	0094      	lsls	r4, r2, #2
2400bce2:	d431      	bmi.n	2400bd48 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bce4:	00d0      	lsls	r0, r2, #3
2400bce6:	d431      	bmi.n	2400bd4c <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bce8:	0111      	lsls	r1, r2, #4
2400bcea:	d432      	bmi.n	2400bd52 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bcec:	0154      	lsls	r4, r2, #5
2400bcee:	d433      	bmi.n	2400bd58 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bcf0:	01d0      	lsls	r0, r2, #7
2400bcf2:	d434      	bmi.n	2400bd5e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bcf4:	0211      	lsls	r1, r2, #8
2400bcf6:	d435      	bmi.n	2400bd64 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bcf8:	0254      	lsls	r4, r2, #9
2400bcfa:	d436      	bmi.n	2400bd6a <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bcfc:	0290      	lsls	r0, r2, #10
2400bcfe:	d440      	bmi.n	2400bd82 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bd00:	02d1      	lsls	r1, r2, #11
2400bd02:	d43b      	bmi.n	2400bd7c <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bd04:	0354      	lsls	r4, r2, #13
2400bd06:	d436      	bmi.n	2400bd76 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bd08:	0390      	lsls	r0, r2, #14
2400bd0a:	d431      	bmi.n	2400bd70 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bd0c:	03d1      	lsls	r1, r2, #15
2400bd0e:	d444      	bmi.n	2400bd9a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bd10:	0414      	lsls	r4, r2, #16
2400bd12:	d43f      	bmi.n	2400bd94 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bd14:	0450      	lsls	r0, r2, #17
2400bd16:	d43a      	bmi.n	2400bd8e <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bd18:	0491      	lsls	r1, r2, #18
2400bd1a:	d435      	bmi.n	2400bd88 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bd1c:	f012 0f08 	tst.w	r2, #8
2400bd20:	bf14      	ite	ne
2400bd22:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400bd26:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400bd2a:	e7bf      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bd2c:	2201      	movs	r2, #1
2400bd2e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bd30:	e7bc      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bd32:	2301      	movs	r3, #1
2400bd34:	e7ba      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bd36:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bd38:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bd3a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bd3c:	e7b6      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bd3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400bd42:	e7b3      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bd44:	2340      	movs	r3, #64	; 0x40
2400bd46:	e7b1      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bd48:	2380      	movs	r3, #128	; 0x80
2400bd4a:	e7af      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bd4c:	f44f 7380 	mov.w	r3, #256	; 0x100
2400bd50:	e7ac      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bd52:	f44f 7300 	mov.w	r3, #512	; 0x200
2400bd56:	e7a9      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bd58:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400bd5c:	e7a6      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bd5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400bd62:	e7a3      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bd64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400bd68:	e7a0      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bd6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400bd6e:	e79d      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bd70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400bd74:	e79a      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bd76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400bd7a:	e797      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
2400bd7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400bd80:	e794      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bd82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400bd86:	e791      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400bd88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400bd8c:	e78e      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bd8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400bd92:	e78b      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bd94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400bd98:	e788      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bd9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400bd9e:	e785      	b.n	2400bcac <SDMMC_CmdWriteMultiBlock+0x40>
2400bda0:	200006e0 	.word	0x200006e0
2400bda4:	10624dd3 	.word	0x10624dd3
2400bda8:	fffee0c0 	.word	0xfffee0c0
2400bdac:	00200045 	.word	0x00200045
2400bdb0:	002000c5 	.word	0x002000c5
2400bdb4:	fdffe008 	.word	0xfdffe008

2400bdb8 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdb8:	4b7d      	ldr	r3, [pc, #500]	; (2400bfb0 <SDMMC_CmdStopTransfer+0x1f8>)
2400bdba:	497e      	ldr	r1, [pc, #504]	; (2400bfb4 <SDMMC_CmdStopTransfer+0x1fc>)
{
2400bdbc:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdbe:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400bdc0:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bdc2:	4b7d      	ldr	r3, [pc, #500]	; (2400bfb8 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdc4:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bdc8:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdca:	4d7c      	ldr	r5, [pc, #496]	; (2400bfbc <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bdcc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdd0:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bdd2:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bdd4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bdd6:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bdda:	f021 0140 	bic.w	r1, r1, #64	; 0x40
2400bdde:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bde0:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400bde4:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bde6:	68c4      	ldr	r4, [r0, #12]
2400bde8:	4023      	ands	r3, r4
2400bdea:	4319      	orrs	r1, r3
2400bdec:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400bdee:	b14a      	cbz	r2, 2400be04 <SDMMC_CmdStopTransfer+0x4c>
2400bdf0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bdf2:	4973      	ldr	r1, [pc, #460]	; (2400bfc0 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
2400bdf4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bdf6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bdf8:	420a      	tst	r2, r1
2400bdfa:	d001      	beq.n	2400be00 <SDMMC_CmdStopTransfer+0x48>
2400bdfc:	0492      	lsls	r2, r2, #18
2400bdfe:	d50a      	bpl.n	2400be16 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400be00:	1c5c      	adds	r4, r3, #1
2400be02:	d1f7      	bne.n	2400bdf4 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be04:	68c2      	ldr	r2, [r0, #12]
2400be06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400be0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400be0e:	60c2      	str	r2, [r0, #12]
}
2400be10:	4618      	mov	r0, r3
2400be12:	bc30      	pop	{r4, r5}
2400be14:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400be16:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400be18:	075b      	lsls	r3, r3, #29
2400be1a:	d454      	bmi.n	2400bec6 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400be1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400be1e:	f013 0301 	ands.w	r3, r3, #1
2400be22:	d13c      	bne.n	2400be9e <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400be24:	4a67      	ldr	r2, [pc, #412]	; (2400bfc4 <SDMMC_CmdStopTransfer+0x20c>)
2400be26:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400be28:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400be2a:	b2d2      	uxtb	r2, r2
2400be2c:	2a0c      	cmp	r2, #12
2400be2e:	d144      	bne.n	2400beba <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
2400be30:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400be32:	4965      	ldr	r1, [pc, #404]	; (2400bfc8 <SDMMC_CmdStopTransfer+0x210>)
2400be34:	4011      	ands	r1, r2
2400be36:	2900      	cmp	r1, #0
2400be38:	d038      	beq.n	2400beac <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400be3a:	2a00      	cmp	r2, #0
2400be3c:	db36      	blt.n	2400beac <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400be3e:	0055      	lsls	r5, r2, #1
2400be40:	d448      	bmi.n	2400bed4 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400be42:	0094      	lsls	r4, r2, #2
2400be44:	d44c      	bmi.n	2400bee0 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400be46:	00d1      	lsls	r1, r2, #3
2400be48:	d450      	bmi.n	2400beec <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400be4a:	0113      	lsls	r3, r2, #4
2400be4c:	d455      	bmi.n	2400befa <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400be4e:	0155      	lsls	r5, r2, #5
2400be50:	d45a      	bmi.n	2400bf08 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400be52:	01d4      	lsls	r4, r2, #7
2400be54:	d466      	bmi.n	2400bf24 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400be56:	0211      	lsls	r1, r2, #8
2400be58:	d45d      	bmi.n	2400bf16 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400be5a:	0253      	lsls	r3, r2, #9
2400be5c:	d470      	bmi.n	2400bf40 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400be5e:	0295      	lsls	r5, r2, #10
2400be60:	d467      	bmi.n	2400bf32 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400be62:	02d4      	lsls	r4, r2, #11
2400be64:	f100 8081 	bmi.w	2400bf6a <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400be68:	0351      	lsls	r1, r2, #13
2400be6a:	d477      	bmi.n	2400bf5c <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400be6c:	0393      	lsls	r3, r2, #14
2400be6e:	d46e      	bmi.n	2400bf4e <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400be70:	03d5      	lsls	r5, r2, #15
2400be72:	f100 8096 	bmi.w	2400bfa2 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400be76:	0414      	lsls	r4, r2, #16
2400be78:	f100 8085 	bmi.w	2400bf86 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400be7c:	0451      	lsls	r1, r2, #17
2400be7e:	d47b      	bmi.n	2400bf78 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400be80:	0493      	lsls	r3, r2, #18
2400be82:	f100 8087 	bmi.w	2400bf94 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400be86:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be8a:	68c2      	ldr	r2, [r0, #12]
2400be8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400be90:	bf14      	ite	ne
2400be92:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400be96:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be9a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be9c:	e7b8      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400be9e:	2201      	movs	r2, #1
2400bea0:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bea2:	68c2      	ldr	r2, [r0, #12]
2400bea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bea8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400beaa:	e7b1      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beac:	68c2      	ldr	r2, [r0, #12]
2400beae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400beb2:	60c2      	str	r2, [r0, #12]
}
2400beb4:	4618      	mov	r0, r3
2400beb6:	bc30      	pop	{r4, r5}
2400beb8:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beba:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bebc:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bec2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bec4:	e7a4      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bec6:	2304      	movs	r3, #4
2400bec8:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beca:	68c2      	ldr	r2, [r0, #12]
2400becc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bed0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bed2:	e79d      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bed4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bed6:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bedc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bede:	e797      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bee0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bee2:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bee8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400beea:	e791      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400beec:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400beee:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bef6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bef8:	e78a      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400befa:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400befc:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf04:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf06:	e783      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf08:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bf0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf12:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf14:	e77c      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf16:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bf18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf20:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf22:	e775      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf24:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bf26:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf2e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf30:	e76e      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf32:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bf34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf3c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf3e:	e767      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf40:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bf42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf4a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf4c:	e760      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf4e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bf50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf58:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf5a:	e759      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf5c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bf5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf66:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf68:	e752      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf6a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
2400bf6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf74:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf76:	e74b      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf78:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bf7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf82:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf84:	e744      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf86:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bf88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf90:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bf92:	e73d      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf94:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400bf96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bf9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bf9e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bfa0:	e736      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bfa2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bfa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bfa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400bfac:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bfae:	e72f      	b.n	2400be10 <SDMMC_CmdStopTransfer+0x58>
2400bfb0:	200006e0 	.word	0x200006e0
2400bfb4:	10624dd3 	.word	0x10624dd3
2400bfb8:	fffee0c0 	.word	0xfffee0c0
2400bfbc:	05f5e100 	.word	0x05f5e100
2400bfc0:	00200045 	.word	0x00200045
2400bfc4:	002000c5 	.word	0x002000c5
2400bfc8:	fdffe008 	.word	0xfdffe008

2400bfcc <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfcc:	4a4c      	ldr	r2, [pc, #304]	; (2400c100 <SDMMC_CmdSelDesel+0x134>)
2400bfce:	4b4d      	ldr	r3, [pc, #308]	; (2400c104 <SDMMC_CmdSelDesel+0x138>)
{
2400bfd0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfd2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bfd4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfd6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfda:	68c1      	ldr	r1, [r0, #12]
2400bfdc:	4c4a      	ldr	r4, [pc, #296]	; (2400c108 <SDMMC_CmdSelDesel+0x13c>)
2400bfde:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfe2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfe4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfe6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfea:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bff0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400bff2:	b14a      	cbz	r2, 2400c008 <SDMMC_CmdSelDesel+0x3c>
2400bff4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bff6:	4945      	ldr	r1, [pc, #276]	; (2400c10c <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
2400bff8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400bffa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bffc:	420a      	tst	r2, r1
2400bffe:	d001      	beq.n	2400c004 <SDMMC_CmdSelDesel+0x38>
2400c000:	0492      	lsls	r2, r2, #18
2400c002:	d507      	bpl.n	2400c014 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
2400c004:	1c5c      	adds	r4, r3, #1
2400c006:	d1f7      	bne.n	2400bff8 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c00c:	4618      	mov	r0, r3
2400c00e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c012:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c014:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c016:	075c      	lsls	r4, r3, #29
2400c018:	d43d      	bmi.n	2400c096 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c01a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c01c:	f013 0301 	ands.w	r3, r3, #1
2400c020:	d134      	bne.n	2400c08c <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c022:	4b3b      	ldr	r3, [pc, #236]	; (2400c110 <SDMMC_CmdSelDesel+0x144>)
2400c024:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c026:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c028:	b2db      	uxtb	r3, r3
2400c02a:	2b07      	cmp	r3, #7
2400c02c:	d131      	bne.n	2400c092 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c02e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c030:	4b38      	ldr	r3, [pc, #224]	; (2400c114 <SDMMC_CmdSelDesel+0x148>)
2400c032:	4013      	ands	r3, r2
2400c034:	2b00      	cmp	r3, #0
2400c036:	d0e9      	beq.n	2400c00c <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c038:	2a00      	cmp	r2, #0
2400c03a:	db30      	blt.n	2400c09e <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c03c:	0051      	lsls	r1, r2, #1
2400c03e:	d431      	bmi.n	2400c0a4 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c040:	0094      	lsls	r4, r2, #2
2400c042:	d431      	bmi.n	2400c0a8 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c044:	00d0      	lsls	r0, r2, #3
2400c046:	d431      	bmi.n	2400c0ac <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c048:	0111      	lsls	r1, r2, #4
2400c04a:	d432      	bmi.n	2400c0b2 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c04c:	0154      	lsls	r4, r2, #5
2400c04e:	d433      	bmi.n	2400c0b8 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c050:	01d0      	lsls	r0, r2, #7
2400c052:	d434      	bmi.n	2400c0be <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c054:	0211      	lsls	r1, r2, #8
2400c056:	d435      	bmi.n	2400c0c4 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c058:	0254      	lsls	r4, r2, #9
2400c05a:	d436      	bmi.n	2400c0ca <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c05c:	0290      	lsls	r0, r2, #10
2400c05e:	d440      	bmi.n	2400c0e2 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c060:	02d1      	lsls	r1, r2, #11
2400c062:	d43b      	bmi.n	2400c0dc <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c064:	0354      	lsls	r4, r2, #13
2400c066:	d436      	bmi.n	2400c0d6 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c068:	0390      	lsls	r0, r2, #14
2400c06a:	d431      	bmi.n	2400c0d0 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c06c:	03d1      	lsls	r1, r2, #15
2400c06e:	d444      	bmi.n	2400c0fa <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c070:	0414      	lsls	r4, r2, #16
2400c072:	d43f      	bmi.n	2400c0f4 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c074:	0450      	lsls	r0, r2, #17
2400c076:	d43a      	bmi.n	2400c0ee <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c078:	0491      	lsls	r1, r2, #18
2400c07a:	d435      	bmi.n	2400c0e8 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c07c:	f012 0f08 	tst.w	r2, #8
2400c080:	bf14      	ite	ne
2400c082:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c086:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c08a:	e7bf      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c08c:	2201      	movs	r2, #1
2400c08e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c090:	e7bc      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c092:	2301      	movs	r3, #1
2400c094:	e7ba      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c096:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c098:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c09a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c09c:	e7b6      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c09e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c0a2:	e7b3      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c0a4:	2340      	movs	r3, #64	; 0x40
2400c0a6:	e7b1      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c0a8:	2380      	movs	r3, #128	; 0x80
2400c0aa:	e7af      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c0ac:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c0b0:	e7ac      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c0b6:	e7a9      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c0bc:	e7a6      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c0be:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c0c2:	e7a3      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c0c8:	e7a0      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c0ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c0ce:	e79d      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c0d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c0d4:	e79a      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c0d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c0da:	e797      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c0dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c0e0:	e794      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c0e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c0e6:	e791      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c0e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c0ec:	e78e      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c0ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c0f2:	e78b      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c0f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c0f8:	e788      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c0fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c0fe:	e785      	b.n	2400c00c <SDMMC_CmdSelDesel+0x40>
2400c100:	200006e0 	.word	0x200006e0
2400c104:	10624dd3 	.word	0x10624dd3
2400c108:	fffee0c0 	.word	0xfffee0c0
2400c10c:	00200045 	.word	0x00200045
2400c110:	002000c5 	.word	0x002000c5
2400c114:	fdffe008 	.word	0xfdffe008

2400c118 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c118:	4b11      	ldr	r3, [pc, #68]	; (2400c160 <SDMMC_CmdGoIdleState+0x48>)
{
2400c11a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c11c:	4a11      	ldr	r2, [pc, #68]	; (2400c164 <SDMMC_CmdGoIdleState+0x4c>)
{
2400c11e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c120:	4c11      	ldr	r4, [pc, #68]	; (2400c168 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400c122:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c124:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400c126:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c128:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c12c:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c12e:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c132:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c134:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c136:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c13a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c13e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c140:	e002      	b.n	2400c148 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400c142:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400c144:	0612      	lsls	r2, r2, #24
2400c146:	d405      	bmi.n	2400c154 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400c148:	3b01      	subs	r3, #1
2400c14a:	d2fa      	bcs.n	2400c142 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c14c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c150:	bc30      	pop	{r4, r5}
2400c152:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c154:	4b05      	ldr	r3, [pc, #20]	; (2400c16c <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400c156:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c158:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c15a:	bc30      	pop	{r4, r5}
2400c15c:	4770      	bx	lr
2400c15e:	bf00      	nop
2400c160:	200006e0 	.word	0x200006e0
2400c164:	fffee0c0 	.word	0xfffee0c0
2400c168:	10624dd3 	.word	0x10624dd3
2400c16c:	002000c5 	.word	0x002000c5

2400c170 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c170:	4a1c      	ldr	r2, [pc, #112]	; (2400c1e4 <SDMMC_CmdOperCond+0x74>)
{
2400c172:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c174:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c178:	481b      	ldr	r0, [pc, #108]	; (2400c1e8 <SDMMC_CmdOperCond+0x78>)
{
2400c17a:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c17c:	4c1b      	ldr	r4, [pc, #108]	; (2400c1ec <SDMMC_CmdOperCond+0x7c>)
2400c17e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c180:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c182:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c186:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c18a:	68cc      	ldr	r4, [r1, #12]
2400c18c:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c18e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c190:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c192:	f241 3088 	movw	r0, #5000	; 0x1388
2400c196:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c19a:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c19c:	b14a      	cbz	r2, 2400c1b2 <SDMMC_CmdOperCond+0x42>
2400c19e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c1a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c1a2:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c1a4:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c1a8:	d001      	beq.n	2400c1ae <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c1aa:	0490      	lsls	r0, r2, #18
2400c1ac:	d506      	bpl.n	2400c1bc <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400c1ae:	1c5c      	adds	r4, r3, #1
2400c1b0:	d1f6      	bne.n	2400c1a0 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c1b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c1ba:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c1bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c1be:	075a      	lsls	r2, r3, #29
2400c1c0:	d40c      	bmi.n	2400c1dc <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c1c2:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c1c4:	f010 0001 	ands.w	r0, r0, #1
2400c1c8:	d105      	bne.n	2400c1d6 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400c1ca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c1cc:	065b      	lsls	r3, r3, #25
2400c1ce:	d5f2      	bpl.n	2400c1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400c1d0:	2340      	movs	r3, #64	; 0x40
2400c1d2:	638b      	str	r3, [r1, #56]	; 0x38
2400c1d4:	e7ef      	b.n	2400c1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c1d6:	2301      	movs	r3, #1
2400c1d8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c1da:	e7ec      	b.n	2400c1b6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c1dc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c1de:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c1e0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c1e2:	e7e8      	b.n	2400c1b6 <SDMMC_CmdOperCond+0x46>
2400c1e4:	200006e0 	.word	0x200006e0
2400c1e8:	fffee0c0 	.word	0xfffee0c0
2400c1ec:	10624dd3 	.word	0x10624dd3

2400c1f0 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1f0:	4a4c      	ldr	r2, [pc, #304]	; (2400c324 <SDMMC_CmdAppCommand+0x134>)
2400c1f2:	4b4d      	ldr	r3, [pc, #308]	; (2400c328 <SDMMC_CmdAppCommand+0x138>)
{
2400c1f4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1f6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c1f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c1fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1fe:	68c1      	ldr	r1, [r0, #12]
2400c200:	4c4a      	ldr	r4, [pc, #296]	; (2400c32c <SDMMC_CmdAppCommand+0x13c>)
2400c202:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c206:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c208:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c20a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c20e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c210:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c214:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c216:	b14a      	cbz	r2, 2400c22c <SDMMC_CmdAppCommand+0x3c>
2400c218:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c21a:	4945      	ldr	r1, [pc, #276]	; (2400c330 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
2400c21c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c21e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c220:	420a      	tst	r2, r1
2400c222:	d001      	beq.n	2400c228 <SDMMC_CmdAppCommand+0x38>
2400c224:	0492      	lsls	r2, r2, #18
2400c226:	d507      	bpl.n	2400c238 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
2400c228:	1c5c      	adds	r4, r3, #1
2400c22a:	d1f7      	bne.n	2400c21c <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c230:	4618      	mov	r0, r3
2400c232:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c236:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c238:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c23a:	075c      	lsls	r4, r3, #29
2400c23c:	d43d      	bmi.n	2400c2ba <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c23e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c240:	f013 0301 	ands.w	r3, r3, #1
2400c244:	d134      	bne.n	2400c2b0 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c246:	4b3b      	ldr	r3, [pc, #236]	; (2400c334 <SDMMC_CmdAppCommand+0x144>)
2400c248:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c24a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c24c:	b2db      	uxtb	r3, r3
2400c24e:	2b37      	cmp	r3, #55	; 0x37
2400c250:	d131      	bne.n	2400c2b6 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c252:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c254:	4b38      	ldr	r3, [pc, #224]	; (2400c338 <SDMMC_CmdAppCommand+0x148>)
2400c256:	4013      	ands	r3, r2
2400c258:	2b00      	cmp	r3, #0
2400c25a:	d0e9      	beq.n	2400c230 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c25c:	2a00      	cmp	r2, #0
2400c25e:	db30      	blt.n	2400c2c2 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c260:	0051      	lsls	r1, r2, #1
2400c262:	d431      	bmi.n	2400c2c8 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c264:	0094      	lsls	r4, r2, #2
2400c266:	d431      	bmi.n	2400c2cc <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c268:	00d0      	lsls	r0, r2, #3
2400c26a:	d431      	bmi.n	2400c2d0 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c26c:	0111      	lsls	r1, r2, #4
2400c26e:	d432      	bmi.n	2400c2d6 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c270:	0154      	lsls	r4, r2, #5
2400c272:	d433      	bmi.n	2400c2dc <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c274:	01d0      	lsls	r0, r2, #7
2400c276:	d434      	bmi.n	2400c2e2 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c278:	0211      	lsls	r1, r2, #8
2400c27a:	d435      	bmi.n	2400c2e8 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c27c:	0254      	lsls	r4, r2, #9
2400c27e:	d436      	bmi.n	2400c2ee <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c280:	0290      	lsls	r0, r2, #10
2400c282:	d440      	bmi.n	2400c306 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c284:	02d1      	lsls	r1, r2, #11
2400c286:	d43b      	bmi.n	2400c300 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c288:	0354      	lsls	r4, r2, #13
2400c28a:	d436      	bmi.n	2400c2fa <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c28c:	0390      	lsls	r0, r2, #14
2400c28e:	d431      	bmi.n	2400c2f4 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c290:	03d1      	lsls	r1, r2, #15
2400c292:	d444      	bmi.n	2400c31e <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c294:	0414      	lsls	r4, r2, #16
2400c296:	d43f      	bmi.n	2400c318 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c298:	0450      	lsls	r0, r2, #17
2400c29a:	d43a      	bmi.n	2400c312 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c29c:	0491      	lsls	r1, r2, #18
2400c29e:	d435      	bmi.n	2400c30c <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c2a0:	f012 0f08 	tst.w	r2, #8
2400c2a4:	bf14      	ite	ne
2400c2a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c2aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c2ae:	e7bf      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c2b0:	2201      	movs	r2, #1
2400c2b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c2b4:	e7bc      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c2b6:	2301      	movs	r3, #1
2400c2b8:	e7ba      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c2ba:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c2bc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c2be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c2c0:	e7b6      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c2c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c2c6:	e7b3      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c2c8:	2340      	movs	r3, #64	; 0x40
2400c2ca:	e7b1      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c2cc:	2380      	movs	r3, #128	; 0x80
2400c2ce:	e7af      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c2d0:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c2d4:	e7ac      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c2d6:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c2da:	e7a9      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c2dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c2e0:	e7a6      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c2e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c2e6:	e7a3      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c2e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c2ec:	e7a0      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c2ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c2f2:	e79d      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c2f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c2f8:	e79a      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c2fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c2fe:	e797      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c304:	e794      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c30a:	e791      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c30c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c310:	e78e      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c312:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c316:	e78b      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c318:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c31c:	e788      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c31e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c322:	e785      	b.n	2400c230 <SDMMC_CmdAppCommand+0x40>
2400c324:	200006e0 	.word	0x200006e0
2400c328:	10624dd3 	.word	0x10624dd3
2400c32c:	fffee0c0 	.word	0xfffee0c0
2400c330:	00200045 	.word	0x00200045
2400c334:	002000c5 	.word	0x002000c5
2400c338:	fdffe008 	.word	0xfdffe008

2400c33c <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c33c:	4a18      	ldr	r2, [pc, #96]	; (2400c3a0 <SDMMC_CmdAppOperCommand+0x64>)
2400c33e:	4b19      	ldr	r3, [pc, #100]	; (2400c3a4 <SDMMC_CmdAppOperCommand+0x68>)
{
2400c340:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c342:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c344:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c346:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c34a:	68c1      	ldr	r1, [r0, #12]
2400c34c:	4c16      	ldr	r4, [pc, #88]	; (2400c3a8 <SDMMC_CmdAppOperCommand+0x6c>)
2400c34e:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c352:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c354:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c356:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c35a:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c35c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c360:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c362:	b14a      	cbz	r2, 2400c378 <SDMMC_CmdAppOperCommand+0x3c>
2400c364:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c366:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c368:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c36a:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c36e:	d001      	beq.n	2400c374 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c370:	0492      	lsls	r2, r2, #18
2400c372:	d507      	bpl.n	2400c384 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
2400c374:	1c59      	adds	r1, r3, #1
2400c376:	d1f6      	bne.n	2400c366 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c37c:	4618      	mov	r0, r3
2400c37e:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c382:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c384:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c386:	f013 0304 	ands.w	r3, r3, #4
2400c38a:	d105      	bne.n	2400c398 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c38c:	4a07      	ldr	r2, [pc, #28]	; (2400c3ac <SDMMC_CmdAppOperCommand+0x70>)
2400c38e:	6382      	str	r2, [r0, #56]	; 0x38
}
2400c390:	4618      	mov	r0, r3
2400c392:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c396:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c398:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c39a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c39c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c39e:	e7ed      	b.n	2400c37c <SDMMC_CmdAppOperCommand+0x40>
2400c3a0:	200006e0 	.word	0x200006e0
2400c3a4:	10624dd3 	.word	0x10624dd3
2400c3a8:	fffee0c0 	.word	0xfffee0c0
2400c3ac:	002000c5 	.word	0x002000c5

2400c3b0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3b0:	4a4c      	ldr	r2, [pc, #304]	; (2400c4e4 <SDMMC_CmdBusWidth+0x134>)
2400c3b2:	4b4d      	ldr	r3, [pc, #308]	; (2400c4e8 <SDMMC_CmdBusWidth+0x138>)
{
2400c3b4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3b6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c3b8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3ba:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3be:	68c1      	ldr	r1, [r0, #12]
2400c3c0:	4c4a      	ldr	r4, [pc, #296]	; (2400c4ec <SDMMC_CmdBusWidth+0x13c>)
2400c3c2:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3c6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3c8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3ca:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3ce:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3d0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3d4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c3d6:	b14a      	cbz	r2, 2400c3ec <SDMMC_CmdBusWidth+0x3c>
2400c3d8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c3da:	4945      	ldr	r1, [pc, #276]	; (2400c4f0 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
2400c3dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c3de:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c3e0:	420a      	tst	r2, r1
2400c3e2:	d001      	beq.n	2400c3e8 <SDMMC_CmdBusWidth+0x38>
2400c3e4:	0492      	lsls	r2, r2, #18
2400c3e6:	d507      	bpl.n	2400c3f8 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
2400c3e8:	1c5c      	adds	r4, r3, #1
2400c3ea:	d1f7      	bne.n	2400c3dc <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c3f0:	4618      	mov	r0, r3
2400c3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c3f6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c3f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c3fa:	075c      	lsls	r4, r3, #29
2400c3fc:	d43d      	bmi.n	2400c47a <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c3fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c400:	f013 0301 	ands.w	r3, r3, #1
2400c404:	d134      	bne.n	2400c470 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c406:	4b3b      	ldr	r3, [pc, #236]	; (2400c4f4 <SDMMC_CmdBusWidth+0x144>)
2400c408:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c40a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c40c:	b2db      	uxtb	r3, r3
2400c40e:	2b06      	cmp	r3, #6
2400c410:	d131      	bne.n	2400c476 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c412:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c414:	4b38      	ldr	r3, [pc, #224]	; (2400c4f8 <SDMMC_CmdBusWidth+0x148>)
2400c416:	4013      	ands	r3, r2
2400c418:	2b00      	cmp	r3, #0
2400c41a:	d0e9      	beq.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c41c:	2a00      	cmp	r2, #0
2400c41e:	db30      	blt.n	2400c482 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c420:	0051      	lsls	r1, r2, #1
2400c422:	d431      	bmi.n	2400c488 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c424:	0094      	lsls	r4, r2, #2
2400c426:	d431      	bmi.n	2400c48c <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c428:	00d0      	lsls	r0, r2, #3
2400c42a:	d431      	bmi.n	2400c490 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c42c:	0111      	lsls	r1, r2, #4
2400c42e:	d432      	bmi.n	2400c496 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c430:	0154      	lsls	r4, r2, #5
2400c432:	d433      	bmi.n	2400c49c <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c434:	01d0      	lsls	r0, r2, #7
2400c436:	d434      	bmi.n	2400c4a2 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c438:	0211      	lsls	r1, r2, #8
2400c43a:	d435      	bmi.n	2400c4a8 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c43c:	0254      	lsls	r4, r2, #9
2400c43e:	d436      	bmi.n	2400c4ae <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c440:	0290      	lsls	r0, r2, #10
2400c442:	d440      	bmi.n	2400c4c6 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c444:	02d1      	lsls	r1, r2, #11
2400c446:	d43b      	bmi.n	2400c4c0 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c448:	0354      	lsls	r4, r2, #13
2400c44a:	d436      	bmi.n	2400c4ba <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c44c:	0390      	lsls	r0, r2, #14
2400c44e:	d431      	bmi.n	2400c4b4 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c450:	03d1      	lsls	r1, r2, #15
2400c452:	d444      	bmi.n	2400c4de <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c454:	0414      	lsls	r4, r2, #16
2400c456:	d43f      	bmi.n	2400c4d8 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c458:	0450      	lsls	r0, r2, #17
2400c45a:	d43a      	bmi.n	2400c4d2 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c45c:	0491      	lsls	r1, r2, #18
2400c45e:	d435      	bmi.n	2400c4cc <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c460:	f012 0f08 	tst.w	r2, #8
2400c464:	bf14      	ite	ne
2400c466:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c46a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c46e:	e7bf      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c470:	2201      	movs	r2, #1
2400c472:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c474:	e7bc      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c476:	2301      	movs	r3, #1
2400c478:	e7ba      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c47a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c47c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c47e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c480:	e7b6      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c486:	e7b3      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c488:	2340      	movs	r3, #64	; 0x40
2400c48a:	e7b1      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c48c:	2380      	movs	r3, #128	; 0x80
2400c48e:	e7af      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c490:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c494:	e7ac      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c496:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c49a:	e7a9      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c4a0:	e7a6      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c4a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c4a6:	e7a3      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c4a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c4ac:	e7a0      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c4ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c4b2:	e79d      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c4b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c4b8:	e79a      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c4ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c4be:	e797      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c4c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c4c4:	e794      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c4c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c4ca:	e791      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c4cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c4d0:	e78e      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c4d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c4d6:	e78b      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c4d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c4dc:	e788      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c4de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c4e2:	e785      	b.n	2400c3f0 <SDMMC_CmdBusWidth+0x40>
2400c4e4:	200006e0 	.word	0x200006e0
2400c4e8:	10624dd3 	.word	0x10624dd3
2400c4ec:	fffee0c0 	.word	0xfffee0c0
2400c4f0:	00200045 	.word	0x00200045
2400c4f4:	002000c5 	.word	0x002000c5
2400c4f8:	fdffe008 	.word	0xfdffe008

2400c4fc <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4fc:	4a4d      	ldr	r2, [pc, #308]	; (2400c634 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400c4fe:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c500:	494d      	ldr	r1, [pc, #308]	; (2400c638 <SDMMC_CmdSendSCR+0x13c>)
{
2400c502:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c504:	4c4d      	ldr	r4, [pc, #308]	; (2400c63c <SDMMC_CmdSendSCR+0x140>)
2400c506:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c508:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c50a:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c50e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c512:	68c4      	ldr	r4, [r0, #12]
2400c514:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c516:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c518:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c51a:	f241 3188 	movw	r1, #5000	; 0x1388
2400c51e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c522:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c524:	b14a      	cbz	r2, 2400c53a <SDMMC_CmdSendSCR+0x3e>
2400c526:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c528:	4945      	ldr	r1, [pc, #276]	; (2400c640 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400c52a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c52c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c52e:	420a      	tst	r2, r1
2400c530:	d001      	beq.n	2400c536 <SDMMC_CmdSendSCR+0x3a>
2400c532:	0492      	lsls	r2, r2, #18
2400c534:	d507      	bpl.n	2400c546 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400c536:	1c5c      	adds	r4, r3, #1
2400c538:	d1f7      	bne.n	2400c52a <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c53a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c53e:	4618      	mov	r0, r3
2400c540:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c544:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c546:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c548:	075c      	lsls	r4, r3, #29
2400c54a:	d43d      	bmi.n	2400c5c8 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c54c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c54e:	f013 0301 	ands.w	r3, r3, #1
2400c552:	d134      	bne.n	2400c5be <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c554:	4b3b      	ldr	r3, [pc, #236]	; (2400c644 <SDMMC_CmdSendSCR+0x148>)
2400c556:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c558:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c55a:	b2db      	uxtb	r3, r3
2400c55c:	2b33      	cmp	r3, #51	; 0x33
2400c55e:	d131      	bne.n	2400c5c4 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c560:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c562:	4b39      	ldr	r3, [pc, #228]	; (2400c648 <SDMMC_CmdSendSCR+0x14c>)
2400c564:	4013      	ands	r3, r2
2400c566:	2b00      	cmp	r3, #0
2400c568:	d0e9      	beq.n	2400c53e <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c56a:	2a00      	cmp	r2, #0
2400c56c:	db30      	blt.n	2400c5d0 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c56e:	0051      	lsls	r1, r2, #1
2400c570:	d431      	bmi.n	2400c5d6 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c572:	0094      	lsls	r4, r2, #2
2400c574:	d431      	bmi.n	2400c5da <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c576:	00d0      	lsls	r0, r2, #3
2400c578:	d431      	bmi.n	2400c5de <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c57a:	0111      	lsls	r1, r2, #4
2400c57c:	d432      	bmi.n	2400c5e4 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c57e:	0154      	lsls	r4, r2, #5
2400c580:	d433      	bmi.n	2400c5ea <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c582:	01d0      	lsls	r0, r2, #7
2400c584:	d434      	bmi.n	2400c5f0 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c586:	0211      	lsls	r1, r2, #8
2400c588:	d435      	bmi.n	2400c5f6 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c58a:	0254      	lsls	r4, r2, #9
2400c58c:	d436      	bmi.n	2400c5fc <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c58e:	0290      	lsls	r0, r2, #10
2400c590:	d440      	bmi.n	2400c614 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c592:	02d1      	lsls	r1, r2, #11
2400c594:	d43b      	bmi.n	2400c60e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c596:	0354      	lsls	r4, r2, #13
2400c598:	d436      	bmi.n	2400c608 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c59a:	0390      	lsls	r0, r2, #14
2400c59c:	d431      	bmi.n	2400c602 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c59e:	03d1      	lsls	r1, r2, #15
2400c5a0:	d444      	bmi.n	2400c62c <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c5a2:	0414      	lsls	r4, r2, #16
2400c5a4:	d43f      	bmi.n	2400c626 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c5a6:	0450      	lsls	r0, r2, #17
2400c5a8:	d43a      	bmi.n	2400c620 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c5aa:	0491      	lsls	r1, r2, #18
2400c5ac:	d435      	bmi.n	2400c61a <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c5ae:	f012 0f08 	tst.w	r2, #8
2400c5b2:	bf14      	ite	ne
2400c5b4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c5b8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c5bc:	e7bf      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c5be:	2201      	movs	r2, #1
2400c5c0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c5c2:	e7bc      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c5c4:	2301      	movs	r3, #1
2400c5c6:	e7ba      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5c8:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5ca:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5cc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5ce:	e7b6      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c5d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c5d4:	e7b3      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c5d6:	2340      	movs	r3, #64	; 0x40
2400c5d8:	e7b1      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c5da:	2380      	movs	r3, #128	; 0x80
2400c5dc:	e7af      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c5de:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c5e2:	e7ac      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c5e4:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c5e8:	e7a9      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c5ee:	e7a6      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c5f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c5f4:	e7a3      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c5fa:	e7a0      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c5fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c600:	e79d      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c602:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c606:	e79a      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c60c:	e797      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400c60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c612:	e794      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c618:	e791      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400c61a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c61e:	e78e      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c624:	e78b      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c626:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c62a:	e788      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c62c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c630:	e785      	b.n	2400c53e <SDMMC_CmdSendSCR+0x42>
2400c632:	bf00      	nop
2400c634:	200006e0 	.word	0x200006e0
2400c638:	fffee0c0 	.word	0xfffee0c0
2400c63c:	10624dd3 	.word	0x10624dd3
2400c640:	00200045 	.word	0x00200045
2400c644:	002000c5 	.word	0x002000c5
2400c648:	fdffe008 	.word	0xfdffe008

2400c64c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c64c:	4a1a      	ldr	r2, [pc, #104]	; (2400c6b8 <SDMMC_CmdSendCID+0x6c>)
{
2400c64e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c650:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c652:	481a      	ldr	r0, [pc, #104]	; (2400c6bc <SDMMC_CmdSendCID+0x70>)
{
2400c654:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c656:	4c1a      	ldr	r4, [pc, #104]	; (2400c6c0 <SDMMC_CmdSendCID+0x74>)
2400c658:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c65a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c65c:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c660:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c664:	68cc      	ldr	r4, [r1, #12]
2400c666:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c668:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c66a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c66c:	f241 3088 	movw	r0, #5000	; 0x1388
2400c670:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c674:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c676:	b14a      	cbz	r2, 2400c68c <SDMMC_CmdSendCID+0x40>
2400c678:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c67a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c67c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c67e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c682:	d001      	beq.n	2400c688 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c684:	0492      	lsls	r2, r2, #18
2400c686:	d506      	bpl.n	2400c696 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400c688:	1c58      	adds	r0, r3, #1
2400c68a:	d1f6      	bne.n	2400c67a <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c68c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c690:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c694:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c696:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c698:	075b      	lsls	r3, r3, #29
2400c69a:	d409      	bmi.n	2400c6b0 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c69c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c69e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c6a2:	bf14      	ite	ne
2400c6a4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c6a6:	4b07      	ldreq	r3, [pc, #28]	; (2400c6c4 <SDMMC_CmdSendCID+0x78>)
2400c6a8:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c6ae:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6b0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6b2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6b4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6b6:	e7eb      	b.n	2400c690 <SDMMC_CmdSendCID+0x44>
2400c6b8:	200006e0 	.word	0x200006e0
2400c6bc:	fffee0c0 	.word	0xfffee0c0
2400c6c0:	10624dd3 	.word	0x10624dd3
2400c6c4:	002000c5 	.word	0x002000c5

2400c6c8 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6c8:	4a1b      	ldr	r2, [pc, #108]	; (2400c738 <SDMMC_CmdSendCSD+0x70>)
{
2400c6ca:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6cc:	4b1b      	ldr	r3, [pc, #108]	; (2400c73c <SDMMC_CmdSendCSD+0x74>)
2400c6ce:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c6d0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6d8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c6dc:	4818      	ldr	r0, [pc, #96]	; (2400c740 <SDMMC_CmdSendCSD+0x78>)
2400c6de:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6e4:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6ea:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c6ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6f0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c6f4:	1e53      	subs	r3, r2, #1
2400c6f6:	b14a      	cbz	r2, 2400c70c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400c6f8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c6fc:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c6fe:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c702:	d001      	beq.n	2400c708 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c704:	0492      	lsls	r2, r2, #18
2400c706:	d504      	bpl.n	2400c712 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400c708:	1c59      	adds	r1, r3, #1
2400c70a:	d1f5      	bne.n	2400c6f8 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c70c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c710:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c712:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c716:	075b      	lsls	r3, r3, #29
2400c718:	d409      	bmi.n	2400c72e <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c71a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c71e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c722:	bf14      	ite	ne
2400c724:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c726:	4b07      	ldreq	r3, [pc, #28]	; (2400c744 <SDMMC_CmdSendCSD+0x7c>)
2400c728:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400c72c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c72e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c730:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c732:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c736:	4770      	bx	lr
2400c738:	200006e0 	.word	0x200006e0
2400c73c:	10624dd3 	.word	0x10624dd3
2400c740:	fffee0c0 	.word	0xfffee0c0
2400c744:	002000c5 	.word	0x002000c5

2400c748 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400c748:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c74a:	4a27      	ldr	r2, [pc, #156]	; (2400c7e8 <SDMMC_CmdSetRelAdd+0xa0>)
{
2400c74c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400c74e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c750:	4c26      	ldr	r4, [pc, #152]	; (2400c7ec <SDMMC_CmdSetRelAdd+0xa4>)
2400c752:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c754:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c756:	401c      	ands	r4, r3
2400c758:	f241 1303 	movw	r3, #4355	; 0x1103
2400c75c:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c75e:	4c24      	ldr	r4, [pc, #144]	; (2400c7f0 <SDMMC_CmdSetRelAdd+0xa8>)
2400c760:	fba4 4202 	umull	r4, r2, r4, r2
2400c764:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c768:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c76a:	0a52      	lsrs	r2, r2, #9
2400c76c:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400c770:	b14a      	cbz	r2, 2400c786 <SDMMC_CmdSetRelAdd+0x3e>
2400c772:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c774:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c776:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c778:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c77c:	d001      	beq.n	2400c782 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c77e:	0492      	lsls	r2, r2, #18
2400c780:	d507      	bpl.n	2400c792 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400c782:	1c5c      	adds	r4, r3, #1
2400c784:	d1f6      	bne.n	2400c774 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c78a:	4618      	mov	r0, r3
2400c78c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c790:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c792:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c794:	075c      	lsls	r4, r3, #29
2400c796:	d41c      	bmi.n	2400c7d2 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c798:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c79a:	f013 0301 	ands.w	r3, r3, #1
2400c79e:	d113      	bne.n	2400c7c8 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400c7a0:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c7a2:	b2db      	uxtb	r3, r3
2400c7a4:	2b03      	cmp	r3, #3
2400c7a6:	d112      	bne.n	2400c7ce <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c7a8:	4b12      	ldr	r3, [pc, #72]	; (2400c7f4 <SDMMC_CmdSetRelAdd+0xac>)
2400c7aa:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400c7ac:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400c7ae:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400c7b2:	d015      	beq.n	2400c7e0 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400c7b4:	0451      	lsls	r1, r2, #17
2400c7b6:	d410      	bmi.n	2400c7da <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c7b8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400c7bc:	bf14      	ite	ne
2400c7be:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400c7c2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c7c6:	e7e0      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c7c8:	2201      	movs	r2, #1
2400c7ca:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c7cc:	e7dd      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c7ce:	2301      	movs	r3, #1
2400c7d0:	e7db      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c7d2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c7d4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c7d6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c7d8:	e7d7      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c7da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c7de:	e7d4      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400c7e0:	0c12      	lsrs	r2, r2, #16
2400c7e2:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400c7e4:	e7d1      	b.n	2400c78a <SDMMC_CmdSetRelAdd+0x42>
2400c7e6:	bf00      	nop
2400c7e8:	200006e0 	.word	0x200006e0
2400c7ec:	fffee0c0 	.word	0xfffee0c0
2400c7f0:	10624dd3 	.word	0x10624dd3
2400c7f4:	002000c5 	.word	0x002000c5

2400c7f8 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7f8:	4a4c      	ldr	r2, [pc, #304]	; (2400c92c <SDMMC_CmdSendStatus+0x134>)
2400c7fa:	4b4d      	ldr	r3, [pc, #308]	; (2400c930 <SDMMC_CmdSendStatus+0x138>)
{
2400c7fc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c800:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c802:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c806:	68c1      	ldr	r1, [r0, #12]
2400c808:	4c4a      	ldr	r4, [pc, #296]	; (2400c934 <SDMMC_CmdSendStatus+0x13c>)
2400c80a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c80e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c810:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c812:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c816:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c818:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c81c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c81e:	b14a      	cbz	r2, 2400c834 <SDMMC_CmdSendStatus+0x3c>
2400c820:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c822:	4945      	ldr	r1, [pc, #276]	; (2400c938 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400c824:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c826:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c828:	420a      	tst	r2, r1
2400c82a:	d001      	beq.n	2400c830 <SDMMC_CmdSendStatus+0x38>
2400c82c:	0492      	lsls	r2, r2, #18
2400c82e:	d507      	bpl.n	2400c840 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400c830:	1c5c      	adds	r4, r3, #1
2400c832:	d1f7      	bne.n	2400c824 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400c834:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c838:	4618      	mov	r0, r3
2400c83a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c83e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c840:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c842:	075c      	lsls	r4, r3, #29
2400c844:	d43d      	bmi.n	2400c8c2 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c846:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c848:	f013 0301 	ands.w	r3, r3, #1
2400c84c:	d134      	bne.n	2400c8b8 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c84e:	4b3b      	ldr	r3, [pc, #236]	; (2400c93c <SDMMC_CmdSendStatus+0x144>)
2400c850:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c852:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c854:	b2db      	uxtb	r3, r3
2400c856:	2b0d      	cmp	r3, #13
2400c858:	d131      	bne.n	2400c8be <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400c85a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c85c:	4b38      	ldr	r3, [pc, #224]	; (2400c940 <SDMMC_CmdSendStatus+0x148>)
2400c85e:	4013      	ands	r3, r2
2400c860:	2b00      	cmp	r3, #0
2400c862:	d0e9      	beq.n	2400c838 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c864:	2a00      	cmp	r2, #0
2400c866:	db30      	blt.n	2400c8ca <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c868:	0051      	lsls	r1, r2, #1
2400c86a:	d431      	bmi.n	2400c8d0 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c86c:	0094      	lsls	r4, r2, #2
2400c86e:	d431      	bmi.n	2400c8d4 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c870:	00d0      	lsls	r0, r2, #3
2400c872:	d431      	bmi.n	2400c8d8 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c874:	0111      	lsls	r1, r2, #4
2400c876:	d432      	bmi.n	2400c8de <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c878:	0154      	lsls	r4, r2, #5
2400c87a:	d433      	bmi.n	2400c8e4 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c87c:	01d0      	lsls	r0, r2, #7
2400c87e:	d434      	bmi.n	2400c8ea <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c880:	0211      	lsls	r1, r2, #8
2400c882:	d435      	bmi.n	2400c8f0 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c884:	0254      	lsls	r4, r2, #9
2400c886:	d436      	bmi.n	2400c8f6 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c888:	0290      	lsls	r0, r2, #10
2400c88a:	d440      	bmi.n	2400c90e <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c88c:	02d1      	lsls	r1, r2, #11
2400c88e:	d43b      	bmi.n	2400c908 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c890:	0354      	lsls	r4, r2, #13
2400c892:	d436      	bmi.n	2400c902 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c894:	0390      	lsls	r0, r2, #14
2400c896:	d431      	bmi.n	2400c8fc <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c898:	03d1      	lsls	r1, r2, #15
2400c89a:	d444      	bmi.n	2400c926 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c89c:	0414      	lsls	r4, r2, #16
2400c89e:	d43f      	bmi.n	2400c920 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c8a0:	0450      	lsls	r0, r2, #17
2400c8a2:	d43a      	bmi.n	2400c91a <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c8a4:	0491      	lsls	r1, r2, #18
2400c8a6:	d435      	bmi.n	2400c914 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c8a8:	f012 0f08 	tst.w	r2, #8
2400c8ac:	bf14      	ite	ne
2400c8ae:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400c8b2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400c8b6:	e7bf      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c8b8:	2201      	movs	r2, #1
2400c8ba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8bc:	e7bc      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8be:	2301      	movs	r3, #1
2400c8c0:	e7ba      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8c2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8c4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8c6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8c8:	e7b6      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c8ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400c8ce:	e7b3      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c8d0:	2340      	movs	r3, #64	; 0x40
2400c8d2:	e7b1      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c8d4:	2380      	movs	r3, #128	; 0x80
2400c8d6:	e7af      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c8d8:	f44f 7380 	mov.w	r3, #256	; 0x100
2400c8dc:	e7ac      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c8de:	f44f 7300 	mov.w	r3, #512	; 0x200
2400c8e2:	e7a9      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400c8e8:	e7a6      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400c8ee:	e7a3      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c8f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400c8f4:	e7a0      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c8f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400c8fa:	e79d      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c8fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400c900:	e79a      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400c906:	e797      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400c908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400c90c:	e794      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c90e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400c912:	e791      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400c914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400c918:	e78e      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c91a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400c91e:	e78b      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400c924:	e788      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c926:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400c92a:	e785      	b.n	2400c838 <SDMMC_CmdSendStatus+0x40>
2400c92c:	200006e0 	.word	0x200006e0
2400c930:	10624dd3 	.word	0x10624dd3
2400c934:	fffee0c0 	.word	0xfffee0c0
2400c938:	00200045 	.word	0x00200045
2400c93c:	002000c5 	.word	0x002000c5
2400c940:	fdffe008 	.word	0xfdffe008

2400c944 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c944:	4a4d      	ldr	r2, [pc, #308]	; (2400ca7c <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400c946:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c948:	494d      	ldr	r1, [pc, #308]	; (2400ca80 <SDMMC_CmdStatusRegister+0x13c>)
{
2400c94a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c94c:	4c4d      	ldr	r4, [pc, #308]	; (2400ca84 <SDMMC_CmdStatusRegister+0x140>)
2400c94e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c950:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c952:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c956:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c95a:	68c4      	ldr	r4, [r0, #12]
2400c95c:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c95e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c960:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c962:	f241 3188 	movw	r1, #5000	; 0x1388
2400c966:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c96a:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400c96c:	b14a      	cbz	r2, 2400c982 <SDMMC_CmdStatusRegister+0x3e>
2400c96e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c970:	4945      	ldr	r1, [pc, #276]	; (2400ca88 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400c972:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400c974:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c976:	420a      	tst	r2, r1
2400c978:	d001      	beq.n	2400c97e <SDMMC_CmdStatusRegister+0x3a>
2400c97a:	0492      	lsls	r2, r2, #18
2400c97c:	d507      	bpl.n	2400c98e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400c97e:	1c5c      	adds	r4, r3, #1
2400c980:	d1f7      	bne.n	2400c972 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400c986:	4618      	mov	r0, r3
2400c988:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c98c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c98e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c990:	075c      	lsls	r4, r3, #29
2400c992:	d43d      	bmi.n	2400ca10 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c994:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400c996:	f013 0301 	ands.w	r3, r3, #1
2400c99a:	d134      	bne.n	2400ca06 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c99c:	4b3b      	ldr	r3, [pc, #236]	; (2400ca8c <SDMMC_CmdStatusRegister+0x148>)
2400c99e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c9a0:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c9a2:	b2db      	uxtb	r3, r3
2400c9a4:	2b0d      	cmp	r3, #13
2400c9a6:	d131      	bne.n	2400ca0c <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c9a8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c9aa:	4b39      	ldr	r3, [pc, #228]	; (2400ca90 <SDMMC_CmdStatusRegister+0x14c>)
2400c9ac:	4013      	ands	r3, r2
2400c9ae:	2b00      	cmp	r3, #0
2400c9b0:	d0e9      	beq.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c9b2:	2a00      	cmp	r2, #0
2400c9b4:	db30      	blt.n	2400ca18 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c9b6:	0051      	lsls	r1, r2, #1
2400c9b8:	d431      	bmi.n	2400ca1e <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c9ba:	0094      	lsls	r4, r2, #2
2400c9bc:	d431      	bmi.n	2400ca22 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c9be:	00d0      	lsls	r0, r2, #3
2400c9c0:	d431      	bmi.n	2400ca26 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c9c2:	0111      	lsls	r1, r2, #4
2400c9c4:	d432      	bmi.n	2400ca2c <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c9c6:	0154      	lsls	r4, r2, #5
2400c9c8:	d433      	bmi.n	2400ca32 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c9ca:	01d0      	lsls	r0, r2, #7
2400c9cc:	d434      	bmi.n	2400ca38 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c9ce:	0211      	lsls	r1, r2, #8
2400c9d0:	d435      	bmi.n	2400ca3e <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c9d2:	0254      	lsls	r4, r2, #9
2400c9d4:	d436      	bmi.n	2400ca44 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c9d6:	0290      	lsls	r0, r2, #10
2400c9d8:	d440      	bmi.n	2400ca5c <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c9da:	02d1      	lsls	r1, r2, #11
2400c9dc:	d43b      	bmi.n	2400ca56 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c9de:	0354      	lsls	r4, r2, #13
2400c9e0:	d436      	bmi.n	2400ca50 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c9e2:	0390      	lsls	r0, r2, #14
2400c9e4:	d431      	bmi.n	2400ca4a <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c9e6:	03d1      	lsls	r1, r2, #15
2400c9e8:	d444      	bmi.n	2400ca74 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c9ea:	0414      	lsls	r4, r2, #16
2400c9ec:	d43f      	bmi.n	2400ca6e <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c9ee:	0450      	lsls	r0, r2, #17
2400c9f0:	d43a      	bmi.n	2400ca68 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c9f2:	0491      	lsls	r1, r2, #18
2400c9f4:	d435      	bmi.n	2400ca62 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c9f6:	f012 0f08 	tst.w	r2, #8
2400c9fa:	bf14      	ite	ne
2400c9fc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400ca00:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400ca04:	e7bf      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ca06:	2201      	movs	r2, #1
2400ca08:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ca0a:	e7bc      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ca0c:	2301      	movs	r3, #1
2400ca0e:	e7ba      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ca10:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ca12:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ca14:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ca16:	e7b6      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400ca18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400ca1c:	e7b3      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ca1e:	2340      	movs	r3, #64	; 0x40
2400ca20:	e7b1      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ca22:	2380      	movs	r3, #128	; 0x80
2400ca24:	e7af      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ca26:	f44f 7380 	mov.w	r3, #256	; 0x100
2400ca2a:	e7ac      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ca2c:	f44f 7300 	mov.w	r3, #512	; 0x200
2400ca30:	e7a9      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ca32:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400ca36:	e7a6      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ca38:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400ca3c:	e7a3      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ca3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400ca42:	e7a0      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ca44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400ca48:	e79d      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ca4a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400ca4e:	e79a      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ca50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400ca54:	e797      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400ca56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400ca5a:	e794      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ca5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400ca60:	e791      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400ca62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400ca66:	e78e      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ca68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400ca6c:	e78b      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ca6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400ca72:	e788      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ca74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400ca78:	e785      	b.n	2400c986 <SDMMC_CmdStatusRegister+0x42>
2400ca7a:	bf00      	nop
2400ca7c:	200006e0 	.word	0x200006e0
2400ca80:	fffee0c0 	.word	0xfffee0c0
2400ca84:	10624dd3 	.word	0x10624dd3
2400ca88:	00200045 	.word	0x00200045
2400ca8c:	002000c5 	.word	0x002000c5
2400ca90:	fdffe008 	.word	0xfdffe008

2400ca94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400ca94:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400ca96:	4903      	ldr	r1, [pc, #12]	; (2400caa4 <MX_FATFS_Init+0x10>)
2400ca98:	4803      	ldr	r0, [pc, #12]	; (2400caa8 <MX_FATFS_Init+0x14>)
2400ca9a:	f003 f86d 	bl	2400fb78 <FATFS_LinkDriver>
2400ca9e:	4b03      	ldr	r3, [pc, #12]	; (2400caac <MX_FATFS_Init+0x18>)
2400caa0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400caa2:	bd08      	pop	{r3, pc}
2400caa4:	2001d8f0 	.word	0x2001d8f0
2400caa8:	24017fc0 	.word	0x24017fc0
2400caac:	2001d8f4 	.word	0x2001d8f4

2400cab0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400cab0:	2000      	movs	r0, #0
2400cab2:	4770      	bx	lr

2400cab4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400cab4:	b510      	push	{r4, lr}
2400cab6:	4694      	mov	ip, r2
2400cab8:	b082      	sub	sp, #8
2400caba:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400cabc:	460a      	mov	r2, r1
2400cabe:	4663      	mov	r3, ip
2400cac0:	4601      	mov	r1, r0
2400cac2:	9400      	str	r4, [sp, #0]
2400cac4:	4803      	ldr	r0, [pc, #12]	; (2400cad4 <BSP_SD_ReadBlocks+0x20>)
2400cac6:	f7fd fa2f 	bl	24009f28 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400caca:	3800      	subs	r0, #0
2400cacc:	bf18      	it	ne
2400cace:	2001      	movne	r0, #1
2400cad0:	b002      	add	sp, #8
2400cad2:	bd10      	pop	{r4, pc}
2400cad4:	2001d16c 	.word	0x2001d16c

2400cad8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400cad8:	b510      	push	{r4, lr}
2400cada:	4694      	mov	ip, r2
2400cadc:	b082      	sub	sp, #8
2400cade:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400cae0:	460a      	mov	r2, r1
2400cae2:	4663      	mov	r3, ip
2400cae4:	4601      	mov	r1, r0
2400cae6:	9400      	str	r4, [sp, #0]
2400cae8:	4803      	ldr	r0, [pc, #12]	; (2400caf8 <BSP_SD_WriteBlocks+0x20>)
2400caea:	f7fd fb25 	bl	2400a138 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400caee:	3800      	subs	r0, #0
2400caf0:	bf18      	it	ne
2400caf2:	2001      	movne	r0, #1
2400caf4:	b002      	add	sp, #8
2400caf6:	bd10      	pop	{r4, pc}
2400caf8:	2001d16c 	.word	0x2001d16c

2400cafc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400cafc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400cafe:	4803      	ldr	r0, [pc, #12]	; (2400cb0c <BSP_SD_GetCardState+0x10>)
2400cb00:	f7fd ff86 	bl	2400aa10 <HAL_SD_GetCardState>
}
2400cb04:	3804      	subs	r0, #4
2400cb06:	bf18      	it	ne
2400cb08:	2001      	movne	r0, #1
2400cb0a:	bd08      	pop	{r3, pc}
2400cb0c:	2001d16c 	.word	0x2001d16c

2400cb10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400cb10:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400cb12:	4801      	ldr	r0, [pc, #4]	; (2400cb18 <BSP_SD_GetCardInfo+0x8>)
2400cb14:	f7fd be2c 	b.w	2400a770 <HAL_SD_GetCardInfo>
2400cb18:	2001d16c 	.word	0x2001d16c

2400cb1c <BSP_SD_Init>:
{
2400cb1c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400cb1e:	f7f5 fbe3 	bl	240022e8 <BSP_SD_IsDetected>
2400cb22:	2801      	cmp	r0, #1
2400cb24:	d001      	beq.n	2400cb2a <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cb26:	2002      	movs	r0, #2
}
2400cb28:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400cb2a:	4807      	ldr	r0, [pc, #28]	; (2400cb48 <BSP_SD_Init+0x2c>)
2400cb2c:	f7fd ff08 	bl	2400a940 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400cb30:	2800      	cmp	r0, #0
2400cb32:	d1f9      	bne.n	2400cb28 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400cb34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400cb38:	4803      	ldr	r0, [pc, #12]	; (2400cb48 <BSP_SD_Init+0x2c>)
2400cb3a:	f7fd fe2d 	bl	2400a798 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400cb3e:	3800      	subs	r0, #0
2400cb40:	bf18      	it	ne
2400cb42:	2001      	movne	r0, #1
}
2400cb44:	bd08      	pop	{r3, pc}
2400cb46:	bf00      	nop
2400cb48:	2001d16c 	.word	0x2001d16c

2400cb4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400cb4c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400cb4e:	4c0a      	ldr	r4, [pc, #40]	; (2400cb78 <SD_initialize+0x2c>)
2400cb50:	2501      	movs	r5, #1
2400cb52:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400cb54:	f7ff ffe2 	bl	2400cb1c <BSP_SD_Init>
2400cb58:	b108      	cbz	r0, 2400cb5e <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400cb5a:	7820      	ldrb	r0, [r4, #0]
}
2400cb5c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400cb5e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cb60:	f7ff ffcc 	bl	2400cafc <BSP_SD_GetCardState>
2400cb64:	b918      	cbnz	r0, 2400cb6e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400cb66:	7823      	ldrb	r3, [r4, #0]
2400cb68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cb6c:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb6e:	7823      	ldrb	r3, [r4, #0]
2400cb70:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400cb72:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb74:	7820      	ldrb	r0, [r4, #0]
}
2400cb76:	bd38      	pop	{r3, r4, r5, pc}
2400cb78:	200006f0 	.word	0x200006f0

2400cb7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400cb7c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400cb7e:	2301      	movs	r3, #1
2400cb80:	4c05      	ldr	r4, [pc, #20]	; (2400cb98 <SD_status+0x1c>)
2400cb82:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400cb84:	f7ff ffba 	bl	2400cafc <BSP_SD_GetCardState>
2400cb88:	b918      	cbnz	r0, 2400cb92 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400cb8a:	7823      	ldrb	r3, [r4, #0]
2400cb8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400cb90:	7023      	strb	r3, [r4, #0]
  return Stat;
2400cb92:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400cb94:	bd10      	pop	{r4, pc}
2400cb96:	bf00      	nop
2400cb98:	200006f0 	.word	0x200006f0

2400cb9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400cb9c:	b508      	push	{r3, lr}
2400cb9e:	4608      	mov	r0, r1
2400cba0:	4611      	mov	r1, r2
2400cba2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400cba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cba8:	f7ff ff84 	bl	2400cab4 <BSP_SD_ReadBlocks>
2400cbac:	b108      	cbz	r0, 2400cbb2 <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400cbae:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400cbb0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400cbb2:	f7ff ffa3 	bl	2400cafc <BSP_SD_GetCardState>
2400cbb6:	2800      	cmp	r0, #0
2400cbb8:	d0fa      	beq.n	2400cbb0 <SD_read+0x14>
2400cbba:	f7ff ff9f 	bl	2400cafc <BSP_SD_GetCardState>
2400cbbe:	2800      	cmp	r0, #0
2400cbc0:	d1f7      	bne.n	2400cbb2 <SD_read+0x16>
2400cbc2:	e7f5      	b.n	2400cbb0 <SD_read+0x14>

2400cbc4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cbc4:	4b18      	ldr	r3, [pc, #96]	; (2400cc28 <SD_ioctl+0x64>)
{
2400cbc6:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cbc8:	7818      	ldrb	r0, [r3, #0]
{
2400cbca:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cbcc:	f010 0401 	ands.w	r4, r0, #1
2400cbd0:	d106      	bne.n	2400cbe0 <SD_ioctl+0x1c>
2400cbd2:	4615      	mov	r5, r2

  switch (cmd)
2400cbd4:	2903      	cmp	r1, #3
2400cbd6:	d824      	bhi.n	2400cc22 <SD_ioctl+0x5e>
2400cbd8:	e8df f001 	tbb	[pc, r1]
2400cbdc:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400cbe0:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400cbe2:	4620      	mov	r0, r4
2400cbe4:	b00b      	add	sp, #44	; 0x2c
2400cbe6:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400cbe8:	460c      	mov	r4, r1
}
2400cbea:	4620      	mov	r0, r4
2400cbec:	b00b      	add	sp, #44	; 0x2c
2400cbee:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cbf0:	a801      	add	r0, sp, #4
2400cbf2:	f7ff ff8d 	bl	2400cb10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cbf6:	9b07      	ldr	r3, [sp, #28]
}
2400cbf8:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400cbfa:	602b      	str	r3, [r5, #0]
}
2400cbfc:	b00b      	add	sp, #44	; 0x2c
2400cbfe:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cc00:	a801      	add	r0, sp, #4
2400cc02:	f7ff ff85 	bl	2400cb10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cc06:	9b08      	ldr	r3, [sp, #32]
}
2400cc08:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cc0a:	802b      	strh	r3, [r5, #0]
}
2400cc0c:	b00b      	add	sp, #44	; 0x2c
2400cc0e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cc10:	a801      	add	r0, sp, #4
2400cc12:	f7ff ff7d 	bl	2400cb10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cc16:	9b08      	ldr	r3, [sp, #32]
}
2400cc18:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cc1a:	0a5b      	lsrs	r3, r3, #9
2400cc1c:	602b      	str	r3, [r5, #0]
}
2400cc1e:	b00b      	add	sp, #44	; 0x2c
2400cc20:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400cc22:	2404      	movs	r4, #4
2400cc24:	e7dd      	b.n	2400cbe2 <SD_ioctl+0x1e>
2400cc26:	bf00      	nop
2400cc28:	200006f0 	.word	0x200006f0

2400cc2c <SD_write>:
{
2400cc2c:	b508      	push	{r3, lr}
2400cc2e:	4608      	mov	r0, r1
2400cc30:	4611      	mov	r1, r2
2400cc32:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400cc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cc38:	f7ff ff4e 	bl	2400cad8 <BSP_SD_WriteBlocks>
2400cc3c:	b108      	cbz	r0, 2400cc42 <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400cc3e:	2001      	movs	r0, #1
}
2400cc40:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400cc42:	f7ff ff5b 	bl	2400cafc <BSP_SD_GetCardState>
2400cc46:	2800      	cmp	r0, #0
2400cc48:	d0fa      	beq.n	2400cc40 <SD_write+0x14>
2400cc4a:	f7ff ff57 	bl	2400cafc <BSP_SD_GetCardState>
2400cc4e:	2800      	cmp	r0, #0
2400cc50:	d1f7      	bne.n	2400cc42 <SD_write+0x16>
2400cc52:	e7f5      	b.n	2400cc40 <SD_write+0x14>

2400cc54 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400cc54:	4b03      	ldr	r3, [pc, #12]	; (2400cc64 <disk_status+0x10>)
2400cc56:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cc5a:	4403      	add	r3, r0
2400cc5c:	6852      	ldr	r2, [r2, #4]
2400cc5e:	7a18      	ldrb	r0, [r3, #8]
2400cc60:	6853      	ldr	r3, [r2, #4]
2400cc62:	4718      	bx	r3
2400cc64:	2001db20 	.word	0x2001db20

2400cc68 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400cc68:	4b07      	ldr	r3, [pc, #28]	; (2400cc88 <disk_initialize+0x20>)
2400cc6a:	5c1a      	ldrb	r2, [r3, r0]
2400cc6c:	b952      	cbnz	r2, 2400cc84 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc6e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cc72:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400cc74:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc78:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400cc7a:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cc7e:	7a08      	ldrb	r0, [r1, #8]
2400cc80:	6813      	ldr	r3, [r2, #0]
2400cc82:	4718      	bx	r3
  }
  return stat;
}
2400cc84:	2000      	movs	r0, #0
2400cc86:	4770      	bx	lr
2400cc88:	2001db20 	.word	0x2001db20

2400cc8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400cc8c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cc8e:	4c05      	ldr	r4, [pc, #20]	; (2400cca4 <disk_read+0x18>)
2400cc90:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400cc94:	4404      	add	r4, r0
2400cc96:	686d      	ldr	r5, [r5, #4]
2400cc98:	7a20      	ldrb	r0, [r4, #8]
2400cc9a:	68ac      	ldr	r4, [r5, #8]
2400cc9c:	46a4      	mov	ip, r4
  return res;
}
2400cc9e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cca0:	4760      	bx	ip
2400cca2:	bf00      	nop
2400cca4:	2001db20 	.word	0x2001db20

2400cca8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400cca8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400ccaa:	4c05      	ldr	r4, [pc, #20]	; (2400ccc0 <disk_write+0x18>)
2400ccac:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400ccb0:	4404      	add	r4, r0
2400ccb2:	686d      	ldr	r5, [r5, #4]
2400ccb4:	7a20      	ldrb	r0, [r4, #8]
2400ccb6:	68ec      	ldr	r4, [r5, #12]
2400ccb8:	46a4      	mov	ip, r4
  return res;
}
2400ccba:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400ccbc:	4760      	bx	ip
2400ccbe:	bf00      	nop
2400ccc0:	2001db20 	.word	0x2001db20

2400ccc4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400ccc4:	4b04      	ldr	r3, [pc, #16]	; (2400ccd8 <disk_ioctl+0x14>)
2400ccc6:	eb03 0c00 	add.w	ip, r3, r0
2400ccca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400ccce:	685b      	ldr	r3, [r3, #4]
2400ccd0:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400ccd4:	691b      	ldr	r3, [r3, #16]
2400ccd6:	4718      	bx	r3
2400ccd8:	2001db20 	.word	0x2001db20

2400ccdc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400ccdc:	4b26      	ldr	r3, [pc, #152]	; (2400cd78 <inc_lock+0x9c>)
{
2400ccde:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400cce0:	681a      	ldr	r2, [r3, #0]
2400cce2:	6805      	ldr	r5, [r0, #0]
2400cce4:	4295      	cmp	r5, r2
2400cce6:	d01b      	beq.n	2400cd20 <inc_lock+0x44>
2400cce8:	691c      	ldr	r4, [r3, #16]
2400ccea:	42ac      	cmp	r4, r5
2400ccec:	d006      	beq.n	2400ccfc <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400ccee:	b30a      	cbz	r2, 2400cd34 <inc_lock+0x58>
2400ccf0:	2c00      	cmp	r4, #0
2400ccf2:	d036      	beq.n	2400cd62 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400ccf4:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400ccf6:	4620      	mov	r0, r4
2400ccf8:	bcf0      	pop	{r4, r5, r6, r7}
2400ccfa:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400ccfc:	695e      	ldr	r6, [r3, #20]
2400ccfe:	6887      	ldr	r7, [r0, #8]
2400cd00:	42be      	cmp	r6, r7
2400cd02:	d1f4      	bne.n	2400ccee <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400cd04:	699e      	ldr	r6, [r3, #24]
2400cd06:	6947      	ldr	r7, [r0, #20]
2400cd08:	42be      	cmp	r6, r7
2400cd0a:	d1f0      	bne.n	2400ccee <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cd0c:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cd0e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400cd12:	bb49      	cbnz	r1, 2400cd68 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd14:	0111      	lsls	r1, r2, #4
	return i + 1;
2400cd16:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd18:	8982      	ldrh	r2, [r0, #12]
2400cd1a:	3201      	adds	r2, #1
2400cd1c:	b292      	uxth	r2, r2
2400cd1e:	e01b      	b.n	2400cd58 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
2400cd20:	6884      	ldr	r4, [r0, #8]
2400cd22:	685e      	ldr	r6, [r3, #4]
2400cd24:	42a6      	cmp	r6, r4
2400cd26:	d1df      	bne.n	2400cce8 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400cd28:	689c      	ldr	r4, [r3, #8]
2400cd2a:	6946      	ldr	r6, [r0, #20]
2400cd2c:	42a6      	cmp	r6, r4
2400cd2e:	d1db      	bne.n	2400cce8 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cd30:	2200      	movs	r2, #0
2400cd32:	e7ec      	b.n	2400cd0e <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cd34:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cd36:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400cd38:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400cd3c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400cd40:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400cd42:	6945      	ldr	r5, [r0, #20]
2400cd44:	6880      	ldr	r0, [r0, #8]
2400cd46:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
2400cd4a:	f04f 0000 	mov.w	r0, #0
2400cd4e:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cd50:	bf14      	ite	ne
2400cd52:	f44f 7280 	movne.w	r2, #256	; 0x100
2400cd56:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd58:	440b      	add	r3, r1
}
2400cd5a:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd5c:	819a      	strh	r2, [r3, #12]
}
2400cd5e:	bcf0      	pop	{r4, r5, r6, r7}
2400cd60:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cd62:	2402      	movs	r4, #2
2400cd64:	2201      	movs	r2, #1
2400cd66:	e7e6      	b.n	2400cd36 <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cd68:	8980      	ldrh	r0, [r0, #12]
2400cd6a:	0111      	lsls	r1, r2, #4
2400cd6c:	2800      	cmp	r0, #0
2400cd6e:	d1c1      	bne.n	2400ccf4 <inc_lock+0x18>
	return i + 1;
2400cd70:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cd72:	f44f 7280 	mov.w	r2, #256	; 0x100
2400cd76:	e7ef      	b.n	2400cd58 <inc_lock+0x7c>
2400cd78:	2001d8fc 	.word	0x2001d8fc

2400cd7c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400cd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400cd80:	440a      	add	r2, r1
2400cd82:	460d      	mov	r5, r1
2400cd84:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd86:	4f37      	ldr	r7, [pc, #220]	; (2400ce64 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400cd88:	42aa      	cmp	r2, r5
2400cd8a:	d012      	beq.n	2400cdb2 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd8c:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd90:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cd94:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cd98:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cd9c:	2919      	cmp	r1, #25
2400cd9e:	d9f3      	bls.n	2400cd88 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cda0:	2c7f      	cmp	r4, #127	; 0x7f
2400cda2:	bf88      	it	hi
2400cda4:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400cda8:	2c00      	cmp	r4, #0
2400cdaa:	d1ed      	bne.n	2400cd88 <pattern_matching+0xc>
2400cdac:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400cdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400cdb2:	1e1f      	subs	r7, r3, #0
2400cdb4:	f896 8000 	ldrb.w	r8, [r6]
2400cdb8:	bf18      	it	ne
2400cdba:	2701      	movne	r7, #1
2400cdbc:	f1b8 0f00 	cmp.w	r8, #0
2400cdc0:	d100      	bne.n	2400cdc4 <pattern_matching+0x48>
2400cdc2:	bb8f      	cbnz	r7, 2400ce28 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cdc4:	4c27      	ldr	r4, [pc, #156]	; (2400ce64 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cdc6:	4630      	mov	r0, r6
{
2400cdc8:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cdca:	46a9      	mov	r9, r5
2400cdcc:	e010      	b.n	2400cdf0 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cdce:	3a20      	subs	r2, #32
2400cdd0:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cdd2:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cdd6:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cdda:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cddc:	f1bc 0f19 	cmp.w	ip, #25
2400cde0:	d815      	bhi.n	2400ce0e <pattern_matching+0x92>
2400cde2:	3b20      	subs	r3, #32
2400cde4:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400cde6:	4293      	cmp	r3, r2
2400cde8:	d118      	bne.n	2400ce1c <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400cdea:	b1eb      	cbz	r3, 2400ce28 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400cdec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400cdf0:	2b3f      	cmp	r3, #63	; 0x3f
2400cdf2:	d01c      	beq.n	2400ce2e <pattern_matching+0xb2>
2400cdf4:	2b2a      	cmp	r3, #42	; 0x2a
2400cdf6:	d01a      	beq.n	2400ce2e <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cdf8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cdfc:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cdfe:	2919      	cmp	r1, #25
2400ce00:	d9e5      	bls.n	2400cdce <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400ce02:	2a7f      	cmp	r2, #127	; 0x7f
2400ce04:	d9e5      	bls.n	2400cdd2 <pattern_matching+0x56>
2400ce06:	4423      	add	r3, r4
2400ce08:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400ce0c:	e7e1      	b.n	2400cdd2 <pattern_matching+0x56>
2400ce0e:	2b7f      	cmp	r3, #127	; 0x7f
2400ce10:	d9e9      	bls.n	2400cde6 <pattern_matching+0x6a>
2400ce12:	4421      	add	r1, r4
2400ce14:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400ce18:	4293      	cmp	r3, r2
2400ce1a:	d0e6      	beq.n	2400cdea <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ce1c:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400ce1e:	2b00      	cmp	r3, #0
2400ce20:	d0c4      	beq.n	2400cdac <pattern_matching+0x30>
2400ce22:	2f00      	cmp	r7, #0
2400ce24:	d1cf      	bne.n	2400cdc6 <pattern_matching+0x4a>
2400ce26:	e7c1      	b.n	2400cdac <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400ce28:	2001      	movs	r0, #1
}
2400ce2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400ce2e:	4601      	mov	r1, r0
				nm = nx = 0;
2400ce30:	2300      	movs	r3, #0
2400ce32:	f811 cb01 	ldrb.w	ip, [r1], #1
2400ce36:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400ce38:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400ce3c:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400ce3e:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400ce42:	bf0c      	ite	eq
2400ce44:	3201      	addeq	r2, #1
2400ce46:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400ce48:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400ce4c:	d0f4      	beq.n	2400ce38 <pattern_matching+0xbc>
2400ce4e:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400ce52:	d0f1      	beq.n	2400ce38 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400ce54:	4649      	mov	r1, r9
2400ce56:	f7ff ff91 	bl	2400cd7c <pattern_matching>
2400ce5a:	2800      	cmp	r0, #0
2400ce5c:	d1e4      	bne.n	2400ce28 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400ce5e:	f899 3000 	ldrb.w	r3, [r9]
2400ce62:	e7db      	b.n	2400ce1c <pattern_matching+0xa0>
2400ce64:	24017fe8 	.word	0x24017fe8

2400ce68 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400ce68:	2300      	movs	r3, #0
{
2400ce6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400ce6e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400ce72:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400ce74:	69c2      	ldr	r2, [r0, #28]
2400ce76:	2a00      	cmp	r2, #0
2400ce78:	d063      	beq.n	2400cf42 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400ce7a:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400ce7c:	4604      	mov	r4, r0
2400ce7e:	460d      	mov	r5, r1
2400ce80:	3201      	adds	r2, #1
2400ce82:	d01f      	beq.n	2400cec4 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ce84:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400ce88:	8818      	ldrh	r0, [r3, #0]
2400ce8a:	2800      	cmp	r0, #0
2400ce8c:	d063      	beq.n	2400cf56 <get_fileinfo+0xee>
2400ce8e:	f101 0715 	add.w	r7, r1, #21
2400ce92:	2601      	movs	r6, #1
2400ce94:	e000      	b.n	2400ce98 <get_fileinfo+0x30>
2400ce96:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400ce98:	2100      	movs	r1, #0
2400ce9a:	f002 fe91 	bl	2400fbc0 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ce9e:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400cea0:	2800      	cmp	r0, #0
2400cea2:	d058      	beq.n	2400cf56 <get_fileinfo+0xee>
2400cea4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400cea8:	d055      	beq.n	2400cf56 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400ceaa:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400ceae:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400ceb2:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400ceb6:	2800      	cmp	r0, #0
2400ceb8:	d1ed      	bne.n	2400ce96 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400ceba:	442e      	add	r6, r5
2400cebc:	2300      	movs	r3, #0
2400cebe:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400cec0:	7da8      	ldrb	r0, [r5, #22]
2400cec2:	e000      	b.n	2400cec6 <get_fileinfo+0x5e>
2400cec4:	4618      	mov	r0, r3
	i = j = 0;
2400cec6:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400ceca:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400cecc:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400cece:	6a21      	ldr	r1, [r4, #32]
2400ced0:	5c8b      	ldrb	r3, [r1, r2]
2400ced2:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400ced4:	2b20      	cmp	r3, #32
2400ced6:	d01b      	beq.n	2400cf10 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400ced8:	2b05      	cmp	r3, #5
2400ceda:	bf08      	it	eq
2400cedc:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400cede:	2a09      	cmp	r2, #9
2400cee0:	d031      	beq.n	2400cf46 <get_fileinfo+0xde>
		fno->altname[j] = c;
2400cee2:	eb05 010c 	add.w	r1, r5, ip
2400cee6:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400cee8:	b980      	cbnz	r0, 2400cf0c <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400ceea:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400ceee:	2e19      	cmp	r6, #25
2400cef0:	d80b      	bhi.n	2400cf0a <get_fileinfo+0xa2>
2400cef2:	6a26      	ldr	r6, [r4, #32]
2400cef4:	2a08      	cmp	r2, #8
2400cef6:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400cefa:	bf8c      	ite	hi
2400cefc:	2610      	movhi	r6, #16
2400cefe:	2608      	movls	r6, #8
2400cf00:	ea1e 0f06 	tst.w	lr, r6
2400cf04:	d001      	beq.n	2400cf0a <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400cf06:	3320      	adds	r3, #32
2400cf08:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400cf0a:	758b      	strb	r3, [r1, #22]
		j++;
2400cf0c:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400cf10:	2a0b      	cmp	r2, #11
2400cf12:	d1dc      	bne.n	2400cece <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400cf14:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400cf18:	b928      	cbnz	r0, 2400cf26 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400cf1a:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400cf1c:	6a23      	ldr	r3, [r4, #32]
2400cf1e:	7b1b      	ldrb	r3, [r3, #12]
2400cf20:	2b00      	cmp	r3, #0
2400cf22:	bf08      	it	eq
2400cf24:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400cf26:	2300      	movs	r3, #0
2400cf28:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400cf2a:	6a23      	ldr	r3, [r4, #32]
2400cf2c:	7adb      	ldrb	r3, [r3, #11]
2400cf2e:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400cf30:	6a23      	ldr	r3, [r4, #32]
2400cf32:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400cf34:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400cf36:	6a23      	ldr	r3, [r4, #32]
2400cf38:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400cf3c:	0c1a      	lsrs	r2, r3, #16
2400cf3e:	80eb      	strh	r3, [r5, #6]
2400cf40:	80aa      	strh	r2, [r5, #4]
}
2400cf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400cf46:	eb05 010c 	add.w	r1, r5, ip
2400cf4a:	b900      	cbnz	r0, 2400cf4e <get_fileinfo+0xe6>
2400cf4c:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400cf4e:	f10c 0c01 	add.w	ip, ip, #1
2400cf52:	724f      	strb	r7, [r1, #9]
2400cf54:	e7c5      	b.n	2400cee2 <get_fileinfo+0x7a>
			i = j = 0;
2400cf56:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400cf58:	2300      	movs	r3, #0
2400cf5a:	442e      	add	r6, r5
2400cf5c:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400cf5e:	7da8      	ldrb	r0, [r5, #22]
2400cf60:	e7b1      	b.n	2400cec6 <get_fileinfo+0x5e>
2400cf62:	bf00      	nop

2400cf64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400cf64:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400cf66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400cf6a:	2300      	movs	r3, #0
{
2400cf6c:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400cf6e:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400cf70:	70c3      	strb	r3, [r0, #3]
2400cf72:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400cf74:	d00c      	beq.n	2400cf90 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400cf76:	460d      	mov	r5, r1
2400cf78:	460a      	mov	r2, r1
2400cf7a:	2301      	movs	r3, #1
2400cf7c:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400cf80:	7840      	ldrb	r0, [r0, #1]
2400cf82:	f7ff fe83 	bl	2400cc8c <disk_read>
2400cf86:	b110      	cbz	r0, 2400cf8e <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400cf88:	2004      	movs	r0, #4
			fs->winsect = sector;
2400cf8a:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400cf8c:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400cf8e:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400cf90:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400cf94:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400cf98:	429a      	cmp	r2, r3
2400cf9a:	d11a      	bne.n	2400cfd2 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400cf9c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400cfa0:	2be9      	cmp	r3, #233	; 0xe9
2400cfa2:	d007      	beq.n	2400cfb4 <check_fs+0x50>
2400cfa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400cfa6:	4a0d      	ldr	r2, [pc, #52]	; (2400cfdc <check_fs+0x78>)
2400cfa8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400cfac:	4293      	cmp	r3, r2
2400cfae:	d001      	beq.n	2400cfb4 <check_fs+0x50>
	return 2;
2400cfb0:	2002      	movs	r0, #2
}
2400cfb2:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400cfb4:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400cfb8:	4a09      	ldr	r2, [pc, #36]	; (2400cfe0 <check_fs+0x7c>)
2400cfba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400cfbe:	4293      	cmp	r3, r2
2400cfc0:	d009      	beq.n	2400cfd6 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400cfc2:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400cfc6:	4b07      	ldr	r3, [pc, #28]	; (2400cfe4 <check_fs+0x80>)
2400cfc8:	4298      	cmp	r0, r3
2400cfca:	bf14      	ite	ne
2400cfcc:	2002      	movne	r0, #2
2400cfce:	2000      	moveq	r0, #0
}
2400cfd0:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400cfd2:	2003      	movs	r0, #3
}
2400cfd4:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400cfd6:	2000      	movs	r0, #0
}
2400cfd8:	bd70      	pop	{r4, r5, r6, pc}
2400cfda:	bf00      	nop
2400cfdc:	009000eb 	.word	0x009000eb
2400cfe0:	00544146 	.word	0x00544146
2400cfe4:	33544146 	.word	0x33544146

2400cfe8 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400cfe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400cfea:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400cfec:	b083      	sub	sp, #12
2400cfee:	4604      	mov	r4, r0
2400cff0:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400cff2:	b973      	cbnz	r3, 2400d012 <move_window.part.0+0x2a>
2400cff4:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400cff8:	2301      	movs	r3, #1
2400cffa:	462a      	mov	r2, r5
2400cffc:	7860      	ldrb	r0, [r4, #1]
2400cffe:	f7ff fe45 	bl	2400cc8c <disk_read>
2400d002:	b910      	cbnz	r0, 2400d00a <move_window.part.0+0x22>
			fs->winsect = sector;
2400d004:	6325      	str	r5, [r4, #48]	; 0x30
}
2400d006:	b003      	add	sp, #12
2400d008:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400d00a:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400d00c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400d010:	e7f8      	b.n	2400d004 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400d012:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d014:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400d018:	2301      	movs	r3, #1
2400d01a:	7840      	ldrb	r0, [r0, #1]
2400d01c:	4632      	mov	r2, r6
2400d01e:	9101      	str	r1, [sp, #4]
2400d020:	f7ff fe42 	bl	2400cca8 <disk_write>
2400d024:	b9b8      	cbnz	r0, 2400d056 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d026:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400d028:	69e3      	ldr	r3, [r4, #28]
2400d02a:	1ab2      	subs	r2, r6, r2
2400d02c:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400d02e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d030:	429a      	cmp	r2, r3
2400d032:	d2e1      	bcs.n	2400cff8 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d034:	78a7      	ldrb	r7, [r4, #2]
2400d036:	2f01      	cmp	r7, #1
2400d038:	d801      	bhi.n	2400d03e <move_window.part.0+0x56>
2400d03a:	e7dd      	b.n	2400cff8 <move_window.part.0+0x10>
					wsect += fs->fsize;
2400d03c:	69e3      	ldr	r3, [r4, #28]
2400d03e:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d040:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d042:	2301      	movs	r3, #1
2400d044:	7860      	ldrb	r0, [r4, #1]
2400d046:	4632      	mov	r2, r6
2400d048:	9101      	str	r1, [sp, #4]
2400d04a:	f7ff fe2d 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d04e:	2f01      	cmp	r7, #1
2400d050:	9901      	ldr	r1, [sp, #4]
2400d052:	d1f3      	bne.n	2400d03c <move_window.part.0+0x54>
2400d054:	e7d0      	b.n	2400cff8 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400d056:	2001      	movs	r0, #1
}
2400d058:	b003      	add	sp, #12
2400d05a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400d05c <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400d05c:	2300      	movs	r3, #0
{
2400d05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400d062:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400d064:	6804      	ldr	r4, [r0, #0]
2400d066:	b18c      	cbz	r4, 2400d08c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d068:	7825      	ldrb	r5, [r4, #0]
2400d06a:	2d1f      	cmp	r5, #31
2400d06c:	d912      	bls.n	2400d094 <find_volume+0x38>
2400d06e:	2d3a      	cmp	r5, #58	; 0x3a
2400d070:	d010      	beq.n	2400d094 <find_volume+0x38>
2400d072:	46a4      	mov	ip, r4
2400d074:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400d078:	2b1f      	cmp	r3, #31
2400d07a:	d90d      	bls.n	2400d098 <find_volume+0x3c>
2400d07c:	2b3a      	cmp	r3, #58	; 0x3a
2400d07e:	d1f9      	bne.n	2400d074 <find_volume+0x18>
			i = *tp++ - '0';
2400d080:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400d082:	45a4      	cmp	ip, r4
2400d084:	d102      	bne.n	2400d08c <find_volume+0x30>
2400d086:	2d30      	cmp	r5, #48	; 0x30
2400d088:	f000 80da 	beq.w	2400d240 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400d08c:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400d08e:	4620      	mov	r0, r4
2400d090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d094:	462b      	mov	r3, r5
2400d096:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400d098:	2b3a      	cmp	r3, #58	; 0x3a
2400d09a:	d0f1      	beq.n	2400d080 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400d09c:	4ba6      	ldr	r3, [pc, #664]	; (2400d338 <find_volume+0x2dc>)
2400d09e:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d0a0:	2d00      	cmp	r5, #0
2400d0a2:	f000 80c9 	beq.w	2400d238 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400d0a6:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400d0a8:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400d0ac:	782b      	ldrb	r3, [r5, #0]
2400d0ae:	b17b      	cbz	r3, 2400d0d0 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400d0b0:	7868      	ldrb	r0, [r5, #1]
2400d0b2:	f7ff fdcf 	bl	2400cc54 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400d0b6:	07c1      	lsls	r1, r0, #31
2400d0b8:	d40a      	bmi.n	2400d0d0 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400d0ba:	2c00      	cmp	r4, #0
2400d0bc:	f000 80ab 	beq.w	2400d216 <find_volume+0x1ba>
2400d0c0:	f010 0404 	ands.w	r4, r0, #4
2400d0c4:	f000 80a7 	beq.w	2400d216 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400d0c8:	240a      	movs	r4, #10
}
2400d0ca:	4620      	mov	r0, r4
2400d0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400d0d0:	2000      	movs	r0, #0
2400d0d2:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400d0d4:	f7ff fdc8 	bl	2400cc68 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400d0d8:	07c2      	lsls	r2, r0, #31
2400d0da:	f100 809f 	bmi.w	2400d21c <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400d0de:	b10c      	cbz	r4, 2400d0e4 <find_volume+0x88>
2400d0e0:	0743      	lsls	r3, r0, #29
2400d0e2:	d4f1      	bmi.n	2400d0c8 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400d0e4:	2100      	movs	r1, #0
2400d0e6:	4628      	mov	r0, r5
2400d0e8:	f7ff ff3c 	bl	2400cf64 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400d0ec:	2802      	cmp	r0, #2
2400d0ee:	d077      	beq.n	2400d1e0 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d0f0:	2804      	cmp	r0, #4
2400d0f2:	f000 809f 	beq.w	2400d234 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d0f6:	2801      	cmp	r0, #1
2400d0f8:	f200 808c 	bhi.w	2400d214 <find_volume+0x1b8>
	bsect = 0;
2400d0fc:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400d0fe:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400d102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400d106:	f040 8085 	bne.w	2400d214 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400d10a:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400d10e:	b902      	cbnz	r2, 2400d112 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400d110:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d112:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400d116:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d118:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d11a:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d11c:	2901      	cmp	r1, #1
2400d11e:	d879      	bhi.n	2400d214 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400d120:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400d124:	b288      	uxth	r0, r1
2400d126:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400d128:	2800      	cmp	r0, #0
2400d12a:	d073      	beq.n	2400d214 <find_volume+0x1b8>
2400d12c:	1e48      	subs	r0, r1, #1
2400d12e:	4208      	tst	r0, r1
2400d130:	d170      	bne.n	2400d214 <find_volume+0x1b8>
	rv = ptr[1];
2400d132:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d136:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d13a:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d13e:	d169      	bne.n	2400d214 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400d140:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400d144:	b900      	cbnz	r0, 2400d148 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400d146:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400d148:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400d14c:	2f00      	cmp	r7, #0
2400d14e:	d061      	beq.n	2400d214 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400d150:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400d154:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400d158:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400d15a:	42b0      	cmp	r0, r6
2400d15c:	d35a      	bcc.n	2400d214 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d15e:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d162:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d164:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d168:	d354      	bcc.n	2400d214 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400d16a:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400d16e:	4288      	cmp	r0, r1
2400d170:	f200 8084 	bhi.w	2400d27c <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400d174:	f640 71f5 	movw	r1, #4085	; 0xff5
2400d178:	4288      	cmp	r0, r1
2400d17a:	f200 80a3 	bhi.w	2400d2c4 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d17e:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d180:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d182:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d184:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d186:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d188:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d18a:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d18c:	f1bc 0f00 	cmp.w	ip, #0
2400d190:	d040      	beq.n	2400d214 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d192:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400d196:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d19a:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d19c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400d1a0:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d1a2:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d1a4:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400d1a8:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400d1ac:	d332      	bcc.n	2400d214 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d1ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d1b2:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d1b4:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400d1b8:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400d1ba:	4960      	ldr	r1, [pc, #384]	; (2400d33c <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400d1bc:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d1be:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d1c0:	485f      	ldr	r0, [pc, #380]	; (2400d340 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d1c2:	4a60      	ldr	r2, [pc, #384]	; (2400d344 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400d1c4:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d1c6:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d1c8:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d1ca:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d1cc:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400d1ce:	800b      	strh	r3, [r1, #0]
2400d1d0:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d1d2:	f000 8086 	beq.w	2400d2e2 <find_volume+0x286>
2400d1d6:	6913      	ldr	r3, [r2, #16]
2400d1d8:	429d      	cmp	r5, r3
2400d1da:	d06f      	beq.n	2400d2bc <find_volume+0x260>
	return FR_OK;
2400d1dc:	2400      	movs	r4, #0
2400d1de:	e01a      	b.n	2400d216 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d1e0:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400d1e4:	b10e      	cbz	r6, 2400d1ea <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400d1e6:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d1ea:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400d1ee:	b10c      	cbz	r4, 2400d1f4 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400d1f0:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d1f4:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400d1f8:	b303      	cbz	r3, 2400d23c <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400d1fa:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d1fe:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400d202:	b10f      	cbz	r7, 2400d208 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400d204:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d208:	b9f6      	cbnz	r6, 2400d248 <find_volume+0x1ec>
2400d20a:	bb2c      	cbnz	r4, 2400d258 <find_volume+0x1fc>
2400d20c:	f1b8 0f00 	cmp.w	r8, #0
2400d210:	d12c      	bne.n	2400d26c <find_volume+0x210>
2400d212:	b93f      	cbnz	r7, 2400d224 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d214:	240d      	movs	r4, #13
}
2400d216:	4620      	mov	r0, r4
2400d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400d21c:	2403      	movs	r4, #3
}
2400d21e:	4620      	mov	r0, r4
2400d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d224:	4639      	mov	r1, r7
2400d226:	4628      	mov	r0, r5
2400d228:	f7ff fe9c 	bl	2400cf64 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d22c:	2801      	cmp	r0, #1
2400d22e:	d95b      	bls.n	2400d2e8 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d230:	2804      	cmp	r0, #4
2400d232:	d1ef      	bne.n	2400d214 <find_volume+0x1b8>
2400d234:	2401      	movs	r4, #1
2400d236:	e7ee      	b.n	2400d216 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d238:	240c      	movs	r4, #12
2400d23a:	e7ec      	b.n	2400d216 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d23c:	4698      	mov	r8, r3
2400d23e:	e7de      	b.n	2400d1fe <find_volume+0x1a2>
					*path = ++tt;
2400d240:	f10c 0301 	add.w	r3, ip, #1
2400d244:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400d246:	e729      	b.n	2400d09c <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d248:	4631      	mov	r1, r6
2400d24a:	4628      	mov	r0, r5
2400d24c:	f7ff fe8a 	bl	2400cf64 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d250:	2801      	cmp	r0, #1
2400d252:	d8da      	bhi.n	2400d20a <find_volume+0x1ae>
2400d254:	4634      	mov	r4, r6
2400d256:	e752      	b.n	2400d0fe <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d258:	4621      	mov	r1, r4
2400d25a:	4628      	mov	r0, r5
2400d25c:	f7ff fe82 	bl	2400cf64 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d260:	2801      	cmp	r0, #1
2400d262:	f67f af4c 	bls.w	2400d0fe <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d266:	f1b8 0f00 	cmp.w	r8, #0
2400d26a:	d0d2      	beq.n	2400d212 <find_volume+0x1b6>
2400d26c:	4641      	mov	r1, r8
2400d26e:	4628      	mov	r0, r5
2400d270:	f7ff fe78 	bl	2400cf64 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d274:	2801      	cmp	r0, #1
2400d276:	d8cc      	bhi.n	2400d212 <find_volume+0x1b6>
2400d278:	4644      	mov	r4, r8
2400d27a:	e740      	b.n	2400d0fe <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
2400d27c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d280:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d282:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d284:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d286:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d28a:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d28c:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400d28e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400d290:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d292:	d1bf      	bne.n	2400d214 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400d294:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400d296:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d298:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400d29c:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d29e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400d2a2:	d3b7      	bcc.n	2400d214 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d2a4:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d2ac:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d2ae:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400d2b0:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d2b2:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d2b6:	d019      	beq.n	2400d2ec <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d2b8:	2003      	movs	r0, #3
2400d2ba:	e77e      	b.n	2400d1ba <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d2bc:	2300      	movs	r3, #0
	return FR_OK;
2400d2be:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d2c0:	6113      	str	r3, [r2, #16]
2400d2c2:	e7a8      	b.n	2400d216 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d2c4:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d2c6:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d2c8:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d2ca:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d2cc:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d2ce:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d2d0:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d2d2:	f1bc 0f00 	cmp.w	ip, #0
2400d2d6:	d09d      	beq.n	2400d214 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d2d8:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d2da:	0049      	lsls	r1, r1, #1
2400d2dc:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d2de:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
2400d2e0:	e760      	b.n	2400d1a4 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d2e2:	2300      	movs	r3, #0
2400d2e4:	6013      	str	r3, [r2, #0]
2400d2e6:	e776      	b.n	2400d1d6 <find_volume+0x17a>
2400d2e8:	463c      	mov	r4, r7
2400d2ea:	e708      	b.n	2400d0fe <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d2ec:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d2ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2400d2f0:	4299      	cmp	r1, r3
2400d2f2:	d004      	beq.n	2400d2fe <find_volume+0x2a2>
2400d2f4:	4628      	mov	r0, r5
2400d2f6:	f7ff fe77 	bl	2400cfe8 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d2fa:	2800      	cmp	r0, #0
2400d2fc:	d1dc      	bne.n	2400d2b8 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d2fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d302:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400d306:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d308:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
2400d30a:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d30c:	d1d4      	bne.n	2400d2b8 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d30e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400d310:	4b0d      	ldr	r3, [pc, #52]	; (2400d348 <find_volume+0x2ec>)
2400d312:	429a      	cmp	r2, r3
2400d314:	d1d0      	bne.n	2400d2b8 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d316:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400d31a:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d31e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400d322:	3320      	adds	r3, #32
2400d324:	429a      	cmp	r2, r3
2400d326:	d1c7      	bne.n	2400d2b8 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d328:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d32c:	2003      	movs	r0, #3
2400d32e:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2400d332:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400d336:	e740      	b.n	2400d1ba <find_volume+0x15e>
2400d338:	2001d8f8 	.word	0x2001d8f8
2400d33c:	2001d91c 	.word	0x2001d91c
2400d340:	2001d920 	.word	0x2001d920
2400d344:	2001d8fc 	.word	0x2001d8fc
2400d348:	41615252 	.word	0x41615252

2400d34c <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
2400d350:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d352:	4604      	mov	r4, r0
2400d354:	460d      	mov	r5, r1
2400d356:	4616      	mov	r6, r2
		switch (fs->fs_type) {
2400d358:	2b02      	cmp	r3, #2
2400d35a:	d006      	beq.n	2400d36a <put_fat.part.0+0x1e>
2400d35c:	2b03      	cmp	r3, #3
2400d35e:	d052      	beq.n	2400d406 <put_fat.part.0+0xba>
2400d360:	2b01      	cmp	r3, #1
2400d362:	d01b      	beq.n	2400d39c <put_fat.part.0+0x50>
2400d364:	2002      	movs	r0, #2
}
2400d366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d36a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d36c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d36e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d372:	4299      	cmp	r1, r3
2400d374:	d003      	beq.n	2400d37e <put_fat.part.0+0x32>
2400d376:	f7ff fe37 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400d37a:	2800      	cmp	r0, #0
2400d37c:	d1f3      	bne.n	2400d366 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d37e:	006d      	lsls	r5, r5, #1
2400d380:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400d384:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
2400d388:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d38a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400d38e:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d390:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
2400d392:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
2400d394:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
2400d396:	70e3      	strb	r3, [r4, #3]
}
2400d398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
2400d39c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3a0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3a4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3a8:	4299      	cmp	r1, r3
2400d3aa:	d003      	beq.n	2400d3b4 <put_fat.part.0+0x68>
2400d3ac:	f7ff fe1c 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400d3b0:	2800      	cmp	r0, #0
2400d3b2:	d1d8      	bne.n	2400d366 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d3b4:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400d3b6:	f107 0801 	add.w	r8, r7, #1
2400d3ba:	f104 0934 	add.w	r9, r4, #52	; 0x34
2400d3be:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d3c2:	d542      	bpl.n	2400d44a <put_fat.part.0+0xfe>
2400d3c4:	f819 3007 	ldrb.w	r3, [r9, r7]
2400d3c8:	f003 030f 	and.w	r3, r3, #15
2400d3cc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
2400d3d0:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
2400d3d4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d3d8:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d3da:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3de:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d3e0:	4299      	cmp	r1, r3
2400d3e2:	d004      	beq.n	2400d3ee <put_fat.part.0+0xa2>
2400d3e4:	4620      	mov	r0, r4
2400d3e6:	f7ff fdff 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400d3ea:	2800      	cmp	r0, #0
2400d3ec:	d1bb      	bne.n	2400d366 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d3ee:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d3f2:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2400d3f6:	44c8      	add	r8, r9
			fs->wflag = 1;
2400d3f8:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d3fa:	f888 2000 	strb.w	r2, [r8]
			break;
2400d3fe:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d400:	70e3      	strb	r3, [r4, #3]
}
2400d402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d406:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d408:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d40a:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d40e:	4299      	cmp	r1, r3
2400d410:	d003      	beq.n	2400d41a <put_fat.part.0+0xce>
2400d412:	f7ff fde9 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400d416:	2800      	cmp	r0, #0
2400d418:	d1a5      	bne.n	2400d366 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d41a:	00ad      	lsls	r5, r5, #2
2400d41c:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400d420:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2400d424:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d428:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d42a:	1941      	adds	r1, r0, r5
2400d42c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d430:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2400d432:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d434:	5542      	strb	r2, [r0, r5]
2400d436:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400d438:	708b      	strb	r3, [r1, #2]
2400d43a:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
2400d43c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400d43e:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
2400d440:	70ca      	strb	r2, [r1, #3]
			break;
2400d442:	2000      	movs	r0, #0
			fs->wflag = 1;
2400d444:	70e3      	strb	r3, [r4, #3]
}
2400d446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d44a:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
2400d44e:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d450:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d452:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d454:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d458:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400d45a:	4299      	cmp	r1, r3
2400d45c:	d005      	beq.n	2400d46a <put_fat.part.0+0x11e>
2400d45e:	4620      	mov	r0, r4
2400d460:	f7ff fdc2 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400d464:	2800      	cmp	r0, #0
2400d466:	f47f af7e 	bne.w	2400d366 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d46a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d46e:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2400d472:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d474:	f898 3000 	ldrb.w	r3, [r8]
2400d478:	f023 060f 	bic.w	r6, r3, #15
2400d47c:	4332      	orrs	r2, r6
2400d47e:	e7bb      	b.n	2400d3f8 <put_fat.part.0+0xac>

2400d480 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d480:	2901      	cmp	r1, #1
2400d482:	d90e      	bls.n	2400d4a2 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d486:	6983      	ldr	r3, [r0, #24]
2400d488:	460c      	mov	r4, r1
2400d48a:	4605      	mov	r5, r0
2400d48c:	4299      	cmp	r1, r3
2400d48e:	d206      	bcs.n	2400d49e <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400d490:	7803      	ldrb	r3, [r0, #0]
2400d492:	2b02      	cmp	r3, #2
2400d494:	d03e      	beq.n	2400d514 <get_fat.isra.0+0x94>
2400d496:	2b03      	cmp	r3, #3
2400d498:	d02b      	beq.n	2400d4f2 <get_fat.isra.0+0x72>
2400d49a:	2b01      	cmp	r3, #1
2400d49c:	d003      	beq.n	2400d4a6 <get_fat.isra.0+0x26>
2400d49e:	2001      	movs	r0, #1
}
2400d4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400d4a2:	2001      	movs	r0, #1
}
2400d4a4:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
2400d4a6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4ac:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4ae:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4b2:	4291      	cmp	r1, r2
2400d4b4:	d004      	beq.n	2400d4c0 <get_fat.isra.0+0x40>
2400d4b6:	f7ff fd97 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4ba:	bba0      	cbnz	r0, 2400d526 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400d4c0:	1c77      	adds	r7, r6, #1
2400d4c2:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4c6:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400d4ca:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4cc:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400d4ce:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4d2:	d003      	beq.n	2400d4dc <get_fat.isra.0+0x5c>
2400d4d4:	4628      	mov	r0, r5
2400d4d6:	f7ff fd87 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d4da:	bb20      	cbnz	r0, 2400d526 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
2400d4dc:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d4e0:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400d4e2:	443d      	add	r5, r7
2400d4e4:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400d4e8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d4ec:	d524      	bpl.n	2400d538 <get_fat.isra.0+0xb8>
2400d4ee:	0900      	lsrs	r0, r0, #4
}
2400d4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d4f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d4f6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4fa:	4299      	cmp	r1, r3
2400d4fc:	d002      	beq.n	2400d504 <get_fat.isra.0+0x84>
2400d4fe:	f7ff fd73 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d502:	b980      	cbnz	r0, 2400d526 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d504:	00a4      	lsls	r4, r4, #2
2400d506:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d50a:	4425      	add	r5, r4
2400d50c:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d50e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d514:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d516:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d518:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d51c:	4299      	cmp	r1, r3
2400d51e:	d005      	beq.n	2400d52c <get_fat.isra.0+0xac>
2400d520:	f7ff fd62 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d524:	b110      	cbz	r0, 2400d52c <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400d526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400d52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d52c:	0064      	lsls	r4, r4, #1
2400d52e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400d532:	4425      	add	r5, r4
2400d534:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2400d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d538:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
2400d53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d53e:	bf00      	nop

2400d540 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
2400d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d544:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d546:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d548:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d54a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d54e:	d22d      	bcs.n	2400d5ac <dir_next.constprop.0+0x6c>
2400d550:	b363      	cbz	r3, 2400d5ac <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d552:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400d556:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d558:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d55a:	b137      	cbz	r7, 2400d56a <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d55c:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
2400d55e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400d560:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d562:	443e      	add	r6, r7
2400d564:	6226      	str	r6, [r4, #32]
}
2400d566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
2400d56a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400d56c:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400d56e:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400d570:	b1f9      	cbz	r1, 2400d5b2 <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d572:	8973      	ldrh	r3, [r6, #10]
2400d574:	3b01      	subs	r3, #1
2400d576:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
2400d57a:	d1ef      	bne.n	2400d55c <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d57c:	4630      	mov	r0, r6
2400d57e:	f7ff ff7f 	bl	2400d480 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d582:	2801      	cmp	r0, #1
2400d584:	d91d      	bls.n	2400d5c2 <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d586:	1c43      	adds	r3, r0, #1
2400d588:	d01d      	beq.n	2400d5c6 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d58a:	69b3      	ldr	r3, [r6, #24]
2400d58c:	4298      	cmp	r0, r3
2400d58e:	d214      	bcs.n	2400d5ba <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d590:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d592:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d594:	69b3      	ldr	r3, [r6, #24]
2400d596:	3b02      	subs	r3, #2
2400d598:	4298      	cmp	r0, r3
2400d59a:	d204      	bcs.n	2400d5a6 <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
2400d59c:	f8b6 800a 	ldrh.w	r8, [r6, #10]
2400d5a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
2400d5a2:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
2400d5a6:	f8c4 801c 	str.w	r8, [r4, #28]
2400d5aa:	e7d7      	b.n	2400d55c <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d5ac:	2004      	movs	r0, #4
}
2400d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d5b2:	8933      	ldrh	r3, [r6, #8]
2400d5b4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400d5b8:	d8d0      	bhi.n	2400d55c <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
2400d5ba:	2300      	movs	r3, #0
2400d5bc:	2004      	movs	r0, #4
2400d5be:	61e3      	str	r3, [r4, #28]
2400d5c0:	e7d1      	b.n	2400d566 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d5c2:	2002      	movs	r0, #2
2400d5c4:	e7cf      	b.n	2400d566 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d5c6:	2001      	movs	r0, #1
2400d5c8:	e7cd      	b.n	2400d566 <dir_next.constprop.0+0x26>
2400d5ca:	bf00      	nop

2400d5cc <dir_read.constprop.0>:
FRESULT dir_read (
2400d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400d5d0:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400d5d2:	b083      	sub	sp, #12
2400d5d4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d5d6:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
2400d5d8:	2e00      	cmp	r6, #0
2400d5da:	d05e      	beq.n	2400d69a <dir_read.constprop.0+0xce>
	BYTE ord = 0xFF, sum = 0xFF;
2400d5dc:	f04f 0aff 	mov.w	sl, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d5e0:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400d5e4:	46d0      	mov	r8, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d5e6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
2400d5e8:	42b5      	cmp	r5, r6
2400d5ea:	d014      	beq.n	2400d616 <dir_read.constprop.0+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d5ec:	78fb      	ldrb	r3, [r7, #3]
2400d5ee:	2b00      	cmp	r3, #0
2400d5f0:	f040 80cb 	bne.w	2400d78a <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d5f4:	2301      	movs	r3, #1
2400d5f6:	4632      	mov	r2, r6
2400d5f8:	4649      	mov	r1, r9
2400d5fa:	7878      	ldrb	r0, [r7, #1]
2400d5fc:	f7ff fb46 	bl	2400cc8c <disk_read>
2400d600:	b140      	cbz	r0, 2400d614 <dir_read.constprop.0+0x48>
			fs->winsect = sector;
2400d602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400d606:	2001      	movs	r0, #1
			fs->winsect = sector;
2400d608:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400d60a:	2300      	movs	r3, #0
2400d60c:	61e3      	str	r3, [r4, #28]
}
2400d60e:	b003      	add	sp, #12
2400d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400d614:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400d616:	6a21      	ldr	r1, [r4, #32]
2400d618:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400d61a:	2a00      	cmp	r2, #0
2400d61c:	d03d      	beq.n	2400d69a <dir_read.constprop.0+0xce>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d61e:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d620:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400d626:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d628:	d005      	beq.n	2400d636 <dir_read.constprop.0+0x6a>
2400d62a:	2a2e      	cmp	r2, #46	; 0x2e
2400d62c:	d003      	beq.n	2400d636 <dir_read.constprop.0+0x6a>
2400d62e:	f023 0020 	bic.w	r0, r3, #32
2400d632:	2808      	cmp	r0, #8
2400d634:	d138      	bne.n	2400d6a8 <dir_read.constprop.0+0xdc>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d636:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d63a:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d63c:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d63e:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d640:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d644:	d229      	bcs.n	2400d69a <dir_read.constprop.0+0xce>
2400d646:	b346      	cbz	r6, 2400d69a <dir_read.constprop.0+0xce>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d648:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400d64c:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d64e:	bb32      	cbnz	r2, 2400d69e <dir_read.constprop.0+0xd2>
		dp->sect++;				/* Next sector */
2400d650:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400d652:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400d654:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400d656:	b961      	cbnz	r1, 2400d672 <dir_read.constprop.0+0xa6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d658:	891a      	ldrh	r2, [r3, #8]
2400d65a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400d65e:	d91c      	bls.n	2400d69a <dir_read.constprop.0+0xce>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d660:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d662:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d664:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400d666:	2e00      	cmp	r6, #0
2400d668:	d1bd      	bne.n	2400d5e6 <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d66a:	2000      	movs	r0, #0
}
2400d66c:	b003      	add	sp, #12
2400d66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d672:	895a      	ldrh	r2, [r3, #10]
2400d674:	3a01      	subs	r2, #1
2400d676:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
2400d67a:	d1f1      	bne.n	2400d660 <dir_read.constprop.0+0x94>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d67c:	4618      	mov	r0, r3
2400d67e:	9301      	str	r3, [sp, #4]
2400d680:	f7ff fefe 	bl	2400d480 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d684:	2801      	cmp	r0, #1
2400d686:	f240 80b4 	bls.w	2400d7f2 <dir_read.constprop.0+0x226>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d68a:	1c43      	adds	r3, r0, #1
2400d68c:	f000 8084 	beq.w	2400d798 <dir_read.constprop.0+0x1cc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d690:	9b01      	ldr	r3, [sp, #4]
2400d692:	699a      	ldr	r2, [r3, #24]
2400d694:	4290      	cmp	r0, r2
2400d696:	f0c0 80a0 	bcc.w	2400d7da <dir_read.constprop.0+0x20e>
	FRESULT res = FR_NO_FILE;
2400d69a:	2004      	movs	r0, #4
2400d69c:	e7b5      	b.n	2400d60a <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d69e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d6a0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d6a2:	441a      	add	r2, r3
2400d6a4:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
2400d6a6:	e79e      	b.n	2400d5e6 <dir_read.constprop.0+0x1a>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400d6a8:	2b0f      	cmp	r3, #15
2400d6aa:	f040 80aa 	bne.w	2400d802 <dir_read.constprop.0+0x236>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400d6ae:	0650      	lsls	r0, r2, #25
2400d6b0:	d574      	bpl.n	2400d79c <dir_read.constprop.0+0x1d0>
						dp->blk_ofs = dp->dptr;
2400d6b2:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400d6b4:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400d6b8:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400d6bc:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d6be:	7b4b      	ldrb	r3, [r1, #13]
2400d6c0:	4553      	cmp	r3, sl
2400d6c2:	d1b8      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400d6c4:	8b4b      	ldrh	r3, [r1, #26]
2400d6c6:	2b00      	cmp	r3, #0
2400d6c8:	d1b5      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400d6ca:	780b      	ldrb	r3, [r1, #0]
2400d6cc:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400d6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d6d4:	3b01      	subs	r3, #1
2400d6d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400d6da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6de:	2bfe      	cmp	r3, #254	; 0xfe
2400d6e0:	d8a9      	bhi.n	2400d636 <dir_read.constprop.0+0x6a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d6e2:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6e4:	1c5a      	adds	r2, r3, #1
2400d6e6:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400d6ea:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400d6ee:	2800      	cmp	r0, #0
2400d6f0:	f040 8090 	bne.w	2400d814 <dir_read.constprop.0+0x248>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d6f8:	429e      	cmp	r6, r3
2400d6fa:	d19c      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d6fc:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d700:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d704:	459e      	cmp	lr, r3
2400d706:	d196      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d708:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d70c:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d710:	459c      	cmp	ip, r3
2400d712:	d190      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d714:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d718:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d71c:	429e      	cmp	r6, r3
2400d71e:	d18a      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d720:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d724:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d728:	459c      	cmp	ip, r3
2400d72a:	d184      	bne.n	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d72c:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d730:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d734:	459e      	cmp	lr, r3
2400d736:	f47f af7e 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d73a:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d73c:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d740:	429e      	cmp	r6, r3
2400d742:	f47f af78 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d746:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d74a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d74e:	459c      	cmp	ip, r3
2400d750:	f47f af71 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d754:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d756:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d75a:	429e      	cmp	r6, r3
2400d75c:	f47f af6b 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d760:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d764:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d768:	459c      	cmp	ip, r3
2400d76a:	f47f af64 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d76e:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d770:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d774:	429e      	cmp	r6, r3
2400d776:	f47f af5e 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
	rv = ptr[1];
2400d77a:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d77e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d782:	459c      	cmp	ip, r3
2400d784:	f000 80ca 	beq.w	2400d91c <dir_read.constprop.0+0x350>
2400d788:	e755      	b.n	2400d636 <dir_read.constprop.0+0x6a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d78a:	2301      	movs	r3, #1
2400d78c:	462a      	mov	r2, r5
2400d78e:	4649      	mov	r1, r9
2400d790:	7878      	ldrb	r0, [r7, #1]
2400d792:	f7ff fa89 	bl	2400cca8 <disk_write>
2400d796:	b128      	cbz	r0, 2400d7a4 <dir_read.constprop.0+0x1d8>
	FRESULT res = FR_NO_FILE;
2400d798:	2001      	movs	r0, #1
2400d79a:	e736      	b.n	2400d60a <dir_read.constprop.0+0x3e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d79c:	4542      	cmp	r2, r8
2400d79e:	f47f af4a 	bne.w	2400d636 <dir_read.constprop.0+0x6a>
2400d7a2:	e78c      	b.n	2400d6be <dir_read.constprop.0+0xf2>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400d7a6:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d7a8:	1aea      	subs	r2, r5, r3
2400d7aa:	69fb      	ldr	r3, [r7, #28]
2400d7ac:	429a      	cmp	r2, r3
2400d7ae:	f4bf af21 	bcs.w	2400d5f4 <dir_read.constprop.0+0x28>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d7b2:	f897 b002 	ldrb.w	fp, [r7, #2]
2400d7b6:	f1bb 0f01 	cmp.w	fp, #1
2400d7ba:	d801      	bhi.n	2400d7c0 <dir_read.constprop.0+0x1f4>
2400d7bc:	e71a      	b.n	2400d5f4 <dir_read.constprop.0+0x28>
					wsect += fs->fsize;
2400d7be:	69fb      	ldr	r3, [r7, #28]
2400d7c0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d7c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400d7c6:	2301      	movs	r3, #1
2400d7c8:	4649      	mov	r1, r9
2400d7ca:	462a      	mov	r2, r5
2400d7cc:	7878      	ldrb	r0, [r7, #1]
2400d7ce:	f7ff fa6b 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d7d2:	f1bb 0f01 	cmp.w	fp, #1
2400d7d6:	d1f2      	bne.n	2400d7be <dir_read.constprop.0+0x1f2>
2400d7d8:	e70c      	b.n	2400d5f4 <dir_read.constprop.0+0x28>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d7da:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d7dc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d7de:	699a      	ldr	r2, [r3, #24]
2400d7e0:	3a02      	subs	r2, #2
2400d7e2:	4290      	cmp	r0, r2
2400d7e4:	d207      	bcs.n	2400d7f6 <dir_read.constprop.0+0x22a>
	return clst * fs->csize + fs->database;
2400d7e6:	895a      	ldrh	r2, [r3, #10]
2400d7e8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400d7ea:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400d7ee:	61e6      	str	r6, [r4, #28]
2400d7f0:	e736      	b.n	2400d660 <dir_read.constprop.0+0x94>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d7f2:	2002      	movs	r0, #2
2400d7f4:	e709      	b.n	2400d60a <dir_read.constprop.0+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d7f6:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400d7f8:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400d7fc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d7fe:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400d800:	e733      	b.n	2400d66a <dir_read.constprop.0+0x9e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d802:	f1b8 0f00 	cmp.w	r8, #0
2400d806:	f000 8096 	beq.w	2400d936 <dir_read.constprop.0+0x36a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d80a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d80e:	2000      	movs	r0, #0
2400d810:	6323      	str	r3, [r4, #48]	; 0x30
2400d812:	e6fc      	b.n	2400d60e <dir_read.constprop.0+0x42>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d814:	2aff      	cmp	r2, #255	; 0xff
2400d816:	f000 80d8 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d81a:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400d81e:	0050      	lsls	r0, r2, #1
2400d820:	f8b1 e005 	ldrh.w	lr, [r1, #5]
2400d824:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400d826:	2e00      	cmp	r6, #0
2400d828:	f43f af6a 	beq.w	2400d700 <dir_read.constprop.0+0x134>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d82c:	2aff      	cmp	r2, #255	; 0xff
2400d82e:	f000 80cc 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d832:	4428      	add	r0, r5
2400d834:	1cda      	adds	r2, r3, #3
2400d836:	f8a0 e002 	strh.w	lr, [r0, #2]
2400d83a:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
2400d83e:	f1be 0f00 	cmp.w	lr, #0
2400d842:	f43f af63 	beq.w	2400d70c <dir_read.constprop.0+0x140>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d846:	2aff      	cmp	r2, #255	; 0xff
2400d848:	f000 80bf 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d84c:	f8a0 c004 	strh.w	ip, [r0, #4]
2400d850:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400d852:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400d856:	f1bc 0f00 	cmp.w	ip, #0
2400d85a:	f43f af5d 	beq.w	2400d718 <dir_read.constprop.0+0x14c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d85e:	2aff      	cmp	r2, #255	; 0xff
2400d860:	f000 80b3 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d864:	80c6      	strh	r6, [r0, #6]
2400d866:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400d868:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
2400d86c:	2e00      	cmp	r6, #0
2400d86e:	f43f af59 	beq.w	2400d724 <dir_read.constprop.0+0x158>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d872:	2aff      	cmp	r2, #255	; 0xff
2400d874:	f000 80a9 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d878:	f8a0 c008 	strh.w	ip, [r0, #8]
2400d87c:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400d87e:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
2400d882:	f1bc 0f00 	cmp.w	ip, #0
2400d886:	f43f af53 	beq.w	2400d730 <dir_read.constprop.0+0x164>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d88a:	2aff      	cmp	r2, #255	; 0xff
2400d88c:	f000 809d 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d890:	f8a0 e00a 	strh.w	lr, [r0, #10]
2400d894:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400d896:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400d898:	f1be 0f00 	cmp.w	lr, #0
2400d89c:	f43f af4e 	beq.w	2400d73c <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8a0:	2aff      	cmp	r2, #255	; 0xff
2400d8a2:	f000 8092 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8a6:	8186      	strh	r6, [r0, #12]
2400d8a8:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400d8ac:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
2400d8b0:	2e00      	cmp	r6, #0
2400d8b2:	f43f af4a 	beq.w	2400d74a <dir_read.constprop.0+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8b6:	2aff      	cmp	r2, #255	; 0xff
2400d8b8:	f000 8087 	beq.w	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8bc:	f8a0 c00e 	strh.w	ip, [r0, #14]
2400d8c0:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400d8c4:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400d8c6:	f1bc 0f00 	cmp.w	ip, #0
2400d8ca:	f43f af44 	beq.w	2400d756 <dir_read.constprop.0+0x18a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8ce:	2aff      	cmp	r2, #255	; 0xff
2400d8d0:	d07b      	beq.n	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8d2:	8206      	strh	r6, [r0, #16]
2400d8d4:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400d8d8:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
2400d8dc:	2e00      	cmp	r6, #0
2400d8de:	f43f af41 	beq.w	2400d764 <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8e2:	2aff      	cmp	r2, #255	; 0xff
2400d8e4:	f43f aea7 	beq.w	2400d636 <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8e8:	f8a0 c012 	strh.w	ip, [r0, #18]
2400d8ec:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400d8f0:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400d8f2:	f1bc 0f00 	cmp.w	ip, #0
2400d8f6:	f43f af3b 	beq.w	2400d770 <dir_read.constprop.0+0x1a4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d8fa:	2aff      	cmp	r2, #255	; 0xff
2400d8fc:	d065      	beq.n	2400d9ca <dir_read.constprop.0+0x3fe>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d8fe:	8286      	strh	r6, [r0, #20]
2400d900:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400d904:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
2400d908:	2e00      	cmp	r6, #0
2400d90a:	f43f af38 	beq.w	2400d77e <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d90e:	2aff      	cmp	r2, #255	; 0xff
2400d910:	f43f ae91 	beq.w	2400d636 <dir_read.constprop.0+0x6a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d914:	f103 020d 	add.w	r2, r3, #13
2400d918:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400d91c:	780b      	ldrb	r3, [r1, #0]
2400d91e:	0659      	lsls	r1, r3, #25
2400d920:	d504      	bpl.n	2400d92c <dir_read.constprop.0+0x360>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400d922:	2aff      	cmp	r2, #255	; 0xff
2400d924:	d051      	beq.n	2400d9ca <dir_read.constprop.0+0x3fe>
		lfnbuf[i] = 0;
2400d926:	2300      	movs	r3, #0
2400d928:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d92c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
2400d930:	fa5f f888 	uxtb.w	r8, r8
2400d934:	e681      	b.n	2400d63a <dir_read.constprop.0+0x6e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400d936:	780a      	ldrb	r2, [r1, #0]
2400d938:	01d3      	lsls	r3, r2, #7
2400d93a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400d93e:	784a      	ldrb	r2, [r1, #1]
2400d940:	441a      	add	r2, r3
2400d942:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d946:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d94a:	788a      	ldrb	r2, [r1, #2]
2400d94c:	fa52 f283 	uxtab	r2, r2, r3
2400d950:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d954:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d958:	78ca      	ldrb	r2, [r1, #3]
2400d95a:	fa52 f283 	uxtab	r2, r2, r3
2400d95e:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d962:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d966:	790a      	ldrb	r2, [r1, #4]
2400d968:	fa52 f283 	uxtab	r2, r2, r3
2400d96c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d970:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d974:	794a      	ldrb	r2, [r1, #5]
2400d976:	fa52 f283 	uxtab	r2, r2, r3
2400d97a:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d97e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d982:	798a      	ldrb	r2, [r1, #6]
2400d984:	fa52 f283 	uxtab	r2, r2, r3
2400d988:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d98c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d990:	79ca      	ldrb	r2, [r1, #7]
2400d992:	fa52 f283 	uxtab	r2, r2, r3
2400d996:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d99a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d99e:	7a0a      	ldrb	r2, [r1, #8]
2400d9a0:	fa52 f283 	uxtab	r2, r2, r3
2400d9a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d9a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d9ac:	7a4a      	ldrb	r2, [r1, #9]
2400d9ae:	7a89      	ldrb	r1, [r1, #10]
2400d9b0:	fa52 f283 	uxtab	r2, r2, r3
2400d9b4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d9b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d9bc:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d9c0:	b2db      	uxtb	r3, r3
2400d9c2:	459a      	cmp	sl, r3
2400d9c4:	f47f af21 	bne.w	2400d80a <dir_read.constprop.0+0x23e>
2400d9c8:	e64f      	b.n	2400d66a <dir_read.constprop.0+0x9e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d9ca:	4690      	mov	r8, r2
2400d9cc:	e635      	b.n	2400d63a <dir_read.constprop.0+0x6e>
2400d9ce:	bf00      	nop

2400d9d0 <sync_fs>:
{
2400d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d9d2:	78c3      	ldrb	r3, [r0, #3]
{
2400d9d4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d9d6:	b95b      	cbnz	r3, 2400d9f0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400d9d8:	7823      	ldrb	r3, [r4, #0]
2400d9da:	2b03      	cmp	r3, #3
2400d9dc:	d029      	beq.n	2400da32 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400d9de:	2200      	movs	r2, #0
2400d9e0:	7860      	ldrb	r0, [r4, #1]
2400d9e2:	4611      	mov	r1, r2
2400d9e4:	f7ff f96e 	bl	2400ccc4 <disk_ioctl>
			res = FR_DISK_ERR;
2400d9e8:	3800      	subs	r0, #0
2400d9ea:	bf18      	it	ne
2400d9ec:	2001      	movne	r0, #1
}
2400d9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400d9f0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d9f2:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400d9f6:	2301      	movs	r3, #1
2400d9f8:	7840      	ldrb	r0, [r0, #1]
2400d9fa:	462a      	mov	r2, r5
2400d9fc:	4639      	mov	r1, r7
2400d9fe:	f7ff f953 	bl	2400cca8 <disk_write>
2400da02:	2800      	cmp	r0, #0
2400da04:	d150      	bne.n	2400daa8 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400da06:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400da08:	69e3      	ldr	r3, [r4, #28]
2400da0a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400da0c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400da0e:	429a      	cmp	r2, r3
2400da10:	d2e2      	bcs.n	2400d9d8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400da12:	78a6      	ldrb	r6, [r4, #2]
2400da14:	2e01      	cmp	r6, #1
2400da16:	d801      	bhi.n	2400da1c <sync_fs+0x4c>
2400da18:	e7de      	b.n	2400d9d8 <sync_fs+0x8>
					wsect += fs->fsize;
2400da1a:	69e3      	ldr	r3, [r4, #28]
2400da1c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400da1e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400da20:	2301      	movs	r3, #1
2400da22:	4639      	mov	r1, r7
2400da24:	462a      	mov	r2, r5
2400da26:	7860      	ldrb	r0, [r4, #1]
2400da28:	f7ff f93e 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400da2c:	2e01      	cmp	r6, #1
2400da2e:	d1f4      	bne.n	2400da1a <sync_fs+0x4a>
2400da30:	e7d2      	b.n	2400d9d8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400da32:	7925      	ldrb	r5, [r4, #4]
2400da34:	2d01      	cmp	r5, #1
2400da36:	d1d2      	bne.n	2400d9de <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400da38:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400da3c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400da40:	2100      	movs	r1, #0
2400da42:	4630      	mov	r0, r6
2400da44:	f007 fd4c 	bl	240154e0 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400da48:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400da4c:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400da4e:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400da50:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400da54:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400da56:	4815      	ldr	r0, [pc, #84]	; (2400daac <sync_fs+0xdc>)
2400da58:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
2400da5c:	6360      	str	r0, [r4, #52]	; 0x34
2400da5e:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2400da62:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400da66:	3020      	adds	r0, #32
2400da68:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400da6c:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400da6e:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2400da72:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400da74:	0e12      	lsrs	r2, r2, #24
2400da76:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400da7a:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
2400da7c:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
2400da80:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
2400da82:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400da84:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400da88:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400da8a:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
2400da8e:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400da90:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
2400da92:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400da94:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
2400da98:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400da9c:	7860      	ldrb	r0, [r4, #1]
2400da9e:	f7ff f903 	bl	2400cca8 <disk_write>
			fs->fsi_flag = 0;
2400daa2:	2300      	movs	r3, #0
2400daa4:	7123      	strb	r3, [r4, #4]
2400daa6:	e79a      	b.n	2400d9de <sync_fs+0xe>
			res = FR_DISK_ERR;
2400daa8:	2001      	movs	r0, #1
}
2400daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400daac:	41615252 	.word	0x41615252

2400dab0 <create_chain>:
{
2400dab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400dab4:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
2400dab6:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
2400dab8:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
2400dabc:	2900      	cmp	r1, #0
2400dabe:	f040 80b4 	bne.w	2400dc2a <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400dac2:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400dac6:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400daca:	b9ce      	cbnz	r6, 2400db00 <create_chain+0x50>
2400dacc:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
2400dace:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400dad0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400dad2:	429c      	cmp	r4, r3
2400dad4:	d318      	bcc.n	2400db08 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
2400dad6:	2e01      	cmp	r6, #1
2400dad8:	f000 80a3 	beq.w	2400dc22 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400dadc:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
2400dae0:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dae2:	69ab      	ldr	r3, [r5, #24]
2400dae4:	42a3      	cmp	r3, r4
2400dae6:	d907      	bls.n	2400daf8 <create_chain+0x48>
		switch (fs->fs_type) {
2400dae8:	782b      	ldrb	r3, [r5, #0]
2400daea:	2b02      	cmp	r3, #2
2400daec:	f000 8088 	beq.w	2400dc00 <create_chain+0x150>
2400daf0:	2b03      	cmp	r3, #3
2400daf2:	d044      	beq.n	2400db7e <create_chain+0xce>
2400daf4:	2b01      	cmp	r3, #1
2400daf6:	d00c      	beq.n	2400db12 <create_chain+0x62>
2400daf8:	2401      	movs	r4, #1
}
2400dafa:	4620      	mov	r0, r4
2400dafc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400db00:	42b3      	cmp	r3, r6
2400db02:	bf98      	it	ls
2400db04:	2601      	movls	r6, #1
2400db06:	e7e2      	b.n	2400dace <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400db08:	2c01      	cmp	r4, #1
2400db0a:	f8da 5000 	ldr.w	r5, [sl]
2400db0e:	d9f3      	bls.n	2400daf8 <create_chain+0x48>
2400db10:	e7e7      	b.n	2400dae2 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2400db12:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db18:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db1a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db1e:	4291      	cmp	r1, r2
2400db20:	d005      	beq.n	2400db2e <create_chain+0x7e>
2400db22:	4628      	mov	r0, r5
2400db24:	f7ff fa60 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db28:	bb20      	cbnz	r0, 2400db74 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db2c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400db2e:	f107 0b01 	add.w	fp, r7, #1
2400db32:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db36:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400db3a:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db3c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400db3e:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db42:	d003      	beq.n	2400db4c <create_chain+0x9c>
2400db44:	4628      	mov	r0, r5
2400db46:	f7ff fa4f 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400db4a:	b998      	cbnz	r0, 2400db74 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400db4c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400db50:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400db52:	445d      	add	r5, fp
2400db54:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
2400db58:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400db5c:	d575      	bpl.n	2400dc4a <create_chain+0x19a>
2400db5e:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
2400db60:	b30b      	cbz	r3, 2400dba6 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400db62:	2b01      	cmp	r3, #1
2400db64:	d0c8      	beq.n	2400daf8 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2400db66:	42a6      	cmp	r6, r4
2400db68:	d05b      	beq.n	2400dc22 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400db6a:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400db6e:	e7af      	b.n	2400dad0 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400db70:	2801      	cmp	r0, #1
2400db72:	d1c1      	bne.n	2400daf8 <create_chain+0x48>
2400db74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400db78:	4620      	mov	r0, r4
2400db7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db7e:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db82:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db86:	4299      	cmp	r1, r3
2400db88:	d004      	beq.n	2400db94 <create_chain+0xe4>
2400db8a:	4628      	mov	r0, r5
2400db8c:	f7ff fa2c 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400db90:	2800      	cmp	r0, #0
2400db92:	d1ef      	bne.n	2400db74 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400db94:	00a3      	lsls	r3, r4, #2
2400db96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400db9a:	441d      	add	r5, r3
2400db9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400db9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400dba2:	2b00      	cmp	r3, #0
2400dba4:	d1dd      	bne.n	2400db62 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400dba6:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400dbaa:	42a3      	cmp	r3, r4
2400dbac:	d9a4      	bls.n	2400daf8 <create_chain+0x48>
2400dbae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400dbb2:	4621      	mov	r1, r4
2400dbb4:	4648      	mov	r0, r9
2400dbb6:	f7ff fbc9 	bl	2400d34c <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400dbba:	b970      	cbnz	r0, 2400dbda <create_chain+0x12a>
2400dbbc:	f1b8 0f00 	cmp.w	r8, #0
2400dbc0:	d00b      	beq.n	2400dbda <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400dbc2:	f1b8 0f01 	cmp.w	r8, #1
2400dbc6:	d097      	beq.n	2400daf8 <create_chain+0x48>
2400dbc8:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400dbcc:	4598      	cmp	r8, r3
2400dbce:	d293      	bcs.n	2400daf8 <create_chain+0x48>
2400dbd0:	4622      	mov	r2, r4
2400dbd2:	4641      	mov	r1, r8
2400dbd4:	4648      	mov	r0, r9
2400dbd6:	f7ff fbb9 	bl	2400d34c <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400dbda:	2800      	cmp	r0, #0
2400dbdc:	d1c8      	bne.n	2400db70 <create_chain+0xc0>
		fs->last_clst = ncl;
2400dbde:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400dbe2:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
2400dbe6:	3b02      	subs	r3, #2
2400dbe8:	429a      	cmp	r2, r3
2400dbea:	d802      	bhi.n	2400dbf2 <create_chain+0x142>
2400dbec:	3a01      	subs	r2, #1
2400dbee:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
2400dbf2:	f899 3004 	ldrb.w	r3, [r9, #4]
2400dbf6:	f043 0301 	orr.w	r3, r3, #1
2400dbfa:	f889 3004 	strb.w	r3, [r9, #4]
2400dbfe:	e77c      	b.n	2400dafa <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dc00:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dc04:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc08:	4299      	cmp	r1, r3
2400dc0a:	d004      	beq.n	2400dc16 <create_chain+0x166>
2400dc0c:	4628      	mov	r0, r5
2400dc0e:	f7ff f9eb 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dc12:	2800      	cmp	r0, #0
2400dc14:	d1ae      	bne.n	2400db74 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400dc16:	0063      	lsls	r3, r4, #1
2400dc18:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400dc1c:	441d      	add	r5, r3
2400dc1e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
2400dc20:	e79e      	b.n	2400db60 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
2400dc22:	2400      	movs	r4, #0
}
2400dc24:	4620      	mov	r0, r4
2400dc26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400dc2a:	4648      	mov	r0, r9
2400dc2c:	f7ff fc28 	bl	2400d480 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400dc30:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400dc32:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400dc34:	f67f af60 	bls.w	2400daf8 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400dc38:	1c41      	adds	r1, r0, #1
2400dc3a:	d09b      	beq.n	2400db74 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400dc3c:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400dc40:	4283      	cmp	r3, r0
2400dc42:	f63f af5a 	bhi.w	2400dafa <create_chain+0x4a>
2400dc46:	4646      	mov	r6, r8
2400dc48:	e741      	b.n	2400dace <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dc4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400dc4e:	e787      	b.n	2400db60 <create_chain+0xb0>

2400dc50 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400dc50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400dc54:	d274      	bcs.n	2400dd40 <dir_sdi+0xf0>
2400dc56:	06ca      	lsls	r2, r1, #27
{
2400dc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400dc5c:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400dc5e:	d151      	bne.n	2400dd04 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400dc60:	6885      	ldr	r5, [r0, #8]
2400dc62:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
2400dc64:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
2400dc68:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400dc6a:	2d00      	cmp	r5, #0
2400dc6c:	d04d      	beq.n	2400dd0a <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400dc6e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400dc72:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400dc76:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400dc7a:	f0c0 808e 	bcc.w	2400dd9a <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dc7e:	2d01      	cmp	r5, #1
2400dc80:	d040      	beq.n	2400dd04 <dir_sdi+0xb4>
2400dc82:	4647      	mov	r7, r8
2400dc84:	e03b      	b.n	2400dcfe <dir_sdi+0xae>
		switch (fs->fs_type) {
2400dc86:	783b      	ldrb	r3, [r7, #0]
2400dc88:	2b02      	cmp	r3, #2
2400dc8a:	d073      	beq.n	2400dd74 <dir_sdi+0x124>
2400dc8c:	2b03      	cmp	r3, #3
2400dc8e:	d05f      	beq.n	2400dd50 <dir_sdi+0x100>
2400dc90:	2b01      	cmp	r3, #1
2400dc92:	d137      	bne.n	2400dd04 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
2400dc94:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dc9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dc9c:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dca0:	4291      	cmp	r1, r2
2400dca2:	d006      	beq.n	2400dcb2 <dir_sdi+0x62>
2400dca4:	4638      	mov	r0, r7
2400dca6:	f7ff f99f 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dcaa:	2800      	cmp	r0, #0
2400dcac:	d172      	bne.n	2400dd94 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dcb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400dcb2:	f10a 0b01 	add.w	fp, sl, #1
2400dcb6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dcba:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400dcbe:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dcc0:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400dcc2:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dcc6:	d004      	beq.n	2400dcd2 <dir_sdi+0x82>
2400dcc8:	4638      	mov	r0, r7
2400dcca:	f7ff f98d 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400dcce:	2800      	cmp	r0, #0
2400dcd0:	d160      	bne.n	2400dd94 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
2400dcd2:	f3cb 0b08 	ubfx	fp, fp, #0, #9
2400dcd6:	445f      	add	r7, fp
2400dcd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400dcdc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400dce0:	07eb      	lsls	r3, r5, #31
2400dce2:	d568      	bpl.n	2400ddb6 <dir_sdi+0x166>
2400dce4:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400dce8:	2d01      	cmp	r5, #1
2400dcea:	d90b      	bls.n	2400dd04 <dir_sdi+0xb4>
2400dcec:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400dcf0:	42ab      	cmp	r3, r5
2400dcf2:	d907      	bls.n	2400dd04 <dir_sdi+0xb4>
			ofs -= csz;
2400dcf4:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400dcf8:	45a1      	cmp	r9, r4
2400dcfa:	d850      	bhi.n	2400dd9e <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400dcfc:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400dcfe:	69bb      	ldr	r3, [r7, #24]
2400dd00:	42ab      	cmp	r3, r5
2400dd02:	d8c0      	bhi.n	2400dc86 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400dd04:	2002      	movs	r0, #2
}
2400dd06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400dd0a:	f898 3000 	ldrb.w	r3, [r8]
2400dd0e:	2b02      	cmp	r3, #2
2400dd10:	d818      	bhi.n	2400dd44 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400dd12:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400dd16:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400dd1a:	d9f3      	bls.n	2400dd04 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
2400dd1c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
2400dd20:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400dd22:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400dd24:	2a00      	cmp	r2, #0
2400dd26:	d0ed      	beq.n	2400dd04 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400dd28:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400dd2c:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400dd30:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
2400dd34:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400dd36:	4443      	add	r3, r8
2400dd38:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
2400dd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
2400dd40:	2002      	movs	r0, #2
}
2400dd42:	4770      	bx	lr
		clst = fs->dirbase;
2400dd44:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400dd48:	2b00      	cmp	r3, #0
2400dd4a:	d0e2      	beq.n	2400dd12 <dir_sdi+0xc2>
2400dd4c:	461d      	mov	r5, r3
2400dd4e:	e78e      	b.n	2400dc6e <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dd50:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dd54:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd58:	4299      	cmp	r1, r3
2400dd5a:	d003      	beq.n	2400dd64 <dir_sdi+0x114>
2400dd5c:	4638      	mov	r0, r7
2400dd5e:	f7ff f943 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dd62:	b9b8      	cbnz	r0, 2400dd94 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400dd64:	00ad      	lsls	r5, r5, #2
2400dd66:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400dd6a:	442f      	add	r7, r5
2400dd6c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400dd6e:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400dd72:	e7b9      	b.n	2400dce8 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd74:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd78:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dd7c:	4299      	cmp	r1, r3
2400dd7e:	d003      	beq.n	2400dd88 <dir_sdi+0x138>
2400dd80:	4638      	mov	r0, r7
2400dd82:	f7ff f931 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400dd86:	b928      	cbnz	r0, 2400dd94 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400dd88:	006d      	lsls	r5, r5, #1
2400dd8a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
2400dd8e:	442f      	add	r7, r5
2400dd90:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
2400dd92:	e7a9      	b.n	2400dce8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400dd94:	2001      	movs	r0, #1
}
2400dd96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dd9a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400dd9e:	3b02      	subs	r3, #2
	clst -= 2;
2400dda0:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dda2:	4299      	cmp	r1, r3
2400dda4:	d20a      	bcs.n	2400ddbc <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
2400dda6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
2400ddaa:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
2400ddae:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
2400ddb2:	61f2      	str	r2, [r6, #28]
2400ddb4:	e7b5      	b.n	2400dd22 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400ddb6:	f3ca 050b 	ubfx	r5, sl, #0, #12
2400ddba:	e795      	b.n	2400dce8 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
2400ddbc:	2300      	movs	r3, #0
2400ddbe:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400ddc2:	e79f      	b.n	2400dd04 <dir_sdi+0xb4>

2400ddc4 <dir_find>:
{
2400ddc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ddc8:	2100      	movs	r1, #0
{
2400ddca:	b085      	sub	sp, #20
2400ddcc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400ddce:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400ddd2:	f7ff ff3d 	bl	2400dc50 <dir_sdi>
	if (res != FR_OK) return res;
2400ddd6:	4607      	mov	r7, r0
2400ddd8:	b9e8      	cbnz	r0, 2400de16 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400ddda:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400ddde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400dde2:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dde4:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400dde6:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400dde8:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400ddec:	42b5      	cmp	r5, r6
2400ddee:	d018      	beq.n	2400de22 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ddf0:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ddf4:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ddf8:	2b00      	cmp	r3, #0
2400ddfa:	f040 8088 	bne.w	2400df0e <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ddfe:	2301      	movs	r3, #1
2400de00:	4632      	mov	r2, r6
2400de02:	f898 0001 	ldrb.w	r0, [r8, #1]
2400de06:	f7fe ff41 	bl	2400cc8c <disk_read>
2400de0a:	b140      	cbz	r0, 2400de1e <dir_find+0x5a>
			fs->winsect = sector;
2400de0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400de10:	2701      	movs	r7, #1
			fs->winsect = sector;
2400de12:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400de16:	4638      	mov	r0, r7
2400de18:	b005      	add	sp, #20
2400de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400de1e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400de22:	6a26      	ldr	r6, [r4, #32]
2400de24:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400de26:	b34d      	cbz	r5, 2400de7c <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400de28:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400de2a:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400de2c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
2400de30:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400de32:	d004      	beq.n	2400de3e <dir_find+0x7a>
2400de34:	0717      	lsls	r7, r2, #28
2400de36:	d526      	bpl.n	2400de86 <dir_find+0xc2>
2400de38:	2b0f      	cmp	r3, #15
2400de3a:	f000 8094 	beq.w	2400df66 <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400de3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400de42:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400de46:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400de48:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400de4a:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400de4c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400de4e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400de52:	d213      	bcs.n	2400de7c <dir_find+0xb8>
2400de54:	b196      	cbz	r6, 2400de7c <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400de56:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400de5a:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400de5c:	b94b      	cbnz	r3, 2400de72 <dir_find+0xae>
		dp->sect++;				/* Next sector */
2400de5e:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400de60:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400de62:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400de64:	2900      	cmp	r1, #0
2400de66:	d15e      	bne.n	2400df26 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400de68:	893a      	ldrh	r2, [r7, #8]
2400de6a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400de6e:	f240 8134 	bls.w	2400e0da <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400de72:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400de74:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400de76:	443b      	add	r3, r7
2400de78:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400de7a:	e7b5      	b.n	2400dde8 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400de7c:	2704      	movs	r7, #4
}
2400de7e:	4638      	mov	r0, r7
2400de80:	b005      	add	sp, #20
2400de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400de86:	2b0f      	cmp	r3, #15
2400de88:	d06d      	beq.n	2400df66 <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400de8a:	f1ba 0f00 	cmp.w	sl, #0
2400de8e:	f000 80d6 	beq.w	2400e03e <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400de92:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
2400de96:	f01a 0a01 	ands.w	sl, sl, #1
2400de9a:	d1d0      	bne.n	2400de3e <dir_find+0x7a>
	} while (--cnt && r == 0);
2400de9c:	7832      	ldrb	r2, [r6, #0]
2400de9e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400dea2:	429a      	cmp	r2, r3
2400dea4:	d1cb      	bne.n	2400de3e <dir_find+0x7a>
2400dea6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400deaa:	7873      	ldrb	r3, [r6, #1]
2400deac:	429a      	cmp	r2, r3
2400deae:	d1c6      	bne.n	2400de3e <dir_find+0x7a>
2400deb0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400deb4:	78b3      	ldrb	r3, [r6, #2]
2400deb6:	429a      	cmp	r2, r3
2400deb8:	d1c1      	bne.n	2400de3e <dir_find+0x7a>
2400deba:	78f2      	ldrb	r2, [r6, #3]
2400debc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400dec0:	429a      	cmp	r2, r3
2400dec2:	d1bc      	bne.n	2400de3e <dir_find+0x7a>
2400dec4:	7932      	ldrb	r2, [r6, #4]
2400dec6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400deca:	429a      	cmp	r2, r3
2400decc:	d1b7      	bne.n	2400de3e <dir_find+0x7a>
2400dece:	7972      	ldrb	r2, [r6, #5]
2400ded0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400ded4:	429a      	cmp	r2, r3
2400ded6:	d1b2      	bne.n	2400de3e <dir_find+0x7a>
2400ded8:	79b2      	ldrb	r2, [r6, #6]
2400deda:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400dede:	429a      	cmp	r2, r3
2400dee0:	d1ad      	bne.n	2400de3e <dir_find+0x7a>
2400dee2:	79f2      	ldrb	r2, [r6, #7]
2400dee4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400dee8:	429a      	cmp	r2, r3
2400deea:	d1a8      	bne.n	2400de3e <dir_find+0x7a>
2400deec:	7a32      	ldrb	r2, [r6, #8]
2400deee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400def2:	429a      	cmp	r2, r3
2400def4:	d1a3      	bne.n	2400de3e <dir_find+0x7a>
2400def6:	7a72      	ldrb	r2, [r6, #9]
2400def8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400defc:	429a      	cmp	r2, r3
2400defe:	d19e      	bne.n	2400de3e <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400df00:	7ab2      	ldrb	r2, [r6, #10]
2400df02:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400df06:	429a      	cmp	r2, r3
2400df08:	d199      	bne.n	2400de3e <dir_find+0x7a>
2400df0a:	4657      	mov	r7, sl
2400df0c:	e783      	b.n	2400de16 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400df0e:	2301      	movs	r3, #1
2400df10:	462a      	mov	r2, r5
2400df12:	f898 0001 	ldrb.w	r0, [r8, #1]
2400df16:	9100      	str	r1, [sp, #0]
2400df18:	f7fe fec6 	bl	2400cca8 <disk_write>
2400df1c:	9900      	ldr	r1, [sp, #0]
2400df1e:	2800      	cmp	r0, #0
2400df20:	d06d      	beq.n	2400dffe <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400df22:	2701      	movs	r7, #1
2400df24:	e777      	b.n	2400de16 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400df26:	897a      	ldrh	r2, [r7, #10]
2400df28:	3a01      	subs	r2, #1
2400df2a:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400df2e:	d1a0      	bne.n	2400de72 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400df30:	4638      	mov	r0, r7
2400df32:	9300      	str	r3, [sp, #0]
2400df34:	f7ff faa4 	bl	2400d480 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400df38:	2801      	cmp	r0, #1
2400df3a:	f240 80d2 	bls.w	2400e0e2 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400df3e:	1c43      	adds	r3, r0, #1
2400df40:	d0ef      	beq.n	2400df22 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400df42:	69ba      	ldr	r2, [r7, #24]
2400df44:	4290      	cmp	r0, r2
2400df46:	f080 80c8 	bcs.w	2400e0da <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
2400df4a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400df4c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400df4e:	69ba      	ldr	r2, [r7, #24]
2400df50:	9b00      	ldr	r3, [sp, #0]
2400df52:	3a02      	subs	r2, #2
2400df54:	4290      	cmp	r0, r2
2400df56:	f080 80c6 	bcs.w	2400e0e6 <dir_find+0x322>
	return clst * fs->csize + fs->database;
2400df5a:	897a      	ldrh	r2, [r7, #10]
2400df5c:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400df5e:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400df62:	61e6      	str	r6, [r4, #28]
2400df64:	e785      	b.n	2400de72 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400df66:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400df6a:	0658      	lsls	r0, r3, #25
2400df6c:	f53f af6c 	bmi.w	2400de48 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400df70:	0669      	lsls	r1, r5, #25
2400df72:	d53f      	bpl.n	2400dff4 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400df74:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400df76:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400df7a:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400df7e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df80:	7b73      	ldrb	r3, [r6, #13]
2400df82:	454b      	cmp	r3, r9
2400df84:	d138      	bne.n	2400dff8 <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400df86:	8b73      	ldrh	r3, [r6, #26]
2400df88:	bbb3      	cbnz	r3, 2400dff8 <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400df8a:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400df8c:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400df8e:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400df92:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400df96:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400e110 <dir_find+0x34c>
2400df9a:	9502      	str	r5, [sp, #8]
2400df9c:	4615      	mov	r5, r2
2400df9e:	3f01      	subs	r7, #1
2400dfa0:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dfa4:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400dfa6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400dfaa:	f8cd 8000 	str.w	r8, [sp]
2400dfae:	9401      	str	r4, [sp, #4]
2400dfb0:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400dfb4:	e010      	b.n	2400dfd8 <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400dfb6:	2ffe      	cmp	r7, #254	; 0xfe
2400dfb8:	4620      	mov	r0, r4
2400dfba:	d816      	bhi.n	2400dfea <dir_find+0x226>
2400dfbc:	f001 fe1e 	bl	2400fbfc <ff_wtoupper>
2400dfc0:	4680      	mov	r8, r0
2400dfc2:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400dfc6:	3701      	adds	r7, #1
2400dfc8:	f001 fe18 	bl	2400fbfc <ff_wtoupper>
2400dfcc:	4580      	cmp	r8, r0
2400dfce:	4621      	mov	r1, r4
2400dfd0:	d10b      	bne.n	2400dfea <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400dfd2:	45d3      	cmp	fp, sl
2400dfd4:	f000 8089 	beq.w	2400e0ea <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400dfd8:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
2400dfdc:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400dfde:	2900      	cmp	r1, #0
2400dfe0:	d1e9      	bne.n	2400dfb6 <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dfe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dfe6:	429c      	cmp	r4, r3
2400dfe8:	d0f3      	beq.n	2400dfd2 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dfea:	e9dd 8400 	ldrd	r8, r4, [sp]
2400dfee:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400dff2:	e729      	b.n	2400de48 <dir_find+0x84>
2400dff4:	45aa      	cmp	sl, r5
2400dff6:	d0c3      	beq.n	2400df80 <dir_find+0x1bc>
2400dff8:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400dffc:	e724      	b.n	2400de48 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dffe:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e002:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e006:	1aea      	subs	r2, r5, r3
2400e008:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e00c:	429a      	cmp	r2, r3
2400e00e:	f4bf aef6 	bcs.w	2400ddfe <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e012:	f898 7002 	ldrb.w	r7, [r8, #2]
2400e016:	2f01      	cmp	r7, #1
2400e018:	f67f aef1 	bls.w	2400ddfe <dir_find+0x3a>
2400e01c:	468b      	mov	fp, r1
2400e01e:	e001      	b.n	2400e024 <dir_find+0x260>
					wsect += fs->fsize;
2400e020:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e024:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e026:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e028:	2301      	movs	r3, #1
2400e02a:	4659      	mov	r1, fp
2400e02c:	462a      	mov	r2, r5
2400e02e:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e032:	f7fe fe39 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e036:	2f01      	cmp	r7, #1
2400e038:	d1f2      	bne.n	2400e020 <dir_find+0x25c>
2400e03a:	4659      	mov	r1, fp
2400e03c:	e6df      	b.n	2400ddfe <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e03e:	7830      	ldrb	r0, [r6, #0]
2400e040:	7872      	ldrb	r2, [r6, #1]
2400e042:	01c1      	lsls	r1, r0, #7
2400e044:	78b3      	ldrb	r3, [r6, #2]
2400e046:	f896 b003 	ldrb.w	fp, [r6, #3]
2400e04a:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
2400e04e:	7937      	ldrb	r7, [r6, #4]
2400e050:	f896 e005 	ldrb.w	lr, [r6, #5]
2400e054:	4411      	add	r1, r2
2400e056:	f896 c006 	ldrb.w	ip, [r6, #6]
2400e05a:	7a32      	ldrb	r2, [r6, #8]
2400e05c:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e060:	7a75      	ldrb	r5, [r6, #9]
2400e062:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e066:	fa53 f180 	uxtab	r1, r3, r0
2400e06a:	79f3      	ldrb	r3, [r6, #7]
2400e06c:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400e070:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400e074:	7ab1      	ldrb	r1, [r6, #10]
2400e076:	fa5b fb80 	uxtab	fp, fp, r0
2400e07a:	f3cb 0046 	ubfx	r0, fp, #1, #7
2400e07e:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
2400e082:	fa57 f780 	uxtab	r7, r7, r0
2400e086:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e08a:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e08e:	fa5e f080 	uxtab	r0, lr, r0
2400e092:	f3c0 0746 	ubfx	r7, r0, #1, #7
2400e096:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
2400e09a:	fa5c f780 	uxtab	r7, ip, r0
2400e09e:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400e0a2:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400e0a6:	fa53 f080 	uxtab	r0, r3, r0
2400e0aa:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400e0ae:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
2400e0b2:	fa52 f383 	uxtab	r3, r2, r3
2400e0b6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e0ba:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
2400e0be:	fa55 f283 	uxtab	r2, r5, r3
2400e0c2:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e0c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e0ca:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e0ce:	b2db      	uxtb	r3, r3
2400e0d0:	4599      	cmp	r9, r3
2400e0d2:	f47f aede 	bne.w	2400de92 <dir_find+0xce>
2400e0d6:	4657      	mov	r7, sl
2400e0d8:	e69d      	b.n	2400de16 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
2400e0da:	2300      	movs	r3, #0
2400e0dc:	2704      	movs	r7, #4
2400e0de:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400e0e0:	e699      	b.n	2400de16 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e0e2:	2702      	movs	r7, #2
2400e0e4:	e697      	b.n	2400de16 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e0e6:	461e      	mov	r6, r3
2400e0e8:	e73b      	b.n	2400df62 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e0ea:	7833      	ldrb	r3, [r6, #0]
2400e0ec:	f8dd 8000 	ldr.w	r8, [sp]
2400e0f0:	065a      	lsls	r2, r3, #25
2400e0f2:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
2400e0f6:	d500      	bpl.n	2400e0fa <dir_find+0x336>
2400e0f8:	b919      	cbnz	r1, 2400e102 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e0fa:	3d01      	subs	r5, #1
2400e0fc:	fa5f fa85 	uxtb.w	sl, r5
2400e100:	e6a2      	b.n	2400de48 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e102:	9b03      	ldr	r3, [sp, #12]
2400e104:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400e108:	2b00      	cmp	r3, #0
2400e10a:	d0f6      	beq.n	2400e0fa <dir_find+0x336>
2400e10c:	e774      	b.n	2400dff8 <dir_find+0x234>
2400e10e:	bf00      	nop
2400e110:	24018068 	.word	0x24018068

2400e114 <follow_path>:
{
2400e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e118:	780b      	ldrb	r3, [r1, #0]
{
2400e11a:	b083      	sub	sp, #12
2400e11c:	4688      	mov	r8, r1
2400e11e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e120:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400e122:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e126:	d103      	bne.n	2400e130 <follow_path+0x1c>
2400e128:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400e12c:	2b2f      	cmp	r3, #47	; 0x2f
2400e12e:	d0fb      	beq.n	2400e128 <follow_path+0x14>
2400e130:	2b5c      	cmp	r3, #92	; 0x5c
2400e132:	d0f9      	beq.n	2400e128 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400e134:	2100      	movs	r1, #0
2400e136:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400e138:	f898 3000 	ldrb.w	r3, [r8]
2400e13c:	2b1f      	cmp	r3, #31
2400e13e:	f240 8148 	bls.w	2400e3d2 <follow_path+0x2be>
2400e142:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400e144:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e146:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400e148:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400e14a:	d929      	bls.n	2400e1a0 <follow_path+0x8c>
2400e14c:	f1a5 0902 	sub.w	r9, r5, #2
2400e150:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400e152:	2401      	movs	r4, #1
2400e154:	e008      	b.n	2400e168 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400e156:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400e15a:	1c63      	adds	r3, r4, #1
2400e15c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400e160:	281f      	cmp	r0, #31
2400e162:	f240 80f7 	bls.w	2400e354 <follow_path+0x240>
		w = p[si++];					/* Get a character */
2400e166:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400e168:	282f      	cmp	r0, #47	; 0x2f
2400e16a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400e16e:	d01d      	beq.n	2400e1ac <follow_path+0x98>
2400e170:	285c      	cmp	r0, #92	; 0x5c
2400e172:	d01b      	beq.n	2400e1ac <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400e174:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400e178:	d00e      	beq.n	2400e198 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400e17a:	2101      	movs	r1, #1
2400e17c:	f001 fd20 	bl	2400fbc0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400e180:	b150      	cbz	r0, 2400e198 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400e182:	287f      	cmp	r0, #127	; 0x7f
2400e184:	d8e7      	bhi.n	2400e156 <follow_path+0x42>
	while (*str && *str != chr) str++;
2400e186:	2322      	movs	r3, #34	; 0x22
2400e188:	4aa5      	ldr	r2, [pc, #660]	; (2400e420 <follow_path+0x30c>)
2400e18a:	e003      	b.n	2400e194 <follow_path+0x80>
2400e18c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400e190:	2b00      	cmp	r3, #0
2400e192:	d0e0      	beq.n	2400e156 <follow_path+0x42>
2400e194:	4298      	cmp	r0, r3
2400e196:	d1f9      	bne.n	2400e18c <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e198:	2006      	movs	r0, #6
}
2400e19a:	b003      	add	sp, #12
2400e19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400e1a0:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e1a2:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400e1a4:	802b      	strh	r3, [r5, #0]
}
2400e1a6:	b003      	add	sp, #12
2400e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e1ac:	f818 3004 	ldrb.w	r3, [r8, r4]
2400e1b0:	eb08 0204 	add.w	r2, r8, r4
2400e1b4:	2b5c      	cmp	r3, #92	; 0x5c
2400e1b6:	d002      	beq.n	2400e1be <follow_path+0xaa>
2400e1b8:	2b2f      	cmp	r3, #47	; 0x2f
2400e1ba:	f040 811f 	bne.w	2400e3fc <follow_path+0x2e8>
2400e1be:	1c63      	adds	r3, r4, #1
2400e1c0:	4443      	add	r3, r8
2400e1c2:	4698      	mov	r8, r3
2400e1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
2400e1c8:	2a2f      	cmp	r2, #47	; 0x2f
2400e1ca:	d0fa      	beq.n	2400e1c2 <follow_path+0xae>
2400e1cc:	2a5c      	cmp	r2, #92	; 0x5c
2400e1ce:	d0f8      	beq.n	2400e1c2 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e1d0:	f1ba 0f00 	cmp.w	sl, #0
2400e1d4:	d0e4      	beq.n	2400e1a0 <follow_path+0x8c>
2400e1d6:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e1d8:	2400      	movs	r4, #0
2400e1da:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400e1de:	e002      	b.n	2400e1e6 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e1e0:	f1ba 0a01 	subs.w	sl, sl, #1
2400e1e4:	d0dc      	beq.n	2400e1a0 <follow_path+0x8c>
		w = lfn[di - 1];
2400e1e6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400e1ea:	2b20      	cmp	r3, #32
2400e1ec:	d0f8      	beq.n	2400e1e0 <follow_path+0xcc>
2400e1ee:	2b2e      	cmp	r3, #46	; 0x2e
2400e1f0:	d0f6      	beq.n	2400e1e0 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400e1f2:	2320      	movs	r3, #32
2400e1f4:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400e1f8:	2100      	movs	r1, #0
2400e1fa:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400e1fe:	627a      	str	r2, [r7, #36]	; 0x24
2400e200:	62ba      	str	r2, [r7, #40]	; 0x28
2400e202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2400e206:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
2400e20a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e20e:	8828      	ldrh	r0, [r5, #0]
2400e210:	282e      	cmp	r0, #46	; 0x2e
2400e212:	d002      	beq.n	2400e21a <follow_path+0x106>
2400e214:	4298      	cmp	r0, r3
2400e216:	f040 80e5 	bne.w	2400e3e4 <follow_path+0x2d0>
2400e21a:	462a      	mov	r2, r5
2400e21c:	2300      	movs	r3, #0
2400e21e:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400e222:	461c      	mov	r4, r3
2400e224:	3301      	adds	r3, #1
2400e226:	2820      	cmp	r0, #32
2400e228:	d0f9      	beq.n	2400e21e <follow_path+0x10a>
2400e22a:	282e      	cmp	r0, #46	; 0x2e
2400e22c:	d0f7      	beq.n	2400e21e <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
2400e22e:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400e230:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400e234:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400e238:	2a2e      	cmp	r2, #46	; 0x2e
2400e23a:	d002      	beq.n	2400e242 <follow_path+0x12e>
2400e23c:	f1ba 0a01 	subs.w	sl, sl, #1
2400e240:	d1f8      	bne.n	2400e234 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2400e242:	b3b0      	cbz	r0, 2400e2b2 <follow_path+0x19e>
2400e244:	2208      	movs	r2, #8
2400e246:	4641      	mov	r1, r8
2400e248:	2300      	movs	r3, #0
2400e24a:	46b8      	mov	r8, r7
2400e24c:	462f      	mov	r7, r5
2400e24e:	4615      	mov	r5, r2
2400e250:	4699      	mov	r9, r3
2400e252:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400e254:	2820      	cmp	r0, #32
2400e256:	d003      	beq.n	2400e260 <follow_path+0x14c>
2400e258:	282e      	cmp	r0, #46	; 0x2e
2400e25a:	d14d      	bne.n	2400e2f8 <follow_path+0x1e4>
2400e25c:	45a2      	cmp	sl, r4
2400e25e:	d04b      	beq.n	2400e2f8 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
2400e260:	f046 0603 	orr.w	r6, r6, #3
2400e264:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400e266:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400e26a:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400e26c:	2800      	cmp	r0, #0
2400e26e:	d1f1      	bne.n	2400e254 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e270:	4647      	mov	r7, r8
2400e272:	4690      	mov	r8, r2
2400e274:	462a      	mov	r2, r5
2400e276:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400e27a:	29e5      	cmp	r1, #229	; 0xe5
2400e27c:	d102      	bne.n	2400e284 <follow_path+0x170>
2400e27e:	2105      	movs	r1, #5
2400e280:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e284:	2a08      	cmp	r2, #8
2400e286:	f000 8093 	beq.w	2400e3b0 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e28a:	f003 020c 	and.w	r2, r3, #12
2400e28e:	2a0c      	cmp	r2, #12
2400e290:	d065      	beq.n	2400e35e <follow_path+0x24a>
2400e292:	f003 0303 	and.w	r3, r3, #3
2400e296:	2b03      	cmp	r3, #3
2400e298:	d061      	beq.n	2400e35e <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e29a:	07b1      	lsls	r1, r6, #30
2400e29c:	d409      	bmi.n	2400e2b2 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400e29e:	2b01      	cmp	r3, #1
2400e2a0:	d102      	bne.n	2400e2a8 <follow_path+0x194>
2400e2a2:	f046 0610 	orr.w	r6, r6, #16
2400e2a6:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400e2a8:	2a04      	cmp	r2, #4
2400e2aa:	d102      	bne.n	2400e2b2 <follow_path+0x19e>
2400e2ac:	f046 0608 	orr.w	r6, r6, #8
2400e2b0:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400e2b2:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e2b4:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e2b8:	f7ff fd84 	bl	2400ddc4 <dir_find>
			ns = dp->fn[NSFLAG];
2400e2bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e2c0:	2800      	cmp	r0, #0
2400e2c2:	d158      	bne.n	2400e376 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400e2c4:	075a      	lsls	r2, r3, #29
2400e2c6:	f53f af68 	bmi.w	2400e19a <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400e2ca:	79bb      	ldrb	r3, [r7, #6]
2400e2cc:	06db      	lsls	r3, r3, #27
2400e2ce:	f140 8097 	bpl.w	2400e400 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e2d2:	697a      	ldr	r2, [r7, #20]
2400e2d4:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400e2d8:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e2dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400e2e0:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e2e2:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400e2e4:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400e2e6:	d102      	bne.n	2400e2ee <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400e2e8:	8a9b      	ldrh	r3, [r3, #20]
2400e2ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e2ee:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e2f0:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400e2f2:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400e2f6:	e725      	b.n	2400e144 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400e2f8:	454d      	cmp	r5, r9
2400e2fa:	d91c      	bls.n	2400e336 <follow_path+0x222>
2400e2fc:	ebaa 0104 	sub.w	r1, sl, r4
2400e300:	fab1 f181 	clz	r1, r1
2400e304:	0949      	lsrs	r1, r1, #5
2400e306:	b9b1      	cbnz	r1, 2400e336 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
2400e308:	287f      	cmp	r0, #127	; 0x7f
2400e30a:	d83c      	bhi.n	2400e386 <follow_path+0x272>
	while (*str && *str != chr) str++;
2400e30c:	212b      	movs	r1, #43	; 0x2b
2400e30e:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400e428 <follow_path+0x314>
2400e312:	e003      	b.n	2400e31c <follow_path+0x208>
2400e314:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400e318:	2900      	cmp	r1, #0
2400e31a:	d052      	beq.n	2400e3c2 <follow_path+0x2ae>
2400e31c:	4281      	cmp	r1, r0
2400e31e:	d1f9      	bne.n	2400e314 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e320:	f046 0603 	orr.w	r6, r6, #3
2400e324:	205f      	movs	r0, #95	; 0x5f
2400e326:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400e328:	eb08 0109 	add.w	r1, r8, r9
2400e32c:	f109 0901 	add.w	r9, r9, #1
2400e330:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400e334:	e797      	b.n	2400e266 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2400e336:	2d0b      	cmp	r5, #11
2400e338:	d064      	beq.n	2400e404 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400e33a:	45a2      	cmp	sl, r4
2400e33c:	d003      	beq.n	2400e346 <follow_path+0x232>
2400e33e:	f046 0603 	orr.w	r6, r6, #3
2400e342:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400e344:	d394      	bcc.n	2400e270 <follow_path+0x15c>
			b <<= 2; continue;
2400e346:	009b      	lsls	r3, r3, #2
2400e348:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400e34a:	250b      	movs	r5, #11
2400e34c:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400e350:	b2db      	uxtb	r3, r3
2400e352:	e788      	b.n	2400e266 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2400e354:	46a2      	mov	sl, r4
2400e356:	4498      	add	r8, r3
2400e358:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e35a:	2404      	movs	r4, #4
2400e35c:	e73d      	b.n	2400e1da <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e35e:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400e362:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e364:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e366:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e36a:	f7ff fd2b 	bl	2400ddc4 <dir_find>
			ns = dp->fn[NSFLAG];
2400e36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e372:	2800      	cmp	r0, #0
2400e374:	d0a6      	beq.n	2400e2c4 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400e376:	2804      	cmp	r0, #4
2400e378:	f47f af0f 	bne.w	2400e19a <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e37c:	f013 0f04 	tst.w	r3, #4
2400e380:	bf08      	it	eq
2400e382:	2005      	moveq	r0, #5
2400e384:	e709      	b.n	2400e19a <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400e386:	e9cd 3200 	strd	r3, r2, [sp]
2400e38a:	f001 fc19 	bl	2400fbc0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e38e:	e9dd 3200 	ldrd	r3, r2, [sp]
2400e392:	b918      	cbnz	r0, 2400e39c <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
2400e394:	f046 0602 	orr.w	r6, r6, #2
2400e398:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e39a:	e7c1      	b.n	2400e320 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e39c:	4921      	ldr	r1, [pc, #132]	; (2400e424 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400e39e:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e3a2:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
2400e3a4:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e3a6:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e3aa:	2800      	cmp	r0, #0
2400e3ac:	d0b8      	beq.n	2400e320 <follow_path+0x20c>
2400e3ae:	e7ad      	b.n	2400e30c <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
2400e3b0:	009b      	lsls	r3, r3, #2
2400e3b2:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e3b6:	2a0c      	cmp	r2, #12
2400e3b8:	d0d1      	beq.n	2400e35e <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e3ba:	07b0      	lsls	r0, r6, #30
2400e3bc:	f57f af74 	bpl.w	2400e2a8 <follow_path+0x194>
2400e3c0:	e777      	b.n	2400e2b2 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
2400e3c2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400e3c6:	2919      	cmp	r1, #25
2400e3c8:	d80f      	bhi.n	2400e3ea <follow_path+0x2d6>
					b |= 2;
2400e3ca:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400e3ce:	b2c0      	uxtb	r0, r0
2400e3d0:	e7aa      	b.n	2400e328 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
2400e3d2:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400e3d4:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400e3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400e3da:	b003      	add	sp, #12
2400e3dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400e3e0:	f7ff bc36 	b.w	2400dc50 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e3e4:	4626      	mov	r6, r4
2400e3e6:	2401      	movs	r4, #1
2400e3e8:	e722      	b.n	2400e230 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
2400e3ea:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400e3ee:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400e3f0:	bf9c      	itt	ls
2400e3f2:	3820      	subls	r0, #32
2400e3f4:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400e3f8:	b2c0      	uxtb	r0, r0
2400e3fa:	e795      	b.n	2400e328 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e3fc:	4690      	mov	r8, r2
2400e3fe:	e6e7      	b.n	2400e1d0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e400:	2005      	movs	r0, #5
2400e402:	e6ca      	b.n	2400e19a <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400e404:	4647      	mov	r7, r8
2400e406:	4690      	mov	r8, r2
2400e408:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e40c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400e410:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e412:	2ae5      	cmp	r2, #229	; 0xe5
2400e414:	f47f af39 	bne.w	2400e28a <follow_path+0x176>
2400e418:	2205      	movs	r2, #5
2400e41a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e41e:	e734      	b.n	2400e28a <follow_path+0x176>
2400e420:	24017fd4 	.word	0x24017fd4
2400e424:	24017fe8 	.word	0x24017fe8
2400e428:	24017fe0 	.word	0x24017fe0

2400e42c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e42c:	2901      	cmp	r1, #1
{
2400e42e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400e432:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400e434:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400e436:	d90f      	bls.n	2400e458 <remove_chain+0x2c>
2400e438:	69ab      	ldr	r3, [r5, #24]
2400e43a:	428b      	cmp	r3, r1
2400e43c:	d90c      	bls.n	2400e458 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400e43e:	4606      	mov	r6, r0
2400e440:	4611      	mov	r1, r2
2400e442:	b962      	cbnz	r2, 2400e45e <remove_chain+0x32>
2400e444:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e446:	429c      	cmp	r4, r3
2400e448:	d206      	bcs.n	2400e458 <remove_chain+0x2c>
		switch (fs->fs_type) {
2400e44a:	783b      	ldrb	r3, [r7, #0]
2400e44c:	2b02      	cmp	r3, #2
2400e44e:	d072      	beq.n	2400e536 <remove_chain+0x10a>
2400e450:	2b03      	cmp	r3, #3
2400e452:	d05d      	beq.n	2400e510 <remove_chain+0xe4>
2400e454:	2b01      	cmp	r3, #1
2400e456:	d010      	beq.n	2400e47a <remove_chain+0x4e>
2400e458:	2002      	movs	r0, #2
}
2400e45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e45e:	4293      	cmp	r3, r2
2400e460:	d9fa      	bls.n	2400e458 <remove_chain+0x2c>
2400e462:	2a01      	cmp	r2, #1
2400e464:	d0f8      	beq.n	2400e458 <remove_chain+0x2c>
2400e466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400e46a:	4628      	mov	r0, r5
2400e46c:	f7fe ff6e 	bl	2400d34c <put_fat.part.0>
		if (res != FR_OK) return res;
2400e470:	2800      	cmp	r0, #0
2400e472:	d1f2      	bne.n	2400e45a <remove_chain+0x2e>
2400e474:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e476:	69bb      	ldr	r3, [r7, #24]
2400e478:	e7e5      	b.n	2400e446 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
2400e47a:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e482:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e486:	4291      	cmp	r1, r2
2400e488:	d006      	beq.n	2400e498 <remove_chain+0x6c>
2400e48a:	4638      	mov	r0, r7
2400e48c:	f7fe fdac 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e490:	2800      	cmp	r0, #0
2400e492:	d161      	bne.n	2400e558 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400e498:	f108 0901 	add.w	r9, r8, #1
2400e49c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e4a0:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e4a4:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4a6:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400e4a8:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e4ac:	d004      	beq.n	2400e4b8 <remove_chain+0x8c>
2400e4ae:	4638      	mov	r0, r7
2400e4b0:	f7fe fd9a 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e4b4:	2800      	cmp	r0, #0
2400e4b6:	d14f      	bne.n	2400e558 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e4b8:	f3c9 0908 	ubfx	r9, r9, #0, #9
2400e4bc:	444f      	add	r7, r9
2400e4be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400e4c2:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e4c6:	07e3      	lsls	r3, r4, #31
2400e4c8:	d548      	bpl.n	2400e55c <remove_chain+0x130>
2400e4ca:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
2400e4ce:	f1b8 0f00 	cmp.w	r8, #0
2400e4d2:	d046      	beq.n	2400e562 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400e4d4:	f1b8 0f01 	cmp.w	r8, #1
2400e4d8:	d0be      	beq.n	2400e458 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e4da:	69ab      	ldr	r3, [r5, #24]
2400e4dc:	42a3      	cmp	r3, r4
2400e4de:	d9bb      	bls.n	2400e458 <remove_chain+0x2c>
2400e4e0:	2200      	movs	r2, #0
2400e4e2:	4621      	mov	r1, r4
2400e4e4:	4628      	mov	r0, r5
2400e4e6:	f7fe ff31 	bl	2400d34c <put_fat.part.0>
			if (res != FR_OK) return res;
2400e4ea:	2800      	cmp	r0, #0
2400e4ec:	d1b5      	bne.n	2400e45a <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400e4ee:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400e4f2:	1e91      	subs	r1, r2, #2
2400e4f4:	428b      	cmp	r3, r1
2400e4f6:	d205      	bcs.n	2400e504 <remove_chain+0xd8>
			fs->free_clst++;
2400e4f8:	3301      	adds	r3, #1
2400e4fa:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400e4fc:	792b      	ldrb	r3, [r5, #4]
2400e4fe:	f043 0301 	orr.w	r3, r3, #1
2400e502:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400e504:	4542      	cmp	r2, r8
2400e506:	d92c      	bls.n	2400e562 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e508:	6837      	ldr	r7, [r6, #0]
2400e50a:	4644      	mov	r4, r8
2400e50c:	69bb      	ldr	r3, [r7, #24]
2400e50e:	e79a      	b.n	2400e446 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e510:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e514:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e518:	4299      	cmp	r1, r3
2400e51a:	d003      	beq.n	2400e524 <remove_chain+0xf8>
2400e51c:	4638      	mov	r0, r7
2400e51e:	f7fe fd63 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e522:	b9c8      	cbnz	r0, 2400e558 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e524:	00a3      	lsls	r3, r4, #2
2400e526:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e52a:	441f      	add	r7, r3
2400e52c:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e530:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2400e534:	e7cb      	b.n	2400e4ce <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e536:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e53a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e53e:	4299      	cmp	r1, r3
2400e540:	d003      	beq.n	2400e54a <remove_chain+0x11e>
2400e542:	4638      	mov	r0, r7
2400e544:	f7fe fd50 	bl	2400cfe8 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e548:	b930      	cbnz	r0, 2400e558 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e54a:	0063      	lsls	r3, r4, #1
2400e54c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e550:	441f      	add	r7, r3
2400e552:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2400e556:	e7ba      	b.n	2400e4ce <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400e558:	2001      	movs	r0, #1
2400e55a:	e77e      	b.n	2400e45a <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e55c:	f3c8 080b 	ubfx	r8, r8, #0, #12
2400e560:	e7b5      	b.n	2400e4ce <remove_chain+0xa2>
	return FR_OK;
2400e562:	2000      	movs	r0, #0
2400e564:	e779      	b.n	2400e45a <remove_chain+0x2e>
2400e566:	bf00      	nop

2400e568 <dir_register>:
{
2400e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e56c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400e570:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e572:	f013 02a0 	ands.w	r2, r3, #160	; 0xa0
2400e576:	930a      	str	r3, [sp, #40]	; 0x28
2400e578:	f040 8358 	bne.w	2400ec2c <dir_register+0x6c4>
	FATFS *fs = dp->obj.fs;
2400e57c:	6803      	ldr	r3, [r0, #0]
2400e57e:	4682      	mov	sl, r0
2400e580:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400e582:	68db      	ldr	r3, [r3, #12]
2400e584:	881f      	ldrh	r7, [r3, #0]
2400e586:	b12f      	cbz	r7, 2400e594 <dir_register+0x2c>
2400e588:	4617      	mov	r7, r2
2400e58a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400e58e:	3701      	adds	r7, #1
2400e590:	2a00      	cmp	r2, #0
2400e592:	d1fa      	bne.n	2400e58a <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
2400e594:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
2400e598:	ab12      	add	r3, sp, #72	; 0x48
2400e59a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
2400e59e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400e5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400e5a4:	07d8      	lsls	r0, r3, #31
2400e5a6:	f100 8097 	bmi.w	2400e6d8 <dir_register+0x170>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e5aa:	f013 0302 	ands.w	r3, r3, #2
2400e5ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
2400e5b2:	f000 829f 	beq.w	2400eaf4 <dir_register+0x58c>
2400e5b6:	4a75      	ldr	r2, [pc, #468]	; (2400e78c <dir_register+0x224>)
2400e5b8:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
2400e5bc:	2100      	movs	r1, #0
2400e5be:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e5c0:	fba2 2303 	umull	r2, r3, r2, r3
2400e5c4:	089b      	lsrs	r3, r3, #2
2400e5c6:	9302      	str	r3, [sp, #8]
2400e5c8:	3301      	adds	r3, #1
2400e5ca:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400e5cc:	f7ff fb40 	bl	2400dc50 <dir_sdi>
	if (res == FR_OK) {
2400e5d0:	4683      	mov	fp, r0
2400e5d2:	2800      	cmp	r0, #0
2400e5d4:	f040 8299 	bne.w	2400eb0a <dir_register+0x5a2>
			res = move_window(fs, dp->sect);
2400e5d8:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
2400e5dc:	4680      	mov	r8, r0
						fs->wflag = 1;
2400e5de:	9006      	str	r0, [sp, #24]
2400e5e0:	e029      	b.n	2400e636 <dir_register+0xce>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e5e2:	fab3 f283 	clz	r2, r3
2400e5e6:	0952      	lsrs	r2, r2, #5
2400e5e8:	b3a3      	cbz	r3, 2400e654 <dir_register+0xec>
				n = 0;					/* Not a blank entry. Restart to search */
2400e5ea:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e5ec:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e5f0:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e5f4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e5f6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e5fa:	f080 81ee 	bcs.w	2400e9da <dir_register+0x472>
2400e5fe:	2900      	cmp	r1, #0
2400e600:	f000 81eb 	beq.w	2400e9da <dir_register+0x472>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e604:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400e608:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e60c:	b967      	cbnz	r7, 2400e628 <dir_register+0xc0>
		dp->sect++;				/* Next sector */
2400e60e:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
2400e610:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2400e614:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
2400e618:	2b00      	cmp	r3, #0
2400e61a:	f040 82cd 	bne.w	2400ebb8 <dir_register+0x650>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e61e:	8922      	ldrh	r2, [r4, #8]
2400e620:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400e624:	f240 83bc 	bls.w	2400eda0 <dir_register+0x838>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e628:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e62c:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
2400e62e:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e632:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e636:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
2400e63a:	428b      	cmp	r3, r1
2400e63c:	d005      	beq.n	2400e64a <dir_register+0xe2>
2400e63e:	4648      	mov	r0, r9
2400e640:	f7fe fcd2 	bl	2400cfe8 <move_window.part.0>
			if (res != FR_OK) break;
2400e644:	2800      	cmp	r0, #0
2400e646:	f040 83b3 	bne.w	2400edb0 <dir_register+0x848>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e64a:	f8da 3020 	ldr.w	r3, [sl, #32]
2400e64e:	781b      	ldrb	r3, [r3, #0]
2400e650:	2be5      	cmp	r3, #229	; 0xe5
2400e652:	d1c6      	bne.n	2400e5e2 <dir_register+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400e654:	f108 0801 	add.w	r8, r8, #1
2400e658:	9b03      	ldr	r3, [sp, #12]
2400e65a:	4543      	cmp	r3, r8
2400e65c:	d1c6      	bne.n	2400e5ec <dir_register+0x84>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400e65e:	9b02      	ldr	r3, [sp, #8]
2400e660:	f8dd b018 	ldr.w	fp, [sp, #24]
2400e664:	2b00      	cmp	r3, #0
2400e666:	f040 82ec 	bne.w	2400ec42 <dir_register+0x6da>
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e66a:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
2400e66c:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400e672:	4299      	cmp	r1, r3
2400e674:	d005      	beq.n	2400e682 <dir_register+0x11a>
2400e676:	9801      	ldr	r0, [sp, #4]
2400e678:	f7fe fcb6 	bl	2400cfe8 <move_window.part.0>
		if (res == FR_OK) {
2400e67c:	2800      	cmp	r0, #0
2400e67e:	f040 82db 	bne.w	2400ec38 <dir_register+0x6d0>
		*d++ = (BYTE)val;
2400e682:	2220      	movs	r2, #32
2400e684:	2100      	movs	r1, #0
2400e686:	f8da 0020 	ldr.w	r0, [sl, #32]
2400e68a:	f006 ff29 	bl	240154e0 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400e68e:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400e692:	f10a 0225 	add.w	r2, sl, #37	; 0x25
2400e696:	1a9a      	subs	r2, r3, r2
2400e698:	2a02      	cmp	r2, #2
2400e69a:	f240 8486 	bls.w	2400efaa <dir_register+0xa42>
			*d++ = *s++;
2400e69e:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
2400e6a2:	601a      	str	r2, [r3, #0]
2400e6a4:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
2400e6a8:	605a      	str	r2, [r3, #4]
2400e6aa:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
2400e6ae:	4658      	mov	r0, fp
			*d++ = *s++;
2400e6b0:	721a      	strb	r2, [r3, #8]
2400e6b2:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
2400e6b6:	725a      	strb	r2, [r3, #9]
2400e6b8:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
2400e6bc:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400e6be:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400e6c0:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
2400e6c4:	f8da 1020 	ldr.w	r1, [sl, #32]
2400e6c8:	f003 0318 	and.w	r3, r3, #24
2400e6cc:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
2400e6ce:	9b01      	ldr	r3, [sp, #4]
2400e6d0:	70da      	strb	r2, [r3, #3]
}
2400e6d2:	b013      	add	sp, #76	; 0x4c
2400e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e6d8:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
2400e6da:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
2400e6de:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2400e6e2:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e6e4:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6e8:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
2400e6ec:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
2400e6f0:	9208      	str	r2, [sp, #32]
2400e6f2:	9303      	str	r3, [sp, #12]
2400e6f4:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
2400e6f8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
2400e6fc:	9305      	str	r3, [sp, #20]
2400e6fe:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2400e702:	9207      	str	r2, [sp, #28]
2400e704:	9304      	str	r3, [sp, #16]
2400e706:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
2400e70a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
2400e70e:	9302      	str	r3, [sp, #8]
2400e710:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e714:	4693      	mov	fp, r2
2400e716:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
2400e718:	9306      	str	r3, [sp, #24]
2400e71a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
2400e71e:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
				if (sr & 0x10000) sr ^= 0x11021;
2400e722:	4c1b      	ldr	r4, [pc, #108]	; (2400e790 <dir_register+0x228>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e724:	461f      	mov	r7, r3
			*d++ = *s++;
2400e726:	9109      	str	r1, [sp, #36]	; 0x24
2400e728:	9b03      	ldr	r3, [sp, #12]
2400e72a:	2100      	movs	r1, #0
2400e72c:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e72e:	2e05      	cmp	r6, #5
			*d++ = *s++;
2400e730:	f363 0107 	bfi	r1, r3, #0, #8
2400e734:	9b05      	ldr	r3, [sp, #20]
2400e736:	f363 210f 	bfi	r1, r3, #8, #8
2400e73a:	9b04      	ldr	r3, [sp, #16]
2400e73c:	f363 4117 	bfi	r1, r3, #16, #8
2400e740:	9b02      	ldr	r3, [sp, #8]
2400e742:	f363 611f 	bfi	r1, r3, #24, #8
2400e746:	9b06      	ldr	r3, [sp, #24]
2400e748:	f363 0207 	bfi	r2, r3, #0, #8
2400e74c:	9b08      	ldr	r3, [sp, #32]
2400e74e:	f367 220f 	bfi	r2, r7, #8, #8
2400e752:	f363 4217 	bfi	r2, r3, #16, #8
2400e756:	9b07      	ldr	r3, [sp, #28]
2400e758:	f363 621f 	bfi	r2, r3, #24, #8
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400e75c:	9b01      	ldr	r3, [sp, #4]
2400e75e:	68d8      	ldr	r0, [r3, #12]
			*d++ = *s++;
2400e760:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400e762:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2400e766:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
2400e76a:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
2400e76e:	e9ca 1209 	strd	r1, r2, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e772:	f240 8138 	bls.w	2400e9e6 <dir_register+0x47e>
		while (*lfn) {	/* Create a CRC */
2400e776:	8802      	ldrh	r2, [r0, #0]
2400e778:	2a00      	cmp	r2, #0
2400e77a:	f000 8134 	beq.w	2400e9e6 <dir_register+0x47e>
				sr = (sr << 1) + (wc & 1);
2400e77e:	f002 0101 	and.w	r1, r2, #1
2400e782:	4684      	mov	ip, r0
				wc >>= 1;
2400e784:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400e786:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e78a:	e00d      	b.n	2400e7a8 <dir_register+0x240>
2400e78c:	4ec4ec4f 	.word	0x4ec4ec4f
2400e790:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
2400e794:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e798:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400e79c:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400e7a0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7a4:	bf18      	it	ne
2400e7a6:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e7a8:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400e7ac:	0893      	lsrs	r3, r2, #2
2400e7ae:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400e7b0:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7b4:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400e7b6:	f003 0301 	and.w	r3, r3, #1
2400e7ba:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7be:	bf48      	it	mi
2400e7c0:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
2400e7c4:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400e7c6:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7ca:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400e7ce:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7d2:	bf18      	it	ne
2400e7d4:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e7d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7da:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e7dc:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400e7e0:	bf48      	it	mi
2400e7e2:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e7e4:	f003 0301 	and.w	r3, r3, #1
2400e7e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7ec:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e7ee:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400e7f2:	bf48      	it	mi
2400e7f4:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e7f6:	f000 0001 	and.w	r0, r0, #1
2400e7fa:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e7fe:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e800:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400e804:	bf48      	it	mi
2400e806:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e808:	f001 0101 	and.w	r1, r1, #1
2400e80c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e810:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e812:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400e816:	bf48      	it	mi
2400e818:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e81a:	f003 0301 	and.w	r3, r3, #1
2400e81e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e822:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e824:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400e828:	bf48      	it	mi
2400e82a:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e82c:	f000 0001 	and.w	r0, r0, #1
2400e830:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e834:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e836:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400e83a:	bf48      	it	mi
2400e83c:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e83e:	f001 0101 	and.w	r1, r1, #1
2400e842:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e846:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e848:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400e84c:	bf48      	it	mi
2400e84e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400e850:	f003 0301 	and.w	r3, r3, #1
2400e854:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e858:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e85a:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400e85e:	bf48      	it	mi
2400e860:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e862:	f000 0001 	and.w	r0, r0, #1
2400e866:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e86a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e86c:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400e870:	bf48      	it	mi
2400e872:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e874:	f001 0101 	and.w	r1, r1, #1
2400e878:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e87c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e87e:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400e882:	bf48      	it	mi
2400e884:	4060      	eormi	r0, r4
				wc >>= 1;
2400e886:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
2400e888:	f003 0301 	and.w	r3, r3, #1
2400e88c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e890:	0400      	lsls	r0, r0, #16
2400e892:	bf48      	it	mi
2400e894:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400e896:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e89a:	0408      	lsls	r0, r1, #16
2400e89c:	bf48      	it	mi
2400e89e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400e8a0:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e8a4:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
2400e8a6:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400e8aa:	bf48      	it	mi
2400e8ac:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
2400e8b0:	2a00      	cmp	r2, #0
2400e8b2:	f47f af6f 	bne.w	2400e794 <dir_register+0x22c>
		c = (BYTE)((seq % 16) + '0');
2400e8b6:	f00e 010f 	and.w	r1, lr, #15
2400e8ba:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e8be:	2a39      	cmp	r2, #57	; 0x39
2400e8c0:	bf88      	it	hi
2400e8c2:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e8c6:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400e8ca:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400e8ce:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
2400e8d2:	f240 8156 	bls.w	2400eb82 <dir_register+0x61a>
		c = (BYTE)((seq % 16) + '0');
2400e8d6:	f001 000f 	and.w	r0, r1, #15
2400e8da:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e8de:	2a39      	cmp	r2, #57	; 0x39
2400e8e0:	bf88      	it	hi
2400e8e2:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e8e6:	290f      	cmp	r1, #15
		seq /= 16;
2400e8e8:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400e8ec:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
2400e8f0:	f240 814d 	bls.w	2400eb8e <dir_register+0x626>
		c = (BYTE)((seq % 16) + '0');
2400e8f4:	f000 010f 	and.w	r1, r0, #15
2400e8f8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e8fc:	2a39      	cmp	r2, #57	; 0x39
2400e8fe:	bf88      	it	hi
2400e900:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e904:	280f      	cmp	r0, #15
		seq /= 16;
2400e906:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400e90a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
2400e90e:	f240 8144 	bls.w	2400eb9a <dir_register+0x632>
		c = (BYTE)((seq % 16) + '0');
2400e912:	f001 000f 	and.w	r0, r1, #15
2400e916:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e91a:	2a39      	cmp	r2, #57	; 0x39
2400e91c:	bf88      	it	hi
2400e91e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e922:	290f      	cmp	r1, #15
		seq /= 16;
2400e924:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400e928:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
2400e92c:	f240 816c 	bls.w	2400ec08 <dir_register+0x6a0>
		c = (BYTE)((seq % 16) + '0');
2400e930:	f000 010f 	and.w	r1, r0, #15
2400e934:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e938:	2a39      	cmp	r2, #57	; 0x39
2400e93a:	bf88      	it	hi
2400e93c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e940:	280f      	cmp	r0, #15
		seq /= 16;
2400e942:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400e946:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
2400e94a:	f240 8163 	bls.w	2400ec14 <dir_register+0x6ac>
		c = (BYTE)((seq % 16) + '0');
2400e94e:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400e952:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400e956:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e95a:	2a39      	cmp	r2, #57	; 0x39
2400e95c:	bf88      	it	hi
2400e95e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e962:	290f      	cmp	r1, #15
		ns[i--] = c;
2400e964:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
2400e968:	f240 815a 	bls.w	2400ec20 <dir_register+0x6b8>
		c = (BYTE)((seq % 16) + '0');
2400e96c:	f00e 010f 	and.w	r1, lr, #15
2400e970:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e974:	2a39      	cmp	r2, #57	; 0x39
2400e976:	bf88      	it	hi
2400e978:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e97c:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400e980:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
2400e984:	f240 810f 	bls.w	2400eba6 <dir_register+0x63e>
		ns[i--] = c;
2400e988:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400e98c:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e990:	2200      	movs	r2, #0
2400e992:	e002      	b.n	2400e99a <dir_register+0x432>
2400e994:	3201      	adds	r2, #1
2400e996:	4562      	cmp	r2, ip
2400e998:	d003      	beq.n	2400e9a2 <dir_register+0x43a>
2400e99a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400e99e:	2b20      	cmp	r3, #32
2400e9a0:	d1f8      	bne.n	2400e994 <dir_register+0x42c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9a2:	f1bc 0f07 	cmp.w	ip, #7
2400e9a6:	d920      	bls.n	2400e9ea <dir_register+0x482>
2400e9a8:	1c50      	adds	r0, r2, #1
2400e9aa:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400e9ae:	2807      	cmp	r0, #7
2400e9b0:	d809      	bhi.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9b2:	1c42      	adds	r2, r0, #1
2400e9b4:	2120      	movs	r1, #32
2400e9b6:	2a08      	cmp	r2, #8
2400e9b8:	f1c0 0208 	rsb	r2, r0, #8
2400e9bc:	4428      	add	r0, r5
2400e9be:	bf88      	it	hi
2400e9c0:	2201      	movhi	r2, #1
2400e9c2:	f006 fd8d 	bl	240154e0 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400e9c6:	4650      	mov	r0, sl
2400e9c8:	f7ff f9fc 	bl	2400ddc4 <dir_find>
			if (res != FR_OK) break;
2400e9cc:	2800      	cmp	r0, #0
2400e9ce:	f040 8083 	bne.w	2400ead8 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
2400e9d2:	3601      	adds	r6, #1
2400e9d4:	2e64      	cmp	r6, #100	; 0x64
2400e9d6:	f47f aea7 	bne.w	2400e728 <dir_register+0x1c0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400e9da:	f04f 0b07 	mov.w	fp, #7
}
2400e9de:	4658      	mov	r0, fp
2400e9e0:	b013      	add	sp, #76	; 0x4c
2400e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400e9e6:	46b6      	mov	lr, r6
2400e9e8:	e765      	b.n	2400e8b6 <dir_register+0x34e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e9ea:	f10c 0348 	add.w	r3, ip, #72	; 0x48
2400e9ee:	f10c 0c01 	add.w	ip, ip, #1
2400e9f2:	eb0d 0103 	add.w	r1, sp, r3
2400e9f6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e9fa:	54a9      	strb	r1, [r5, r2]
2400e9fc:	3201      	adds	r2, #1
	} while (j < 8);
2400e9fe:	2a07      	cmp	r2, #7
2400ea00:	d8e1      	bhi.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea02:	f1bc 0f08 	cmp.w	ip, #8
2400ea06:	f000 8085 	beq.w	2400eb14 <dir_register+0x5ac>
2400ea0a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
2400ea0e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea10:	f102 0001 	add.w	r0, r2, #1
2400ea14:	eb0d 0103 	add.w	r1, sp, r3
2400ea18:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea1c:	54a9      	strb	r1, [r5, r2]
2400ea1e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400ea22:	d0d0      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea24:	2908      	cmp	r1, #8
2400ea26:	d07d      	beq.n	2400eb24 <dir_register+0x5bc>
2400ea28:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
2400ea2c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea2e:	eb0d 0103 	add.w	r1, sp, r3
2400ea32:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea36:	5429      	strb	r1, [r5, r0]
2400ea38:	f10c 0102 	add.w	r1, ip, #2
2400ea3c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400ea40:	d0c1      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea42:	2908      	cmp	r1, #8
2400ea44:	d076      	beq.n	2400eb34 <dir_register+0x5cc>
2400ea46:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
2400ea4a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea4c:	eb0d 0103 	add.w	r1, sp, r3
2400ea50:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea54:	5429      	strb	r1, [r5, r0]
2400ea56:	f10c 0103 	add.w	r1, ip, #3
2400ea5a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400ea5e:	d0b2      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea60:	2908      	cmp	r1, #8
2400ea62:	d06f      	beq.n	2400eb44 <dir_register+0x5dc>
2400ea64:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
2400ea68:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea6a:	eb0d 0103 	add.w	r1, sp, r3
2400ea6e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea72:	5429      	strb	r1, [r5, r0]
2400ea74:	f10c 0104 	add.w	r1, ip, #4
2400ea78:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400ea7c:	d0a3      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea7e:	2908      	cmp	r1, #8
2400ea80:	d068      	beq.n	2400eb54 <dir_register+0x5ec>
2400ea82:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
2400ea86:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea88:	eb0d 0103 	add.w	r1, sp, r3
2400ea8c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ea90:	5429      	strb	r1, [r5, r0]
2400ea92:	f10c 0105 	add.w	r1, ip, #5
2400ea96:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400ea9a:	d094      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ea9c:	2908      	cmp	r1, #8
2400ea9e:	d061      	beq.n	2400eb64 <dir_register+0x5fc>
2400eaa0:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
2400eaa4:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eaa6:	eb0d 0103 	add.w	r1, sp, r3
2400eaaa:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400eaae:	5429      	strb	r1, [r5, r0]
2400eab0:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400eab4:	d087      	beq.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eab6:	f1bc 0f01 	cmp.w	ip, #1
2400eaba:	d15b      	bne.n	2400eb74 <dir_register+0x60c>
2400eabc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
2400eac0:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eac2:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
2400eac4:	f47f af7f 	bne.w	2400e9c6 <dir_register+0x45e>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400eac8:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eaca:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400eace:	f7ff f979 	bl	2400ddc4 <dir_find>
			if (res != FR_OK) break;
2400ead2:	2800      	cmp	r0, #0
2400ead4:	f43f af7d 	beq.w	2400e9d2 <dir_register+0x46a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400ead8:	2804      	cmp	r0, #4
2400eada:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
2400eadc:	4683      	mov	fp, r0
2400eade:	f47f af7e 	bne.w	2400e9de <dir_register+0x476>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400eae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2400eae4:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
2400eae8:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400eaec:	f013 0302 	ands.w	r3, r3, #2
2400eaf0:	f47f ad61 	bne.w	2400e5b6 <dir_register+0x4e>
2400eaf4:	9302      	str	r3, [sp, #8]
2400eaf6:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
2400eaf8:	2100      	movs	r1, #0
2400eafa:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400eafc:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400eafe:	f7ff f8a7 	bl	2400dc50 <dir_sdi>
	if (res == FR_OK) {
2400eb02:	4683      	mov	fp, r0
2400eb04:	2800      	cmp	r0, #0
2400eb06:	f43f ad67 	beq.w	2400e5d8 <dir_register+0x70>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400eb0a:	f1bb 0f04 	cmp.w	fp, #4
2400eb0e:	f43f af64 	beq.w	2400e9da <dir_register+0x472>
2400eb12:	e764      	b.n	2400e9de <dir_register+0x476>
	} while (j < 8);
2400eb14:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb16:	f102 0001 	add.w	r0, r2, #1
2400eb1a:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400eb1e:	f47f af48 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb22:	e750      	b.n	2400e9c6 <dir_register+0x45e>
2400eb24:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb26:	f805 9000 	strb.w	r9, [r5, r0]
2400eb2a:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400eb2e:	f47f af40 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb32:	e748      	b.n	2400e9c6 <dir_register+0x45e>
2400eb34:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb36:	f805 9000 	strb.w	r9, [r5, r0]
2400eb3a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400eb3e:	f47f af38 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb42:	e740      	b.n	2400e9c6 <dir_register+0x45e>
2400eb44:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb46:	f805 9000 	strb.w	r9, [r5, r0]
2400eb4a:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400eb4e:	f47f af30 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb52:	e738      	b.n	2400e9c6 <dir_register+0x45e>
2400eb54:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb56:	f805 9000 	strb.w	r9, [r5, r0]
2400eb5a:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400eb5e:	f47f af28 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb62:	e730      	b.n	2400e9c6 <dir_register+0x45e>
2400eb64:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb66:	f805 9000 	strb.w	r9, [r5, r0]
2400eb6a:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400eb6e:	f47f af20 	bne.w	2400e9b2 <dir_register+0x44a>
2400eb72:	e728      	b.n	2400e9c6 <dir_register+0x45e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb74:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
2400eb78:	2a00      	cmp	r2, #0
2400eb7a:	f47f af24 	bne.w	2400e9c6 <dir_register+0x45e>
2400eb7e:	2007      	movs	r0, #7
2400eb80:	e717      	b.n	2400e9b2 <dir_register+0x44a>
	ns[i] = '~';
2400eb82:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb84:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400eb88:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eb8c:	e6fe      	b.n	2400e98c <dir_register+0x424>
	ns[i] = '~';
2400eb8e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb90:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400eb94:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eb98:	e6f8      	b.n	2400e98c <dir_register+0x424>
	ns[i] = '~';
2400eb9a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400eb9c:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400eba0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400eba4:	e6f2      	b.n	2400e98c <dir_register+0x424>
	ns[i] = '~';
2400eba6:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eba8:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400ebac:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ebb0:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
2400ebb4:	4662      	mov	r2, ip
2400ebb6:	e728      	b.n	2400ea0a <dir_register+0x4a2>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400ebb8:	8962      	ldrh	r2, [r4, #10]
2400ebba:	3a01      	subs	r2, #1
2400ebbc:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400ebc0:	f47f ad32 	bne.w	2400e628 <dir_register+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ebc4:	4619      	mov	r1, r3
2400ebc6:	4620      	mov	r0, r4
2400ebc8:	f7fe fc5a 	bl	2400d480 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ebcc:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400ebce:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ebd0:	f240 8205 	bls.w	2400efde <dir_register+0xa76>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ebd4:	1c42      	adds	r2, r0, #1
2400ebd6:	f000 80dd 	beq.w	2400ed94 <dir_register+0x82c>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400ebda:	69a3      	ldr	r3, [r4, #24]
2400ebdc:	4298      	cmp	r0, r3
2400ebde:	f080 80e9 	bcs.w	2400edb4 <dir_register+0x84c>
	clst -= 2;
2400ebe2:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ebe6:	f104 0634 	add.w	r6, r4, #52	; 0x34
2400ebea:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
2400ebec:	f8ca 3018 	str.w	r3, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ebf0:	69a3      	ldr	r3, [r4, #24]
2400ebf2:	3b02      	subs	r3, #2
2400ebf4:	455b      	cmp	r3, fp
2400ebf6:	f240 813a 	bls.w	2400ee6e <dir_register+0x906>
	return clst * fs->csize + fs->database;
2400ebfa:	8963      	ldrh	r3, [r4, #10]
2400ebfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400ebfe:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
2400ec02:	f8ca 101c 	str.w	r1, [sl, #28]
2400ec06:	e511      	b.n	2400e62c <dir_register+0xc4>
	ns[i] = '~';
2400ec08:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ec0a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400ec0e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ec12:	e6bb      	b.n	2400e98c <dir_register+0x424>
	ns[i] = '~';
2400ec14:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ec16:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400ec1a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ec1e:	e6b5      	b.n	2400e98c <dir_register+0x424>
	ns[i] = '~';
2400ec20:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400ec22:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400ec26:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400ec2a:	e6af      	b.n	2400e98c <dir_register+0x424>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400ec2c:	f04f 0b06 	mov.w	fp, #6
}
2400ec30:	4658      	mov	r0, fp
2400ec32:	b013      	add	sp, #76	; 0x4c
2400ec34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400ec38:	4683      	mov	fp, r0
2400ec3a:	4658      	mov	r0, fp
2400ec3c:	b013      	add	sp, #76	; 0x4c
2400ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400ec42:	f8da 1014 	ldr.w	r1, [sl, #20]
2400ec46:	4650      	mov	r0, sl
2400ec48:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
2400ec4c:	f7ff f800 	bl	2400dc50 <dir_sdi>
		if (res == FR_OK) {
2400ec50:	4605      	mov	r5, r0
2400ec52:	2800      	cmp	r0, #0
2400ec54:	f040 8109 	bne.w	2400ee6a <dir_register+0x902>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ec58:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400ec5c:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ec60:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
2400ec64:	01cb      	lsls	r3, r1, #7
2400ec66:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
2400ec6a:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400ec6e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
2400ec72:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
2400ec76:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
2400ec7a:	1919      	adds	r1, r3, r4
2400ec7c:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
2400ec80:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
2400ec84:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ec88:	f3c1 0346 	ubfx	r3, r1, #1, #7
2400ec8c:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
2400ec90:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
2400ec94:	fa50 f383 	uxtab	r3, r0, r3
2400ec98:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
2400ec9c:	f3c3 0146 	ubfx	r1, r3, #1, #7
2400eca0:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
2400eca4:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
2400eca8:	fa52 f283 	uxtab	r2, r2, r3
2400ecac:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ecb0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ecb4:	fa58 f883 	uxtab	r8, r8, r3
2400ecb8:	f3c8 0346 	ubfx	r3, r8, #1, #7
2400ecbc:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
2400ecc0:	fa5e fe83 	uxtab	lr, lr, r3
2400ecc4:	f3ce 0346 	ubfx	r3, lr, #1, #7
2400ecc8:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
2400eccc:	fa5c fc83 	uxtab	ip, ip, r3
2400ecd0:	f3cc 0346 	ubfx	r3, ip, #1, #7
2400ecd4:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
2400ecd8:	fa57 f783 	uxtab	r7, r7, r3
2400ecdc:	f3c7 0346 	ubfx	r3, r7, #1, #7
2400ece0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
2400ece4:	fa56 f683 	uxtab	r6, r6, r3
2400ece8:	f3c6 0346 	ubfx	r3, r6, #1, #7
2400ecec:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
2400ecf0:	9e01      	ldr	r6, [sp, #4]
2400ecf2:	fa50 f083 	uxtab	r0, r0, r3
2400ecf6:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400ecfa:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
2400ecfe:	fa51 f180 	uxtab	r1, r1, r0
2400ed02:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
2400ed06:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ed0a:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400ed0c:	4299      	cmp	r1, r3
2400ed0e:	d004      	beq.n	2400ed1a <dir_register+0x7b2>
2400ed10:	4630      	mov	r0, r6
2400ed12:	f7fe f969 	bl	2400cfe8 <move_window.part.0>
				if (res != FR_OK) break;
2400ed16:	2800      	cmp	r0, #0
2400ed18:	d18e      	bne.n	2400ec38 <dir_register+0x6d0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400ed1a:	f89d 0008 	ldrb.w	r0, [sp, #8]
2400ed1e:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ed20:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400ed22:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ed26:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400ed2a:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400ed2e:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400ed32:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
2400ed36:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400ed38:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
2400ed3a:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ed3c:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400ed40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
2400ed44:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
2400ed46:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ed4a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ed4e:	2f00      	cmp	r7, #0
2400ed50:	f040 808f 	bne.w	2400ee72 <dir_register+0x90a>
	*ptr++ = (BYTE)val; val >>= 8;
2400ed54:	f8a3 4003 	strh.w	r4, [r3, #3]
2400ed58:	f8a3 4005 	strh.w	r4, [r3, #5]
2400ed5c:	f8a3 4007 	strh.w	r4, [r3, #7]
2400ed60:	f8a3 4009 	strh.w	r4, [r3, #9]
2400ed64:	81dc      	strh	r4, [r3, #14]
2400ed66:	821c      	strh	r4, [r3, #16]
2400ed68:	825c      	strh	r4, [r3, #18]
2400ed6a:	829c      	strh	r4, [r3, #20]
2400ed6c:	82dc      	strh	r4, [r3, #22]
2400ed6e:	831c      	strh	r4, [r3, #24]
2400ed70:	839c      	strh	r4, [r3, #28]
2400ed72:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ed74:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400ed78:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
2400ed7a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400ed7c:	4650      	mov	r0, sl
				fs->wflag = 1;
2400ed7e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400ed80:	f7fe fbde 	bl	2400d540 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
2400ed84:	2800      	cmp	r0, #0
2400ed86:	f47f af57 	bne.w	2400ec38 <dir_register+0x6d0>
2400ed8a:	9b02      	ldr	r3, [sp, #8]
2400ed8c:	3b01      	subs	r3, #1
2400ed8e:	9302      	str	r3, [sp, #8]
2400ed90:	d1b9      	bne.n	2400ed06 <dir_register+0x79e>
2400ed92:	e46a      	b.n	2400e66a <dir_register+0x102>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ed94:	f04f 0b01 	mov.w	fp, #1
}
2400ed98:	4658      	mov	r0, fp
2400ed9a:	b013      	add	sp, #76	; 0x4c
2400ed9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400eda0:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
2400eda4:	f8ca 301c 	str.w	r3, [sl, #28]
}
2400eda8:	4658      	mov	r0, fp
2400edaa:	b013      	add	sp, #76	; 0x4c
2400edac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400edb0:	4683      	mov	fp, r0
2400edb2:	e6aa      	b.n	2400eb0a <dir_register+0x5a2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400edb4:	f8da 1018 	ldr.w	r1, [sl, #24]
2400edb8:	4650      	mov	r0, sl
2400edba:	f7fe fe79 	bl	2400dab0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400edbe:	4603      	mov	r3, r0
2400edc0:	9004      	str	r0, [sp, #16]
2400edc2:	2800      	cmp	r0, #0
2400edc4:	f43f ae09 	beq.w	2400e9da <dir_register+0x472>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400edc8:	2801      	cmp	r0, #1
2400edca:	f000 8108 	beq.w	2400efde <dir_register+0xa76>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400edce:	3301      	adds	r3, #1
2400edd0:	d0e0      	beq.n	2400ed94 <dir_register+0x82c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400edd2:	78e3      	ldrb	r3, [r4, #3]
2400edd4:	2b00      	cmp	r3, #0
2400edd6:	f040 810d 	bne.w	2400eff4 <dir_register+0xa8c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400edda:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400edde:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ede2:	2100      	movs	r1, #0
2400ede4:	4630      	mov	r0, r6
2400ede6:	f006 fb7b 	bl	240154e0 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edea:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
2400edec:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edee:	3b02      	subs	r3, #2
	clst -= 2;
2400edf0:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edf4:	459b      	cmp	fp, r3
	return clst * fs->csize + fs->database;
2400edf6:	8963      	ldrh	r3, [r4, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400edf8:	f080 80fa 	bcs.w	2400eff0 <dir_register+0xa88>
	return clst * fs->csize + fs->database;
2400edfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400edfe:	fb0b 2203 	mla	r2, fp, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400ee02:	6322      	str	r2, [r4, #48]	; 0x30
2400ee04:	2b00      	cmp	r3, #0
2400ee06:	f000 80f0 	beq.w	2400efea <dir_register+0xa82>
2400ee0a:	2300      	movs	r3, #0
2400ee0c:	e9cd 5707 	strd	r5, r7, [sp, #28]
2400ee10:	4617      	mov	r7, r2
2400ee12:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
2400ee14:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ee18:	463a      	mov	r2, r7
2400ee1a:	4631      	mov	r1, r6
2400ee1c:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
2400ee1e:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ee20:	2301      	movs	r3, #1
2400ee22:	f7fd ff41 	bl	2400cca8 <disk_write>
2400ee26:	2800      	cmp	r0, #0
2400ee28:	d1b4      	bne.n	2400ed94 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
2400ee2c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ee2e:	1af8      	subs	r0, r7, r3
2400ee30:	69e3      	ldr	r3, [r4, #28]
2400ee32:	4298      	cmp	r0, r3
2400ee34:	d20e      	bcs.n	2400ee54 <dir_register+0x8ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee36:	78a5      	ldrb	r5, [r4, #2]
2400ee38:	2d01      	cmp	r5, #1
2400ee3a:	d801      	bhi.n	2400ee40 <dir_register+0x8d8>
2400ee3c:	e00a      	b.n	2400ee54 <dir_register+0x8ec>
					wsect += fs->fsize;
2400ee3e:	69e3      	ldr	r3, [r4, #28]
2400ee40:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee42:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ee44:	2301      	movs	r3, #1
2400ee46:	4631      	mov	r1, r6
2400ee48:	463a      	mov	r2, r7
2400ee4a:	7860      	ldrb	r0, [r4, #1]
2400ee4c:	f7fd ff2c 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ee50:	2d01      	cmp	r5, #1
2400ee52:	d1f4      	bne.n	2400ee3e <dir_register+0x8d6>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400ee54:	9a05      	ldr	r2, [sp, #20]
2400ee56:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400ee58:	1c50      	adds	r0, r2, #1
2400ee5a:	8965      	ldrh	r5, [r4, #10]
2400ee5c:	1c5f      	adds	r7, r3, #1
2400ee5e:	42a8      	cmp	r0, r5
2400ee60:	6327      	str	r7, [r4, #48]	; 0x30
2400ee62:	f080 80bf 	bcs.w	2400efe4 <dir_register+0xa7c>
2400ee66:	9005      	str	r0, [sp, #20]
2400ee68:	e7d4      	b.n	2400ee14 <dir_register+0x8ac>
2400ee6a:	4683      	mov	fp, r0
2400ee6c:	e5b7      	b.n	2400e9de <dir_register+0x476>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ee6e:	2100      	movs	r1, #0
2400ee70:	e6c7      	b.n	2400ec02 <dir_register+0x69a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee72:	42a7      	cmp	r7, r4
2400ee74:	f43f af6e 	beq.w	2400ed54 <dir_register+0x7ec>
2400ee78:	3201      	adds	r2, #1
2400ee7a:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
2400ee7e:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400ee80:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee84:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
2400ee86:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ee8a:	2f00      	cmp	r7, #0
2400ee8c:	f43f af64 	beq.w	2400ed58 <dir_register+0x7f0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ee90:	42a7      	cmp	r7, r4
2400ee92:	f43f af61 	beq.w	2400ed58 <dir_register+0x7f0>
2400ee96:	440a      	add	r2, r1
2400ee98:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee9a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ee9e:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
2400eea0:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eea4:	2f00      	cmp	r7, #0
2400eea6:	f43f af59 	beq.w	2400ed5c <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eeaa:	42a7      	cmp	r7, r4
2400eeac:	f43f af56 	beq.w	2400ed5c <dir_register+0x7f4>
2400eeb0:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
2400eeb2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eeb6:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
2400eeb8:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eebc:	2f00      	cmp	r7, #0
2400eebe:	f43f af4f 	beq.w	2400ed60 <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eec2:	42a7      	cmp	r7, r4
2400eec4:	f43f af4c 	beq.w	2400ed60 <dir_register+0x7f8>
2400eec8:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
2400eeca:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eece:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
2400eed0:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eed4:	2f00      	cmp	r7, #0
2400eed6:	f43f af45 	beq.w	2400ed64 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eeda:	42a7      	cmp	r7, r4
2400eedc:	f43f af42 	beq.w	2400ed64 <dir_register+0x7fc>
2400eee0:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
2400eee2:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eee6:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
2400eee8:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400eeec:	2f00      	cmp	r7, #0
2400eeee:	f43f af3a 	beq.w	2400ed66 <dir_register+0x7fe>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eef2:	42a7      	cmp	r7, r4
2400eef4:	f43f af37 	beq.w	2400ed66 <dir_register+0x7fe>
2400eef8:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
2400eefa:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400eefe:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
2400ef00:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef04:	2f00      	cmp	r7, #0
2400ef06:	f43f af2f 	beq.w	2400ed68 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef0a:	42a7      	cmp	r7, r4
2400ef0c:	f43f af2c 	beq.w	2400ed68 <dir_register+0x800>
2400ef10:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef12:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef16:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
2400ef18:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef1c:	2f00      	cmp	r7, #0
2400ef1e:	f43f af24 	beq.w	2400ed6a <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef22:	42a7      	cmp	r7, r4
2400ef24:	f43f af21 	beq.w	2400ed6a <dir_register+0x802>
2400ef28:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef2a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef2e:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
2400ef30:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef34:	2f00      	cmp	r7, #0
2400ef36:	f43f af19 	beq.w	2400ed6c <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef3a:	42a7      	cmp	r7, r4
2400ef3c:	f43f af16 	beq.w	2400ed6c <dir_register+0x804>
2400ef40:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef42:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef46:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
2400ef48:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef4c:	2f00      	cmp	r7, #0
2400ef4e:	f43f af0e 	beq.w	2400ed6e <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef52:	42a7      	cmp	r7, r4
2400ef54:	f43f af0b 	beq.w	2400ed6e <dir_register+0x806>
2400ef58:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef5a:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef5e:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
2400ef60:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef64:	2f00      	cmp	r7, #0
2400ef66:	f43f af03 	beq.w	2400ed70 <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef6a:	42a7      	cmp	r7, r4
2400ef6c:	f43f af00 	beq.w	2400ed70 <dir_register+0x808>
2400ef70:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
2400ef72:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ef76:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
2400ef78:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef7c:	2f00      	cmp	r7, #0
2400ef7e:	f43f aef8 	beq.w	2400ed72 <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ef82:	42a7      	cmp	r7, r4
2400ef84:	f43f aef5 	beq.w	2400ed72 <dir_register+0x80a>
2400ef88:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef8a:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400ef8c:	779a      	strb	r2, [r3, #30]
2400ef8e:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef90:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
2400ef92:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ef94:	f64f 72fd 	movw	r2, #65533	; 0xfffd
2400ef98:	4297      	cmp	r7, r2
2400ef9a:	f63f aeeb 	bhi.w	2400ed74 <dir_register+0x80c>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ef9e:	4461      	add	r1, ip
2400efa0:	8b4a      	ldrh	r2, [r1, #26]
2400efa2:	2a00      	cmp	r2, #0
2400efa4:	f47f aee8 	bne.w	2400ed78 <dir_register+0x810>
2400efa8:	e6e4      	b.n	2400ed74 <dir_register+0x80c>
			*d++ = *s++;
2400efaa:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
2400efae:	701a      	strb	r2, [r3, #0]
2400efb0:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
2400efb4:	705a      	strb	r2, [r3, #1]
2400efb6:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
2400efba:	709a      	strb	r2, [r3, #2]
2400efbc:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400efc0:	70da      	strb	r2, [r3, #3]
2400efc2:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
2400efc6:	711a      	strb	r2, [r3, #4]
2400efc8:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
2400efcc:	715a      	strb	r2, [r3, #5]
2400efce:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
2400efd2:	719a      	strb	r2, [r3, #6]
2400efd4:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
2400efd8:	71da      	strb	r2, [r3, #7]
2400efda:	f7ff bb66 	b.w	2400e6aa <dir_register+0x142>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400efde:	f04f 0b02 	mov.w	fp, #2
2400efe2:	e4fc      	b.n	2400e9de <dir_register+0x476>
					fs->winsect -= n;							/* Restore window offset */
2400efe4:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
2400efe8:	1a9a      	subs	r2, r3, r2
2400efea:	9b04      	ldr	r3, [sp, #16]
2400efec:	6322      	str	r2, [r4, #48]	; 0x30
2400efee:	e5fd      	b.n	2400ebec <dir_register+0x684>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400eff0:	2200      	movs	r2, #0
2400eff2:	e706      	b.n	2400ee02 <dir_register+0x89a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400eff4:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
2400eff8:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400effa:	2301      	movs	r3, #1
2400effc:	7860      	ldrb	r0, [r4, #1]
2400effe:	4631      	mov	r1, r6
2400f000:	9205      	str	r2, [sp, #20]
2400f002:	f7fd fe51 	bl	2400cca8 <disk_write>
2400f006:	2800      	cmp	r0, #0
2400f008:	f47f aec4 	bne.w	2400ed94 <dir_register+0x82c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400f00e:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
2400f010:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f012:	1ad1      	subs	r1, r2, r3
2400f014:	69e3      	ldr	r3, [r4, #28]
2400f016:	4299      	cmp	r1, r3
2400f018:	f4bf aee1 	bcs.w	2400edde <dir_register+0x876>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f01c:	f894 b002 	ldrb.w	fp, [r4, #2]
2400f020:	f1bb 0f01 	cmp.w	fp, #1
2400f024:	f67f aedb 	bls.w	2400edde <dir_register+0x876>
2400f028:	4631      	mov	r1, r6
2400f02a:	462e      	mov	r6, r5
2400f02c:	4625      	mov	r5, r4
2400f02e:	4614      	mov	r4, r2
2400f030:	e000      	b.n	2400f034 <dir_register+0xacc>
					wsect += fs->fsize;
2400f032:	69eb      	ldr	r3, [r5, #28]
2400f034:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f036:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400f03a:	2301      	movs	r3, #1
2400f03c:	7868      	ldrb	r0, [r5, #1]
2400f03e:	4622      	mov	r2, r4
2400f040:	9105      	str	r1, [sp, #20]
2400f042:	f7fd fe31 	bl	2400cca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f046:	f1bb 0f01 	cmp.w	fp, #1
2400f04a:	9905      	ldr	r1, [sp, #20]
2400f04c:	d1f1      	bne.n	2400f032 <dir_register+0xaca>
2400f04e:	462c      	mov	r4, r5
2400f050:	4635      	mov	r5, r6
2400f052:	460e      	mov	r6, r1
2400f054:	e6c3      	b.n	2400edde <dir_register+0x876>
2400f056:	bf00      	nop

2400f058 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400f058:	b510      	push	{r4, lr}
2400f05a:	b082      	sub	sp, #8
2400f05c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400f060:	b1a1      	cbz	r1, 2400f08c <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f062:	f891 c000 	ldrb.w	ip, [r1]
2400f066:	f1bc 0f1f 	cmp.w	ip, #31
2400f06a:	d912      	bls.n	2400f092 <f_mount+0x3a>
2400f06c:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400f070:	d00f      	beq.n	2400f092 <f_mount+0x3a>
2400f072:	4608      	mov	r0, r1
2400f074:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400f078:	2b1f      	cmp	r3, #31
2400f07a:	d90c      	bls.n	2400f096 <f_mount+0x3e>
2400f07c:	2b3a      	cmp	r3, #58	; 0x3a
2400f07e:	d1f9      	bne.n	2400f074 <f_mount+0x1c>
			i = *tp++ - '0';
2400f080:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400f082:	4288      	cmp	r0, r1
2400f084:	d102      	bne.n	2400f08c <f_mount+0x34>
2400f086:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400f08a:	d006      	beq.n	2400f09a <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400f08c:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400f08e:	b002      	add	sp, #8
2400f090:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f092:	4663      	mov	r3, ip
2400f094:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400f096:	2b3a      	cmp	r3, #58	; 0x3a
2400f098:	d0f2      	beq.n	2400f080 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400f09a:	4916      	ldr	r1, [pc, #88]	; (2400f0f4 <f_mount+0x9c>)
2400f09c:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400f09e:	b143      	cbz	r3, 2400f0b2 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f0a0:	4815      	ldr	r0, [pc, #84]	; (2400f0f8 <f_mount+0xa0>)
2400f0a2:	6804      	ldr	r4, [r0, #0]
2400f0a4:	42a3      	cmp	r3, r4
2400f0a6:	d01c      	beq.n	2400f0e2 <f_mount+0x8a>
2400f0a8:	6904      	ldr	r4, [r0, #16]
2400f0aa:	429c      	cmp	r4, r3
2400f0ac:	d016      	beq.n	2400f0dc <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
2400f0ae:	2000      	movs	r0, #0
2400f0b0:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400f0b2:	9b01      	ldr	r3, [sp, #4]
2400f0b4:	b173      	cbz	r3, 2400f0d4 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
2400f0b6:	2000      	movs	r0, #0
2400f0b8:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
2400f0ba:	9b01      	ldr	r3, [sp, #4]
2400f0bc:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f0be:	b1b3      	cbz	r3, 2400f0ee <f_mount+0x96>
2400f0c0:	3a01      	subs	r2, #1
2400f0c2:	bf18      	it	ne
2400f0c4:	2201      	movne	r2, #1
2400f0c6:	b992      	cbnz	r2, 2400f0ee <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400f0c8:	a901      	add	r1, sp, #4
2400f0ca:	4668      	mov	r0, sp
2400f0cc:	f7fd ffc6 	bl	2400d05c <find_volume>
}
2400f0d0:	b002      	add	sp, #8
2400f0d2:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f0d4:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400f0d6:	600b      	str	r3, [r1, #0]
}
2400f0d8:	b002      	add	sp, #8
2400f0da:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f0dc:	2400      	movs	r4, #0
2400f0de:	6104      	str	r4, [r0, #16]
2400f0e0:	e7e5      	b.n	2400f0ae <f_mount+0x56>
2400f0e2:	2400      	movs	r4, #0
2400f0e4:	6004      	str	r4, [r0, #0]
2400f0e6:	6904      	ldr	r4, [r0, #16]
2400f0e8:	429c      	cmp	r4, r3
2400f0ea:	d1e0      	bne.n	2400f0ae <f_mount+0x56>
2400f0ec:	e7f6      	b.n	2400f0dc <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f0ee:	2000      	movs	r0, #0
}
2400f0f0:	b002      	add	sp, #8
2400f0f2:	bd10      	pop	{r4, pc}
2400f0f4:	2001d8f8 	.word	0x2001d8f8
2400f0f8:	2001d8fc 	.word	0x2001d8fc

2400f0fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400f0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400f100:	b092      	sub	sp, #72	; 0x48
2400f102:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400f104:	2800      	cmp	r0, #0
2400f106:	f000 80a1 	beq.w	2400f24c <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400f10a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400f10e:	4616      	mov	r6, r2
2400f110:	4604      	mov	r4, r0
2400f112:	a903      	add	r1, sp, #12
2400f114:	a801      	add	r0, sp, #4
2400f116:	463a      	mov	r2, r7
2400f118:	f7fd ffa0 	bl	2400d05c <find_volume>
	if (res == FR_OK) {
2400f11c:	4605      	mov	r5, r0
2400f11e:	b128      	cbz	r0, 2400f12c <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400f120:	2300      	movs	r3, #0
2400f122:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400f124:	4628      	mov	r0, r5
2400f126:	b012      	add	sp, #72	; 0x48
2400f128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400f12c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f12e:	a804      	add	r0, sp, #16
2400f130:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400f132:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f134:	f7fe ffee 	bl	2400e114 <follow_path>
		if (res == FR_OK) {
2400f138:	bb00      	cbnz	r0, 2400f17c <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400f13a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400f13e:	2b00      	cmp	r3, #0
2400f140:	f2c0 808b 	blt.w	2400f25a <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
2400f144:	4ba7      	ldr	r3, [pc, #668]	; (2400f3e4 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f146:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f14a:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400f14c:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f150:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
2400f152:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400f156:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400f15a:	f1b8 0f00 	cmp.w	r8, #0
2400f15e:	f000 80fd 	beq.w	2400f35c <f_open+0x260>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f162:	4580      	cmp	r8, r0
2400f164:	d07b      	beq.n	2400f25e <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
2400f166:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f16a:	f1b8 0f00 	cmp.w	r8, #0
2400f16e:	f000 808e 	beq.w	2400f28e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f172:	4580      	cmp	r8, r0
2400f174:	f000 8102 	beq.w	2400f37c <f_open+0x280>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f178:	2512      	movs	r5, #18
2400f17a:	e7d1      	b.n	2400f120 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f17c:	f016 0f1c 	tst.w	r6, #28
2400f180:	d069      	beq.n	2400f256 <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400f182:	2804      	cmp	r0, #4
2400f184:	d167      	bne.n	2400f256 <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400f186:	4b97      	ldr	r3, [pc, #604]	; (2400f3e4 <f_open+0x2e8>)
2400f188:	681a      	ldr	r2, [r3, #0]
2400f18a:	b112      	cbz	r2, 2400f192 <f_open+0x96>
2400f18c:	691b      	ldr	r3, [r3, #16]
2400f18e:	2b00      	cmp	r3, #0
2400f190:	d1f2      	bne.n	2400f178 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f192:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400f194:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f198:	f7ff f9e6 	bl	2400e568 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f19c:	2800      	cmp	r0, #0
2400f19e:	d15a      	bne.n	2400f256 <f_open+0x15a>
				dw = GET_FATTIME();
2400f1a0:	f7fd fc86 	bl	2400cab0 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400f1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f1a6:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f1aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f1ae:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f1b2:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
2400f1b6:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
2400f1b8:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
2400f1ba:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400f1be:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
2400f1c0:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400f1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f1c4:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f1c6:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
2400f1c8:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400f1cc:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
2400f1ce:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f1d2:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400f1d6:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f1da:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f1dc:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f1de:	d102      	bne.n	2400f1e6 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f1e0:	8a9a      	ldrh	r2, [r3, #20]
2400f1e2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f1e6:	2200      	movs	r2, #0
2400f1e8:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f1ea:	7808      	ldrb	r0, [r1, #0]
2400f1ec:	2803      	cmp	r0, #3
2400f1ee:	d100      	bne.n	2400f1f2 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
2400f1f0:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400f1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f1f4:	2200      	movs	r2, #0
2400f1f6:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400f1f8:	2301      	movs	r3, #1
2400f1fa:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
2400f1fc:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
2400f1fe:	b19e      	cbz	r6, 2400f228 <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
2400f200:	4631      	mov	r1, r6
2400f202:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400f204:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400f208:	f7ff f910 	bl	2400e42c <remove_chain>
						if (res == FR_OK) {
2400f20c:	bb18      	cbnz	r0, 2400f256 <f_open+0x15a>
							res = move_window(fs, dw);
2400f20e:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2400f212:	4590      	cmp	r8, r2
2400f214:	f000 80e2 	beq.w	2400f3dc <f_open+0x2e0>
2400f218:	4618      	mov	r0, r3
2400f21a:	4641      	mov	r1, r8
2400f21c:	f7fd fee4 	bl	2400cfe8 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f220:	3e01      	subs	r6, #1
2400f222:	9b03      	ldr	r3, [sp, #12]
2400f224:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f226:	b9b0      	cbnz	r0, 2400f256 <f_open+0x15a>
				mode |= FA_MODIFIED;
2400f228:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f22c:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f232:	3900      	subs	r1, #0
2400f234:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f236:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f238:	bf18      	it	ne
2400f23a:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400f23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f23e:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f240:	f7fd fd4c 	bl	2400ccdc <inc_lock>
2400f244:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400f246:	bb70      	cbnz	r0, 2400f2a6 <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f248:	2502      	movs	r5, #2
2400f24a:	e769      	b.n	2400f120 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400f24c:	2509      	movs	r5, #9
}
2400f24e:	4628      	mov	r0, r5
2400f250:	b012      	add	sp, #72	; 0x48
2400f252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400f256:	4605      	mov	r5, r0
2400f258:	e762      	b.n	2400f120 <f_open+0x24>
				res = FR_INVALID_NAME;
2400f25a:	2506      	movs	r5, #6
2400f25c:	e760      	b.n	2400f120 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f25e:	6858      	ldr	r0, [r3, #4]
2400f260:	4560      	cmp	r0, ip
2400f262:	f000 8094 	beq.w	2400f38e <f_open+0x292>
		if (Files[i].fs) {	/* Existing entry */
2400f266:	6918      	ldr	r0, [r3, #16]
2400f268:	b188      	cbz	r0, 2400f28e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f26a:	4540      	cmp	r0, r8
2400f26c:	d184      	bne.n	2400f178 <f_open+0x7c>
2400f26e:	6958      	ldr	r0, [r3, #20]
2400f270:	4560      	cmp	r0, ip
2400f272:	d181      	bne.n	2400f178 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f274:	6998      	ldr	r0, [r3, #24]
2400f276:	4570      	cmp	r0, lr
2400f278:	f47f af7e 	bne.w	2400f178 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f27c:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f27e:	2a00      	cmp	r2, #0
2400f280:	d163      	bne.n	2400f34a <f_open+0x24e>
2400f282:	eb03 1300 	add.w	r3, r3, r0, lsl #4
2400f286:	899b      	ldrh	r3, [r3, #12]
2400f288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400f28c:	d05d      	beq.n	2400f34a <f_open+0x24e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f28e:	f016 0f1c 	tst.w	r6, #28
2400f292:	d04a      	beq.n	2400f32a <f_open+0x22e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400f294:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f298:	f013 0f11 	tst.w	r3, #17
2400f29c:	d15c      	bne.n	2400f358 <f_open+0x25c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400f29e:	0773      	lsls	r3, r6, #29
2400f2a0:	d555      	bpl.n	2400f34e <f_open+0x252>
2400f2a2:	2508      	movs	r5, #8
2400f2a4:	e73c      	b.n	2400f120 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f2a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
2400f2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f2ac:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
2400f2b0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f2b2:	2a03      	cmp	r2, #3
2400f2b4:	d102      	bne.n	2400f2bc <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f2b6:	8a9a      	ldrh	r2, [r3, #20]
2400f2b8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f2bc:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400f2be:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400f2c0:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400f2c4:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400f2c8:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
2400f2cc:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400f2d0:	f8c4 800c 	str.w	r8, [r4, #12]
		*d++ = (BYTE)val;
2400f2d4:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400f2d6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
2400f2da:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400f2dc:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400f2de:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
2400f2e0:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2400f2e2:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2400f2e4:	f006 f8fc 	bl	240154e0 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400f2e8:	06b9      	lsls	r1, r7, #26
2400f2ea:	f57f af1b 	bpl.w	2400f124 <f_open+0x28>
2400f2ee:	f1b8 0f00 	cmp.w	r8, #0
2400f2f2:	f43f af17 	beq.w	2400f124 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400f2f6:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f2fa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f2fe:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f302:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f306:	d804      	bhi.n	2400f312 <f_open+0x216>
2400f308:	e047      	b.n	2400f39a <f_open+0x29e>
2400f30a:	1c42      	adds	r2, r0, #1
2400f30c:	d06c      	beq.n	2400f3e8 <f_open+0x2ec>
2400f30e:	4547      	cmp	r7, r8
2400f310:	d26a      	bcs.n	2400f3e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
2400f312:	4631      	mov	r1, r6
2400f314:	6820      	ldr	r0, [r4, #0]
2400f316:	f7fe f8b3 	bl	2400d480 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400f31a:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f31c:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
2400f320:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400f322:	d8f2      	bhi.n	2400f30a <f_open+0x20e>
2400f324:	2502      	movs	r5, #2
				fp->clust = clst;
2400f326:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f328:	e6fa      	b.n	2400f120 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400f32a:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f32e:	06d9      	lsls	r1, r3, #27
2400f330:	d422      	bmi.n	2400f378 <f_open+0x27c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400f332:	07b1      	lsls	r1, r6, #30
2400f334:	d501      	bpl.n	2400f33a <f_open+0x23e>
2400f336:	07d8      	lsls	r0, r3, #31
2400f338:	d40e      	bmi.n	2400f358 <f_open+0x25c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f33a:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f33e:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f340:	2e00      	cmp	r6, #0
2400f342:	f47f af71 	bne.w	2400f228 <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f346:	4611      	mov	r1, r2
2400f348:	e772      	b.n	2400f230 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f34a:	2510      	movs	r5, #16
2400f34c:	e6e8      	b.n	2400f120 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f34e:	0730      	lsls	r0, r6, #28
2400f350:	f53f af26 	bmi.w	2400f1a0 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f354:	9b03      	ldr	r3, [sp, #12]
2400f356:	e76b      	b.n	2400f230 <f_open+0x134>
						res = FR_DENIED;
2400f358:	2507      	movs	r5, #7
2400f35a:	e6e1      	b.n	2400f120 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400f35c:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400f360:	f1b8 0f00 	cmp.w	r8, #0
2400f364:	d093      	beq.n	2400f28e <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f366:	4540      	cmp	r0, r8
2400f368:	d191      	bne.n	2400f28e <f_open+0x192>
2400f36a:	6958      	ldr	r0, [r3, #20]
2400f36c:	4560      	cmp	r0, ip
2400f36e:	d18e      	bne.n	2400f28e <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
2400f370:	6998      	ldr	r0, [r3, #24]
2400f372:	4586      	cmp	lr, r0
2400f374:	d18b      	bne.n	2400f28e <f_open+0x192>
2400f376:	e781      	b.n	2400f27c <f_open+0x180>
					res = FR_NO_FILE;
2400f378:	2504      	movs	r5, #4
2400f37a:	e6d1      	b.n	2400f120 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f37c:	6958      	ldr	r0, [r3, #20]
2400f37e:	4560      	cmp	r0, ip
2400f380:	f47f aefa 	bne.w	2400f178 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f384:	6998      	ldr	r0, [r3, #24]
2400f386:	4586      	cmp	lr, r0
2400f388:	f47f aef6 	bne.w	2400f178 <f_open+0x7c>
2400f38c:	e776      	b.n	2400f27c <f_open+0x180>
2400f38e:	6898      	ldr	r0, [r3, #8]
2400f390:	4570      	cmp	r0, lr
2400f392:	f47f af68 	bne.w	2400f266 <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f396:	4628      	mov	r0, r5
2400f398:	e771      	b.n	2400f27e <f_open+0x182>
				fp->clust = clst;
2400f39a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f39c:	f3c8 0308 	ubfx	r3, r8, #0, #9
2400f3a0:	2b00      	cmp	r3, #0
2400f3a2:	f43f aebf 	beq.w	2400f124 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f3a6:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
2400f3a8:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f3aa:	6983      	ldr	r3, [r0, #24]
2400f3ac:	3b02      	subs	r3, #2
2400f3ae:	429e      	cmp	r6, r3
2400f3b0:	f4bf af4a 	bcs.w	2400f248 <f_open+0x14c>
	return clst * fs->csize + fs->database;
2400f3b4:	8942      	ldrh	r2, [r0, #10]
2400f3b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2400f3b8:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f3bc:	2a00      	cmp	r2, #0
2400f3be:	f43f af43 	beq.w	2400f248 <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f3c2:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f3c6:	4651      	mov	r1, sl
2400f3c8:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f3ca:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f3cc:	7840      	ldrb	r0, [r0, #1]
2400f3ce:	f7fd fc5d 	bl	2400cc8c <disk_read>
2400f3d2:	2800      	cmp	r0, #0
2400f3d4:	f43f aea6 	beq.w	2400f124 <f_open+0x28>
2400f3d8:	2501      	movs	r5, #1
2400f3da:	e6a1      	b.n	2400f120 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f3dc:	3e01      	subs	r6, #1
2400f3de:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400f3e0:	e722      	b.n	2400f228 <f_open+0x12c>
2400f3e2:	bf00      	nop
2400f3e4:	2001d8fc 	.word	0x2001d8fc
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f3e8:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
2400f3ea:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f3ec:	bf0c      	ite	eq
2400f3ee:	2301      	moveq	r3, #1
2400f3f0:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f3f2:	d1d3      	bne.n	2400f39c <f_open+0x2a0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f3f4:	461d      	mov	r5, r3
2400f3f6:	e693      	b.n	2400f120 <f_open+0x24>

2400f3f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f3fc:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400f3fe:	2300      	movs	r3, #0
{
2400f400:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400f402:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f404:	b150      	cbz	r0, 2400f41c <f_read+0x24>
2400f406:	6803      	ldr	r3, [r0, #0]
2400f408:	4604      	mov	r4, r0
2400f40a:	b13b      	cbz	r3, 2400f41c <f_read+0x24>
2400f40c:	4617      	mov	r7, r2
2400f40e:	781a      	ldrb	r2, [r3, #0]
2400f410:	b122      	cbz	r2, 2400f41c <f_read+0x24>
2400f412:	460d      	mov	r5, r1
2400f414:	88da      	ldrh	r2, [r3, #6]
2400f416:	8881      	ldrh	r1, [r0, #4]
2400f418:	4291      	cmp	r1, r2
2400f41a:	d005      	beq.n	2400f428 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f41c:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400f420:	4640      	mov	r0, r8
2400f422:	b005      	add	sp, #20
2400f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f428:	7858      	ldrb	r0, [r3, #1]
2400f42a:	f7fd fc13 	bl	2400cc54 <disk_status>
2400f42e:	07c2      	lsls	r2, r0, #31
2400f430:	d4f4      	bmi.n	2400f41c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f432:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f436:	f1b8 0f00 	cmp.w	r8, #0
2400f43a:	d1f1      	bne.n	2400f420 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f43c:	7d23      	ldrb	r3, [r4, #20]
2400f43e:	f013 0301 	ands.w	r3, r3, #1
2400f442:	9300      	str	r3, [sp, #0]
2400f444:	f000 80ca 	beq.w	2400f5dc <f_read+0x1e4>
	remain = fp->obj.objsize - fp->fptr;
2400f448:	69a3      	ldr	r3, [r4, #24]
2400f44a:	68e2      	ldr	r2, [r4, #12]
2400f44c:	1ad2      	subs	r2, r2, r3
2400f44e:	4297      	cmp	r7, r2
2400f450:	bf28      	it	cs
2400f452:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
2400f454:	2f00      	cmp	r7, #0
2400f456:	d0e3      	beq.n	2400f420 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f458:	f104 022d 	add.w	r2, r4, #45	; 0x2d
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f45c:	46a2      	mov	sl, r4
2400f45e:	f8cd 8008 	str.w	r8, [sp, #8]
2400f462:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f464:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f468:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f46c:	2a00      	cmp	r2, #0
2400f46e:	d140      	bne.n	2400f4f2 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400f470:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400f474:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400f476:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400f47a:	d06d      	beq.n	2400f558 <f_read+0x160>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400f47c:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f47e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f482:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f484:	3b02      	subs	r3, #2
2400f486:	4298      	cmp	r0, r3
2400f488:	d273      	bcs.n	2400f572 <f_read+0x17a>
	return clst * fs->csize + fs->database;
2400f48a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f48e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f492:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f496:	2800      	cmp	r0, #0
2400f498:	d06b      	beq.n	2400f572 <f_read+0x17a>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f49a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400f49e:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f4a2:	d36d      	bcc.n	2400f580 <f_read+0x188>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f4a4:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400f4a8:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f4ac:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f4ae:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f4b2:	bf88      	it	hi
2400f4b4:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f4b8:	465a      	mov	r2, fp
2400f4ba:	4629      	mov	r1, r5
2400f4bc:	4643      	mov	r3, r8
2400f4be:	f7fd fbe5 	bl	2400cc8c <disk_read>
2400f4c2:	2800      	cmp	r0, #0
2400f4c4:	d171      	bne.n	2400f5aa <f_read+0x1b2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f4c6:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400f4ca:	2a00      	cmp	r2, #0
2400f4cc:	f2c0 8096 	blt.w	2400f5fc <f_read+0x204>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400f4d0:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f4d4:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400f4d6:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f4d8:	440d      	add	r5, r1
2400f4da:	440b      	add	r3, r1
2400f4dc:	61a3      	str	r3, [r4, #24]
2400f4de:	6833      	ldr	r3, [r6, #0]
2400f4e0:	440b      	add	r3, r1
2400f4e2:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400f4e4:	f000 80a0 	beq.w	2400f628 <f_read+0x230>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f4e8:	69a3      	ldr	r3, [r4, #24]
2400f4ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f4ee:	2a00      	cmp	r2, #0
2400f4f0:	d0be      	beq.n	2400f470 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f4f2:	1c50      	adds	r0, r2, #1
2400f4f4:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400f4f8:	eb0a 0302 	add.w	r3, sl, r2
2400f4fc:	4450      	add	r0, sl
2400f4fe:	42b9      	cmp	r1, r7
2400f500:	eba5 0000 	sub.w	r0, r5, r0
2400f504:	bf28      	it	cs
2400f506:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f508:	2802      	cmp	r0, #2
2400f50a:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400f50e:	d95b      	bls.n	2400f5c8 <f_read+0x1d0>
2400f510:	f1bb 0f07 	cmp.w	fp, #7
2400f514:	d958      	bls.n	2400f5c8 <f_read+0x1d0>
2400f516:	f021 0e03 	bic.w	lr, r1, #3
2400f51a:	461a      	mov	r2, r3
2400f51c:	4628      	mov	r0, r5
2400f51e:	449e      	add	lr, r3
			*d++ = *s++;
2400f520:	f852 cb04 	ldr.w	ip, [r2], #4
2400f524:	4572      	cmp	r2, lr
2400f526:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400f52a:	d1f9      	bne.n	2400f520 <f_read+0x128>
2400f52c:	f021 0203 	bic.w	r2, r1, #3
2400f530:	4291      	cmp	r1, r2
2400f532:	eb05 0002 	add.w	r0, r5, r2
2400f536:	eb03 0c02 	add.w	ip, r3, r2
2400f53a:	d0cb      	beq.n	2400f4d4 <f_read+0xdc>
			*d++ = *s++;
2400f53c:	5c9b      	ldrb	r3, [r3, r2]
2400f53e:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400f540:	ebbb 0202 	subs.w	r2, fp, r2
2400f544:	d0c6      	beq.n	2400f4d4 <f_read+0xdc>
			*d++ = *s++;
2400f546:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400f54a:	2a01      	cmp	r2, #1
			*d++ = *s++;
2400f54c:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400f54e:	d0c1      	beq.n	2400f4d4 <f_read+0xdc>
			*d++ = *s++;
2400f550:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400f554:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400f556:	e7bd      	b.n	2400f4d4 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400f558:	bb7b      	cbnz	r3, 2400f5ba <f_read+0x1c2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400f55a:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f55c:	2801      	cmp	r0, #1
2400f55e:	d908      	bls.n	2400f572 <f_read+0x17a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f560:	1c43      	adds	r3, r0, #1
2400f562:	d022      	beq.n	2400f5aa <f_read+0x1b2>
				fp->clust = clst;				/* Update current cluster */
2400f564:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400f566:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f568:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400f56c:	3b02      	subs	r3, #2
2400f56e:	4298      	cmp	r0, r3
2400f570:	d38b      	bcc.n	2400f48a <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f572:	2302      	movs	r3, #2
2400f574:	4698      	mov	r8, r3
2400f576:	7563      	strb	r3, [r4, #21]
}
2400f578:	4640      	mov	r0, r8
2400f57a:	b005      	add	sp, #20
2400f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400f580:	6a22      	ldr	r2, [r4, #32]
2400f582:	455a      	cmp	r2, fp
2400f584:	d00b      	beq.n	2400f59e <f_read+0x1a6>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400f586:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f58a:	2b00      	cmp	r3, #0
2400f58c:	db29      	blt.n	2400f5e2 <f_read+0x1ea>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400f58e:	2301      	movs	r3, #1
2400f590:	465a      	mov	r2, fp
2400f592:	4651      	mov	r1, sl
2400f594:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f598:	f7fd fb78 	bl	2400cc8c <disk_read>
2400f59c:	b928      	cbnz	r0, 2400f5aa <f_read+0x1b2>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f59e:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400f5a0:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f5a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f5a8:	e7a3      	b.n	2400f4f2 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f5aa:	f8dd 8000 	ldr.w	r8, [sp]
2400f5ae:	2301      	movs	r3, #1
}
2400f5b0:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f5b2:	7563      	strb	r3, [r4, #21]
}
2400f5b4:	b005      	add	sp, #20
2400f5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400f5ba:	69e1      	ldr	r1, [r4, #28]
2400f5bc:	6820      	ldr	r0, [r4, #0]
2400f5be:	9203      	str	r2, [sp, #12]
2400f5c0:	f7fd ff5e 	bl	2400d480 <get_fat.isra.0>
2400f5c4:	9a03      	ldr	r2, [sp, #12]
2400f5c6:	e7c9      	b.n	2400f55c <f_read+0x164>
2400f5c8:	1e6a      	subs	r2, r5, #1
2400f5ca:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400f5ce:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400f5d2:	4563      	cmp	r3, ip
			*d++ = *s++;
2400f5d4:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f5d8:	d1f9      	bne.n	2400f5ce <f_read+0x1d6>
2400f5da:	e77b      	b.n	2400f4d4 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f5dc:	f04f 0807 	mov.w	r8, #7
2400f5e0:	e71e      	b.n	2400f420 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f5e2:	2301      	movs	r3, #1
2400f5e4:	4651      	mov	r1, sl
2400f5e6:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f5ea:	f7fd fb5d 	bl	2400cca8 <disk_write>
2400f5ee:	2800      	cmp	r0, #0
2400f5f0:	d1db      	bne.n	2400f5aa <f_read+0x1b2>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f5f2:	7d23      	ldrb	r3, [r4, #20]
2400f5f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f5f8:	7523      	strb	r3, [r4, #20]
2400f5fa:	e7c8      	b.n	2400f58e <f_read+0x196>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f5fc:	6a22      	ldr	r2, [r4, #32]
2400f5fe:	eba2 0b0b 	sub.w	fp, r2, fp
2400f602:	45c3      	cmp	fp, r8
2400f604:	f4bf af64 	bcs.w	2400f4d0 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400f608:	eb05 224b 	add.w	r2, r5, fp, lsl #9
2400f60c:	9b01      	ldr	r3, [sp, #4]
2400f60e:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f610:	1ad0      	subs	r0, r2, r3
2400f612:	2802      	cmp	r0, #2
2400f614:	d90b      	bls.n	2400f62e <f_read+0x236>
2400f616:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400f61a:	f851 3b04 	ldr.w	r3, [r1], #4
2400f61e:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400f622:	4562      	cmp	r2, ip
2400f624:	d1f9      	bne.n	2400f61a <f_read+0x222>
2400f626:	e753      	b.n	2400f4d0 <f_read+0xd8>
2400f628:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400f62c:	e6f8      	b.n	2400f420 <f_read+0x28>
2400f62e:	3a01      	subs	r2, #1
2400f630:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400f634:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400f638:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f63a:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400f63e:	d1f9      	bne.n	2400f634 <f_read+0x23c>
2400f640:	e746      	b.n	2400f4d0 <f_read+0xd8>
2400f642:	bf00      	nop

2400f644 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400f644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f648:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400f64a:	2300      	movs	r3, #0
{
2400f64c:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400f64e:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f650:	b150      	cbz	r0, 2400f668 <f_write+0x24>
2400f652:	6803      	ldr	r3, [r0, #0]
2400f654:	4604      	mov	r4, r0
2400f656:	b13b      	cbz	r3, 2400f668 <f_write+0x24>
2400f658:	4616      	mov	r6, r2
2400f65a:	781a      	ldrb	r2, [r3, #0]
2400f65c:	b122      	cbz	r2, 2400f668 <f_write+0x24>
2400f65e:	460d      	mov	r5, r1
2400f660:	88da      	ldrh	r2, [r3, #6]
2400f662:	8881      	ldrh	r1, [r0, #4]
2400f664:	4291      	cmp	r1, r2
2400f666:	d005      	beq.n	2400f674 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f668:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400f66c:	4640      	mov	r0, r8
2400f66e:	b005      	add	sp, #20
2400f670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f674:	7858      	ldrb	r0, [r3, #1]
2400f676:	f7fd faed 	bl	2400cc54 <disk_status>
2400f67a:	07c0      	lsls	r0, r0, #31
2400f67c:	d4f4      	bmi.n	2400f668 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f67e:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f682:	f1b8 0f00 	cmp.w	r8, #0
2400f686:	d1f1      	bne.n	2400f66c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f688:	7d22      	ldrb	r2, [r4, #20]
2400f68a:	0791      	lsls	r1, r2, #30
2400f68c:	f140 80e4 	bpl.w	2400f858 <f_write+0x214>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400f690:	69a3      	ldr	r3, [r4, #24]
2400f692:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400f694:	bf28      	it	cs
2400f696:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400f698:	2e00      	cmp	r6, #0
2400f69a:	f000 80cf 	beq.w	2400f83c <f_write+0x1f8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f69e:	f504 720b 	add.w	r2, r4, #556	; 0x22c
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f6a2:	46a2      	mov	sl, r4
2400f6a4:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f6a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f6aa:	f85a 9b2c 	ldr.w	r9, [sl], #44
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f6ae:	2a00      	cmp	r2, #0
2400f6b0:	d15e      	bne.n	2400f770 <f_write+0x12c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400f6b2:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400f6b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400f6ba:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400f6be:	d110      	bne.n	2400f6e2 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400f6c0:	2b00      	cmp	r3, #0
2400f6c2:	f040 80b3 	bne.w	2400f82c <f_write+0x1e8>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400f6c6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400f6c8:	2800      	cmp	r0, #0
2400f6ca:	f000 80c8 	beq.w	2400f85e <f_write+0x21a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f6ce:	2801      	cmp	r0, #1
2400f6d0:	f000 8086 	beq.w	2400f7e0 <f_write+0x19c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f6d4:	1c43      	adds	r3, r0, #1
2400f6d6:	f000 80a2 	beq.w	2400f81e <f_write+0x1da>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f6da:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400f6dc:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f6de:	b903      	cbnz	r3, 2400f6e2 <f_write+0x9e>
2400f6e0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400f6e2:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f6e6:	2b00      	cmp	r3, #0
2400f6e8:	f2c0 808c 	blt.w	2400f804 <f_write+0x1c0>
	clst -= 2;
2400f6ec:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f6ee:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f6f2:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f6f4:	3b02      	subs	r3, #2
2400f6f6:	429a      	cmp	r2, r3
2400f6f8:	d272      	bcs.n	2400f7e0 <f_write+0x19c>
	return clst * fs->csize + fs->database;
2400f6fa:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f6fe:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f702:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f706:	2a00      	cmp	r2, #0
2400f708:	d06a      	beq.n	2400f7e0 <f_write+0x19c>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f70a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400f70e:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f710:	d36d      	bcc.n	2400f7ee <f_write+0x1aa>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f712:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400f716:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f718:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f71a:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f71e:	bf88      	it	hi
2400f720:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f724:	4629      	mov	r1, r5
2400f726:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400f72a:	f7fd fabd 	bl	2400cca8 <disk_write>
2400f72e:	2800      	cmp	r0, #0
2400f730:	d175      	bne.n	2400f81e <f_write+0x1da>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400f732:	6a21      	ldr	r1, [r4, #32]
2400f734:	9a02      	ldr	r2, [sp, #8]
2400f736:	9b03      	ldr	r3, [sp, #12]
2400f738:	1a8a      	subs	r2, r1, r2
2400f73a:	429a      	cmp	r2, r3
2400f73c:	f0c0 80a3 	bcc.w	2400f886 <f_write+0x242>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400f740:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400f744:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f748:	69a3      	ldr	r3, [r4, #24]
2400f74a:	4615      	mov	r5, r2
2400f74c:	68e2      	ldr	r2, [r4, #12]
2400f74e:	4463      	add	r3, ip
2400f750:	4293      	cmp	r3, r2
2400f752:	61a3      	str	r3, [r4, #24]
2400f754:	bf38      	it	cc
2400f756:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
2400f758:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f75c:	60e3      	str	r3, [r4, #12]
2400f75e:	683b      	ldr	r3, [r7, #0]
2400f760:	4463      	add	r3, ip
2400f762:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400f764:	d069      	beq.n	2400f83a <f_write+0x1f6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f766:	69a3      	ldr	r3, [r4, #24]
2400f768:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f76c:	2a00      	cmp	r2, #0
2400f76e:	d0a0      	beq.n	2400f6b2 <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f770:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400f774:	eb0a 0302 	add.w	r3, sl, r2
2400f778:	1c6a      	adds	r2, r5, #1
2400f77a:	45b4      	cmp	ip, r6
2400f77c:	eba3 0202 	sub.w	r2, r3, r2
2400f780:	bf28      	it	cs
2400f782:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f784:	2a02      	cmp	r2, #2
2400f786:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400f78a:	d95b      	bls.n	2400f844 <f_write+0x200>
2400f78c:	f1bb 0f07 	cmp.w	fp, #7
2400f790:	d958      	bls.n	2400f844 <f_write+0x200>
2400f792:	f02c 0e03 	bic.w	lr, ip, #3
2400f796:	462a      	mov	r2, r5
2400f798:	4619      	mov	r1, r3
2400f79a:	44ae      	add	lr, r5
			*d++ = *s++;
2400f79c:	f852 0b04 	ldr.w	r0, [r2], #4
2400f7a0:	4572      	cmp	r2, lr
2400f7a2:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
2400f7a6:	d1f9      	bne.n	2400f79c <f_write+0x158>
2400f7a8:	f02c 0103 	bic.w	r1, ip, #3
2400f7ac:	458c      	cmp	ip, r1
2400f7ae:	eb03 0001 	add.w	r0, r3, r1
2400f7b2:	eb05 0201 	add.w	r2, r5, r1
2400f7b6:	d00e      	beq.n	2400f7d6 <f_write+0x192>
			*d++ = *s++;
2400f7b8:	f815 e001 	ldrb.w	lr, [r5, r1]
2400f7bc:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400f7c0:	ebbb 0101 	subs.w	r1, fp, r1
2400f7c4:	d005      	beq.n	2400f7d2 <f_write+0x18e>
			*d++ = *s++;
2400f7c6:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400f7c8:	2901      	cmp	r1, #1
			*d++ = *s++;
2400f7ca:	7043      	strb	r3, [r0, #1]
2400f7cc:	bf1c      	itt	ne
2400f7ce:	7893      	ldrbne	r3, [r2, #2]
2400f7d0:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400f7d2:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400f7d6:	7d23      	ldrb	r3, [r4, #20]
2400f7d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400f7dc:	7523      	strb	r3, [r4, #20]
2400f7de:	e7b3      	b.n	2400f748 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f7e0:	2302      	movs	r3, #2
2400f7e2:	4698      	mov	r8, r3
2400f7e4:	7563      	strb	r3, [r4, #21]
}
2400f7e6:	4640      	mov	r0, r8
2400f7e8:	b005      	add	sp, #20
2400f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f7ee:	6a23      	ldr	r3, [r4, #32]
2400f7f0:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400f7f2:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f7f4:	d002      	beq.n	2400f7fc <f_write+0x1b8>
2400f7f6:	68e1      	ldr	r1, [r4, #12]
2400f7f8:	428b      	cmp	r3, r1
2400f7fa:	d338      	bcc.n	2400f86e <f_write+0x22a>
			fp->sect = sect;
2400f7fc:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f7fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f802:	e7b5      	b.n	2400f770 <f_write+0x12c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f804:	2301      	movs	r3, #1
2400f806:	6a22      	ldr	r2, [r4, #32]
2400f808:	4651      	mov	r1, sl
2400f80a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f80e:	f7fd fa4b 	bl	2400cca8 <disk_write>
2400f812:	b920      	cbnz	r0, 2400f81e <f_write+0x1da>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f814:	7d23      	ldrb	r3, [r4, #20]
2400f816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f81a:	7523      	strb	r3, [r4, #20]
2400f81c:	e766      	b.n	2400f6ec <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f81e:	2301      	movs	r3, #1
2400f820:	4698      	mov	r8, r3
2400f822:	7563      	strb	r3, [r4, #21]
}
2400f824:	4640      	mov	r0, r8
2400f826:	b005      	add	sp, #20
2400f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400f82c:	69e1      	ldr	r1, [r4, #28]
2400f82e:	4620      	mov	r0, r4
2400f830:	f7fe f93e 	bl	2400dab0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f834:	2800      	cmp	r0, #0
2400f836:	f47f af4a 	bne.w	2400f6ce <f_write+0x8a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400f83a:	7d22      	ldrb	r2, [r4, #20]
2400f83c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400f840:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400f842:	e713      	b.n	2400f66c <f_write+0x28>
2400f844:	3b01      	subs	r3, #1
2400f846:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400f84a:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400f84e:	4295      	cmp	r5, r2
			*d++ = *s++;
2400f850:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400f854:	d1f9      	bne.n	2400f84a <f_write+0x206>
2400f856:	e7be      	b.n	2400f7d6 <f_write+0x192>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f858:	f04f 0807 	mov.w	r8, #7
2400f85c:	e706      	b.n	2400f66c <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400f85e:	4659      	mov	r1, fp
2400f860:	4620      	mov	r0, r4
2400f862:	f7fe f925 	bl	2400dab0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f866:	2800      	cmp	r0, #0
2400f868:	f47f af31 	bne.w	2400f6ce <f_write+0x8a>
2400f86c:	e7e5      	b.n	2400f83a <f_write+0x1f6>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400f86e:	2301      	movs	r3, #1
2400f870:	4651      	mov	r1, sl
2400f872:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f876:	9202      	str	r2, [sp, #8]
2400f878:	f7fd fa08 	bl	2400cc8c <disk_read>
				fp->fptr < fp->obj.objsize &&
2400f87c:	2800      	cmp	r0, #0
2400f87e:	d1ce      	bne.n	2400f81e <f_write+0x1da>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f880:	69a3      	ldr	r3, [r4, #24]
2400f882:	9a02      	ldr	r2, [sp, #8]
2400f884:	e7ba      	b.n	2400f7fc <f_write+0x1b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400f886:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400f88a:	1c42      	adds	r2, r0, #1
2400f88c:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f88e:	ebaa 0202 	sub.w	r2, sl, r2
2400f892:	2a02      	cmp	r2, #2
2400f894:	d90d      	bls.n	2400f8b2 <f_write+0x26e>
2400f896:	4652      	mov	r2, sl
2400f898:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400f89c:	f851 0b04 	ldr.w	r0, [r1], #4
2400f8a0:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400f8a4:	4562      	cmp	r2, ip
2400f8a6:	d1f9      	bne.n	2400f89c <f_write+0x258>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f8a8:	7d22      	ldrb	r2, [r4, #20]
2400f8aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400f8ae:	7522      	strb	r2, [r4, #20]
2400f8b0:	e746      	b.n	2400f740 <f_write+0xfc>
2400f8b2:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400f8b6:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400f8ba:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400f8be:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f8c0:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f8c4:	d1f9      	bne.n	2400f8ba <f_write+0x276>
2400f8c6:	e7ef      	b.n	2400f8a8 <f_write+0x264>

2400f8c8 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f8c8:	b158      	cbz	r0, 2400f8e2 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400f8ca:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f8cc:	6803      	ldr	r3, [r0, #0]
2400f8ce:	4604      	mov	r4, r0
2400f8d0:	b12b      	cbz	r3, 2400f8de <f_close+0x16>
2400f8d2:	781a      	ldrb	r2, [r3, #0]
2400f8d4:	b11a      	cbz	r2, 2400f8de <f_close+0x16>
2400f8d6:	8881      	ldrh	r1, [r0, #4]
2400f8d8:	88da      	ldrh	r2, [r3, #6]
2400f8da:	4291      	cmp	r1, r2
2400f8dc:	d003      	beq.n	2400f8e6 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400f8de:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400f8e0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400f8e2:	2009      	movs	r0, #9
}
2400f8e4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f8e6:	7858      	ldrb	r0, [r3, #1]
2400f8e8:	f7fd f9b4 	bl	2400cc54 <disk_status>
2400f8ec:	07c1      	lsls	r1, r0, #31
2400f8ee:	d4f6      	bmi.n	2400f8de <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f8f0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f8f2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f8f4:	065a      	lsls	r2, r3, #25
2400f8f6:	d53c      	bpl.n	2400f972 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400f8f8:	061b      	lsls	r3, r3, #24
2400f8fa:	d45d      	bmi.n	2400f9b8 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
2400f8fc:	f7fd f8d8 	bl	2400cab0 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400f900:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f902:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
2400f904:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400f906:	4299      	cmp	r1, r3
2400f908:	d004      	beq.n	2400f914 <f_close+0x4c>
2400f90a:	4628      	mov	r0, r5
2400f90c:	f7fd fb6c 	bl	2400cfe8 <move_window.part.0>
				if (res == FR_OK) {
2400f910:	2800      	cmp	r0, #0
2400f912:	d1e5      	bne.n	2400f8e0 <f_close+0x18>
					dir = fp->dir_ptr;
2400f914:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400f916:	7ad3      	ldrb	r3, [r2, #11]
2400f918:	f043 0320 	orr.w	r3, r3, #32
2400f91c:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400f91e:	68a3      	ldr	r3, [r4, #8]
2400f920:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400f922:	f3c3 2007 	ubfx	r0, r3, #8, #8
2400f926:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
2400f928:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
2400f92a:	7809      	ldrb	r1, [r1, #0]
2400f92c:	2903      	cmp	r1, #3
2400f92e:	d103      	bne.n	2400f938 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400f930:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f932:	7513      	strb	r3, [r2, #20]
2400f934:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
2400f936:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
2400f938:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f93a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400f93c:	7596      	strb	r6, [r2, #22]
2400f93e:	0a19      	lsrs	r1, r3, #8
2400f940:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400f942:	7751      	strb	r1, [r2, #29]
2400f944:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f946:	0e1b      	lsrs	r3, r3, #24
2400f948:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
2400f94a:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
2400f94c:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400f94e:	75d3      	strb	r3, [r2, #23]
2400f950:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f952:	0e36      	lsrs	r6, r6, #24
2400f954:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
2400f956:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
2400f958:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
2400f95a:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
2400f95c:	2301      	movs	r3, #1
2400f95e:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f960:	f7fe f836 	bl	2400d9d0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400f964:	7d23      	ldrb	r3, [r4, #20]
2400f966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400f96a:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400f96c:	2800      	cmp	r0, #0
2400f96e:	d1b7      	bne.n	2400f8e0 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f970:	6825      	ldr	r5, [r4, #0]
2400f972:	2d00      	cmp	r5, #0
2400f974:	d0b3      	beq.n	2400f8de <f_close+0x16>
2400f976:	782b      	ldrb	r3, [r5, #0]
2400f978:	2b00      	cmp	r3, #0
2400f97a:	d0b0      	beq.n	2400f8de <f_close+0x16>
2400f97c:	88a2      	ldrh	r2, [r4, #4]
2400f97e:	88eb      	ldrh	r3, [r5, #6]
2400f980:	429a      	cmp	r2, r3
2400f982:	d1ac      	bne.n	2400f8de <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f984:	7868      	ldrb	r0, [r5, #1]
2400f986:	f7fd f965 	bl	2400cc54 <disk_status>
2400f98a:	f010 0001 	ands.w	r0, r0, #1
2400f98e:	d1a6      	bne.n	2400f8de <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400f990:	6923      	ldr	r3, [r4, #16]
2400f992:	3b01      	subs	r3, #1
2400f994:	2b01      	cmp	r3, #1
2400f996:	d81c      	bhi.n	2400f9d2 <f_close+0x10a>
		n = Files[i].ctr;
2400f998:	4912      	ldr	r1, [pc, #72]	; (2400f9e4 <f_close+0x11c>)
2400f99a:	011d      	lsls	r5, r3, #4
2400f99c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400f9a0:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400f9a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400f9a6:	d016      	beq.n	2400f9d6 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
2400f9a8:	b1b2      	cbz	r2, 2400f9d8 <f_close+0x110>
2400f9aa:	3a01      	subs	r2, #1
2400f9ac:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400f9ae:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f9b0:	b192      	cbz	r2, 2400f9d8 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
2400f9b2:	2300      	movs	r3, #0
2400f9b4:	6023      	str	r3, [r4, #0]
}
2400f9b6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f9b8:	2301      	movs	r3, #1
2400f9ba:	6a22      	ldr	r2, [r4, #32]
2400f9bc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400f9c0:	7868      	ldrb	r0, [r5, #1]
2400f9c2:	f7fd f971 	bl	2400cca8 <disk_write>
2400f9c6:	b950      	cbnz	r0, 2400f9de <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f9c8:	7d23      	ldrb	r3, [r4, #20]
2400f9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f9ce:	7523      	strb	r3, [r4, #20]
2400f9d0:	e794      	b.n	2400f8fc <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400f9d2:	2002      	movs	r0, #2
}
2400f9d4:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400f9d6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f9d8:	2300      	movs	r3, #0
2400f9da:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
2400f9dc:	e7e9      	b.n	2400f9b2 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f9de:	2001      	movs	r0, #1
}
2400f9e0:	bd70      	pop	{r4, r5, r6, pc}
2400f9e2:	bf00      	nop
2400f9e4:	2001d8fc 	.word	0x2001d8fc

2400f9e8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f9ea:	b150      	cbz	r0, 2400fa02 <f_findnext+0x1a>
2400f9ec:	4605      	mov	r5, r0
2400f9ee:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400f9f0:	4c39      	ldr	r4, [pc, #228]	; (2400fad8 <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f9f2:	682b      	ldr	r3, [r5, #0]
2400f9f4:	b12b      	cbz	r3, 2400fa02 <f_findnext+0x1a>
2400f9f6:	781a      	ldrb	r2, [r3, #0]
2400f9f8:	b11a      	cbz	r2, 2400fa02 <f_findnext+0x1a>
2400f9fa:	88a9      	ldrh	r1, [r5, #4]
2400f9fc:	88da      	ldrh	r2, [r3, #6]
2400f9fe:	4291      	cmp	r1, r2
2400fa00:	d002      	beq.n	2400fa08 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2400fa02:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400fa04:	4638      	mov	r0, r7
2400fa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fa08:	7858      	ldrb	r0, [r3, #1]
2400fa0a:	f7fd f923 	bl	2400cc54 <disk_status>
2400fa0e:	07c3      	lsls	r3, r0, #31
2400fa10:	d4f7      	bmi.n	2400fa02 <f_findnext+0x1a>
		if (!fno) {
2400fa12:	2e00      	cmp	r6, #0
2400fa14:	d058      	beq.n	2400fac8 <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
2400fa16:	4628      	mov	r0, r5
2400fa18:	f7fd fdd8 	bl	2400d5cc <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400fa1c:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400fa20:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400fa22:	d1ef      	bne.n	2400fa04 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
2400fa24:	4631      	mov	r1, r6
2400fa26:	4628      	mov	r0, r5
2400fa28:	f7fd fa1e 	bl	2400ce68 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400fa2c:	4628      	mov	r0, r5
2400fa2e:	f7fd fd87 	bl	2400d540 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400fa32:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400fa36:	d14d      	bne.n	2400fad4 <f_findnext+0xec>
2400fa38:	7db3      	ldrb	r3, [r6, #22]
2400fa3a:	2b00      	cmp	r3, #0
2400fa3c:	d0e2      	beq.n	2400fa04 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400fa3e:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2400fa42:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2400fa46:	e00f      	b.n	2400fa68 <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa48:	3a20      	subs	r2, #32
2400fa4a:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fa4c:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa50:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fa54:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa56:	f1be 0f19 	cmp.w	lr, #25
2400fa5a:	d817      	bhi.n	2400fa8c <f_findnext+0xa4>
2400fa5c:	3b20      	subs	r3, #32
2400fa5e:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400fa60:	4293      	cmp	r3, r2
2400fa62:	d1c6      	bne.n	2400f9f2 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400fa64:	2b00      	cmp	r3, #0
2400fa66:	d0cd      	beq.n	2400fa04 <f_findnext+0x1c>
2400fa68:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400fa6a:	f81c 3b01 	ldrb.w	r3, [ip], #1
2400fa6e:	2b3f      	cmp	r3, #63	; 0x3f
2400fa70:	d012      	beq.n	2400fa98 <f_findnext+0xb0>
2400fa72:	2b2a      	cmp	r3, #42	; 0x2a
2400fa74:	d010      	beq.n	2400fa98 <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa76:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400fa7a:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400fa7c:	2819      	cmp	r0, #25
2400fa7e:	d9e3      	bls.n	2400fa48 <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400fa80:	2a7f      	cmp	r2, #127	; 0x7f
2400fa82:	d9e3      	bls.n	2400fa4c <f_findnext+0x64>
2400fa84:	4423      	add	r3, r4
2400fa86:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400fa8a:	e7df      	b.n	2400fa4c <f_findnext+0x64>
2400fa8c:	2b7f      	cmp	r3, #127	; 0x7f
2400fa8e:	d9e7      	bls.n	2400fa60 <f_findnext+0x78>
2400fa90:	4420      	add	r0, r4
2400fa92:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2400fa96:	e7e3      	b.n	2400fa60 <f_findnext+0x78>
2400fa98:	4694      	mov	ip, r2
				nm = nx = 0;
2400fa9a:	2300      	movs	r3, #0
2400fa9c:	f81c eb01 	ldrb.w	lr, [ip], #1
2400faa0:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400faa2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400faa6:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2400faa8:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400faac:	bf0c      	ite	eq
2400faae:	3201      	addeq	r2, #1
2400fab0:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400fab2:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400fab6:	d0f4      	beq.n	2400faa2 <f_findnext+0xba>
2400fab8:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2400fabc:	d0f1      	beq.n	2400faa2 <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400fabe:	f7fd f95d 	bl	2400cd7c <pattern_matching>
2400fac2:	2800      	cmp	r0, #0
2400fac4:	d095      	beq.n	2400f9f2 <f_findnext+0xa>
2400fac6:	e79d      	b.n	2400fa04 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fac8:	4631      	mov	r1, r6
2400faca:	4628      	mov	r0, r5
}
2400facc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400fad0:	f7fe b8be 	b.w	2400dc50 <dir_sdi>
2400fad4:	4607      	mov	r7, r0
2400fad6:	e795      	b.n	2400fa04 <f_findnext+0x1c>
2400fad8:	24017fe8 	.word	0x24017fe8

2400fadc <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400fadc:	b570      	push	{r4, r5, r6, lr}
2400fade:	b082      	sub	sp, #8
2400fae0:	4615      	mov	r5, r2
2400fae2:	4604      	mov	r4, r0
2400fae4:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400fae6:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2400fae8:	2200      	movs	r2, #0
2400faea:	a901      	add	r1, sp, #4
2400faec:	4668      	mov	r0, sp
2400faee:	9500      	str	r5, [sp, #0]
2400faf0:	f7fd fab4 	bl	2400d05c <find_volume>
	if (res == FR_OK) {
2400faf4:	b118      	cbz	r0, 2400fafe <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400faf6:	2300      	movs	r3, #0
2400faf8:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400fafa:	b002      	add	sp, #8
2400fafc:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400fafe:	e9dd 1300 	ldrd	r1, r3, [sp]
2400fb02:	4620      	mov	r0, r4
		obj->fs = fs;
2400fb04:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400fb06:	f7fe fb05 	bl	2400e114 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400fb0a:	bb08      	cbnz	r0, 2400fb50 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400fb0c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
2400fb10:	2b00      	cmp	r3, #0
2400fb12:	db25      	blt.n	2400fb60 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400fb14:	79a3      	ldrb	r3, [r4, #6]
2400fb16:	06db      	lsls	r3, r3, #27
2400fb18:	d520      	bpl.n	2400fb5c <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400fb1a:	9b01      	ldr	r3, [sp, #4]
2400fb1c:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2400fb1e:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
2400fb20:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
2400fb22:	2803      	cmp	r0, #3
2400fb24:	d102      	bne.n	2400fb2c <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400fb26:	8a89      	ldrh	r1, [r1, #20]
2400fb28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400fb2c:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
2400fb2e:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400fb30:	2100      	movs	r1, #0
2400fb32:	4620      	mov	r0, r4
				obj->id = fs->id;
2400fb34:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400fb36:	f7fe f88b 	bl	2400dc50 <dir_sdi>
				if (res == FR_OK) {
2400fb3a:	b948      	cbnz	r0, 2400fb50 <f_findfirst+0x74>
					if (obj->sclust) {
2400fb3c:	68a3      	ldr	r3, [r4, #8]
2400fb3e:	b98b      	cbnz	r3, 2400fb64 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400fb40:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2400fb42:	4631      	mov	r1, r6
2400fb44:	4620      	mov	r0, r4
}
2400fb46:	b002      	add	sp, #8
2400fb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2400fb4c:	f7ff bf4c 	b.w	2400f9e8 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400fb50:	2804      	cmp	r0, #4
2400fb52:	d1d0      	bne.n	2400faf6 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400fb54:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400fb56:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400fb58:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2400fb5a:	e7ce      	b.n	2400fafa <f_findfirst+0x1e>
					res = FR_NO_PATH;
2400fb5c:	2005      	movs	r0, #5
2400fb5e:	e7ca      	b.n	2400faf6 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400fb60:	9b01      	ldr	r3, [sp, #4]
2400fb62:	e7e4      	b.n	2400fb2e <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400fb64:	4601      	mov	r1, r0
2400fb66:	4620      	mov	r0, r4
2400fb68:	f7fd f8b8 	bl	2400ccdc <inc_lock>
2400fb6c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400fb6e:	2800      	cmp	r0, #0
2400fb70:	d1e7      	bne.n	2400fb42 <f_findfirst+0x66>
2400fb72:	2012      	movs	r0, #18
2400fb74:	e7bf      	b.n	2400faf6 <f_findfirst+0x1a>
2400fb76:	bf00      	nop

2400fb78 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400fb78:	4b10      	ldr	r3, [pc, #64]	; (2400fbbc <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400fb7a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
2400fb7c:	7a5c      	ldrb	r4, [r3, #9]
2400fb7e:	b9cc      	cbnz	r4, 2400fbb4 <FATFS_LinkDriver+0x3c>
2400fb80:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
2400fb82:	f004 00ff 	and.w	r0, r4, #255	; 0xff
2400fb86:	7a5c      	ldrb	r4, [r3, #9]
2400fb88:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
2400fb8a:	7a5c      	ldrb	r4, [r3, #9]
2400fb8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2400fb90:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
2400fb92:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2400fb94:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
2400fb96:	441c      	add	r4, r3
2400fb98:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
2400fb9a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
2400fb9c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
2400fb9e:	b2e4      	uxtb	r4, r4
2400fba0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2400fba2:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2400fba4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2400fba6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
2400fba8:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
2400fbaa:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
2400fbac:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
2400fbb0:	708b      	strb	r3, [r1, #2]
}
2400fbb2:	4770      	bx	lr
  uint8_t ret = 1;
2400fbb4:	2001      	movs	r0, #1
}
2400fbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fbba:	4770      	bx	lr
2400fbbc:	2001db20 	.word	0x2001db20

2400fbc0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400fbc0:	287f      	cmp	r0, #127	; 0x7f
2400fbc2:	d912      	bls.n	2400fbea <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400fbc4:	b971      	cbnz	r1, 2400fbe4 <ff_convert+0x24>
2400fbc6:	4b0c      	ldr	r3, [pc, #48]	; (2400fbf8 <ff_convert+0x38>)
2400fbc8:	e001      	b.n	2400fbce <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400fbca:	2980      	cmp	r1, #128	; 0x80
2400fbcc:	d00c      	beq.n	2400fbe8 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
2400fbce:	f833 2b02 	ldrh.w	r2, [r3], #2
2400fbd2:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
2400fbd6:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
2400fbd8:	4282      	cmp	r2, r0
2400fbda:	d1f6      	bne.n	2400fbca <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2400fbdc:	f10c 0080 	add.w	r0, ip, #128	; 0x80
2400fbe0:	b280      	uxth	r0, r0
2400fbe2:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400fbe4:	28ff      	cmp	r0, #255	; 0xff
2400fbe6:	d901      	bls.n	2400fbec <ff_convert+0x2c>
2400fbe8:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400fbea:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400fbec:	4b02      	ldr	r3, [pc, #8]	; (2400fbf8 <ff_convert+0x38>)
2400fbee:	3880      	subs	r0, #128	; 0x80
2400fbf0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400fbf4:	4770      	bx	lr
2400fbf6:	bf00      	nop
2400fbf8:	24018078 	.word	0x24018078

2400fbfc <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400fbfc:	4b22      	ldr	r3, [pc, #136]	; (2400fc88 <ff_wtoupper+0x8c>)
2400fbfe:	4a23      	ldr	r2, [pc, #140]	; (2400fc8c <ff_wtoupper+0x90>)
2400fc00:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400fc04:	bf28      	it	cs
2400fc06:	4613      	movcs	r3, r2
{
2400fc08:	b510      	push	{r4, lr}
2400fc0a:	3304      	adds	r3, #4
2400fc0c:	e001      	b.n	2400fc12 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400fc0e:	3304      	adds	r3, #4
2400fc10:	b1da      	cbz	r2, 2400fc4a <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
2400fc12:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
2400fc16:	461c      	mov	r4, r3
2400fc18:	b1b1      	cbz	r1, 2400fc48 <ff_wtoupper+0x4c>
2400fc1a:	4288      	cmp	r0, r1
2400fc1c:	d314      	bcc.n	2400fc48 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400fc1e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2400fc22:	fa5f fc82 	uxtb.w	ip, r2
2400fc26:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
2400fc28:	eb0c 0e01 	add.w	lr, ip, r1
2400fc2c:	4570      	cmp	r0, lr
2400fc2e:	daee      	bge.n	2400fc0e <ff_wtoupper+0x12>
			switch (cmd) {
2400fc30:	2a08      	cmp	r2, #8
2400fc32:	d809      	bhi.n	2400fc48 <ff_wtoupper+0x4c>
2400fc34:	e8df f002 	tbb	[pc, r2]
2400fc38:	19161005 	.word	0x19161005
2400fc3c:	25221f1c 	.word	0x25221f1c
2400fc40:	0c          	.byte	0x0c
2400fc41:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
2400fc42:	1a41      	subs	r1, r0, r1
2400fc44:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
2400fc48:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
2400fc4a:	eb04 034c 	add.w	r3, r4, ip, lsl #1
2400fc4e:	e7dc      	b.n	2400fc0a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2400fc50:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
2400fc54:	b280      	uxth	r0, r0
}
2400fc56:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2400fc58:	1a43      	subs	r3, r0, r1
2400fc5a:	f003 0301 	and.w	r3, r3, #1
2400fc5e:	1ac0      	subs	r0, r0, r3
2400fc60:	b280      	uxth	r0, r0
}
2400fc62:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
2400fc64:	3810      	subs	r0, #16
2400fc66:	b280      	uxth	r0, r0
}
2400fc68:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2400fc6a:	3820      	subs	r0, #32
2400fc6c:	b280      	uxth	r0, r0
}
2400fc6e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
2400fc70:	3830      	subs	r0, #48	; 0x30
2400fc72:	b280      	uxth	r0, r0
}
2400fc74:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2400fc76:	381a      	subs	r0, #26
2400fc78:	b280      	uxth	r0, r0
}
2400fc7a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
2400fc7c:	3008      	adds	r0, #8
2400fc7e:	b280      	uxth	r0, r0
}
2400fc80:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
2400fc82:	3850      	subs	r0, #80	; 0x50
2400fc84:	b280      	uxth	r0, r0
}
2400fc86:	bd10      	pop	{r4, pc}
2400fc88:	24018178 	.word	0x24018178
2400fc8c:	2401836c 	.word	0x2401836c

2400fc90 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
2400fc90:	b538      	push	{r3, r4, r5, lr}
2400fc92:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2400fc96:	680d      	ldr	r5, [r1, #0]
{
2400fc98:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fc9a:	2010      	movs	r0, #16
{
2400fc9c:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fca0:	4629      	mov	r1, r5
2400fca2:	f003 f8b1 	bl	24012e08 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400fca6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
2400fcaa:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fcac:	6020      	str	r0, [r4, #0]
    p->mempool = m;
2400fcae:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
2400fcb0:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
2400fcb4:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2400fcb6:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
2400fcba:	edc0 7a02 	vstr	s15, [r0, #8]
}
2400fcbe:	ecbd 8b02 	vpop	{d8}
2400fcc2:	bd38      	pop	{r3, r4, r5, pc}

2400fcc4 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
2400fcc4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
2400fcc6:	6801      	ldr	r1, [r0, #0]
2400fcc8:	f003 b960 	b.w	24012f8c <mpool_free>

2400fccc <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
2400fccc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400fcd0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400fcec <tPowerFollower_setFactor+0x20>
2400fcd4:	6803      	ldr	r3, [r0, #0]
2400fcd6:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
2400fcda:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400fcde:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
2400fce2:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2400fce6:	edc3 7a02 	vstr	s15, [r3, #8]
}
2400fcea:	4770      	bx	lr
2400fcec:	00000000 	.word	0x00000000

2400fcf0 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
2400fcf0:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
2400fcf2:	ee60 7a00 	vmul.f32	s15, s0, s0
2400fcf6:	edd3 6a03 	vldr	s13, [r3, #12]
2400fcfa:	ed93 0a02 	vldr	s0, [r3, #8]
2400fcfe:	ed93 7a01 	vldr	s14, [r3, #4]
2400fd02:	ee20 0a26 	vmul.f32	s0, s0, s13
2400fd06:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fd0a:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
2400fd0e:	4770      	bx	lr

2400fd10 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400fd10:	b570      	push	{r4, r5, r6, lr}
2400fd12:	460d      	mov	r5, r1
2400fd14:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fd16:	202c      	movs	r0, #44	; 0x2c
{
2400fd18:	ed2d 8b02 	vpush	{d8}
2400fd1c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400fd1e:	6811      	ldr	r1, [r2, #0]
{
2400fd20:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fd24:	9101      	str	r1, [sp, #4]
2400fd26:	f003 f86f 	bl	24012e08 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400fd2a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2400fd2e:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fd30:	6030      	str	r0, [r6, #0]
2400fd32:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
2400fd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
2400fd38:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2400fd3a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fd3c:	eef4 7ac8 	vcmpe.f32	s15, s16
2400fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd44:	d550      	bpl.n	2400fde8 <tLinearDelay_initToPool+0xd8>
2400fd46:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fd4a:	00a8      	lsls	r0, r5, #2
2400fd4c:	f003 f85c 	bl	24012e08 <mpool_alloc>

    d->gain = 1.0f;
2400fd50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
2400fd54:	ed9f 0a29 	vldr	s0, [pc, #164]	; 2400fdfc <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
2400fd58:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400fd5a:	6062      	str	r2, [r4, #4]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fd5c:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
2400fd5e:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
2400fd62:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd66:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
2400fd6a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
2400fd6e:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd70:	edd5 7a07 	vldr	s15, [r5, #28]
2400fd74:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400fd78:	f01d fcea 	bl	2402d750 <__LEAF_clip_veneer>

    Lfloat outPointer = d->inPoint - d->delay;
2400fd7c:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd80:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd84:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
2400fd88:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd8a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400fd8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd96:	d50a      	bpl.n	2400fdae <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
2400fd98:	ee07 2a90 	vmov	s15, r2
2400fd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400fda0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400fda4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400fda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fdac:	d4f8      	bmi.n	2400fda0 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
2400fdae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400fdb2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
2400fdb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fdba:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fdbe:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2400fdc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
2400fdc4:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400fdc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400fdca:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2400fdce:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2400fdd2:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400fdd6:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fdda:	d101      	bne.n	2400fde0 <tLinearDelay_initToPool+0xd0>
2400fddc:	2300      	movs	r3, #0
2400fdde:	61ab      	str	r3, [r5, #24]
}
2400fde0:	b002      	add	sp, #8
2400fde2:	ecbd 8b02 	vpop	{d8}
2400fde6:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
2400fde8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400fdec:	2300      	movs	r3, #0
2400fdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fdf2:	bf4c      	ite	mi
2400fdf4:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
2400fdf6:	ed80 8a08 	vstrpl	s16, [r0, #32]
2400fdfa:	e7a6      	b.n	2400fd4a <tLinearDelay_initToPool+0x3a>
2400fdfc:	00000000 	.word	0x00000000

2400fe00 <tLinearDelay_free>:
{
2400fe00:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400fe02:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
2400fe04:	6821      	ldr	r1, [r4, #0]
2400fe06:	68a0      	ldr	r0, [r4, #8]
2400fe08:	f003 f8c0 	bl	24012f8c <mpool_free>
    mpool_free((char*)d, d->mempool);
2400fe0c:	6821      	ldr	r1, [r4, #0]
2400fe0e:	4620      	mov	r0, r4
}
2400fe10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
2400fe14:	f003 b8ba 	b.w	24012f8c <mpool_free>

2400fe18 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
2400fe18:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fe1a:	69cb      	ldr	r3, [r1, #28]
2400fe1c:	b14b      	cbz	r3, 2400fe32 <tLinearDelay_clear+0x1a>
2400fe1e:	2300      	movs	r3, #0
        d->buff[i] = 0;
2400fe20:	2000      	movs	r0, #0
2400fe22:	688a      	ldr	r2, [r1, #8]
2400fe24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fe28:	3301      	adds	r3, #1
        d->buff[i] = 0;
2400fe2a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fe2c:	69ca      	ldr	r2, [r1, #28]
2400fe2e:	429a      	cmp	r2, r3
2400fe30:	d8f7      	bhi.n	2400fe22 <tLinearDelay_clear+0xa>
}
2400fe32:	4770      	bx	lr

2400fe34 <tLinearDelay_tick>:
    _tLinearDelay* d = *dl;
2400fe34:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fe36:	edd3 7a01 	vldr	s15, [r3, #4]
2400fe3a:	6959      	ldr	r1, [r3, #20]
2400fe3c:	689a      	ldr	r2, [r3, #8]
2400fe3e:	ee27 0a80 	vmul.f32	s0, s15, s0
2400fe42:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fe46:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fe4a:	695a      	ldr	r2, [r3, #20]
2400fe4c:	69d9      	ldr	r1, [r3, #28]
2400fe4e:	3201      	adds	r2, #1
2400fe50:	428a      	cmp	r2, r1
2400fe52:	615a      	str	r2, [r3, #20]
2400fe54:	d101      	bne.n	2400fe5a <tLinearDelay_tick+0x26>
2400fe56:	2200      	movs	r2, #0
2400fe58:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
2400fe5a:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe5c:	6898      	ldr	r0, [r3, #8]
2400fe5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400fe62:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
2400fe66:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe68:	ed9c 0a00 	vldr	s0, [ip]
    if ((idx + 1) < d->maxDelay)
2400fe6c:	4291      	cmp	r1, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fe6e:	ee20 0a27 	vmul.f32	s0, s0, s15
2400fe72:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400fe76:	d909      	bls.n	2400fe8c <tLinearDelay_tick+0x58>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe78:	ed9c 7a01 	vldr	s14, [ip, #4]
2400fe7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe80:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fe82:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fe86:	ed83 0a03 	vstr	s0, [r3, #12]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe8a:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400fe8c:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe90:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
2400fe92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fe96:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400fe98:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fe9c:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fea0:	4770      	bx	lr
2400fea2:	bf00      	nop

2400fea4 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
2400fea4:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fea6:	edd3 7a01 	vldr	s15, [r3, #4]
2400feaa:	6959      	ldr	r1, [r3, #20]
2400feac:	689a      	ldr	r2, [r3, #8]
2400feae:	ee27 0a80 	vmul.f32	s0, s15, s0
2400feb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400feb6:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400feba:	695a      	ldr	r2, [r3, #20]
2400febc:	69d9      	ldr	r1, [r3, #28]
2400febe:	3201      	adds	r2, #1
2400fec0:	428a      	cmp	r2, r1
2400fec2:	615a      	str	r2, [r3, #20]
2400fec4:	d101      	bne.n	2400feca <tLinearDelay_tickIn+0x26>
2400fec6:	2200      	movs	r2, #0
2400fec8:	615a      	str	r2, [r3, #20]
}
2400feca:	4770      	bx	lr

2400fecc <tLinearDelay_tickOut>:
{
2400fecc:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2400fece:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
2400fed0:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fed2:	6899      	ldr	r1, [r3, #8]
2400fed4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400fed8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
2400fedc:	69dc      	ldr	r4, [r3, #28]
2400fede:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fee0:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
2400fee4:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fee6:	ee20 0a27 	vmul.f32	s0, s0, s15
2400feea:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400feee:	d20b      	bcs.n	2400ff08 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fef0:	ed90 7a01 	vldr	s14, [r0, #4]
2400fef4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fef8:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fefa:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fefe:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400ff02:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ff06:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400ff08:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400ff0c:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
2400ff0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400ff12:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400ff14:	eea7 0a27 	vfma.f32	s0, s14, s15
2400ff18:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400ff1c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ff20:	4770      	bx	lr
2400ff22:	bf00      	nop

2400ff24 <tLinearDelay_setDelay>:
{
2400ff24:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400ff26:	6804      	ldr	r4, [r0, #0]
{
2400ff28:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400ff2c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 2400ffa4 <tLinearDelay_setDelay+0x80>
2400ff30:	edd4 7a07 	vldr	s15, [r4, #28]
2400ff34:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400ff38:	f01d fc0a 	bl	2402d750 <__LEAF_clip_veneer>
    Lfloat outPointer = d->inPoint - d->delay;
2400ff3c:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400ff40:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400ff44:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
2400ff48:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400ff4a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400ff4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400ff52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff56:	d50a      	bpl.n	2400ff6e <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
2400ff58:	ee07 2a90 	vmov	s15, r2
2400ff5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400ff60:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400ff64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400ff68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff6c:	d4f8      	bmi.n	2400ff60 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
2400ff6e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400ff72:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
2400ff76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff7a:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff7e:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2400ff80:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
2400ff84:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400ff8a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2400ff8e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2400ff92:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400ff96:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff9a:	d000      	beq.n	2400ff9e <tLinearDelay_setDelay+0x7a>
}
2400ff9c:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400ff9e:	2300      	movs	r3, #0
2400ffa0:	61a3      	str	r3, [r4, #24]
}
2400ffa2:	bd10      	pop	{r4, pc}
2400ffa4:	00000000 	.word	0x00000000

2400ffa8 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400ffa8:	b570      	push	{r4, r5, r6, lr}
2400ffaa:	460d      	mov	r5, r1
2400ffac:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ffae:	2030      	movs	r0, #48	; 0x30
{
2400ffb0:	ed2d 8b02 	vpush	{d8}
2400ffb4:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400ffb6:	6811      	ldr	r1, [r2, #0]
{
2400ffb8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ffbc:	9101      	str	r1, [sp, #4]
2400ffbe:	f002 ff23 	bl	24012e08 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400ffc2:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2400ffc6:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400ffc8:	6030      	str	r0, [r6, #0]
2400ffca:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
2400ffcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
2400ffd0:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2400ffd2:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400ffd4:	eef4 7ac8 	vcmpe.f32	s15, s16
2400ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ffdc:	d558      	bpl.n	24010090 <tHermiteDelay_initToPool+0xe8>
2400ffde:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2400ffe2:	2d00      	cmp	r5, #0
2400ffe4:	d14f      	bne.n	24010086 <tHermiteDelay_initToPool+0xde>
2400ffe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
2400ffea:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
2400ffee:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
2400fff2:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2400fff6:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2400fffa:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
2400fffe:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
24010000:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
24010002:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010004:	00a8      	lsls	r0, r5, #2
24010006:	f002 feff 	bl	24012e08 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
2401000a:	2300      	movs	r3, #0
    d->gain = 1.0f;
2401000c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010010:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
24010012:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
24010014:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
24010016:	2300      	movs	r3, #0
    d->gain = 1.0f;
24010018:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
2401001a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
2401001e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, Lfloat delay)
{
    _tHermiteDelay* d = *dl;
24010022:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay;
24010024:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
24010028:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
2401002c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010030:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
24010034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401003c:	d50a      	bpl.n	24010054 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
2401003e:	ed93 7a07 	vldr	s14, [r3, #28]
24010042:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010046:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2401004a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401004e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010052:	d4f8      	bmi.n	24010046 <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
24010054:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
24010058:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
2401005a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2401005e:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
24010062:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
24010066:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
2401006a:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
2401006c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
24010070:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
24010074:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
24010076:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
2401007a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
2401007e:	b002      	add	sp, #8
24010080:	ecbd 8b02 	vpop	{d8}
24010084:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010086:	1e6b      	subs	r3, r5, #1
24010088:	422b      	tst	r3, r5
2401008a:	461a      	mov	r2, r3
2401008c:	d1ad      	bne.n	2400ffea <tHermiteDelay_initToPool+0x42>
2401008e:	e7b8      	b.n	24010002 <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
24010090:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24010094:	2300      	movs	r3, #0
24010096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401009a:	bf4c      	ite	mi
2401009c:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
2401009e:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
240100a2:	e79e      	b.n	2400ffe2 <tHermiteDelay_initToPool+0x3a>

240100a4 <tHermiteDelay_free>:
{
240100a4:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
240100a6:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
240100a8:	e9d4 1000 	ldrd	r1, r0, [r4]
240100ac:	f002 ff6e 	bl	24012f8c <mpool_free>
    mpool_free((char*)d, d->mempool);
240100b0:	6821      	ldr	r1, [r4, #0]
240100b2:	4620      	mov	r0, r4
}
240100b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
240100b8:	f002 bf68 	b.w	24012f8c <mpool_free>

240100bc <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
240100bc:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240100be:	69cb      	ldr	r3, [r1, #28]
240100c0:	b14b      	cbz	r3, 240100d6 <tHermiteDelay_clear+0x1a>
240100c2:	2300      	movs	r3, #0
        d->buff[i] = 0;
240100c4:	2000      	movs	r0, #0
240100c6:	684a      	ldr	r2, [r1, #4]
240100c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
240100cc:	3301      	adds	r3, #1
        d->buff[i] = 0;
240100ce:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240100d0:	69ca      	ldr	r2, [r1, #28]
240100d2:	429a      	cmp	r2, r3
240100d4:	d8f7      	bhi.n	240100c6 <tHermiteDelay_clear+0xa>
}
240100d6:	4770      	bx	lr

240100d8 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
240100d8:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
240100da:	6959      	ldr	r1, [r3, #20]
240100dc:	685a      	ldr	r2, [r3, #4]
240100de:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240100e2:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
240100e6:	695a      	ldr	r2, [r3, #20]
240100e8:	6899      	ldr	r1, [r3, #8]
240100ea:	3201      	adds	r2, #1
240100ec:	400a      	ands	r2, r1
240100ee:	615a      	str	r2, [r3, #20]
}
240100f0:	4770      	bx	lr
240100f2:	bf00      	nop

240100f4 <tHermiteDelay_tickOut>:
{
240100f4:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
240100f6:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
240100f8:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
240100fa:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
240100fe:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010100:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
24010104:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401010a:	edd3 1a00 	vldr	s3, [r3]
2401010e:	69e3      	ldr	r3, [r4, #28]
24010110:	440b      	add	r3, r1
24010112:	3b01      	subs	r3, #1
24010114:	4003      	ands	r3, r0
24010116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401011a:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
2401011e:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010120:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
24010124:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
24010126:	edd1 0a00 	vldr	s1, [r1]
2401012a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401012e:	ed92 1a00 	vldr	s2, [r2]
24010132:	f002 fd7d 	bl	24012c30 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010136:	69a3      	ldr	r3, [r4, #24]
24010138:	68a2      	ldr	r2, [r4, #8]
2401013a:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2401013c:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010140:	4013      	ands	r3, r2
24010142:	61a3      	str	r3, [r4, #24]
}
24010144:	bd10      	pop	{r4, pc}
24010146:	bf00      	nop

24010148 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
24010148:	6803      	ldr	r3, [r0, #0]
    Lfloat outPointer = d->inPoint - d->delay;
2401014a:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2401014e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
24010152:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010156:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2401015a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010162:	d50a      	bpl.n	2401017a <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
24010164:	edd3 7a07 	vldr	s15, [r3, #28]
24010168:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401016c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
24010170:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010178:	d4f8      	bmi.n	2401016c <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
2401017a:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
2401017e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
24010180:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010184:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
24010188:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
2401018c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
24010190:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
24010192:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
24010196:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
2401019a:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2401019c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
240101a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240101a4:	4770      	bx	lr
240101a6:	bf00      	nop

240101a8 <tHermiteDelay_tapOut>:

Lfloat tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
240101a8:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240101aa:	43c9      	mvns	r1, r1
240101ac:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
240101ae:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240101b2:	4401      	add	r1, r0
240101b4:	4011      	ands	r1, r2
    return d->buff[tap];
240101b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
240101ba:	ed91 0a00 	vldr	s0, [r1]
240101be:	4770      	bx	lr

240101c0 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tHermiteDelay_addTo (tHermiteDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
240101c0:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240101c2:	43c9      	mvns	r1, r1
240101c4:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
240101c6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240101ca:	4401      	add	r1, r0
240101cc:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
240101ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
240101d2:	edd1 7a00 	vldr	s15, [r1]
240101d6:	ee30 0a27 	vadd.f32	s0, s0, s15
240101da:	ed81 0a00 	vstr	s0, [r1]
}
240101de:	4770      	bx	lr

240101e0 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
240101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
240101e2:	698f      	ldr	r7, [r1, #24]
{
240101e4:	4606      	mov	r6, r0
240101e6:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240101e8:	2020      	movs	r0, #32
240101ea:	4639      	mov	r1, r7
240101ec:	f002 fe0c 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
240101f0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
240101f4:	4a10      	ldr	r2, [pc, #64]	; (24010238 <tCrusher_init+0x58>)
    c->op = 4;
240101f6:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
240101f8:	6030      	str	r0, [r6, #0]
240101fa:	4604      	mov	r4, r0
    c->op = 4;
240101fc:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
240101fe:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
24010200:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
24010202:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24010204:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010206:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24010208:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
2401020a:	4629      	mov	r1, r5
2401020c:	f002 fdfc 	bl	24012e08 <mpool_alloc>
    s->invRatio = 1.0f;
24010210:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24010214:	2200      	movs	r2, #0
    s->count = 0;
24010216:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010218:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
2401021a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2401023c <tCrusher_init+0x5c>
    s->mempool = m;
2401021e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
24010220:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
24010222:	6082      	str	r2, [r0, #8]
    s->count = 0;
24010224:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010226:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010240 <tCrusher_init+0x60>
2401022a:	edd4 6a03 	vldr	s13, [r4, #12]
2401022e:	eee6 7a87 	vfma.f32	s15, s13, s14
24010232:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010238:	3951b717 	.word	0x3951b717
2401023c:	3912ccf6 	.word	0x3912ccf6
24010240:	3e99999a 	.word	0x3e99999a

24010244 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24010244:	eddf 7a1e 	vldr	s15, [pc, #120]	; 240102c0 <tCrusher_tick+0x7c>
24010248:	ee20 0a27 	vmul.f32	s0, s0, s15
{
2401024c:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2401024e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24010252:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24010254:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24010258:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401025c:	6960      	ldr	r0, [r4, #20]
2401025e:	05c0      	lsls	r0, r0, #23
24010260:	ee20 0a27 	vmul.f32	s0, s0, s15
24010264:	f002 fb4c 	bl	24012900 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010268:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2401026c:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
24010270:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010274:	f01d fa6c 	bl	2402d750 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
24010278:	edd4 0a04 	vldr	s1, [r4, #16]
2401027c:	f002 fb2e 	bl	240128dc <LEAF_round>
    _tSampleReducer* s = *sr;
24010280:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
24010282:	68da      	ldr	r2, [r3, #12]
24010284:	edd3 7a01 	vldr	s15, [r3, #4]
24010288:	ee07 2a10 	vmov	s14, r2
2401028c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010290:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010298:	dc08      	bgt.n	240102ac <tCrusher_tick+0x68>
    s->count++;
2401029a:	3201      	adds	r2, #1
    return s->hold;
2401029c:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
240102a0:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240102a2:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
240102a6:	ee20 0a27 	vmul.f32	s0, s0, s15
240102aa:	bd10      	pop	{r4, pc}
        s->hold = input;
240102ac:	2201      	movs	r2, #1
240102ae:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
240102b2:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
240102b4:	edd4 7a06 	vldr	s15, [r4, #24]
}
240102b8:	ee20 0a27 	vmul.f32	s0, s0, s15
240102bc:	bd10      	pop	{r4, pc}
240102be:	bf00      	nop
240102c0:	459c4000 	.word	0x459c4000

240102c4 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
240102c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
240102c8:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
240102ca:	ee20 0a27 	vmul.f32	s0, s0, s15
240102ce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240102d2:	ed83 0a05 	vstr	s0, [r3, #20]
}
240102d6:	4770      	bx	lr

240102d8 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
240102d8:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
240102dc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010310 <tCrusher_setQuality+0x38>
240102e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
240102e4:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
240102e6:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
240102e8:	f01d fa32 	bl	2402d750 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
240102ec:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24010314 <tCrusher_setQuality+0x3c>
240102f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 24010318 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240102f4:	eddf 6a09 	vldr	s13, [pc, #36]	; 2401031c <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
240102f8:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
240102fc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010320 <tCrusher_setQuality+0x48>
24010300:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24010304:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010308:	ed84 7a06 	vstr	s14, [r4, #24]
}
2401030c:	bd10      	pop	{r4, pc}
2401030e:	bf00      	nop
24010310:	00000000 	.word	0x00000000
24010314:	459c4000 	.word	0x459c4000
24010318:	3c23d70a 	.word	0x3c23d70a
2401031c:	3912ccf6 	.word	0x3912ccf6
24010320:	3e99999a 	.word	0x3e99999a

24010324 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24010324:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24010326:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401032a:	4770      	bx	lr

2401032c <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2401032c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
24010330:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24010332:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010336:	eeb4 0a67 	vcmp.f32	s0, s15
2401033a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401033e:	d809      	bhi.n	24010354 <tCrusher_setSamplingRatio+0x28>
24010340:	eeb5 0a40 	vcmp.f32	s0, #0.0
24010344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010348:	db04      	blt.n	24010354 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2401034a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
2401034e:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24010350:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24010354:	4770      	bx	lr
24010356:	bf00      	nop

24010358 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24010358:	b570      	push	{r4, r5, r6, lr}
2401035a:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401035e:	698d      	ldr	r5, [r1, #24]
{
24010360:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010362:	206c      	movs	r0, #108	; 0x6c
24010364:	4629      	mov	r1, r5
24010366:	f002 fd4f 	bl	24012e08 <mpool_alloc>
2401036a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401036c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401036e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
24010372:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010374:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010376:	ed93 8a00 	vldr	s16, [r3]
2401037a:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401037e:	ee80 0a08 	vdiv.f32	s0, s0, s16
24010382:	f005 fb89 	bl	24015a98 <expf>
24010386:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
2401038a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
2401038e:	ee87 0a88 	vdiv.f32	s0, s15, s16
24010392:	f005 fb81 	bl	24015a98 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
24010396:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
2401039a:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
2401039c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
240103a0:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
240103a2:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240103a4:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
240103a6:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
240103a8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
240103ac:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
240103ae:	62e3      	str	r3, [r4, #44]	; 0x2c
240103b0:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
240103b2:	6363      	str	r3, [r4, #52]	; 0x34
240103b4:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
240103b6:	63e3      	str	r3, [r4, #60]	; 0x3c
240103b8:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240103ba:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
240103bc:	4905      	ldr	r1, [pc, #20]	; (240103d4 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
240103be:	4b06      	ldr	r3, [pc, #24]	; (240103d8 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240103c0:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
240103c4:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
240103c6:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
240103c8:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240103ca:	6223      	str	r3, [r4, #32]
}
240103cc:	ecbd 8b02 	vpop	{d8}
240103d0:	bd70      	pop	{r4, r5, r6, pc}
240103d2:	bf00      	nop
240103d4:	40400000 	.word	0x40400000
240103d8:	3e2aaaab 	.word	0x3e2aaaab

240103dc <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
240103dc:	b510      	push	{r4, lr}
240103de:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
240103e2:	6804      	ldr	r4, [r0, #0]
{
240103e4:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
240103e8:	f002 f9f4 	bl	240127d4 <fastabsf>
240103ec:	f002 fca0 	bl	24012d30 <fasteratodb>
240103f0:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 240104a4 <tCompressor_tick+0xc8>
240103f4:	eef0 0a40 	vmov.f32	s1, s0
240103f8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240104a8 <tCompressor_tick+0xcc>
240103fc:	f01d f9a8 	bl	2402d750 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
24010400:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
24010404:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
24010408:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
2401040c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
24010410:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
24010414:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
24010418:	eef4 7ac7 	vcmpe.f32	s15, s14
2401041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010420:	db23      	blt.n	2401046a <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
24010422:	2300      	movs	r3, #0
24010424:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 240104a4 <tCompressor_tick+0xc8>
24010428:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
2401042a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401042e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24010432:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
24010436:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
2401043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401043e:	bf4c      	ite	mi
24010440:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24010444:	ed94 6a02 	vldrpl	s12, [r4, #8]
24010448:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401044c:	ee67 7a87 	vmul.f32	s15, s15, s14
24010450:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
24010454:	ee30 0a67 	vsub.f32	s0, s0, s15
24010458:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
2401045c:	f002 fc9c 	bl	24012d98 <fasterdbtoa>
    return attenuation * in;
}
24010460:	ee28 0a00 	vmul.f32	s0, s16, s0
24010464:	ecbd 8b02 	vpop	{d8}
24010468:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401046a:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
2401046e:	edd4 5a07 	vldr	s11, [r4, #28]
24010472:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
2401047a:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401047e:	dd0c      	ble.n	2401049a <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010480:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
24010484:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
24010488:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401048a:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
2401048e:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010490:	ee67 7a87 	vmul.f32	s15, s15, s14
24010494:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
24010498:	e7c7      	b.n	2401042a <tCompressor_tick+0x4e>
        c->isActive = 1;
2401049a:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
2401049c:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
240104a0:	6463      	str	r3, [r4, #68]	; 0x44
240104a2:	e7c2      	b.n	2401042a <tCompressor_tick+0x4e>
240104a4:	00000000 	.word	0x00000000
240104a8:	c2b40000 	.word	0xc2b40000

240104ac <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
240104ac:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240104ae:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
240104b2:	6800      	ldr	r0, [r0, #0]
{
240104b4:	eef0 7a40 	vmov.f32	s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240104b8:	ee07 3a10 	vmov	s14, r3
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240104bc:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbTableSizeMinus1 = atodbTableSize-1;
240104c0:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240104c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
{
240104c6:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
240104c8:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240104ca:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
240104cc:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240104ce:	ee86 7aa0 	vdiv.f32	s14, s13, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240104d2:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240104d4:	ee67 7a27 	vmul.f32	s15, s14, s15
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240104d8:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240104dc:	edc0 7a17 	vstr	s15, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240104e0:	ee07 3a90 	vmov	s15, r3
240104e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240104e8:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
240104ec:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240104f0:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
240104f4:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
240104f8:	4770      	bx	lr
240104fa:	bf00      	nop

240104fc <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
240104fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
240104fe:	6817      	ldr	r7, [r2, #0]
{
24010500:	4614      	mov	r4, r2
24010502:	4606      	mov	r6, r0
24010504:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24010506:	2018      	movs	r0, #24
24010508:	4639      	mov	r1, r7
{
2401050a:	ed2d 8b02 	vpush	{d8}
2401050e:	eef0 8a40 	vmov.f32	s17, s0
24010512:	b083      	sub	sp, #12
24010514:	eeb0 8a41 	vmov.f32	s16, s2
24010518:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401051c:	f002 fc74 	bl	24012e08 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010520:	4621      	mov	r1, r4
    p->curr=0.0f;
24010522:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24010524:	4604      	mov	r4, r0
24010526:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010528:	ed9d 0a01 	vldr	s0, [sp, #4]
2401052c:	3014      	adds	r0, #20
    p->mempool = m;
2401052e:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24010532:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
24010536:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010538:	f7ff fbaa 	bl	2400fc90 <tPowerFollower_initToPool>
    p->mode=mode;
2401053c:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
2401053e:	ed84 8a02 	vstr	s16, [r4, #8]
}
24010542:	b003      	add	sp, #12
24010544:	ecbd 8b02 	vpop	{d8}
24010548:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401054a:	bf00      	nop

2401054c <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
2401054c:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
2401054e:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
24010550:	f104 0014 	add.w	r0, r4, #20
24010554:	f7ff fbb6 	bl	2400fcc4 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
24010558:	6821      	ldr	r1, [r4, #0]
2401055a:	4620      	mov	r0, r4
}
2401055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24010560:	f002 bd14 	b.w	24012f8c <mpool_free>

24010564 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
24010564:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
24010566:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401056a:	4770      	bx	lr

2401056c <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
2401056c:	6800      	ldr	r0, [r0, #0]
2401056e:	3014      	adds	r0, #20
24010570:	f7ff bbac 	b.w	2400fccc <tPowerFollower_setFactor>

24010574 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24010574:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
24010576:	60d9      	str	r1, [r3, #12]
}
24010578:	4770      	bx	lr
2401057a:	bf00      	nop

2401057c <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
2401057c:	b510      	push	{r4, lr}
2401057e:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24010582:	6804      	ldr	r4, [r0, #0]
{
24010584:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24010588:	f104 0014 	add.w	r0, r4, #20
2401058c:	f7ff fbb0 	bl	2400fcf0 <tPowerFollower_tick>
24010590:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
24010594:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24010596:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401059a:	b91b      	cbnz	r3, 240105a4 <tFeedbackLeveler_tick+0x28>
2401059c:	eddf 7a08 	vldr	s15, [pc, #32]	; 240105c0 <tFeedbackLeveler_tick+0x44>
240105a0:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
240105a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240105a8:	edd4 6a02 	vldr	s13, [r4, #8]
240105ac:	eee6 7ac7 	vfms.f32	s15, s13, s14
240105b0:	ee27 0a88 	vmul.f32	s0, s15, s16
240105b4:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
240105b8:	ecbd 8b02 	vpop	{d8}
240105bc:	bd10      	pop	{r4, pc}
240105be:	bf00      	nop
240105c0:	00000000 	.word	0x00000000

240105c4 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
240105c4:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
240105c6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240105ca:	4770      	bx	lr

240105cc <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
240105cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240105ce:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
240105d2:	699e      	ldr	r6, [r3, #24]
{
240105d4:	4614      	mov	r4, r2
240105d6:	4607      	mov	r7, r0
240105d8:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240105da:	206c      	movs	r0, #108	; 0x6c
240105dc:	4631      	mov	r1, r6
{
240105de:	eef0 9a40 	vmov.f32	s19, s0
240105e2:	eeb0 9a60 	vmov.f32	s18, s1
240105e6:	eeb0 8a41 	vmov.f32	s16, s2
240105ea:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240105ee:	f002 fc0b 	bl	24012e08 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240105f2:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240105f6:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
240105f8:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
240105fa:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240105fc:	eeb8 6a67 	vcvt.f32.u32	s12, s15
24010600:	eddf 7a22 	vldr	s15, [pc, #136]	; 2401068c <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
24010604:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
24010606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401060a:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401060c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010610:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
24010614:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
24010616:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
24010618:	fe88 8a66 	vminnm.f32	s16, s16, s13
2401061c:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
24010620:	2200      	movs	r2, #0
24010622:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 24010690 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010626:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
2401062a:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401062e:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
24010632:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
24010636:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
2401063a:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
2401063e:	edc0 6a19 	vstr	s13, [r0, #100]	; 0x64
    adsr->sustain = sustain;
24010642:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
24010646:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
2401064a:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
2401064c:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->sustain = sustain;
24010650:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->decay = decay;
24010654:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->release = release;
24010658:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401065c:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010660:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010664:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010668:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401066c:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010670:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010674:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010678:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401067c:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24010680:	685b      	ldr	r3, [r3, #4]
24010682:	6683      	str	r3, [r0, #104]	; 0x68
}
24010684:	ecbd 8b04 	vpop	{d8-d9}
24010688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401068a:	bf00      	nop
2401068c:	4479ffff 	.word	0x4479ffff
24010690:	00000000 	.word	0x00000000

24010694 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
24010694:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010698:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2401069a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
2401069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
240106a2:	bf48      	it	mi
240106a4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240106b8 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240106a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
240106ac:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240106b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240106b4:	4770      	bx	lr
240106b6:	bf00      	nop
240106b8:	3c23d70a 	.word	0x3c23d70a

240106bc <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
240106bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240106c0:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240106c2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
240106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
240106ca:	bf48      	it	mi
240106cc:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240106e0 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240106d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
240106d4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240106d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
240106dc:	4770      	bx	lr
240106de:	bf00      	nop
240106e0:	3c23d70a 	.word	0x3c23d70a

240106e4 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
240106e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
240106e8:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
240106ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
240106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240106f2:	dd02      	ble.n	240106fa <tADSRT_setSustain+0x16>
240106f4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
240106f8:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
240106fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240106fe:	2200      	movs	r2, #0
24010700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010704:	bf4c      	ite	mi
24010706:	641a      	strmi	r2, [r3, #64]	; 0x40
    else                     adsr->sustain = sustain;
24010708:	ed83 0a10 	vstrpl	s0, [r3, #64]	; 0x40
}
2401070c:	4770      	bx	lr
2401070e:	bf00      	nop

24010710 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24010710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
24010714:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010716:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
2401071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
2401071e:	bf48      	it	mi
24010720:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 24010734 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010724:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
24010728:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401072c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
24010730:	4770      	bx	lr
24010732:	bf00      	nop
24010734:	3c23d70a 	.word	0x3c23d70a

24010738 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
{
24010738:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
2401073a:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
2401073c:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010758 <tADSRT_setLeakFactor+0x20>
24010740:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
24010744:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24010748:	ee60 0aa7 	vmul.f32	s1, s1, s15
2401074c:	f005 fae0 	bl	24015d10 <powf>
24010750:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
24010754:	bd10      	pop	{r4, pc}
24010756:	bf00      	nop
24010758:	472c4400 	.word	0x472c4400

2401075c <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
{
    _tADSRT* adsr = *adsrenv;
2401075c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
2401075e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010760:	b162      	cbz	r2, 2401077c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
24010762:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
24010764:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
24010766:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24010768:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
2401076a:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
2401076c:	2200      	movs	r2, #0
2401076e:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24010770:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
24010774:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
24010776:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
24010778:	659a      	str	r2, [r3, #88]	; 0x58
}
2401077a:	4770      	bx	lr
        adsr->whichStage = env_attack;
2401077c:	2101      	movs	r1, #1
2401077e:	e7f5      	b.n	2401076c <tADSRT_on+0x10>

24010780 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24010780:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
24010782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010784:	b11a      	cbz	r2, 2401078e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
24010786:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24010788:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
2401078a:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
2401078c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
2401078e:	4770      	bx	lr

24010790 <tADSRT_tick>:

Lfloat   tADSRT_tick(tADSRT* const adsrenv)
{
24010790:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24010792:	6804      	ldr	r4, [r0, #0]
{
24010794:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
24010798:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2401079a:	3b01      	subs	r3, #1
2401079c:	2b04      	cmp	r3, #4
2401079e:	f200 8154 	bhi.w	24010a4a <tADSRT_tick+0x2ba>
240107a2:	e8df f003 	tbb	[pc, r3]
240107a6:	4d1f      	.short	0x4d1f
240107a8:	6f3a      	.short	0x6f3a
240107aa:	03          	.byte	0x03
240107ab:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
240107ac:	edd4 7a03 	vldr	s15, [r4, #12]
240107b0:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
240107b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240107b8:	eeb4 1ae7 	vcmpe.f32	s2, s15
240107bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107c0:	dd7d      	ble.n	240108be <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
240107c2:	eddf 7aa3 	vldr	s15, [pc, #652]	; 24010a50 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
240107c6:	2301      	movs	r3, #1
240107c8:	eeb0 0a67 	vmov.f32	s0, s15
240107cc:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
240107ce:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
240107d2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
240107d6:	ee37 1a81 	vadd.f32	s2, s15, s2
240107da:	ed84 1a17 	vstr	s2, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
240107de:	ecbd 8b02 	vpop	{d8}
240107e2:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
240107e4:	edd4 7a03 	vldr	s15, [r4, #12]
240107e8:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
240107ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
240107f0:	eeb4 1ae7 	vcmpe.f32	s2, s15
240107f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107f8:	f340 808b 	ble.w	24010912 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
240107fc:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
240107fe:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
24010802:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
24010804:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
24010808:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2401080c:	ee37 1a81 	vadd.f32	s2, s15, s2
24010810:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
24010814:	ecbd 8b02 	vpop	{d8}
24010818:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
2401081a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
2401081e:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
24010822:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
24010826:	ee20 0a26 	vmul.f32	s0, s0, s13
2401082a:	edd4 7a07 	vldr	s15, [r4, #28]
2401082e:	ee20 0a07 	vmul.f32	s0, s0, s14
24010832:	ee20 0a27 	vmul.f32	s0, s0, s15
24010836:	ed84 0a06 	vstr	s0, [r4, #24]
}
2401083a:	ecbd 8b02 	vpop	{d8}
2401083e:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24010840:	edd4 7a03 	vldr	s15, [r4, #12]
24010844:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
24010848:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401084c:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010854:	f340 808b 	ble.w	2401096e <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
24010858:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
2401085c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24010860:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010864:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
24010866:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
24010868:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
2401086c:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
2401086e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24010872:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24010876:	ee37 1a81 	vadd.f32	s2, s15, s2
2401087a:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
2401087e:	ecbd 8b02 	vpop	{d8}
24010882:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010884:	edd4 7a03 	vldr	s15, [r4, #12]
24010888:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
2401088c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24010890:	eeb4 1ae7 	vcmpe.f32	s2, s15
24010894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010898:	f340 809e 	ble.w	240109d8 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
2401089c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24010a50 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
240108a0:	2300      	movs	r3, #0
240108a2:	eeb0 0a67 	vmov.f32	s0, s15
240108a6:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
240108a8:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
240108ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
240108b0:	ee37 1a81 	vadd.f32	s2, s15, s2
240108b4:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
}
240108b8:	ecbd 8b02 	vpop	{d8}
240108bc:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240108be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
240108c2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240108c6:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
240108ca:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240108ce:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
240108d2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240108d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240108da:	f100 80b2 	bmi.w	24010a42 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240108de:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240108e2:	6862      	ldr	r2, [r4, #4]
240108e4:	ee17 3a90 	vmov	r3, s15
240108e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240108ec:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
240108f0:	ee16 3a90 	vmov	r3, s13
240108f4:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
240108f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240108fc:	ed92 0a00 	vldr	s0, [r2]
24010900:	f002 f9b8 	bl	24012c74 <LEAF_interpolation_linear>
24010904:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
24010908:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
2401090c:	ed84 0a06 	vstr	s0, [r4, #24]
24010910:	e75f      	b.n	240107d2 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
24010916:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401091a:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
2401091e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24010922:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24010926:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401092e:	f100 8084 	bmi.w	24010a3a <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24010932:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010936:	6862      	ldr	r2, [r4, #4]
24010938:	ee17 3a90 	vmov	r3, s15
2401093c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010940:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24010944:	ee16 3a90 	vmov	r3, s13
24010948:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
2401094c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010950:	ed92 0a00 	vldr	s0, [r2]
24010954:	f002 f98e 	bl	24012c74 <LEAF_interpolation_linear>
24010958:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
2401095c:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24010960:	ee37 0ac0 	vsub.f32	s0, s15, s0
24010964:	ee20 0a08 	vmul.f32	s0, s0, s16
24010968:	ed84 0a06 	vstr	s0, [r4, #24]
2401096c:	e74c      	b.n	24010808 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401096e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24010972:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010976:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
2401097a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401097e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24010982:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24010986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401098a:	d452      	bmi.n	24010a32 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
2401098c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24010990:	6862      	ldr	r2, [r4, #4]
24010992:	ee17 3a90 	vmov	r3, s15
24010996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401099a:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
2401099e:	ee16 3a90 	vmov	r3, s13
240109a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240109a6:	ed92 0a00 	vldr	s0, [r2]
240109aa:	f002 f963 	bl	24012c74 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240109ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240109b2:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
240109b6:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
240109ba:	ee76 6ac7 	vsub.f32	s13, s13, s14
240109be:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
240109c2:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240109c6:	ee67 7a86 	vmul.f32	s15, s15, s12
240109ca:	eea6 7a80 	vfma.f32	s14, s13, s0
240109ce:	ee27 0a87 	vmul.f32	s0, s15, s14
240109d2:	ed84 0a06 	vstr	s0, [r4, #24]
240109d6:	e74c      	b.n	24010872 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240109d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
240109dc:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240109e0:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
240109e4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240109e8:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
240109ec:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240109f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240109f4:	d419      	bmi.n	24010a2a <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
240109f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240109fa:	6862      	ldr	r2, [r4, #4]
240109fc:	ee17 3a90 	vmov	r3, s15
24010a00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24010a04:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24010a08:	ee16 3a90 	vmov	r3, s13
24010a0c:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
24010a10:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24010a14:	ed92 0a00 	vldr	s0, [r2]
24010a18:	f002 f92c 	bl	24012c74 <LEAF_interpolation_linear>
24010a1c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
24010a20:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24010a24:	ed84 0a06 	vstr	s0, [r4, #24]
24010a28:	e740      	b.n	240108ac <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010a2a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010a2c:	eddf 0a08 	vldr	s1, [pc, #32]	; 24010a50 <tADSRT_tick+0x2c0>
24010a30:	e7ea      	b.n	24010a08 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010a32:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010a34:	eddf 0a06 	vldr	s1, [pc, #24]	; 24010a50 <tADSRT_tick+0x2c0>
24010a38:	e7b1      	b.n	2401099e <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010a3a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010a3c:	eddf 0a04 	vldr	s1, [pc, #16]	; 24010a50 <tADSRT_tick+0x2c0>
24010a40:	e780      	b.n	24010944 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24010a42:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24010a44:	eddf 0a02 	vldr	s1, [pc, #8]	; 24010a50 <tADSRT_tick+0x2c0>
24010a48:	e752      	b.n	240108f0 <tADSRT_tick+0x160>
    return adsr->next;
24010a4a:	ed94 0a06 	vldr	s0, [r4, #24]
24010a4e:	e6c6      	b.n	240107de <tADSRT_tick+0x4e>
24010a50:	00000000 	.word	0x00000000

24010a54 <tADSRT_tickNoInterp>:

Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
24010a54:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
24010a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24010a58:	3a01      	subs	r2, #1
24010a5a:	2a04      	cmp	r2, #4
24010a5c:	f200 80c7 	bhi.w	24010bee <tADSRT_tickNoInterp+0x19a>
24010a60:	e8df f002 	tbb	[pc, r2]
24010a64:	6533461b 	.word	0x6533461b
24010a68:	03          	.byte	0x03
24010a69:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
24010a6a:	edd3 7a03 	vldr	s15, [r3, #12]
24010a6e:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24010a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010a76:	eef4 6ac7 	vcmpe.f32	s13, s14
24010a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010a7e:	dd6e      	ble.n	24010b5e <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
24010a80:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24010a82:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 24010bf4 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
24010a86:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
24010a88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
24010a8c:	ed83 0a06 	vstr	s0, [r3, #24]
24010a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010a94:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
24010a98:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
24010a9a:	edd3 7a03 	vldr	s15, [r3, #12]
24010a9e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
24010aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010aa6:	eef4 6ac7 	vcmpe.f32	s13, s14
24010aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010aae:	dd64      	ble.n	24010b7a <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
24010ab0:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
24010ab2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
24010ab6:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
24010ab8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
24010abc:	ed83 0a06 	vstr	s0, [r3, #24]
24010ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010ac4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
24010ac8:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
24010aca:	edd3 7a07 	vldr	s15, [r3, #28]
24010ace:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010ad2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24010ad6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
24010ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010ade:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
24010ae2:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
24010ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
24010aea:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
24010aee:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24010af0:	edd3 7a03 	vldr	s15, [r3, #12]
24010af4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
24010af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010afc:	eef4 6ac7 	vcmpe.f32	s13, s14
24010b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b04:	dd4b      	ble.n	24010b9e <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
24010b06:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24010b0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24010b0e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24010b12:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
24010b14:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
24010b16:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
24010b1a:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
24010b1c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24010b20:	ed83 0a06 	vstr	s0, [r3, #24]
24010b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010b28:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24010b2c:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24010b2e:	edd3 7a03 	vldr	s15, [r3, #12]
24010b32:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
24010b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24010b3a:	eef4 6ac7 	vcmpe.f32	s13, s14
24010b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b42:	dd46      	ble.n	24010bd2 <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
24010b44:	2200      	movs	r2, #0
                adsr->next = 0.0f;
24010b46:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 24010bf4 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
24010b4a:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24010b4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24010b50:	ed83 0a06 	vstr	s0, [r3, #24]
24010b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010b58:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24010b5c:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24010b5e:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010b62:	685a      	ldr	r2, [r3, #4]
24010b64:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
24010b68:	ee17 1a10 	vmov	r1, s14
24010b6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b70:	ed92 0a00 	vldr	s0, [r2]
24010b74:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b78:	e786      	b.n	24010a88 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
24010b7a:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010b7e:	685a      	ldr	r2, [r3, #4]
24010b80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24010b84:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010b88:	ee17 1a10 	vmov	r1, s14
24010b8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010b90:	ed92 7a00 	vldr	s14, [r2]
24010b94:	ee30 0a47 	vsub.f32	s0, s0, s14
24010b98:	ee20 0a27 	vmul.f32	s0, s0, s15
24010b9c:	e78c      	b.n	24010ab8 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
24010b9e:	eefc 5ae6 	vcvt.u32.f32	s11, s13
24010ba2:	685a      	ldr	r2, [r3, #4]
24010ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010ba8:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
24010bac:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
24010bb0:	ee15 1a90 	vmov	r1, s11
24010bb4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010bb8:	ee37 7a40 	vsub.f32	s14, s14, s0
24010bbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010bc0:	ee67 7a86 	vmul.f32	s15, s15, s12
24010bc4:	ed92 6a00 	vldr	s12, [r2]
24010bc8:	eea6 0a07 	vfma.f32	s0, s12, s14
24010bcc:	ee27 0a80 	vmul.f32	s0, s15, s0
24010bd0:	e7a4      	b.n	24010b1c <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
24010bd2:	eebc 7ae6 	vcvt.u32.f32	s14, s13
24010bd6:	685a      	ldr	r2, [r3, #4]
24010bd8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
24010bdc:	ee17 1a10 	vmov	r1, s14
24010be0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010be4:	ed92 0a00 	vldr	s0, [r2]
24010be8:	ee20 0a27 	vmul.f32	s0, s0, s15
24010bec:	e7ae      	b.n	24010b4c <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
24010bee:	ed93 0a06 	vldr	s0, [r3, #24]
24010bf2:	4770      	bx	lr
24010bf4:	00000000 	.word	0x00000000

24010bf8 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010bf8:	b538      	push	{r3, r4, r5, lr}
24010bfa:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24010bfe:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010c00:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c02:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010c04:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c08:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24010c0a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c0e:	f002 f8fb 	bl	24012e08 <mpool_alloc>
24010c12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010c16:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24010c4c <tExpSmooth_init+0x54>
24010c1a:	6028      	str	r0, [r5, #0]
24010c1c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24010c20:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24010c24:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010c28:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010c2a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010c2e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24010c32:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24010c36:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010c3a:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010c3e:	6863      	ldr	r3, [r4, #4]
24010c40:	685b      	ldr	r3, [r3, #4]
24010c42:	6183      	str	r3, [r0, #24]
}
24010c44:	ecbd 8b02 	vpop	{d8}
24010c48:	bd38      	pop	{r3, r4, r5, pc}
24010c4a:	bf00      	nop
24010c4c:	00000000 	.word	0x00000000

24010c50 <tExpSmooth_initToPool>:
{
24010c50:	b538      	push	{r3, r4, r5, lr}
24010c52:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010c56:	680c      	ldr	r4, [r1, #0]
{
24010c58:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c5a:	201c      	movs	r0, #28
{
24010c5c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c60:	4621      	mov	r1, r4
{
24010c62:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010c66:	f002 f8cf 	bl	24012e08 <mpool_alloc>
24010c6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010c6e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 24010ca4 <tExpSmooth_initToPool+0x54>
24010c72:	6028      	str	r0, [r5, #0]
24010c74:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
24010c78:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24010c7c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010c80:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010c82:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010c86:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
24010c8a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
24010c8e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010c92:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010c96:	6863      	ldr	r3, [r4, #4]
24010c98:	685b      	ldr	r3, [r3, #4]
24010c9a:	6183      	str	r3, [r0, #24]
}
24010c9c:	ecbd 8b02 	vpop	{d8}
24010ca0:	bd38      	pop	{r3, r4, r5, pc}
24010ca2:	bf00      	nop
24010ca4:	00000000 	.word	0x00000000

24010ca8 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24010ca8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
24010caa:	6801      	ldr	r1, [r0, #0]
24010cac:	f002 b96e 	b.w	24012f8c <mpool_free>

24010cb0 <tExpSmooth_setVal>:
    smooth->dest=dest;
}

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
24010cb0:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
24010cb2:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010cb6:	4770      	bx	lr

24010cb8 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
24010cb8:	b538      	push	{r3, r4, r5, lr}
24010cba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010cbe:	680d      	ldr	r5, [r1, #0]
{
24010cc0:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
24010cc2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010cc6:	2028      	movs	r0, #40	; 0x28
24010cc8:	4629      	mov	r1, r5
{
24010cca:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010cce:	f002 f89b 	bl	24012e08 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24010cd2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24010d1c <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010cd6:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010cd8:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24010cdc:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010cde:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
24010ce0:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24010ce4:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24010ce8:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24010cec:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010cf0:	68db      	ldr	r3, [r3, #12]
24010cf2:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
24010cf4:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010cf6:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
24010cfa:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010cfe:	ee68 0a20 	vmul.f32	s1, s16, s1
24010d02:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d06:	f01c fd23 	bl	2402d750 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010d0a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d0e:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010d12:	edc4 8a04 	vstr	s17, [r4, #16]
}
24010d16:	ecbd 8b02 	vpop	{d8}
24010d1a:	bd38      	pop	{r3, r4, r5, pc}
24010d1c:	00000000 	.word	0x00000000

24010d20 <tOnePole_free>:
    _tOnePole* f = *ft;
24010d20:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010d22:	6801      	ldr	r1, [r0, #0]
24010d24:	f002 b932 	b.w	24012f8c <mpool_free>

24010d28 <tOnePole_setFreq>:
{
24010d28:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24010d2a:	6804      	ldr	r4, [r0, #0]
{
24010d2c:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24010d34:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24010d60 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010d38:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24010d3c:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010d40:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010d44:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d48:	f01c fd02 	bl	2402d750 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010d4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d50:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010d54:	ee77 7ac0 	vsub.f32	s15, s15, s0
24010d58:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010d5c:	bd10      	pop	{r4, pc}
24010d5e:	bf00      	nop
24010d60:	00000000 	.word	0x00000000

24010d64 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24010d64:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d66:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
24010d6a:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d6e:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
24010d72:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d76:	edd3 6a05 	vldr	s13, [r3, #20]
24010d7a:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24010d7e:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010d82:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24010d86:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24010d8a:	4770      	bx	lr

24010d8c <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010d8c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24010dc8 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d90:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010d94:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010d98:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010dcc <tOnePole_setSampleRate+0x40>
{
24010d9c:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24010d9e:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010da0:	edd4 0a01 	vldr	s1, [r4, #4]
24010da4:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010da8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010dac:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010db0:	f01c fcce 	bl	2402d750 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010db4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010db8:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010dbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
24010dc0:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010dc4:	bd10      	pop	{r4, pc}
24010dc6:	bf00      	nop
24010dc8:	40c90fdb 	.word	0x40c90fdb
24010dcc:	00000000 	.word	0x00000000

24010dd0 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24010dd0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010dd2:	680c      	ldr	r4, [r1, #0]
{
24010dd4:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
24010dd6:	2028      	movs	r0, #40	; 0x28
24010dd8:	4621      	mov	r1, r4
24010dda:	f002 f815 	bl	24012e08 <mpool_alloc>
24010dde:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24010de0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
24010de2:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010de4:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24010de6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010dea:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
24010dec:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
24010dee:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
24010df0:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010df2:	6242      	str	r2, [r0, #36]	; 0x24
}
24010df4:	bd38      	pop	{r3, r4, r5, pc}
24010df6:	bf00      	nop

24010df8 <tTwoZero_free>:

void    tTwoZero_free   (tTwoZero* const ft)
{
    _tTwoZero* f = *ft;
24010df8:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010dfa:	6801      	ldr	r1, [r0, #0]
24010dfc:	f002 b8c6 	b.w	24012f8c <mpool_free>

24010e00 <tTwoZero_tick>:
}

Lfloat   tTwoZero_tick(tTwoZero* const ft, Lfloat input)
{
    _tTwoZero* f = *ft;
24010e00:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010e02:	edd3 6a07 	vldr	s13, [r3, #28]
24010e06:	edd3 7a03 	vldr	s15, [r3, #12]
24010e0a:	edd3 5a08 	vldr	s11, [r3, #32]
24010e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
24010e12:	ed93 5a04 	vldr	s10, [r3, #16]
    Lfloat in = input * f->gain;
24010e16:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010e1a:	ed93 6a02 	vldr	s12, [r3, #8]
24010e1e:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
24010e22:	edc3 6a08 	vstr	s13, [r3, #32]
    Lfloat in = input * f->gain;
24010e26:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
24010e2a:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
24010e2e:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
24010e32:	eea6 0a07 	vfma.f32	s0, s12, s14
24010e36:	4770      	bx	lr

24010e38 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, Lfloat b0, Lfloat b1, Lfloat b2)
{
    _tTwoZero* f = *ft;
24010e38:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
24010e3a:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
24010e3e:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
24010e42:	ed83 1a04 	vstr	s2, [r3, #16]
}
24010e46:	4770      	bx	lr

24010e48 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
24010e48:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010e4a:	680c      	ldr	r4, [r1, #0]
{
24010e4c:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24010e4e:	2044      	movs	r0, #68	; 0x44
24010e50:	4621      	mov	r1, r4
24010e52:	f001 ffd9 	bl	24012e08 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
24010e56:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24010e58:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
24010e5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
24010e5e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010e60:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24010e62:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
24010e64:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
24010e66:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
24010e68:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
24010e6a:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24010e6c:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
24010e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010e70:	68d3      	ldr	r3, [r2, #12]
24010e72:	6403      	str	r3, [r0, #64]	; 0x40
}
24010e74:	bd38      	pop	{r3, r4, r5, pc}
24010e76:	bf00      	nop

24010e78 <tBiQuad_free>:

void    tBiQuad_free   (tBiQuad* const ft)
{
    _tBiQuad* f = *ft;
24010e78:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010e7a:	6801      	ldr	r1, [r0, #0]
24010e7c:	f002 b886 	b.w	24012f8c <mpool_free>

24010e80 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, Lfloat sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010e80:	eddf 7a1a 	vldr	s15, [pc, #104]	; 24010eec <tBiQuad_setSampleRate+0x6c>
24010e84:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
24010e88:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
24010e8a:	6804      	ldr	r4, [r0, #0]
{
24010e8c:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24010e90:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010e94:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
24010e98:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24010e9c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
24010ea0:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010ea4:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010ea8:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010eac:	f004 fbb4 	bl	24015618 <cosf>
24010eb0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24010eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010eb6:	ee28 8a27 	vmul.f32	s16, s16, s15
24010eba:	ee28 8a00 	vmul.f32	s16, s16, s0
24010ebe:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24010ec2:	b17b      	cbz	r3, 24010ee4 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24010ec4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
24010ec8:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
24010eca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24010ece:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24010ed0:	ee77 7ae8 	vsub.f32	s15, s15, s17
24010ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
24010ed8:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24010edc:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24010ee0:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24010ee4:	ecbd 8b02 	vpop	{d8}
24010ee8:	bd10      	pop	{r4, pc}
24010eea:	bf00      	nop
24010eec:	40c90fdb 	.word	0x40c90fdb

24010ef0 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24010ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24010ef2:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24010ef6:	6996      	ldr	r6, [r2, #24]
{
24010ef8:	4607      	mov	r7, r0
24010efa:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24010efc:	2044      	movs	r0, #68	; 0x44
24010efe:	4631      	mov	r1, r6
{
24010f00:	eef0 8a40 	vmov.f32	s17, s0
24010f04:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24010f08:	f001 ff7e 	bl	24012e08 <mpool_alloc>
24010f0c:	6038      	str	r0, [r7, #0]
24010f0e:	4604      	mov	r4, r0
    svf->mempool = m;
24010f10:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
24010f12:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
24010f14:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010f16:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 24010fc8 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
24010f1a:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010f1c:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24010f20:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
24010f22:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
24010f26:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010f28:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24010f2c:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
24010f30:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
24010f32:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
24010f34:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24010f38:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010f3c:	f005 f848 	bl	24015fd0 <tanf>
    svf->k = 1.0f/Q;
24010f40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24010f44:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24010f48:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
24010f4a:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
24010f4c:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
24010f50:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
24010f52:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
24010f54:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010f58:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
24010f5c:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010f60:	eeb0 7a67 	vmov.f32	s14, s15
24010f64:	eea0 7a26 	vfma.f32	s14, s0, s13
24010f68:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
24010f6c:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010f70:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24010f74:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
24010f78:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24010f7c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24010f80:	d007      	beq.n	24010f92 <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24010f82:	2d02      	cmp	r5, #2
24010f84:	d008      	beq.n	24010f98 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
24010f86:	b96d      	cbnz	r5, 24010fa4 <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24010f88:	4b10      	ldr	r3, [pc, #64]	; (24010fcc <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24010f8a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24010f8e:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
24010f90:	6363      	str	r3, [r4, #52]	; 0x34
}
24010f92:	ecbd 8b02 	vpop	{d8}
24010f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
24010f98:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24010f9c:	6366      	str	r6, [r4, #52]	; 0x34
}
24010f9e:	ecbd 8b02 	vpop	{d8}
24010fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
24010fa4:	2d03      	cmp	r5, #3
24010fa6:	d009      	beq.n	24010fbc <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
24010fa8:	2d04      	cmp	r5, #4
24010faa:	d1f2      	bne.n	24010f92 <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24010fac:	4a07      	ldr	r2, [pc, #28]	; (24010fcc <tSVF_init+0xdc>)
        svf->cL = -2.0f;
24010fae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24010fb2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24010fb6:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
24010fb8:	6363      	str	r3, [r4, #52]	; 0x34
}
24010fba:	e7ea      	b.n	24010f92 <tSVF_init+0xa2>
        svf->cBK = -1.0f;
24010fbc:	4b03      	ldr	r3, [pc, #12]	; (24010fcc <tSVF_init+0xdc>)
        svf->cH = 1.0f;
24010fbe:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
24010fc2:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
24010fc4:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
24010fc6:	e7e4      	b.n	24010f92 <tSVF_init+0xa2>
24010fc8:	40490fdb 	.word	0x40490fdb
24010fcc:	bf800000 	.word	0xbf800000

24010fd0 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24010fd0:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24010fd2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
24010fd6:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010fda:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24010fde:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010fe2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
24010fe6:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24010fea:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
24010fee:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
24010ff2:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24010ff6:	edd3 2a08 	vldr	s5, [r3, #32]
24010ffa:	ee67 7a84 	vmul.f32	s15, s15, s8
24010ffe:	ed93 2a07 	vldr	s4, [r3, #28]
24011002:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24011006:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
2401100a:	eea2 5a23 	vfma.f32	s10, s4, s7
2401100e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24011012:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24011016:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401101a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2401101e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24011022:	eed5 6aa4 	vfnms.f32	s13, s11, s9
24011026:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401102a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2401102e:	edc3 6a05 	vstr	s13, [r3, #20]
}
24011032:	eea3 7a80 	vfma.f32	s14, s7, s0
24011036:	eeb0 0a47 	vmov.f32	s0, s14
2401103a:	4770      	bx	lr

2401103c <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
2401103c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011040:	4a18      	ldr	r2, [pc, #96]	; (240110a4 <tSVF_setFreqFast+0x68>)
24011042:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
24011046:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
24011048:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401104c:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011050:	ee77 6ac0 	vsub.f32	s13, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011054:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011058:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401105c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011060:	edd0 5a01 	vldr	s11, [r0, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011064:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011068:	ee76 6a86 	vadd.f32	s13, s13, s12
2401106c:	ed90 6a00 	vldr	s12, [r0]
24011070:	ee20 0a25 	vmul.f32	s0, s0, s11
24011074:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011078:	eef0 6a67 	vmov.f32	s13, s15
2401107c:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011080:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011084:	eee0 6a07 	vfma.f32	s13, s0, s14
24011088:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
2401108c:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011090:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
24011094:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24011098:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2401109c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
240110a0:	4770      	bx	lr
240110a2:	bf00      	nop
240110a4:	24018428 	.word	0x24018428

240110a8 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
240110a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
240110ac:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240110ae:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
240110b2:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
240110b6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240110ba:	eeb0 6a47 	vmov.f32	s12, s14
240110be:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
240110c2:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240110c6:	eea7 6aa5 	vfma.f32	s12, s15, s11
240110ca:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
240110ce:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240110d2:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
240110d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
240110da:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240110de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
240110e2:	4770      	bx	lr

240110e4 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
240110e4:	b538      	push	{r3, r4, r5, lr}
240110e6:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
240110ea:	698c      	ldr	r4, [r1, #24]
{
240110ec:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240110ee:	2018      	movs	r0, #24
{
240110f0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240110f4:	4621      	mov	r1, r4
240110f6:	f001 feeb 	bl	24012ed0 <mpool_calloc>
240110fa:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240110fc:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240110fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011102:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24011104:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011106:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
2401110a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401110c:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
24011110:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
24011112:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011116:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401111a:	edc0 7a03 	vstr	s15, [r0, #12]
}
2401111e:	ecbd 8b02 	vpop	{d8}
24011122:	bd38      	pop	{r3, r4, r5, pc}

24011124 <tHighpass_initToPool>:
{
24011124:	b538      	push	{r3, r4, r5, lr}
24011126:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401112a:	680c      	ldr	r4, [r1, #0]
{
2401112c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401112e:	2018      	movs	r0, #24
{
24011130:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24011134:	4621      	mov	r1, r4
24011136:	f001 fecb 	bl	24012ed0 <mpool_calloc>
2401113a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2401113c:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401113e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011142:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24011144:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011146:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
2401114a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401114c:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
24011150:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
24011152:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011156:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401115a:	edc0 7a03 	vstr	s15, [r0, #12]
}
2401115e:	ecbd 8b02 	vpop	{d8}
24011162:	bd38      	pop	{r3, r4, r5, pc}

24011164 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
24011164:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24011166:	6801      	ldr	r1, [r0, #0]
24011168:	f001 bf10 	b.w	24012f8c <mpool_free>

2401116c <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
2401116c:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401116e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011172:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24011176:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401117a:	eee7 7a40 	vfms.f32	s15, s14, s0
2401117e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24011182:	4770      	bx	lr

24011184 <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
24011184:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24011186:	edd3 7a01 	vldr	s15, [r3, #4]
2401118a:	ed93 7a02 	vldr	s14, [r3, #8]
2401118e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
24011192:	ed83 0a01 	vstr	s0, [r3, #4]
24011196:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
2401119a:	ee30 0a27 	vadd.f32	s0, s0, s15
2401119e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
240111a2:	4770      	bx	lr

240111a4 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240111a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 240111c4 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240111a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
240111ac:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240111ae:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240111b2:	edd3 6a04 	vldr	s13, [r3, #16]
240111b6:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240111ba:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240111be:	edc3 7a03 	vstr	s15, [r3, #12]
}
240111c2:	4770      	bx	lr
240111c4:	40c90fdb 	.word	0x40c90fdb

240111c8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
240111c8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240111ca:	edd3 6a03 	vldr	s13, [r3, #12]
240111ce:	ed93 7a02 	vldr	s14, [r3, #8]
240111d2:	ee70 7a66 	vsub.f32	s15, s0, s13
240111d6:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
240111da:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240111de:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240111e2:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
240111e6:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
240111ea:	edd3 4a08 	vldr	s9, [r3, #32]
240111ee:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240111f2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240111f6:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
240111fa:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
240111fe:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24011202:	eeb0 5a47 	vmov.f32	s10, s14
24011206:	eea4 0a87 	vfma.f32	s0, s9, s14
2401120a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401120e:	eef0 7a66 	vmov.f32	s15, s13
}
24011212:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24011216:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401121a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
2401121e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24011222:	4770      	bx	lr

24011224 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
24011224:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
24011226:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011228:	eddf 7a98 	vldr	s15, [pc, #608]	; 2401148c <tVZFilter_calcCoeffs+0x268>
{
2401122c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011230:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24011234:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24011238:	ee68 8a87 	vmul.f32	s17, s17, s14
2401123c:	ee68 8aa7 	vmul.f32	s17, s17, s15
24011240:	eeb0 0a68 	vmov.f32	s0, s17
24011244:	f004 fec4 	bl	24015fd0 <tanf>
    
    switch( f->type )
24011248:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401124a:	eeb0 8a40 	vmov.f32	s16, s0
2401124e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24011252:	2b0a      	cmp	r3, #10
24011254:	f200 8117 	bhi.w	24011486 <tVZFilter_calcCoeffs+0x262>
24011258:	e8df f013 	tbh	[pc, r3, lsl #1]
2401125c:	002f0026 	.word	0x002f0026
24011260:	00410038 	.word	0x00410038
24011264:	0056004d 	.word	0x0056004d
24011268:	00a1008b 	.word	0x00a1008b
2401126c:	010a00b7 	.word	0x010a00b7
24011270:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011272:	edd4 7a05 	vldr	s15, [r4, #20]
24011276:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401127a:	eeb1 7a67 	vneg.f32	s14, s15
2401127e:	61e3      	str	r3, [r4, #28]
24011280:	6263      	str	r3, [r4, #36]	; 0x24
24011282:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2401128a:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401128e:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24011292:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011296:	eee7 6a88 	vfma.f32	s13, s15, s16
2401129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401129e:	edc4 7a06 	vstr	s15, [r4, #24]
}
240112a2:	ecbd 8b02 	vpop	{d8}
240112a6:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240112a8:	2300      	movs	r3, #0
240112aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240112ae:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240112b2:	61e3      	str	r3, [r4, #28]
240112b4:	6223      	str	r3, [r4, #32]
240112b6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240112b8:	e7e5      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240112ba:	2300      	movs	r3, #0
240112bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240112c0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240112c4:	6223      	str	r3, [r4, #32]
240112c6:	6263      	str	r3, [r4, #36]	; 0x24
240112c8:	61e2      	str	r2, [r4, #28]
            break;
240112ca:	e7dc      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240112cc:	2300      	movs	r3, #0
240112ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240112d2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240112d6:	61e3      	str	r3, [r4, #28]
240112d8:	6263      	str	r3, [r4, #36]	; 0x24
240112da:	6222      	str	r2, [r4, #32]
            break;
240112dc:	e7d3      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240112de:	edd4 7a05 	vldr	s15, [r4, #20]
240112e2:	2300      	movs	r3, #0
240112e4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240112e8:	61e3      	str	r3, [r4, #28]
240112ea:	ee27 7a27 	vmul.f32	s14, s14, s15
240112ee:	6263      	str	r3, [r4, #36]	; 0x24
240112f0:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240112f4:	e7c7      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240112f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240112fa:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240112fc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011300:	6222      	str	r2, [r4, #32]
24011302:	61e3      	str	r3, [r4, #28]
24011304:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011306:	e7be      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011308:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2401130c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011310:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24011314:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011318:	f004 fcfa 	bl	24015d10 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401131c:	ee28 0a80 	vmul.f32	s0, s17, s0
24011320:	f004 fe56 	bl	24015fd0 <tanf>
            Lfloat r  = f->g/wl;
24011324:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011328:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
2401132c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011330:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24011334:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011338:	ed84 7a07 	vstr	s14, [r4, #28]
2401133c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011340:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011344:	eea7 7aa7 	vfma.f32	s14, s15, s15
24011348:	eef0 6a47 	vmov.f32	s13, s14
2401134c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011350:	ee77 7a45 	vsub.f32	s15, s14, s10
24011354:	ee67 7aa5 	vmul.f32	s15, s15, s11
24011358:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401135c:	eef1 7ac7 	vsqrt.f32	s15, s14
24011360:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011364:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011368:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401136c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011370:	e789      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24011372:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011376:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401137a:	edd4 7a05 	vldr	s15, [r4, #20]
2401137e:	eef1 6ac7 	vsqrt.f32	s13, s14
24011382:	ed84 7a07 	vstr	s14, [r4, #28]
24011386:	6263      	str	r3, [r4, #36]	; 0x24
24011388:	ee27 6a27 	vmul.f32	s12, s14, s15
2401138c:	ed84 6a08 	vstr	s12, [r4, #32]
24011390:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011394:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011398:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
2401139c:	e773      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
2401139e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240113a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240113a6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240113aa:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240113ae:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240113b2:	61e3      	str	r3, [r4, #28]
240113b4:	ee27 6a27 	vmul.f32	s12, s14, s15
240113b8:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240113bc:	eeb1 7ae6 	vsqrt.f32	s14, s13
240113c0:	ee20 8a07 	vmul.f32	s16, s0, s14
240113c4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240113c8:	e75d      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
240113ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240113ce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240113d2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113d6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011490 <tVZFilter_calcCoeffs+0x26c>
240113da:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
240113de:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113e2:	eeb0 0a48 	vmov.f32	s0, s16
240113e6:	eea7 0a67 	vfms.f32	s0, s14, s15
240113ea:	f001 fcef 	bl	24012dcc <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113ee:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011490 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113f2:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113f6:	eeb0 0a68 	vmov.f32	s0, s17
240113fa:	f001 fceb 	bl	24012dd4 <minimum>
            f->cB = 1.0f-x*x;
240113fe:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011402:	edd4 7a05 	vldr	s15, [r4, #20]
24011406:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2401140a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401140e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011412:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011416:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401141a:	ee76 5a06 	vadd.f32	s11, s12, s12
2401141e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011422:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011426:	eee6 7a06 	vfma.f32	s15, s12, s12
2401142a:	eee0 7a00 	vfma.f32	s15, s0, s0
2401142e:	eee0 7a65 	vfms.f32	s15, s0, s11
24011432:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011436:	f001 f9ab 	bl	24012790 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2401143a:	edd4 5a07 	vldr	s11, [r4, #28]
2401143e:	ed94 6a08 	vldr	s12, [r4, #32]
24011442:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011446:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401144a:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2401144e:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011452:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24011456:	ee65 5a80 	vmul.f32	s11, s11, s0
2401145a:	ee26 6a00 	vmul.f32	s12, s12, s0
2401145e:	ee26 0a80 	vmul.f32	s0, s13, s0
24011462:	edc4 5a07 	vstr	s11, [r4, #28]
24011466:	ed84 6a08 	vstr	s12, [r4, #32]
2401146a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2401146e:	e70a      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24011470:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011474:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011478:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
2401147a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2401147e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011482:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011484:	e6ff      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
24011486:	edd4 7a05 	vldr	s15, [r4, #20]
2401148a:	e6fc      	b.n	24011286 <tVZFilter_calcCoeffs+0x62>
2401148c:	40490fdb 	.word	0x40490fdb
24011490:	00000000 	.word	0x00000000

24011494 <tVZFilter_initToPool>:
{
24011494:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24011496:	6817      	ldr	r7, [r2, #0]
{
24011498:	4605      	mov	r5, r0
2401149a:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
2401149c:	204c      	movs	r0, #76	; 0x4c
2401149e:	4639      	mov	r1, r7
{
240114a0:	ed2d 8b04 	vpush	{d8-d9}
240114a4:	b083      	sub	sp, #12
240114a6:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240114aa:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
240114ae:	ed9f 8a42 	vldr	s16, [pc, #264]	; 240115b8 <tVZFilter_initToPool+0x124>
{
240114b2:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240114b6:	f001 fca7 	bl	24012e08 <mpool_alloc>
240114ba:	6028      	str	r0, [r5, #0]
240114bc:	4604      	mov	r4, r0
    f->mempool = m;
240114be:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240114c0:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
240114c4:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240114c6:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
240114ca:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240114ce:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 240115bc <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
240114d2:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240114d6:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
240114da:	685b      	ldr	r3, [r3, #4]
240114dc:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240114de:	f01c f937 	bl	2402d750 <__LEAF_clip_veneer>
    f->invG = 1.0f/ONE_OVER_SQRT2;
240114e2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 240115c0 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
240114e6:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240114ea:	ee20 6a09 	vmul.f32	s12, s0, s18
240114ee:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
240114f2:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
240114f6:	4b33      	ldr	r3, [pc, #204]	; (240115c4 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
240114f8:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
240114fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
240114fe:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
24011502:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24011506:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401150a:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
2401150e:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
24011510:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24011514:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
24011518:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
2401151c:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24011520:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011524:	f004 fd54 	bl	24015fd0 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011528:	ed9f 1a27 	vldr	s2, [pc, #156]	; 240115c8 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401152c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24011530:	eef0 0a68 	vmov.f32	s1, s17
24011534:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24011538:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401153a:	f01c f909 	bl	2402d750 <__LEAF_clip_veneer>
2401153e:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24011542:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011546:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401154a:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
2401154e:	682c      	ldr	r4, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24011550:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011554:	f004 fbdc 	bl	24015d10 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011558:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401155c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24011560:	ee67 7a87 	vmul.f32	s15, s15, s14
24011564:	ee67 7a89 	vmul.f32	s15, s15, s18
24011568:	ee27 0a80 	vmul.f32	s0, s15, s0
2401156c:	f004 fd30 	bl	24015fd0 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24011570:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24011574:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011578:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
2401157a:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401157e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24011582:	ee27 7a07 	vmul.f32	s14, s14, s14
24011586:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401158a:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401158e:	ee67 7aa6 	vmul.f32	s15, s15, s13
24011592:	eec7 6a87 	vdiv.f32	s13, s15, s14
24011596:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
2401159a:	ee77 7aa7 	vadd.f32	s15, s15, s15
2401159e:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
240115a2:	f7ff fe3f 	bl	24011224 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
240115a6:	4628      	mov	r0, r5
}
240115a8:	b003      	add	sp, #12
240115aa:	ecbd 8b04 	vpop	{d8-d9}
240115ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
240115b2:	f7ff be37 	b.w	24011224 <tVZFilter_calcCoeffs>
240115b6:	bf00      	nop
240115b8:	00000000 	.word	0x00000000
240115bc:	40490fdb 	.word	0x40490fdb
240115c0:	3fb504f3 	.word	0x3fb504f3
240115c4:	3f3504f3 	.word	0x3f3504f3
240115c8:	42c80000 	.word	0x42c80000

240115cc <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
240115cc:	3218      	adds	r2, #24
240115ce:	f7ff bf61 	b.w	24011494 <tVZFilter_initToPool>
240115d2:	bf00      	nop

240115d4 <tVZFilter_setFreq>:
{
240115d4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
240115d6:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240115d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240115dc:	4604      	mov	r4, r0
240115de:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240115e2:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
240115e6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24011600 <tVZFilter_setFreq+0x2c>
240115ea:	ee21 1a27 	vmul.f32	s2, s2, s15
240115ee:	f01c f8af 	bl	2402d750 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
240115f2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240115f4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
240115f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240115fc:	f7ff be12 	b.w	24011224 <tVZFilter_calcCoeffs>
24011600:	00000000 	.word	0x00000000

24011604 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
24011604:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011608:	4baa      	ldr	r3, [pc, #680]	; (240118b4 <tVZFilter_setFreqFast+0x2b0>)
2401160a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
2401160e:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011612:	ee37 7ac0 	vsub.f32	s14, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011616:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2401161a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401161e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011622:	ed91 6a01 	vldr	s12, [r1, #4]
{
24011626:	b510      	push	{r4, lr}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011628:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
2401162c:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2401162e:	ee37 7a26 	vadd.f32	s14, s14, s13
24011632:	edd1 6a00 	vldr	s13, [r1]
24011636:	ee67 7a86 	vmul.f32	s15, s15, s12
{
2401163a:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
2401163e:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
24011642:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011644:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24011648:	2a0a      	cmp	r2, #10
2401164a:	f200 812f 	bhi.w	240118ac <tVZFilter_setFreqFast+0x2a8>
2401164e:	e8df f012 	tbh	[pc, r2, lsl #1]
24011652:	0026      	.short	0x0026
24011654:	0038002f 	.word	0x0038002f
24011658:	004d0041 	.word	0x004d0041
2401165c:	009b0056 	.word	0x009b0056
24011660:	00cf00b5 	.word	0x00cf00b5
24011664:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011668:	ed94 7a05 	vldr	s14, [r4, #20]
2401166c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011670:	eef1 6a47 	vneg.f32	s13, s14
24011674:	61e3      	str	r3, [r4, #28]
24011676:	6263      	str	r3, [r4, #36]	; 0x24
24011678:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
2401167c:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011684:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011688:	eef0 6a47 	vmov.f32	s13, s14
2401168c:	eee0 6a27 	vfma.f32	s13, s0, s15
24011690:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011694:	edc4 7a06 	vstr	s15, [r4, #24]
}
24011698:	ecbd 8b02 	vpop	{d8}
2401169c:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401169e:	2300      	movs	r3, #0
240116a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240116a4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240116a8:	61e3      	str	r3, [r4, #28]
240116aa:	6223      	str	r3, [r4, #32]
240116ac:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240116ae:	e7e5      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240116b0:	2300      	movs	r3, #0
240116b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240116b6:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240116ba:	6223      	str	r3, [r4, #32]
240116bc:	6263      	str	r3, [r4, #36]	; 0x24
240116be:	61e2      	str	r2, [r4, #28]
            break;
240116c0:	e7dc      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240116c2:	2300      	movs	r3, #0
240116c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240116c8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240116cc:	61e3      	str	r3, [r4, #28]
240116ce:	6263      	str	r3, [r4, #36]	; 0x24
240116d0:	6222      	str	r2, [r4, #32]
            break;
240116d2:	e7d3      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240116d4:	ed94 7a05 	vldr	s14, [r4, #20]
240116d8:	2300      	movs	r3, #0
240116da:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240116de:	61e3      	str	r3, [r4, #28]
240116e0:	ee66 6a87 	vmul.f32	s13, s13, s14
240116e4:	6263      	str	r3, [r4, #36]	; 0x24
240116e6:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240116ea:	e7c7      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240116ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240116f0:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
240116f2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240116f6:	6222      	str	r2, [r4, #32]
240116f8:	61e3      	str	r3, [r4, #28]
240116fa:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240116fc:	e7be      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240116fe:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011702:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011706:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401170a:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401170e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011712:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011716:	f001 f87f 	bl	24012818 <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401171a:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401171e:	eddf 7a66 	vldr	s15, [pc, #408]	; 240118b8 <tVZFilter_setFreqFast+0x2b4>
24011722:	ee28 8a07 	vmul.f32	s16, s16, s14
24011726:	ee28 8a27 	vmul.f32	s16, s16, s15
2401172a:	ee28 0a00 	vmul.f32	s0, s16, s0
2401172e:	f001 f81b 	bl	24012768 <fastertanf>
            Lfloat r  = f->g/wl;
24011732:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011736:	eeb0 5a68 	vmov.f32	s10, s17
2401173a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
2401173e:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011742:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24011746:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401174a:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401174e:	eea7 5aa7 	vfma.f32	s10, s15, s15
24011752:	ee85 7a27 	vdiv.f32	s14, s10, s15
24011756:	ee77 7a65 	vsub.f32	s15, s14, s11
2401175a:	ee67 7a86 	vmul.f32	s15, s15, s12
2401175e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24011762:	f001 f815 	bl	24012790 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011766:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
2401176a:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401176e:	edc4 8a07 	vstr	s17, [r4, #28]
24011772:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011776:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401177a:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401177e:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011782:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24011786:	e779      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
24011788:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2401178c:	f001 f800 	bl	24012790 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011790:	f000 fffe 	bl	24012790 <fastsqrtf>
24011794:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011798:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
2401179c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240117a0:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240117a4:	ed94 7a05 	vldr	s14, [r4, #20]
240117a8:	edc4 6a07 	vstr	s13, [r4, #28]
240117ac:	6263      	str	r3, [r4, #36]	; 0x24
240117ae:	ee66 6a87 	vmul.f32	s13, s13, s14
240117b2:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240117b6:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
240117ba:	e75f      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
240117bc:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
240117c0:	f000 ffe6 	bl	24012790 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240117c4:	f000 ffe4 	bl	24012790 <fastsqrtf>
240117c8:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240117cc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240117d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240117d4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240117d8:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240117dc:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
240117e0:	ee67 6a26 	vmul.f32	s13, s14, s13
240117e4:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240117e6:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240117ea:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240117ee:	e745      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            Lfloat x  = (2.0f*f->m-1.0f);
240117f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240117f4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240117f8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240117fc:	eddf 0a2f 	vldr	s1, [pc, #188]	; 240118bc <tVZFilter_setFreqFast+0x2b8>
24011800:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011804:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011808:	eeb0 0a48 	vmov.f32	s0, s16
2401180c:	eea7 0a67 	vfms.f32	s0, s14, s15
24011810:	f001 fadc 	bl	24012dcc <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011814:	eddf 0a29 	vldr	s1, [pc, #164]	; 240118bc <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011818:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401181c:	eeb0 0a68 	vmov.f32	s0, s17
24011820:	f001 fad8 	bl	24012dd4 <minimum>
            f->cB = 1.0f-x*x;
24011824:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011828:	edd4 7a05 	vldr	s15, [r4, #20]
2401182c:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011830:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011834:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011838:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2401183c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011840:	ee76 5a06 	vadd.f32	s11, s12, s12
24011844:	ee38 8a08 	vadd.f32	s16, s16, s16
24011848:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
2401184c:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011850:	eee6 7a06 	vfma.f32	s15, s12, s12
24011854:	eee0 7a00 	vfma.f32	s15, s0, s0
24011858:	eee0 7a65 	vfms.f32	s15, s0, s11
2401185c:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011860:	f000 ff96 	bl	24012790 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011864:	edd4 5a07 	vldr	s11, [r4, #28]
24011868:	ed94 6a08 	vldr	s12, [r4, #32]
2401186c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011870:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011874:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24011878:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
2401187c:	ee65 5a80 	vmul.f32	s11, s11, s0
24011880:	ee26 6a00 	vmul.f32	s12, s12, s0
24011884:	ee26 0a80 	vmul.f32	s0, s13, s0
24011888:	edc4 5a07 	vstr	s11, [r4, #28]
2401188c:	ed84 6a08 	vstr	s12, [r4, #32]
24011890:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011894:	e6f2      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
24011896:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2401189a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
2401189e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
240118a0:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
240118a4:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
240118a8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240118aa:	e6e7      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
240118ac:	ed94 7a05 	vldr	s14, [r4, #20]
240118b0:	e6e4      	b.n	2401167c <tVZFilter_setFreqFast+0x78>
240118b2:	bf00      	nop
240118b4:	24018428 	.word	0x24018428
240118b8:	40490fdb 	.word	0x40490fdb
240118bc:	00000000 	.word	0x00000000

240118c0 <tVZFilter_setGain>:
{
240118c0:	b538      	push	{r3, r4, r5, lr}
240118c2:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240118c6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 240118f0 <tVZFilter_setGain+0x30>
240118ca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240118f4 <tVZFilter_setGain+0x34>
{
240118ce:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240118d0:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240118d2:	f01b ff3d 	bl	2402d750 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
240118d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240118da:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240118dc:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
240118e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
240118e4:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
240118e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240118ec:	f7ff bc9a 	b.w	24011224 <tVZFilter_calcCoeffs>
240118f0:	457a0000 	.word	0x457a0000
240118f4:	358637bd 	.word	0x358637bd

240118f8 <tVZFilter_setResonance>:
{
240118f8:	b538      	push	{r3, r4, r5, lr}
240118fa:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240118fe:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24011928 <tVZFilter_setResonance+0x30>
24011902:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401192c <tVZFilter_setResonance+0x34>
{
24011906:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011908:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2401190a:	f01b ff21 	bl	2402d750 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
2401190e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24011912:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24011914:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24011918:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401191c:	edc5 7a05 	vstr	s15, [r5, #20]
}
24011920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24011924:	f7ff bc7e 	b.w	24011224 <tVZFilter_calcCoeffs>
24011928:	42c80000 	.word	0x42c80000
2401192c:	3c23d70a 	.word	0x3c23d70a

24011930 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24011930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
24011934:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011936:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24011bac <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
2401193a:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
2401193e:	b510      	push	{r4, lr}
24011940:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
24011944:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
24011948:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
2401194c:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401194e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24011952:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24011956:	ee68 8a87 	vmul.f32	s17, s17, s14
2401195a:	ee68 8aa7 	vmul.f32	s17, s17, s15
2401195e:	eeb0 0a68 	vmov.f32	s0, s17
24011962:	f004 fb35 	bl	24015fd0 <tanf>
    switch( f->type )
24011966:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011968:	eeb0 8a40 	vmov.f32	s16, s0
2401196c:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24011970:	2b0a      	cmp	r3, #10
24011972:	f200 8117 	bhi.w	24011ba4 <tVZFilter_setSampleRate+0x274>
24011976:	e8df f013 	tbh	[pc, r3, lsl #1]
2401197a:	0026      	.short	0x0026
2401197c:	0038002f 	.word	0x0038002f
24011980:	004d0041 	.word	0x004d0041
24011984:	008b0056 	.word	0x008b0056
24011988:	00b700a1 	.word	0x00b700a1
2401198c:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011990:	edd4 7a05 	vldr	s15, [r4, #20]
24011994:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011998:	eeb1 7a67 	vneg.f32	s14, s15
2401199c:	61e3      	str	r3, [r4, #28]
2401199e:	6263      	str	r3, [r4, #36]	; 0x24
240119a0:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240119a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240119a8:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240119ac:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
240119b0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240119b4:	eee7 6a88 	vfma.f32	s13, s15, s16
240119b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
240119bc:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
240119c0:	ecbd 8b02 	vpop	{d8}
240119c4:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240119c6:	2300      	movs	r3, #0
240119c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240119cc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240119d0:	61e3      	str	r3, [r4, #28]
240119d2:	6223      	str	r3, [r4, #32]
240119d4:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240119d6:	e7e5      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240119d8:	2300      	movs	r3, #0
240119da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240119de:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240119e2:	6223      	str	r3, [r4, #32]
240119e4:	6263      	str	r3, [r4, #36]	; 0x24
240119e6:	61e2      	str	r2, [r4, #28]
            break;
240119e8:	e7dc      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240119ea:	2300      	movs	r3, #0
240119ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
240119f0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240119f4:	61e3      	str	r3, [r4, #28]
240119f6:	6263      	str	r3, [r4, #36]	; 0x24
240119f8:	6222      	str	r2, [r4, #32]
            break;
240119fa:	e7d3      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240119fc:	edd4 7a05 	vldr	s15, [r4, #20]
24011a00:	2300      	movs	r3, #0
24011a02:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24011a06:	61e3      	str	r3, [r4, #28]
24011a08:	ee27 7a27 	vmul.f32	s14, s14, s15
24011a0c:	6263      	str	r3, [r4, #36]	; 0x24
24011a0e:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24011a12:	e7c7      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011a18:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
24011a1a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24011a1e:	6222      	str	r2, [r4, #32]
24011a20:	61e3      	str	r3, [r4, #28]
24011a22:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011a24:	e7be      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24011a26:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24011a2a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24011a2e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24011a32:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011a36:	f004 f96b 	bl	24015d10 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011a3a:	ee28 0a80 	vmul.f32	s0, s17, s0
24011a3e:	f004 fac7 	bl	24015fd0 <tanf>
            Lfloat r  = f->g/wl;
24011a42:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011a46:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24011a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011a4e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24011a52:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a56:	ed84 7a07 	vstr	s14, [r4, #28]
24011a5a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011a5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011a62:	eea7 7aa7 	vfma.f32	s14, s15, s15
24011a66:	eef0 6a47 	vmov.f32	s13, s14
24011a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011a6e:	ee77 7a45 	vsub.f32	s15, s14, s10
24011a72:	ee67 7aa5 	vmul.f32	s15, s15, s11
24011a76:	ee87 7a86 	vdiv.f32	s14, s15, s12
24011a7a:	eef1 7ac7 	vsqrt.f32	s15, s14
24011a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a82:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011a86:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a8a:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011a8e:	e789      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011a90:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011a94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011a98:	edd4 7a05 	vldr	s15, [r4, #20]
24011a9c:	eef1 6ac7 	vsqrt.f32	s13, s14
24011aa0:	ed84 7a07 	vstr	s14, [r4, #28]
24011aa4:	6263      	str	r3, [r4, #36]	; 0x24
24011aa6:	ee27 6a27 	vmul.f32	s12, s14, s15
24011aaa:	ed84 6a08 	vstr	s12, [r4, #32]
24011aae:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011ab2:	ee80 8a07 	vdiv.f32	s16, s0, s14
24011ab6:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011aba:	e773      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011abc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011ac0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011ac4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011ac8:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011acc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24011ad0:	61e3      	str	r3, [r4, #28]
24011ad2:	ee27 6a27 	vmul.f32	s12, s14, s15
24011ad6:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011ada:	eeb1 7ae6 	vsqrt.f32	s14, s13
24011ade:	ee20 8a07 	vmul.f32	s16, s0, s14
24011ae2:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011ae6:	e75d      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            Lfloat x  = (2.0f*f->m-1.0f);
24011ae8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24011aec:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24011af0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011af4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011bb0 <tVZFilter_setSampleRate+0x280>
24011af8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24011afc:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011b00:	eeb0 0a48 	vmov.f32	s0, s16
24011b04:	eea7 0a67 	vfms.f32	s0, s14, s15
24011b08:	f001 f960 	bl	24012dcc <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011b0c:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011bb0 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24011b10:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011b14:	eeb0 0a68 	vmov.f32	s0, s17
24011b18:	f001 f95c 	bl	24012dd4 <minimum>
            f->cB = 1.0f-x*x;
24011b1c:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b20:	edd4 7a05 	vldr	s15, [r4, #20]
24011b24:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24011b28:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b2c:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011b30:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011b34:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b38:	ee76 5a06 	vadd.f32	s11, s12, s12
24011b3c:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011b40:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b44:	eee6 7a06 	vfma.f32	s15, s12, s12
24011b48:	eee0 7a00 	vfma.f32	s15, s0, s0
24011b4c:	eee0 7a65 	vfms.f32	s15, s0, s11
24011b50:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011b54:	f000 fe1c 	bl	24012790 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011b58:	edd4 5a07 	vldr	s11, [r4, #28]
24011b5c:	ed94 6a08 	vldr	s12, [r4, #32]
24011b60:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011b64:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b68:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24011b6c:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011b70:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24011b74:	ee65 5a80 	vmul.f32	s11, s11, s0
24011b78:	ee26 6a00 	vmul.f32	s12, s12, s0
24011b7c:	ee26 0a80 	vmul.f32	s0, s13, s0
24011b80:	edc4 5a07 	vstr	s11, [r4, #28]
24011b84:	ed84 6a08 	vstr	s12, [r4, #32]
24011b88:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
24011b8c:	e70a      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
24011b8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011b92:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011b96:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011b98:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011b9c:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011ba0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011ba2:	e6ff      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
24011ba4:	edd4 7a05 	vldr	s15, [r4, #20]
24011ba8:	e6fc      	b.n	240119a4 <tVZFilter_setSampleRate+0x74>
24011baa:	bf00      	nop
24011bac:	40490fdb 	.word	0x40490fdb
24011bb0:	00000000 	.word	0x00000000

24011bb4 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24011bb4:	b570      	push	{r4, r5, r6, lr}
24011bb6:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24011bba:	698d      	ldr	r5, [r1, #24]
{
24011bbc:	eeb0 8a40 	vmov.f32	s16, s0
24011bc0:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011bc2:	2040      	movs	r0, #64	; 0x40
24011bc4:	4629      	mov	r1, r5
{
24011bc6:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011bca:	f001 f91d 	bl	24012e08 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011bce:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011c48 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011bd2:	6030      	str	r0, [r6, #0]
24011bd4:	4604      	mov	r4, r0
    f->mempool = m;
24011bd6:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011bd8:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
24011bdc:	686b      	ldr	r3, [r5, #4]
24011bde:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
24011be2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011be6:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
24011bea:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011bee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24011bf2:	f003 ff1d 	bl	24015a30 <tan>
    f->r = (7.f * resonance + 0.5f);
24011bf6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011bfa:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24011bfe:	4913      	ldr	r1, [pc, #76]	; (24011c4c <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
24011c00:	4b13      	ldr	r3, [pc, #76]	; (24011c50 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24011c02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
24011c06:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
24011c0a:	2000      	movs	r0, #0
    f->n = 1.836f;
24011c0c:	6161      	str	r1, [r4, #20]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011c0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
24011c12:	4910      	ldr	r1, [pc, #64]	; (24011c54 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
24011c14:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
24011c18:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
24011c1a:	4b0f      	ldr	r3, [pc, #60]	; (24011c58 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
24011c1c:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
24011c1e:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
24011c20:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
24011c22:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
24011c24:	480d      	ldr	r0, [pc, #52]	; (24011c5c <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
24011c26:	490e      	ldr	r1, [pc, #56]	; (24011c60 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
24011c28:	4a0e      	ldr	r2, [pc, #56]	; (24011c64 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
24011c2a:	4b0f      	ldr	r3, [pc, #60]	; (24011c68 <tDiodeFilter_init+0xb4>)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011c2c:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
24011c30:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
24011c34:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24011c38:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24011c3a:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24011c3c:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24011c3e:	63a3      	str	r3, [r4, #56]	; 0x38
}
24011c40:	ecbd 8b02 	vpop	{d8}
24011c44:	bd70      	pop	{r4, r5, r6, pc}
24011c46:	bf00      	nop
24011c48:	40490fdb 	.word	0x40490fdb
24011c4c:	3feb020c 	.word	0x3feb020c
24011c50:	3f6b020c 	.word	0x3f6b020c
24011c54:	3c23d70a 	.word	0x3c23d70a
24011c58:	3ca3d70a 	.word	0x3ca3d70a
24011c5c:	3cf5c28f 	.word	0x3cf5c28f
24011c60:	3f0b6efd 	.word	0x3f0b6efd
24011c64:	3e39e952 	.word	0x3e39e952
24011c68:	3d23d70a 	.word	0x3d23d70a

24011c6c <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24011c6c:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c6e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011c72:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
24011c76:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 24012000 <tDiodeFilter_tick+0x394>
    if (testVal!= 0.0f)
24011c7a:	eddf 5ae2 	vldr	s11, [pc, #904]	; 24012004 <tDiodeFilter_tick+0x398>
{
24011c7e:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c82:	ed93 4a03 	vldr	s8, [r3, #12]
24011c86:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24011c8a:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c8e:	ee66 7ac4 	vnmul.f32	s15, s13, s8
24011c92:	ed93 2a08 	vldr	s4, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24011c96:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011c9a:	ed93 5a02 	vldr	s10, [r3, #8]
24011c9e:	eee6 7a23 	vfma.f32	s15, s12, s7
24011ca2:	ee67 7a82 	vmul.f32	s15, s15, s4
    Lfloat a = x*x;
24011ca6:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011caa:	eea7 7aa4 	vfma.f32	s14, s15, s9
24011cae:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
24011cb2:	eeb4 7a65 	vcmp.f32	s14, s11
24011cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011cba:	f000 8194 	beq.w	24011fe6 <tDiodeFilter_tick+0x37a>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cbe:	eddf 4ad2 	vldr	s9, [pc, #840]	; 24012008 <tDiodeFilter_tick+0x39c>
24011cc2:	ee77 4a24 	vadd.f32	s9, s14, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011cc6:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cca:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011cce:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011cd2:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24011cd6:	eddf 1acc 	vldr	s3, [pc, #816]	; 24012008 <tDiodeFilter_tick+0x39c>
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011cda:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011cde:	ee33 7ac3 	vsub.f32	s14, s7, s6
24011ce2:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
24011ce6:	eddf 5ac9 	vldr	s11, [pc, #804]	; 2401200c <tDiodeFilter_tick+0x3a0>
24011cea:	eeb0 8a61 	vmov.f32	s16, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011cee:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 24012000 <tDiodeFilter_tick+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011cf2:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011cf6:	ee77 5aa5 	vadd.f32	s11, s15, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011cfa:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011cfe:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
24011d02:	eddf 5ac0 	vldr	s11, [pc, #768]	; 24012004 <tDiodeFilter_tick+0x398>
    Lfloat a = x*x;
24011d06:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d0a:	eef0 7a46 	vmov.f32	s15, s12
24011d0e:	ee25 6a01 	vmul.f32	s12, s10, s2
24011d12:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011d16:	eddf 0abc 	vldr	s1, [pc, #752]	; 24012008 <tDiodeFilter_tick+0x39c>
24011d1a:	eec8 2a24 	vdiv.f32	s5, s16, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011d1e:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d22:	ee67 7a27 	vmul.f32	s15, s14, s15
24011d26:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011d2a:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
24011d2e:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24011d32:	eddf 5ab6 	vldr	s11, [pc, #728]	; 2401200c <tDiodeFilter_tick+0x3a0>
24011d36:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
24011d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24011d3e:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
24011d42:	eddf 5ab0 	vldr	s11, [pc, #704]	; 24012004 <tDiodeFilter_tick+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d46:	bf18      	it	ne
24011d48:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011d4c:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011d50:	ee22 2a82 	vmul.f32	s4, s5, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d54:	eddf 2aaa 	vldr	s5, [pc, #680]	; 24012000 <tDiodeFilter_tick+0x394>
    Lfloat output = 1.0f;
24011d58:	bf08      	it	eq
24011d5a:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011d5e:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011d62:	ee88 7aa1 	vdiv.f32	s14, s17, s3
24011d66:	eddf 1aa9 	vldr	s3, [pc, #676]	; 2401200c <tDiodeFilter_tick+0x3a0>
    Lfloat a = x*x;
24011d6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d6e:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24011d72:	ee77 1aa1 	vadd.f32	s3, s15, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d76:	ee67 2aa2 	vmul.f32	s5, s15, s5
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011d7a:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
24011d7e:	eef4 2a65 	vcmp.f32	s5, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011d82:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
24011d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011d8a:	ee65 5a81 	vmul.f32	s11, s11, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011d8e:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
24011d92:	bf18      	it	ne
24011d94:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011d98:	eddf 0a9b 	vldr	s1, [pc, #620]	; 24012008 <tDiodeFilter_tick+0x39c>
    Lfloat output = 1.0f;
24011d9c:	bf08      	it	eq
24011d9e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011da2:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat a = x*x;
24011da6:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24011daa:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
24011dae:	eddf 1a95 	vldr	s3, [pc, #596]	; 24012004 <tDiodeFilter_tick+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
24011db2:	eec8 7a22 	vdiv.f32	s15, s16, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011db6:	eddf 2a92 	vldr	s5, [pc, #584]	; 24012000 <tDiodeFilter_tick+0x394>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011dba:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011dbe:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011dc2:	ed9f 1a91 	vldr	s2, [pc, #580]	; 24012008 <tDiodeFilter_tick+0x39c>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011dc6:	ee25 5a08 	vmul.f32	s10, s10, s16
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011dca:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
24011dce:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24011dd2:	eddf 1a8e 	vldr	s3, [pc, #568]	; 2401200c <tDiodeFilter_tick+0x3a0>
24011dd6:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
24011dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011dde:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011de2:	bf18      	it	ne
24011de4:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011de8:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24011dec:	bf08      	it	eq
24011dee:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011df2:	eee5 0aa1 	vfma.f32	s1, s11, s3
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011df6:	ee66 1a88 	vmul.f32	s3, s13, s16
    Lfloat a = x*x;
24011dfa:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24011dfe:	eec0 5aa2 	vdiv.f32	s11, s1, s5
24011e02:	eddf 0a81 	vldr	s1, [pc, #516]	; 24012008 <tDiodeFilter_tick+0x39c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011e06:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011e0a:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011e0e:	eddf 5a7c 	vldr	s11, [pc, #496]	; 24012000 <tDiodeFilter_tick+0x394>
24011e12:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
24011e16:	eddf 2a7b 	vldr	s5, [pc, #492]	; 24012004 <tDiodeFilter_tick+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011e1a:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24011e1e:	eef4 5a62 	vcmp.f32	s11, s5
24011e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011e26:	bf18      	it	ne
24011e28:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011e2c:	ed9f 1a77 	vldr	s2, [pc, #476]	; 2401200c <tDiodeFilter_tick+0x3a0>
    Lfloat output = 1.0f;
24011e30:	bf08      	it	eq
24011e32:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011e36:	ee31 1a81 	vadd.f32	s2, s3, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e3a:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24011e3e:	eee1 0a81 	vfma.f32	s1, s3, s2
24011e42:	ee36 1aa3 	vadd.f32	s2, s13, s7
24011e46:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
24011e4a:	eef0 8a61 	vmov.f32	s17, s3
24011e4e:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e52:	ee73 2a24 	vadd.f32	s5, s6, s9
24011e56:	ee74 0a81 	vadd.f32	s1, s9, s2
24011e5a:	ee72 2a81 	vadd.f32	s5, s5, s2
24011e5e:	eeb0 1a60 	vmov.f32	s2, s1
24011e62:	eee0 2a02 	vfma.f32	s5, s0, s4
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011e66:	ee28 5a05 	vmul.f32	s10, s16, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e6a:	eea2 1a87 	vfma.f32	s2, s5, s14
24011e6e:	ee75 2aa5 	vadd.f32	s5, s11, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e72:	ee35 9a29 	vadd.f32	s18, s10, s19
24011e76:	eee5 8a21 	vfma.f32	s17, s10, s3
24011e7a:	eee7 5a22 	vfma.f32	s11, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e7e:	ee66 2a87 	vmul.f32	s5, s13, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e82:	ee75 0a0a 	vadd.f32	s1, s10, s20
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011e86:	eee1 5a27 	vfma.f32	s11, s2, s15
24011e8a:	eeb0 1a66 	vmov.f32	s2, s13
24011e8e:	eea2 1aa1 	vfma.f32	s2, s5, s3
24011e92:	ee62 2aa9 	vmul.f32	s5, s5, s19
24011e96:	eee6 2aa1 	vfma.f32	s5, s13, s3
24011e9a:	eea2 1aa7 	vfma.f32	s2, s5, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011e9e:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011ea2:	eea5 1a86 	vfma.f32	s2, s11, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011ea6:	eef0 5a62 	vmov.f32	s11, s5
24011eaa:	eee5 2a21 	vfma.f32	s5, s10, s3
24011eae:	eee4 5a02 	vfma.f32	s11, s8, s4
24011eb2:	eeb0 8a62 	vmov.f32	s16, s5
24011eb6:	ee75 2a25 	vadd.f32	s5, s10, s11
24011eba:	eef0 5a45 	vmov.f32	s11, s10
24011ebe:	eea2 9a87 	vfma.f32	s18, s5, s14
24011ec2:	ee75 2a21 	vadd.f32	s5, s10, s3
24011ec6:	eee8 2a07 	vfma.f32	s5, s16, s14
24011eca:	eeb0 8a68 	vmov.f32	s16, s17
24011ece:	eee9 2a27 	vfma.f32	s5, s18, s15
24011ed2:	ee20 9a87 	vmul.f32	s18, s1, s14
24011ed6:	eea9 8a29 	vfma.f32	s16, s18, s19
24011eda:	eee9 5a21 	vfma.f32	s11, s18, s3
24011ede:	eee8 5a27 	vfma.f32	s11, s16, s15
24011ee2:	eee2 5a86 	vfma.f32	s11, s5, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24011ee6:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
24011eea:	eef4 5a62 	vcmp.f32	s11, s5
24011eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24011ef2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011ef6:	bf14      	ite	ne
24011ef8:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
24011efc:	eddf 5a44 	vldreq	s11, [pc, #272]	; 24012010 <tDiodeFilter_tick+0x3a4>
    if (t1 == 0.0f)
24011f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24011f04:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
24011f08:	d075      	beq.n	24011ff6 <tDiodeFilter_tick+0x38a>
24011f0a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24011f0e:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24011f12:	eef5 7a40 	vcmp.f32	s15, #0.0
24011f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f1a:	d067      	beq.n	24011fec <tDiodeFilter_tick+0x380>
24011f1c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24011f20:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24011f24:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
24011f28:	ed83 0a07 	vstr	s0, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011f2c:	eeb0 8a66 	vmov.f32	s16, s13
    Lfloat xx = (in - f->r*y3);
24011f30:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
24011f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011f38:	eeb0 1a64 	vmov.f32	s2, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011f3c:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
24011f40:	bf08      	it	eq
24011f42:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 24012010 <tDiodeFilter_tick+0x3a4>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011f46:	ee70 0a86 	vadd.f32	s1, s1, s12
24011f4a:	eea6 1a22 	vfma.f32	s2, s12, s5
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011f4e:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011f52:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    Lfloat xx = (in - f->r*y3);
24011f56:	ee70 0a44 	vsub.f32	s1, s0, s8
    return tanhf(y3*f->r);
24011f5a:	eeb0 0a44 	vmov.f32	s0, s8
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011f5e:	ee88 4a06 	vdiv.f32	s8, s16, s12
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011f62:	ee95 1a84 	vfnms.f32	s2, s11, s8
24011f66:	eeb0 8a41 	vmov.f32	s16, s2
24011f6a:	eeb0 1a63 	vmov.f32	s2, s7
24011f6e:	eec8 5a27 	vdiv.f32	s11, s16, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011f72:	eea7 1a84 	vfma.f32	s2, s15, s8
24011f76:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f7a:	ee75 1ac4 	vsub.f32	s3, s11, s8
24011f7e:	ee61 1aa7 	vmul.f32	s3, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011f82:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011f86:	ee34 1a62 	vsub.f32	s2, s8, s5
24011f8a:	ee21 1a06 	vmul.f32	s2, s2, s12
24011f8e:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f92:	ee72 2ac4 	vsub.f32	s5, s5, s8
24011f96:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011f9a:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011f9e:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011fa2:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011fa6:	ee75 5ac8 	vsub.f32	s11, s11, s16
24011faa:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
24011fae:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011fb2:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011fb6:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011fba:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011fbe:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011fc2:	eee5 4a22 	vfma.f32	s9, s10, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011fc6:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011fca:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011fce:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011fd2:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011fd6:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011fda:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
24011fde:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
24011fe2:	f004 b821 	b.w	24016028 <tanhf>
    Lfloat output = 1.0f;
24011fe6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
24011fea:	e66c      	b.n	24011cc6 <tDiodeFilter_tick+0x5a>
24011fec:	eddf 5a09 	vldr	s11, [pc, #36]	; 24012014 <tDiodeFilter_tick+0x3a8>
        t2 = 0.000001f;
24011ff0:	eddf 7a07 	vldr	s15, [pc, #28]	; 24012010 <tDiodeFilter_tick+0x3a4>
24011ff4:	e796      	b.n	24011f24 <tDiodeFilter_tick+0x2b8>
24011ff6:	eddf 1a07 	vldr	s3, [pc, #28]	; 24012014 <tDiodeFilter_tick+0x3a8>
        t1 = 0.000001f;
24011ffa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24012010 <tDiodeFilter_tick+0x3a4>
24011ffe:	e788      	b.n	24011f12 <tDiodeFilter_tick+0x2a6>
24012000:	43d20000 	.word	0x43d20000
24012004:	c46c4000 	.word	0xc46c4000
24012008:	446c4000 	.word	0x446c4000
2401200c:	42d20000 	.word	0x42d20000
24012010:	358637bd 	.word	0x358637bd
24012014:	3f800008 	.word	0x3f800008

24012018 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24012018:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401201a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401201e:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
24012022:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 240123ac <tDiodeFilter_tickEfficient+0x394>
    if (testVal!= 0.0f)
24012026:	eddf 5ae2 	vldr	s11, [pc, #904]	; 240123b0 <tDiodeFilter_tickEfficient+0x398>
{
2401202a:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401202e:	ed93 4a03 	vldr	s8, [r3, #12]
24012032:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24012036:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401203a:	ee66 7ac4 	vnmul.f32	s15, s13, s8
2401203e:	ed93 2a08 	vldr	s4, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24012042:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24012046:	ed93 5a02 	vldr	s10, [r3, #8]
2401204a:	eee6 7a23 	vfma.f32	s15, s12, s7
2401204e:	ee67 7a82 	vmul.f32	s15, s15, s4
    Lfloat a = x*x;
24012052:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012056:	eea7 7aa4 	vfma.f32	s14, s15, s9
2401205a:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
2401205e:	eeb4 7a65 	vcmp.f32	s14, s11
24012062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012066:	f000 8194 	beq.w	24012392 <tDiodeFilter_tickEfficient+0x37a>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401206a:	eddf 4ad2 	vldr	s9, [pc, #840]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
2401206e:	ee77 4a24 	vadd.f32	s9, s14, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012072:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012076:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401207a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401207e:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24012082:	eddf 1acc 	vldr	s3, [pc, #816]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012086:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401208a:	ee33 7ac3 	vsub.f32	s14, s7, s6
2401208e:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
24012092:	eddf 5ac9 	vldr	s11, [pc, #804]	; 240123b8 <tDiodeFilter_tickEfficient+0x3a0>
24012096:	eeb0 8a61 	vmov.f32	s16, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401209a:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 240123ac <tDiodeFilter_tickEfficient+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401209e:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
240120a2:	ee77 5aa5 	vadd.f32	s11, s15, s11
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240120a6:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240120aa:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
240120ae:	eddf 5ac0 	vldr	s11, [pc, #768]	; 240123b0 <tDiodeFilter_tickEfficient+0x398>
    Lfloat a = x*x;
240120b2:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120b6:	eef0 7a46 	vmov.f32	s15, s12
240120ba:	ee25 6a01 	vmul.f32	s12, s10, s2
240120be:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240120c2:	eddf 0abc 	vldr	s1, [pc, #752]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
240120c6:	eec8 2a24 	vdiv.f32	s5, s16, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240120ca:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120ce:	ee67 7a27 	vmul.f32	s15, s14, s15
240120d2:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
240120d6:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
240120da:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
240120de:	eddf 5ab6 	vldr	s11, [pc, #728]	; 240123b8 <tDiodeFilter_tickEfficient+0x3a0>
240120e2:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
240120e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
240120ea:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
240120ee:	eddf 5ab0 	vldr	s11, [pc, #704]	; 240123b0 <tDiodeFilter_tickEfficient+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240120f2:	bf18      	it	ne
240120f4:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240120f8:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240120fc:	ee22 2a82 	vmul.f32	s4, s5, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012100:	eddf 2aaa 	vldr	s5, [pc, #680]	; 240123ac <tDiodeFilter_tickEfficient+0x394>
    Lfloat output = 1.0f;
24012104:	bf08      	it	eq
24012106:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401210a:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401210e:	ee88 7aa1 	vdiv.f32	s14, s17, s3
24012112:	eddf 1aa9 	vldr	s3, [pc, #676]	; 240123b8 <tDiodeFilter_tickEfficient+0x3a0>
    Lfloat a = x*x;
24012116:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401211a:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
2401211e:	ee77 1aa1 	vadd.f32	s3, s15, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012122:	ee67 2aa2 	vmul.f32	s5, s15, s5
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24012126:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
2401212a:	eef4 2a65 	vcmp.f32	s5, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2401212e:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
24012132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24012136:	ee65 5a81 	vmul.f32	s11, s11, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401213a:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
2401213e:	bf18      	it	ne
24012140:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012144:	eddf 0a9b 	vldr	s1, [pc, #620]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
    Lfloat output = 1.0f;
24012148:	bf08      	it	eq
2401214a:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401214e:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat a = x*x;
24012152:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
24012156:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
2401215a:	eddf 1a95 	vldr	s3, [pc, #596]	; 240123b0 <tDiodeFilter_tickEfficient+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
2401215e:	eec8 7a22 	vdiv.f32	s15, s16, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012162:	eddf 2a92 	vldr	s5, [pc, #584]	; 240123ac <tDiodeFilter_tickEfficient+0x394>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012166:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401216a:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401216e:	ed9f 1a91 	vldr	s2, [pc, #580]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012172:	ee25 5a08 	vmul.f32	s10, s10, s16
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24012176:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
2401217a:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
2401217e:	eddf 1a8e 	vldr	s3, [pc, #568]	; 240123b8 <tDiodeFilter_tickEfficient+0x3a0>
24012182:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
24012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401218a:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401218e:	bf18      	it	ne
24012190:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24012194:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24012198:	bf08      	it	eq
2401219a:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401219e:	eee5 0aa1 	vfma.f32	s1, s11, s3
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240121a2:	ee66 1a88 	vmul.f32	s3, s13, s16
    Lfloat a = x*x;
240121a6:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
240121aa:	eec0 5aa2 	vdiv.f32	s11, s1, s5
240121ae:	eddf 0a81 	vldr	s1, [pc, #516]	; 240123b4 <tDiodeFilter_tickEfficient+0x39c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240121b2:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240121b6:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240121ba:	eddf 5a7c 	vldr	s11, [pc, #496]	; 240123ac <tDiodeFilter_tickEfficient+0x394>
240121be:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
240121c2:	eddf 2a7b 	vldr	s5, [pc, #492]	; 240123b0 <tDiodeFilter_tickEfficient+0x398>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240121c6:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
240121ca:	eef4 5a62 	vcmp.f32	s11, s5
240121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240121d2:	bf18      	it	ne
240121d4:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240121d8:	ed9f 1a77 	vldr	s2, [pc, #476]	; 240123b8 <tDiodeFilter_tickEfficient+0x3a0>
    Lfloat output = 1.0f;
240121dc:	bf08      	it	eq
240121de:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
240121e2:	ee31 1a81 	vadd.f32	s2, s3, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121e6:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
240121ea:	eee1 0a81 	vfma.f32	s1, s3, s2
240121ee:	ee36 1aa3 	vadd.f32	s2, s13, s7
240121f2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
240121f6:	eef0 8a61 	vmov.f32	s17, s3
240121fa:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240121fe:	ee73 2a24 	vadd.f32	s5, s6, s9
24012202:	ee74 0a81 	vadd.f32	s1, s9, s2
24012206:	ee72 2a81 	vadd.f32	s5, s5, s2
2401220a:	eeb0 1a60 	vmov.f32	s2, s1
2401220e:	eee0 2a02 	vfma.f32	s5, s0, s4
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24012212:	ee28 5a05 	vmul.f32	s10, s16, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012216:	eea2 1a87 	vfma.f32	s2, s5, s14
2401221a:	ee75 2aa5 	vadd.f32	s5, s11, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401221e:	ee35 9a29 	vadd.f32	s18, s10, s19
24012222:	eee5 8a21 	vfma.f32	s17, s10, s3
24012226:	eee7 5a22 	vfma.f32	s11, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401222a:	ee66 2a87 	vmul.f32	s5, s13, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401222e:	ee75 0a0a 	vadd.f32	s1, s10, s20
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24012232:	eee1 5a27 	vfma.f32	s11, s2, s15
24012236:	eeb0 1a66 	vmov.f32	s2, s13
2401223a:	eea2 1aa1 	vfma.f32	s2, s5, s3
2401223e:	ee62 2aa9 	vmul.f32	s5, s5, s19
24012242:	eee6 2aa1 	vfma.f32	s5, s13, s3
24012246:	eea2 1aa7 	vfma.f32	s2, s5, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401224a:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401224e:	eea5 1a86 	vfma.f32	s2, s11, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24012252:	eef0 5a62 	vmov.f32	s11, s5
24012256:	eee5 2a21 	vfma.f32	s5, s10, s3
2401225a:	eee4 5a02 	vfma.f32	s11, s8, s4
2401225e:	eeb0 8a62 	vmov.f32	s16, s5
24012262:	ee75 2a25 	vadd.f32	s5, s10, s11
24012266:	eef0 5a45 	vmov.f32	s11, s10
2401226a:	eea2 9a87 	vfma.f32	s18, s5, s14
2401226e:	ee75 2a21 	vadd.f32	s5, s10, s3
24012272:	eee8 2a07 	vfma.f32	s5, s16, s14
24012276:	eeb0 8a68 	vmov.f32	s16, s17
2401227a:	eee9 2a27 	vfma.f32	s5, s18, s15
2401227e:	ee20 9a87 	vmul.f32	s18, s1, s14
24012282:	eea9 8a29 	vfma.f32	s16, s18, s19
24012286:	eee9 5a21 	vfma.f32	s11, s18, s3
2401228a:	eee8 5a27 	vfma.f32	s11, s16, s15
2401228e:	eee2 5a86 	vfma.f32	s11, s5, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
24012292:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
24012296:	eef4 5a62 	vcmp.f32	s11, s5
2401229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2401229e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240122a2:	bf14      	ite	ne
240122a4:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
240122a8:	eddf 5a44 	vldreq	s11, [pc, #272]	; 240123bc <tDiodeFilter_tickEfficient+0x3a4>
    if (t1 == 0.0f)
240122ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240122b0:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
240122b4:	d075      	beq.n	240123a2 <tDiodeFilter_tickEfficient+0x38a>
240122b6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
240122ba:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240122be:	eef5 7a40 	vcmp.f32	s15, #0.0
240122c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240122c6:	d067      	beq.n	24012398 <tDiodeFilter_tickEfficient+0x380>
240122c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240122cc:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
240122d0:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
240122d4:	ed83 0a07 	vstr	s0, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240122d8:	eeb0 8a66 	vmov.f32	s16, s13
    Lfloat xx = (in - f->r*y3);
240122dc:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
240122e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240122e4:	eeb0 1a64 	vmov.f32	s2, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
240122e8:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
240122ec:	bf08      	it	eq
240122ee:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 240123bc <tDiodeFilter_tickEfficient+0x3a4>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240122f2:	ee70 0a86 	vadd.f32	s1, s1, s12
240122f6:	eea6 1a22 	vfma.f32	s2, s12, s5
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
240122fa:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240122fe:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    Lfloat xx = (in - f->r*y3);
24012302:	ee70 0a44 	vsub.f32	s1, s0, s8
    return LEAF_tanh(y3*f->r);
24012306:	eeb0 0a44 	vmov.f32	s0, s8
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401230a:	ee88 4a06 	vdiv.f32	s8, s16, s12
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401230e:	ee95 1a84 	vfnms.f32	s2, s11, s8
24012312:	eeb0 8a41 	vmov.f32	s16, s2
24012316:	eeb0 1a63 	vmov.f32	s2, s7
2401231a:	eec8 5a27 	vdiv.f32	s11, s16, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401231e:	eea7 1a84 	vfma.f32	s2, s15, s8
24012322:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24012326:	ee75 1ac4 	vsub.f32	s3, s11, s8
2401232a:	ee61 1aa7 	vmul.f32	s3, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2401232e:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012332:	ee34 1a62 	vsub.f32	s2, s8, s5
24012336:	ee21 1a06 	vmul.f32	s2, s2, s12
2401233a:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401233e:	ee72 2ac4 	vsub.f32	s5, s5, s8
24012342:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012346:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401234a:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401234e:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012352:	ee75 5ac8 	vsub.f32	s11, s11, s16
24012356:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
2401235a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401235e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012362:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012366:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401236a:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401236e:	eee5 4a22 	vfma.f32	s9, s10, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24012372:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012376:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2401237a:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401237e:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24012382:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24012386:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
2401238a:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
2401238e:	f000 babd 	b.w	2401290c <LEAF_tanh>
    Lfloat output = 1.0f;
24012392:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
24012396:	e66c      	b.n	24012072 <tDiodeFilter_tickEfficient+0x5a>
24012398:	eddf 5a09 	vldr	s11, [pc, #36]	; 240123c0 <tDiodeFilter_tickEfficient+0x3a8>
        t2 = 0.000001f;
2401239c:	eddf 7a07 	vldr	s15, [pc, #28]	; 240123bc <tDiodeFilter_tickEfficient+0x3a4>
240123a0:	e796      	b.n	240122d0 <tDiodeFilter_tickEfficient+0x2b8>
240123a2:	eddf 1a07 	vldr	s3, [pc, #28]	; 240123c0 <tDiodeFilter_tickEfficient+0x3a8>
        t1 = 0.000001f;
240123a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240123bc <tDiodeFilter_tickEfficient+0x3a4>
240123aa:	e788      	b.n	240122be <tDiodeFilter_tickEfficient+0x2a6>
240123ac:	43d20000 	.word	0x43d20000
240123b0:	c46c4000 	.word	0xc46c4000
240123b4:	446c4000 	.word	0x446c4000
240123b8:	42d20000 	.word	0x42d20000
240123bc:	358637bd 	.word	0x358637bd
240123c0:	3f800008 	.word	0x3f800008

240123c4 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
240123c4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240123c8:	4b0d      	ldr	r3, [pc, #52]	; (24012400 <tDiodeFilter_setFreqFast+0x3c>)
240123ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
240123ce:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
240123d0:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240123d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240123d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
240123dc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240123e0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
240123e4:	edd0 6a01 	vldr	s13, [r0, #4]
240123e8:	ee77 7a87 	vadd.f32	s15, s15, s14
240123ec:	ed90 7a00 	vldr	s14, [r0]
240123f0:	ee20 0a26 	vmul.f32	s0, s0, s13
240123f4:	eea7 0a27 	vfma.f32	s0, s14, s15
240123f8:	ed81 0a02 	vstr	s0, [r1, #8]
}
240123fc:	4770      	bx	lr
240123fe:	bf00      	nop
24012400:	24018428 	.word	0x24018428

24012404 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24012404:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012408:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
2401240c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
24012410:	eef0 0a67 	vmov.f32	s1, s15
{
24012414:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24012416:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24012418:	eee0 0a07 	vfma.f32	s1, s0, s14
2401241c:	eeb0 0a67 	vmov.f32	s0, s15
24012420:	f01b f996 	bl	2402d750 <__LEAF_clip_veneer>
24012424:	ed84 0a03 	vstr	s0, [r4, #12]
}
24012428:	bd10      	pop	{r4, pc}
2401242a:	bf00      	nop

2401242c <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
2401242c:	b570      	push	{r4, r5, r6, lr}
2401242e:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24012432:	698d      	ldr	r5, [r1, #24]
{
24012434:	eef0 8a40 	vmov.f32	s17, s0
24012438:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401243a:	2038      	movs	r0, #56	; 0x38
2401243c:	4629      	mov	r1, r5
{
2401243e:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24012442:	f000 fce1 	bl	24012e08 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24012446:	eddf 7a18 	vldr	s15, [pc, #96]	; 240124a8 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401244a:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
2401244c:	2301      	movs	r3, #1
    f->mempool = m;
2401244e:	6005      	str	r5, [r0, #0]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24012450:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
24012454:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24012456:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
24012458:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
2401245c:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24012460:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
24012464:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
24012466:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
2401246a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401246e:	f003 fadf 	bl	24015a30 <tan>
24012472:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
24012476:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
2401247a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
2401247e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
24012482:	490a      	ldr	r1, [pc, #40]	; (240124ac <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
24012484:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
24012488:	4b09      	ldr	r3, [pc, #36]	; (240124b0 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
2401248a:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
2401248e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
24012492:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
24012494:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
24012496:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
24012498:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
2401249c:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
240124a0:	62a3      	str	r3, [r4, #40]	; 0x28
}
240124a2:	ecbd 8b02 	vpop	{d8}
240124a6:	bd70      	pop	{r4, r5, r6, pc}
240124a8:	40490fdb 	.word	0x40490fdb
240124ac:	3dcccccd 	.word	0x3dcccccd
240124b0:	3d23d70a 	.word	0x3d23d70a

240124b4 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
240124b4:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
240124b6:	eddf 7a8f 	vldr	s15, [pc, #572]	; 240126f4 <tLadderFilter_tick+0x240>
{
240124ba:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
240124be:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
240124c0:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
240124c4:	2900      	cmp	r1, #0
240124c6:	f340 8110 	ble.w	240126ea <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240124ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
240124ce:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240124d2:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240124d6:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
240124da:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240124de:	ed92 7a08 	vldr	s14, [r2, #32]
240124e2:	ee72 2a27 	vadd.f32	s5, s4, s15
240124e6:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
240124ea:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
240124ee:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
240124f2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
240124f6:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
240124fa:	ee25 9a28 	vmul.f32	s18, s10, s17
240124fe:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012502:	ee62 2a87 	vmul.f32	s5, s5, s14
24012506:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401250a:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
2401250e:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
24012510:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012514:	ed9f 8a78 	vldr	s16, [pc, #480]	; 240126f8 <tLadderFilter_tick+0x244>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24012518:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
2401251c:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
2401251e:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
24012522:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
24012526:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012528:	ee65 5aa5 	vmul.f32	s11, s11, s11
2401252c:	ee26 6a06 	vmul.f32	s12, s12, s12
24012530:	ee66 6aa6 	vmul.f32	s13, s13, s13
24012534:	ee22 baa5 	vmul.f32	s22, s5, s11
24012538:	ee26 ca22 	vmul.f32	s24, s12, s5
2401253c:	ee72 5a25 	vadd.f32	s11, s4, s11
24012540:	ee32 6a06 	vadd.f32	s12, s4, s12
24012544:	ee66 baa2 	vmul.f32	s23, s13, s5
24012548:	eecb ea25 	vdiv.f32	s29, s22, s11
2401254c:	ee8c ba06 	vdiv.f32	s22, s24, s12
24012550:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
24012554:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012558:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
2401255c:	ee27 7a07 	vmul.f32	s14, s14, s14
24012560:	ee77 eaee 	vsub.f32	s29, s15, s29
24012564:	ee77 6acb 	vsub.f32	s13, s15, s22
24012568:	ee62 5a87 	vmul.f32	s11, s5, s14
2401256c:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24012570:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012574:	ee85 ca87 	vdiv.f32	s24, s11, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24012578:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401257c:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24012580:	ee3e da27 	vadd.f32	s26, s28, s15
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24012584:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24012588:	ee65 ca07 	vmul.f32	s25, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
2401258c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
24012590:	eece 5a0d 	vdiv.f32	s11, s28, s26
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24012594:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24012598:	ee37 cacc 	vsub.f32	s24, s15, s24
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
2401259c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
240125a0:	ee8c eaad 	vdiv.f32	s28, s25, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
240125a4:	ee25 ba0c 	vmul.f32	s22, s10, s24
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240125a8:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240125ac:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
240125b0:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240125b4:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
240125b8:	ee87 daad 	vdiv.f32	s26, s15, s27
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240125bc:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
240125c0:	eecb da25 	vdiv.f32	s27, s22, s11
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
240125c4:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        Lfloat estimate =
240125c8:	ee73 5a2a 	vadd.f32	s11, s6, s21
240125cc:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240125d0:	ee66 6a26 	vmul.f32	s13, s12, s13
240125d4:	ee65 5a89 	vmul.f32	s11, s11, s18
240125d8:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
240125dc:	ee2f 6a2e 	vmul.f32	s12, s30, s29
240125e0:	ee65 5aae 	vmul.f32	s11, s11, s29
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240125e4:	ee2d 7a07 	vmul.f32	s14, s26, s14
240125e8:	ee65 5a8f 	vmul.f32	s11, s11, s30
240125ec:	ee60 ea8e 	vmul.f32	s29, s1, s28
240125f0:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240125f4:	ee2e ca0c 	vmul.f32	s24, s28, s24
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240125f8:	eeb0 ea67 	vmov.f32	s28, s15
240125fc:	eeab eaad 	vfma.f32	s28, s23, s27
24012600:	ee6b 5a25 	vmul.f32	s11, s22, s11
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24012604:	eeb0 ba67 	vmov.f32	s22, s15
24012608:	eeec 5a84 	vfma.f32	s11, s25, s8
2401260c:	eef0 ca64 	vmov.f32	s25, s9
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24012610:	eec9 ba8e 	vdiv.f32	s23, s19, s28
24012614:	eeed ca25 	vfma.f32	s25, s26, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24012618:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401261c:	eeb0 da48 	vmov.f32	s26, s16
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24012620:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24012624:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24012628:	eef0 ca48 	vmov.f32	s25, s16
2401262c:	eeab da0b 	vfma.f32	s26, s22, s22
24012630:	eee5 caa5 	vfma.f32	s25, s11, s11
24012634:	eef1 5acd 	vsqrt.f32	s11, s26
24012638:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2401263c:	ee3b ba65 	vsub.f32	s22, s22, s11
24012640:	eef0 5a40 	vmov.f32	s11, s0
24012644:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24012648:	eeb0 ba43 	vmov.f32	s22, s6
2401264c:	eea5 ba25 	vfma.f32	s22, s10, s11
24012650:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012654:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
24012658:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
2401265c:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
24012660:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24012664:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24012668:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
2401266c:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24012670:	ee36 6a66 	vsub.f32	s12, s12, s13
24012674:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012678:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
2401267c:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24012680:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24012684:	ee76 6ac7 	vsub.f32	s13, s13, s14
24012688:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401268c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24012690:	ee37 7a4c 	vsub.f32	s14, s14, s24
24012694:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
24012698:	f47f af3e 	bne.w	24012518 <tLadderFilter_tick+0x64>
2401269c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
240126a0:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
240126a4:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
240126a8:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240126ac:	ed9f 7a12 	vldr	s14, [pc, #72]	; 240126f8 <tLadderFilter_tick+0x244>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240126b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240126b4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240126b8:	eef0 5a47 	vmov.f32	s11, s14
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240126bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240126c0:	eee0 5aa0 	vfma.f32	s11, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240126c4:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240126c8:	eea0 7aa0 	vfma.f32	s14, s1, s1
240126cc:	eef1 7ae5 	vsqrt.f32	s15, s11
240126d0:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
240126d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
240126d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240126dc:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
240126e0:	ee20 0a0c 	vmul.f32	s0, s0, s24
240126e4:	ecbd 8b10 	vpop	{d8-d15}
240126e8:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240126ea:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
240126ee:	ed9f ca03 	vldr	s24, [pc, #12]	; 240126fc <tLadderFilter_tick+0x248>
240126f2:	e7db      	b.n	240126ac <tLadderFilter_tick+0x1f8>
240126f4:	3c75c28f 	.word	0x3c75c28f
240126f8:	3c23d70a 	.word	0x3c23d70a
240126fc:	00000000 	.word	0x00000000

24012700 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
24012700:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012704:	4b0f      	ldr	r3, [pc, #60]	; (24012744 <tLadderFilter_setFreqFast+0x44>)
24012706:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
2401270a:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2401270c:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012710:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012714:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012718:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401271c:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012720:	edd0 6a01 	vldr	s13, [r0, #4]
24012724:	ee77 7a87 	vadd.f32	s15, s15, s14
24012728:	ed90 7a00 	vldr	s14, [r0]
2401272c:	ee20 0a26 	vmul.f32	s0, s0, s13
24012730:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
24012734:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24012738:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
2401273c:	edc1 7a06 	vstr	s15, [r1, #24]
}
24012740:	4770      	bx	lr
24012742:	bf00      	nop
24012744:	24018428 	.word	0x24018428

24012748 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
24012748:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
2401274a:	6804      	ldr	r4, [r0, #0]
{
2401274c:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24012750:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
24012754:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24012764 <tLadderFilter_setQ+0x1c>
24012758:	f01a fffa 	bl	2402d750 <__LEAF_clip_veneer>
2401275c:	ed84 0a05 	vstr	s0, [r4, #20]
}
24012760:	bd10      	pop	{r4, pc}
24012762:	bf00      	nop
24012764:	3e4ccccd 	.word	0x3e4ccccd

24012768 <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
24012768:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
2401276c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 24012788 <fastertanf+0x20>
24012770:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2401278c <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24012774:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
24012778:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
2401277c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24012780:	ee20 0a27 	vmul.f32	s0, s0, s15
24012784:	4770      	bx	lr
24012786:	bf00      	nop
24012788:	3e502de0 	.word	0x3e502de0
2401278c:	3ea295ea 	.word	0x3ea295ea

24012790 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24012790:	ee10 2a10 	vmov	r2, s0
24012794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
24012798:	4b0d      	ldr	r3, [pc, #52]	; (240127d0 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401279a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
2401279e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240127a2:	ee60 7a27 	vmul.f32	s15, s0, s15
240127a6:	ee00 3a10 	vmov	s0, r3
240127aa:	ee67 7a80 	vmul.f32	s15, s15, s0
240127ae:	eea0 7a67 	vfms.f32	s14, s0, s15
240127b2:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
240127b6:	ee10 3a10 	vmov	r3, s0
240127ba:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
240127be:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
240127c2:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
240127c6:	336e      	adds	r3, #110	; 0x6e
}
240127c8:	ee00 3a10 	vmov	s0, r3
240127cc:	4770      	bx	lr
240127ce:	bf00      	nop
240127d0:	5f3759df 	.word	0x5f3759df

240127d4 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
240127d4:	ee10 3a10 	vmov	r3, s0
240127d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240127dc:	ee00 3a10 	vmov	s0, r3
}
240127e0:	4770      	bx	lr
240127e2:	bf00      	nop

240127e4 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
240127e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240127e8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012814 <fasterexpf+0x30>
240127ec:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
240127f0:	ee27 0aa7 	vmul.f32	s0, s15, s15
240127f4:	ee20 0a00 	vmul.f32	s0, s0, s0
240127f8:	ee20 0a00 	vmul.f32	s0, s0, s0
240127fc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012800:	ee20 0a00 	vmul.f32	s0, s0, s0
24012804:	ee20 0a00 	vmul.f32	s0, s0, s0
24012808:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
2401280c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012810:	4770      	bx	lr
24012812:	bf00      	nop
24012814:	3b800000 	.word	0x3b800000

24012818 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24012818:	ee10 3a10 	vmov	r3, s0
2401281c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24012840 <fastPowf+0x28>
24012820:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
24012824:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
24012828:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
2401282c:	330b      	adds	r3, #11
2401282e:	ee07 3a90 	vmov	s15, r3
24012832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012836:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
2401283a:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
2401283e:	4770      	bx	lr
24012840:	4e7de250 	.word	0x4e7de250

24012844 <LEAF_shaper>:
#else
Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
24012844:	eddf 7a1f 	vldr	s15, [pc, #124]	; 240128c4 <LEAF_shaper+0x80>
24012848:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012850:	d406      	bmi.n	24012860 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
24012852:	eddf 7a1d 	vldr	s15, [pc, #116]	; 240128c8 <LEAF_shaper+0x84>
24012856:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401285a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401285e:	dd02      	ble.n	24012866 <LEAF_shaper+0x22>
24012860:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 240128cc <LEAF_shaper+0x88>
}
24012864:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
24012866:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401286a:	ed9f 5a19 	vldr	s10, [pc, #100]	; 240128d0 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
2401286e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
24012872:	ed9f 4a18 	vldr	s8, [pc, #96]	; 240128d4 <LEAF_shaper+0x90>
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012876:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
2401287a:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401287e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
24012882:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24012886:	ee20 0a25 	vmul.f32	s0, s0, s11
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401288a:	eddf 5a13 	vldr	s11, [pc, #76]	; 240128d8 <LEAF_shaper+0x94>
2401288e:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
24012892:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012896:	ee66 4aa6 	vmul.f32	s9, s13, s13
2401289a:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
2401289e:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
240128a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240128a6:	eea4 7a85 	vfma.f32	s14, s9, s10
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
240128aa:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
240128ae:	ee60 0a84 	vmul.f32	s1, s1, s8
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
240128b2:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
240128b6:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
240128ba:	ee20 0a80 	vmul.f32	s0, s1, s0
240128be:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
240128c2:	4770      	bx	lr
240128c4:	bfb504f3 	.word	0xbfb504f3
240128c8:	3fb504f3 	.word	0x3fb504f3
240128cc:	00000000 	.word	0x00000000
240128d0:	3c800000 	.word	0x3c800000
240128d4:	3f272f05 	.word	0x3f272f05
240128d8:	3d4ccccd 	.word	0x3d4ccccd

240128dc <LEAF_round>:
    rnd = fabsf(rnd);
240128dc:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
240128e0:	eddf 7a06 	vldr	s15, [pc, #24]	; 240128fc <LEAF_round+0x20>
240128e4:	eef4 0ae7 	vcmpe.f32	s1, s15
240128e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240128ec:	d905      	bls.n	240128fa <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
240128ee:	eec0 7a20 	vdiv.f32	s15, s0, s1
240128f2:	feb8 0a67 	vrinta.f32	s0, s15
240128f6:	ee20 0a20 	vmul.f32	s0, s0, s1
}
240128fa:	4770      	bx	lr
240128fc:	33d6bf95 	.word	0x33d6bf95

24012900 <LEAF_bitwise_xor>:
    return unholy.f;
24012900:	ee10 3a10 	vmov	r3, s0
24012904:	4043      	eors	r3, r0
24012906:	ee00 3a10 	vmov	s0, r3
}
2401290a:	4770      	bx	lr

2401290c <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
2401290c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
24012910:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012918:	d418      	bmi.n	2401294c <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
2401291a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2401291e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012926:	dd02      	ble.n	2401292e <LEAF_tanh+0x22>
        return 1.0f;
24012928:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
2401292c:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
2401292e:	ee60 6a00 	vmul.f32	s13, s0, s0
24012932:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
24012936:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
2401293a:	ee36 7aa7 	vadd.f32	s14, s13, s15
2401293e:	eee6 7a86 	vfma.f32	s15, s13, s12
24012942:	ee27 7a00 	vmul.f32	s14, s14, s0
24012946:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401294a:	4770      	bx	lr
        return -1.0f;
2401294c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012950:	4770      	bx	lr
24012952:	bf00      	nop

24012954 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
24012954:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24012956:	1e4b      	subs	r3, r1, #1
24012958:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
2401295c:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
2401295e:	ee07 3a90 	vmov	s15, r3
24012962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012966:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
2401296a:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
2401296e:	dd16      	ble.n	2401299e <LEAF_generate_exp+0x4a>
24012970:	4604      	mov	r4, r0
24012972:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012976:	eeb0 8a60 	vmov.f32	s16, s1
2401297a:	eef0 8a40 	vmov.f32	s17, s0
2401297e:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24012982:	eef0 0a48 	vmov.f32	s1, s16
24012986:	eeb0 0a68 	vmov.f32	s0, s17
2401298a:	f003 f9c1 	bl	24015d10 <powf>
2401298e:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24012992:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
24012996:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2401299a:	42a5      	cmp	r5, r4
2401299c:	d1f1      	bne.n	24012982 <LEAF_generate_exp+0x2e>
    }
}
2401299e:	ecbd 8b04 	vpop	{d8-d9}
240129a2:	bd38      	pop	{r3, r4, r5, pc}

240129a4 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
240129a4:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
240129a6:	ee31 1a40 	vsub.f32	s2, s2, s0
{
240129aa:	460d      	mov	r5, r1
240129ac:	4604      	mov	r4, r0
240129ae:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
240129b2:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
240129b6:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
240129ba:	ee81 0a29 	vdiv.f32	s0, s2, s19
240129be:	f003 f8e7 	bl	24015b90 <logf>
    Lfloat increment = 1.0 / (Lfloat)(size-1);
240129c2:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
240129c4:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0 / (Lfloat)(size-1);
240129c6:	ee07 3a90 	vmov	s15, r3
240129ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240129ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240129d2:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
240129d6:	dd19      	ble.n	24012a0c <LEAF_generate_table_skew_non_sym+0x68>
240129d8:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 24012a14 <LEAF_generate_table_skew_non_sym+0x70>
240129dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0;
240129e0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 24012a18 <LEAF_generate_table_skew_non_sym+0x74>
240129e4:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
240129e8:	eeb0 0a48 	vmov.f32	s0, s16
240129ec:	f003 f8d0 	bl	24015b90 <logf>
240129f0:	ee20 0a09 	vmul.f32	s0, s0, s18
240129f4:	f003 f850 	bl	24015a98 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
240129f8:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
240129fc:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24012a00:	eee9 7a80 	vfma.f32	s15, s19, s0
24012a04:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012a08:	42a5      	cmp	r5, r4
24012a0a:	d1ed      	bne.n	240129e8 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
24012a0c:	ecbd 8b06 	vpop	{d8-d10}
24012a10:	bd38      	pop	{r3, r4, r5, pc}
24012a12:	bf00      	nop
24012a14:	bfb8aa3b 	.word	0xbfb8aa3b
24012a18:	00000000 	.word	0x00000000

24012a1c <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
24012a1c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24012a1e:	1e4b      	subs	r3, r1, #1
24012a20:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24012a24:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24012a26:	ee07 3a90 	vmov	s15, r3
24012a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012a2e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24012a32:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012a36:	dd12      	ble.n	24012a5e <LEAF_generate_atodb+0x42>
24012a38:	4604      	mov	r4, r0
24012a3a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012a3e:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
24012a42:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24012a46:	eeb0 0a48 	vmov.f32	s0, s16
24012a4a:	f003 fb85 	bl	24016158 <log10f>
24012a4e:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
24012a52:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24012a56:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012a5a:	42a5      	cmp	r5, r4
24012a5c:	d1f3      	bne.n	24012a46 <LEAF_generate_atodb+0x2a>
}
24012a5e:	ecbd 8b04 	vpop	{d8-d9}
24012a62:	bd38      	pop	{r3, r4, r5, pc}

24012a64 <LEAF_generate_dbtoa>:
{
24012a64:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012a66:	1e4b      	subs	r3, r1, #1
24012a68:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
24012a6c:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012a6e:	ee07 3a90 	vmov	s15, r3
24012a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012a76:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012a7a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012a7e:	dd14      	ble.n	24012aaa <LEAF_generate_dbtoa+0x46>
24012a80:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
24012a82:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24012ab0 <LEAF_generate_dbtoa+0x4c>
24012a86:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24012ab4 <LEAF_generate_dbtoa+0x50>
24012a8a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
24012a8e:	eeb0 8a40 	vmov.f32	s16, s0
24012a92:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24012a96:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24012a9a:	ee20 0a09 	vmul.f32	s0, s0, s18
24012a9e:	f002 fffb 	bl	24015a98 <expf>
        buffer[i] = dbtoa(x);
24012aa2:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012aa6:	42a5      	cmp	r5, r4
24012aa8:	d1f3      	bne.n	24012a92 <LEAF_generate_dbtoa+0x2e>
}
24012aaa:	ecbd 8b04 	vpop	{d8-d9}
24012aae:	bd38      	pop	{r3, r4, r5, pc}
24012ab0:	3d4ccccd 	.word	0x3d4ccccd
24012ab4:	40135d8e 	.word	0x40135d8e

24012ab8 <LEAF_generate_mtof>:
{
24012ab8:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012aba:	1e4b      	subs	r3, r1, #1
24012abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24012ac0:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012ac2:	ee07 3a90 	vmov	s15, r3
24012ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012aca:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012ace:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24012ad2:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24012ad6:	dd29      	ble.n	24012b2c <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
24012ad8:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24012b40 <LEAF_generate_mtof+0x88>
24012adc:	eef0 9a40 	vmov.f32	s19, s0
24012ae0:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24012ae2:	eddf 8a18 	vldr	s17, [pc, #96]	; 24012b44 <LEAF_generate_mtof+0x8c>
24012ae6:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24012aea:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24012b48 <LEAF_generate_mtof+0x90>
24012aee:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24012af2:	ed9f ca16 	vldr	s24, [pc, #88]	; 24012b4c <LEAF_generate_mtof+0x94>
24012af6:	eddf ba16 	vldr	s23, [pc, #88]	; 24012b50 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
24012afa:	eeb0 0a69 	vmov.f32	s0, s19
24012afe:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
24012b02:	e006      	b.n	24012b12 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012b04:	eeb4 0ac8 	vcmpe.f32	s0, s16
24012b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b0c:	dd11      	ble.n	24012b32 <LEAF_generate_mtof+0x7a>
24012b0e:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24012b12:	eeb4 0ae8 	vcmpe.f32	s0, s17
24012b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b1a:	d8f3      	bhi.n	24012b04 <LEAF_generate_mtof+0x4c>
24012b1c:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24012b20:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012b24:	42a5      	cmp	r5, r4
        x += increment;
24012b26:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24012b2a:	d1e6      	bne.n	24012afa <LEAF_generate_mtof+0x42>
}
24012b2c:	ecbd 8b0a 	vpop	{d8-d12}
24012b30:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012b32:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012b36:	f002 ffaf 	bl	24015a98 <expf>
24012b3a:	ee60 7a2b 	vmul.f32	s15, s0, s23
24012b3e:	e7ef      	b.n	24012b20 <LEAF_generate_mtof+0x68>
24012b40:	00000000 	.word	0x00000000
24012b44:	c4bb8000 	.word	0xc4bb8000
24012b48:	44bb6000 	.word	0x44bb6000
24012b4c:	3d6c9820 	.word	0x3d6c9820
24012b50:	4102d013 	.word	0x4102d013

24012b54 <LEAF_poly_blep>:
    if (t < dt) {
24012b54:	eeb4 0ae0 	vcmpe.f32	s0, s1
24012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b5c:	d418      	bmi.n	24012b90 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
24012b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012b62:	ee77 7a60 	vsub.f32	s15, s14, s1
24012b66:	eef4 7ac0 	vcmpe.f32	s15, s0
24012b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012b6e:	d50c      	bpl.n	24012b8a <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
24012b70:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
24012b74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
24012b78:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
24012b7c:	ee76 7a26 	vadd.f32	s15, s12, s13
24012b80:	eea7 7a86 	vfma.f32	s14, s15, s12
24012b84:	eeb0 0a47 	vmov.f32	s0, s14
24012b88:	4770      	bx	lr
    else return 0.0f;
24012b8a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24012ba8 <LEAF_poly_blep+0x54>
}
24012b8e:	4770      	bx	lr
        t /= dt;
24012b90:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
24012b94:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012b98:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24012b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
24012ba0:	eea7 0a87 	vfma.f32	s0, s15, s14
24012ba4:	4770      	bx	lr
24012ba6:	bf00      	nop
24012ba8:	00000000 	.word	0x00000000

24012bac <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
24012bac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012bb4:	db2c      	blt.n	24012c10 <LEAF_poly_blamp+0x64>
24012bb6:	ee70 7aa0 	vadd.f32	s15, s1, s1
24012bba:	eef4 7ac0 	vcmpe.f32	s15, s0
24012bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012bc2:	dd25      	ble.n	24012c10 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
24012bc4:	ee80 6a20 	vdiv.f32	s12, s0, s1
        Lfloat u = 2.0f - x;
24012bc8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        if (t < dt)
24012bcc:	eeb4 0ae0 	vcmpe.f32	s0, s1
24012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
24012bd4:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat u2 = u * u;
24012bd8:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
24012bdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012be0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
24012be4:	d517      	bpl.n	24012c16 <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
24012be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
24012bea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24012c24 <LEAF_poly_blamp+0x78>
24012bee:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
24012bf2:	ee60 0a80 	vmul.f32	s1, s1, s0
        	Lfloat v = 1.0f - x;
24012bf6:	ee36 7ac6 	vsub.f32	s14, s13, s12
        	Lfloat v2 = v * v;
24012bfa:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
24012bfe:	ee27 7a25 	vmul.f32	s14, s14, s11
24012c02:	ee27 7a26 	vmul.f32	s14, s14, s13
24012c06:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
24012c0a:	ee20 0aa7 	vmul.f32	s0, s1, s15
24012c0e:	4770      	bx	lr
24012c10:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012c28 <LEAF_poly_blamp+0x7c>
}
24012c14:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
24012c16:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012c2c <LEAF_poly_blamp+0x80>
24012c1a:	ee60 0a80 	vmul.f32	s1, s1, s0
24012c1e:	ee20 0aa7 	vmul.f32	s0, s1, s15
24012c22:	4770      	bx	lr
24012c24:	416fffff 	.word	0x416fffff
24012c28:	00000000 	.word	0x00000000
24012c2c:	c16fffff 	.word	0xc16fffff

24012c30 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012c30:	ee71 1ac0 	vsub.f32	s3, s3, s0
24012c34:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c1 = 0.5f * (yy2 - yy0);
24012c38:	ee31 6a40 	vsub.f32	s12, s2, s0
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012c3c:	ee71 1aa0 	vadd.f32	s3, s3, s1
24012c40:	eef0 7a60 	vmov.f32	s15, s1
24012c44:	ee30 7ac1 	vsub.f32	s14, s1, s2
24012c48:	ee71 1ac1 	vsub.f32	s3, s3, s2
24012c4c:	eed6 7a26 	vfnms.f32	s15, s12, s13
24012c50:	eea1 7aa6 	vfma.f32	s14, s3, s13
    Lfloat c2 = y0my1 + c1 - c3;
24012c54:	ee70 7a27 	vadd.f32	s15, s0, s15
24012c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24012c5c:	eee7 7a02 	vfma.f32	s15, s14, s4
24012c60:	ee67 7a82 	vmul.f32	s15, s15, s4
24012c64:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24012c68:	eee7 0a82 	vfma.f32	s1, s15, s4
24012c6c:	eeb0 0a60 	vmov.f32	s0, s1
24012c70:	4770      	bx	lr
24012c72:	bf00      	nop

24012c74 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24012c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < min)
24012c78:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24012c98 <LEAF_interpolation_linear+0x24>
24012c7c:	fe81 1a67 	vminnm.f32	s2, s2, s15
24012c80:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24012c84:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24012c88:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24012c8c:	eee7 0a80 	vfma.f32	s1, s15, s0
24012c90:	eeb0 0a60 	vmov.f32	s0, s1
24012c94:	4770      	bx	lr
24012c96:	bf00      	nop
24012c98:	00000000 	.word	0x00000000

24012c9c <mtof>:
    if (f <= -1500.0f) return(0);
24012c9c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24012cdc <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24012ca0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24012ce0 <mtof+0x44>
24012ca4:	e006      	b.n	24012cb4 <mtof+0x18>
24012ca6:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012cae:	dd09      	ble.n	24012cc4 <mtof+0x28>
24012cb0:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24012cb4:	eeb4 0ac7 	vcmpe.f32	s0, s14
24012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012cbc:	d8f3      	bhi.n	24012ca6 <mtof+0xa>
24012cbe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24012ce4 <mtof+0x48>
}
24012cc2:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24012cc4:	eddf 7a08 	vldr	s15, [pc, #32]	; 24012ce8 <mtof+0x4c>
{
24012cc8:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012cca:	ee20 0a27 	vmul.f32	s0, s0, s15
24012cce:	f002 fee3 	bl	24015a98 <expf>
24012cd2:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012cec <mtof+0x50>
24012cd6:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24012cda:	bd08      	pop	{r3, pc}
24012cdc:	c4bb8000 	.word	0xc4bb8000
24012ce0:	44bb6000 	.word	0x44bb6000
24012ce4:	00000000 	.word	0x00000000
24012ce8:	3d6c9820 	.word	0x3d6c9820
24012cec:	4102d013 	.word	0x4102d013

24012cf0 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
24012cf0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012cf4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012d28 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012cf8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24012d2c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24012cfc:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24012d00:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d04:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d08:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24012d10:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d14:	ee67 7aa7 	vmul.f32	s15, s15, s15
24012d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24012d1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24012d20:	ee27 0a87 	vmul.f32	s0, s15, s14
24012d24:	4770      	bx	lr
24012d26:	bf00      	nop
24012d28:	396c9820 	.word	0x396c9820
24012d2c:	4102d013 	.word	0x4102d013

24012d30 <fasteratodb>:
{
24012d30:	b500      	push	{lr}
24012d32:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
24012d34:	eeb0 0ac0 	vabs.f32	s0, s0
24012d38:	a801      	add	r0, sp, #4
24012d3a:	f002 fbd9 	bl	240154f0 <frexpf>
    Y += -4.11852516267426f;
24012d3e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24012d74 <fasteratodb+0x44>
24012d42:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24012d78 <fasteratodb+0x48>
    Y += 6.02197014179219f;
24012d46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24012d7c <fasteratodb+0x4c>
    Y += -4.11852516267426f;
24012d4a:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
24012d4e:	eddd 7a01 	vldr	s15, [sp, #4]
24012d52:	eddf 5a0b 	vldr	s11, [pc, #44]	; 24012d80 <fasteratodb+0x50>
24012d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
24012d5a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 24012d84 <fasteratodb+0x54>
    Y += E;
24012d5e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
24012d62:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
24012d66:	eee0 7a07 	vfma.f32	s15, s0, s14
}
24012d6a:	ee27 0a86 	vmul.f32	s0, s15, s12
24012d6e:	b003      	add	sp, #12
24012d70:	f85d fb04 	ldr.w	pc, [sp], #4
24012d74:	3f9da1a8 	.word	0x3f9da1a8
24012d78:	c083caf5 	.word	0xc083caf5
24012d7c:	40c0b3fb 	.word	0x40c0b3fb
24012d80:	404892e0 	.word	0x404892e0
24012d84:	40c0a8c2 	.word	0x40c0a8c2

24012d88 <fastdbtoa>:


Lfloat fastdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24012d88:	eddf 7a02 	vldr	s15, [pc, #8]	; 24012d94 <fastdbtoa+0xc>
24012d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
24012d90:	f002 be82 	b.w	24015a98 <expf>
24012d94:	3debc8e3 	.word	0x3debc8e3

24012d98 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24012d98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012d9c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012dc8 <fasterdbtoa+0x30>
24012da0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012da4:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012da8:	ee20 0a00 	vmul.f32	s0, s0, s0
24012dac:	ee20 0a00 	vmul.f32	s0, s0, s0
24012db0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012db4:	ee20 0a00 	vmul.f32	s0, s0, s0
24012db8:	ee20 0a00 	vmul.f32	s0, s0, s0
24012dbc:	ee20 0a00 	vmul.f32	s0, s0, s0

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
24012dc0:	ee20 0a00 	vmul.f32	s0, s0, s0
24012dc4:	4770      	bx	lr
24012dc6:	bf00      	nop
24012dc8:	39ebc8e3 	.word	0x39ebc8e3

24012dcc <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24012dcc:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24012dd0:	4770      	bx	lr
24012dd2:	bf00      	nop

24012dd4 <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24012dd4:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24012dd8:	4770      	bx	lr
24012dda:	bf00      	nop

24012ddc <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012ddc:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24012dde:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012de0:	2510      	movs	r5, #16
    pool->usize  = 0;
24012de2:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012de4:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012de6:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
24012de8:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
24012dea:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24012df0:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24012df2:	440b      	add	r3, r1
24012df4:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24012df6:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24012dfa:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24012dfc:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24012e00:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012e02:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24012e04:	6183      	str	r3, [r0, #24]
}
24012e06:	4770      	bx	lr

24012e08 <mpool_alloc>:
{
24012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24012e0a:	684a      	ldr	r2, [r1, #4]
{
24012e0c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24012e0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
24012e10:	3301      	adds	r3, #1
24012e12:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24012e14:	694b      	ldr	r3, [r1, #20]
24012e16:	2b00      	cmp	r3, #0
24012e18:	d04a      	beq.n	24012eb0 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012e1a:	1dc4      	adds	r4, r0, #7
24012e1c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012e20:	e002      	b.n	24012e28 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24012e22:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24012e24:	2b00      	cmp	r3, #0
24012e26:	d043      	beq.n	24012eb0 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24012e28:	68da      	ldr	r2, [r3, #12]
24012e2a:	42a2      	cmp	r2, r4
24012e2c:	d3f9      	bcc.n	24012e22 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012e2e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012e30:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24012e32:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012e36:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012e38:	4281      	cmp	r1, r0
24012e3a:	d246      	bcs.n	24012eca <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012e3c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012e40:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24012e42:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012e44:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24012e46:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012e48:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24012e4a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012e4e:	4429      	add	r1, r5
24012e50:	5111      	str	r1, [r2, r4]
    node->size = size;
24012e52:	60e8      	str	r0, [r5, #12]
    node->next = next;
24012e54:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012e58:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012e5c:	429a      	cmp	r2, r3
        pool->head = new_node;
24012e5e:	bf08      	it	eq
24012e60:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24012e64:	685a      	ldr	r2, [r3, #4]
24012e66:	b10a      	cbz	r2, 24012e6c <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24012e68:	6899      	ldr	r1, [r3, #8]
24012e6a:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24012e6c:	689a      	ldr	r2, [r3, #8]
24012e6e:	b10a      	cbz	r2, 24012e74 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24012e70:	6859      	ldr	r1, [r3, #4]
24012e72:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24012e74:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012e76:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24012e78:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012e7c:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012e80:	f8dc 200c 	ldr.w	r2, [ip, #12]
24012e84:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24012e86:	4422      	add	r2, r4
24012e88:	4402      	add	r2, r0
24012e8a:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24012e8e:	694a      	ldr	r2, [r1, #20]
24012e90:	42aa      	cmp	r2, r5
24012e92:	dd0b      	ble.n	24012eac <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24012e94:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24012e96:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24012e98:	b14a      	cbz	r2, 24012eae <mpool_alloc+0xa6>
24012e9a:	1e41      	subs	r1, r0, #1
24012e9c:	460a      	mov	r2, r1
24012e9e:	f801 5f01 	strb.w	r5, [r1, #1]!
24012ea2:	68dc      	ldr	r4, [r3, #12]
24012ea4:	3202      	adds	r2, #2
24012ea6:	1a12      	subs	r2, r2, r0
24012ea8:	4294      	cmp	r4, r2
24012eaa:	d8f7      	bhi.n	24012e9c <mpool_alloc+0x94>
    return node_to_alloc->pool;
24012eac:	6818      	ldr	r0, [r3, #0]
}
24012eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012eb0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24012eb4:	1a9b      	subs	r3, r3, r2
24012eb6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012eb8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24012ebc:	bf8c      	ite	hi
24012ebe:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012ec0:	2100      	movls	r1, #0
24012ec2:	f001 fe57 	bl	24014b74 <LEAF_internalErrorCallback>
        return NULL;
24012ec6:	2000      	movs	r0, #0
}
24012ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24012eca:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24012ecc:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24012ece:	e7c3      	b.n	24012e58 <mpool_alloc+0x50>

24012ed0 <mpool_calloc>:
{
24012ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24012ed2:	684a      	ldr	r2, [r1, #4]
{
24012ed4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24012ed6:	6c93      	ldr	r3, [r2, #72]	; 0x48
24012ed8:	3301      	adds	r3, #1
24012eda:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24012edc:	694b      	ldr	r3, [r1, #20]
24012ede:	2b00      	cmp	r3, #0
24012ee0:	d044      	beq.n	24012f6c <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012ee2:	1dc4      	adds	r4, r0, #7
24012ee4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012ee8:	e002      	b.n	24012ef0 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24012eea:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24012eec:	2b00      	cmp	r3, #0
24012eee:	d03d      	beq.n	24012f6c <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24012ef0:	68da      	ldr	r2, [r3, #12]
24012ef2:	42a2      	cmp	r2, r4
24012ef4:	d3f9      	bcc.n	24012eea <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012ef6:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012ef8:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24012efa:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012efe:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012f00:	4281      	cmp	r1, r0
24012f02:	d240      	bcs.n	24012f86 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012f04:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012f08:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24012f0a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012f0c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24012f0e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012f10:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
24012f12:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012f16:	4429      	add	r1, r5
24012f18:	5111      	str	r1, [r2, r4]
    node->size = size;
24012f1a:	60e8      	str	r0, [r5, #12]
    node->next = next;
24012f1c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012f20:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012f24:	429a      	cmp	r2, r3
        pool->head = new_node;
24012f26:	bf08      	it	eq
24012f28:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24012f2c:	685a      	ldr	r2, [r3, #4]
24012f2e:	b10a      	cbz	r2, 24012f34 <mpool_calloc+0x64>
        node->next->prev = node->prev;
24012f30:	6899      	ldr	r1, [r3, #8]
24012f32:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24012f34:	689a      	ldr	r2, [r3, #8]
24012f36:	b10a      	cbz	r2, 24012f3c <mpool_calloc+0x6c>
        node->prev->next = node->next;
24012f38:	6859      	ldr	r1, [r3, #4]
24012f3a:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24012f3c:	2200      	movs	r2, #0
    node->prev = NULL;
24012f3e:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012f42:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012f46:	f8dc 000c 	ldr.w	r0, [ip, #12]
24012f4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012f4c:	4401      	add	r1, r0
24012f4e:	68d8      	ldr	r0, [r3, #12]
24012f50:	4401      	add	r1, r0
24012f52:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24012f56:	68d9      	ldr	r1, [r3, #12]
24012f58:	b131      	cbz	r1, 24012f68 <mpool_calloc+0x98>
24012f5a:	4610      	mov	r0, r2
24012f5c:	6819      	ldr	r1, [r3, #0]
24012f5e:	5488      	strb	r0, [r1, r2]
24012f60:	3201      	adds	r2, #1
24012f62:	68d9      	ldr	r1, [r3, #12]
24012f64:	4291      	cmp	r1, r2
24012f66:	d8f9      	bhi.n	24012f5c <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24012f68:	6818      	ldr	r0, [r3, #0]
}
24012f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012f6c:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24012f70:	1a9b      	subs	r3, r3, r2
24012f72:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012f74:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24012f78:	bf8c      	ite	hi
24012f7a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012f7c:	2100      	movls	r1, #0
24012f7e:	f001 fdf9 	bl	24014b74 <LEAF_internalErrorCallback>
        return NULL;
24012f82:	2000      	movs	r0, #0
}
24012f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24012f86:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24012f88:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24012f8a:	e7c9      	b.n	24012f20 <mpool_calloc+0x50>

24012f8c <mpool_free>:
{
24012f8c:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
24012f8e:	684a      	ldr	r2, [r1, #4]
24012f90:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24012f92:	3301      	adds	r3, #1
24012f94:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24012f96:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012f98:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24012f9a:	6b72      	ldr	r2, [r6, #52]	; 0x34
24012f9c:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012f9e:	1a9b      	subs	r3, r3, r2
24012fa0:	68e2      	ldr	r2, [r4, #12]
24012fa2:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
24012fa4:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012fa6:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
24012fa8:	2b00      	cmp	r3, #0
24012faa:	d051      	beq.n	24013050 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
24012fac:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
24012fae:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
24012fb0:	429a      	cmp	r2, r3
24012fb2:	dc17      	bgt.n	24012fe4 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
24012fb4:	690d      	ldr	r5, [r1, #16]
24012fb6:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
24012fb8:	429a      	cmp	r2, r3
24012fba:	d913      	bls.n	24012fe4 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012fbc:	6b72      	ldr	r2, [r6, #52]	; 0x34
24012fbe:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
24012fc0:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012fc2:	eb02 0c06 	add.w	ip, r2, r6
24012fc6:	eb0c 0604 	add.w	r6, ip, r4
24012fca:	42b3      	cmp	r3, r6
24012fcc:	d029      	beq.n	24013022 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
24012fce:	68de      	ldr	r6, [r3, #12]
24012fd0:	441a      	add	r2, r3
24012fd2:	4432      	add	r2, r6
24012fd4:	4294      	cmp	r4, r2
24012fd6:	d00a      	beq.n	24012fee <mpool_free+0x62>
    while (other_node != NULL)
24012fd8:	b1e5      	cbz	r5, 24013014 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012fda:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
24012fdc:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24012fde:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
24012fe0:	429a      	cmp	r2, r3
24012fe2:	dde7      	ble.n	24012fb4 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24012fe4:	4630      	mov	r0, r6
24012fe6:	2102      	movs	r1, #2
}
24012fe8:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24012fea:	f001 bdc3 	b.w	24014b74 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
24012fee:	4466      	add	r6, ip
24012ff0:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
24012ff2:	694a      	ldr	r2, [r1, #20]
24012ff4:	429a      	cmp	r2, r3
24012ff6:	d028      	beq.n	2401304a <mpool_free+0xbe>
    if (node->next != NULL)
24012ff8:	b10d      	cbz	r5, 24012ffe <mpool_free+0x72>
        node->next->prev = node->prev;
24012ffa:	689a      	ldr	r2, [r3, #8]
24012ffc:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
24012ffe:	689a      	ldr	r2, [r3, #8]
24013000:	b10a      	cbz	r2, 24013006 <mpool_free+0x7a>
        node->prev->next = node->next;
24013002:	685c      	ldr	r4, [r3, #4]
24013004:	6054      	str	r4, [r2, #4]
    node->next = NULL;
24013006:	461c      	mov	r4, r3
    node->prev = NULL;
24013008:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
2401300c:	694a      	ldr	r2, [r1, #20]
2401300e:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24013010:	2d00      	cmp	r5, #0
24013012:	d1e2      	bne.n	24012fda <mpool_free+0x4e>
    freed_node->next = pool->head;
24013014:	694b      	ldr	r3, [r1, #20]
24013016:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24013018:	b103      	cbz	r3, 2401301c <mpool_free+0x90>
2401301a:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
2401301c:	614c      	str	r4, [r1, #20]
}
2401301e:	bc70      	pop	{r4, r5, r6}
24013020:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
24013022:	68da      	ldr	r2, [r3, #12]
24013024:	4462      	add	r2, ip
24013026:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24013028:	694a      	ldr	r2, [r1, #20]
2401302a:	429a      	cmp	r2, r3
2401302c:	d00a      	beq.n	24013044 <mpool_free+0xb8>
    if (node->next != NULL)
2401302e:	685a      	ldr	r2, [r3, #4]
24013030:	b10a      	cbz	r2, 24013036 <mpool_free+0xaa>
        node->next->prev = node->prev;
24013032:	689e      	ldr	r6, [r3, #8]
24013034:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
24013036:	689a      	ldr	r2, [r3, #8]
24013038:	b10a      	cbz	r2, 2401303e <mpool_free+0xb2>
        node->prev->next = node->next;
2401303a:	685e      	ldr	r6, [r3, #4]
2401303c:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
2401303e:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
24013042:	e7c9      	b.n	24012fd8 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
24013044:	685a      	ldr	r2, [r3, #4]
24013046:	614a      	str	r2, [r1, #20]
24013048:	e7f1      	b.n	2401302e <mpool_free+0xa2>
                pool->head = pool->head->next;
2401304a:	461c      	mov	r4, r3
2401304c:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
2401304e:	e7c3      	b.n	24012fd8 <mpool_free+0x4c>
    freed_node->next = pool->head;
24013050:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24013052:	e7e3      	b.n	2401301c <mpool_free+0x90>

24013054 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24013054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24013058:	699d      	ldr	r5, [r3, #24]
{
2401305a:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
2401305c:	6868      	ldr	r0, [r5, #4]
2401305e:	6c83      	ldr	r3, [r0, #72]	; 0x48
24013060:	3301      	adds	r3, #1
24013062:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
24013064:	696b      	ldr	r3, [r5, #20]
24013066:	b91b      	cbnz	r3, 24013070 <tMempool_init+0x1c>
24013068:	e063      	b.n	24013132 <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
2401306a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
2401306c:	2b00      	cmp	r3, #0
2401306e:	d060      	beq.n	24013132 <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
24013070:	68dc      	ldr	r4, [r3, #12]
24013072:	2c17      	cmp	r4, #23
24013074:	d9f9      	bls.n	2401306a <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
24013076:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
24013078:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
2401307c:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
2401307e:	6868      	ldr	r0, [r5, #4]
24013080:	6b40      	ldr	r0, [r0, #52]	; 0x34
24013082:	4287      	cmp	r7, r0
24013084:	d952      	bls.n	2401312c <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013086:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
2401308a:	f100 0c18 	add.w	ip, r0, #24
2401308e:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
24013092:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24013094:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
24013098:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
2401309c:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
2401309e:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
240130a2:	4420      	add	r0, r4
240130a4:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
240130a8:	60e7      	str	r7, [r4, #12]
    node->next = next;
240130aa:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
240130ae:	6968      	ldr	r0, [r5, #20]
240130b0:	4283      	cmp	r3, r0
        pool->head = new_node;
240130b2:	bf08      	it	eq
240130b4:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
240130b6:	6858      	ldr	r0, [r3, #4]
240130b8:	b108      	cbz	r0, 240130be <tMempool_init+0x6a>
        node->next->prev = node->prev;
240130ba:	689c      	ldr	r4, [r3, #8]
240130bc:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
240130be:	6898      	ldr	r0, [r3, #8]
240130c0:	b108      	cbz	r0, 240130c6 <tMempool_init+0x72>
        node->prev->next = node->next;
240130c2:	685c      	ldr	r4, [r3, #4]
240130c4:	6044      	str	r4, [r0, #4]
    node->next = NULL;
240130c6:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
240130c8:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
240130ca:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
240130ce:	f8d5 c004 	ldr.w	ip, [r5, #4]
240130d2:	68e8      	ldr	r0, [r5, #12]
240130d4:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
240130d8:	4430      	add	r0, r6
240130da:	4404      	add	r4, r0
240130dc:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
240130de:	f8dc 0014 	ldr.w	r0, [ip, #20]
240130e2:	42b8      	cmp	r0, r7
240130e4:	dd0c      	ble.n	24013100 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240130e6:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
240130e8:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
240130ea:	b154      	cbz	r4, 24013102 <tMempool_init+0xae>
240130ec:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
240130f0:	4664      	mov	r4, ip
240130f2:	f80c 7f01 	strb.w	r7, [ip, #1]!
240130f6:	68de      	ldr	r6, [r3, #12]
240130f8:	3402      	adds	r4, #2
240130fa:	1a24      	subs	r4, r4, r0
240130fc:	42a6      	cmp	r6, r4
240130fe:	d8f7      	bhi.n	240130f0 <tMempool_init+0x9c>
    return node_to_alloc->pool;
24013100:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013102:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24013106:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
24013108:	686b      	ldr	r3, [r5, #4]
2401310a:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2401310c:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
2401310e:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013110:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
24013112:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
24013114:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401311a:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
2401311c:	440b      	add	r3, r1
    node->prev = prev;
2401311e:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
24013122:	600b      	str	r3, [r1, #0]
    node->size = size;
24013124:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24013126:	6141      	str	r1, [r0, #20]
}
24013128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
2401312c:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
2401312e:	685c      	ldr	r4, [r3, #4]
24013130:	e7bd      	b.n	240130ae <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
24013132:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013136:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
24013138:	1a52      	subs	r2, r2, r1
2401313a:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2401313c:	bf94      	ite	ls
2401313e:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24013140:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24013142:	f001 fd17 	bl	24014b74 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24013146:	2300      	movs	r3, #0
24013148:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
2401314c:	686a      	ldr	r2, [r5, #4]
2401314e:	605a      	str	r2, [r3, #4]
24013150:	deff      	udf	#255	; 0xff
24013152:	bf00      	nop

24013154 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
24013154:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013156:	698c      	ldr	r4, [r1, #24]
{
24013158:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401315a:	2018      	movs	r0, #24
2401315c:	4621      	mov	r1, r4
2401315e:	f7ff fe53 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24013162:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013164:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
24013166:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
2401316a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401316c:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401316e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013188 <tCycle_init+0x34>
    c->phase    =  0;
24013172:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013176:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
2401317a:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401317c:	ee67 7a87 	vmul.f32	s15, s15, s14
24013180:	edc0 7a04 	vstr	s15, [r0, #16]
}
24013184:	bd38      	pop	{r3, r4, r5, pc}
24013186:	bf00      	nop
24013188:	4f800000 	.word	0x4f800000

2401318c <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
2401318c:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
2401318e:	4910      	ldr	r1, [pc, #64]	; (240131d0 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013190:	ed9f 7a10 	vldr	s14, [pc, #64]	; 240131d4 <tCycle_tick+0x48>
    c->phase += c->inc;
24013194:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24013198:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
2401319a:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
2401319c:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2401319e:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
240131a2:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240131a4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
240131a8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
240131ac:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240131ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
240131b2:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
240131b6:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
240131b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240131bc:	ee67 7a87 	vmul.f32	s15, s15, s14
240131c0:	ed92 7a00 	vldr	s14, [r2]
240131c4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240131c8:	eea7 0a27 	vfma.f32	s0, s14, s15
240131cc:	4770      	bx	lr
240131ce:	bf00      	nop
240131d0:	2401c4a8 	.word	0x2401c4a8
240131d4:	35000004 	.word	0x35000004

240131d8 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
240131d8:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240131da:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
240131de:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240131e2:	ee20 0a27 	vmul.f32	s0, s0, s15
240131e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240131ea:	ed83 0a02 	vstr	s0, [r3, #8]
}
240131ee:	4770      	bx	lr

240131f0 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
240131f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240131f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24013210 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
240131f8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240131fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240131fe:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24013202:	ee20 0a07 	vmul.f32	s0, s0, s14
24013206:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401320a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401320e:	4770      	bx	lr
24013210:	4f800000 	.word	0x4f800000

24013214 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
24013214:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24013216:	698c      	ldr	r4, [r1, #24]
{
24013218:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
2401321a:	2020      	movs	r0, #32
2401321c:	4621      	mov	r1, r4
2401321e:	f7ff fdf3 	bl	24012e08 <mpool_alloc>
24013222:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24013224:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
24013226:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
2401322a:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
2401322c:	2300      	movs	r3, #0
    c->phase    =  0.25f;
2401322e:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
24013232:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
24013234:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24013238:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
2401323a:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
2401323c:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
2401323e:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
24013240:	6183      	str	r3, [r0, #24]
}
24013242:	bd38      	pop	{r3, r4, r5, pc}

24013244 <tPBTriangle_setSkew>:
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
}

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
24013244:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
24013248:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24013278 <tPBTriangle_setSkew+0x34>
2401324c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2401327c <tPBTriangle_setSkew+0x38>
{
24013250:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
24013252:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
24013254:	f01a fa7c 	bl	2402d750 <__LEAF_clip_veneer>
    c->skew = (mySkew + 1.0f) * 0.5f;
24013258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401325c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24013260:	ee30 0a27 	vadd.f32	s0, s0, s15
24013264:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
24013268:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
2401326c:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
24013270:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013274:	bd10      	pop	{r4, pc}
24013276:	bf00      	nop
24013278:	3f7d70a4 	.word	0x3f7d70a4
2401327c:	3c23d70a 	.word	0x3c23d70a

24013280 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
24013280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24013282:	698e      	ldr	r6, [r1, #24]
{
24013284:	4607      	mov	r7, r0
24013286:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24013288:	2028      	movs	r0, #40	; 0x28
2401328a:	4631      	mov	r1, r6
2401328c:	f7ff fdbc 	bl	24012e08 <mpool_alloc>
24013290:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24013292:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24013294:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24013296:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013298:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
2401329a:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401329c:	4629      	mov	r1, r5
2401329e:	f7ff fdb3 	bl	24012e08 <mpool_alloc>
    c->inc      =  0;
240132a2:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240132a4:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
240132a6:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
240132aa:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240132ac:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240132ae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 240132e4 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
240132b2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240132b6:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
240132ba:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
240132be:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
240132c0:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240132c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
240132c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240132ca:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
240132ce:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
240132d0:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
240132d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
240132d6:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
240132d8:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
240132da:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
240132dc:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
240132de:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
240132e0:	6222      	str	r2, [r4, #32]
}
240132e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240132e4:	4f800000 	.word	0x4f800000

240132e8 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
240132e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
240132ec:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
240132ee:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
240132f2:	ee37 0ac0 	vsub.f32	s0, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
240132f6:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
240132fa:	ed83 0a08 	vstr	s0, [r3, #32]
}
240132fe:	4770      	bx	lr

24013300 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
24013300:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24013302:	698c      	ldr	r4, [r1, #24]
{
24013304:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
24013306:	2018      	movs	r0, #24
24013308:	4621      	mov	r1, r4
2401330a:	f7ff fd7d 	bl	24012e08 <mpool_alloc>
2401330e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24013310:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
24013312:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24013314:	6862      	ldr	r2, [r4, #4]
    c->phase    =  0.0f;
    c->width     =  0.5f;
24013316:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
2401331a:	6852      	ldr	r2, [r2, #4]
    c->inc      =  0.0f;
2401331c:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
2401331e:	6043      	str	r3, [r0, #4]
    c->width     =  0.5f;
24013320:	6101      	str	r1, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
24013322:	6142      	str	r2, [r0, #20]
}
24013324:	bd38      	pop	{r3, r4, r5, pc}
24013326:	bf00      	nop

24013328 <tPBPulse_setWidth>:
    c->inc = freq * c->invSampleRate;
}

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
24013328:	6803      	ldr	r3, [r0, #0]
    c->width = width;
2401332a:	ed83 0a04 	vstr	s0, [r3, #16]
}
2401332e:	4770      	bx	lr

24013330 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24013330:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24013332:	698c      	ldr	r4, [r1, #24]
{
24013334:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24013336:	201c      	movs	r0, #28
24013338:	4621      	mov	r1, r4
2401333a:	f7ff fd65 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
2401333e:	2300      	movs	r3, #0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24013340:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24013342:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013344:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
24013346:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
24013348:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
2401334a:	6853      	ldr	r3, [r2, #4]
2401334c:	6103      	str	r3, [r0, #16]
}
2401334e:	bd38      	pop	{r3, r4, r5, pc}

24013350 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
24013350:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24013352:	698c      	ldr	r4, [r1, #24]
{
24013354:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24013356:	2024      	movs	r0, #36	; 0x24
24013358:	4621      	mov	r1, r4
2401335a:	f7ff fd55 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0.0f;
2401335e:	2300      	movs	r3, #0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24013360:	6028      	str	r0, [r5, #0]
    c->phase    =  0.0f;
    c->shape = 0.0f;
    c->oneMinusShape = 1.0f;
24013362:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->mempool = m;
24013366:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013368:	6862      	ldr	r2, [r4, #4]
    c->inc      =  0.0f;
2401336a:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
2401336c:	6043      	str	r3, [r0, #4]
    c->shape = 0.0f;
2401336e:	61c3      	str	r3, [r0, #28]
    c->oneMinusShape = 1.0f;
24013370:	6201      	str	r1, [r0, #32]
    c->invSampleRate = leaf->invSampleRate;
24013372:	6853      	ldr	r3, [r2, #4]
24013374:	6103      	str	r3, [r0, #16]
}
24013376:	bd38      	pop	{r3, r4, r5, pc}

24013378 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24013378:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
2401337a:	6995      	ldr	r5, [r2, #24]
{
2401337c:	4606      	mov	r6, r0
2401337e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24013380:	2018      	movs	r0, #24
24013382:	4629      	mov	r1, r5
24013384:	f7ff fd40 	bl	24012e08 <mpool_alloc>
24013388:	6030      	str	r0, [r6, #0]
    n->mempool = m;
2401338a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
2401338c:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
2401338e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24013390:	691b      	ldr	r3, [r3, #16]
24013392:	6143      	str	r3, [r0, #20]
}
24013394:	bd70      	pop	{r4, r5, r6, pc}
24013396:	bf00      	nop

24013398 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24013398:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
2401339a:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
2401339c:	6963      	ldr	r3, [r4, #20]
2401339e:	4798      	blx	r3
    
    if (n->type == PinkNoise)
240133a0:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
240133a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
240133a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
240133aa:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
240133ac:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
240133b0:	d12f      	bne.n	24013412 <tNoise_tick+0x7a>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240133b2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 24013418 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240133b6:	eddf 6a19 	vldr	s13, [pc, #100]	; 2401341c <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240133ba:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240133be:	ed94 5a03 	vldr	s10, [r4, #12]
240133c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240133c6:	edd4 3a02 	vldr	s7, [r4, #8]
240133ca:	eddf 4a15 	vldr	s9, [pc, #84]	; 24013420 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240133ce:	eddf 5a15 	vldr	s11, [pc, #84]	; 24013424 <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240133d2:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
240133d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 24013428 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240133da:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
240133de:	ed94 4a04 	vldr	s8, [r4, #16]
240133e2:	ee27 7a87 	vmul.f32	s14, s15, s14
240133e6:	eddf 4a11 	vldr	s9, [pc, #68]	; 2401342c <tNoise_tick+0x94>
240133ea:	ed9f 5a11 	vldr	s10, [pc, #68]	; 24013430 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
240133ee:	eddf 5a11 	vldr	s11, [pc, #68]	; 24013434 <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
240133f2:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
240133f6:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
240133fa:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
240133fe:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24013402:	eea7 0a85 	vfma.f32	s0, s15, s10
24013406:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
2401340a:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
2401340e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24013412:	eeb0 0a67 	vmov.f32	s0, s15
24013416:	bd10      	pop	{r4, pc}
24013418:	3dcad8a1 	.word	0x3dcad8a1
2401341c:	3e97d0ff 	.word	0x3e97d0ff
24013420:	3f7f65fe 	.word	0x3f7f65fe
24013424:	3f76872b 	.word	0x3f76872b
24013428:	3f86be97 	.word	0x3f86be97
2401342c:	3f11eb85 	.word	0x3f11eb85
24013430:	3e3d3c36 	.word	0x3e3d3c36
24013434:	3d4ccccd 	.word	0x3d4ccccd

24013438 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24013438:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401343a:	698c      	ldr	r4, [r1, #24]
{
2401343c:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401343e:	201c      	movs	r0, #28
24013440:	4621      	mov	r1, r4
24013442:	f7ff fce1 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
24013446:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013448:	6028      	str	r0, [r5, #0]
    c->mempool = m;
2401344a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401344c:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401344e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24013464 <tIntPhasor_init+0x2c>
    c->phase    =  0;
24013452:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013454:	edd3 7a01 	vldr	s15, [r3, #4]
24013458:	ee67 7a87 	vmul.f32	s15, s15, s14
2401345c:	edc0 7a06 	vstr	s15, [r0, #24]
}
24013460:	bd38      	pop	{r3, r4, r5, pc}
24013462:	bf00      	nop
24013464:	4f800000 	.word	0x4f800000

24013468 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24013468:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
2401346a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013484 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
2401346e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
24013472:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24013474:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24013478:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401347a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
2401347e:	ee20 0a27 	vmul.f32	s0, s0, s15
24013482:	4770      	bx	lr
24013484:	2f80000d 	.word	0x2f80000d

24013488 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24013488:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401348a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401348e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013492:	ee20 0a27 	vmul.f32	s0, s0, s15
24013496:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401349a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401349e:	4770      	bx	lr

240134a0 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
240134a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240134a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240134c0 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
240134a8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240134aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240134ae:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240134b2:	ee20 0a07 	vmul.f32	s0, s0, s14
240134b6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240134ba:	ed83 0a01 	vstr	s0, [r3, #4]
}
240134be:	4770      	bx	lr
240134c0:	4f800000 	.word	0x4f800000

240134c4 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
240134c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240134c6:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240134ca:	698f      	ldr	r7, [r1, #24]
{
240134cc:	4606      	mov	r6, r0
240134ce:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240134d0:	2010      	movs	r0, #16
240134d2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240134d4:	ed9f 8a21 	vldr	s16, [pc, #132]	; 2401355c <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240134d8:	f7ff fc96 	bl	24012e08 <mpool_alloc>
240134dc:	6030      	str	r0, [r6, #0]
    c->mempool = m;
240134de:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
240134e0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240134e2:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240134e4:	201c      	movs	r0, #28
240134e6:	4639      	mov	r1, r7
240134e8:	f7ff fc8e 	bl	24012e08 <mpool_alloc>
240134ec:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
240134ee:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240134f0:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
240134f2:	2700      	movs	r7, #0
240134f4:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240134f6:	edd3 7a01 	vldr	s15, [r3, #4]
240134fa:	ee67 7a88 	vmul.f32	s15, s15, s16
240134fe:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013502:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24013504:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013506:	4629      	mov	r1, r5
24013508:	f7ff fc7e 	bl	24012e08 <mpool_alloc>
2401350c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
2401350e:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
24013510:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24013514:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
24013516:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013518:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401351c:	eddf 6a10 	vldr	s13, [pc, #64]	; 24013560 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013520:	ee27 7a08 	vmul.f32	s14, s14, s16
24013524:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24013528:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401352a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
2401352c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013530:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24013534:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013536:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401353a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
2401353e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24013542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24013546:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401354a:	ee67 7a88 	vmul.f32	s15, s15, s16
2401354e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013552:	edc3 7a01 	vstr	s15, [r3, #4]
}
24013556:	ecbd 8b02 	vpop	{d8}
2401355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401355c:	4f800000 	.word	0x4f800000
24013560:	2f80000d 	.word	0x2f80000d

24013564 <tSquareLFO_initToPool>:
{
24013564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013566:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401356a:	680f      	ldr	r7, [r1, #0]
{
2401356c:	4606      	mov	r6, r0
2401356e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013570:	2010      	movs	r0, #16
24013572:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013574:	ed9f 8a21 	vldr	s16, [pc, #132]	; 240135fc <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013578:	f7ff fc46 	bl	24012e08 <mpool_alloc>
2401357c:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401357e:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24013580:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24013582:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013584:	201c      	movs	r0, #28
24013586:	4639      	mov	r1, r7
24013588:	f7ff fc3e 	bl	24012e08 <mpool_alloc>
2401358c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
2401358e:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013590:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
24013592:	2700      	movs	r7, #0
24013594:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013596:	edd3 7a01 	vldr	s15, [r3, #4]
2401359a:	ee67 7a88 	vmul.f32	s15, s15, s16
2401359e:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240135a2:	201c      	movs	r0, #28
    _tMempool* m = *mp;
240135a4:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240135a6:	4629      	mov	r1, r5
240135a8:	f7ff fc2e 	bl	24012e08 <mpool_alloc>
240135ac:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240135ae:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
240135b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240135b4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240135b6:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240135b8:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240135bc:	eddf 6a10 	vldr	s13, [pc, #64]	; 24013600 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240135c0:	ee27 7a08 	vmul.f32	s14, s14, s16
240135c4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
240135c8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240135ca:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240135cc:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240135d0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240135d4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240135d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240135da:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
240135de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240135e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240135e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240135ea:	ee67 7a88 	vmul.f32	s15, s15, s16
240135ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240135f2:	edc3 7a01 	vstr	s15, [r3, #4]
}
240135f6:	ecbd 8b02 	vpop	{d8}
240135fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240135fc:	4f800000 	.word	0x4f800000
24013600:	2f80000d 	.word	0x2f80000d

24013604 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24013604:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013606:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
2401360a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24013648 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
2401360e:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
24013610:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24013614:	4403      	add	r3, r0
24013616:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24013618:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
2401361c:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
2401361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24013622:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24013626:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24013628:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
2401362c:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401362e:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24013632:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013636:	ee30 0a66 	vsub.f32	s0, s0, s13
2401363a:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401363e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24013642:	ee30 0a00 	vadd.f32	s0, s0, s0
24013646:	4770      	bx	lr
24013648:	2f80000d 	.word	0x2f80000d

2401364c <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
2401364c:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
2401364e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013650:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24013654:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013658:	ee60 7a27 	vmul.f32	s15, s0, s15
2401365c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013660:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24013664:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013666:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401366a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401366e:	ee20 0a27 	vmul.f32	s0, s0, s15
24013672:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24013676:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401367a:	4770      	bx	lr

2401367c <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
2401367c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401367e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240136b4 <tSquareLFO_setPulseWidth+0x38>
24013682:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24013684:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013688:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
2401368c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240136b8 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013690:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24013694:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013696:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
2401369a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
2401369e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240136a2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240136a6:	ee20 0a07 	vmul.f32	s0, s0, s14
240136aa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240136ae:	ed83 0a01 	vstr	s0, [r3, #4]
}
240136b2:	4770      	bx	lr
240136b4:	2f80000d 	.word	0x2f80000d
240136b8:	4f800000 	.word	0x4f800000

240136bc <tSquareLFO_setPhase>:
    int i = phase;
240136bc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
240136c0:	eddf 6a13 	vldr	s13, [pc, #76]	; 24013710 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
240136c4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240136c6:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24013714 <tSquareLFO_setPhase+0x58>
    phase -= i;
240136ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
240136ce:	689a      	ldr	r2, [r3, #8]
    phase -= i;
240136d0:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
240136d4:	ee20 0a26 	vmul.f32	s0, s0, s13
240136d8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240136dc:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240136e0:	689a      	ldr	r2, [r3, #8]
240136e2:	edd3 7a01 	vldr	s15, [r3, #4]
240136e6:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240136ea:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240136ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240136f0:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
240136f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240136f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240136fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24013700:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013708:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401370c:	4770      	bx	lr
2401370e:	bf00      	nop
24013710:	4f800000 	.word	0x4f800000
24013714:	2f80000d 	.word	0x2f80000d

24013718 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24013718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401371a:	460c      	mov	r4, r1
{
2401371c:	4606      	mov	r6, r0
2401371e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24013720:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24013722:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24013726:	4639      	mov	r1, r7
24013728:	f7ff fb6e 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
2401372c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
2401372e:	6030      	str	r0, [r6, #0]
24013730:	4604      	mov	r4, r0
    c->mempool = m;
24013732:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24013736:	f7ff ff15 	bl	24013564 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
2401373a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401373c:	201c      	movs	r0, #28
2401373e:	4629      	mov	r1, r5
24013740:	f7ff fb62 	bl	24012e08 <mpool_alloc>
    c->phase    =  0;
24013744:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013746:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24013748:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401374a:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401374c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24013760 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
24013750:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013752:	edd3 7a01 	vldr	s15, [r3, #4]
24013756:	ee67 7a87 	vmul.f32	s15, s15, s14
2401375a:	edc0 7a06 	vstr	s15, [r0, #24]
}
2401375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24013760:	4f800000 	.word	0x4f800000

24013764 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24013764:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
24013766:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013768:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
2401376c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 240137e4 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013770:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
24013774:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24013776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
2401377a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
2401377e:	4403      	add	r3, r0
24013780:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24013782:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
24013786:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24013788:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
2401378c:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
2401378e:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013790:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
24013794:	6884      	ldr	r4, [r0, #8]
24013796:	4423      	add	r3, r4
24013798:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
2401379a:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
2401379e:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
240137a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
240137a4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
240137a8:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
240137aa:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
240137ae:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240137b0:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240137b4:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240137b8:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
240137bc:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240137c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240137c4:	ee76 6ac5 	vsub.f32	s13, s13, s10
240137c8:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
240137cc:	ee30 0a00 	vadd.f32	s0, s0, s0
240137d0:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
240137d4:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
240137d8:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240137dc:	eea6 0a07 	vfma.f32	s0, s12, s14
240137e0:	4770      	bx	lr
240137e2:	bf00      	nop
240137e4:	2f80000d 	.word	0x2f80000d

240137e8 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
240137e8:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
240137ea:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
240137ec:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240137ee:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240137f2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240137f6:	ee60 7a27 	vmul.f32	s15, s0, s15
240137fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240137fe:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24013802:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013804:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24013808:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401380c:	ee60 7a27 	vmul.f32	s15, s0, s15
24013810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013814:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24013818:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401381a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401381e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013822:	ee20 0a27 	vmul.f32	s0, s0, s15
24013826:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401382a:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
2401382e:	4770      	bx	lr

24013830 <tSawSquareLFO_setPhase>:
    int i = phase;
24013830:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
24013834:	eddf 6a15 	vldr	s13, [pc, #84]	; 2401388c <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
24013838:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401383a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24013890 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
2401383e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
24013842:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
24013844:	6890      	ldr	r0, [r2, #8]
    phase -= i;
24013846:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
2401384a:	ee20 0a26 	vmul.f32	s0, s0, s13
2401384e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24013852:	edc0 7a01 	vstr	s15, [r0, #4]
24013856:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401385a:	6890      	ldr	r0, [r2, #8]
2401385c:	edd2 7a01 	vldr	s15, [r2, #4]
24013860:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
24013864:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013866:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2401386a:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
2401386e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24013872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24013876:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
2401387a:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401387e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24013882:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
24013886:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
24013888:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
2401388a:	4770      	bx	lr
2401388c:	4f800000 	.word	0x4f800000
24013890:	2f80000d 	.word	0x2f80000d

24013894 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
24013894:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
24013896:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401389a:	4770      	bx	lr

2401389c <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
2401389c:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401389e:	698d      	ldr	r5, [r1, #24]
{
240138a0:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240138a2:	2018      	movs	r0, #24
240138a4:	4629      	mov	r1, r5
240138a6:	f7ff faaf 	bl	24012e08 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
240138aa:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
240138ac:	6020      	str	r0, [r4, #0]
    c->mempool = m;
240138ae:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240138b0:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240138b2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 240138e8 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
240138b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240138ec <tTriLFO_init+0x50>
    c->phase    =  0;
240138ba:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
240138be:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240138c2:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
240138c6:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
240138ca:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
240138ce:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240138d0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240138d4:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240138d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
240138dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240138e0:	edc3 7a02 	vstr	s15, [r3, #8]
}
240138e4:	bd38      	pop	{r3, r4, r5, pc}
240138e6:	bf00      	nop
240138e8:	4f800000 	.word	0x4f800000
240138ec:	435c0000 	.word	0x435c0000

240138f0 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
240138f0:	6803      	ldr	r3, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240138f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240138f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24013920 <tTriLFO_tick+0x30>
    c->phase += c->inc;
240138fa:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
240138fe:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24013900:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
24013904:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24013906:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401390a:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401390e:	ee07 3a90 	vmov	s15, r3
24013912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013916:	eea7 0a87 	vfma.f32	s0, s15, s14
}
2401391a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401391e:	4770      	bx	lr
24013920:	2ffffff6 	.word	0x2ffffff6

24013924 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24013924:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013926:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401392a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401392e:	ee20 0a27 	vmul.f32	s0, s0, s15
24013932:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013936:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401393a:	4770      	bx	lr

2401393c <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
2401393c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24013940:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013946:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
2401394a:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
2401394e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24013952:	4770      	bx	lr

24013954 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24013954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24013956:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401395a:	698f      	ldr	r7, [r1, #24]
{
2401395c:	4606      	mov	r6, r0
2401395e:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013960:	2010      	movs	r0, #16
24013962:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013964:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 240139e0 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013968:	f7ff fa4e 	bl	24012e08 <mpool_alloc>
2401396c:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401396e:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013970:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24013972:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24013974:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24013976:	4631      	mov	r1, r6
24013978:	f7ff fa46 	bl	24012e08 <mpool_alloc>
2401397c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
2401397e:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013980:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
24013982:	2600      	movs	r6, #0
    c->freq  = freq;
24013984:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240139e4 <tSineTriLFO_init+0x90>
    c->phase    =  0;
24013988:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
2401398c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013990:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
24013994:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013998:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401399c:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
2401399e:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240139a0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240139a4:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240139a8:	ee67 7a87 	vmul.f32	s15, s15, s14
240139ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240139b0:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
240139b4:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240139b6:	4629      	mov	r1, r5
240139b8:	f7ff fa26 	bl	24012e08 <mpool_alloc>
240139bc:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240139be:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
240139c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
240139c4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
240139c6:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240139ca:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240139ce:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240139d0:	ee67 7a88 	vmul.f32	s15, s15, s16
240139d4:	edc0 7a04 	vstr	s15, [r0, #16]
}
240139d8:	ecbd 8b02 	vpop	{d8}
240139dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240139de:	bf00      	nop
240139e0:	4f800000 	.word	0x4f800000
240139e4:	435c0000 	.word	0x435c0000

240139e8 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
240139e8:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
240139ea:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
240139ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
240139f0:	4a20      	ldr	r2, [pc, #128]	; (24013a74 <tSineTriLFO_tick+0x8c>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240139f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
240139f6:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240139f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24013a78 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
240139fc:	694e      	ldr	r6, [r1, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240139fe:	eddf 4a1f 	vldr	s9, [pc, #124]	; 24013a7c <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
24013a02:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24013a06:	4403      	add	r3, r0
24013a08:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
24013a0a:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
24013a0c:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
24013a0e:	f3c3 0314 	ubfx	r3, r3, #0, #21
24013a12:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
24013a16:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24013a1e:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
24013a20:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
24013a22:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
24013a26:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
24013a28:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24013a2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
24013a32:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
24013a36:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24013a3a:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
24013a3e:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
24013a42:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013a46:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24013a4a:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24013a4e:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013a52:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24013a56:	ee07 3a10 	vmov	s14, r3
24013a5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013a5e:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24013a62:	eea7 0a24 	vfma.f32	s0, s14, s9
}
24013a66:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
24013a68:	ee26 0a00 	vmul.f32	s0, s12, s0
}
24013a6c:	eea5 0aa6 	vfma.f32	s0, s11, s13
24013a70:	4770      	bx	lr
24013a72:	bf00      	nop
24013a74:	2401c4a8 	.word	0x2401c4a8
24013a78:	35000004 	.word	0x35000004
24013a7c:	2ffffff6 	.word	0x2ffffff6

24013a80 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
24013a80:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24013a82:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a84:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24013a88:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a8c:	ee60 7a27 	vmul.f32	s15, s0, s15
24013a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013a94:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24013a98:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013a9a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24013a9e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013aa2:	ee20 0a27 	vmul.f32	s0, s0, s15
24013aa6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013aaa:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
24013aae:	4770      	bx	lr

24013ab0 <tSineTriLFO_setPhase>:
    int i = phase;
24013ab0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24013ab4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24013adc <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
24013ab8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
24013abe:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24013ac0:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24013ac4:	ee20 0a07 	vmul.f32	s0, s0, s14
24013ac8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24013acc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24013ad0:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24013ad4:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
24013ad6:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24013ada:	4770      	bx	lr
24013adc:	4f800000 	.word	0x4f800000

24013ae0 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24013ae0:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24013ae2:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24013ae6:	4770      	bx	lr

24013ae8 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24013ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013aec:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
24013af0:	f8d3 9000 	ldr.w	r9, [r3]
{
24013af4:	b083      	sub	sp, #12
24013af6:	460e      	mov	r6, r1
24013af8:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013afa:	4649      	mov	r1, r9
24013afc:	2064      	movs	r0, #100	; 0x64
{
24013afe:	461d      	mov	r5, r3
24013b00:	eeb0 8a40 	vmov.f32	s16, s0
24013b04:	eeb0 9a41 	vmov.f32	s18, s2
24013b08:	4617      	mov	r7, r2
24013b0a:	eef0 9a61 	vmov.f32	s19, s3
24013b0e:	eeb0 aa42 	vmov.f32	s20, s4
24013b12:	eef0 aa62 	vmov.f32	s21, s5
24013b16:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013b1a:	f7ff f975 	bl	24012e08 <mpool_alloc>
24013b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
24013b22:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013b26:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b2a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
24013b2e:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
24013b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013b36:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
24013b3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24013b3e:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
24013b40:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
24013b44:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013b48:	4604      	mov	r4, r0
    p->curr=0.0f;
24013b4a:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
24013b4c:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b50:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24013b54:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
24013b58:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
24013b5c:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b5e:	eddf 0a82 	vldr	s1, [pc, #520]	; 24013d68 <tSimpleLivingString3_initToPool+0x280>
24013b62:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
24013b64:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24013b66:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24013b6a:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b6e:	4650      	mov	r0, sl
24013b70:	ee2b 0a2b 	vmul.f32	s0, s22, s23
24013b74:	ee20 0a27 	vmul.f32	s0, s0, s15
24013b78:	f7fd f86a 	bl	24010c50 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24013b7c:	ed94 0a02 	vldr	s0, [r4, #8]
24013b80:	462a      	mov	r2, r5
24013b82:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013b84:	4658      	mov	r0, fp
24013b86:	f7fc f8c3 	bl	2400fd10 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24013b8a:	ed94 0a02 	vldr	s0, [r4, #8]
24013b8e:	462a      	mov	r2, r5
24013b90:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013b92:	4648      	mov	r0, r9
24013b94:	f7fc f8bc 	bl	2400fd10 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
24013b98:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
24013b9c:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
24013ba0:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24013ba4:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
24013ba8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 24013d58 <tSimpleLivingString3_initToPool+0x270>
24013bac:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24013bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
24013bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013bb8:	f100 80c7 	bmi.w	24013d4a <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013bbc:	6b33      	ldr	r3, [r6, #48]	; 0x30
24013bbe:	005b      	lsls	r3, r3, #1
24013bc0:	ee07 3a90 	vmov	s15, r3
24013bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24013bc8:	fec7 7ac0 	vminnm.f32	s15, s15, s0
24013bcc:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013bd0:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24013bd4:	ed86 0a02 	vstr	s0, [r6, #8]
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013bd8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013bdc:	f019 fd98 	bl	2402d710 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013be0:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24013be4:	f104 0840 	add.w	r8, r4, #64	; 0x40
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013be8:	eddf 7a60 	vldr	s15, [pc, #384]	; 24013d6c <tSimpleLivingString3_initToPool+0x284>
24013bec:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013bf0:	ed96 6a01 	vldr	s12, [r6, #4]
24013bf4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013bfc:	ed9f 0b58 	vldr	d0, [pc, #352]	; 24013d60 <tSimpleLivingString3_initToPool+0x278>
24013c00:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013c04:	ee27 7b06 	vmul.f64	d7, d7, d6
24013c08:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013c0c:	f001 fda8 	bl	24015760 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24013c10:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013c12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013c16:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24013c1a:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24013c1e:	ed94 0a02 	vldr	s0, [r4, #8]
24013c22:	f7fc f97f 	bl	2400ff24 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
24013c26:	ed94 0a02 	vldr	s0, [r4, #8]
24013c2a:	4648      	mov	r0, r9
24013c2c:	f7fc f97a 	bl	2400ff24 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24013c30:	4658      	mov	r0, fp
24013c32:	f7fc f8f1 	bl	2400fe18 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
24013c36:	4648      	mov	r0, r9
24013c38:	f7fc f8ee 	bl	2400fe18 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013c3c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24013c40:	4629      	mov	r1, r5
24013c42:	eeb0 0a68 	vmov.f32	s0, s17
24013c46:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
24013c48:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013c4c:	9301      	str	r3, [sp, #4]
24013c4e:	f7fd f833 	bl	24010cb8 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24013c52:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013c56:	9801      	ldr	r0, [sp, #4]
24013c58:	f7fd f898 	bl	24010d8c <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013c5c:	eeb0 0a68 	vmov.f32	s0, s17
24013c60:	9801      	ldr	r0, [sp, #4]
24013c62:	f7fd f861 	bl	24010d28 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24013c66:	4629      	mov	r1, r5
24013c68:	4640      	mov	r0, r8
24013c6a:	f8cd 8004 	str.w	r8, [sp, #4]
24013c6e:	f7fd f8eb 	bl	24010e48 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
24013c72:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013c76:	9801      	ldr	r0, [sp, #4]
24013c78:	f7fd f902 	bl	24010e80 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24013c7c:	4629      	mov	r1, r5
24013c7e:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24013c82:	4630      	mov	r0, r6
24013c84:	9601      	str	r6, [sp, #4]
24013c86:	f7fd fa4d 	bl	24011124 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24013c8a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013c8e:	9801      	ldr	r0, [sp, #4]
24013c90:	f7fd fa88 	bl	240111a4 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24013c94:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24013c98:	9801      	ldr	r0, [sp, #4]
24013c9a:	f7fd fa67 	bl	2401116c <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013c9e:	eeb0 0a69 	vmov.f32	s0, s19
24013ca2:	eeb0 1a6a 	vmov.f32	s2, s21
24013ca6:	462a      	mov	r2, r5
24013ca8:	eef0 0a4a 	vmov.f32	s1, s20
24013cac:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013cb0:	4639      	mov	r1, r7
    p->userDecay = decay;
24013cb2:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013cb6:	f7fc fc21 	bl	240104fc <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24013cba:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
24013cbe:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
24013cc0:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
24013cc4:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
24013cc8:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
24013ccc:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24013d58 <tSimpleLivingString3_initToPool+0x270>
24013cd0:	eeb7 6acb 	vcvt.f64.f32	d6, s22
24013cd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
24013cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013cdc:	d438      	bmi.n	24013d50 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24013ce0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013ce4:	005b      	lsls	r3, r3, #1
24013ce6:	ee00 3a10 	vmov	s0, r3
24013cea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24013cee:	fe80 0a4b 	vminnm.f32	s0, s0, s22
24013cf2:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013cf6:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24013cf8:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013cfc:	f019 fd08 	bl	2402d710 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013d04:	ed94 7a05 	vldr	s14, [r4, #20]
24013d08:	eddf 7a18 	vldr	s15, [pc, #96]	; 24013d6c <tSimpleLivingString3_initToPool+0x284>
24013d0c:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013d10:	ed94 6a01 	vldr	s12, [r4, #4]
24013d14:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013d18:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013d1c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24013d60 <tSimpleLivingString3_initToPool+0x278>
24013d20:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013d24:	ee27 7b06 	vmul.f64	d7, d7, d6
24013d28:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013d2c:	f001 fd18 	bl	24015760 <exp>
    p->pickupPoint = 0.9f;
24013d30:	4a0f      	ldr	r2, [pc, #60]	; (24013d70 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
24013d32:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
24013d34:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013d36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24013d3a:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013d3c:	ed84 0a04 	vstr	s0, [r4, #16]
}
24013d40:	b003      	add	sp, #12
24013d42:	ecbd 8b08 	vpop	{d8-d11}
24013d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013d4a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24013d74 <tSimpleLivingString3_initToPool+0x28c>
24013d4e:	e73f      	b.n	24013bd0 <tSimpleLivingString3_initToPool+0xe8>
24013d50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24013d74 <tSimpleLivingString3_initToPool+0x28c>
24013d54:	e7cf      	b.n	24013cf6 <tSimpleLivingString3_initToPool+0x20e>
24013d56:	bf00      	nop
24013d58:	33333333 	.word	0x33333333
24013d5c:	40133333 	.word	0x40133333
24013d60:	0a3d70a4 	.word	0x0a3d70a4
24013d64:	c01ba3d7 	.word	0xc01ba3d7
24013d68:	3c23d70a 	.word	0x3c23d70a
24013d6c:	3d8d78c4 	.word	0x3d8d78c4
24013d70:	3f666666 	.word	0x3f666666
24013d74:	4019999a 	.word	0x4019999a

24013d78 <tSimpleLivingString3_free>:
{
24013d78:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24013d7a:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24013d7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
24013d80:	f7fc ff92 	bl	24010ca8 <tExpSmooth_free>
    tLinearDelay_free(&p->delayLineU);
24013d84:	f104 0034 	add.w	r0, r4, #52	; 0x34
24013d88:	f7fc f83a 	bl	2400fe00 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineL);
24013d8c:	f104 0038 	add.w	r0, r4, #56	; 0x38
24013d90:	f7fc f836 	bl	2400fe00 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
24013d94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24013d98:	f7fc ffc2 	bl	24010d20 <tOnePole_free>
    tBiQuad_free(&p->bridgeFilter2),
24013d9c:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013da0:	f7fd f86a 	bl	24010e78 <tBiQuad_free>
    tHighpass_free(&p->DCblocker);
24013da4:	f104 0050 	add.w	r0, r4, #80	; 0x50
24013da8:	f7fd f9dc 	bl	24011164 <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24013dac:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013db0:	f7fc fbcc 	bl	2401054c <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
24013db4:	6821      	ldr	r1, [r4, #0]
24013db6:	4620      	mov	r0, r4
}
24013db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24013dbc:	f7ff b8e6 	b.w	24012f8c <mpool_free>

24013dc0 <tSimpleLivingString3_setFreq>:
{
24013dc0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24013dc2:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
24013dc4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
24013dc8:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24013dcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
24013dd0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24013e48 <tSimpleLivingString3_setFreq+0x88>
24013dd4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
24013dd8:	eeb4 5bc6 	vcmpe.f64	d5, d6
24013ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013de0:	d42e      	bmi.n	24013e40 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
24013de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
24013de8:	005b      	lsls	r3, r3, #1
24013dea:	ee00 3a10 	vmov	s0, r3
24013dee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24013df2:	fe80 0a67 	vminnm.f32	s0, s0, s15
24013df6:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
24013dfe:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013e02:	f019 fc85 	bl	2402d710 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013e0a:	ed94 7a05 	vldr	s14, [r4, #20]
24013e0e:	eddf 7a12 	vldr	s15, [pc, #72]	; 24013e58 <tSimpleLivingString3_setFreq+0x98>
24013e12:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013e16:	ed94 6a01 	vldr	s12, [r4, #4]
24013e1a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24013e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013e22:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24013e50 <tSimpleLivingString3_setFreq+0x90>
24013e26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
24013e2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013e32:	f001 fc95 	bl	24015760 <exp>
24013e36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013e3a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24013e3e:	bd10      	pop	{r4, pc}
24013e40:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24013e5c <tSimpleLivingString3_setFreq+0x9c>
24013e44:	e7d9      	b.n	24013dfa <tSimpleLivingString3_setFreq+0x3a>
24013e46:	bf00      	nop
24013e48:	33333333 	.word	0x33333333
24013e4c:	40133333 	.word	0x40133333
24013e50:	0a3d70a4 	.word	0x0a3d70a4
24013e54:	c01ba3d7 	.word	0xc01ba3d7
24013e58:	3d8d78c4 	.word	0x3d8d78c4
24013e5c:	4019999a 	.word	0x4019999a

24013e60 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013e60:	6800      	ldr	r0, [r0, #0]
24013e62:	303c      	adds	r0, #60	; 0x3c
24013e64:	f7fc bf60 	b.w	24010d28 <tOnePole_setFreq>

24013e68 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013e6c:	eddf 6a10 	vldr	s13, [pc, #64]	; 24013eb0 <tSimpleLivingString3_setDecay+0x48>
{
24013e70:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e72:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
24013e76:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24013e78:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013e7c:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
24013e80:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24013e84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24013e88:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013e8c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24013ea8 <tSimpleLivingString3_setDecay+0x40>
24013e90:	ee27 7b06 	vmul.f64	d7, d7, d6
24013e94:	ee85 0b07 	vdiv.f64	d0, d5, d7
24013e98:	f001 fc62 	bl	24015760 <exp>
24013e9c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013ea0:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
24013ea4:	bd10      	pop	{r4, pc}
24013ea6:	bf00      	nop
24013ea8:	52bd3c36 	.word	0x52bd3c36
24013eac:	c01ba196 	.word	0xc01ba196
24013eb0:	3d8d78c4 	.word	0x3d8d78c4

24013eb4 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
24013eb4:	6800      	ldr	r0, [r0, #0]
24013eb6:	3054      	adds	r0, #84	; 0x54
24013eb8:	f7fc bb84 	b.w	240105c4 <tFeedbackLeveler_setTargetLevel>

24013ebc <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24013ebc:	6800      	ldr	r0, [r0, #0]
24013ebe:	3054      	adds	r0, #84	; 0x54
24013ec0:	f7fc bb54 	b.w	2401056c <tFeedbackLeveler_setFactor>

24013ec4 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
24013ec4:	6800      	ldr	r0, [r0, #0]
24013ec6:	3054      	adds	r0, #84	; 0x54
24013ec8:	f7fc bb4c 	b.w	24010564 <tFeedbackLeveler_setStrength>

24013ecc <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
24013ecc:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
24013ece:	6805      	ldr	r5, [r0, #0]
{
24013ed0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
24013ed2:	f105 0054 	add.w	r0, r5, #84	; 0x54
24013ed6:	f7fc fb4d 	bl	24010574 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24013eda:	622c      	str	r4, [r5, #32]
}
24013edc:	bd38      	pop	{r3, r4, r5, pc}
24013ede:	bf00      	nop

24013ee0 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
24013ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
24013ee4:	6801      	ldr	r1, [r0, #0]
{
24013ee6:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
24013ee8:	edd1 7a02 	vldr	s15, [r1, #8]
24013eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013ef0:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24013ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013ef8:	ee67 0aa0 	vmul.f32	s1, s15, s1
24013efc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24013f00:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
24013f04:	2b00      	cmp	r3, #0
24013f06:	f340 8081 	ble.w	2401400c <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
24013f0a:	4298      	cmp	r0, r3
24013f0c:	dc0f      	bgt.n	24013f2e <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
24013f0e:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24013f10:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24013f12:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
24013f14:	dd77      	ble.n	24014006 <tSimpleLivingString3_pluck+0x126>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f16:	ee07 7a90 	vmov	s15, r7
24013f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24013f1e:	2f00      	cmp	r7, #0
24013f20:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24013f24:	ee86 7a86 	vdiv.f32	s14, s13, s12
24013f28:	da0f      	bge.n	24013f4a <tSimpleLivingString3_pluck+0x6a>
24013f2a:	2300      	movs	r3, #0
24013f2c:	e02b      	b.n	24013f86 <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
24013f2e:	1ac2      	subs	r2, r0, r3
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f30:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24013f34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013f38:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f3a:	ee07 2a90 	vmov	s15, r2
24013f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013f42:	ee85 7a86 	vdiv.f32	s14, s11, s12
24013f46:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24013f4a:	429f      	cmp	r7, r3
24013f4c:	bfa8      	it	ge
24013f4e:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
24013f50:	2300      	movs	r3, #0
24013f52:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f56:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f58:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f5c:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
24013f64:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f66:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24013f68:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f6a:	fbb2 f6f5 	udiv	r6, r2, r5
24013f6e:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013f72:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
24013f76:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
24013f78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013f7c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013f80:	dde9      	ble.n	24013f56 <tSimpleLivingString3_pluck+0x76>
24013f82:	4298      	cmp	r0, r3
24013f84:	dd1d      	ble.n	24013fc2 <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f86:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013f8a:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f8e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24013f94:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013f98:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013f9c:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24013fa0:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013fa2:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24013fa4:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013fa6:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24013faa:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013fac:	fbb2 f6f5 	udiv	r6, r2, r5
24013fb0:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013fb4:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24013fb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013fbc:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013fc0:	dce3      	bgt.n	24013f8a <tSimpleLivingString3_pluck+0xaa>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013fc2:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013fc6:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fca:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
24013fce:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013fd0:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fd2:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013fd4:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fd6:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
24013fd8:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fda:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013fdc:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fde:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013fe0:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
24013fe2:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013fe6:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013fea:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24013fee:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
24013ff2:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24013ff4:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24013ff8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24013ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24014000:	6812      	ldr	r2, [r2, #0]
24014002:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
24014004:	d1df      	bne.n	24013fc6 <tSimpleLivingString3_pluck+0xe6>
    }
}
24014006:	b002      	add	sp, #8
24014008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
2401400c:	2800      	cmp	r0, #0
2401400e:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
24014012:	ddf8      	ble.n	24014006 <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24014014:	ee07 7a10 	vmov	s14, r7
24014018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
2401401c:	2301      	movs	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401401e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
24014022:	eeb0 7a67 	vmov.f32	s14, s15
24014026:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401402a:	eeb0 6a67 	vmov.f32	s12, s15
2401402e:	e78c      	b.n	24013f4a <tSimpleLivingString3_pluck+0x6a>

24014030 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24014030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
24014034:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24014038:	6804      	ldr	r4, [r0, #0]
{
2401403a:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
2401403c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
24014040:	f104 0634 	add.w	r6, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24014044:	f019 fb8c 	bl	2402d760 <__tExpSmooth_tick_veneer>
24014048:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
2401404c:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
24014050:	4630      	mov	r0, r6
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24014052:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
24014056:	f7fb ff65 	bl	2400ff24 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
2401405a:	eeb0 0a48 	vmov.f32	s0, s16
2401405e:	4638      	mov	r0, r7
24014060:	f7fb ff60 	bl	2400ff24 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
24014064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24014066:	2b00      	cmp	r3, #0
24014068:	dd3c      	ble.n	240140e4 <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
2401406a:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
2401406e:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
24014072:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014074:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
24014076:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014078:	f7fb ff28 	bl	2400fecc <tLinearDelay_tickOut>
2401407c:	4648      	mov	r0, r9
2401407e:	f7fc fe71 	bl	24010d64 <tOnePole_tick>
24014082:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24014086:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
24014088:	ee20 0a27 	vmul.f32	s0, s0, s15
2401408c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24014090:	f7fc fa74 	bl	2401057c <tFeedbackLeveler_tick>
24014094:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24014098:	eef0 0a40 	vmov.f32	s1, s0
2401409c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240140a0:	f019 fb56 	bl	2402d750 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240140a4:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240140a6:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240140aa:	f7fb ff0f 	bl	2400fecc <tLinearDelay_tickOut>
240140ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240140b2:	eef0 0a40 	vmov.f32	s1, s0
240140b6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240140ba:	f019 fb49 	bl	2402d750 <__LEAF_clip_veneer>
240140be:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
240140c2:	4630      	mov	r0, r6
240140c4:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240140c8:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
240140cc:	f7fb feea 	bl	2400fea4 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
240140d0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
240140d4:	4638      	mov	r0, r7
240140d6:	eeb1 0a40 	vneg.f32	s0, s0
240140da:	f7fb fee3 	bl	2400fea4 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
240140de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240140e0:	42ab      	cmp	r3, r5
240140e2:	dcc7      	bgt.n	24014074 <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
240140e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
240140e8:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240140ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
240140ee:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
240140f2:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
240140f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
240140f8:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240140fc:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
240140fe:	feb8 6a65 	vrinta.f32	s12, s11
24014102:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24014106:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
2401410a:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
2401410e:	feb8 7a66 	vrinta.f32	s14, s13
24014112:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014116:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
2401411a:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
2401411e:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24014122:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24014126:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
2401412a:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401412c:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
2401412e:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24014132:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24014134:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24014138:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401413c:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
2401413e:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014140:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
24014142:	ee35 6ac6 	vsub.f32	s12, s11, s12
    LfloatPart = reversePoint - whichPoint;
24014146:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
2401414a:	fb93 f6f0 	sdiv	r6, r3, r0
2401414e:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24014152:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24014154:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    LfloatPart = reversePoint - whichPoint;
24014158:	ee76 6ae5 	vsub.f32	s13, s13, s11
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
2401415c:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24014160:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014164:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24014168:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
2401416a:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
2401416e:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014172:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24014176:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
2401417a:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
2401417c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24014180:	eea7 0a27 	vfma.f32	s0, s14, s15
24014184:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24014188:	fb93 f5f0 	sdiv	r5, r3, r0
2401418c:	eea7 0a86 	vfma.f32	s0, s15, s12
24014190:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24014194:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24014198:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
2401419c:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
2401419e:	eea7 0aa6 	vfma.f32	s0, s15, s13
240141a2:	ee20 0a24 	vmul.f32	s0, s0, s9
240141a6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
240141aa:	b003      	add	sp, #12
240141ac:	ecbd 8b02 	vpop	{d8}
240141b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

240141b4 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
240141b4:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
240141b6:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
240141ba:	4770      	bx	lr

240141bc <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, Lfloat freq, Lfloat pickPos, Lfloat prepPos, Lfloat pickupPos, Lfloat prepIndex,
                                     Lfloat brightness, Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                     Lfloat levStrength, int levMode, tMempool* const mp)
{
240141bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240141c0:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
240141c4:	f8d2 8000 	ldr.w	r8, [r2]
{
240141c8:	4606      	mov	r6, r0
240141ca:	b083      	sub	sp, #12
240141cc:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
240141ce:	2070      	movs	r0, #112	; 0x70
240141d0:	4641      	mov	r1, r8
{
240141d2:	eef0 ca61 	vmov.f32	s25, s3
240141d6:	4615      	mov	r5, r2
240141d8:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
240141dc:	ed9f da99 	vldr	s26, [pc, #612]	; 24014444 <tLivingString2_initToPool+0x288>
{
240141e0:	eef0 9a62 	vmov.f32	s19, s5
240141e4:	eef0 aa63 	vmov.f32	s21, s7
240141e8:	eef0 ba44 	vmov.f32	s23, s8
240141ec:	eeb0 ca64 	vmov.f32	s24, s9
240141f0:	eeb0 ba43 	vmov.f32	s22, s6
240141f4:	eef0 8a41 	vmov.f32	s17, s2
240141f8:	eeb0 aa40 	vmov.f32	s20, s0
240141fc:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24014200:	f7fe fe02 	bl	24012e08 <mpool_alloc>
24014204:	6030      	str	r0, [r6, #0]
24014206:	4604      	mov	r4, r0
    p->mempool = m;
24014208:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401420c:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
2401420e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014212:	305c      	adds	r0, #92	; 0x5c
24014214:	eddf 0a8c 	vldr	s1, [pc, #560]	; 24014448 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014218:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
2401421c:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24014220:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
24014224:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24014228:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401422c:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
24014230:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24014234:	f7fc fd0c 	bl	24010c50 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
24014238:	eddf 7a84 	vldr	s15, [pc, #528]	; 2401444c <tLivingString2_initToPool+0x290>
2401423c:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
2401423e:	f104 0934 	add.w	r9, r4, #52	; 0x34
24014242:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24014246:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401424a:	305c      	adds	r0, #92	; 0x5c
2401424c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
24014250:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
24014254:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014258:	ed90 7a04 	vldr	s14, [r0, #16]
2401425c:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
24014260:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014264:	ee30 0a6d 	vsub.f32	s0, s0, s27
24014268:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401426c:	f019 fa50 	bl	2402d710 <__tExpSmooth_setDest_veneer>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24014270:	eddf 0a77 	vldr	s1, [pc, #476]	; 24014450 <tLivingString2_initToPool+0x294>
24014274:	eeb0 0a49 	vmov.f32	s0, s18
24014278:	f104 0060 	add.w	r0, r4, #96	; 0x60
2401427c:	4629      	mov	r1, r5
    p->freq = freq;
2401427e:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
24014282:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24014286:	edcd 0a00 	vstr	s1, [sp]
2401428a:	f7fc fce1 	bl	24010c50 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
2401428e:	eeb0 0a68 	vmov.f32	s0, s17
24014292:	4629      	mov	r1, r5
24014294:	eddd 0a00 	vldr	s1, [sp]
24014298:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401429c:	f7fc fcd8 	bl	24010c50 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
240142a0:	eddd 0a00 	vldr	s1, [sp]
240142a4:	4629      	mov	r1, r5
240142a6:	eeb0 0a6c 	vmov.f32	s0, s25
240142aa:	f104 0068 	add.w	r0, r4, #104	; 0x68
240142ae:	f7fc fccf 	bl	24010c50 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, Lfloat pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
240142b2:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
240142b4:	fe89 0a6d 	vminnm.f32	s0, s18, s27
240142b8:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
240142bc:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
240142be:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
240142c2:	f019 fa25 	bl	2402d710 <__tExpSmooth_setDest_veneer>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, Lfloat prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
240142c6:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
240142c8:	fe88 0aed 	vminnm.f32	s0, s17, s27
240142cc:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
240142d0:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
240142d2:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
240142d6:	f019 fa1b 	bl	2402d710 <__tExpSmooth_setDest_veneer>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
240142da:	ed94 0a02 	vldr	s0, [r4, #8]
240142de:	462a      	mov	r2, r5
240142e0:	4658      	mov	r0, fp
240142e2:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
240142e6:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
240142ea:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
240142ee:	f7fb fe5b 	bl	2400ffa8 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
240142f2:	ed94 0a02 	vldr	s0, [r4, #8]
240142f6:	462a      	mov	r2, r5
240142f8:	4650      	mov	r0, sl
240142fa:	f44f 6116 	mov.w	r1, #2400	; 0x960
240142fe:	f7fb fe53 	bl	2400ffa8 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24014302:	ed94 0a02 	vldr	s0, [r4, #8]
24014306:	462a      	mov	r2, r5
24014308:	4648      	mov	r0, r9
2401430a:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401430e:	f7fb fe4b 	bl	2400ffa8 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24014312:	462a      	mov	r2, r5
24014314:	ed94 0a02 	vldr	s0, [r4, #8]
24014318:	f44f 6116 	mov.w	r1, #2400	; 0x960
2401431c:	4640      	mov	r0, r8
2401431e:	f7fb fe43 	bl	2400ffa8 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
24014322:	4658      	mov	r0, fp
24014324:	f7fb feca 	bl	240100bc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
24014328:	4650      	mov	r0, sl
2401432a:	f7fb fec7 	bl	240100bc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
2401432e:	4648      	mov	r0, r9
24014330:	f7fb fec4 	bl	240100bc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
24014334:	4640      	mov	r0, r8
24014336:	f7fb fec1 	bl	240100bc <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
2401433a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
2401433e:	4629      	mov	r1, r5
    p->brightness = brightness;
24014340:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
24014344:	f7fc fd44 	bl	24010dd0 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
24014348:	4629      	mov	r1, r5
2401434a:	f104 0040 	add.w	r0, r4, #64	; 0x40
2401434e:	f7fc fd3f 	bl	24010dd0 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
24014352:	4629      	mov	r1, r5
24014354:	f104 0044 	add.w	r0, r4, #68	; 0x44
24014358:	f7fc fd3a 	bl	24010dd0 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
2401435c:	4629      	mov	r1, r5
2401435e:	f104 0048 	add.w	r0, r4, #72	; 0x48
24014362:	f7fc fd35 	bl	24010dd0 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, Lfloat brightness)
{
    _tLivingString2* p = *pl;
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014366:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
2401436a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
2401436e:	6836      	ldr	r6, [r6, #0]
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014370:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
24014374:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24014378:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
2401437c:	ee05 6b06 	vmla.f64	d6, d5, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24014380:	ee37 7b45 	vsub.f64	d7, d7, d5
24014384:	ee27 7b00 	vmul.f64	d7, d7, d0
    Lfloat h0=(1.0 + brightness) * 0.5f;
24014388:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
2401438c:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24014390:	edcd 0a00 	vstr	s1, [sp]
24014394:	eeb0 0a41 	vmov.f32	s0, s2
24014398:	ed8d 1a01 	vstr	s2, [sp, #4]
2401439c:	f7fc fd4c 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
240143a0:	ed9d 1a01 	vldr	s2, [sp, #4]
240143a4:	eddd 0a00 	vldr	s1, [sp]
240143a8:	f106 0040 	add.w	r0, r6, #64	; 0x40
240143ac:	eeb0 0a41 	vmov.f32	s0, s2
240143b0:	ed8d 1a00 	vstr	s2, [sp]
240143b4:	edcd 0a01 	vstr	s1, [sp, #4]
240143b8:	f7fc fd3e 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
240143bc:	ed9d 1a00 	vldr	s2, [sp]
240143c0:	f106 0044 	add.w	r0, r6, #68	; 0x44
240143c4:	eddd 0a01 	vldr	s1, [sp, #4]
240143c8:	eeb0 0a41 	vmov.f32	s0, s2
240143cc:	f7fc fd34 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
240143d0:	ed9d 1a00 	vldr	s2, [sp]
240143d4:	eddd 0a01 	vldr	s1, [sp, #4]
240143d8:	f106 0048 	add.w	r0, r6, #72	; 0x48
240143dc:	eeb0 0a41 	vmov.f32	s0, s2
240143e0:	f7fc fd2a 	bl	24010e38 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
240143e4:	4629      	mov	r1, r5
240143e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
240143ea:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
240143ee:	f7fc fe99 	bl	24011124 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
240143f2:	4629      	mov	r1, r5
240143f4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240143f8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
240143fc:	f7fc fe92 	bl	24011124 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24014400:	eeb0 1a4c 	vmov.f32	s2, s24
24014404:	eef0 0a6b 	vmov.f32	s1, s23
24014408:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401440c:	eeb0 0a6a 	vmov.f32	s0, s21
24014410:	462a      	mov	r2, r5
24014412:	4639      	mov	r1, r7
    p->decay=decay;
24014414:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
24014418:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401441c:	f7fc f86e 	bl	240104fc <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
24014420:	eeb0 1a4c 	vmov.f32	s2, s24
24014424:	eef0 0a6b 	vmov.f32	s1, s23
24014428:	462a      	mov	r2, r5
2401442a:	eeb0 0a6a 	vmov.f32	s0, s21
2401442e:	4639      	mov	r1, r7
24014430:	f104 0058 	add.w	r0, r4, #88	; 0x58
24014434:	f7fc f862 	bl	240104fc <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
24014438:	6227      	str	r7, [r4, #32]
}
2401443a:	b003      	add	sp, #12
2401443c:	ecbd 8b0c 	vpop	{d8-d13}
24014440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014444:	00000000 	.word	0x00000000
24014448:	3dcccccd 	.word	0x3dcccccd
2401444c:	461c4000 	.word	0x461c4000
24014450:	3c23d70a 	.word	0x3c23d70a

24014454 <tLivingString2_free>:
{
24014454:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24014456:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24014458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
2401445c:	f7fc fc24 	bl	24010ca8 <tExpSmooth_free>
    tExpSmooth_free(&p->ppSmooth);
24014460:	f104 0060 	add.w	r0, r4, #96	; 0x60
24014464:	f7fc fc20 	bl	24010ca8 <tExpSmooth_free>
    tExpSmooth_free(&p->prpSmooth);
24014468:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401446c:	f7fc fc1c 	bl	24010ca8 <tExpSmooth_free>
    tExpSmooth_free(&p->puSmooth);
24014470:	f104 0068 	add.w	r0, r4, #104	; 0x68
24014474:	f7fc fc18 	bl	24010ca8 <tExpSmooth_free>
    tHermiteDelay_free(&p->delLF);
24014478:	f104 002c 	add.w	r0, r4, #44	; 0x2c
2401447c:	f7fb fe12 	bl	240100a4 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUF);
24014480:	f104 0030 	add.w	r0, r4, #48	; 0x30
24014484:	f7fb fe0e 	bl	240100a4 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUB);
24014488:	f104 0034 	add.w	r0, r4, #52	; 0x34
2401448c:	f7fb fe0a 	bl	240100a4 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delLB);
24014490:	f104 0038 	add.w	r0, r4, #56	; 0x38
24014494:	f7fb fe06 	bl	240100a4 <tHermiteDelay_free>
    tTwoZero_free(&p->bridgeFilter);
24014498:	f104 003c 	add.w	r0, r4, #60	; 0x3c
2401449c:	f7fc fcac 	bl	24010df8 <tTwoZero_free>
    tTwoZero_free(&p->nutFilter);
240144a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
240144a4:	f7fc fca8 	bl	24010df8 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterU);
240144a8:	f104 0044 	add.w	r0, r4, #68	; 0x44
240144ac:	f7fc fca4 	bl	24010df8 <tTwoZero_free>
    tTwoZero_free(&p->prepFilterL);
240144b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
240144b4:	f7fc fca0 	bl	24010df8 <tTwoZero_free>
    tHighpass_free(&p->DCblockerU);
240144b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
240144bc:	f7fc fe52 	bl	24011164 <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
240144c0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240144c4:	f7fc fe4e 	bl	24011164 <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
240144c8:	f104 0054 	add.w	r0, r4, #84	; 0x54
240144cc:	f7fc f83e 	bl	2401054c <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
240144d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
240144d4:	f7fc f83a 	bl	2401054c <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
240144d8:	6821      	ldr	r1, [r4, #0]
240144da:	4620      	mov	r0, r4
}
240144dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
240144e0:	f7fe bd54 	b.w	24012f8c <mpool_free>

240144e4 <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
240144e4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
240144e8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 2401451c <tLivingString2_setFreq+0x38>
240144ec:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240144ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240144f2:	fe80 0a66 	vminnm.f32	s0, s0, s13
240144f6:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
240144fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
240144fe:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014502:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24014506:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
2401450a:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
2401450e:	ee30 0a47 	vsub.f32	s0, s0, s14
24014512:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24014516:	f019 b8fb 	b.w	2402d710 <__tExpSmooth_setDest_veneer>
2401451a:	bf00      	nop
2401451c:	461c4000 	.word	0x461c4000

24014520 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
24014520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014524:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
24014526:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014540 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401452a:	f103 0060 	add.w	r0, r3, #96	; 0x60
2401452e:	fe80 0a47 	vminnm.f32	s0, s0, s14
24014532:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
24014536:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
2401453a:	f019 b8e9 	b.w	2402d710 <__tExpSmooth_setDest_veneer>
2401453e:	bf00      	nop
24014540:	00000000 	.word	0x00000000

24014544 <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
24014544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014548:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
2401454a:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014564 <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401454e:	f103 0064 	add.w	r0, r3, #100	; 0x64
24014552:	fe80 0a47 	vminnm.f32	s0, s0, s14
24014556:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
2401455a:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
2401455e:	f019 b8d7 	b.w	2402d710 <__tExpSmooth_setDest_veneer>
24014562:	bf00      	nop
24014564:	00000000 	.word	0x00000000

24014568 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
24014568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401456c:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
2401456e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014588 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24014572:	f103 0068 	add.w	r0, r3, #104	; 0x68
24014576:	fe80 0a47 	vminnm.f32	s0, s0, s14
2401457a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
2401457e:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24014582:	f019 b8c5 	b.w	2402d710 <__tExpSmooth_setDest_veneer>
24014586:	bf00      	nop
24014588:	00000000 	.word	0x00000000

2401458c <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
2401458c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
24014590:	eddf 7a04 	vldr	s15, [pc, #16]	; 240145a4 <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
24014594:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
24014596:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
2401459a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
2401459e:	ed83 0a06 	vstr	s0, [r3, #24]
}
240145a2:	4770      	bx	lr
240145a4:	00000000 	.word	0x00000000

240145a8 <tLivingString2_setBrightness>:
    Lfloat h0=(1.0 + brightness) * 0.5f;
240145a8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240145ac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
240145b0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
240145b4:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    Lfloat h0=(1.0 + brightness) * 0.5f;
240145b8:	ee00 6b06 	vmla.f64	d6, d0, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
240145bc:	ee37 7b40 	vsub.f64	d7, d7, d0
{
240145c0:	b510      	push	{r4, lr}
    Lfloat h1=(1.0 - brightness) * 0.25f;
240145c2:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
240145c6:	6804      	ldr	r4, [r0, #0]
{
240145c8:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240145ca:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
240145ce:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
240145d2:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
240145d6:	edcd 0a00 	vstr	s1, [sp]
240145da:	eeb0 0a41 	vmov.f32	s0, s2
240145de:	ed8d 1a01 	vstr	s2, [sp, #4]
240145e2:	f7fc fc29 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
240145e6:	ed9d 1a01 	vldr	s2, [sp, #4]
240145ea:	eddd 0a00 	vldr	s1, [sp]
240145ee:	f104 0040 	add.w	r0, r4, #64	; 0x40
240145f2:	eeb0 0a41 	vmov.f32	s0, s2
240145f6:	ed8d 1a00 	vstr	s2, [sp]
240145fa:	edcd 0a01 	vstr	s1, [sp, #4]
240145fe:	f7fc fc1b 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24014602:	ed9d 1a00 	vldr	s2, [sp]
24014606:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401460a:	eddd 0a01 	vldr	s1, [sp, #4]
2401460e:	eeb0 0a41 	vmov.f32	s0, s2
24014612:	f7fc fc11 	bl	24010e38 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24014616:	ed9d 1a00 	vldr	s2, [sp]
2401461a:	eddd 0a01 	vldr	s1, [sp, #4]
2401461e:	f104 0048 	add.w	r0, r4, #72	; 0x48
24014622:	eeb0 0a41 	vmov.f32	s0, s2
}
24014626:	b002      	add	sp, #8
24014628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
2401462c:	f7fc bc04 	b.w	24010e38 <tTwoZero_setCoefficients>

24014630 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, Lfloat decay)
{
24014630:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24014632:	6804      	ldr	r4, [r0, #0]
{
24014634:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
24014638:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2401463c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24014658 <tLivingString2_setDecay+0x28>
24014640:	ed94 7a01 	vldr	s14, [r4, #4]
24014644:	ee67 7a87 	vmul.f32	s15, s15, s14
24014648:	eec0 0aa7 	vdiv.f32	s1, s1, s15
2401464c:	f001 fb60 	bl	24015d10 <powf>
24014650:	ed84 0a07 	vstr	s0, [r4, #28]
}
24014654:	bd10      	pop	{r4, pc}
24014656:	bf00      	nop
24014658:	3a83126f 	.word	0x3a83126f

2401465c <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, Lfloat targetLev)
{
2401465c:	b510      	push	{r4, lr}
2401465e:	ed2d 8b02 	vpush	{d8}
24014662:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24014666:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
24014668:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401466c:	f7fb ffaa 	bl	240105c4 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24014670:	eeb0 0a48 	vmov.f32	s0, s16
24014674:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24014678:	ecbd 8b02 	vpop	{d8}
2401467c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24014680:	f7fb bfa0 	b.w	240105c4 <tFeedbackLeveler_setTargetLevel>

24014684 <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, Lfloat levSmoothFactor)
{
24014684:	b510      	push	{r4, lr}
24014686:	ed2d 8b02 	vpush	{d8}
2401468a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
2401468e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
24014690:	f104 0054 	add.w	r0, r4, #84	; 0x54
24014694:	f7fb ff6a 	bl	2401056c <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24014698:	eeb0 0a48 	vmov.f32	s0, s16
2401469c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
240146a0:	ecbd 8b02 	vpop	{d8}
240146a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
240146a8:	f7fb bf60 	b.w	2401056c <tFeedbackLeveler_setFactor>

240146ac <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, Lfloat levStrength)
{
240146ac:	b510      	push	{r4, lr}
240146ae:	ed2d 8b02 	vpush	{d8}
240146b2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
240146b6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
240146b8:	f104 0054 	add.w	r0, r4, #84	; 0x54
240146bc:	f7fb ff52 	bl	24010564 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240146c0:	eeb0 0a48 	vmov.f32	s0, s16
240146c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
240146c8:	ecbd 8b02 	vpop	{d8}
240146cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
240146d0:	f7fb bf48 	b.w	24010564 <tFeedbackLeveler_setStrength>

240146d4 <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
240146d4:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
240146d6:	6805      	ldr	r5, [r0, #0]
{
240146d8:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
240146da:	f105 0054 	add.w	r0, r5, #84	; 0x54
240146de:	f7fb ff49 	bl	24010574 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
240146e2:	4621      	mov	r1, r4
240146e4:	f105 0058 	add.w	r0, r5, #88	; 0x58
240146e8:	f7fb ff44 	bl	24010574 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
240146ec:	622c      	str	r4, [r5, #32]
}
240146ee:	bd38      	pop	{r3, r4, r5, pc}

240146f0 <tLivingString2_tick>:

Lfloat   tLivingString2_tick(tLivingString2* const pl, Lfloat input)
{
240146f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
240146f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240146f8:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
240146fc:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
240146fe:	ee60 aa27 	vmul.f32	s21, s0, s15
    //Lfloat pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
    Lfloat lowLen=prepP*wLen;
    Lfloat upLen=(1.0f-prepP)*wLen;
24014702:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
24014706:	f104 005c 	add.w	r0, r4, #92	; 0x5c
2401470a:	f019 f829 	bl	2402d760 <__tExpSmooth_tick_veneer>
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
2401470e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
24014712:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
24014716:	f019 f823 	bl	2402d760 <__tExpSmooth_tick_veneer>
2401471a:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
2401471e:	f104 0064 	add.w	r0, r4, #100	; 0x64
24014722:	f019 f81d 	bl	2402d760 <__tExpSmooth_tick_veneer>
    Lfloat upLen=(1.0f-prepP)*wLen;
24014726:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
2401472a:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
2401472e:	eeb4 8ac0 	vcmpe.f32	s16, s0
    Lfloat lowLen=prepP*wLen;
24014732:	ee28 9a80 	vmul.f32	s18, s17, s0
    Lfloat upLen=(1.0f-prepP)*wLen;
24014736:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
2401473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401473e:	f340 8170 	ble.w	24014a22 <tLivingString2_tick+0x332>
    {
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
24014742:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014746:	f104 0930 	add.w	r9, r4, #48	; 0x30
2401474a:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
2401474e:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014752:	4648      	mov	r0, r9
    {
         Lfloat fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014754:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
24014758:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
2401475c:	f104 0638 	add.w	r6, r4, #56	; 0x38
24014760:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24014764:	eebc bae6 	vcvt.u32.f32	s22, s13
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014768:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401476c:	ee1b 1a10 	vmov	r1, s22
24014770:	ee77 ba2b 	vadd.f32	s23, s14, s23
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014774:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014778:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401477c:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24014780:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014784:	eeb0 0a6b 	vmov.f32	s0, s23
24014788:	f7fb fd1a 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
2401478c:	ee1b 1a10 	vmov	r1, s22
24014790:	4648      	mov	r0, r9
24014792:	eeb0 0a6a 	vmov.f32	s0, s21
24014796:	3101      	adds	r1, #1
24014798:	f7fb fd12 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
2401479c:	eefc 7ac8 	vcvt.u32.f32	s15, s16
240147a0:	4640      	mov	r0, r8
240147a2:	eeb0 0a6b 	vmov.f32	s0, s23
240147a6:	ee17 1a90 	vmov	r1, s15
240147aa:	f7fb fd09 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPLfloat, (uint32_t) (upLen - pickPInt - 1));
240147ae:	ee38 7a6c 	vsub.f32	s14, s16, s25
240147b2:	eeb0 0a6a 	vmov.f32	s0, s21
240147b6:	4640      	mov	r0, r8
240147b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240147bc:	ee17 1a90 	vmov	r1, s15
240147c0:	f7fb fcfe 	bl	240101c0 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240147c4:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240147c6:	f104 0554 	add.w	r5, r4, #84	; 0x54
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240147ca:	f7fb fc93 	bl	240100f4 <tHermiteDelay_tickOut>
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240147ce:	4648      	mov	r0, r9
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240147d0:	eef0 aa40 	vmov.f32	s21, s0
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240147d4:	f7fb fc8e 	bl	240100f4 <tHermiteDelay_tickOut>
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
240147d8:	4640      	mov	r0, r8
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240147da:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
240147de:	f7fb fc89 	bl	240100f4 <tHermiteDelay_tickOut>
240147e2:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
240147e6:	4630      	mov	r0, r6
240147e8:	f7fb fc84 	bl	240100f4 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
240147ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
240147f0:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
240147f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240147f8:	f018 ffaa 	bl	2402d750 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
240147fc:	eef0 0a4b 	vmov.f32	s1, s22
24014800:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
24014804:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014808:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401480c:	f018 ffa0 	bl	2402d750 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24014810:	eef0 0a48 	vmov.f32	s1, s16
24014814:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014818:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
2401481c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014820:	f018 ff96 	bl	2402d750 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24014824:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24014828:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401482c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24014830:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014834:	f018 ff8c 	bl	2402d750 <__LEAF_clip_veneer>
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014838:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401483a:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401483e:	2b00      	cmp	r3, #0
24014840:	f040 80ec 	bne.w	24014a1c <tLivingString2_tick+0x32c>
24014844:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24014848:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401484c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24014850:	eeb0 0a48 	vmov.f32	s0, s16
24014854:	f7fc fad4 	bl	24010e00 <tTwoZero_tick>
24014858:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401485c:	f7fc fc92 	bl	24011184 <tHighpass_tick>
24014860:	4628      	mov	r0, r5
24014862:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
24014866:	f104 0558 	add.w	r5, r4, #88	; 0x58
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
2401486a:	f7fb fe87 	bl	2401057c <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
2401486e:	eeb0 1a6a 	vmov.f32	s2, s21
24014872:	eef1 0a40 	vneg.f32	s1, s0
24014876:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401487a:	f018 ff69 	bl	2402d750 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
2401487e:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24014880:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24014884:	f7fb fc28 	bl	240100d8 <tHermiteDelay_tickIn>
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
24014888:	f104 0048 	add.w	r0, r4, #72	; 0x48
2401488c:	eeb0 0a4b 	vmov.f32	s0, s22
24014890:	f7fc fab6 	bl	24010e00 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
24014894:	eeb0 1a6a 	vmov.f32	s2, s21
24014898:	eef1 0a40 	vneg.f32	s1, s0
2401489c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240148a0:	f018 ff56 	bl	2402d750 <__LEAF_clip_veneer>
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240148a4:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
240148a8:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240148ac:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240148b0:	eeb0 1a6a 	vmov.f32	s2, s21
240148b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240148b8:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240148bc:	eee7 0a87 	vfma.f32	s1, s15, s14
240148c0:	f018 ff46 	bl	2402d750 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
240148c4:	4630      	mov	r0, r6
240148c6:	f7fb fc07 	bl	240100d8 <tHermiteDelay_tickIn>
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240148ca:	6a23      	ldr	r3, [r4, #32]
240148cc:	b90b      	cbnz	r3, 240148d2 <tLivingString2_tick+0x1e2>
240148ce:	edd4 aa07 	vldr	s21, [r4, #28]
240148d2:	eeb0 0a4c 	vmov.f32	s0, s24
240148d6:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240148da:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240148de:	f7fc fa8f 	bl	24010e00 <tTwoZero_tick>
240148e2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240148e6:	f7fc fc4d 	bl	24011184 <tHighpass_tick>
240148ea:	4628      	mov	r0, r5
240148ec:	ee20 0a2a 	vmul.f32	s0, s0, s21
240148f0:	f7fb fe44 	bl	2401057c <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
240148f4:	eeb0 1a4c 	vmov.f32	s2, s24
240148f8:	eef1 0a40 	vneg.f32	s1, s0
240148fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014900:	f018 ff26 	bl	2402d750 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
24014904:	4638      	mov	r0, r7
24014906:	f7fb fbe7 	bl	240100d8 <tHermiteDelay_tickIn>
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
2401490a:	f104 0044 	add.w	r0, r4, #68	; 0x44
2401490e:	eeb0 0a6b 	vmov.f32	s0, s23
24014912:	f7fc fa75 	bl	24010e00 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
24014916:	eeb0 1a4c 	vmov.f32	s2, s24
2401491a:	eef1 0a40 	vneg.f32	s1, s0
2401491e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014922:	f018 ff15 	bl	2402d750 <__LEAF_clip_veneer>
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24014926:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401492a:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401492e:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24014932:	eeb0 1a4c 	vmov.f32	s2, s24
24014936:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401493a:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
2401493e:	eee7 0a87 	vfma.f32	s1, s15, s14
24014942:	f018 ff05 	bl	2402d750 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
24014946:	4648      	mov	r0, r9
24014948:	f7fb fbc6 	bl	240100d8 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
2401494c:	eeb0 0a49 	vmov.f32	s0, s18
24014950:	4638      	mov	r0, r7
24014952:	f7fb fbf9 	bl	24010148 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
24014956:	eeb0 0a49 	vmov.f32	s0, s18
2401495a:	4630      	mov	r0, r6
2401495c:	f7fb fbf4 	bl	24010148 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
24014960:	eeb0 0a69 	vmov.f32	s0, s19
24014964:	4648      	mov	r0, r9
24014966:	f7fb fbef 	bl	24010148 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
2401496a:	eeb0 0a69 	vmov.f32	s0, s19
2401496e:	4640      	mov	r0, r8
24014970:	f7fb fbea 	bl	24010148 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    Lfloat pickupOut = 0.0f;
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
24014974:	f104 0068 	add.w	r0, r4, #104	; 0x68
24014978:	f018 fef2 	bl	2402d760 <__tExpSmooth_tick_veneer>
    if (pupos < 0.9999f)
2401497c:	eddf 7a66 	vldr	s15, [pc, #408]	; 24014b18 <tLivingString2_tick+0x428>
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
24014980:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
24014984:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401498c:	d53e      	bpl.n	24014a0c <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
2401498e:	eeb4 aac0 	vcmpe.f32	s20, s0
24014992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014996:	f140 8082 	bpl.w	24014a9e <tLivingString2_tick+0x3ae>
        {
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
2401499a:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            Lfloat PUPLfloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
2401499e:	4648      	mov	r0, r9
240149a0:	ee39 9a0c 	vadd.f32	s18, s18, s24
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
240149a4:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
240149a8:	eea8 9aea 	vfms.f32	s18, s17, s21
240149ac:	eebc aac8 	vcvt.u32.f32	s20, s16
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240149b0:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240149b4:	ee1a 1a10 	vmov	r1, s20
240149b8:	f7fb fbf6 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240149bc:	ee1a 1a10 	vmov	r1, s20
240149c0:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240149c2:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240149c6:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240149ca:	3101      	adds	r1, #1
240149cc:	f7fb fbec 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240149d0:	4640      	mov	r0, r8
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240149d2:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240149d6:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
240149da:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240149de:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240149e2:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240149e6:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240149ea:	f7fb fbdd 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
240149ee:	eefc 7ae9 	vcvt.u32.f32	s15, s19
240149f2:	4640      	mov	r0, r8
240149f4:	ee3a aa00 	vadd.f32	s20, s20, s0
240149f8:	ee17 1a90 	vmov	r1, s15
240149fc:	f7fb fbd4 	bl	240101a8 <tHermiteDelay_tapOut>
24014a00:	ee38 8a00 	vadd.f32	s16, s16, s0
24014a04:	ee28 8a2b 	vmul.f32	s16, s16, s23
24014a08:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
24014a0c:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24014a10:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24014a14:	ecbd 8b0a 	vpop	{d8-d12}
24014a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014a1c:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
24014a20:	e712      	b.n	24014848 <tLivingString2_tick+0x158>
         Lfloat fullPickPoint =  pickP * wLen;
24014a22:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a26:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014a2a:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014a2e:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a32:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014a34:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24014a38:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a3c:	ee7c bac8 	vsub.f32	s23, s25, s16
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014a40:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a44:	ee1c 1a10 	vmov	r1, s24
24014a48:	ee7b baa7 	vadd.f32	s23, s23, s15
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014a4c:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014a50:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a54:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
24014a58:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014a5c:	eeb0 0a6b 	vmov.f32	s0, s23
24014a60:	f7fb fbae 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
24014a64:	ee1c 1a10 	vmov	r1, s24
24014a68:	4638      	mov	r0, r7
24014a6a:	eeb0 0a48 	vmov.f32	s0, s16
24014a6e:	3101      	adds	r1, #1
24014a70:	f7fb fba6 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014a74:	eefc 7acb 	vcvt.u32.f32	s15, s22
24014a78:	4630      	mov	r0, r6
24014a7a:	eeb0 0a6b 	vmov.f32	s0, s23
24014a7e:	ee17 1a90 	vmov	r1, s15
24014a82:	f7fb fb9d 	bl	240101c0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPLfloat, (uint32_t) (lowLen - pickPInt - 1));
24014a86:	ee7b 7a6c 	vsub.f32	s15, s22, s25
24014a8a:	eeb0 0a48 	vmov.f32	s0, s16
24014a8e:	4630      	mov	r0, r6
24014a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24014a94:	ee17 1a90 	vmov	r1, s15
24014a98:	f7fb fb92 	bl	240101c0 <tHermiteDelay_addTo>
24014a9c:	e692      	b.n	240147c4 <tLivingString2_tick+0xd4>
             Lfloat fullPUPoint =  pupos * wLen;
24014a9e:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014aa2:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
24014aa4:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014aa8:	ee3c aa68 	vsub.f32	s20, s24, s17
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24014aac:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014ab0:	ee19 1a90 	vmov	r1, s19
24014ab4:	f7fb fb78 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014ab8:	ee19 1a90 	vmov	r1, s19
24014abc:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014abe:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014ac2:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014ac6:	3101      	adds	r1, #1
24014ac8:	f7fb fb6e 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014acc:	4630      	mov	r0, r6
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
24014ace:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014ad2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
24014ad6:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
24014ada:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014ade:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
24014ae2:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
24014ae6:	f7fb fb5f 	bl	240101a8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
24014aea:	eefc 7ac9 	vcvt.u32.f32	s15, s18
24014aee:	4630      	mov	r0, r6
24014af0:	ee79 9a80 	vadd.f32	s19, s19, s0
24014af4:	ee17 1a90 	vmov	r1, s15
24014af8:	f7fb fb56 	bl	240101a8 <tHermiteDelay_tapOut>
24014afc:	ee38 8a00 	vadd.f32	s16, s16, s0
24014b00:	ee28 8a28 	vmul.f32	s16, s16, s17
24014b04:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
24014b08:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
24014b0c:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24014b10:	ecbd 8b0a 	vpop	{d8-d12}
24014b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24014b18:	3f7ff972 	.word	0x3f7ff972

24014b1c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24014b1c:	4770      	bx	lr
24014b1e:	bf00      	nop

24014b20 <LEAF_init>:
{
24014b20:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
24014b22:	6200      	str	r0, [r0, #32]
{
24014b24:	4604      	mov	r4, r0
24014b26:	461d      	mov	r5, r3
24014b28:	ed2d 8b02 	vpush	{d8}
24014b2c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24014b30:	f7fe f954 	bl	24012ddc <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
24014b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014b38:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24014b6c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24014b3c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24014b3e:	4b0c      	ldr	r3, [pc, #48]	; (24014b70 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24014b40:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
24014b44:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
24014b48:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24014b4a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24014b4c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24014b50:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
24014b54:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014b58:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24014b5c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014b60:	edc4 7a03 	vstr	s15, [r4, #12]
}
24014b64:	ecbd 8b02 	vpop	{d8}
24014b68:	bd38      	pop	{r3, r4, r5, pc}
24014b6a:	bf00      	nop
24014b6c:	40c90fdb 	.word	0x40c90fdb
24014b70:	24014b1d 	.word	0x24014b1d

24014b74 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24014b74:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
24014b76:	eb00 0281 	add.w	r2, r0, r1, lsl #2
24014b7a:	2401      	movs	r4, #1
24014b7c:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
24014b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24014b82:	6b83      	ldr	r3, [r0, #56]	; 0x38
24014b84:	4718      	bx	r3
24014b86:	bf00      	nop

24014b88 <arm_fir_interpolate_init_f32>:
24014b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24014b8a:	fbb2 f6f1 	udiv	r6, r2, r1
24014b8e:	fb01 2416 	mls	r4, r1, r6, r2
24014b92:	9f06      	ldr	r7, [sp, #24]
24014b94:	b984      	cbnz	r4, 24014bb8 <arm_fir_interpolate_init_f32+0x30>
24014b96:	6043      	str	r3, [r0, #4]
24014b98:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24014b9c:	9b07      	ldr	r3, [sp, #28]
24014b9e:	4605      	mov	r5, r0
24014ba0:	7001      	strb	r1, [r0, #0]
24014ba2:	4621      	mov	r1, r4
24014ba4:	441a      	add	r2, r3
24014ba6:	8046      	strh	r6, [r0, #2]
24014ba8:	4638      	mov	r0, r7
24014baa:	4432      	add	r2, r6
24014bac:	0092      	lsls	r2, r2, #2
24014bae:	f000 fc97 	bl	240154e0 <memset>
24014bb2:	60af      	str	r7, [r5, #8]
24014bb4:	4620      	mov	r0, r4
24014bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014bb8:	f06f 0001 	mvn.w	r0, #1
24014bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24014bbe:	bf00      	nop

24014bc0 <arm_fir_interpolate_f32>:
24014bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24014bc4:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
24014bc8:	b08f      	sub	sp, #60	; 0x3c
24014bca:	8845      	ldrh	r5, [r0, #2]
24014bcc:	9202      	str	r2, [sp, #8]
24014bce:	442c      	add	r4, r5
24014bd0:	6882      	ldr	r2, [r0, #8]
24014bd2:	930d      	str	r3, [sp, #52]	; 0x34
24014bd4:	089b      	lsrs	r3, r3, #2
24014bd6:	eb02 0784 	add.w	r7, r2, r4, lsl #2
24014bda:	9107      	str	r1, [sp, #28]
24014bdc:	950b      	str	r5, [sp, #44]	; 0x2c
24014bde:	4616      	mov	r6, r2
24014be0:	9209      	str	r2, [sp, #36]	; 0x24
24014be2:	f8d0 b004 	ldr.w	fp, [r0, #4]
24014be6:	970a      	str	r7, [sp, #40]	; 0x28
24014be8:	930c      	str	r3, [sp, #48]	; 0x30
24014bea:	f000 811b 	beq.w	24014e24 <arm_fir_interpolate_f32+0x264>
24014bee:	462a      	mov	r2, r5
24014bf0:	468e      	mov	lr, r1
24014bf2:	4619      	mov	r1, r3
24014bf4:	4635      	mov	r5, r6
24014bf6:	4613      	mov	r3, r2
24014bf8:	ea4f 0892 	mov.w	r8, r2, lsr #2
24014bfc:	f106 0c1c 	add.w	ip, r6, #28
24014c00:	f10e 0210 	add.w	r2, lr, #16
24014c04:	ea4f 1608 	mov.w	r6, r8, lsl #4
24014c08:	f003 0903 	and.w	r9, r3, #3
24014c0c:	f107 0310 	add.w	r3, r7, #16
24014c10:	f8cd b020 	str.w	fp, [sp, #32]
24014c14:	4693      	mov	fp, r2
24014c16:	e9cd 3103 	strd	r3, r1, [sp, #12]
24014c1a:	f106 030c 	add.w	r3, r6, #12
24014c1e:	4466      	add	r6, ip
24014c20:	18eb      	adds	r3, r5, r3
24014c22:	9301      	str	r3, [sp, #4]
24014c24:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24014c28:	9a03      	ldr	r2, [sp, #12]
24014c2a:	f842 3c10 	str.w	r3, [r2, #-16]
24014c2e:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
24014c32:	f842 3c0c 	str.w	r3, [r2, #-12]
24014c36:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24014c3a:	f842 3c08 	str.w	r3, [r2, #-8]
24014c3e:	f85b 3c04 	ldr.w	r3, [fp, #-4]
24014c42:	f842 3c04 	str.w	r3, [r2, #-4]
24014c46:	f890 a000 	ldrb.w	sl, [r0]
24014c4a:	4653      	mov	r3, sl
24014c4c:	f1ba 0f00 	cmp.w	sl, #0
24014c50:	f000 80c5 	beq.w	24014dde <arm_fir_interpolate_f32+0x21e>
24014c54:	f1ac 0310 	sub.w	r3, ip, #16
24014c58:	f8cd b018 	str.w	fp, [sp, #24]
24014c5c:	4655      	mov	r5, sl
24014c5e:	9f02      	ldr	r7, [sp, #8]
24014c60:	f04f 0e01 	mov.w	lr, #1
24014c64:	f8dd b020 	ldr.w	fp, [sp, #32]
24014c68:	9305      	str	r3, [sp, #20]
24014c6a:	eba5 040e 	sub.w	r4, r5, lr
24014c6e:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
24014c72:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
24014c76:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
24014c7a:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
24014c7e:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 24014f60 <arm_fir_interpolate_f32+0x3a0>
24014c82:	f1b8 0f00 	cmp.w	r8, #0
24014c86:	f000 8163 	beq.w	24014f50 <arm_fir_interpolate_f32+0x390>
24014c8a:	eef0 5a47 	vmov.f32	s11, s14
24014c8e:	00a9      	lsls	r1, r5, #2
24014c90:	eef0 4a47 	vmov.f32	s9, s14
24014c94:	4662      	mov	r2, ip
24014c96:	eef0 6a47 	vmov.f32	s13, s14
24014c9a:	4623      	mov	r3, r4
24014c9c:	ed52 1a04 	vldr	s3, [r2, #-16]
24014ca0:	3210      	adds	r2, #16
24014ca2:	edd3 7a00 	vldr	s15, [r3]
24014ca6:	440b      	add	r3, r1
24014ca8:	ee27 6a82 	vmul.f32	s12, s15, s4
24014cac:	edd3 3a00 	vldr	s7, [r3]
24014cb0:	ee27 4a83 	vmul.f32	s8, s15, s6
24014cb4:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
24014cb8:	ee27 5aa2 	vmul.f32	s10, s15, s5
24014cbc:	440b      	add	r3, r1
24014cbe:	ee61 7aa7 	vmul.f32	s15, s3, s15
24014cc2:	ee76 6a26 	vadd.f32	s13, s12, s13
24014cc6:	ed93 6a00 	vldr	s12, [r3]
24014cca:	ee63 0a83 	vmul.f32	s1, s7, s6
24014cce:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
24014cd2:	ee75 5a25 	vadd.f32	s11, s10, s11
24014cd6:	440b      	add	r3, r1
24014cd8:	ee21 1aa3 	vmul.f32	s2, s3, s7
24014cdc:	ee74 4a24 	vadd.f32	s9, s8, s9
24014ce0:	ed93 5a00 	vldr	s10, [r3]
24014ce4:	ee23 4aa2 	vmul.f32	s8, s7, s5
24014ce8:	440b      	add	r3, r1
24014cea:	ee37 7a87 	vadd.f32	s14, s15, s14
24014cee:	ee63 3a82 	vmul.f32	s7, s7, s4
24014cf2:	ee74 4a24 	vadd.f32	s9, s8, s9
24014cf6:	ee70 0aa6 	vadd.f32	s1, s1, s13
24014cfa:	ee21 4a86 	vmul.f32	s8, s3, s12
24014cfe:	ee66 6a22 	vmul.f32	s13, s12, s5
24014d02:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
24014d06:	ee31 1a25 	vadd.f32	s2, s2, s11
24014d0a:	4296      	cmp	r6, r2
24014d0c:	ee73 7a87 	vadd.f32	s15, s7, s14
24014d10:	ee62 5a06 	vmul.f32	s11, s4, s12
24014d14:	ee26 7a03 	vmul.f32	s14, s12, s6
24014d18:	ee61 1a85 	vmul.f32	s3, s3, s10
24014d1c:	ee34 4a24 	vadd.f32	s8, s8, s9
24014d20:	ee35 6a81 	vadd.f32	s12, s11, s2
24014d24:	ee62 4a05 	vmul.f32	s9, s4, s10
24014d28:	ee63 5a05 	vmul.f32	s11, s6, s10
24014d2c:	ee76 6aa0 	vadd.f32	s13, s13, s1
24014d30:	ee37 7a27 	vadd.f32	s14, s14, s15
24014d34:	ee25 5a22 	vmul.f32	s10, s10, s5
24014d38:	ee71 6aa6 	vadd.f32	s13, s3, s13
24014d3c:	ee74 4a84 	vadd.f32	s9, s9, s8
24014d40:	ee75 5a86 	vadd.f32	s11, s11, s12
24014d44:	ee35 7a07 	vadd.f32	s14, s10, s14
24014d48:	d1a8      	bne.n	24014c9c <arm_fir_interpolate_f32+0xdc>
24014d4a:	fb08 f305 	mul.w	r3, r8, r5
24014d4e:	9a01      	ldr	r2, [sp, #4]
24014d50:	eb04 1403 	add.w	r4, r4, r3, lsl #4
24014d54:	f1b9 0f00 	cmp.w	r9, #0
24014d58:	d01e      	beq.n	24014d98 <arm_fir_interpolate_f32+0x1d8>
24014d5a:	00ad      	lsls	r5, r5, #2
24014d5c:	464b      	mov	r3, r9
24014d5e:	ed94 6a00 	vldr	s12, [r4]
24014d62:	3b01      	subs	r3, #1
24014d64:	ecf2 7a01 	vldmia	r2!, {s15}
24014d68:	442c      	add	r4, r5
24014d6a:	ee66 3a02 	vmul.f32	s7, s12, s4
24014d6e:	ee26 4a03 	vmul.f32	s8, s12, s6
24014d72:	ee26 5a22 	vmul.f32	s10, s12, s5
24014d76:	eeb0 2a43 	vmov.f32	s4, s6
24014d7a:	eeb0 3a62 	vmov.f32	s6, s5
24014d7e:	eef0 2a67 	vmov.f32	s5, s15
24014d82:	ee67 7a86 	vmul.f32	s15, s15, s12
24014d86:	ee76 6aa3 	vadd.f32	s13, s13, s7
24014d8a:	ee74 4a84 	vadd.f32	s9, s9, s8
24014d8e:	ee75 5a85 	vadd.f32	s11, s11, s10
24014d92:	ee37 7a27 	vadd.f32	s14, s14, s15
24014d96:	d1e2      	bne.n	24014d5e <arm_fir_interpolate_f32+0x19e>
24014d98:	edc7 6a00 	vstr	s13, [r7]
24014d9c:	45f2      	cmp	sl, lr
24014d9e:	7803      	ldrb	r3, [r0, #0]
24014da0:	f10e 0201 	add.w	r2, lr, #1
24014da4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24014da8:	edc3 4a00 	vstr	s9, [r3]
24014dac:	7803      	ldrb	r3, [r0, #0]
24014dae:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
24014db2:	edc3 5a00 	vstr	s11, [r3]
24014db6:	7803      	ldrb	r3, [r0, #0]
24014db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014dbc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
24014dc0:	f107 0704 	add.w	r7, r7, #4
24014dc4:	ed83 7a00 	vstr	s14, [r3]
24014dc8:	d002      	beq.n	24014dd0 <arm_fir_interpolate_f32+0x210>
24014dca:	4696      	mov	lr, r2
24014dcc:	7805      	ldrb	r5, [r0, #0]
24014dce:	e74c      	b.n	24014c6a <arm_fir_interpolate_f32+0xaa>
24014dd0:	9b02      	ldr	r3, [sp, #8]
24014dd2:	f8dd b018 	ldr.w	fp, [sp, #24]
24014dd6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24014dda:	9302      	str	r3, [sp, #8]
24014ddc:	7803      	ldrb	r3, [r0, #0]
24014dde:	9a03      	ldr	r2, [sp, #12]
24014de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24014de4:	f10b 0b10 	add.w	fp, fp, #16
24014de8:	f10c 0c10 	add.w	ip, ip, #16
24014dec:	3210      	adds	r2, #16
24014dee:	3610      	adds	r6, #16
24014df0:	9203      	str	r2, [sp, #12]
24014df2:	9a01      	ldr	r2, [sp, #4]
24014df4:	3210      	adds	r2, #16
24014df6:	9201      	str	r2, [sp, #4]
24014df8:	9a02      	ldr	r2, [sp, #8]
24014dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24014dfe:	9302      	str	r3, [sp, #8]
24014e00:	9b04      	ldr	r3, [sp, #16]
24014e02:	3b01      	subs	r3, #1
24014e04:	9304      	str	r3, [sp, #16]
24014e06:	f47f af0d 	bne.w	24014c24 <arm_fir_interpolate_f32+0x64>
24014e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24014e0c:	9a07      	ldr	r2, [sp, #28]
24014e0e:	011b      	lsls	r3, r3, #4
24014e10:	f8dd b020 	ldr.w	fp, [sp, #32]
24014e14:	441a      	add	r2, r3
24014e16:	9207      	str	r2, [sp, #28]
24014e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24014e1a:	441a      	add	r2, r3
24014e1c:	920a      	str	r2, [sp, #40]	; 0x28
24014e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014e20:	441a      	add	r2, r3
24014e22:	9209      	str	r2, [sp, #36]	; 0x24
24014e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24014e26:	f013 0303 	ands.w	r3, r3, #3
24014e2a:	f000 80b1 	beq.w	24014f90 <arm_fir_interpolate_f32+0x3d0>
24014e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24014e30:	009d      	lsls	r5, r3, #2
24014e32:	990a      	ldr	r1, [sp, #40]	; 0x28
24014e34:	0894      	lsrs	r4, r2, #2
24014e36:	f002 0a03 	and.w	sl, r2, #3
24014e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014e3c:	0123      	lsls	r3, r4, #4
24014e3e:	9106      	str	r1, [sp, #24]
24014e40:	f102 0110 	add.w	r1, r2, #16
24014e44:	46a1      	mov	r9, r4
24014e46:	f103 0e10 	add.w	lr, r3, #16
24014e4a:	18d3      	adds	r3, r2, r3
24014e4c:	9101      	str	r1, [sp, #4]
24014e4e:	9907      	ldr	r1, [sp, #28]
24014e50:	4496      	add	lr, r2
24014e52:	950c      	str	r5, [sp, #48]	; 0x30
24014e54:	4429      	add	r1, r5
24014e56:	9303      	str	r3, [sp, #12]
24014e58:	f8cd b014 	str.w	fp, [sp, #20]
24014e5c:	910a      	str	r1, [sp, #40]	; 0x28
24014e5e:	9004      	str	r0, [sp, #16]
24014e60:	9a07      	ldr	r2, [sp, #28]
24014e62:	f852 3b04 	ldr.w	r3, [r2], #4
24014e66:	9207      	str	r2, [sp, #28]
24014e68:	9a01      	ldr	r2, [sp, #4]
24014e6a:	3a10      	subs	r2, #16
24014e6c:	9208      	str	r2, [sp, #32]
24014e6e:	9a06      	ldr	r2, [sp, #24]
24014e70:	f842 3b04 	str.w	r3, [r2], #4
24014e74:	9b04      	ldr	r3, [sp, #16]
24014e76:	9206      	str	r2, [sp, #24]
24014e78:	f893 b000 	ldrb.w	fp, [r3]
24014e7c:	f1bb 0f00 	cmp.w	fp, #0
24014e80:	d074      	beq.n	24014f6c <arm_fir_interpolate_f32+0x3ac>
24014e82:	465f      	mov	r7, fp
24014e84:	f04f 0c01 	mov.w	ip, #1
24014e88:	9b05      	ldr	r3, [sp, #20]
24014e8a:	eba7 000c 	sub.w	r0, r7, ip
24014e8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
24014e92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24014e96:	f1b9 0f00 	cmp.w	r9, #0
24014e9a:	d055      	beq.n	24014f48 <arm_fir_interpolate_f32+0x388>
24014e9c:	b23a      	sxth	r2, r7
24014e9e:	9b01      	ldr	r3, [sp, #4]
24014ea0:	4601      	mov	r1, r0
24014ea2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 24014f60 <arm_fir_interpolate_f32+0x3a0>
24014ea6:	0094      	lsls	r4, r2, #2
24014ea8:	0115      	lsls	r5, r2, #4
24014eaa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
24014eae:	ed13 7a04 	vldr	s14, [r3, #-16]
24014eb2:	190e      	adds	r6, r1, r4
24014eb4:	edd1 6a00 	vldr	s13, [r1]
24014eb8:	3310      	adds	r3, #16
24014eba:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
24014ebe:	4429      	add	r1, r5
24014ec0:	ee27 7a26 	vmul.f32	s14, s14, s13
24014ec4:	ed96 6a00 	vldr	s12, [r6]
24014ec8:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24014ecc:	1916      	adds	r6, r2, r4
24014ece:	ee26 6a25 	vmul.f32	s12, s12, s11
24014ed2:	ed92 5a00 	vldr	s10, [r2]
24014ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
24014eda:	edd6 5a00 	vldr	s11, [r6]
24014ede:	ee26 7a85 	vmul.f32	s14, s13, s10
24014ee2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
24014ee6:	459e      	cmp	lr, r3
24014ee8:	442a      	add	r2, r5
24014eea:	ee76 7a27 	vadd.f32	s15, s12, s15
24014eee:	ee65 6aa6 	vmul.f32	s13, s11, s13
24014ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
24014ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24014efa:	d1d8      	bne.n	24014eae <arm_fir_interpolate_f32+0x2ee>
24014efc:	fb09 f404 	mul.w	r4, r9, r4
24014f00:	9a03      	ldr	r2, [sp, #12]
24014f02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
24014f06:	f1ba 0f00 	cmp.w	sl, #0
24014f0a:	d00c      	beq.n	24014f26 <arm_fir_interpolate_f32+0x366>
24014f0c:	00bf      	lsls	r7, r7, #2
24014f0e:	4653      	mov	r3, sl
24014f10:	edd0 6a00 	vldr	s13, [r0]
24014f14:	3b01      	subs	r3, #1
24014f16:	ecb2 7a01 	vldmia	r2!, {s14}
24014f1a:	4438      	add	r0, r7
24014f1c:	ee27 7a26 	vmul.f32	s14, s14, s13
24014f20:	ee77 7a87 	vadd.f32	s15, s15, s14
24014f24:	d1f4      	bne.n	24014f10 <arm_fir_interpolate_f32+0x350>
24014f26:	45e3      	cmp	fp, ip
24014f28:	ece8 7a01 	vstmia	r8!, {s15}
24014f2c:	f10c 0301 	add.w	r3, ip, #1
24014f30:	d018      	beq.n	24014f64 <arm_fir_interpolate_f32+0x3a4>
24014f32:	469c      	mov	ip, r3
24014f34:	9b04      	ldr	r3, [sp, #16]
24014f36:	781f      	ldrb	r7, [r3, #0]
24014f38:	9b05      	ldr	r3, [sp, #20]
24014f3a:	eba7 000c 	sub.w	r0, r7, ip
24014f3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24014f42:	f1b9 0f00 	cmp.w	r9, #0
24014f46:	d1a9      	bne.n	24014e9c <arm_fir_interpolate_f32+0x2dc>
24014f48:	9a08      	ldr	r2, [sp, #32]
24014f4a:	eddf 7a05 	vldr	s15, [pc, #20]	; 24014f60 <arm_fir_interpolate_f32+0x3a0>
24014f4e:	e7da      	b.n	24014f06 <arm_fir_interpolate_f32+0x346>
24014f50:	9a05      	ldr	r2, [sp, #20]
24014f52:	eef0 5a47 	vmov.f32	s11, s14
24014f56:	eef0 4a47 	vmov.f32	s9, s14
24014f5a:	eef0 6a47 	vmov.f32	s13, s14
24014f5e:	e6f9      	b.n	24014d54 <arm_fir_interpolate_f32+0x194>
24014f60:	00000000 	.word	0x00000000
24014f64:	9b02      	ldr	r3, [sp, #8]
24014f66:	eb03 038b 	add.w	r3, r3, fp, lsl #2
24014f6a:	9302      	str	r3, [sp, #8]
24014f6c:	9b03      	ldr	r3, [sp, #12]
24014f6e:	f10e 0e04 	add.w	lr, lr, #4
24014f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24014f74:	3304      	adds	r3, #4
24014f76:	9303      	str	r3, [sp, #12]
24014f78:	9b01      	ldr	r3, [sp, #4]
24014f7a:	3304      	adds	r3, #4
24014f7c:	9301      	str	r3, [sp, #4]
24014f7e:	9b07      	ldr	r3, [sp, #28]
24014f80:	4293      	cmp	r3, r2
24014f82:	f47f af6d 	bne.w	24014e60 <arm_fir_interpolate_f32+0x2a0>
24014f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
24014f8a:	9804      	ldr	r0, [sp, #16]
24014f8c:	4413      	add	r3, r2
24014f8e:	9309      	str	r3, [sp, #36]	; 0x24
24014f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24014f92:	6885      	ldr	r5, [r0, #8]
24014f94:	1e5c      	subs	r4, r3, #1
24014f96:	08a6      	lsrs	r6, r4, #2
24014f98:	d020      	beq.n	24014fdc <arm_fir_interpolate_f32+0x41c>
24014f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014f9c:	4631      	mov	r1, r6
24014f9e:	f103 0210 	add.w	r2, r3, #16
24014fa2:	f105 0310 	add.w	r3, r5, #16
24014fa6:	f852 0c10 	ldr.w	r0, [r2, #-16]
24014faa:	3901      	subs	r1, #1
24014fac:	f102 0210 	add.w	r2, r2, #16
24014fb0:	f103 0310 	add.w	r3, r3, #16
24014fb4:	f843 0c20 	str.w	r0, [r3, #-32]
24014fb8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24014fbc:	f843 0c1c 	str.w	r0, [r3, #-28]
24014fc0:	f852 0c18 	ldr.w	r0, [r2, #-24]
24014fc4:	f843 0c18 	str.w	r0, [r3, #-24]
24014fc8:	f852 0c14 	ldr.w	r0, [r2, #-20]
24014fcc:	f843 0c14 	str.w	r0, [r3, #-20]
24014fd0:	d1e9      	bne.n	24014fa6 <arm_fir_interpolate_f32+0x3e6>
24014fd2:	0133      	lsls	r3, r6, #4
24014fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014fd6:	441d      	add	r5, r3
24014fd8:	441a      	add	r2, r3
24014fda:	9209      	str	r2, [sp, #36]	; 0x24
24014fdc:	f014 0403 	ands.w	r4, r4, #3
24014fe0:	d00a      	beq.n	24014ff8 <arm_fir_interpolate_f32+0x438>
24014fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014fe4:	3c01      	subs	r4, #1
24014fe6:	6813      	ldr	r3, [r2, #0]
24014fe8:	602b      	str	r3, [r5, #0]
24014fea:	d005      	beq.n	24014ff8 <arm_fir_interpolate_f32+0x438>
24014fec:	6853      	ldr	r3, [r2, #4]
24014fee:	2c01      	cmp	r4, #1
24014ff0:	606b      	str	r3, [r5, #4]
24014ff2:	d001      	beq.n	24014ff8 <arm_fir_interpolate_f32+0x438>
24014ff4:	6893      	ldr	r3, [r2, #8]
24014ff6:	60ab      	str	r3, [r5, #8]
24014ff8:	b00f      	add	sp, #60	; 0x3c
24014ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014ffe:	bf00      	nop

24015000 <arm_fir_decimate_init_f32>:
24015000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24015004:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
24015008:	fbbc f4f2 	udiv	r4, ip, r2
2401500c:	fb02 c414 	mls	r4, r2, r4, ip
24015010:	b99c      	cbnz	r4, 2401503a <arm_fir_decimate_init_f32+0x3a>
24015012:	460f      	mov	r7, r1
24015014:	4616      	mov	r6, r2
24015016:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
2401501a:	4605      	mov	r5, r0
2401501c:	443a      	add	r2, r7
2401501e:	8069      	strh	r1, [r5, #2]
24015020:	6043      	str	r3, [r0, #4]
24015022:	4621      	mov	r1, r4
24015024:	4462      	add	r2, ip
24015026:	4640      	mov	r0, r8
24015028:	0092      	lsls	r2, r2, #2
2401502a:	f000 fa59 	bl	240154e0 <memset>
2401502e:	4620      	mov	r0, r4
24015030:	f8c5 8008 	str.w	r8, [r5, #8]
24015034:	702e      	strb	r6, [r5, #0]
24015036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2401503a:	f06f 0001 	mvn.w	r0, #1
2401503e:	e7fa      	b.n	24015036 <arm_fir_decimate_init_f32+0x36>

24015040 <arm_fir_decimate_f32>:
24015040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24015044:	4605      	mov	r5, r0
24015046:	b08d      	sub	sp, #52	; 0x34
24015048:	4694      	mov	ip, r2
2401504a:	782c      	ldrb	r4, [r5, #0]
2401504c:	886f      	ldrh	r7, [r5, #2]
2401504e:	9001      	str	r0, [sp, #4]
24015050:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
24015054:	68ae      	ldr	r6, [r5, #8]
24015056:	4438      	add	r0, r7
24015058:	686d      	ldr	r5, [r5, #4]
2401505a:	9207      	str	r2, [sp, #28]
2401505c:	970a      	str	r7, [sp, #40]	; 0x28
2401505e:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
24015062:	9508      	str	r5, [sp, #32]
24015064:	fbb3 f3f4 	udiv	r3, r3, r4
24015068:	930b      	str	r3, [sp, #44]	; 0x2c
2401506a:	089b      	lsrs	r3, r3, #2
2401506c:	9309      	str	r3, [sp, #36]	; 0x24
2401506e:	f000 80ef 	beq.w	24015250 <arm_fir_decimate_f32+0x210>
24015072:	08ba      	lsrs	r2, r7, #2
24015074:	462b      	mov	r3, r5
24015076:	3510      	adds	r5, #16
24015078:	f007 0703 	and.w	r7, r7, #3
2401507c:	9205      	str	r2, [sp, #20]
2401507e:	0112      	lsls	r2, r2, #4
24015080:	9809      	ldr	r0, [sp, #36]	; 0x24
24015082:	f10c 0910 	add.w	r9, ip, #16
24015086:	4413      	add	r3, r2
24015088:	9100      	str	r1, [sp, #0]
2401508a:	eb05 0e02 	add.w	lr, r5, r2
2401508e:	4611      	mov	r1, r2
24015090:	9503      	str	r5, [sp, #12]
24015092:	9704      	str	r7, [sp, #16]
24015094:	9002      	str	r0, [sp, #8]
24015096:	9306      	str	r3, [sp, #24]
24015098:	00a4      	lsls	r4, r4, #2
2401509a:	4658      	mov	r0, fp
2401509c:	9a00      	ldr	r2, [sp, #0]
2401509e:	4623      	mov	r3, r4
240150a0:	f852 5b04 	ldr.w	r5, [r2], #4
240150a4:	3b01      	subs	r3, #1
240150a6:	f840 5b04 	str.w	r5, [r0], #4
240150aa:	d1f9      	bne.n	240150a0 <arm_fir_decimate_f32+0x60>
240150ac:	9b01      	ldr	r3, [sp, #4]
240150ae:	00a4      	lsls	r4, r4, #2
240150b0:	eddf 0abe 	vldr	s1, [pc, #760]	; 240153ac <arm_fir_decimate_f32+0x36c>
240150b4:	f893 8000 	ldrb.w	r8, [r3]
240150b8:	44a3      	add	fp, r4
240150ba:	9b00      	ldr	r3, [sp, #0]
240150bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
240150c0:	4423      	add	r3, r4
240150c2:	eb06 0708 	add.w	r7, r6, r8
240150c6:	9300      	str	r3, [sp, #0]
240150c8:	eb07 0c08 	add.w	ip, r7, r8
240150cc:	9b05      	ldr	r3, [sp, #20]
240150ce:	eb0c 0a08 	add.w	sl, ip, r8
240150d2:	2b00      	cmp	r3, #0
240150d4:	f000 815c 	beq.w	24015390 <arm_fir_decimate_f32+0x350>
240150d8:	eef0 4a60 	vmov.f32	s9, s1
240150dc:	9b03      	ldr	r3, [sp, #12]
240150de:	eef0 7a60 	vmov.f32	s15, s1
240150e2:	f106 0510 	add.w	r5, r6, #16
240150e6:	eeb0 7a60 	vmov.f32	s14, s1
240150ea:	f107 0410 	add.w	r4, r7, #16
240150ee:	f10c 0010 	add.w	r0, ip, #16
240150f2:	f10a 0210 	add.w	r2, sl, #16
240150f6:	ed53 5a04 	vldr	s11, [r3, #-16]
240150fa:	3310      	adds	r3, #16
240150fc:	ed12 5a04 	vldr	s10, [r2, #-16]
24015100:	3510      	adds	r5, #16
24015102:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
24015106:	3410      	adds	r4, #16
24015108:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
2401510c:	3010      	adds	r0, #16
2401510e:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
24015112:	ee65 6aa6 	vmul.f32	s13, s11, s13
24015116:	ee25 1a81 	vmul.f32	s2, s11, s2
2401511a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
2401511e:	ee65 3aa3 	vmul.f32	s7, s11, s7
24015122:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
24015126:	ee65 5a85 	vmul.f32	s11, s11, s10
2401512a:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
2401512e:	ed12 5a03 	vldr	s10, [r2, #-12]
24015132:	ee36 7a87 	vadd.f32	s14, s13, s14
24015136:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
2401513a:	ee73 1aa4 	vadd.f32	s3, s7, s9
2401513e:	ee26 2a02 	vmul.f32	s4, s12, s4
24015142:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24015146:	ee31 1a27 	vadd.f32	s2, s2, s15
2401514a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
2401514e:	ee66 7a22 	vmul.f32	s15, s12, s5
24015152:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
24015156:	ee26 3a03 	vmul.f32	s6, s12, s6
2401515a:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
2401515e:	ee75 5aa0 	vadd.f32	s11, s11, s1
24015162:	ed52 0a02 	vldr	s1, [r2, #-8]
24015166:	ee26 6a05 	vmul.f32	s12, s12, s10
2401516a:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
2401516e:	ee72 2a07 	vadd.f32	s5, s4, s14
24015172:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
24015176:	ee77 7a81 	vadd.f32	s15, s15, s2
2401517a:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
2401517e:	ee33 3a21 	vadd.f32	s6, s6, s3
24015182:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
24015186:	ee66 3aa3 	vmul.f32	s7, s13, s7
2401518a:	ed52 1a01 	vldr	s3, [r2, #-4]
2401518e:	ee26 4a84 	vmul.f32	s8, s13, s8
24015192:	459e      	cmp	lr, r3
24015194:	ee66 4aa4 	vmul.f32	s9, s13, s9
24015198:	f102 0210 	add.w	r2, r2, #16
2401519c:	ee66 6aa0 	vmul.f32	s13, s13, s1
240151a0:	ee36 6a25 	vadd.f32	s12, s12, s11
240151a4:	ee25 7a07 	vmul.f32	s14, s10, s14
240151a8:	ee34 4a27 	vadd.f32	s8, s8, s15
240151ac:	ee74 4a83 	vadd.f32	s9, s9, s6
240151b0:	ee65 7a01 	vmul.f32	s15, s10, s2
240151b4:	ee25 3a02 	vmul.f32	s6, s10, s4
240151b8:	ee73 3aa2 	vadd.f32	s7, s7, s5
240151bc:	ee76 6a86 	vadd.f32	s13, s13, s12
240151c0:	ee25 5a21 	vmul.f32	s10, s10, s3
240151c4:	ee37 7a23 	vadd.f32	s14, s14, s7
240151c8:	ee77 7a84 	vadd.f32	s15, s15, s8
240151cc:	ee73 4a24 	vadd.f32	s9, s6, s9
240151d0:	ee75 0a26 	vadd.f32	s1, s10, s13
240151d4:	d18f      	bne.n	240150f6 <arm_fir_decimate_f32+0xb6>
240151d6:	440e      	add	r6, r1
240151d8:	440f      	add	r7, r1
240151da:	448c      	add	ip, r1
240151dc:	eb0a 0001 	add.w	r0, sl, r1
240151e0:	9a06      	ldr	r2, [sp, #24]
240151e2:	9b04      	ldr	r3, [sp, #16]
240151e4:	b1db      	cbz	r3, 2401521e <arm_fir_decimate_f32+0x1de>
240151e6:	ecb2 5a01 	vldmia	r2!, {s10}
240151ea:	3b01      	subs	r3, #1
240151ec:	ecf6 2a01 	vldmia	r6!, {s5}
240151f0:	ecf7 3a01 	vldmia	r7!, {s7}
240151f4:	ecbc 4a01 	vldmia	ip!, {s8}
240151f8:	ee65 2a22 	vmul.f32	s5, s10, s5
240151fc:	ecf0 6a01 	vldmia	r0!, {s13}
24015200:	ee65 3a23 	vmul.f32	s7, s10, s7
24015204:	ee25 4a04 	vmul.f32	s8, s10, s8
24015208:	ee25 5a26 	vmul.f32	s10, s10, s13
2401520c:	ee37 7a22 	vadd.f32	s14, s14, s5
24015210:	ee77 7aa3 	vadd.f32	s15, s15, s7
24015214:	ee74 4a84 	vadd.f32	s9, s9, s8
24015218:	ee70 0a85 	vadd.f32	s1, s1, s10
2401521c:	d1e3      	bne.n	240151e6 <arm_fir_decimate_f32+0x1a6>
2401521e:	9b02      	ldr	r3, [sp, #8]
24015220:	eb0a 0608 	add.w	r6, sl, r8
24015224:	ed09 7a04 	vstr	s14, [r9, #-16]
24015228:	f109 0910 	add.w	r9, r9, #16
2401522c:	3b01      	subs	r3, #1
2401522e:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
24015232:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
24015236:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
2401523a:	9302      	str	r3, [sp, #8]
2401523c:	d002      	beq.n	24015244 <arm_fir_decimate_f32+0x204>
2401523e:	9b01      	ldr	r3, [sp, #4]
24015240:	781c      	ldrb	r4, [r3, #0]
24015242:	e729      	b.n	24015098 <arm_fir_decimate_f32+0x58>
24015244:	9b07      	ldr	r3, [sp, #28]
24015246:	9a09      	ldr	r2, [sp, #36]	; 0x24
24015248:	9900      	ldr	r1, [sp, #0]
2401524a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2401524e:	9307      	str	r3, [sp, #28]
24015250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24015252:	f013 0803 	ands.w	r8, r3, #3
24015256:	d067      	beq.n	24015328 <arm_fir_decimate_f32+0x2e8>
24015258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2401525a:	9808      	ldr	r0, [sp, #32]
2401525c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
24015260:	9d07      	ldr	r5, [sp, #28]
24015262:	4602      	mov	r2, r0
24015264:	f003 0703 	and.w	r7, r3, #3
24015268:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
2401526c:	f8cd e000 	str.w	lr, [sp]
24015270:	3210      	adds	r2, #16
24015272:	eb05 0888 	add.w	r8, r5, r8, lsl #2
24015276:	eb00 090c 	add.w	r9, r0, ip
2401527a:	f8dd e004 	ldr.w	lr, [sp, #4]
2401527e:	eb02 040c 	add.w	r4, r2, ip
24015282:	46aa      	mov	sl, r5
24015284:	9203      	str	r2, [sp, #12]
24015286:	f89e 5000 	ldrb.w	r5, [lr]
2401528a:	4658      	mov	r0, fp
2401528c:	460a      	mov	r2, r1
2401528e:	462b      	mov	r3, r5
24015290:	ecf2 7a01 	vldmia	r2!, {s15}
24015294:	3b01      	subs	r3, #1
24015296:	ece0 7a01 	vstmia	r0!, {s15}
2401529a:	d1f9      	bne.n	24015290 <arm_fir_decimate_f32+0x250>
2401529c:	00ad      	lsls	r5, r5, #2
2401529e:	9b00      	ldr	r3, [sp, #0]
240152a0:	4429      	add	r1, r5
240152a2:	44ab      	add	fp, r5
240152a4:	2b00      	cmp	r3, #0
240152a6:	d07c      	beq.n	240153a2 <arm_fir_decimate_f32+0x362>
240152a8:	9b03      	ldr	r3, [sp, #12]
240152aa:	f106 0210 	add.w	r2, r6, #16
240152ae:	eddf 7a3f 	vldr	s15, [pc, #252]	; 240153ac <arm_fir_decimate_f32+0x36c>
240152b2:	ed13 7a04 	vldr	s14, [r3, #-16]
240152b6:	3310      	adds	r3, #16
240152b8:	ed52 6a04 	vldr	s13, [r2, #-16]
240152bc:	3210      	adds	r2, #16
240152be:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
240152c2:	ee27 7a26 	vmul.f32	s14, s14, s13
240152c6:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
240152ca:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
240152ce:	ee26 6a25 	vmul.f32	s12, s12, s11
240152d2:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
240152d6:	ee77 7a27 	vadd.f32	s15, s14, s15
240152da:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
240152de:	ee26 7a85 	vmul.f32	s14, s13, s10
240152e2:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
240152e6:	429c      	cmp	r4, r3
240152e8:	ee76 7a27 	vadd.f32	s15, s12, s15
240152ec:	ee65 6aa6 	vmul.f32	s13, s11, s13
240152f0:	ee77 7a27 	vadd.f32	s15, s14, s15
240152f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
240152f8:	d1db      	bne.n	240152b2 <arm_fir_decimate_f32+0x272>
240152fa:	eb06 000c 	add.w	r0, r6, ip
240152fe:	464a      	mov	r2, r9
24015300:	b157      	cbz	r7, 24015318 <arm_fir_decimate_f32+0x2d8>
24015302:	463b      	mov	r3, r7
24015304:	ecb2 7a01 	vldmia	r2!, {s14}
24015308:	3b01      	subs	r3, #1
2401530a:	ecf0 6a01 	vldmia	r0!, {s13}
2401530e:	ee27 7a26 	vmul.f32	s14, s14, s13
24015312:	ee77 7a87 	vadd.f32	s15, s15, s14
24015316:	d1f5      	bne.n	24015304 <arm_fir_decimate_f32+0x2c4>
24015318:	f89e 3000 	ldrb.w	r3, [lr]
2401531c:	ecea 7a01 	vstmia	sl!, {s15}
24015320:	45c2      	cmp	sl, r8
24015322:	eb06 0683 	add.w	r6, r6, r3, lsl #2
24015326:	d1ae      	bne.n	24015286 <arm_fir_decimate_f32+0x246>
24015328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2401532a:	1e5c      	subs	r4, r3, #1
2401532c:	9b01      	ldr	r3, [sp, #4]
2401532e:	08a5      	lsrs	r5, r4, #2
24015330:	689f      	ldr	r7, [r3, #8]
24015332:	d01d      	beq.n	24015370 <arm_fir_decimate_f32+0x330>
24015334:	f106 0210 	add.w	r2, r6, #16
24015338:	f107 0310 	add.w	r3, r7, #16
2401533c:	4629      	mov	r1, r5
2401533e:	f852 0c10 	ldr.w	r0, [r2, #-16]
24015342:	3901      	subs	r1, #1
24015344:	f102 0210 	add.w	r2, r2, #16
24015348:	f103 0310 	add.w	r3, r3, #16
2401534c:	f843 0c20 	str.w	r0, [r3, #-32]
24015350:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24015354:	f843 0c1c 	str.w	r0, [r3, #-28]
24015358:	f852 0c18 	ldr.w	r0, [r2, #-24]
2401535c:	f843 0c18 	str.w	r0, [r3, #-24]
24015360:	f852 0c14 	ldr.w	r0, [r2, #-20]
24015364:	f843 0c14 	str.w	r0, [r3, #-20]
24015368:	d1e9      	bne.n	2401533e <arm_fir_decimate_f32+0x2fe>
2401536a:	012d      	lsls	r5, r5, #4
2401536c:	442e      	add	r6, r5
2401536e:	442f      	add	r7, r5
24015370:	f014 0403 	ands.w	r4, r4, #3
24015374:	d009      	beq.n	2401538a <arm_fir_decimate_f32+0x34a>
24015376:	6833      	ldr	r3, [r6, #0]
24015378:	3c01      	subs	r4, #1
2401537a:	603b      	str	r3, [r7, #0]
2401537c:	d005      	beq.n	2401538a <arm_fir_decimate_f32+0x34a>
2401537e:	6873      	ldr	r3, [r6, #4]
24015380:	2c01      	cmp	r4, #1
24015382:	607b      	str	r3, [r7, #4]
24015384:	d001      	beq.n	2401538a <arm_fir_decimate_f32+0x34a>
24015386:	68b3      	ldr	r3, [r6, #8]
24015388:	60bb      	str	r3, [r7, #8]
2401538a:	b00d      	add	sp, #52	; 0x34
2401538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24015390:	4650      	mov	r0, sl
24015392:	9a08      	ldr	r2, [sp, #32]
24015394:	eef0 4a60 	vmov.f32	s9, s1
24015398:	eef0 7a60 	vmov.f32	s15, s1
2401539c:	eeb0 7a60 	vmov.f32	s14, s1
240153a0:	e71f      	b.n	240151e2 <arm_fir_decimate_f32+0x1a2>
240153a2:	9a08      	ldr	r2, [sp, #32]
240153a4:	4630      	mov	r0, r6
240153a6:	eddf 7a01 	vldr	s15, [pc, #4]	; 240153ac <arm_fir_decimate_f32+0x36c>
240153aa:	e7a9      	b.n	24015300 <arm_fir_decimate_f32+0x2c0>
240153ac:	00000000 	.word	0x00000000

240153b0 <arm_sin_f32>:
240153b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24015430 <arm_sin_f32+0x80>
240153b4:	ee20 0a27 	vmul.f32	s0, s0, s15
240153b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
240153bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
240153c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240153c4:	d504      	bpl.n	240153d0 <arm_sin_f32+0x20>
240153c6:	ee17 3a90 	vmov	r3, s15
240153ca:	3b01      	subs	r3, #1
240153cc:	ee07 3a90 	vmov	s15, r3
240153d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240153d4:	eddf 6a17 	vldr	s13, [pc, #92]	; 24015434 <arm_sin_f32+0x84>
240153d8:	ee70 7a67 	vsub.f32	s15, s0, s15
240153dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
240153e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240153e4:	ee17 3a10 	vmov	r3, s14
240153e8:	b29b      	uxth	r3, r3
240153ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240153ee:	d21a      	bcs.n	24015426 <arm_sin_f32+0x76>
240153f0:	ee07 3a10 	vmov	s14, r3
240153f4:	1c59      	adds	r1, r3, #1
240153f6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
240153fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
240153fe:	4a0e      	ldr	r2, [pc, #56]	; (24015438 <arm_sin_f32+0x88>)
24015400:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24015408:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401540c:	ee30 0a67 	vsub.f32	s0, s0, s15
24015410:	edd3 6a00 	vldr	s13, [r3]
24015414:	ed92 7a00 	vldr	s14, [r2]
24015418:	ee20 0a26 	vmul.f32	s0, s0, s13
2401541c:	ee67 7a87 	vmul.f32	s15, s15, s14
24015420:	ee30 0a27 	vadd.f32	s0, s0, s15
24015424:	4770      	bx	lr
24015426:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401542a:	2101      	movs	r1, #1
2401542c:	2300      	movs	r3, #0
2401542e:	e7e6      	b.n	240153fe <arm_sin_f32+0x4e>
24015430:	3e22f983 	.word	0x3e22f983
24015434:	44000000 	.word	0x44000000
24015438:	2402bbb4 	.word	0x2402bbb4

2401543c <__errno>:
2401543c:	4b01      	ldr	r3, [pc, #4]	; (24015444 <__errno+0x8>)
2401543e:	6818      	ldr	r0, [r3, #0]
24015440:	4770      	bx	lr
24015442:	bf00      	nop
24015444:	200006f4 	.word	0x200006f4

24015448 <__libc_init_array>:
24015448:	b570      	push	{r4, r5, r6, lr}
2401544a:	4d0d      	ldr	r5, [pc, #52]	; (24015480 <__libc_init_array+0x38>)
2401544c:	4c0d      	ldr	r4, [pc, #52]	; (24015484 <__libc_init_array+0x3c>)
2401544e:	1b64      	subs	r4, r4, r5
24015450:	10a4      	asrs	r4, r4, #2
24015452:	2600      	movs	r6, #0
24015454:	42a6      	cmp	r6, r4
24015456:	d109      	bne.n	2401546c <__libc_init_array+0x24>
24015458:	4d0b      	ldr	r5, [pc, #44]	; (24015488 <__libc_init_array+0x40>)
2401545a:	4c0c      	ldr	r4, [pc, #48]	; (2401548c <__libc_init_array+0x44>)
2401545c:	f018 f944 	bl	2402d6e8 <_init>
24015460:	1b64      	subs	r4, r4, r5
24015462:	10a4      	asrs	r4, r4, #2
24015464:	2600      	movs	r6, #0
24015466:	42a6      	cmp	r6, r4
24015468:	d105      	bne.n	24015476 <__libc_init_array+0x2e>
2401546a:	bd70      	pop	{r4, r5, r6, pc}
2401546c:	f855 3b04 	ldr.w	r3, [r5], #4
24015470:	4798      	blx	r3
24015472:	3601      	adds	r6, #1
24015474:	e7ee      	b.n	24015454 <__libc_init_array+0xc>
24015476:	f855 3b04 	ldr.w	r3, [r5], #4
2401547a:	4798      	blx	r3
2401547c:	3601      	adds	r6, #1
2401547e:	e7f2      	b.n	24015466 <__libc_init_array+0x1e>
24015480:	2402d770 	.word	0x2402d770
24015484:	2402d770 	.word	0x2402d770
24015488:	2402d770 	.word	0x2402d770
2401548c:	2402d774 	.word	0x2402d774

24015490 <__itoa>:
24015490:	1e93      	subs	r3, r2, #2
24015492:	2b22      	cmp	r3, #34	; 0x22
24015494:	b510      	push	{r4, lr}
24015496:	460c      	mov	r4, r1
24015498:	d904      	bls.n	240154a4 <__itoa+0x14>
2401549a:	2300      	movs	r3, #0
2401549c:	700b      	strb	r3, [r1, #0]
2401549e:	461c      	mov	r4, r3
240154a0:	4620      	mov	r0, r4
240154a2:	bd10      	pop	{r4, pc}
240154a4:	2a0a      	cmp	r2, #10
240154a6:	d109      	bne.n	240154bc <__itoa+0x2c>
240154a8:	2800      	cmp	r0, #0
240154aa:	da07      	bge.n	240154bc <__itoa+0x2c>
240154ac:	232d      	movs	r3, #45	; 0x2d
240154ae:	700b      	strb	r3, [r1, #0]
240154b0:	4240      	negs	r0, r0
240154b2:	2101      	movs	r1, #1
240154b4:	4421      	add	r1, r4
240154b6:	f000 f841 	bl	2401553c <__utoa>
240154ba:	e7f1      	b.n	240154a0 <__itoa+0x10>
240154bc:	2100      	movs	r1, #0
240154be:	e7f9      	b.n	240154b4 <__itoa+0x24>

240154c0 <itoa>:
240154c0:	f7ff bfe6 	b.w	24015490 <__itoa>

240154c4 <memcpy>:
240154c4:	440a      	add	r2, r1
240154c6:	4291      	cmp	r1, r2
240154c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
240154cc:	d100      	bne.n	240154d0 <memcpy+0xc>
240154ce:	4770      	bx	lr
240154d0:	b510      	push	{r4, lr}
240154d2:	f811 4b01 	ldrb.w	r4, [r1], #1
240154d6:	f803 4f01 	strb.w	r4, [r3, #1]!
240154da:	4291      	cmp	r1, r2
240154dc:	d1f9      	bne.n	240154d2 <memcpy+0xe>
240154de:	bd10      	pop	{r4, pc}

240154e0 <memset>:
240154e0:	4402      	add	r2, r0
240154e2:	4603      	mov	r3, r0
240154e4:	4293      	cmp	r3, r2
240154e6:	d100      	bne.n	240154ea <memset+0xa>
240154e8:	4770      	bx	lr
240154ea:	f803 1b01 	strb.w	r1, [r3], #1
240154ee:	e7f9      	b.n	240154e4 <memset+0x4>

240154f0 <frexpf>:
240154f0:	ee10 3a10 	vmov	r3, s0
240154f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240154f8:	2100      	movs	r1, #0
240154fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240154fe:	6001      	str	r1, [r0, #0]
24015500:	da19      	bge.n	24015536 <frexpf+0x46>
24015502:	b1c2      	cbz	r2, 24015536 <frexpf+0x46>
24015504:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24015508:	d10a      	bne.n	24015520 <frexpf+0x30>
2401550a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24015538 <frexpf+0x48>
2401550e:	ee60 7a27 	vmul.f32	s15, s0, s15
24015512:	f06f 0118 	mvn.w	r1, #24
24015516:	ee17 3a90 	vmov	r3, s15
2401551a:	6001      	str	r1, [r0, #0]
2401551c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24015520:	6801      	ldr	r1, [r0, #0]
24015522:	15d2      	asrs	r2, r2, #23
24015524:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24015528:	3a7e      	subs	r2, #126	; 0x7e
2401552a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
2401552e:	440a      	add	r2, r1
24015530:	ee00 3a10 	vmov	s0, r3
24015534:	6002      	str	r2, [r0, #0]
24015536:	4770      	bx	lr
24015538:	4c000000 	.word	0x4c000000

2401553c <__utoa>:
2401553c:	b5f0      	push	{r4, r5, r6, r7, lr}
2401553e:	4c1f      	ldr	r4, [pc, #124]	; (240155bc <__utoa+0x80>)
24015540:	b08b      	sub	sp, #44	; 0x2c
24015542:	4605      	mov	r5, r0
24015544:	460b      	mov	r3, r1
24015546:	466e      	mov	r6, sp
24015548:	f104 0c20 	add.w	ip, r4, #32
2401554c:	6820      	ldr	r0, [r4, #0]
2401554e:	6861      	ldr	r1, [r4, #4]
24015550:	4637      	mov	r7, r6
24015552:	c703      	stmia	r7!, {r0, r1}
24015554:	3408      	adds	r4, #8
24015556:	4564      	cmp	r4, ip
24015558:	463e      	mov	r6, r7
2401555a:	d1f7      	bne.n	2401554c <__utoa+0x10>
2401555c:	7921      	ldrb	r1, [r4, #4]
2401555e:	7139      	strb	r1, [r7, #4]
24015560:	1e91      	subs	r1, r2, #2
24015562:	6820      	ldr	r0, [r4, #0]
24015564:	6038      	str	r0, [r7, #0]
24015566:	2922      	cmp	r1, #34	; 0x22
24015568:	f04f 0100 	mov.w	r1, #0
2401556c:	d904      	bls.n	24015578 <__utoa+0x3c>
2401556e:	7019      	strb	r1, [r3, #0]
24015570:	460b      	mov	r3, r1
24015572:	4618      	mov	r0, r3
24015574:	b00b      	add	sp, #44	; 0x2c
24015576:	bdf0      	pop	{r4, r5, r6, r7, pc}
24015578:	1e58      	subs	r0, r3, #1
2401557a:	4684      	mov	ip, r0
2401557c:	fbb5 f7f2 	udiv	r7, r5, r2
24015580:	fb02 5617 	mls	r6, r2, r7, r5
24015584:	3628      	adds	r6, #40	; 0x28
24015586:	446e      	add	r6, sp
24015588:	460c      	mov	r4, r1
2401558a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
2401558e:	f80c 6f01 	strb.w	r6, [ip, #1]!
24015592:	462e      	mov	r6, r5
24015594:	42b2      	cmp	r2, r6
24015596:	f101 0101 	add.w	r1, r1, #1
2401559a:	463d      	mov	r5, r7
2401559c:	d9ee      	bls.n	2401557c <__utoa+0x40>
2401559e:	2200      	movs	r2, #0
240155a0:	545a      	strb	r2, [r3, r1]
240155a2:	1919      	adds	r1, r3, r4
240155a4:	1aa5      	subs	r5, r4, r2
240155a6:	42aa      	cmp	r2, r5
240155a8:	dae3      	bge.n	24015572 <__utoa+0x36>
240155aa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
240155ae:	780e      	ldrb	r6, [r1, #0]
240155b0:	7006      	strb	r6, [r0, #0]
240155b2:	3201      	adds	r2, #1
240155b4:	f801 5901 	strb.w	r5, [r1], #-1
240155b8:	e7f4      	b.n	240155a4 <__utoa+0x68>
240155ba:	bf00      	nop
240155bc:	2402c3b8 	.word	0x2402c3b8

240155c0 <sinf_poly>:
240155c0:	07cb      	lsls	r3, r1, #31
240155c2:	d412      	bmi.n	240155ea <sinf_poly+0x2a>
240155c4:	ee21 5b00 	vmul.f64	d5, d1, d0
240155c8:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
240155cc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
240155d0:	eea6 7b01 	vfma.f64	d7, d6, d1
240155d4:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
240155d8:	ee21 1b05 	vmul.f64	d1, d1, d5
240155dc:	eea6 0b05 	vfma.f64	d0, d6, d5
240155e0:	eea7 0b01 	vfma.f64	d0, d7, d1
240155e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240155e8:	4770      	bx	lr
240155ea:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
240155ee:	ee21 5b01 	vmul.f64	d5, d1, d1
240155f2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
240155f6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
240155fa:	eea1 7b06 	vfma.f64	d7, d1, d6
240155fe:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
24015602:	eea1 0b06 	vfma.f64	d0, d1, d6
24015606:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
2401560a:	ee21 1b05 	vmul.f64	d1, d1, d5
2401560e:	eea5 0b06 	vfma.f64	d0, d5, d6
24015612:	e7e5      	b.n	240155e0 <sinf_poly+0x20>
24015614:	0000      	movs	r0, r0
	...

24015618 <cosf>:
24015618:	b538      	push	{r3, r4, r5, lr}
2401561a:	ee10 4a10 	vmov	r4, s0
2401561e:	f3c4 530a 	ubfx	r3, r4, #20, #11
24015622:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
24015626:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
2401562a:	d21f      	bcs.n	2401566c <cosf+0x54>
2401562c:	ee27 0b07 	vmul.f64	d0, d7, d7
24015630:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
24015634:	f0c0 8088 	bcc.w	24015748 <cosf+0x130>
24015638:	ee20 4b00 	vmul.f64	d4, d0, d0
2401563c:	4b46      	ldr	r3, [pc, #280]	; (24015758 <cosf+0x140>)
2401563e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
24015642:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
24015646:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
2401564a:	eea0 6b05 	vfma.f64	d6, d0, d5
2401564e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
24015652:	eea0 7b05 	vfma.f64	d7, d0, d5
24015656:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
2401565a:	ee20 0b04 	vmul.f64	d0, d0, d4
2401565e:	eea4 7b05 	vfma.f64	d7, d4, d5
24015662:	eea6 7b00 	vfma.f64	d7, d6, d0
24015666:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
2401566a:	bd38      	pop	{r3, r4, r5, pc}
2401566c:	f240 422e 	movw	r2, #1070	; 0x42e
24015670:	4293      	cmp	r3, r2
24015672:	d82b      	bhi.n	240156cc <cosf+0xb4>
24015674:	4b38      	ldr	r3, [pc, #224]	; (24015758 <cosf+0x140>)
24015676:	ed93 6b08 	vldr	d6, [r3, #32]
2401567a:	ee27 6b06 	vmul.f64	d6, d7, d6
2401567e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
24015682:	f103 0070 	add.w	r0, r3, #112	; 0x70
24015686:	ee16 1a90 	vmov	r1, s13
2401568a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
2401568e:	1609      	asrs	r1, r1, #24
24015690:	ee06 1a90 	vmov	s13, r1
24015694:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24015698:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
2401569c:	f001 0203 	and.w	r2, r1, #3
240156a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
240156a4:	eea5 7b46 	vfms.f64	d7, d5, d6
240156a8:	eeb0 0b47 	vmov.f64	d0, d7
240156ac:	ed92 7b00 	vldr	d7, [r2]
240156b0:	ee20 1b00 	vmul.f64	d1, d0, d0
240156b4:	f011 0f02 	tst.w	r1, #2
240156b8:	bf08      	it	eq
240156ba:	4618      	moveq	r0, r3
240156bc:	f081 0101 	eor.w	r1, r1, #1
240156c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240156c4:	ee20 0b07 	vmul.f64	d0, d0, d7
240156c8:	f7ff bf7a 	b.w	240155c0 <sinf_poly>
240156cc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
240156d0:	d236      	bcs.n	24015740 <cosf+0x128>
240156d2:	4a22      	ldr	r2, [pc, #136]	; (2401575c <cosf+0x144>)
240156d4:	f3c4 6183 	ubfx	r1, r4, #26, #4
240156d8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
240156dc:	f3c4 0316 	ubfx	r3, r4, #0, #23
240156e0:	f3c4 50c2 	ubfx	r0, r4, #23, #3
240156e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240156e8:	4083      	lsls	r3, r0
240156ea:	6a28      	ldr	r0, [r5, #32]
240156ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
240156f0:	fba3 1000 	umull	r1, r0, r3, r0
240156f4:	6929      	ldr	r1, [r5, #16]
240156f6:	435a      	muls	r2, r3
240156f8:	fbe3 0201 	umlal	r0, r2, r3, r1
240156fc:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
24015700:	0f8d      	lsrs	r5, r1, #30
24015702:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
24015706:	1a51      	subs	r1, r2, r1
24015708:	f7ea ff7c 	bl	24000604 <__aeabi_l2d>
2401570c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
24015710:	4b11      	ldr	r3, [pc, #68]	; (24015758 <cosf+0x140>)
24015712:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 24015750 <cosf+0x138>
24015716:	ec41 0b16 	vmov	d6, r0, r1
2401571a:	f004 0203 	and.w	r2, r4, #3
2401571e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24015722:	f014 0f02 	tst.w	r4, #2
24015726:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401572a:	ee26 7b07 	vmul.f64	d7, d6, d7
2401572e:	ed92 0b00 	vldr	d0, [r2]
24015732:	ee27 1b07 	vmul.f64	d1, d7, d7
24015736:	f085 0101 	eor.w	r1, r5, #1
2401573a:	bf08      	it	eq
2401573c:	4618      	moveq	r0, r3
2401573e:	e7bf      	b.n	240156c0 <cosf+0xa8>
24015740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24015744:	f000 b964 	b.w	24015a10 <__math_invalidf>
24015748:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401574c:	e78d      	b.n	2401566a <cosf+0x52>
2401574e:	bf00      	nop
24015750:	54442d18 	.word	0x54442d18
24015754:	3c1921fb 	.word	0x3c1921fb
24015758:	2402d048 	.word	0x2402d048
2401575c:	2402cfe8 	.word	0x2402cfe8

24015760 <exp>:
24015760:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24015762:	ee10 3a90 	vmov	r3, s1
24015766:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
2401576a:	f3c3 540a 	ubfx	r4, r3, #20, #11
2401576e:	18a2      	adds	r2, r4, r2
24015770:	2a3e      	cmp	r2, #62	; 0x3e
24015772:	ee10 1a10 	vmov	r1, s0
24015776:	d922      	bls.n	240157be <exp+0x5e>
24015778:	2a00      	cmp	r2, #0
2401577a:	da06      	bge.n	2401578a <exp+0x2a>
2401577c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24015780:	ee30 0b07 	vadd.f64	d0, d0, d7
24015784:	b004      	add	sp, #16
24015786:	bcf0      	pop	{r4, r5, r6, r7}
24015788:	4770      	bx	lr
2401578a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
2401578e:	f04f 0000 	mov.w	r0, #0
24015792:	d913      	bls.n	240157bc <exp+0x5c>
24015794:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24015798:	bf08      	it	eq
2401579a:	4281      	cmpeq	r1, r0
2401579c:	f000 80a0 	beq.w	240158e0 <exp+0x180>
240157a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
240157a4:	4294      	cmp	r4, r2
240157a6:	d0e9      	beq.n	2401577c <exp+0x1c>
240157a8:	4283      	cmp	r3, r0
240157aa:	da03      	bge.n	240157b4 <exp+0x54>
240157ac:	b004      	add	sp, #16
240157ae:	bcf0      	pop	{r4, r5, r6, r7}
240157b0:	f000 b8c6 	b.w	24015940 <__math_uflow>
240157b4:	b004      	add	sp, #16
240157b6:	bcf0      	pop	{r4, r5, r6, r7}
240157b8:	f000 b8ca 	b.w	24015950 <__math_oflow>
240157bc:	4604      	mov	r4, r0
240157be:	4950      	ldr	r1, [pc, #320]	; (24015900 <exp+0x1a0>)
240157c0:	ed91 6b02 	vldr	d6, [r1, #8]
240157c4:	ed91 5b00 	vldr	d5, [r1]
240157c8:	eeb0 7b46 	vmov.f64	d7, d6
240157cc:	eea5 7b00 	vfma.f64	d7, d5, d0
240157d0:	ee17 5a10 	vmov	r5, s14
240157d4:	ee37 7b46 	vsub.f64	d7, d7, d6
240157d8:	ed91 6b04 	vldr	d6, [r1, #16]
240157dc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
240157e0:	eea6 0b07 	vfma.f64	d0, d6, d7
240157e4:	ed91 6b06 	vldr	d6, [r1, #24]
240157e8:	18d8      	adds	r0, r3, r3
240157ea:	f100 030f 	add.w	r3, r0, #15
240157ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
240157f2:	eea6 0b07 	vfma.f64	d0, d6, d7
240157f6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
240157fa:	ee20 7b00 	vmul.f64	d7, d0, d0
240157fe:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24015802:	ed91 5b08 	vldr	d5, [r1, #32]
24015806:	ee30 6b06 	vadd.f64	d6, d0, d6
2401580a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
2401580e:	eea4 5b00 	vfma.f64	d5, d4, d0
24015812:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
24015816:	eea5 6b07 	vfma.f64	d6, d5, d7
2401581a:	ee27 7b07 	vmul.f64	d7, d7, d7
2401581e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
24015822:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24015826:	f8d2 c004 	ldr.w	ip, [r2, #4]
2401582a:	eea4 5b00 	vfma.f64	d5, d4, d0
2401582e:	2600      	movs	r6, #0
24015830:	19f2      	adds	r2, r6, r7
24015832:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24015836:	eea7 6b05 	vfma.f64	d6, d7, d5
2401583a:	2c00      	cmp	r4, #0
2401583c:	d14b      	bne.n	240158d6 <exp+0x176>
2401583e:	42b5      	cmp	r5, r6
24015840:	db10      	blt.n	24015864 <exp+0x104>
24015842:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24015846:	ed9f 7b28 	vldr	d7, [pc, #160]	; 240158e8 <exp+0x188>
2401584a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
2401584e:	4610      	mov	r0, r2
24015850:	ec41 0b10 	vmov	d0, r0, r1
24015854:	eea6 0b00 	vfma.f64	d0, d6, d0
24015858:	ee20 0b07 	vmul.f64	d0, d0, d7
2401585c:	b004      	add	sp, #16
2401585e:	bcf0      	pop	{r4, r5, r6, r7}
24015860:	f000 b88a 	b.w	24015978 <__math_check_oflow>
24015864:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24015868:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
2401586c:	4610      	mov	r0, r2
2401586e:	ec41 0b17 	vmov	d7, r0, r1
24015872:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24015876:	ee26 6b07 	vmul.f64	d6, d6, d7
2401587a:	ee37 5b06 	vadd.f64	d5, d7, d6
2401587e:	eeb4 5bc4 	vcmpe.f64	d5, d4
24015882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015886:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 240158f0 <exp+0x190>
2401588a:	d51e      	bpl.n	240158ca <exp+0x16a>
2401588c:	ee35 3b04 	vadd.f64	d3, d5, d4
24015890:	ee37 7b45 	vsub.f64	d7, d7, d5
24015894:	ee37 7b06 	vadd.f64	d7, d7, d6
24015898:	ee34 6b43 	vsub.f64	d6, d4, d3
2401589c:	ee36 5b05 	vadd.f64	d5, d6, d5
240158a0:	ee35 5b07 	vadd.f64	d5, d5, d7
240158a4:	ee35 5b03 	vadd.f64	d5, d5, d3
240158a8:	ee35 5b44 	vsub.f64	d5, d5, d4
240158ac:	eeb5 5b40 	vcmp.f64	d5, #0.0
240158b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240158b4:	d101      	bne.n	240158ba <exp+0x15a>
240158b6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 240158f8 <exp+0x198>
240158ba:	ed8d 0b00 	vstr	d0, [sp]
240158be:	ed9d 7b00 	vldr	d7, [sp]
240158c2:	ee27 7b00 	vmul.f64	d7, d7, d0
240158c6:	ed8d 7b02 	vstr	d7, [sp, #8]
240158ca:	ee25 0b00 	vmul.f64	d0, d5, d0
240158ce:	b004      	add	sp, #16
240158d0:	bcf0      	pop	{r4, r5, r6, r7}
240158d2:	f000 b845 	b.w	24015960 <__math_check_uflow>
240158d6:	ec43 2b10 	vmov	d0, r2, r3
240158da:	eea6 0b00 	vfma.f64	d0, d6, d0
240158de:	e751      	b.n	24015784 <exp+0x24>
240158e0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 240158f8 <exp+0x198>
240158e4:	e74e      	b.n	24015784 <exp+0x24>
240158e6:	bf00      	nop
240158e8:	00000000 	.word	0x00000000
240158ec:	7f000000 	.word	0x7f000000
240158f0:	00000000 	.word	0x00000000
240158f4:	00100000 	.word	0x00100000
	...
24015900:	2402c3e0 	.word	0x2402c3e0

24015904 <with_errno>:
24015904:	b513      	push	{r0, r1, r4, lr}
24015906:	4604      	mov	r4, r0
24015908:	ed8d 0b00 	vstr	d0, [sp]
2401590c:	f7ff fd96 	bl	2401543c <__errno>
24015910:	ed9d 0b00 	vldr	d0, [sp]
24015914:	6004      	str	r4, [r0, #0]
24015916:	b002      	add	sp, #8
24015918:	bd10      	pop	{r4, pc}

2401591a <xflow>:
2401591a:	b082      	sub	sp, #8
2401591c:	b158      	cbz	r0, 24015936 <xflow+0x1c>
2401591e:	eeb1 7b40 	vneg.f64	d7, d0
24015922:	ed8d 7b00 	vstr	d7, [sp]
24015926:	ed9d 7b00 	vldr	d7, [sp]
2401592a:	2022      	movs	r0, #34	; 0x22
2401592c:	ee20 0b07 	vmul.f64	d0, d0, d7
24015930:	b002      	add	sp, #8
24015932:	f7ff bfe7 	b.w	24015904 <with_errno>
24015936:	eeb0 7b40 	vmov.f64	d7, d0
2401593a:	e7f2      	b.n	24015922 <xflow+0x8>
2401593c:	0000      	movs	r0, r0
	...

24015940 <__math_uflow>:
24015940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24015948 <__math_uflow+0x8>
24015944:	f7ff bfe9 	b.w	2401591a <xflow>
24015948:	00000000 	.word	0x00000000
2401594c:	10000000 	.word	0x10000000

24015950 <__math_oflow>:
24015950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24015958 <__math_oflow+0x8>
24015954:	f7ff bfe1 	b.w	2401591a <xflow>
24015958:	00000000 	.word	0x00000000
2401595c:	70000000 	.word	0x70000000

24015960 <__math_check_uflow>:
24015960:	eeb5 0b40 	vcmp.f64	d0, #0.0
24015964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015968:	d102      	bne.n	24015970 <__math_check_uflow+0x10>
2401596a:	2022      	movs	r0, #34	; 0x22
2401596c:	f7ff bfca 	b.w	24015904 <with_errno>
24015970:	4770      	bx	lr
24015972:	0000      	movs	r0, r0
24015974:	0000      	movs	r0, r0
	...

24015978 <__math_check_oflow>:
24015978:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24015998 <__math_check_oflow+0x20>
2401597c:	eeb0 7bc0 	vabs.f64	d7, d0
24015980:	eeb4 7b46 	vcmp.f64	d7, d6
24015984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015988:	dd02      	ble.n	24015990 <__math_check_oflow+0x18>
2401598a:	2022      	movs	r0, #34	; 0x22
2401598c:	f7ff bfba 	b.w	24015904 <with_errno>
24015990:	4770      	bx	lr
24015992:	bf00      	nop
24015994:	f3af 8000 	nop.w
24015998:	ffffffff 	.word	0xffffffff
2401599c:	7fefffff 	.word	0x7fefffff

240159a0 <with_errnof>:
240159a0:	b513      	push	{r0, r1, r4, lr}
240159a2:	4604      	mov	r4, r0
240159a4:	ed8d 0a01 	vstr	s0, [sp, #4]
240159a8:	f7ff fd48 	bl	2401543c <__errno>
240159ac:	ed9d 0a01 	vldr	s0, [sp, #4]
240159b0:	6004      	str	r4, [r0, #0]
240159b2:	b002      	add	sp, #8
240159b4:	bd10      	pop	{r4, pc}

240159b6 <xflowf>:
240159b6:	b130      	cbz	r0, 240159c6 <xflowf+0x10>
240159b8:	eef1 7a40 	vneg.f32	s15, s0
240159bc:	ee27 0a80 	vmul.f32	s0, s15, s0
240159c0:	2022      	movs	r0, #34	; 0x22
240159c2:	f7ff bfed 	b.w	240159a0 <with_errnof>
240159c6:	eef0 7a40 	vmov.f32	s15, s0
240159ca:	e7f7      	b.n	240159bc <xflowf+0x6>

240159cc <__math_uflowf>:
240159cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240159d4 <__math_uflowf+0x8>
240159d0:	f7ff bff1 	b.w	240159b6 <xflowf>
240159d4:	10000000 	.word	0x10000000

240159d8 <__math_may_uflowf>:
240159d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240159e0 <__math_may_uflowf+0x8>
240159dc:	f7ff bfeb 	b.w	240159b6 <xflowf>
240159e0:	1a200000 	.word	0x1a200000

240159e4 <__math_oflowf>:
240159e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240159ec <__math_oflowf+0x8>
240159e8:	f7ff bfe5 	b.w	240159b6 <xflowf>
240159ec:	70000000 	.word	0x70000000

240159f0 <__math_divzerof>:
240159f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240159f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240159f8:	2800      	cmp	r0, #0
240159fa:	fe40 7a27 	vseleq.f32	s15, s0, s15
240159fe:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015a0c <__math_divzerof+0x1c>
24015a02:	2022      	movs	r0, #34	; 0x22
24015a04:	ee87 0a80 	vdiv.f32	s0, s15, s0
24015a08:	f7ff bfca 	b.w	240159a0 <with_errnof>
24015a0c:	00000000 	.word	0x00000000

24015a10 <__math_invalidf>:
24015a10:	eef0 7a40 	vmov.f32	s15, s0
24015a14:	ee30 7a40 	vsub.f32	s14, s0, s0
24015a18:	eef4 7a67 	vcmp.f32	s15, s15
24015a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015a20:	ee87 0a07 	vdiv.f32	s0, s14, s14
24015a24:	d602      	bvs.n	24015a2c <__math_invalidf+0x1c>
24015a26:	2021      	movs	r0, #33	; 0x21
24015a28:	f7ff bfba 	b.w	240159a0 <with_errnof>
24015a2c:	4770      	bx	lr
	...

24015a30 <tan>:
24015a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
24015a32:	eeb0 7b40 	vmov.f64	d7, d0
24015a36:	ee17 3a90 	vmov	r3, s15
24015a3a:	4a15      	ldr	r2, [pc, #84]	; (24015a90 <tan+0x60>)
24015a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015a40:	4293      	cmp	r3, r2
24015a42:	dc07      	bgt.n	24015a54 <tan+0x24>
24015a44:	ed9f 1b10 	vldr	d1, [pc, #64]	; 24015a88 <tan+0x58>
24015a48:	2001      	movs	r0, #1
24015a4a:	b005      	add	sp, #20
24015a4c:	f85d eb04 	ldr.w	lr, [sp], #4
24015a50:	f001 bab6 	b.w	24016fc0 <__kernel_tan>
24015a54:	4a0f      	ldr	r2, [pc, #60]	; (24015a94 <tan+0x64>)
24015a56:	4293      	cmp	r3, r2
24015a58:	dd04      	ble.n	24015a64 <tan+0x34>
24015a5a:	ee30 0b40 	vsub.f64	d0, d0, d0
24015a5e:	b005      	add	sp, #20
24015a60:	f85d fb04 	ldr.w	pc, [sp], #4
24015a64:	4668      	mov	r0, sp
24015a66:	f000 fcb7 	bl	240163d8 <__ieee754_rem_pio2>
24015a6a:	0040      	lsls	r0, r0, #1
24015a6c:	f000 0002 	and.w	r0, r0, #2
24015a70:	ed9d 1b02 	vldr	d1, [sp, #8]
24015a74:	ed9d 0b00 	vldr	d0, [sp]
24015a78:	f1c0 0001 	rsb	r0, r0, #1
24015a7c:	f001 faa0 	bl	24016fc0 <__kernel_tan>
24015a80:	e7ed      	b.n	24015a5e <tan+0x2e>
24015a82:	bf00      	nop
24015a84:	f3af 8000 	nop.w
	...
24015a90:	3fe921fb 	.word	0x3fe921fb
24015a94:	7fefffff 	.word	0x7fefffff

24015a98 <expf>:
24015a98:	ee10 2a10 	vmov	r2, s0
24015a9c:	f240 412a 	movw	r1, #1066	; 0x42a
24015aa0:	f3c2 530a 	ubfx	r3, r2, #20, #11
24015aa4:	428b      	cmp	r3, r1
24015aa6:	b430      	push	{r4, r5}
24015aa8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24015aac:	d92a      	bls.n	24015b04 <expf+0x6c>
24015aae:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24015ab2:	d058      	beq.n	24015b66 <expf+0xce>
24015ab4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24015ab8:	d303      	bcc.n	24015ac2 <expf+0x2a>
24015aba:	ee30 0a00 	vadd.f32	s0, s0, s0
24015abe:	bc30      	pop	{r4, r5}
24015ac0:	4770      	bx	lr
24015ac2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24015b6c <expf+0xd4>
24015ac6:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ace:	dd03      	ble.n	24015ad8 <expf+0x40>
24015ad0:	bc30      	pop	{r4, r5}
24015ad2:	2000      	movs	r0, #0
24015ad4:	f7ff bf86 	b.w	240159e4 <__math_oflowf>
24015ad8:	eddf 7a25 	vldr	s15, [pc, #148]	; 24015b70 <expf+0xd8>
24015adc:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ae4:	d503      	bpl.n	24015aee <expf+0x56>
24015ae6:	bc30      	pop	{r4, r5}
24015ae8:	2000      	movs	r0, #0
24015aea:	f7ff bf6f 	b.w	240159cc <__math_uflowf>
24015aee:	eddf 7a21 	vldr	s15, [pc, #132]	; 24015b74 <expf+0xdc>
24015af2:	eeb4 0ae7 	vcmpe.f32	s0, s15
24015af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015afa:	d503      	bpl.n	24015b04 <expf+0x6c>
24015afc:	bc30      	pop	{r4, r5}
24015afe:	2000      	movs	r0, #0
24015b00:	f7ff bf6a 	b.w	240159d8 <__math_may_uflowf>
24015b04:	4b1c      	ldr	r3, [pc, #112]	; (24015b78 <expf+0xe0>)
24015b06:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24015b0a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24015b0e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24015b12:	eeb0 7b44 	vmov.f64	d7, d4
24015b16:	eea5 7b06 	vfma.f64	d7, d5, d6
24015b1a:	ee17 0a10 	vmov	r0, s14
24015b1e:	ee37 7b44 	vsub.f64	d7, d7, d4
24015b22:	f000 021f 	and.w	r2, r0, #31
24015b26:	ee95 7b06 	vfnms.f64	d7, d5, d6
24015b2a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24015b2e:	ee27 4b07 	vmul.f64	d4, d7, d7
24015b32:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24015b36:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24015b3a:	eea5 6b07 	vfma.f64	d6, d5, d7
24015b3e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24015b42:	684d      	ldr	r5, [r1, #4]
24015b44:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24015b48:	2100      	movs	r1, #0
24015b4a:	190a      	adds	r2, r1, r4
24015b4c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24015b50:	eea5 0b07 	vfma.f64	d0, d5, d7
24015b54:	ec43 2b17 	vmov	d7, r2, r3
24015b58:	eea6 0b04 	vfma.f64	d0, d6, d4
24015b5c:	ee20 0b07 	vmul.f64	d0, d0, d7
24015b60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015b64:	e7ab      	b.n	24015abe <expf+0x26>
24015b66:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24015b7c <expf+0xe4>
24015b6a:	e7a8      	b.n	24015abe <expf+0x26>
24015b6c:	42b17217 	.word	0x42b17217
24015b70:	c2cff1b4 	.word	0xc2cff1b4
24015b74:	c2ce8ecf 	.word	0xc2ce8ecf
24015b78:	2402cc50 	.word	0x2402cc50
24015b7c:	00000000 	.word	0x00000000

24015b80 <fabsf>:
24015b80:	ee10 3a10 	vmov	r3, s0
24015b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015b88:	ee00 3a10 	vmov	s0, r3
24015b8c:	4770      	bx	lr
	...

24015b90 <logf>:
24015b90:	ee10 3a10 	vmov	r3, s0
24015b94:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24015b98:	b410      	push	{r4}
24015b9a:	d055      	beq.n	24015c48 <logf+0xb8>
24015b9c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24015ba0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24015ba4:	d31a      	bcc.n	24015bdc <logf+0x4c>
24015ba6:	005a      	lsls	r2, r3, #1
24015ba8:	d104      	bne.n	24015bb4 <logf+0x24>
24015baa:	f85d 4b04 	ldr.w	r4, [sp], #4
24015bae:	2001      	movs	r0, #1
24015bb0:	f7ff bf1e 	b.w	240159f0 <__math_divzerof>
24015bb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015bb8:	d043      	beq.n	24015c42 <logf+0xb2>
24015bba:	2b00      	cmp	r3, #0
24015bbc:	db02      	blt.n	24015bc4 <logf+0x34>
24015bbe:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24015bc2:	d303      	bcc.n	24015bcc <logf+0x3c>
24015bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
24015bc8:	f7ff bf22 	b.w	24015a10 <__math_invalidf>
24015bcc:	eddf 7a20 	vldr	s15, [pc, #128]	; 24015c50 <logf+0xc0>
24015bd0:	ee20 0a27 	vmul.f32	s0, s0, s15
24015bd4:	ee10 3a10 	vmov	r3, s0
24015bd8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24015bdc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24015be0:	491c      	ldr	r1, [pc, #112]	; (24015c54 <logf+0xc4>)
24015be2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24015be6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24015bea:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24015bee:	0dd4      	lsrs	r4, r2, #23
24015bf0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24015bf4:	05e4      	lsls	r4, r4, #23
24015bf6:	ed90 6b00 	vldr	d6, [r0]
24015bfa:	1b1b      	subs	r3, r3, r4
24015bfc:	ee07 3a90 	vmov	s15, r3
24015c00:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24015c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015c08:	15d2      	asrs	r2, r2, #23
24015c0a:	eea6 0b07 	vfma.f64	d0, d6, d7
24015c0e:	ed90 6b02 	vldr	d6, [r0, #8]
24015c12:	ee20 4b00 	vmul.f64	d4, d0, d0
24015c16:	ee07 2a90 	vmov	s15, r2
24015c1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24015c1e:	eea7 6b05 	vfma.f64	d6, d7, d5
24015c22:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24015c26:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24015c2a:	eea5 7b00 	vfma.f64	d7, d5, d0
24015c2e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24015c32:	ee30 0b06 	vadd.f64	d0, d0, d6
24015c36:	eea5 7b04 	vfma.f64	d7, d5, d4
24015c3a:	eea4 0b07 	vfma.f64	d0, d4, d7
24015c3e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015c42:	f85d 4b04 	ldr.w	r4, [sp], #4
24015c46:	4770      	bx	lr
24015c48:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015c58 <logf+0xc8>
24015c4c:	e7f9      	b.n	24015c42 <logf+0xb2>
24015c4e:	bf00      	nop
24015c50:	4b000000 	.word	0x4b000000
24015c54:	2402cd98 	.word	0x2402cd98
24015c58:	00000000 	.word	0x00000000

24015c5c <lrintf>:
24015c5c:	ee10 3a10 	vmov	r3, s0
24015c60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24015c64:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24015c68:	281e      	cmp	r0, #30
24015c6a:	b082      	sub	sp, #8
24015c6c:	dc2e      	bgt.n	24015ccc <lrintf+0x70>
24015c6e:	1c41      	adds	r1, r0, #1
24015c70:	da02      	bge.n	24015c78 <lrintf+0x1c>
24015c72:	2000      	movs	r0, #0
24015c74:	b002      	add	sp, #8
24015c76:	4770      	bx	lr
24015c78:	2816      	cmp	r0, #22
24015c7a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24015c7e:	dd09      	ble.n	24015c94 <lrintf+0x38>
24015c80:	f3c3 0016 	ubfx	r0, r3, #0, #23
24015c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24015c88:	3a96      	subs	r2, #150	; 0x96
24015c8a:	4090      	lsls	r0, r2
24015c8c:	2900      	cmp	r1, #0
24015c8e:	d0f1      	beq.n	24015c74 <lrintf+0x18>
24015c90:	4240      	negs	r0, r0
24015c92:	e7ef      	b.n	24015c74 <lrintf+0x18>
24015c94:	4b10      	ldr	r3, [pc, #64]	; (24015cd8 <lrintf+0x7c>)
24015c96:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24015c9a:	ed93 7a00 	vldr	s14, [r3]
24015c9e:	ee37 0a00 	vadd.f32	s0, s14, s0
24015ca2:	ed8d 0a01 	vstr	s0, [sp, #4]
24015ca6:	eddd 7a01 	vldr	s15, [sp, #4]
24015caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015cae:	ee17 3a90 	vmov	r3, s15
24015cb2:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24015cb6:	d0dc      	beq.n	24015c72 <lrintf+0x16>
24015cb8:	f3c3 0016 	ubfx	r0, r3, #0, #23
24015cbc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24015cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24015cc4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24015cc8:	40d8      	lsrs	r0, r3
24015cca:	e7df      	b.n	24015c8c <lrintf+0x30>
24015ccc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24015cd0:	ee17 0a90 	vmov	r0, s15
24015cd4:	e7ce      	b.n	24015c74 <lrintf+0x18>
24015cd6:	bf00      	nop
24015cd8:	2402ceb8 	.word	0x2402ceb8

24015cdc <checkint>:
24015cdc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24015ce0:	2b7e      	cmp	r3, #126	; 0x7e
24015ce2:	dd10      	ble.n	24015d06 <checkint+0x2a>
24015ce4:	2b96      	cmp	r3, #150	; 0x96
24015ce6:	dc0c      	bgt.n	24015d02 <checkint+0x26>
24015ce8:	2201      	movs	r2, #1
24015cea:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24015cee:	fa02 f303 	lsl.w	r3, r2, r3
24015cf2:	1e5a      	subs	r2, r3, #1
24015cf4:	4202      	tst	r2, r0
24015cf6:	d106      	bne.n	24015d06 <checkint+0x2a>
24015cf8:	4203      	tst	r3, r0
24015cfa:	bf0c      	ite	eq
24015cfc:	2002      	moveq	r0, #2
24015cfe:	2001      	movne	r0, #1
24015d00:	4770      	bx	lr
24015d02:	2002      	movs	r0, #2
24015d04:	4770      	bx	lr
24015d06:	2000      	movs	r0, #0
24015d08:	4770      	bx	lr
24015d0a:	0000      	movs	r0, r0
24015d0c:	0000      	movs	r0, r0
	...

24015d10 <powf>:
24015d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
24015d12:	ee10 1a10 	vmov	r1, s0
24015d16:	ee10 4a90 	vmov	r4, s1
24015d1a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24015d1e:	0062      	lsls	r2, r4, #1
24015d20:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015d24:	eef0 7a40 	vmov.f32	s15, s0
24015d28:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24015d2c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24015d30:	d252      	bcs.n	24015dd8 <powf+0xc8>
24015d32:	4298      	cmp	r0, r3
24015d34:	d252      	bcs.n	24015ddc <powf+0xcc>
24015d36:	2000      	movs	r0, #0
24015d38:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
24015d3c:	4ca0      	ldr	r4, [pc, #640]	; (24015fc0 <powf+0x2b0>)
24015d3e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
24015d42:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24015d46:	f3c2 45c3 	ubfx	r5, r2, #19, #4
24015d4a:	0dd2      	lsrs	r2, r2, #23
24015d4c:	05d2      	lsls	r2, r2, #23
24015d4e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
24015d52:	1a8b      	subs	r3, r1, r2
24015d54:	ed95 6b00 	vldr	d6, [r5]
24015d58:	ee07 3a90 	vmov	s15, r3
24015d5c:	15d2      	asrs	r2, r2, #23
24015d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015d62:	eea6 5b07 	vfma.f64	d5, d6, d7
24015d66:	ed95 6b02 	vldr	d6, [r5, #8]
24015d6a:	ee25 2b05 	vmul.f64	d2, d5, d5
24015d6e:	ee22 1b02 	vmul.f64	d1, d2, d2
24015d72:	ee07 2a90 	vmov	s15, r2
24015d76:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
24015d7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24015d7e:	ee37 7b06 	vadd.f64	d7, d7, d6
24015d82:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
24015d86:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
24015d8a:	eea5 3b06 	vfma.f64	d3, d5, d6
24015d8e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
24015d92:	eea5 6b04 	vfma.f64	d6, d5, d4
24015d96:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
24015d9a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
24015d9e:	eea5 7b04 	vfma.f64	d7, d5, d4
24015da2:	eea2 7b06 	vfma.f64	d7, d2, d6
24015da6:	eea3 7b01 	vfma.f64	d7, d3, d1
24015daa:	ee20 0b07 	vmul.f64	d0, d0, d7
24015dae:	ee10 3a90 	vmov	r3, s1
24015db2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24015db6:	f248 03bf 	movw	r3, #32959	; 0x80bf
24015dba:	429a      	cmp	r2, r3
24015dbc:	f0c0 80b1 	bcc.w	24015f22 <powf+0x212>
24015dc0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 24015fa0 <powf+0x290>
24015dc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015dcc:	dd79      	ble.n	24015ec2 <powf+0x1b2>
24015dce:	b003      	add	sp, #12
24015dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015dd4:	f7ff be06 	b.w	240159e4 <__math_oflowf>
24015dd8:	4298      	cmp	r0, r3
24015dda:	d32d      	bcc.n	24015e38 <powf+0x128>
24015ddc:	b952      	cbnz	r2, 24015df4 <powf+0xe4>
24015dde:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
24015de2:	005b      	lsls	r3, r3, #1
24015de4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
24015de8:	f240 80c9 	bls.w	24015f7e <powf+0x26e>
24015dec:	ee37 0aa0 	vadd.f32	s0, s15, s1
24015df0:	b003      	add	sp, #12
24015df2:	bd30      	pop	{r4, r5, pc}
24015df4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24015df8:	d105      	bne.n	24015e06 <powf+0xf6>
24015dfa:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
24015dfe:	0064      	lsls	r4, r4, #1
24015e00:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24015e04:	e7f0      	b.n	24015de8 <powf+0xd8>
24015e06:	004b      	lsls	r3, r1, #1
24015e08:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24015e0c:	d8ee      	bhi.n	24015dec <powf+0xdc>
24015e0e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24015e12:	d1eb      	bne.n	24015dec <powf+0xdc>
24015e14:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015e18:	f000 80b1 	beq.w	24015f7e <powf+0x26e>
24015e1c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015e20:	ea6f 0404 	mvn.w	r4, r4
24015e24:	bf34      	ite	cc
24015e26:	2300      	movcc	r3, #0
24015e28:	2301      	movcs	r3, #1
24015e2a:	0fe4      	lsrs	r4, r4, #31
24015e2c:	42a3      	cmp	r3, r4
24015e2e:	f040 80a9 	bne.w	24015f84 <powf+0x274>
24015e32:	ee20 0aa0 	vmul.f32	s0, s1, s1
24015e36:	e7db      	b.n	24015df0 <powf+0xe0>
24015e38:	004d      	lsls	r5, r1, #1
24015e3a:	1e6a      	subs	r2, r5, #1
24015e3c:	429a      	cmp	r2, r3
24015e3e:	d31c      	bcc.n	24015e7a <powf+0x16a>
24015e40:	2900      	cmp	r1, #0
24015e42:	ee20 0a00 	vmul.f32	s0, s0, s0
24015e46:	da0f      	bge.n	24015e68 <powf+0x158>
24015e48:	ee10 0a90 	vmov	r0, s1
24015e4c:	f7ff ff46 	bl	24015cdc <checkint>
24015e50:	2801      	cmp	r0, #1
24015e52:	d109      	bne.n	24015e68 <powf+0x158>
24015e54:	eeb1 0a40 	vneg.f32	s0, s0
24015e58:	b945      	cbnz	r5, 24015e6c <powf+0x15c>
24015e5a:	2c00      	cmp	r4, #0
24015e5c:	dac8      	bge.n	24015df0 <powf+0xe0>
24015e5e:	b003      	add	sp, #12
24015e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015e64:	f7ff bdc4 	b.w	240159f0 <__math_divzerof>
24015e68:	2000      	movs	r0, #0
24015e6a:	e7f5      	b.n	24015e58 <powf+0x148>
24015e6c:	2c00      	cmp	r4, #0
24015e6e:	dabf      	bge.n	24015df0 <powf+0xe0>
24015e70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015e74:	ee87 0a80 	vdiv.f32	s0, s15, s0
24015e78:	e7ba      	b.n	24015df0 <powf+0xe0>
24015e7a:	2900      	cmp	r1, #0
24015e7c:	da1f      	bge.n	24015ebe <powf+0x1ae>
24015e7e:	ee10 0a90 	vmov	r0, s1
24015e82:	f7ff ff2b 	bl	24015cdc <checkint>
24015e86:	b920      	cbnz	r0, 24015e92 <powf+0x182>
24015e88:	b003      	add	sp, #12
24015e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015e8e:	f7ff bdbf 	b.w	24015a10 <__math_invalidf>
24015e92:	2801      	cmp	r0, #1
24015e94:	bf14      	ite	ne
24015e96:	2000      	movne	r0, #0
24015e98:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
24015e9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24015ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24015ea4:	f4bf af48 	bcs.w	24015d38 <powf+0x28>
24015ea8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24015fc4 <powf+0x2b4>
24015eac:	ee27 0a80 	vmul.f32	s0, s15, s0
24015eb0:	ee10 3a10 	vmov	r3, s0
24015eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015eb8:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
24015ebc:	e73c      	b.n	24015d38 <powf+0x28>
24015ebe:	2000      	movs	r0, #0
24015ec0:	e7ee      	b.n	24015ea0 <powf+0x190>
24015ec2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 24015fa8 <powf+0x298>
24015ec6:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ece:	dd10      	ble.n	24015ef2 <powf+0x1e2>
24015ed0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
24015ed4:	2800      	cmp	r0, #0
24015ed6:	d158      	bne.n	24015f8a <powf+0x27a>
24015ed8:	9300      	str	r3, [sp, #0]
24015eda:	eddd 7a00 	vldr	s15, [sp]
24015ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
24015ee6:	eef4 7a47 	vcmp.f32	s15, s14
24015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015eee:	f47f af6e 	bne.w	24015dce <powf+0xbe>
24015ef2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24015fb0 <powf+0x2a0>
24015ef6:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015efe:	d804      	bhi.n	24015f0a <powf+0x1fa>
24015f00:	b003      	add	sp, #12
24015f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015f06:	f7ff bd61 	b.w	240159cc <__math_uflowf>
24015f0a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 24015fb8 <powf+0x2a8>
24015f0e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24015f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015f16:	d504      	bpl.n	24015f22 <powf+0x212>
24015f18:	b003      	add	sp, #12
24015f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015f1e:	f7ff bd5b 	b.w	240159d8 <__math_may_uflowf>
24015f22:	4b29      	ldr	r3, [pc, #164]	; (24015fc8 <powf+0x2b8>)
24015f24:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24015f28:	ee30 6b07 	vadd.f64	d6, d0, d7
24015f2c:	ee16 2a10 	vmov	r2, s12
24015f30:	ee36 7b47 	vsub.f64	d7, d6, d7
24015f34:	f002 011f 	and.w	r1, r2, #31
24015f38:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24015f3c:	ee30 7b47 	vsub.f64	d7, d0, d7
24015f40:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24015f44:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24015f48:	ee27 4b07 	vmul.f64	d4, d7, d7
24015f4c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24015f50:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24015f54:	eea7 6b05 	vfma.f64	d6, d7, d5
24015f58:	686d      	ldr	r5, [r5, #4]
24015f5a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24015f5e:	1882      	adds	r2, r0, r2
24015f60:	2300      	movs	r3, #0
24015f62:	1918      	adds	r0, r3, r4
24015f64:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24015f68:	eea7 0b05 	vfma.f64	d0, d7, d5
24015f6c:	ec41 0b17 	vmov	d7, r0, r1
24015f70:	eea6 0b04 	vfma.f64	d0, d6, d4
24015f74:	ee20 0b07 	vmul.f64	d0, d0, d7
24015f78:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015f7c:	e738      	b.n	24015df0 <powf+0xe0>
24015f7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015f82:	e735      	b.n	24015df0 <powf+0xe0>
24015f84:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24015fcc <powf+0x2bc>
24015f88:	e732      	b.n	24015df0 <powf+0xe0>
24015f8a:	9301      	str	r3, [sp, #4]
24015f8c:	eddd 7a01 	vldr	s15, [sp, #4]
24015f90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015f94:	ee77 7a67 	vsub.f32	s15, s14, s15
24015f98:	e7a5      	b.n	24015ee6 <powf+0x1d6>
24015f9a:	bf00      	nop
24015f9c:	f3af 8000 	nop.w
24015fa0:	ffd1d571 	.word	0xffd1d571
24015fa4:	405fffff 	.word	0x405fffff
24015fa8:	ffa3aae2 	.word	0xffa3aae2
24015fac:	405fffff 	.word	0x405fffff
24015fb0:	00000000 	.word	0x00000000
24015fb4:	c062c000 	.word	0xc062c000
24015fb8:	00000000 	.word	0x00000000
24015fbc:	c062a000 	.word	0xc062a000
24015fc0:	2402cec0 	.word	0x2402cec0
24015fc4:	4b000000 	.word	0x4b000000
24015fc8:	2402cc50 	.word	0x2402cc50
24015fcc:	00000000 	.word	0x00000000

24015fd0 <tanf>:
24015fd0:	ee10 3a10 	vmov	r3, s0
24015fd4:	b507      	push	{r0, r1, r2, lr}
24015fd6:	4a12      	ldr	r2, [pc, #72]	; (24016020 <tanf+0x50>)
24015fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015fdc:	4293      	cmp	r3, r2
24015fde:	dc07      	bgt.n	24015ff0 <tanf+0x20>
24015fe0:	eddf 0a10 	vldr	s1, [pc, #64]	; 24016024 <tanf+0x54>
24015fe4:	2001      	movs	r0, #1
24015fe6:	b003      	add	sp, #12
24015fe8:	f85d eb04 	ldr.w	lr, [sp], #4
24015fec:	f001 bb76 	b.w	240176dc <__kernel_tanf>
24015ff0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015ff4:	db04      	blt.n	24016000 <tanf+0x30>
24015ff6:	ee30 0a40 	vsub.f32	s0, s0, s0
24015ffa:	b003      	add	sp, #12
24015ffc:	f85d fb04 	ldr.w	pc, [sp], #4
24016000:	4668      	mov	r0, sp
24016002:	f000 fc07 	bl	24016814 <__ieee754_rem_pio2f>
24016006:	0040      	lsls	r0, r0, #1
24016008:	f000 0002 	and.w	r0, r0, #2
2401600c:	eddd 0a01 	vldr	s1, [sp, #4]
24016010:	ed9d 0a00 	vldr	s0, [sp]
24016014:	f1c0 0001 	rsb	r0, r0, #1
24016018:	f001 fb60 	bl	240176dc <__kernel_tanf>
2401601c:	e7ed      	b.n	24015ffa <tanf+0x2a>
2401601e:	bf00      	nop
24016020:	3f490fda 	.word	0x3f490fda
24016024:	00000000 	.word	0x00000000

24016028 <tanhf>:
24016028:	b510      	push	{r4, lr}
2401602a:	ee10 4a10 	vmov	r4, s0
2401602e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
24016032:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24016036:	ed2d 8b02 	vpush	{d8}
2401603a:	eeb0 7a40 	vmov.f32	s14, s0
2401603e:	db0c      	blt.n	2401605a <tanhf+0x32>
24016040:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24016044:	eec0 7a07 	vdiv.f32	s15, s0, s14
24016048:	2c00      	cmp	r4, #0
2401604a:	bfac      	ite	ge
2401604c:	ee37 0a80 	vaddge.f32	s0, s15, s0
24016050:	ee37 0ac0 	vsublt.f32	s0, s15, s0
24016054:	ecbd 8b02 	vpop	{d8}
24016058:	bd10      	pop	{r4, pc}
2401605a:	4a1b      	ldr	r2, [pc, #108]	; (240160c8 <tanhf+0xa0>)
2401605c:	4293      	cmp	r3, r2
2401605e:	dc30      	bgt.n	240160c2 <tanhf+0x9a>
24016060:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
24016064:	da06      	bge.n	24016074 <tanhf+0x4c>
24016066:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401606a:	ee70 7a27 	vadd.f32	s15, s0, s15
2401606e:	ee27 0a80 	vmul.f32	s0, s15, s0
24016072:	e7ef      	b.n	24016054 <tanhf+0x2c>
24016074:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24016078:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
2401607c:	db12      	blt.n	240160a4 <tanhf+0x7c>
2401607e:	f7ff fd7f 	bl	24015b80 <fabsf>
24016082:	ee30 0a00 	vadd.f32	s0, s0, s0
24016086:	f001 fd11 	bl	24017aac <expm1f>
2401608a:	ee30 0a08 	vadd.f32	s0, s0, s16
2401608e:	eec8 7a00 	vdiv.f32	s15, s16, s0
24016092:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24016096:	ee30 0a67 	vsub.f32	s0, s0, s15
2401609a:	2c00      	cmp	r4, #0
2401609c:	bfb8      	it	lt
2401609e:	eeb1 0a40 	vneglt.f32	s0, s0
240160a2:	e7d7      	b.n	24016054 <tanhf+0x2c>
240160a4:	f7ff fd6c 	bl	24015b80 <fabsf>
240160a8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
240160ac:	ee20 0a27 	vmul.f32	s0, s0, s15
240160b0:	f001 fcfc 	bl	24017aac <expm1f>
240160b4:	ee70 7a08 	vadd.f32	s15, s0, s16
240160b8:	eeb1 7a40 	vneg.f32	s14, s0
240160bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
240160c0:	e7eb      	b.n	2401609a <tanhf+0x72>
240160c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240160c6:	e7e8      	b.n	2401609a <tanhf+0x72>
240160c8:	41afffff 	.word	0x41afffff
240160cc:	00000000 	.word	0x00000000

240160d0 <fmod>:
240160d0:	b508      	push	{r3, lr}
240160d2:	ed2d 8b04 	vpush	{d8-d9}
240160d6:	eeb0 9b40 	vmov.f64	d9, d0
240160da:	eeb0 8b41 	vmov.f64	d8, d1
240160de:	f000 f869 	bl	240161b4 <__ieee754_fmod>
240160e2:	eeb4 9b48 	vcmp.f64	d9, d8
240160e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160ea:	d60c      	bvs.n	24016106 <fmod+0x36>
240160ec:	ed9f 9b08 	vldr	d9, [pc, #32]	; 24016110 <fmod+0x40>
240160f0:	eeb4 8b49 	vcmp.f64	d8, d9
240160f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160f8:	d105      	bne.n	24016106 <fmod+0x36>
240160fa:	f7ff f99f 	bl	2401543c <__errno>
240160fe:	ee89 0b09 	vdiv.f64	d0, d9, d9
24016102:	2321      	movs	r3, #33	; 0x21
24016104:	6003      	str	r3, [r0, #0]
24016106:	ecbd 8b04 	vpop	{d8-d9}
2401610a:	bd08      	pop	{r3, pc}
2401610c:	f3af 8000 	nop.w
	...

24016118 <fmodf>:
24016118:	b508      	push	{r3, lr}
2401611a:	ed2d 8b02 	vpush	{d8}
2401611e:	eef0 8a40 	vmov.f32	s17, s0
24016122:	eeb0 8a60 	vmov.f32	s16, s1
24016126:	f000 fa9b 	bl	24016660 <__ieee754_fmodf>
2401612a:	eef4 8a48 	vcmp.f32	s17, s16
2401612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016132:	d60c      	bvs.n	2401614e <fmodf+0x36>
24016134:	eddf 8a07 	vldr	s17, [pc, #28]	; 24016154 <fmodf+0x3c>
24016138:	eeb4 8a68 	vcmp.f32	s16, s17
2401613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016140:	d105      	bne.n	2401614e <fmodf+0x36>
24016142:	f7ff f97b 	bl	2401543c <__errno>
24016146:	ee88 0aa8 	vdiv.f32	s0, s17, s17
2401614a:	2321      	movs	r3, #33	; 0x21
2401614c:	6003      	str	r3, [r0, #0]
2401614e:	ecbd 8b02 	vpop	{d8}
24016152:	bd08      	pop	{r3, pc}
24016154:	00000000 	.word	0x00000000

24016158 <log10f>:
24016158:	b508      	push	{r3, lr}
2401615a:	ed2d 8b02 	vpush	{d8}
2401615e:	eeb0 8a40 	vmov.f32	s16, s0
24016162:	f000 faff 	bl	24016764 <__ieee754_log10f>
24016166:	eeb4 8a48 	vcmp.f32	s16, s16
2401616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401616e:	d60f      	bvs.n	24016190 <log10f+0x38>
24016170:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24016174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016178:	d80a      	bhi.n	24016190 <log10f+0x38>
2401617a:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401617e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016182:	d108      	bne.n	24016196 <log10f+0x3e>
24016184:	f7ff f95a 	bl	2401543c <__errno>
24016188:	2322      	movs	r3, #34	; 0x22
2401618a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 240161ac <log10f+0x54>
2401618e:	6003      	str	r3, [r0, #0]
24016190:	ecbd 8b02 	vpop	{d8}
24016194:	bd08      	pop	{r3, pc}
24016196:	f7ff f951 	bl	2401543c <__errno>
2401619a:	ecbd 8b02 	vpop	{d8}
2401619e:	2321      	movs	r3, #33	; 0x21
240161a0:	6003      	str	r3, [r0, #0]
240161a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
240161a6:	4802      	ldr	r0, [pc, #8]	; (240161b0 <log10f+0x58>)
240161a8:	f001 bddc 	b.w	24017d64 <nanf>
240161ac:	ff800000 	.word	0xff800000
240161b0:	2402c3dc 	.word	0x2402c3dc

240161b4 <__ieee754_fmod>:
240161b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
240161b8:	ed8d 1b00 	vstr	d1, [sp]
240161bc:	e9dd 6500 	ldrd	r6, r5, [sp]
240161c0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
240161c4:	ea57 0306 	orrs.w	r3, r7, r6
240161c8:	46b4      	mov	ip, r6
240161ca:	d00d      	beq.n	240161e8 <__ieee754_fmod+0x34>
240161cc:	ee10 9a90 	vmov	r9, s1
240161d0:	4a7b      	ldr	r2, [pc, #492]	; (240163c0 <__ieee754_fmod+0x20c>)
240161d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
240161d6:	4293      	cmp	r3, r2
240161d8:	dc06      	bgt.n	240161e8 <__ieee754_fmod+0x34>
240161da:	4272      	negs	r2, r6
240161dc:	4879      	ldr	r0, [pc, #484]	; (240163c4 <__ieee754_fmod+0x210>)
240161de:	4332      	orrs	r2, r6
240161e0:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
240161e4:	4282      	cmp	r2, r0
240161e6:	d908      	bls.n	240161fa <__ieee754_fmod+0x46>
240161e8:	ed9d 7b00 	vldr	d7, [sp]
240161ec:	ee20 7b07 	vmul.f64	d7, d0, d7
240161f0:	ee87 0b07 	vdiv.f64	d0, d7, d7
240161f4:	b003      	add	sp, #12
240161f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
240161fa:	42bb      	cmp	r3, r7
240161fc:	ee10 ea10 	vmov	lr, s0
24016200:	ee10 1a10 	vmov	r1, s0
24016204:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
24016208:	dc09      	bgt.n	2401621e <__ieee754_fmod+0x6a>
2401620a:	dbf3      	blt.n	240161f4 <__ieee754_fmod+0x40>
2401620c:	45b6      	cmp	lr, r6
2401620e:	d3f1      	bcc.n	240161f4 <__ieee754_fmod+0x40>
24016210:	d105      	bne.n	2401621e <__ieee754_fmod+0x6a>
24016212:	4b6d      	ldr	r3, [pc, #436]	; (240163c8 <__ieee754_fmod+0x214>)
24016214:	eb03 7414 	add.w	r4, r3, r4, lsr #28
24016218:	ed94 0b00 	vldr	d0, [r4]
2401621c:	e7ea      	b.n	240161f4 <__ieee754_fmod+0x40>
2401621e:	ea19 0f00 	tst.w	r9, r0
24016222:	d14d      	bne.n	240162c0 <__ieee754_fmod+0x10c>
24016224:	2b00      	cmp	r3, #0
24016226:	d144      	bne.n	240162b2 <__ieee754_fmod+0xfe>
24016228:	4868      	ldr	r0, [pc, #416]	; (240163cc <__ieee754_fmod+0x218>)
2401622a:	4672      	mov	r2, lr
2401622c:	2a00      	cmp	r2, #0
2401622e:	dc3d      	bgt.n	240162ac <__ieee754_fmod+0xf8>
24016230:	4a64      	ldr	r2, [pc, #400]	; (240163c4 <__ieee754_fmod+0x210>)
24016232:	402a      	ands	r2, r5
24016234:	2a00      	cmp	r2, #0
24016236:	d155      	bne.n	240162e4 <__ieee754_fmod+0x130>
24016238:	2f00      	cmp	r7, #0
2401623a:	d149      	bne.n	240162d0 <__ieee754_fmod+0x11c>
2401623c:	46b0      	mov	r8, r6
2401623e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
24016242:	f1b8 0f00 	cmp.w	r8, #0
24016246:	dc3f      	bgt.n	240162c8 <__ieee754_fmod+0x114>
24016248:	f8df 8184 	ldr.w	r8, [pc, #388]	; 240163d0 <__ieee754_fmod+0x21c>
2401624c:	4540      	cmp	r0, r8
2401624e:	db4d      	blt.n	240162ec <__ieee754_fmod+0x138>
24016250:	f3c9 0313 	ubfx	r3, r9, #0, #20
24016254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24016258:	f8df e174 	ldr.w	lr, [pc, #372]	; 240163d0 <__ieee754_fmod+0x21c>
2401625c:	4572      	cmp	r2, lr
2401625e:	db59      	blt.n	24016314 <__ieee754_fmod+0x160>
24016260:	f3c5 0513 	ubfx	r5, r5, #0, #20
24016264:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
24016268:	1a80      	subs	r0, r0, r2
2401626a:	1b5e      	subs	r6, r3, r5
2401626c:	eba1 070c 	sub.w	r7, r1, ip
24016270:	2800      	cmp	r0, #0
24016272:	d165      	bne.n	24016340 <__ieee754_fmod+0x18c>
24016274:	4561      	cmp	r1, ip
24016276:	bf38      	it	cc
24016278:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
2401627c:	2e00      	cmp	r6, #0
2401627e:	bfa4      	itt	ge
24016280:	4639      	movge	r1, r7
24016282:	4633      	movge	r3, r6
24016284:	ea53 0001 	orrs.w	r0, r3, r1
24016288:	d0c3      	beq.n	24016212 <__ieee754_fmod+0x5e>
2401628a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2401628e:	db6c      	blt.n	2401636a <__ieee754_fmod+0x1b6>
24016290:	484f      	ldr	r0, [pc, #316]	; (240163d0 <__ieee754_fmod+0x21c>)
24016292:	4282      	cmp	r2, r0
24016294:	db6f      	blt.n	24016376 <__ieee754_fmod+0x1c2>
24016296:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
2401629a:	4323      	orrs	r3, r4
2401629c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
240162a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
240162a4:	460c      	mov	r4, r1
240162a6:	ec45 4b10 	vmov	d0, r4, r5
240162aa:	e7a3      	b.n	240161f4 <__ieee754_fmod+0x40>
240162ac:	3801      	subs	r0, #1
240162ae:	0052      	lsls	r2, r2, #1
240162b0:	e7bc      	b.n	2401622c <__ieee754_fmod+0x78>
240162b2:	4847      	ldr	r0, [pc, #284]	; (240163d0 <__ieee754_fmod+0x21c>)
240162b4:	02da      	lsls	r2, r3, #11
240162b6:	2a00      	cmp	r2, #0
240162b8:	ddba      	ble.n	24016230 <__ieee754_fmod+0x7c>
240162ba:	3801      	subs	r0, #1
240162bc:	0052      	lsls	r2, r2, #1
240162be:	e7fa      	b.n	240162b6 <__ieee754_fmod+0x102>
240162c0:	1518      	asrs	r0, r3, #20
240162c2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
240162c6:	e7b3      	b.n	24016230 <__ieee754_fmod+0x7c>
240162c8:	3a01      	subs	r2, #1
240162ca:	ea4f 0848 	mov.w	r8, r8, lsl #1
240162ce:	e7b8      	b.n	24016242 <__ieee754_fmod+0x8e>
240162d0:	4a3f      	ldr	r2, [pc, #252]	; (240163d0 <__ieee754_fmod+0x21c>)
240162d2:	ea4f 28c7 	mov.w	r8, r7, lsl #11
240162d6:	f1b8 0f00 	cmp.w	r8, #0
240162da:	ddb5      	ble.n	24016248 <__ieee754_fmod+0x94>
240162dc:	3a01      	subs	r2, #1
240162de:	ea4f 0848 	mov.w	r8, r8, lsl #1
240162e2:	e7f8      	b.n	240162d6 <__ieee754_fmod+0x122>
240162e4:	153a      	asrs	r2, r7, #20
240162e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
240162ea:	e7ad      	b.n	24016248 <__ieee754_fmod+0x94>
240162ec:	eba8 0100 	sub.w	r1, r8, r0
240162f0:	291f      	cmp	r1, #31
240162f2:	dc09      	bgt.n	24016308 <__ieee754_fmod+0x154>
240162f4:	f200 481e 	addw	r8, r0, #1054	; 0x41e
240162f8:	408b      	lsls	r3, r1
240162fa:	fa2e f808 	lsr.w	r8, lr, r8
240162fe:	ea48 0303 	orr.w	r3, r8, r3
24016302:	fa0e f101 	lsl.w	r1, lr, r1
24016306:	e7a7      	b.n	24016258 <__ieee754_fmod+0xa4>
24016308:	4b32      	ldr	r3, [pc, #200]	; (240163d4 <__ieee754_fmod+0x220>)
2401630a:	1a1b      	subs	r3, r3, r0
2401630c:	fa0e f303 	lsl.w	r3, lr, r3
24016310:	2100      	movs	r1, #0
24016312:	e7a1      	b.n	24016258 <__ieee754_fmod+0xa4>
24016314:	ebae 0c02 	sub.w	ip, lr, r2
24016318:	f1bc 0f1f 	cmp.w	ip, #31
2401631c:	dc09      	bgt.n	24016332 <__ieee754_fmod+0x17e>
2401631e:	f202 451e 	addw	r5, r2, #1054	; 0x41e
24016322:	fa07 f70c 	lsl.w	r7, r7, ip
24016326:	fa26 f505 	lsr.w	r5, r6, r5
2401632a:	433d      	orrs	r5, r7
2401632c:	fa06 fc0c 	lsl.w	ip, r6, ip
24016330:	e79a      	b.n	24016268 <__ieee754_fmod+0xb4>
24016332:	4d28      	ldr	r5, [pc, #160]	; (240163d4 <__ieee754_fmod+0x220>)
24016334:	1aad      	subs	r5, r5, r2
24016336:	fa06 f505 	lsl.w	r5, r6, r5
2401633a:	f04f 0c00 	mov.w	ip, #0
2401633e:	e793      	b.n	24016268 <__ieee754_fmod+0xb4>
24016340:	4561      	cmp	r1, ip
24016342:	bf38      	it	cc
24016344:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
24016348:	2e00      	cmp	r6, #0
2401634a:	da05      	bge.n	24016358 <__ieee754_fmod+0x1a4>
2401634c:	0fce      	lsrs	r6, r1, #31
2401634e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
24016352:	0049      	lsls	r1, r1, #1
24016354:	3801      	subs	r0, #1
24016356:	e788      	b.n	2401626a <__ieee754_fmod+0xb6>
24016358:	ea56 0307 	orrs.w	r3, r6, r7
2401635c:	f43f af59 	beq.w	24016212 <__ieee754_fmod+0x5e>
24016360:	0ffb      	lsrs	r3, r7, #31
24016362:	eb03 0346 	add.w	r3, r3, r6, lsl #1
24016366:	0079      	lsls	r1, r7, #1
24016368:	e7f4      	b.n	24016354 <__ieee754_fmod+0x1a0>
2401636a:	0fc8      	lsrs	r0, r1, #31
2401636c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
24016370:	0049      	lsls	r1, r1, #1
24016372:	3a01      	subs	r2, #1
24016374:	e789      	b.n	2401628a <__ieee754_fmod+0xd6>
24016376:	1a80      	subs	r0, r0, r2
24016378:	2814      	cmp	r0, #20
2401637a:	dc0c      	bgt.n	24016396 <__ieee754_fmod+0x1e2>
2401637c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
24016380:	fa03 f202 	lsl.w	r2, r3, r2
24016384:	40c1      	lsrs	r1, r0
24016386:	430a      	orrs	r2, r1
24016388:	4103      	asrs	r3, r0
2401638a:	ea43 0104 	orr.w	r1, r3, r4
2401638e:	4610      	mov	r0, r2
24016390:	ec41 0b10 	vmov	d0, r0, r1
24016394:	e72e      	b.n	240161f4 <__ieee754_fmod+0x40>
24016396:	281f      	cmp	r0, #31
24016398:	dc07      	bgt.n	240163aa <__ieee754_fmod+0x1f6>
2401639a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
2401639e:	40c1      	lsrs	r1, r0
240163a0:	fa03 f202 	lsl.w	r2, r3, r2
240163a4:	430a      	orrs	r2, r1
240163a6:	4623      	mov	r3, r4
240163a8:	e7ef      	b.n	2401638a <__ieee754_fmod+0x1d6>
240163aa:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
240163ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
240163b2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
240163b6:	32e2      	adds	r2, #226	; 0xe2
240163b8:	fa43 f202 	asr.w	r2, r3, r2
240163bc:	e7f3      	b.n	240163a6 <__ieee754_fmod+0x1f2>
240163be:	bf00      	nop
240163c0:	7fefffff 	.word	0x7fefffff
240163c4:	7ff00000 	.word	0x7ff00000
240163c8:	2402d128 	.word	0x2402d128
240163cc:	fffffbed 	.word	0xfffffbed
240163d0:	fffffc02 	.word	0xfffffc02
240163d4:	fffffbe2 	.word	0xfffffbe2

240163d8 <__ieee754_rem_pio2>:
240163d8:	b570      	push	{r4, r5, r6, lr}
240163da:	eeb0 7b40 	vmov.f64	d7, d0
240163de:	ee17 5a90 	vmov	r5, s15
240163e2:	4b99      	ldr	r3, [pc, #612]	; (24016648 <__ieee754_rem_pio2+0x270>)
240163e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
240163e8:	429e      	cmp	r6, r3
240163ea:	b088      	sub	sp, #32
240163ec:	4604      	mov	r4, r0
240163ee:	dc07      	bgt.n	24016400 <__ieee754_rem_pio2+0x28>
240163f0:	2200      	movs	r2, #0
240163f2:	2300      	movs	r3, #0
240163f4:	ed84 0b00 	vstr	d0, [r4]
240163f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
240163fc:	2000      	movs	r0, #0
240163fe:	e01b      	b.n	24016438 <__ieee754_rem_pio2+0x60>
24016400:	4b92      	ldr	r3, [pc, #584]	; (2401664c <__ieee754_rem_pio2+0x274>)
24016402:	429e      	cmp	r6, r3
24016404:	dc3b      	bgt.n	2401647e <__ieee754_rem_pio2+0xa6>
24016406:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401640a:	2d00      	cmp	r5, #0
2401640c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 24016608 <__ieee754_rem_pio2+0x230>
24016410:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
24016414:	dd19      	ble.n	2401644a <__ieee754_rem_pio2+0x72>
24016416:	ee30 7b46 	vsub.f64	d7, d0, d6
2401641a:	429e      	cmp	r6, r3
2401641c:	d00e      	beq.n	2401643c <__ieee754_rem_pio2+0x64>
2401641e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 24016610 <__ieee754_rem_pio2+0x238>
24016422:	ee37 5b46 	vsub.f64	d5, d7, d6
24016426:	ee37 7b45 	vsub.f64	d7, d7, d5
2401642a:	ed84 5b00 	vstr	d5, [r4]
2401642e:	ee37 7b46 	vsub.f64	d7, d7, d6
24016432:	ed84 7b02 	vstr	d7, [r4, #8]
24016436:	2001      	movs	r0, #1
24016438:	b008      	add	sp, #32
2401643a:	bd70      	pop	{r4, r5, r6, pc}
2401643c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24016618 <__ieee754_rem_pio2+0x240>
24016440:	ee37 7b46 	vsub.f64	d7, d7, d6
24016444:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24016620 <__ieee754_rem_pio2+0x248>
24016448:	e7eb      	b.n	24016422 <__ieee754_rem_pio2+0x4a>
2401644a:	429e      	cmp	r6, r3
2401644c:	ee30 7b06 	vadd.f64	d7, d0, d6
24016450:	d00e      	beq.n	24016470 <__ieee754_rem_pio2+0x98>
24016452:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 24016610 <__ieee754_rem_pio2+0x238>
24016456:	ee37 5b06 	vadd.f64	d5, d7, d6
2401645a:	ee37 7b45 	vsub.f64	d7, d7, d5
2401645e:	ed84 5b00 	vstr	d5, [r4]
24016462:	ee37 7b06 	vadd.f64	d7, d7, d6
24016466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401646a:	ed84 7b02 	vstr	d7, [r4, #8]
2401646e:	e7e3      	b.n	24016438 <__ieee754_rem_pio2+0x60>
24016470:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24016618 <__ieee754_rem_pio2+0x240>
24016474:	ee37 7b06 	vadd.f64	d7, d7, d6
24016478:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24016620 <__ieee754_rem_pio2+0x248>
2401647c:	e7eb      	b.n	24016456 <__ieee754_rem_pio2+0x7e>
2401647e:	4b74      	ldr	r3, [pc, #464]	; (24016650 <__ieee754_rem_pio2+0x278>)
24016480:	429e      	cmp	r6, r3
24016482:	dc70      	bgt.n	24016566 <__ieee754_rem_pio2+0x18e>
24016484:	f001 fa0a 	bl	2401789c <fabs>
24016488:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401648c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24016628 <__ieee754_rem_pio2+0x250>
24016490:	eea0 7b06 	vfma.f64	d7, d0, d6
24016494:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24016498:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401649c:	ee17 0a90 	vmov	r0, s15
240164a0:	eeb1 4b45 	vneg.f64	d4, d5
240164a4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24016608 <__ieee754_rem_pio2+0x230>
240164a8:	eea5 0b47 	vfms.f64	d0, d5, d7
240164ac:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24016610 <__ieee754_rem_pio2+0x238>
240164b0:	281f      	cmp	r0, #31
240164b2:	ee25 7b07 	vmul.f64	d7, d5, d7
240164b6:	ee30 6b47 	vsub.f64	d6, d0, d7
240164ba:	dc08      	bgt.n	240164ce <__ieee754_rem_pio2+0xf6>
240164bc:	4b65      	ldr	r3, [pc, #404]	; (24016654 <__ieee754_rem_pio2+0x27c>)
240164be:	1e42      	subs	r2, r0, #1
240164c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
240164c4:	42b3      	cmp	r3, r6
240164c6:	d002      	beq.n	240164ce <__ieee754_rem_pio2+0xf6>
240164c8:	ed84 6b00 	vstr	d6, [r4]
240164cc:	e026      	b.n	2401651c <__ieee754_rem_pio2+0x144>
240164ce:	ee16 3a90 	vmov	r3, s13
240164d2:	f3c3 530a 	ubfx	r3, r3, #20, #11
240164d6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
240164da:	2b10      	cmp	r3, #16
240164dc:	ea4f 5226 	mov.w	r2, r6, asr #20
240164e0:	ddf2      	ble.n	240164c8 <__ieee754_rem_pio2+0xf0>
240164e2:	eeb0 6b40 	vmov.f64	d6, d0
240164e6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 24016618 <__ieee754_rem_pio2+0x240>
240164ea:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 24016620 <__ieee754_rem_pio2+0x248>
240164ee:	eea4 6b07 	vfma.f64	d6, d4, d7
240164f2:	ee30 0b46 	vsub.f64	d0, d0, d6
240164f6:	eea4 0b07 	vfma.f64	d0, d4, d7
240164fa:	eeb0 7b40 	vmov.f64	d7, d0
240164fe:	ee95 7b03 	vfnms.f64	d7, d5, d3
24016502:	ee36 3b47 	vsub.f64	d3, d6, d7
24016506:	ee13 3a90 	vmov	r3, s7
2401650a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401650e:	1ad3      	subs	r3, r2, r3
24016510:	2b31      	cmp	r3, #49	; 0x31
24016512:	dc17      	bgt.n	24016544 <__ieee754_rem_pio2+0x16c>
24016514:	eeb0 0b46 	vmov.f64	d0, d6
24016518:	ed84 3b00 	vstr	d3, [r4]
2401651c:	ed94 6b00 	vldr	d6, [r4]
24016520:	2d00      	cmp	r5, #0
24016522:	ee30 0b46 	vsub.f64	d0, d0, d6
24016526:	ee30 0b47 	vsub.f64	d0, d0, d7
2401652a:	ed84 0b02 	vstr	d0, [r4, #8]
2401652e:	da83      	bge.n	24016438 <__ieee754_rem_pio2+0x60>
24016530:	eeb1 6b46 	vneg.f64	d6, d6
24016534:	eeb1 0b40 	vneg.f64	d0, d0
24016538:	ed84 6b00 	vstr	d6, [r4]
2401653c:	ed84 0b02 	vstr	d0, [r4, #8]
24016540:	4240      	negs	r0, r0
24016542:	e779      	b.n	24016438 <__ieee754_rem_pio2+0x60>
24016544:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 24016630 <__ieee754_rem_pio2+0x258>
24016548:	eeb0 0b46 	vmov.f64	d0, d6
2401654c:	eea4 0b03 	vfma.f64	d0, d4, d3
24016550:	ee36 7b40 	vsub.f64	d7, d6, d0
24016554:	ed9f 6b38 	vldr	d6, [pc, #224]	; 24016638 <__ieee754_rem_pio2+0x260>
24016558:	eea4 7b03 	vfma.f64	d7, d4, d3
2401655c:	ee95 7b06 	vfnms.f64	d7, d5, d6
24016560:	ee30 6b47 	vsub.f64	d6, d0, d7
24016564:	e7b0      	b.n	240164c8 <__ieee754_rem_pio2+0xf0>
24016566:	4b3c      	ldr	r3, [pc, #240]	; (24016658 <__ieee754_rem_pio2+0x280>)
24016568:	429e      	cmp	r6, r3
2401656a:	dd06      	ble.n	2401657a <__ieee754_rem_pio2+0x1a2>
2401656c:	ee30 7b40 	vsub.f64	d7, d0, d0
24016570:	ed80 7b02 	vstr	d7, [r0, #8]
24016574:	ed80 7b00 	vstr	d7, [r0]
24016578:	e740      	b.n	240163fc <__ieee754_rem_pio2+0x24>
2401657a:	1532      	asrs	r2, r6, #20
2401657c:	ee10 0a10 	vmov	r0, s0
24016580:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
24016584:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
24016588:	ec41 0b17 	vmov	d7, r0, r1
2401658c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24016590:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24016640 <__ieee754_rem_pio2+0x268>
24016594:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24016598:	ee37 7b46 	vsub.f64	d7, d7, d6
2401659c:	ed8d 6b02 	vstr	d6, [sp, #8]
240165a0:	ee27 7b05 	vmul.f64	d7, d7, d5
240165a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
240165a8:	a902      	add	r1, sp, #8
240165aa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
240165ae:	ee37 7b46 	vsub.f64	d7, d7, d6
240165b2:	ed8d 6b04 	vstr	d6, [sp, #16]
240165b6:	ee27 7b05 	vmul.f64	d7, d7, d5
240165ba:	ed8d 7b06 	vstr	d7, [sp, #24]
240165be:	2603      	movs	r6, #3
240165c0:	4608      	mov	r0, r1
240165c2:	ed91 7b04 	vldr	d7, [r1, #16]
240165c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
240165ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240165ce:	4633      	mov	r3, r6
240165d0:	f1a1 0108 	sub.w	r1, r1, #8
240165d4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
240165d8:	d0f3      	beq.n	240165c2 <__ieee754_rem_pio2+0x1ea>
240165da:	4920      	ldr	r1, [pc, #128]	; (2401665c <__ieee754_rem_pio2+0x284>)
240165dc:	9101      	str	r1, [sp, #4]
240165de:	2102      	movs	r1, #2
240165e0:	9100      	str	r1, [sp, #0]
240165e2:	4621      	mov	r1, r4
240165e4:	f000 fa54 	bl	24016a90 <__kernel_rem_pio2>
240165e8:	2d00      	cmp	r5, #0
240165ea:	f6bf af25 	bge.w	24016438 <__ieee754_rem_pio2+0x60>
240165ee:	ed94 7b00 	vldr	d7, [r4]
240165f2:	eeb1 7b47 	vneg.f64	d7, d7
240165f6:	ed84 7b00 	vstr	d7, [r4]
240165fa:	ed94 7b02 	vldr	d7, [r4, #8]
240165fe:	eeb1 7b47 	vneg.f64	d7, d7
24016602:	ed84 7b02 	vstr	d7, [r4, #8]
24016606:	e79b      	b.n	24016540 <__ieee754_rem_pio2+0x168>
24016608:	54400000 	.word	0x54400000
2401660c:	3ff921fb 	.word	0x3ff921fb
24016610:	1a626331 	.word	0x1a626331
24016614:	3dd0b461 	.word	0x3dd0b461
24016618:	1a600000 	.word	0x1a600000
2401661c:	3dd0b461 	.word	0x3dd0b461
24016620:	2e037073 	.word	0x2e037073
24016624:	3ba3198a 	.word	0x3ba3198a
24016628:	6dc9c883 	.word	0x6dc9c883
2401662c:	3fe45f30 	.word	0x3fe45f30
24016630:	2e000000 	.word	0x2e000000
24016634:	3ba3198a 	.word	0x3ba3198a
24016638:	252049c1 	.word	0x252049c1
2401663c:	397b839a 	.word	0x397b839a
24016640:	00000000 	.word	0x00000000
24016644:	41700000 	.word	0x41700000
24016648:	3fe921fb 	.word	0x3fe921fb
2401664c:	4002d97b 	.word	0x4002d97b
24016650:	413921fb 	.word	0x413921fb
24016654:	2402d138 	.word	0x2402d138
24016658:	7fefffff 	.word	0x7fefffff
2401665c:	2402d1b8 	.word	0x2402d1b8

24016660 <__ieee754_fmodf>:
24016660:	b5f0      	push	{r4, r5, r6, r7, lr}
24016662:	ee10 5a90 	vmov	r5, s1
24016666:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
2401666a:	d009      	beq.n	24016680 <__ieee754_fmodf+0x20>
2401666c:	ee10 2a10 	vmov	r2, s0
24016670:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24016674:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24016678:	da02      	bge.n	24016680 <__ieee754_fmodf+0x20>
2401667a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
2401667e:	dd04      	ble.n	2401668a <__ieee754_fmodf+0x2a>
24016680:	ee60 0a20 	vmul.f32	s1, s0, s1
24016684:	ee80 0aa0 	vdiv.f32	s0, s1, s1
24016688:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401668a:	42a3      	cmp	r3, r4
2401668c:	dbfc      	blt.n	24016688 <__ieee754_fmodf+0x28>
2401668e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
24016692:	d105      	bne.n	240166a0 <__ieee754_fmodf+0x40>
24016694:	4b32      	ldr	r3, [pc, #200]	; (24016760 <__ieee754_fmodf+0x100>)
24016696:	eb03 7356 	add.w	r3, r3, r6, lsr #29
2401669a:	ed93 0a00 	vldr	s0, [r3]
2401669e:	e7f3      	b.n	24016688 <__ieee754_fmodf+0x28>
240166a0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
240166a4:	d13f      	bne.n	24016726 <__ieee754_fmodf+0xc6>
240166a6:	0219      	lsls	r1, r3, #8
240166a8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
240166ac:	2900      	cmp	r1, #0
240166ae:	dc37      	bgt.n	24016720 <__ieee754_fmodf+0xc0>
240166b0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
240166b4:	d13d      	bne.n	24016732 <__ieee754_fmodf+0xd2>
240166b6:	0227      	lsls	r7, r4, #8
240166b8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
240166bc:	2f00      	cmp	r7, #0
240166be:	da35      	bge.n	2401672c <__ieee754_fmodf+0xcc>
240166c0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
240166c4:	bfbb      	ittet	lt
240166c6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
240166ca:	1a12      	sublt	r2, r2, r0
240166cc:	f3c2 0316 	ubfxge	r3, r2, #0, #23
240166d0:	4093      	lsllt	r3, r2
240166d2:	bfa8      	it	ge
240166d4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
240166d8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
240166dc:	bfb5      	itete	lt
240166de:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
240166e2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
240166e6:	1a52      	sublt	r2, r2, r1
240166e8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
240166ec:	bfb8      	it	lt
240166ee:	4094      	lsllt	r4, r2
240166f0:	1a40      	subs	r0, r0, r1
240166f2:	1b1a      	subs	r2, r3, r4
240166f4:	bb00      	cbnz	r0, 24016738 <__ieee754_fmodf+0xd8>
240166f6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
240166fa:	bf38      	it	cc
240166fc:	4613      	movcc	r3, r2
240166fe:	2b00      	cmp	r3, #0
24016700:	d0c8      	beq.n	24016694 <__ieee754_fmodf+0x34>
24016702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24016706:	db1f      	blt.n	24016748 <__ieee754_fmodf+0xe8>
24016708:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
2401670c:	db1f      	blt.n	2401674e <__ieee754_fmodf+0xee>
2401670e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
24016712:	317f      	adds	r1, #127	; 0x7f
24016714:	4333      	orrs	r3, r6
24016716:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
2401671a:	ee00 3a10 	vmov	s0, r3
2401671e:	e7b3      	b.n	24016688 <__ieee754_fmodf+0x28>
24016720:	3801      	subs	r0, #1
24016722:	0049      	lsls	r1, r1, #1
24016724:	e7c2      	b.n	240166ac <__ieee754_fmodf+0x4c>
24016726:	15d8      	asrs	r0, r3, #23
24016728:	387f      	subs	r0, #127	; 0x7f
2401672a:	e7c1      	b.n	240166b0 <__ieee754_fmodf+0x50>
2401672c:	3901      	subs	r1, #1
2401672e:	007f      	lsls	r7, r7, #1
24016730:	e7c4      	b.n	240166bc <__ieee754_fmodf+0x5c>
24016732:	15e1      	asrs	r1, r4, #23
24016734:	397f      	subs	r1, #127	; 0x7f
24016736:	e7c3      	b.n	240166c0 <__ieee754_fmodf+0x60>
24016738:	2a00      	cmp	r2, #0
2401673a:	da02      	bge.n	24016742 <__ieee754_fmodf+0xe2>
2401673c:	005b      	lsls	r3, r3, #1
2401673e:	3801      	subs	r0, #1
24016740:	e7d7      	b.n	240166f2 <__ieee754_fmodf+0x92>
24016742:	d0a7      	beq.n	24016694 <__ieee754_fmodf+0x34>
24016744:	0053      	lsls	r3, r2, #1
24016746:	e7fa      	b.n	2401673e <__ieee754_fmodf+0xde>
24016748:	005b      	lsls	r3, r3, #1
2401674a:	3901      	subs	r1, #1
2401674c:	e7d9      	b.n	24016702 <__ieee754_fmodf+0xa2>
2401674e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
24016752:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
24016756:	3182      	adds	r1, #130	; 0x82
24016758:	410b      	asrs	r3, r1
2401675a:	4333      	orrs	r3, r6
2401675c:	e7dd      	b.n	2401671a <__ieee754_fmodf+0xba>
2401675e:	bf00      	nop
24016760:	2402d2c0 	.word	0x2402d2c0

24016764 <__ieee754_log10f>:
24016764:	b508      	push	{r3, lr}
24016766:	ee10 2a10 	vmov	r2, s0
2401676a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401676e:	ed2d 8b02 	vpush	{d8}
24016772:	d108      	bne.n	24016786 <__ieee754_log10f+0x22>
24016774:	ed9f 7a21 	vldr	s14, [pc, #132]	; 240167fc <__ieee754_log10f+0x98>
24016778:	eddf 7a21 	vldr	s15, [pc, #132]	; 24016800 <__ieee754_log10f+0x9c>
2401677c:	ee87 0a27 	vdiv.f32	s0, s14, s15
24016780:	ecbd 8b02 	vpop	{d8}
24016784:	bd08      	pop	{r3, pc}
24016786:	2a00      	cmp	r2, #0
24016788:	da02      	bge.n	24016790 <__ieee754_log10f+0x2c>
2401678a:	ee30 7a40 	vsub.f32	s14, s0, s0
2401678e:	e7f3      	b.n	24016778 <__ieee754_log10f+0x14>
24016790:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24016794:	db02      	blt.n	2401679c <__ieee754_log10f+0x38>
24016796:	ee30 0a00 	vadd.f32	s0, s0, s0
2401679a:	e7f1      	b.n	24016780 <__ieee754_log10f+0x1c>
2401679c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
240167a0:	bfbf      	itttt	lt
240167a2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 24016804 <__ieee754_log10f+0xa0>
240167a6:	ee60 7a27 	vmullt.f32	s15, s0, s15
240167aa:	f06f 0118 	mvnlt.w	r1, #24
240167ae:	ee17 2a90 	vmovlt	r2, s15
240167b2:	ea4f 53e2 	mov.w	r3, r2, asr #23
240167b6:	bfa8      	it	ge
240167b8:	2100      	movge	r1, #0
240167ba:	3b7f      	subs	r3, #127	; 0x7f
240167bc:	440b      	add	r3, r1
240167be:	0fd9      	lsrs	r1, r3, #31
240167c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
240167c4:	ee07 3a90 	vmov	s15, r3
240167c8:	f3c2 0216 	ubfx	r2, r2, #0, #23
240167cc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
240167d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
240167d4:	ee00 3a10 	vmov	s0, r3
240167d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
240167dc:	f7ff f9d8 	bl	24015b90 <logf>
240167e0:	eddf 7a09 	vldr	s15, [pc, #36]	; 24016808 <__ieee754_log10f+0xa4>
240167e4:	ee20 0a27 	vmul.f32	s0, s0, s15
240167e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401680c <__ieee754_log10f+0xa8>
240167ec:	eea8 0a27 	vfma.f32	s0, s16, s15
240167f0:	eddf 7a07 	vldr	s15, [pc, #28]	; 24016810 <__ieee754_log10f+0xac>
240167f4:	eea8 0a27 	vfma.f32	s0, s16, s15
240167f8:	e7c2      	b.n	24016780 <__ieee754_log10f+0x1c>
240167fa:	bf00      	nop
240167fc:	cc000000 	.word	0xcc000000
24016800:	00000000 	.word	0x00000000
24016804:	4c000000 	.word	0x4c000000
24016808:	3ede5bd9 	.word	0x3ede5bd9
2401680c:	355427db 	.word	0x355427db
24016810:	3e9a2080 	.word	0x3e9a2080

24016814 <__ieee754_rem_pio2f>:
24016814:	b5f0      	push	{r4, r5, r6, r7, lr}
24016816:	ee10 6a10 	vmov	r6, s0
2401681a:	4b8e      	ldr	r3, [pc, #568]	; (24016a54 <__ieee754_rem_pio2f+0x240>)
2401681c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24016820:	429d      	cmp	r5, r3
24016822:	b087      	sub	sp, #28
24016824:	eef0 7a40 	vmov.f32	s15, s0
24016828:	4604      	mov	r4, r0
2401682a:	dc05      	bgt.n	24016838 <__ieee754_rem_pio2f+0x24>
2401682c:	2300      	movs	r3, #0
2401682e:	ed80 0a00 	vstr	s0, [r0]
24016832:	6043      	str	r3, [r0, #4]
24016834:	2000      	movs	r0, #0
24016836:	e01a      	b.n	2401686e <__ieee754_rem_pio2f+0x5a>
24016838:	4b87      	ldr	r3, [pc, #540]	; (24016a58 <__ieee754_rem_pio2f+0x244>)
2401683a:	429d      	cmp	r5, r3
2401683c:	dc46      	bgt.n	240168cc <__ieee754_rem_pio2f+0xb8>
2401683e:	2e00      	cmp	r6, #0
24016840:	ed9f 0a86 	vldr	s0, [pc, #536]	; 24016a5c <__ieee754_rem_pio2f+0x248>
24016844:	4b86      	ldr	r3, [pc, #536]	; (24016a60 <__ieee754_rem_pio2f+0x24c>)
24016846:	f025 050f 	bic.w	r5, r5, #15
2401684a:	dd1f      	ble.n	2401688c <__ieee754_rem_pio2f+0x78>
2401684c:	429d      	cmp	r5, r3
2401684e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016852:	d00e      	beq.n	24016872 <__ieee754_rem_pio2f+0x5e>
24016854:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24016a64 <__ieee754_rem_pio2f+0x250>
24016858:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401685c:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016860:	ed80 0a00 	vstr	s0, [r0]
24016864:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016868:	2001      	movs	r0, #1
2401686a:	edc4 7a01 	vstr	s15, [r4, #4]
2401686e:	b007      	add	sp, #28
24016870:	bdf0      	pop	{r4, r5, r6, r7, pc}
24016872:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24016a68 <__ieee754_rem_pio2f+0x254>
24016876:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 24016a6c <__ieee754_rem_pio2f+0x258>
2401687a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401687e:	ee77 6ac7 	vsub.f32	s13, s15, s14
24016882:	ee77 7ae6 	vsub.f32	s15, s15, s13
24016886:	edc0 6a00 	vstr	s13, [r0]
2401688a:	e7eb      	b.n	24016864 <__ieee754_rem_pio2f+0x50>
2401688c:	429d      	cmp	r5, r3
2401688e:	ee77 7a80 	vadd.f32	s15, s15, s0
24016892:	d00e      	beq.n	240168b2 <__ieee754_rem_pio2f+0x9e>
24016894:	ed9f 7a73 	vldr	s14, [pc, #460]	; 24016a64 <__ieee754_rem_pio2f+0x250>
24016898:	ee37 0a87 	vadd.f32	s0, s15, s14
2401689c:	ee77 7ac0 	vsub.f32	s15, s15, s0
240168a0:	ed80 0a00 	vstr	s0, [r0]
240168a4:	ee77 7a87 	vadd.f32	s15, s15, s14
240168a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240168ac:	edc4 7a01 	vstr	s15, [r4, #4]
240168b0:	e7dd      	b.n	2401686e <__ieee754_rem_pio2f+0x5a>
240168b2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24016a68 <__ieee754_rem_pio2f+0x254>
240168b6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 24016a6c <__ieee754_rem_pio2f+0x258>
240168ba:	ee77 7a80 	vadd.f32	s15, s15, s0
240168be:	ee77 6a87 	vadd.f32	s13, s15, s14
240168c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240168c6:	edc0 6a00 	vstr	s13, [r0]
240168ca:	e7eb      	b.n	240168a4 <__ieee754_rem_pio2f+0x90>
240168cc:	4b68      	ldr	r3, [pc, #416]	; (24016a70 <__ieee754_rem_pio2f+0x25c>)
240168ce:	429d      	cmp	r5, r3
240168d0:	dc72      	bgt.n	240169b8 <__ieee754_rem_pio2f+0x1a4>
240168d2:	f7ff f955 	bl	24015b80 <fabsf>
240168d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24016a74 <__ieee754_rem_pio2f+0x260>
240168da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240168de:	eee0 7a07 	vfma.f32	s15, s0, s14
240168e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240168e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240168ea:	ee17 0a90 	vmov	r0, s15
240168ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24016a5c <__ieee754_rem_pio2f+0x248>
240168f2:	eea7 0a67 	vfms.f32	s0, s14, s15
240168f6:	281f      	cmp	r0, #31
240168f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 24016a64 <__ieee754_rem_pio2f+0x250>
240168fc:	ee67 7a27 	vmul.f32	s15, s14, s15
24016900:	eeb1 6a47 	vneg.f32	s12, s14
24016904:	ee70 6a67 	vsub.f32	s13, s0, s15
24016908:	ee16 2a90 	vmov	r2, s13
2401690c:	dc1c      	bgt.n	24016948 <__ieee754_rem_pio2f+0x134>
2401690e:	495a      	ldr	r1, [pc, #360]	; (24016a78 <__ieee754_rem_pio2f+0x264>)
24016910:	1e47      	subs	r7, r0, #1
24016912:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
24016916:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401691a:	428b      	cmp	r3, r1
2401691c:	d014      	beq.n	24016948 <__ieee754_rem_pio2f+0x134>
2401691e:	6022      	str	r2, [r4, #0]
24016920:	ed94 7a00 	vldr	s14, [r4]
24016924:	ee30 0a47 	vsub.f32	s0, s0, s14
24016928:	2e00      	cmp	r6, #0
2401692a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401692e:	ed84 0a01 	vstr	s0, [r4, #4]
24016932:	da9c      	bge.n	2401686e <__ieee754_rem_pio2f+0x5a>
24016934:	eeb1 7a47 	vneg.f32	s14, s14
24016938:	eeb1 0a40 	vneg.f32	s0, s0
2401693c:	ed84 7a00 	vstr	s14, [r4]
24016940:	ed84 0a01 	vstr	s0, [r4, #4]
24016944:	4240      	negs	r0, r0
24016946:	e792      	b.n	2401686e <__ieee754_rem_pio2f+0x5a>
24016948:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401694c:	15eb      	asrs	r3, r5, #23
2401694e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
24016952:	2d08      	cmp	r5, #8
24016954:	dde3      	ble.n	2401691e <__ieee754_rem_pio2f+0x10a>
24016956:	eddf 7a44 	vldr	s15, [pc, #272]	; 24016a68 <__ieee754_rem_pio2f+0x254>
2401695a:	eddf 5a44 	vldr	s11, [pc, #272]	; 24016a6c <__ieee754_rem_pio2f+0x258>
2401695e:	eef0 6a40 	vmov.f32	s13, s0
24016962:	eee6 6a27 	vfma.f32	s13, s12, s15
24016966:	ee30 0a66 	vsub.f32	s0, s0, s13
2401696a:	eea6 0a27 	vfma.f32	s0, s12, s15
2401696e:	eef0 7a40 	vmov.f32	s15, s0
24016972:	eed7 7a25 	vfnms.f32	s15, s14, s11
24016976:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401697a:	ee15 2a90 	vmov	r2, s11
2401697e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24016982:	1a5b      	subs	r3, r3, r1
24016984:	2b19      	cmp	r3, #25
24016986:	dc04      	bgt.n	24016992 <__ieee754_rem_pio2f+0x17e>
24016988:	edc4 5a00 	vstr	s11, [r4]
2401698c:	eeb0 0a66 	vmov.f32	s0, s13
24016990:	e7c6      	b.n	24016920 <__ieee754_rem_pio2f+0x10c>
24016992:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24016a7c <__ieee754_rem_pio2f+0x268>
24016996:	eeb0 0a66 	vmov.f32	s0, s13
2401699a:	eea6 0a25 	vfma.f32	s0, s12, s11
2401699e:	ee76 7ac0 	vsub.f32	s15, s13, s0
240169a2:	eddf 6a37 	vldr	s13, [pc, #220]	; 24016a80 <__ieee754_rem_pio2f+0x26c>
240169a6:	eee6 7a25 	vfma.f32	s15, s12, s11
240169aa:	eed7 7a26 	vfnms.f32	s15, s14, s13
240169ae:	ee30 7a67 	vsub.f32	s14, s0, s15
240169b2:	ed84 7a00 	vstr	s14, [r4]
240169b6:	e7b3      	b.n	24016920 <__ieee754_rem_pio2f+0x10c>
240169b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
240169bc:	db06      	blt.n	240169cc <__ieee754_rem_pio2f+0x1b8>
240169be:	ee70 7a40 	vsub.f32	s15, s0, s0
240169c2:	edc0 7a01 	vstr	s15, [r0, #4]
240169c6:	edc0 7a00 	vstr	s15, [r0]
240169ca:	e733      	b.n	24016834 <__ieee754_rem_pio2f+0x20>
240169cc:	15ea      	asrs	r2, r5, #23
240169ce:	3a86      	subs	r2, #134	; 0x86
240169d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
240169d4:	ee07 3a90 	vmov	s15, r3
240169d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240169dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 24016a84 <__ieee754_rem_pio2f+0x270>
240169e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240169e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
240169e8:	ed8d 7a03 	vstr	s14, [sp, #12]
240169ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
240169f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240169f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240169f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
240169fc:	ed8d 7a04 	vstr	s14, [sp, #16]
24016a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
24016a04:	eef5 7a40 	vcmp.f32	s15, #0.0
24016a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016a0c:	edcd 7a05 	vstr	s15, [sp, #20]
24016a10:	d11e      	bne.n	24016a50 <__ieee754_rem_pio2f+0x23c>
24016a12:	eeb5 7a40 	vcmp.f32	s14, #0.0
24016a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016a1a:	bf14      	ite	ne
24016a1c:	2302      	movne	r3, #2
24016a1e:	2301      	moveq	r3, #1
24016a20:	4919      	ldr	r1, [pc, #100]	; (24016a88 <__ieee754_rem_pio2f+0x274>)
24016a22:	9101      	str	r1, [sp, #4]
24016a24:	2102      	movs	r1, #2
24016a26:	9100      	str	r1, [sp, #0]
24016a28:	a803      	add	r0, sp, #12
24016a2a:	4621      	mov	r1, r4
24016a2c:	f000 fbe0 	bl	240171f0 <__kernel_rem_pio2f>
24016a30:	2e00      	cmp	r6, #0
24016a32:	f6bf af1c 	bge.w	2401686e <__ieee754_rem_pio2f+0x5a>
24016a36:	edd4 7a00 	vldr	s15, [r4]
24016a3a:	eef1 7a67 	vneg.f32	s15, s15
24016a3e:	edc4 7a00 	vstr	s15, [r4]
24016a42:	edd4 7a01 	vldr	s15, [r4, #4]
24016a46:	eef1 7a67 	vneg.f32	s15, s15
24016a4a:	edc4 7a01 	vstr	s15, [r4, #4]
24016a4e:	e779      	b.n	24016944 <__ieee754_rem_pio2f+0x130>
24016a50:	2303      	movs	r3, #3
24016a52:	e7e5      	b.n	24016a20 <__ieee754_rem_pio2f+0x20c>
24016a54:	3f490fd8 	.word	0x3f490fd8
24016a58:	4016cbe3 	.word	0x4016cbe3
24016a5c:	3fc90f80 	.word	0x3fc90f80
24016a60:	3fc90fd0 	.word	0x3fc90fd0
24016a64:	37354443 	.word	0x37354443
24016a68:	37354400 	.word	0x37354400
24016a6c:	2e85a308 	.word	0x2e85a308
24016a70:	43490f80 	.word	0x43490f80
24016a74:	3f22f984 	.word	0x3f22f984
24016a78:	2402d2c8 	.word	0x2402d2c8
24016a7c:	2e85a300 	.word	0x2e85a300
24016a80:	248d3132 	.word	0x248d3132
24016a84:	43800000 	.word	0x43800000
24016a88:	2402d348 	.word	0x2402d348
24016a8c:	00000000 	.word	0x00000000

24016a90 <__kernel_rem_pio2>:
24016a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016a94:	ed2d 8b06 	vpush	{d8-d10}
24016a98:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
24016a9c:	460f      	mov	r7, r1
24016a9e:	9002      	str	r0, [sp, #8]
24016aa0:	49c5      	ldr	r1, [pc, #788]	; (24016db8 <__kernel_rem_pio2+0x328>)
24016aa2:	98a2      	ldr	r0, [sp, #648]	; 0x288
24016aa4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
24016aa8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
24016aac:	9301      	str	r3, [sp, #4]
24016aae:	f112 0f14 	cmn.w	r2, #20
24016ab2:	bfa8      	it	ge
24016ab4:	2018      	movge	r0, #24
24016ab6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
24016aba:	bfb8      	it	lt
24016abc:	2000      	movlt	r0, #0
24016abe:	f06f 0417 	mvn.w	r4, #23
24016ac2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 24016da0 <__kernel_rem_pio2+0x310>
24016ac6:	bfa4      	itt	ge
24016ac8:	f1a2 0a03 	subge.w	sl, r2, #3
24016acc:	fb9a f0f0 	sdivge	r0, sl, r0
24016ad0:	fb00 4404 	mla	r4, r0, r4, r4
24016ad4:	1a46      	subs	r6, r0, r1
24016ad6:	4414      	add	r4, r2
24016ad8:	eb09 0c01 	add.w	ip, r9, r1
24016adc:	ad1a      	add	r5, sp, #104	; 0x68
24016ade:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
24016ae2:	2200      	movs	r2, #0
24016ae4:	4562      	cmp	r2, ip
24016ae6:	dd10      	ble.n	24016b0a <__kernel_rem_pio2+0x7a>
24016ae8:	9a01      	ldr	r2, [sp, #4]
24016aea:	ab1a      	add	r3, sp, #104	; 0x68
24016aec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24016af0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
24016af4:	f04f 0c00 	mov.w	ip, #0
24016af8:	45cc      	cmp	ip, r9
24016afa:	dc26      	bgt.n	24016b4a <__kernel_rem_pio2+0xba>
24016afc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 24016da0 <__kernel_rem_pio2+0x310>
24016b00:	f8dd 8008 	ldr.w	r8, [sp, #8]
24016b04:	4616      	mov	r6, r2
24016b06:	2500      	movs	r5, #0
24016b08:	e015      	b.n	24016b36 <__kernel_rem_pio2+0xa6>
24016b0a:	42d6      	cmn	r6, r2
24016b0c:	d409      	bmi.n	24016b22 <__kernel_rem_pio2+0x92>
24016b0e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
24016b12:	ee07 3a90 	vmov	s15, r3
24016b16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016b1a:	eca5 7b02 	vstmia	r5!, {d7}
24016b1e:	3201      	adds	r2, #1
24016b20:	e7e0      	b.n	24016ae4 <__kernel_rem_pio2+0x54>
24016b22:	eeb0 7b46 	vmov.f64	d7, d6
24016b26:	e7f8      	b.n	24016b1a <__kernel_rem_pio2+0x8a>
24016b28:	ecb8 5b02 	vldmia	r8!, {d5}
24016b2c:	ed96 6b00 	vldr	d6, [r6]
24016b30:	3501      	adds	r5, #1
24016b32:	eea5 7b06 	vfma.f64	d7, d5, d6
24016b36:	428d      	cmp	r5, r1
24016b38:	f1a6 0608 	sub.w	r6, r6, #8
24016b3c:	ddf4      	ble.n	24016b28 <__kernel_rem_pio2+0x98>
24016b3e:	ecaa 7b02 	vstmia	sl!, {d7}
24016b42:	f10c 0c01 	add.w	ip, ip, #1
24016b46:	3208      	adds	r2, #8
24016b48:	e7d6      	b.n	24016af8 <__kernel_rem_pio2+0x68>
24016b4a:	ab06      	add	r3, sp, #24
24016b4c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 24016da8 <__kernel_rem_pio2+0x318>
24016b50:	ed9f ab97 	vldr	d10, [pc, #604]	; 24016db0 <__kernel_rem_pio2+0x320>
24016b54:	eb03 0389 	add.w	r3, r3, r9, lsl #2
24016b58:	9303      	str	r3, [sp, #12]
24016b5a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
24016b5e:	464d      	mov	r5, r9
24016b60:	00eb      	lsls	r3, r5, #3
24016b62:	9304      	str	r3, [sp, #16]
24016b64:	ab92      	add	r3, sp, #584	; 0x248
24016b66:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24016b6a:	f10d 0b18 	add.w	fp, sp, #24
24016b6e:	ab6a      	add	r3, sp, #424	; 0x1a8
24016b70:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
24016b74:	465e      	mov	r6, fp
24016b76:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24016b7a:	4628      	mov	r0, r5
24016b7c:	2800      	cmp	r0, #0
24016b7e:	f1a2 0208 	sub.w	r2, r2, #8
24016b82:	dc4c      	bgt.n	24016c1e <__kernel_rem_pio2+0x18e>
24016b84:	4620      	mov	r0, r4
24016b86:	9105      	str	r1, [sp, #20]
24016b88:	f000 ff06 	bl	24017998 <scalbn>
24016b8c:	eeb0 8b40 	vmov.f64	d8, d0
24016b90:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
24016b94:	ee28 0b00 	vmul.f64	d0, d8, d0
24016b98:	f000 fe8a 	bl	240178b0 <floor>
24016b9c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
24016ba0:	eea0 8b47 	vfms.f64	d8, d0, d7
24016ba4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
24016ba8:	2c00      	cmp	r4, #0
24016baa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
24016bae:	ee17 8a90 	vmov	r8, s15
24016bb2:	ee38 8b40 	vsub.f64	d8, d8, d0
24016bb6:	9905      	ldr	r1, [sp, #20]
24016bb8:	dd43      	ble.n	24016c42 <__kernel_rem_pio2+0x1b2>
24016bba:	1e68      	subs	r0, r5, #1
24016bbc:	ab06      	add	r3, sp, #24
24016bbe:	f1c4 0c18 	rsb	ip, r4, #24
24016bc2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
24016bc6:	fa46 f20c 	asr.w	r2, r6, ip
24016bca:	4490      	add	r8, r2
24016bcc:	fa02 f20c 	lsl.w	r2, r2, ip
24016bd0:	1ab6      	subs	r6, r6, r2
24016bd2:	f1c4 0217 	rsb	r2, r4, #23
24016bd6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
24016bda:	4116      	asrs	r6, r2
24016bdc:	2e00      	cmp	r6, #0
24016bde:	dd3f      	ble.n	24016c60 <__kernel_rem_pio2+0x1d0>
24016be0:	f04f 0c00 	mov.w	ip, #0
24016be4:	f108 0801 	add.w	r8, r8, #1
24016be8:	4660      	mov	r0, ip
24016bea:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24016bee:	4565      	cmp	r5, ip
24016bf0:	dc6e      	bgt.n	24016cd0 <__kernel_rem_pio2+0x240>
24016bf2:	2c00      	cmp	r4, #0
24016bf4:	dd04      	ble.n	24016c00 <__kernel_rem_pio2+0x170>
24016bf6:	2c01      	cmp	r4, #1
24016bf8:	d07f      	beq.n	24016cfa <__kernel_rem_pio2+0x26a>
24016bfa:	2c02      	cmp	r4, #2
24016bfc:	f000 8087 	beq.w	24016d0e <__kernel_rem_pio2+0x27e>
24016c00:	2e02      	cmp	r6, #2
24016c02:	d12d      	bne.n	24016c60 <__kernel_rem_pio2+0x1d0>
24016c04:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24016c08:	ee30 8b48 	vsub.f64	d8, d0, d8
24016c0c:	b340      	cbz	r0, 24016c60 <__kernel_rem_pio2+0x1d0>
24016c0e:	4620      	mov	r0, r4
24016c10:	9105      	str	r1, [sp, #20]
24016c12:	f000 fec1 	bl	24017998 <scalbn>
24016c16:	9905      	ldr	r1, [sp, #20]
24016c18:	ee38 8b40 	vsub.f64	d8, d8, d0
24016c1c:	e020      	b.n	24016c60 <__kernel_rem_pio2+0x1d0>
24016c1e:	ee20 7b09 	vmul.f64	d7, d0, d9
24016c22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016c26:	3801      	subs	r0, #1
24016c28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24016c2c:	eea7 0b4a 	vfms.f64	d0, d7, d10
24016c30:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016c34:	eca6 0a01 	vstmia	r6!, {s0}
24016c38:	ed92 0b00 	vldr	d0, [r2]
24016c3c:	ee37 0b00 	vadd.f64	d0, d7, d0
24016c40:	e79c      	b.n	24016b7c <__kernel_rem_pio2+0xec>
24016c42:	d105      	bne.n	24016c50 <__kernel_rem_pio2+0x1c0>
24016c44:	1e6a      	subs	r2, r5, #1
24016c46:	ab06      	add	r3, sp, #24
24016c48:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
24016c4c:	15f6      	asrs	r6, r6, #23
24016c4e:	e7c5      	b.n	24016bdc <__kernel_rem_pio2+0x14c>
24016c50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24016c54:	eeb4 8bc7 	vcmpe.f64	d8, d7
24016c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c5c:	da36      	bge.n	24016ccc <__kernel_rem_pio2+0x23c>
24016c5e:	2600      	movs	r6, #0
24016c60:	eeb5 8b40 	vcmp.f64	d8, #0.0
24016c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016c68:	f040 80aa 	bne.w	24016dc0 <__kernel_rem_pio2+0x330>
24016c6c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24016c70:	4658      	mov	r0, fp
24016c72:	2200      	movs	r2, #0
24016c74:	4548      	cmp	r0, r9
24016c76:	da52      	bge.n	24016d1e <__kernel_rem_pio2+0x28e>
24016c78:	2a00      	cmp	r2, #0
24016c7a:	f000 8081 	beq.w	24016d80 <__kernel_rem_pio2+0x2f0>
24016c7e:	ab06      	add	r3, sp, #24
24016c80:	3c18      	subs	r4, #24
24016c82:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
24016c86:	2b00      	cmp	r3, #0
24016c88:	f000 8087 	beq.w	24016d9a <__kernel_rem_pio2+0x30a>
24016c8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24016c90:	4620      	mov	r0, r4
24016c92:	f000 fe81 	bl	24017998 <scalbn>
24016c96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
24016c9a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 24016da8 <__kernel_rem_pio2+0x318>
24016c9e:	a96a      	add	r1, sp, #424	; 0x1a8
24016ca0:	f103 0208 	add.w	r2, r3, #8
24016ca4:	1888      	adds	r0, r1, r2
24016ca6:	4659      	mov	r1, fp
24016ca8:	2900      	cmp	r1, #0
24016caa:	f280 80b7 	bge.w	24016e1c <__kernel_rem_pio2+0x38c>
24016cae:	4659      	mov	r1, fp
24016cb0:	2900      	cmp	r1, #0
24016cb2:	f2c0 80d5 	blt.w	24016e60 <__kernel_rem_pio2+0x3d0>
24016cb6:	a86a      	add	r0, sp, #424	; 0x1a8
24016cb8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
24016cbc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 24016da0 <__kernel_rem_pio2+0x310>
24016cc0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 24016dbc <__kernel_rem_pio2+0x32c>
24016cc4:	2400      	movs	r4, #0
24016cc6:	ebab 0001 	sub.w	r0, fp, r1
24016cca:	e0be      	b.n	24016e4a <__kernel_rem_pio2+0x3ba>
24016ccc:	2602      	movs	r6, #2
24016cce:	e787      	b.n	24016be0 <__kernel_rem_pio2+0x150>
24016cd0:	f8db 2000 	ldr.w	r2, [fp]
24016cd4:	b958      	cbnz	r0, 24016cee <__kernel_rem_pio2+0x25e>
24016cd6:	b122      	cbz	r2, 24016ce2 <__kernel_rem_pio2+0x252>
24016cd8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
24016cdc:	f8cb 2000 	str.w	r2, [fp]
24016ce0:	2201      	movs	r2, #1
24016ce2:	f10c 0c01 	add.w	ip, ip, #1
24016ce6:	f10b 0b04 	add.w	fp, fp, #4
24016cea:	4610      	mov	r0, r2
24016cec:	e77f      	b.n	24016bee <__kernel_rem_pio2+0x15e>
24016cee:	ebae 0202 	sub.w	r2, lr, r2
24016cf2:	f8cb 2000 	str.w	r2, [fp]
24016cf6:	4602      	mov	r2, r0
24016cf8:	e7f3      	b.n	24016ce2 <__kernel_rem_pio2+0x252>
24016cfa:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24016cfe:	ab06      	add	r3, sp, #24
24016d00:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016d04:	f3c2 0216 	ubfx	r2, r2, #0, #23
24016d08:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24016d0c:	e778      	b.n	24016c00 <__kernel_rem_pio2+0x170>
24016d0e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
24016d12:	ab06      	add	r3, sp, #24
24016d14:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016d18:	f3c2 0215 	ubfx	r2, r2, #0, #22
24016d1c:	e7f4      	b.n	24016d08 <__kernel_rem_pio2+0x278>
24016d1e:	ab06      	add	r3, sp, #24
24016d20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24016d24:	3801      	subs	r0, #1
24016d26:	431a      	orrs	r2, r3
24016d28:	e7a4      	b.n	24016c74 <__kernel_rem_pio2+0x1e4>
24016d2a:	f10c 0c01 	add.w	ip, ip, #1
24016d2e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
24016d32:	2800      	cmp	r0, #0
24016d34:	d0f9      	beq.n	24016d2a <__kernel_rem_pio2+0x29a>
24016d36:	9b04      	ldr	r3, [sp, #16]
24016d38:	f503 7312 	add.w	r3, r3, #584	; 0x248
24016d3c:	eb0d 0203 	add.w	r2, sp, r3
24016d40:	9b01      	ldr	r3, [sp, #4]
24016d42:	18e8      	adds	r0, r5, r3
24016d44:	ab1a      	add	r3, sp, #104	; 0x68
24016d46:	1c6e      	adds	r6, r5, #1
24016d48:	3a98      	subs	r2, #152	; 0x98
24016d4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
24016d4e:	4465      	add	r5, ip
24016d50:	42b5      	cmp	r5, r6
24016d52:	f6ff af05 	blt.w	24016b60 <__kernel_rem_pio2+0xd0>
24016d56:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
24016d5a:	f8dd e008 	ldr.w	lr, [sp, #8]
24016d5e:	ee07 3a90 	vmov	s15, r3
24016d62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016d66:	f04f 0c00 	mov.w	ip, #0
24016d6a:	eca0 7b02 	vstmia	r0!, {d7}
24016d6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24016da0 <__kernel_rem_pio2+0x310>
24016d72:	4680      	mov	r8, r0
24016d74:	458c      	cmp	ip, r1
24016d76:	dd07      	ble.n	24016d88 <__kernel_rem_pio2+0x2f8>
24016d78:	eca2 7b02 	vstmia	r2!, {d7}
24016d7c:	3601      	adds	r6, #1
24016d7e:	e7e7      	b.n	24016d50 <__kernel_rem_pio2+0x2c0>
24016d80:	9a03      	ldr	r2, [sp, #12]
24016d82:	f04f 0c01 	mov.w	ip, #1
24016d86:	e7d2      	b.n	24016d2e <__kernel_rem_pio2+0x29e>
24016d88:	ecbe 5b02 	vldmia	lr!, {d5}
24016d8c:	ed38 6b02 	vldmdb	r8!, {d6}
24016d90:	f10c 0c01 	add.w	ip, ip, #1
24016d94:	eea5 7b06 	vfma.f64	d7, d5, d6
24016d98:	e7ec      	b.n	24016d74 <__kernel_rem_pio2+0x2e4>
24016d9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016d9e:	e76e      	b.n	24016c7e <__kernel_rem_pio2+0x1ee>
	...
24016dac:	3e700000 	.word	0x3e700000
24016db0:	00000000 	.word	0x00000000
24016db4:	41700000 	.word	0x41700000
24016db8:	2402d6a0 	.word	0x2402d6a0
24016dbc:	2402d660 	.word	0x2402d660
24016dc0:	4260      	negs	r0, r4
24016dc2:	eeb0 0b48 	vmov.f64	d0, d8
24016dc6:	f000 fde7 	bl	24017998 <scalbn>
24016dca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 24016fa8 <__kernel_rem_pio2+0x518>
24016dce:	eeb4 0bc6 	vcmpe.f64	d0, d6
24016dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016dd6:	db18      	blt.n	24016e0a <__kernel_rem_pio2+0x37a>
24016dd8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24016fb0 <__kernel_rem_pio2+0x520>
24016ddc:	ee20 7b07 	vmul.f64	d7, d0, d7
24016de0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016de4:	aa06      	add	r2, sp, #24
24016de6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
24016dea:	eea5 0b46 	vfms.f64	d0, d5, d6
24016dee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016df2:	f105 0b01 	add.w	fp, r5, #1
24016df6:	ee10 3a10 	vmov	r3, s0
24016dfa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24016dfe:	ee17 3a10 	vmov	r3, s14
24016e02:	3418      	adds	r4, #24
24016e04:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24016e08:	e740      	b.n	24016c8c <__kernel_rem_pio2+0x1fc>
24016e0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016e0e:	aa06      	add	r2, sp, #24
24016e10:	ee10 3a10 	vmov	r3, s0
24016e14:	46ab      	mov	fp, r5
24016e16:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
24016e1a:	e737      	b.n	24016c8c <__kernel_rem_pio2+0x1fc>
24016e1c:	ac06      	add	r4, sp, #24
24016e1e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
24016e22:	9401      	str	r4, [sp, #4]
24016e24:	ee07 4a90 	vmov	s15, r4
24016e28:	3901      	subs	r1, #1
24016e2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016e2e:	ee27 7b00 	vmul.f64	d7, d7, d0
24016e32:	ee20 0b06 	vmul.f64	d0, d0, d6
24016e36:	ed20 7b02 	vstmdb	r0!, {d7}
24016e3a:	e735      	b.n	24016ca8 <__kernel_rem_pio2+0x218>
24016e3c:	ecbc 5b02 	vldmia	ip!, {d5}
24016e40:	ecb5 6b02 	vldmia	r5!, {d6}
24016e44:	3401      	adds	r4, #1
24016e46:	eea5 7b06 	vfma.f64	d7, d5, d6
24016e4a:	454c      	cmp	r4, r9
24016e4c:	dc01      	bgt.n	24016e52 <__kernel_rem_pio2+0x3c2>
24016e4e:	4284      	cmp	r4, r0
24016e50:	ddf4      	ble.n	24016e3c <__kernel_rem_pio2+0x3ac>
24016e52:	ac42      	add	r4, sp, #264	; 0x108
24016e54:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
24016e58:	ed80 7b00 	vstr	d7, [r0]
24016e5c:	3901      	subs	r1, #1
24016e5e:	e727      	b.n	24016cb0 <__kernel_rem_pio2+0x220>
24016e60:	99a2      	ldr	r1, [sp, #648]	; 0x288
24016e62:	2902      	cmp	r1, #2
24016e64:	dc0a      	bgt.n	24016e7c <__kernel_rem_pio2+0x3ec>
24016e66:	2900      	cmp	r1, #0
24016e68:	dc2c      	bgt.n	24016ec4 <__kernel_rem_pio2+0x434>
24016e6a:	d045      	beq.n	24016ef8 <__kernel_rem_pio2+0x468>
24016e6c:	f008 0007 	and.w	r0, r8, #7
24016e70:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
24016e74:	ecbd 8b06 	vpop	{d8-d10}
24016e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24016e7c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24016e7e:	2a03      	cmp	r2, #3
24016e80:	d1f4      	bne.n	24016e6c <__kernel_rem_pio2+0x3dc>
24016e82:	aa42      	add	r2, sp, #264	; 0x108
24016e84:	4413      	add	r3, r2
24016e86:	461a      	mov	r2, r3
24016e88:	4619      	mov	r1, r3
24016e8a:	4658      	mov	r0, fp
24016e8c:	2800      	cmp	r0, #0
24016e8e:	f1a1 0108 	sub.w	r1, r1, #8
24016e92:	dc54      	bgt.n	24016f3e <__kernel_rem_pio2+0x4ae>
24016e94:	4659      	mov	r1, fp
24016e96:	2901      	cmp	r1, #1
24016e98:	f1a2 0208 	sub.w	r2, r2, #8
24016e9c:	dc5f      	bgt.n	24016f5e <__kernel_rem_pio2+0x4ce>
24016e9e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 24016fb8 <__kernel_rem_pio2+0x528>
24016ea2:	3308      	adds	r3, #8
24016ea4:	f1bb 0f01 	cmp.w	fp, #1
24016ea8:	dc69      	bgt.n	24016f7e <__kernel_rem_pio2+0x4ee>
24016eaa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
24016eae:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
24016eb2:	2e00      	cmp	r6, #0
24016eb4:	d16a      	bne.n	24016f8c <__kernel_rem_pio2+0x4fc>
24016eb6:	ed87 5b00 	vstr	d5, [r7]
24016eba:	ed87 6b02 	vstr	d6, [r7, #8]
24016ebe:	ed87 7b04 	vstr	d7, [r7, #16]
24016ec2:	e7d3      	b.n	24016e6c <__kernel_rem_pio2+0x3dc>
24016ec4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 24016fb8 <__kernel_rem_pio2+0x528>
24016ec8:	ab42      	add	r3, sp, #264	; 0x108
24016eca:	441a      	add	r2, r3
24016ecc:	465b      	mov	r3, fp
24016ece:	2b00      	cmp	r3, #0
24016ed0:	da26      	bge.n	24016f20 <__kernel_rem_pio2+0x490>
24016ed2:	b35e      	cbz	r6, 24016f2c <__kernel_rem_pio2+0x49c>
24016ed4:	eeb1 7b46 	vneg.f64	d7, d6
24016ed8:	ed87 7b00 	vstr	d7, [r7]
24016edc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24016ee0:	aa44      	add	r2, sp, #272	; 0x110
24016ee2:	2301      	movs	r3, #1
24016ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
24016ee8:	459b      	cmp	fp, r3
24016eea:	da22      	bge.n	24016f32 <__kernel_rem_pio2+0x4a2>
24016eec:	b10e      	cbz	r6, 24016ef2 <__kernel_rem_pio2+0x462>
24016eee:	eeb1 7b47 	vneg.f64	d7, d7
24016ef2:	ed87 7b02 	vstr	d7, [r7, #8]
24016ef6:	e7b9      	b.n	24016e6c <__kernel_rem_pio2+0x3dc>
24016ef8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 24016fb8 <__kernel_rem_pio2+0x528>
24016efc:	ab42      	add	r3, sp, #264	; 0x108
24016efe:	441a      	add	r2, r3
24016f00:	f1bb 0f00 	cmp.w	fp, #0
24016f04:	da05      	bge.n	24016f12 <__kernel_rem_pio2+0x482>
24016f06:	b10e      	cbz	r6, 24016f0c <__kernel_rem_pio2+0x47c>
24016f08:	eeb1 7b47 	vneg.f64	d7, d7
24016f0c:	ed87 7b00 	vstr	d7, [r7]
24016f10:	e7ac      	b.n	24016e6c <__kernel_rem_pio2+0x3dc>
24016f12:	ed32 6b02 	vldmdb	r2!, {d6}
24016f16:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016f1a:	ee37 7b06 	vadd.f64	d7, d7, d6
24016f1e:	e7ef      	b.n	24016f00 <__kernel_rem_pio2+0x470>
24016f20:	ed32 7b02 	vldmdb	r2!, {d7}
24016f24:	3b01      	subs	r3, #1
24016f26:	ee36 6b07 	vadd.f64	d6, d6, d7
24016f2a:	e7d0      	b.n	24016ece <__kernel_rem_pio2+0x43e>
24016f2c:	eeb0 7b46 	vmov.f64	d7, d6
24016f30:	e7d2      	b.n	24016ed8 <__kernel_rem_pio2+0x448>
24016f32:	ecb2 6b02 	vldmia	r2!, {d6}
24016f36:	3301      	adds	r3, #1
24016f38:	ee37 7b06 	vadd.f64	d7, d7, d6
24016f3c:	e7d4      	b.n	24016ee8 <__kernel_rem_pio2+0x458>
24016f3e:	ed91 7b00 	vldr	d7, [r1]
24016f42:	ed91 5b02 	vldr	d5, [r1, #8]
24016f46:	3801      	subs	r0, #1
24016f48:	ee37 6b05 	vadd.f64	d6, d7, d5
24016f4c:	ee37 7b46 	vsub.f64	d7, d7, d6
24016f50:	ed81 6b00 	vstr	d6, [r1]
24016f54:	ee37 7b05 	vadd.f64	d7, d7, d5
24016f58:	ed81 7b02 	vstr	d7, [r1, #8]
24016f5c:	e796      	b.n	24016e8c <__kernel_rem_pio2+0x3fc>
24016f5e:	ed92 7b00 	vldr	d7, [r2]
24016f62:	ed92 5b02 	vldr	d5, [r2, #8]
24016f66:	3901      	subs	r1, #1
24016f68:	ee37 6b05 	vadd.f64	d6, d7, d5
24016f6c:	ee37 7b46 	vsub.f64	d7, d7, d6
24016f70:	ed82 6b00 	vstr	d6, [r2]
24016f74:	ee37 7b05 	vadd.f64	d7, d7, d5
24016f78:	ed82 7b02 	vstr	d7, [r2, #8]
24016f7c:	e78b      	b.n	24016e96 <__kernel_rem_pio2+0x406>
24016f7e:	ed33 6b02 	vldmdb	r3!, {d6}
24016f82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
24016f86:	ee37 7b06 	vadd.f64	d7, d7, d6
24016f8a:	e78b      	b.n	24016ea4 <__kernel_rem_pio2+0x414>
24016f8c:	eeb1 5b45 	vneg.f64	d5, d5
24016f90:	eeb1 6b46 	vneg.f64	d6, d6
24016f94:	ed87 5b00 	vstr	d5, [r7]
24016f98:	eeb1 7b47 	vneg.f64	d7, d7
24016f9c:	ed87 6b02 	vstr	d6, [r7, #8]
24016fa0:	e78d      	b.n	24016ebe <__kernel_rem_pio2+0x42e>
24016fa2:	bf00      	nop
24016fa4:	f3af 8000 	nop.w
24016fa8:	00000000 	.word	0x00000000
24016fac:	41700000 	.word	0x41700000
24016fb0:	00000000 	.word	0x00000000
24016fb4:	3e700000 	.word	0x3e700000
	...

24016fc0 <__kernel_tan>:
24016fc0:	eeb0 7b40 	vmov.f64	d7, d0
24016fc4:	ee17 3a90 	vmov	r3, s15
24016fc8:	4987      	ldr	r1, [pc, #540]	; (240171e8 <__kernel_tan+0x228>)
24016fca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24016fce:	428a      	cmp	r2, r1
24016fd0:	b510      	push	{r4, lr}
24016fd2:	dc33      	bgt.n	2401703c <__kernel_tan+0x7c>
24016fd4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
24016fd8:	ee16 1a90 	vmov	r1, s13
24016fdc:	2900      	cmp	r1, #0
24016fde:	d143      	bne.n	24017068 <__kernel_tan+0xa8>
24016fe0:	ee10 4a10 	vmov	r4, s0
24016fe4:	1c43      	adds	r3, r0, #1
24016fe6:	4323      	orrs	r3, r4
24016fe8:	4313      	orrs	r3, r2
24016fea:	d108      	bne.n	24016ffe <__kernel_tan+0x3e>
24016fec:	f000 fc56 	bl	2401789c <fabs>
24016ff0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24016ff4:	ee86 7b00 	vdiv.f64	d7, d6, d0
24016ff8:	eeb0 0b47 	vmov.f64	d0, d7
24016ffc:	bd10      	pop	{r4, pc}
24016ffe:	2801      	cmp	r0, #1
24017000:	d0fa      	beq.n	24016ff8 <__kernel_tan+0x38>
24017002:	ee30 6b01 	vadd.f64	d6, d0, d1
24017006:	ec53 2b16 	vmov	r2, r3, d6
2401700a:	460a      	mov	r2, r1
2401700c:	ec43 2b15 	vmov	d5, r2, r3
24017010:	ee35 7b40 	vsub.f64	d7, d5, d0
24017014:	ee31 1b47 	vsub.f64	d1, d1, d7
24017018:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401701c:	ee87 4b06 	vdiv.f64	d4, d7, d6
24017020:	ec53 2b14 	vmov	r2, r3, d4
24017024:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24017028:	460a      	mov	r2, r1
2401702a:	ec43 2b17 	vmov	d7, r2, r3
2401702e:	eea5 6b07 	vfma.f64	d6, d5, d7
24017032:	eea1 6b07 	vfma.f64	d6, d1, d7
24017036:	eea6 7b04 	vfma.f64	d7, d6, d4
2401703a:	e7dd      	b.n	24016ff8 <__kernel_tan+0x38>
2401703c:	496b      	ldr	r1, [pc, #428]	; (240171ec <__kernel_tan+0x22c>)
2401703e:	428a      	cmp	r2, r1
24017040:	dd12      	ble.n	24017068 <__kernel_tan+0xa8>
24017042:	ed9f 6b49 	vldr	d6, [pc, #292]	; 24017168 <__kernel_tan+0x1a8>
24017046:	2b00      	cmp	r3, #0
24017048:	bfb8      	it	lt
2401704a:	eeb1 7b40 	vneglt.f64	d7, d0
2401704e:	ee36 7b47 	vsub.f64	d7, d6, d7
24017052:	ed9f 6b47 	vldr	d6, [pc, #284]	; 24017170 <__kernel_tan+0x1b0>
24017056:	bfb8      	it	lt
24017058:	eeb1 1b41 	vneglt.f64	d1, d1
2401705c:	ee36 1b41 	vsub.f64	d1, d6, d1
24017060:	ee31 7b07 	vadd.f64	d7, d1, d7
24017064:	ed9f 1b44 	vldr	d1, [pc, #272]	; 24017178 <__kernel_tan+0x1b8>
24017068:	ee27 5b07 	vmul.f64	d5, d7, d7
2401706c:	ee25 6b05 	vmul.f64	d6, d5, d5
24017070:	ed9f 3b43 	vldr	d3, [pc, #268]	; 24017180 <__kernel_tan+0x1c0>
24017074:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24017188 <__kernel_tan+0x1c8>
24017078:	eea6 4b03 	vfma.f64	d4, d6, d3
2401707c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 24017190 <__kernel_tan+0x1d0>
24017080:	eea4 3b06 	vfma.f64	d3, d4, d6
24017084:	ed9f 4b44 	vldr	d4, [pc, #272]	; 24017198 <__kernel_tan+0x1d8>
24017088:	eea3 4b06 	vfma.f64	d4, d3, d6
2401708c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 240171a0 <__kernel_tan+0x1e0>
24017090:	eea4 3b06 	vfma.f64	d3, d4, d6
24017094:	ed9f 4b44 	vldr	d4, [pc, #272]	; 240171a8 <__kernel_tan+0x1e8>
24017098:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240171b0 <__kernel_tan+0x1f0>
2401709c:	eea3 4b06 	vfma.f64	d4, d3, d6
240170a0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240171b8 <__kernel_tan+0x1f8>
240170a4:	eea6 3b02 	vfma.f64	d3, d6, d2
240170a8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240171c0 <__kernel_tan+0x200>
240170ac:	eea3 2b06 	vfma.f64	d2, d3, d6
240170b0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240171c8 <__kernel_tan+0x208>
240170b4:	eea2 3b06 	vfma.f64	d3, d2, d6
240170b8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 240171d0 <__kernel_tan+0x210>
240170bc:	eea3 2b06 	vfma.f64	d2, d3, d6
240170c0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 240171d8 <__kernel_tan+0x218>
240170c4:	4949      	ldr	r1, [pc, #292]	; (240171ec <__kernel_tan+0x22c>)
240170c6:	eea2 3b06 	vfma.f64	d3, d2, d6
240170ca:	ee27 2b05 	vmul.f64	d2, d7, d5
240170ce:	eeb0 6b44 	vmov.f64	d6, d4
240170d2:	eeb0 4b41 	vmov.f64	d4, d1
240170d6:	eea3 6b05 	vfma.f64	d6, d3, d5
240170da:	eea6 4b02 	vfma.f64	d4, d6, d2
240170de:	ed9f 6b40 	vldr	d6, [pc, #256]	; 240171e0 <__kernel_tan+0x220>
240170e2:	eea4 1b05 	vfma.f64	d1, d4, d5
240170e6:	428a      	cmp	r2, r1
240170e8:	eea2 1b06 	vfma.f64	d1, d2, d6
240170ec:	ee37 5b01 	vadd.f64	d5, d7, d1
240170f0:	dd1d      	ble.n	2401712e <__kernel_tan+0x16e>
240170f2:	ee25 3b05 	vmul.f64	d3, d5, d5
240170f6:	179b      	asrs	r3, r3, #30
240170f8:	ee06 0a90 	vmov	s13, r0
240170fc:	f003 0302 	and.w	r3, r3, #2
24017100:	f1c3 0301 	rsb	r3, r3, #1
24017104:	eeb8 6be6 	vcvt.f64.s32	d6, s13
24017108:	ee35 5b06 	vadd.f64	d5, d5, d6
2401710c:	ee83 4b05 	vdiv.f64	d4, d3, d5
24017110:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
24017114:	ee34 1b41 	vsub.f64	d1, d4, d1
24017118:	ee37 7b41 	vsub.f64	d7, d7, d1
2401711c:	eea7 6b45 	vfms.f64	d6, d7, d5
24017120:	ee07 3a10 	vmov	s14, r3
24017124:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
24017128:	ee27 7b06 	vmul.f64	d7, d7, d6
2401712c:	e764      	b.n	24016ff8 <__kernel_tan+0x38>
2401712e:	2801      	cmp	r0, #1
24017130:	d016      	beq.n	24017160 <__kernel_tan+0x1a0>
24017132:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24017136:	ec51 0b15 	vmov	r0, r1, d5
2401713a:	2000      	movs	r0, #0
2401713c:	ec41 0b13 	vmov	d3, r0, r1
24017140:	ee33 7b47 	vsub.f64	d7, d3, d7
24017144:	ee31 1b47 	vsub.f64	d1, d1, d7
24017148:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401714c:	ee87 4b05 	vdiv.f64	d4, d7, d5
24017150:	ec53 2b14 	vmov	r2, r3, d4
24017154:	4602      	mov	r2, r0
24017156:	ec43 2b17 	vmov	d7, r2, r3
2401715a:	eea3 6b07 	vfma.f64	d6, d3, d7
2401715e:	e768      	b.n	24017032 <__kernel_tan+0x72>
24017160:	eeb0 7b45 	vmov.f64	d7, d5
24017164:	e748      	b.n	24016ff8 <__kernel_tan+0x38>
24017166:	bf00      	nop
24017168:	54442d18 	.word	0x54442d18
2401716c:	3fe921fb 	.word	0x3fe921fb
24017170:	33145c07 	.word	0x33145c07
24017174:	3c81a626 	.word	0x3c81a626
	...
24017180:	db605373 	.word	0xdb605373
24017184:	bef375cb 	.word	0xbef375cb
24017188:	a03792a6 	.word	0xa03792a6
2401718c:	3f147e88 	.word	0x3f147e88
24017190:	f2f26501 	.word	0xf2f26501
24017194:	3f4344d8 	.word	0x3f4344d8
24017198:	c9560328 	.word	0xc9560328
2401719c:	3f6d6d22 	.word	0x3f6d6d22
240171a0:	8406d637 	.word	0x8406d637
240171a4:	3f9664f4 	.word	0x3f9664f4
240171a8:	1110fe7a 	.word	0x1110fe7a
240171ac:	3fc11111 	.word	0x3fc11111
240171b0:	74bf7ad4 	.word	0x74bf7ad4
240171b4:	3efb2a70 	.word	0x3efb2a70
240171b8:	32f0a7e9 	.word	0x32f0a7e9
240171bc:	3f12b80f 	.word	0x3f12b80f
240171c0:	1a8d1068 	.word	0x1a8d1068
240171c4:	3f3026f7 	.word	0x3f3026f7
240171c8:	fee08315 	.word	0xfee08315
240171cc:	3f57dbc8 	.word	0x3f57dbc8
240171d0:	e96e8493 	.word	0xe96e8493
240171d4:	3f8226e3 	.word	0x3f8226e3
240171d8:	1bb341fe 	.word	0x1bb341fe
240171dc:	3faba1ba 	.word	0x3faba1ba
240171e0:	55555563 	.word	0x55555563
240171e4:	3fd55555 	.word	0x3fd55555
240171e8:	3e2fffff 	.word	0x3e2fffff
240171ec:	3fe59427 	.word	0x3fe59427

240171f0 <__kernel_rem_pio2f>:
240171f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240171f4:	ed2d 8b04 	vpush	{d8-d9}
240171f8:	b0d9      	sub	sp, #356	; 0x164
240171fa:	4688      	mov	r8, r1
240171fc:	9002      	str	r0, [sp, #8]
240171fe:	49bb      	ldr	r1, [pc, #748]	; (240174ec <__kernel_rem_pio2f+0x2fc>)
24017200:	9866      	ldr	r0, [sp, #408]	; 0x198
24017202:	9301      	str	r3, [sp, #4]
24017204:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
24017208:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
2401720c:	1e59      	subs	r1, r3, #1
2401720e:	1d13      	adds	r3, r2, #4
24017210:	db27      	blt.n	24017262 <__kernel_rem_pio2f+0x72>
24017212:	f1b2 0b03 	subs.w	fp, r2, #3
24017216:	bf48      	it	mi
24017218:	f102 0b04 	addmi.w	fp, r2, #4
2401721c:	ea4f 00eb 	mov.w	r0, fp, asr #3
24017220:	1c45      	adds	r5, r0, #1
24017222:	00ec      	lsls	r4, r5, #3
24017224:	1a47      	subs	r7, r0, r1
24017226:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 240174fc <__kernel_rem_pio2f+0x30c>
2401722a:	9403      	str	r4, [sp, #12]
2401722c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
24017230:	eb0a 0c01 	add.w	ip, sl, r1
24017234:	ae1c      	add	r6, sp, #112	; 0x70
24017236:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
2401723a:	2400      	movs	r4, #0
2401723c:	4564      	cmp	r4, ip
2401723e:	dd12      	ble.n	24017266 <__kernel_rem_pio2f+0x76>
24017240:	9b01      	ldr	r3, [sp, #4]
24017242:	ac1c      	add	r4, sp, #112	; 0x70
24017244:	eb04 0483 	add.w	r4, r4, r3, lsl #2
24017248:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
2401724c:	f04f 0c00 	mov.w	ip, #0
24017250:	45d4      	cmp	ip, sl
24017252:	dc27      	bgt.n	240172a4 <__kernel_rem_pio2f+0xb4>
24017254:	f8dd 9008 	ldr.w	r9, [sp, #8]
24017258:	eddf 7aa8 	vldr	s15, [pc, #672]	; 240174fc <__kernel_rem_pio2f+0x30c>
2401725c:	4627      	mov	r7, r4
2401725e:	2600      	movs	r6, #0
24017260:	e016      	b.n	24017290 <__kernel_rem_pio2f+0xa0>
24017262:	2000      	movs	r0, #0
24017264:	e7dc      	b.n	24017220 <__kernel_rem_pio2f+0x30>
24017266:	42e7      	cmn	r7, r4
24017268:	bf5d      	ittte	pl
2401726a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
2401726e:	ee07 3a90 	vmovpl	s15, r3
24017272:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
24017276:	eef0 7a47 	vmovmi.f32	s15, s14
2401727a:	ece6 7a01 	vstmia	r6!, {s15}
2401727e:	3401      	adds	r4, #1
24017280:	e7dc      	b.n	2401723c <__kernel_rem_pio2f+0x4c>
24017282:	ecf9 6a01 	vldmia	r9!, {s13}
24017286:	ed97 7a00 	vldr	s14, [r7]
2401728a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401728e:	3601      	adds	r6, #1
24017290:	428e      	cmp	r6, r1
24017292:	f1a7 0704 	sub.w	r7, r7, #4
24017296:	ddf4      	ble.n	24017282 <__kernel_rem_pio2f+0x92>
24017298:	eceb 7a01 	vstmia	fp!, {s15}
2401729c:	f10c 0c01 	add.w	ip, ip, #1
240172a0:	3404      	adds	r4, #4
240172a2:	e7d5      	b.n	24017250 <__kernel_rem_pio2f+0x60>
240172a4:	ab08      	add	r3, sp, #32
240172a6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
240172aa:	eddf 8a93 	vldr	s17, [pc, #588]	; 240174f8 <__kernel_rem_pio2f+0x308>
240172ae:	ed9f 9a91 	vldr	s18, [pc, #580]	; 240174f4 <__kernel_rem_pio2f+0x304>
240172b2:	9304      	str	r3, [sp, #16]
240172b4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
240172b8:	4656      	mov	r6, sl
240172ba:	00b3      	lsls	r3, r6, #2
240172bc:	9305      	str	r3, [sp, #20]
240172be:	ab58      	add	r3, sp, #352	; 0x160
240172c0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
240172c4:	ac08      	add	r4, sp, #32
240172c6:	ab44      	add	r3, sp, #272	; 0x110
240172c8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
240172cc:	46a4      	mov	ip, r4
240172ce:	eb03 0086 	add.w	r0, r3, r6, lsl #2
240172d2:	4637      	mov	r7, r6
240172d4:	2f00      	cmp	r7, #0
240172d6:	f1a0 0004 	sub.w	r0, r0, #4
240172da:	dc4f      	bgt.n	2401737c <__kernel_rem_pio2f+0x18c>
240172dc:	4628      	mov	r0, r5
240172de:	e9cd 1206 	strd	r1, r2, [sp, #24]
240172e2:	f000 fd45 	bl	24017d70 <scalbnf>
240172e6:	eeb0 8a40 	vmov.f32	s16, s0
240172ea:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
240172ee:	ee28 0a00 	vmul.f32	s0, s16, s0
240172f2:	f000 fcf5 	bl	24017ce0 <floorf>
240172f6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
240172fa:	eea0 8a67 	vfms.f32	s16, s0, s15
240172fe:	2d00      	cmp	r5, #0
24017300:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
24017304:	eefd 7ac8 	vcvt.s32.f32	s15, s16
24017308:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
2401730c:	ee17 9a90 	vmov	r9, s15
24017310:	ee38 8a40 	vsub.f32	s16, s16, s0
24017314:	dd44      	ble.n	240173a0 <__kernel_rem_pio2f+0x1b0>
24017316:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401731a:	ab08      	add	r3, sp, #32
2401731c:	f1c5 0e08 	rsb	lr, r5, #8
24017320:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
24017324:	fa47 f00e 	asr.w	r0, r7, lr
24017328:	4481      	add	r9, r0
2401732a:	fa00 f00e 	lsl.w	r0, r0, lr
2401732e:	1a3f      	subs	r7, r7, r0
24017330:	f1c5 0007 	rsb	r0, r5, #7
24017334:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
24017338:	4107      	asrs	r7, r0
2401733a:	2f00      	cmp	r7, #0
2401733c:	dd3f      	ble.n	240173be <__kernel_rem_pio2f+0x1ce>
2401733e:	f04f 0e00 	mov.w	lr, #0
24017342:	f109 0901 	add.w	r9, r9, #1
24017346:	4673      	mov	r3, lr
24017348:	4576      	cmp	r6, lr
2401734a:	dc6b      	bgt.n	24017424 <__kernel_rem_pio2f+0x234>
2401734c:	2d00      	cmp	r5, #0
2401734e:	dd04      	ble.n	2401735a <__kernel_rem_pio2f+0x16a>
24017350:	2d01      	cmp	r5, #1
24017352:	d078      	beq.n	24017446 <__kernel_rem_pio2f+0x256>
24017354:	2d02      	cmp	r5, #2
24017356:	f000 8081 	beq.w	2401745c <__kernel_rem_pio2f+0x26c>
2401735a:	2f02      	cmp	r7, #2
2401735c:	d12f      	bne.n	240173be <__kernel_rem_pio2f+0x1ce>
2401735e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24017362:	ee30 8a48 	vsub.f32	s16, s0, s16
24017366:	b353      	cbz	r3, 240173be <__kernel_rem_pio2f+0x1ce>
24017368:	4628      	mov	r0, r5
2401736a:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401736e:	f000 fcff 	bl	24017d70 <scalbnf>
24017372:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
24017376:	ee38 8a40 	vsub.f32	s16, s16, s0
2401737a:	e020      	b.n	240173be <__kernel_rem_pio2f+0x1ce>
2401737c:	ee60 7a28 	vmul.f32	s15, s0, s17
24017380:	3f01      	subs	r7, #1
24017382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401738a:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401738e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017392:	ecac 0a01 	vstmia	ip!, {s0}
24017396:	ed90 0a00 	vldr	s0, [r0]
2401739a:	ee37 0a80 	vadd.f32	s0, s15, s0
2401739e:	e799      	b.n	240172d4 <__kernel_rem_pio2f+0xe4>
240173a0:	d105      	bne.n	240173ae <__kernel_rem_pio2f+0x1be>
240173a2:	1e70      	subs	r0, r6, #1
240173a4:	ab08      	add	r3, sp, #32
240173a6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
240173aa:	11ff      	asrs	r7, r7, #7
240173ac:	e7c5      	b.n	2401733a <__kernel_rem_pio2f+0x14a>
240173ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240173b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
240173b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240173ba:	da31      	bge.n	24017420 <__kernel_rem_pio2f+0x230>
240173bc:	2700      	movs	r7, #0
240173be:	eeb5 8a40 	vcmp.f32	s16, #0.0
240173c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240173c6:	f040 809b 	bne.w	24017500 <__kernel_rem_pio2f+0x310>
240173ca:	1e74      	subs	r4, r6, #1
240173cc:	46a4      	mov	ip, r4
240173ce:	2000      	movs	r0, #0
240173d0:	45d4      	cmp	ip, sl
240173d2:	da4a      	bge.n	2401746a <__kernel_rem_pio2f+0x27a>
240173d4:	2800      	cmp	r0, #0
240173d6:	d07a      	beq.n	240174ce <__kernel_rem_pio2f+0x2de>
240173d8:	ab08      	add	r3, sp, #32
240173da:	3d08      	subs	r5, #8
240173dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
240173e0:	2b00      	cmp	r3, #0
240173e2:	f000 8081 	beq.w	240174e8 <__kernel_rem_pio2f+0x2f8>
240173e6:	4628      	mov	r0, r5
240173e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240173ec:	00a5      	lsls	r5, r4, #2
240173ee:	f000 fcbf 	bl	24017d70 <scalbnf>
240173f2:	aa44      	add	r2, sp, #272	; 0x110
240173f4:	1d2b      	adds	r3, r5, #4
240173f6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 240174f8 <__kernel_rem_pio2f+0x308>
240173fa:	18d1      	adds	r1, r2, r3
240173fc:	4622      	mov	r2, r4
240173fe:	2a00      	cmp	r2, #0
24017400:	f280 80ae 	bge.w	24017560 <__kernel_rem_pio2f+0x370>
24017404:	4622      	mov	r2, r4
24017406:	2a00      	cmp	r2, #0
24017408:	f2c0 80cc 	blt.w	240175a4 <__kernel_rem_pio2f+0x3b4>
2401740c:	a944      	add	r1, sp, #272	; 0x110
2401740e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
24017412:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 240174f0 <__kernel_rem_pio2f+0x300>
24017416:	eddf 7a39 	vldr	s15, [pc, #228]	; 240174fc <__kernel_rem_pio2f+0x30c>
2401741a:	2000      	movs	r0, #0
2401741c:	1aa1      	subs	r1, r4, r2
2401741e:	e0b6      	b.n	2401758e <__kernel_rem_pio2f+0x39e>
24017420:	2702      	movs	r7, #2
24017422:	e78c      	b.n	2401733e <__kernel_rem_pio2f+0x14e>
24017424:	6820      	ldr	r0, [r4, #0]
24017426:	b94b      	cbnz	r3, 2401743c <__kernel_rem_pio2f+0x24c>
24017428:	b118      	cbz	r0, 24017432 <__kernel_rem_pio2f+0x242>
2401742a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401742e:	6020      	str	r0, [r4, #0]
24017430:	2001      	movs	r0, #1
24017432:	f10e 0e01 	add.w	lr, lr, #1
24017436:	3404      	adds	r4, #4
24017438:	4603      	mov	r3, r0
2401743a:	e785      	b.n	24017348 <__kernel_rem_pio2f+0x158>
2401743c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
24017440:	6020      	str	r0, [r4, #0]
24017442:	4618      	mov	r0, r3
24017444:	e7f5      	b.n	24017432 <__kernel_rem_pio2f+0x242>
24017446:	1e74      	subs	r4, r6, #1
24017448:	a808      	add	r0, sp, #32
2401744a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
2401744e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
24017452:	f10d 0c20 	add.w	ip, sp, #32
24017456:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
2401745a:	e77e      	b.n	2401735a <__kernel_rem_pio2f+0x16a>
2401745c:	1e74      	subs	r4, r6, #1
2401745e:	a808      	add	r0, sp, #32
24017460:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
24017464:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24017468:	e7f3      	b.n	24017452 <__kernel_rem_pio2f+0x262>
2401746a:	ab08      	add	r3, sp, #32
2401746c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24017470:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
24017474:	4318      	orrs	r0, r3
24017476:	e7ab      	b.n	240173d0 <__kernel_rem_pio2f+0x1e0>
24017478:	f10c 0c01 	add.w	ip, ip, #1
2401747c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
24017480:	2c00      	cmp	r4, #0
24017482:	d0f9      	beq.n	24017478 <__kernel_rem_pio2f+0x288>
24017484:	9b05      	ldr	r3, [sp, #20]
24017486:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401748a:	eb0d 0003 	add.w	r0, sp, r3
2401748e:	9b01      	ldr	r3, [sp, #4]
24017490:	18f4      	adds	r4, r6, r3
24017492:	ab1c      	add	r3, sp, #112	; 0x70
24017494:	1c77      	adds	r7, r6, #1
24017496:	384c      	subs	r0, #76	; 0x4c
24017498:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2401749c:	4466      	add	r6, ip
2401749e:	42be      	cmp	r6, r7
240174a0:	f6ff af0b 	blt.w	240172ba <__kernel_rem_pio2f+0xca>
240174a4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
240174a8:	f8dd e008 	ldr.w	lr, [sp, #8]
240174ac:	ee07 3a90 	vmov	s15, r3
240174b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240174b4:	f04f 0c00 	mov.w	ip, #0
240174b8:	ece4 7a01 	vstmia	r4!, {s15}
240174bc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 240174fc <__kernel_rem_pio2f+0x30c>
240174c0:	46a1      	mov	r9, r4
240174c2:	458c      	cmp	ip, r1
240174c4:	dd07      	ble.n	240174d6 <__kernel_rem_pio2f+0x2e6>
240174c6:	ece0 7a01 	vstmia	r0!, {s15}
240174ca:	3701      	adds	r7, #1
240174cc:	e7e7      	b.n	2401749e <__kernel_rem_pio2f+0x2ae>
240174ce:	9804      	ldr	r0, [sp, #16]
240174d0:	f04f 0c01 	mov.w	ip, #1
240174d4:	e7d2      	b.n	2401747c <__kernel_rem_pio2f+0x28c>
240174d6:	ecfe 6a01 	vldmia	lr!, {s13}
240174da:	ed39 7a01 	vldmdb	r9!, {s14}
240174de:	f10c 0c01 	add.w	ip, ip, #1
240174e2:	eee6 7a87 	vfma.f32	s15, s13, s14
240174e6:	e7ec      	b.n	240174c2 <__kernel_rem_pio2f+0x2d2>
240174e8:	3c01      	subs	r4, #1
240174ea:	e775      	b.n	240173d8 <__kernel_rem_pio2f+0x1e8>
240174ec:	2402d6dc 	.word	0x2402d6dc
240174f0:	2402d6b0 	.word	0x2402d6b0
240174f4:	43800000 	.word	0x43800000
240174f8:	3b800000 	.word	0x3b800000
240174fc:	00000000 	.word	0x00000000
24017500:	9b03      	ldr	r3, [sp, #12]
24017502:	eeb0 0a48 	vmov.f32	s0, s16
24017506:	1a98      	subs	r0, r3, r2
24017508:	f000 fc32 	bl	24017d70 <scalbnf>
2401750c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 240174f4 <__kernel_rem_pio2f+0x304>
24017510:	eeb4 0ac7 	vcmpe.f32	s0, s14
24017514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017518:	db19      	blt.n	2401754e <__kernel_rem_pio2f+0x35e>
2401751a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 240174f8 <__kernel_rem_pio2f+0x308>
2401751e:	ee60 7a27 	vmul.f32	s15, s0, s15
24017522:	aa08      	add	r2, sp, #32
24017524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017528:	1c74      	adds	r4, r6, #1
2401752a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401752e:	3508      	adds	r5, #8
24017530:	eea7 0ac7 	vfms.f32	s0, s15, s14
24017534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017538:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401753c:	ee10 3a10 	vmov	r3, s0
24017540:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24017544:	ee17 3a90 	vmov	r3, s15
24017548:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401754c:	e74b      	b.n	240173e6 <__kernel_rem_pio2f+0x1f6>
2401754e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24017552:	aa08      	add	r2, sp, #32
24017554:	ee10 3a10 	vmov	r3, s0
24017558:	4634      	mov	r4, r6
2401755a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401755e:	e742      	b.n	240173e6 <__kernel_rem_pio2f+0x1f6>
24017560:	a808      	add	r0, sp, #32
24017562:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
24017566:	9001      	str	r0, [sp, #4]
24017568:	ee07 0a90 	vmov	s15, r0
2401756c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017570:	3a01      	subs	r2, #1
24017572:	ee67 7a80 	vmul.f32	s15, s15, s0
24017576:	ee20 0a07 	vmul.f32	s0, s0, s14
2401757a:	ed61 7a01 	vstmdb	r1!, {s15}
2401757e:	e73e      	b.n	240173fe <__kernel_rem_pio2f+0x20e>
24017580:	ecfc 6a01 	vldmia	ip!, {s13}
24017584:	ecb6 7a01 	vldmia	r6!, {s14}
24017588:	eee6 7a87 	vfma.f32	s15, s13, s14
2401758c:	3001      	adds	r0, #1
2401758e:	4550      	cmp	r0, sl
24017590:	dc01      	bgt.n	24017596 <__kernel_rem_pio2f+0x3a6>
24017592:	4288      	cmp	r0, r1
24017594:	ddf4      	ble.n	24017580 <__kernel_rem_pio2f+0x390>
24017596:	a858      	add	r0, sp, #352	; 0x160
24017598:	eb00 0181 	add.w	r1, r0, r1, lsl #2
2401759c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
240175a0:	3a01      	subs	r2, #1
240175a2:	e730      	b.n	24017406 <__kernel_rem_pio2f+0x216>
240175a4:	9a66      	ldr	r2, [sp, #408]	; 0x198
240175a6:	2a02      	cmp	r2, #2
240175a8:	dc09      	bgt.n	240175be <__kernel_rem_pio2f+0x3ce>
240175aa:	2a00      	cmp	r2, #0
240175ac:	dc2a      	bgt.n	24017604 <__kernel_rem_pio2f+0x414>
240175ae:	d043      	beq.n	24017638 <__kernel_rem_pio2f+0x448>
240175b0:	f009 0007 	and.w	r0, r9, #7
240175b4:	b059      	add	sp, #356	; 0x164
240175b6:	ecbd 8b04 	vpop	{d8-d9}
240175ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240175be:	9b66      	ldr	r3, [sp, #408]	; 0x198
240175c0:	2b03      	cmp	r3, #3
240175c2:	d1f5      	bne.n	240175b0 <__kernel_rem_pio2f+0x3c0>
240175c4:	ab30      	add	r3, sp, #192	; 0xc0
240175c6:	442b      	add	r3, r5
240175c8:	461a      	mov	r2, r3
240175ca:	4619      	mov	r1, r3
240175cc:	4620      	mov	r0, r4
240175ce:	2800      	cmp	r0, #0
240175d0:	f1a1 0104 	sub.w	r1, r1, #4
240175d4:	dc51      	bgt.n	2401767a <__kernel_rem_pio2f+0x48a>
240175d6:	4621      	mov	r1, r4
240175d8:	2901      	cmp	r1, #1
240175da:	f1a2 0204 	sub.w	r2, r2, #4
240175de:	dc5c      	bgt.n	2401769a <__kernel_rem_pio2f+0x4aa>
240175e0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 240174fc <__kernel_rem_pio2f+0x30c>
240175e4:	3304      	adds	r3, #4
240175e6:	2c01      	cmp	r4, #1
240175e8:	dc67      	bgt.n	240176ba <__kernel_rem_pio2f+0x4ca>
240175ea:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
240175ee:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
240175f2:	2f00      	cmp	r7, #0
240175f4:	d167      	bne.n	240176c6 <__kernel_rem_pio2f+0x4d6>
240175f6:	edc8 6a00 	vstr	s13, [r8]
240175fa:	ed88 7a01 	vstr	s14, [r8, #4]
240175fe:	edc8 7a02 	vstr	s15, [r8, #8]
24017602:	e7d5      	b.n	240175b0 <__kernel_rem_pio2f+0x3c0>
24017604:	aa30      	add	r2, sp, #192	; 0xc0
24017606:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 240174fc <__kernel_rem_pio2f+0x30c>
2401760a:	4413      	add	r3, r2
2401760c:	4622      	mov	r2, r4
2401760e:	2a00      	cmp	r2, #0
24017610:	da24      	bge.n	2401765c <__kernel_rem_pio2f+0x46c>
24017612:	b34f      	cbz	r7, 24017668 <__kernel_rem_pio2f+0x478>
24017614:	eef1 7a47 	vneg.f32	s15, s14
24017618:	edc8 7a00 	vstr	s15, [r8]
2401761c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
24017620:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017624:	aa31      	add	r2, sp, #196	; 0xc4
24017626:	2301      	movs	r3, #1
24017628:	429c      	cmp	r4, r3
2401762a:	da20      	bge.n	2401766e <__kernel_rem_pio2f+0x47e>
2401762c:	b10f      	cbz	r7, 24017632 <__kernel_rem_pio2f+0x442>
2401762e:	eef1 7a67 	vneg.f32	s15, s15
24017632:	edc8 7a01 	vstr	s15, [r8, #4]
24017636:	e7bb      	b.n	240175b0 <__kernel_rem_pio2f+0x3c0>
24017638:	aa30      	add	r2, sp, #192	; 0xc0
2401763a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 240174fc <__kernel_rem_pio2f+0x30c>
2401763e:	4413      	add	r3, r2
24017640:	2c00      	cmp	r4, #0
24017642:	da05      	bge.n	24017650 <__kernel_rem_pio2f+0x460>
24017644:	b10f      	cbz	r7, 2401764a <__kernel_rem_pio2f+0x45a>
24017646:	eef1 7a67 	vneg.f32	s15, s15
2401764a:	edc8 7a00 	vstr	s15, [r8]
2401764e:	e7af      	b.n	240175b0 <__kernel_rem_pio2f+0x3c0>
24017650:	ed33 7a01 	vldmdb	r3!, {s14}
24017654:	3c01      	subs	r4, #1
24017656:	ee77 7a87 	vadd.f32	s15, s15, s14
2401765a:	e7f1      	b.n	24017640 <__kernel_rem_pio2f+0x450>
2401765c:	ed73 7a01 	vldmdb	r3!, {s15}
24017660:	3a01      	subs	r2, #1
24017662:	ee37 7a27 	vadd.f32	s14, s14, s15
24017666:	e7d2      	b.n	2401760e <__kernel_rem_pio2f+0x41e>
24017668:	eef0 7a47 	vmov.f32	s15, s14
2401766c:	e7d4      	b.n	24017618 <__kernel_rem_pio2f+0x428>
2401766e:	ecb2 7a01 	vldmia	r2!, {s14}
24017672:	3301      	adds	r3, #1
24017674:	ee77 7a87 	vadd.f32	s15, s15, s14
24017678:	e7d6      	b.n	24017628 <__kernel_rem_pio2f+0x438>
2401767a:	edd1 7a00 	vldr	s15, [r1]
2401767e:	edd1 6a01 	vldr	s13, [r1, #4]
24017682:	ee37 7aa6 	vadd.f32	s14, s15, s13
24017686:	3801      	subs	r0, #1
24017688:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401768c:	ed81 7a00 	vstr	s14, [r1]
24017690:	ee77 7aa6 	vadd.f32	s15, s15, s13
24017694:	edc1 7a01 	vstr	s15, [r1, #4]
24017698:	e799      	b.n	240175ce <__kernel_rem_pio2f+0x3de>
2401769a:	edd2 7a00 	vldr	s15, [r2]
2401769e:	edd2 6a01 	vldr	s13, [r2, #4]
240176a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
240176a6:	3901      	subs	r1, #1
240176a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
240176ac:	ed82 7a00 	vstr	s14, [r2]
240176b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
240176b4:	edc2 7a01 	vstr	s15, [r2, #4]
240176b8:	e78e      	b.n	240175d8 <__kernel_rem_pio2f+0x3e8>
240176ba:	ed33 7a01 	vldmdb	r3!, {s14}
240176be:	3c01      	subs	r4, #1
240176c0:	ee77 7a87 	vadd.f32	s15, s15, s14
240176c4:	e78f      	b.n	240175e6 <__kernel_rem_pio2f+0x3f6>
240176c6:	eef1 6a66 	vneg.f32	s13, s13
240176ca:	eeb1 7a47 	vneg.f32	s14, s14
240176ce:	edc8 6a00 	vstr	s13, [r8]
240176d2:	ed88 7a01 	vstr	s14, [r8, #4]
240176d6:	eef1 7a67 	vneg.f32	s15, s15
240176da:	e790      	b.n	240175fe <__kernel_rem_pio2f+0x40e>

240176dc <__kernel_tanf>:
240176dc:	b508      	push	{r3, lr}
240176de:	ee10 3a10 	vmov	r3, s0
240176e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240176e6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
240176ea:	eef0 7a40 	vmov.f32	s15, s0
240176ee:	da17      	bge.n	24017720 <__kernel_tanf+0x44>
240176f0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
240176f4:	ee17 1a10 	vmov	r1, s14
240176f8:	bb41      	cbnz	r1, 2401774c <__kernel_tanf+0x70>
240176fa:	1c43      	adds	r3, r0, #1
240176fc:	4313      	orrs	r3, r2
240176fe:	d108      	bne.n	24017712 <__kernel_tanf+0x36>
24017700:	f7fe fa3e 	bl	24015b80 <fabsf>
24017704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24017708:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401770c:	eeb0 0a67 	vmov.f32	s0, s15
24017710:	bd08      	pop	{r3, pc}
24017712:	2801      	cmp	r0, #1
24017714:	d0fa      	beq.n	2401770c <__kernel_tanf+0x30>
24017716:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401771a:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401771e:	e7f5      	b.n	2401770c <__kernel_tanf+0x30>
24017720:	494c      	ldr	r1, [pc, #304]	; (24017854 <__kernel_tanf+0x178>)
24017722:	428a      	cmp	r2, r1
24017724:	db12      	blt.n	2401774c <__kernel_tanf+0x70>
24017726:	2b00      	cmp	r3, #0
24017728:	bfb8      	it	lt
2401772a:	eef1 7a40 	vneglt.f32	s15, s0
2401772e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24017858 <__kernel_tanf+0x17c>
24017732:	ee70 7a67 	vsub.f32	s15, s0, s15
24017736:	ed9f 0a49 	vldr	s0, [pc, #292]	; 2401785c <__kernel_tanf+0x180>
2401773a:	bfb8      	it	lt
2401773c:	eef1 0a60 	vneglt.f32	s1, s1
24017740:	ee70 0a60 	vsub.f32	s1, s0, s1
24017744:	ee70 7aa7 	vadd.f32	s15, s1, s15
24017748:	eddf 0a45 	vldr	s1, [pc, #276]	; 24017860 <__kernel_tanf+0x184>
2401774c:	eddf 5a45 	vldr	s11, [pc, #276]	; 24017864 <__kernel_tanf+0x188>
24017750:	ed9f 6a45 	vldr	s12, [pc, #276]	; 24017868 <__kernel_tanf+0x18c>
24017754:	ed9f 5a45 	vldr	s10, [pc, #276]	; 2401786c <__kernel_tanf+0x190>
24017758:	493e      	ldr	r1, [pc, #248]	; (24017854 <__kernel_tanf+0x178>)
2401775a:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401775e:	428a      	cmp	r2, r1
24017760:	ee26 7aa6 	vmul.f32	s14, s13, s13
24017764:	eea7 6a25 	vfma.f32	s12, s14, s11
24017768:	eddf 5a41 	vldr	s11, [pc, #260]	; 24017870 <__kernel_tanf+0x194>
2401776c:	eee6 5a07 	vfma.f32	s11, s12, s14
24017770:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24017874 <__kernel_tanf+0x198>
24017774:	eea5 6a87 	vfma.f32	s12, s11, s14
24017778:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24017878 <__kernel_tanf+0x19c>
2401777c:	eee6 5a07 	vfma.f32	s11, s12, s14
24017780:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401787c <__kernel_tanf+0x1a0>
24017784:	eea5 6a87 	vfma.f32	s12, s11, s14
24017788:	eddf 5a3d 	vldr	s11, [pc, #244]	; 24017880 <__kernel_tanf+0x1a4>
2401778c:	eee7 5a05 	vfma.f32	s11, s14, s10
24017790:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 24017884 <__kernel_tanf+0x1a8>
24017794:	eea5 5a87 	vfma.f32	s10, s11, s14
24017798:	eddf 5a3b 	vldr	s11, [pc, #236]	; 24017888 <__kernel_tanf+0x1ac>
2401779c:	eee5 5a07 	vfma.f32	s11, s10, s14
240177a0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401788c <__kernel_tanf+0x1b0>
240177a4:	eea5 5a87 	vfma.f32	s10, s11, s14
240177a8:	eddf 5a39 	vldr	s11, [pc, #228]	; 24017890 <__kernel_tanf+0x1b4>
240177ac:	eee5 5a07 	vfma.f32	s11, s10, s14
240177b0:	eeb0 7a46 	vmov.f32	s14, s12
240177b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
240177b8:	ee27 5aa6 	vmul.f32	s10, s15, s13
240177bc:	eeb0 6a60 	vmov.f32	s12, s1
240177c0:	eea7 6a05 	vfma.f32	s12, s14, s10
240177c4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 24017894 <__kernel_tanf+0x1b8>
240177c8:	eee6 0a26 	vfma.f32	s1, s12, s13
240177cc:	eee5 0a07 	vfma.f32	s1, s10, s14
240177d0:	ee37 7aa0 	vadd.f32	s14, s15, s1
240177d4:	db1d      	blt.n	24017812 <__kernel_tanf+0x136>
240177d6:	ee06 0a90 	vmov	s13, r0
240177da:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
240177de:	ee27 6a07 	vmul.f32	s12, s14, s14
240177e2:	ee37 7a00 	vadd.f32	s14, s14, s0
240177e6:	179b      	asrs	r3, r3, #30
240177e8:	eec6 6a07 	vdiv.f32	s13, s12, s14
240177ec:	f003 0302 	and.w	r3, r3, #2
240177f0:	f1c3 0301 	rsb	r3, r3, #1
240177f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
240177f8:	ee76 0ae0 	vsub.f32	s1, s13, s1
240177fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
24017800:	eea7 0ac7 	vfms.f32	s0, s15, s14
24017804:	ee07 3a90 	vmov	s15, r3
24017808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401780c:	ee67 7a80 	vmul.f32	s15, s15, s0
24017810:	e77c      	b.n	2401770c <__kernel_tanf+0x30>
24017812:	2801      	cmp	r0, #1
24017814:	d01b      	beq.n	2401784e <__kernel_tanf+0x172>
24017816:	4b20      	ldr	r3, [pc, #128]	; (24017898 <__kernel_tanf+0x1bc>)
24017818:	ee17 2a10 	vmov	r2, s14
2401781c:	401a      	ands	r2, r3
2401781e:	ee06 2a10 	vmov	s12, r2
24017822:	ee76 7a67 	vsub.f32	s15, s12, s15
24017826:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401782a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401782e:	eec7 6a87 	vdiv.f32	s13, s15, s14
24017832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24017836:	ee16 2a90 	vmov	r2, s13
2401783a:	4013      	ands	r3, r2
2401783c:	ee07 3a90 	vmov	s15, r3
24017840:	eea6 7a27 	vfma.f32	s14, s12, s15
24017844:	eea0 7aa7 	vfma.f32	s14, s1, s15
24017848:	eee7 7a26 	vfma.f32	s15, s14, s13
2401784c:	e75e      	b.n	2401770c <__kernel_tanf+0x30>
2401784e:	eef0 7a47 	vmov.f32	s15, s14
24017852:	e75b      	b.n	2401770c <__kernel_tanf+0x30>
24017854:	3f2ca140 	.word	0x3f2ca140
24017858:	3f490fda 	.word	0x3f490fda
2401785c:	33222168 	.word	0x33222168
24017860:	00000000 	.word	0x00000000
24017864:	b79bae5f 	.word	0xb79bae5f
24017868:	38a3f445 	.word	0x38a3f445
2401786c:	37d95384 	.word	0x37d95384
24017870:	3a1a26c8 	.word	0x3a1a26c8
24017874:	3b6b6916 	.word	0x3b6b6916
24017878:	3cb327a4 	.word	0x3cb327a4
2401787c:	3e088889 	.word	0x3e088889
24017880:	3895c07a 	.word	0x3895c07a
24017884:	398137b9 	.word	0x398137b9
24017888:	3abede48 	.word	0x3abede48
2401788c:	3c11371f 	.word	0x3c11371f
24017890:	3d5d0dd1 	.word	0x3d5d0dd1
24017894:	3eaaaaab 	.word	0x3eaaaaab
24017898:	fffff000 	.word	0xfffff000

2401789c <fabs>:
2401789c:	ec51 0b10 	vmov	r0, r1, d0
240178a0:	ee10 2a10 	vmov	r2, s0
240178a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
240178a8:	ec43 2b10 	vmov	d0, r2, r3
240178ac:	4770      	bx	lr
	...

240178b0 <floor>:
240178b0:	ee10 1a90 	vmov	r1, s1
240178b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
240178b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
240178bc:	2b13      	cmp	r3, #19
240178be:	b530      	push	{r4, r5, lr}
240178c0:	ee10 0a10 	vmov	r0, s0
240178c4:	ee10 5a10 	vmov	r5, s0
240178c8:	dc31      	bgt.n	2401792e <floor+0x7e>
240178ca:	2b00      	cmp	r3, #0
240178cc:	da15      	bge.n	240178fa <floor+0x4a>
240178ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 24017988 <floor+0xd8>
240178d2:	ee30 0b07 	vadd.f64	d0, d0, d7
240178d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
240178da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240178de:	dd07      	ble.n	240178f0 <floor+0x40>
240178e0:	2900      	cmp	r1, #0
240178e2:	da4e      	bge.n	24017982 <floor+0xd2>
240178e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
240178e8:	4318      	orrs	r0, r3
240178ea:	d001      	beq.n	240178f0 <floor+0x40>
240178ec:	4928      	ldr	r1, [pc, #160]	; (24017990 <floor+0xe0>)
240178ee:	2000      	movs	r0, #0
240178f0:	460b      	mov	r3, r1
240178f2:	4602      	mov	r2, r0
240178f4:	ec43 2b10 	vmov	d0, r2, r3
240178f8:	e020      	b.n	2401793c <floor+0x8c>
240178fa:	4a26      	ldr	r2, [pc, #152]	; (24017994 <floor+0xe4>)
240178fc:	411a      	asrs	r2, r3
240178fe:	ea01 0402 	and.w	r4, r1, r2
24017902:	4304      	orrs	r4, r0
24017904:	d01a      	beq.n	2401793c <floor+0x8c>
24017906:	ed9f 7b20 	vldr	d7, [pc, #128]	; 24017988 <floor+0xd8>
2401790a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401790e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24017912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017916:	ddeb      	ble.n	240178f0 <floor+0x40>
24017918:	2900      	cmp	r1, #0
2401791a:	bfbe      	ittt	lt
2401791c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
24017920:	fa40 f303 	asrlt.w	r3, r0, r3
24017924:	18c9      	addlt	r1, r1, r3
24017926:	ea21 0102 	bic.w	r1, r1, r2
2401792a:	2000      	movs	r0, #0
2401792c:	e7e0      	b.n	240178f0 <floor+0x40>
2401792e:	2b33      	cmp	r3, #51	; 0x33
24017930:	dd05      	ble.n	2401793e <floor+0x8e>
24017932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24017936:	d101      	bne.n	2401793c <floor+0x8c>
24017938:	ee30 0b00 	vadd.f64	d0, d0, d0
2401793c:	bd30      	pop	{r4, r5, pc}
2401793e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
24017942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24017946:	40e2      	lsrs	r2, r4
24017948:	4202      	tst	r2, r0
2401794a:	d0f7      	beq.n	2401793c <floor+0x8c>
2401794c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 24017988 <floor+0xd8>
24017950:	ee30 0b07 	vadd.f64	d0, d0, d7
24017954:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24017958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401795c:	ddc8      	ble.n	240178f0 <floor+0x40>
2401795e:	2900      	cmp	r1, #0
24017960:	da02      	bge.n	24017968 <floor+0xb8>
24017962:	2b14      	cmp	r3, #20
24017964:	d103      	bne.n	2401796e <floor+0xbe>
24017966:	3101      	adds	r1, #1
24017968:	ea20 0002 	bic.w	r0, r0, r2
2401796c:	e7c0      	b.n	240178f0 <floor+0x40>
2401796e:	2401      	movs	r4, #1
24017970:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
24017974:	fa04 f303 	lsl.w	r3, r4, r3
24017978:	4418      	add	r0, r3
2401797a:	42a8      	cmp	r0, r5
2401797c:	bf38      	it	cc
2401797e:	1909      	addcc	r1, r1, r4
24017980:	e7f2      	b.n	24017968 <floor+0xb8>
24017982:	2000      	movs	r0, #0
24017984:	4601      	mov	r1, r0
24017986:	e7b3      	b.n	240178f0 <floor+0x40>
24017988:	8800759c 	.word	0x8800759c
2401798c:	7e37e43c 	.word	0x7e37e43c
24017990:	bff00000 	.word	0xbff00000
24017994:	000fffff 	.word	0x000fffff

24017998 <scalbn>:
24017998:	ee10 1a90 	vmov	r1, s1
2401799c:	b510      	push	{r4, lr}
2401799e:	f3c1 540a 	ubfx	r4, r1, #20, #11
240179a2:	b98c      	cbnz	r4, 240179c8 <scalbn+0x30>
240179a4:	ee10 3a10 	vmov	r3, s0
240179a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240179ac:	430b      	orrs	r3, r1
240179ae:	d011      	beq.n	240179d4 <scalbn+0x3c>
240179b0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 24017a78 <scalbn+0xe0>
240179b4:	4b3c      	ldr	r3, [pc, #240]	; (24017aa8 <scalbn+0x110>)
240179b6:	ee20 0b07 	vmul.f64	d0, d0, d7
240179ba:	4298      	cmp	r0, r3
240179bc:	da0b      	bge.n	240179d6 <scalbn+0x3e>
240179be:	ed9f 7b30 	vldr	d7, [pc, #192]	; 24017a80 <scalbn+0xe8>
240179c2:	ee20 0b07 	vmul.f64	d0, d0, d7
240179c6:	e005      	b.n	240179d4 <scalbn+0x3c>
240179c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
240179cc:	429c      	cmp	r4, r3
240179ce:	d107      	bne.n	240179e0 <scalbn+0x48>
240179d0:	ee30 0b00 	vadd.f64	d0, d0, d0
240179d4:	bd10      	pop	{r4, pc}
240179d6:	ee10 1a90 	vmov	r1, s1
240179da:	f3c1 540a 	ubfx	r4, r1, #20, #11
240179de:	3c36      	subs	r4, #54	; 0x36
240179e0:	4404      	add	r4, r0
240179e2:	f240 73fe 	movw	r3, #2046	; 0x7fe
240179e6:	429c      	cmp	r4, r3
240179e8:	dd0d      	ble.n	24017a06 <scalbn+0x6e>
240179ea:	ed9f 7b27 	vldr	d7, [pc, #156]	; 24017a88 <scalbn+0xf0>
240179ee:	ed9f 5b28 	vldr	d5, [pc, #160]	; 24017a90 <scalbn+0xf8>
240179f2:	eeb0 6b47 	vmov.f64	d6, d7
240179f6:	ee10 3a90 	vmov	r3, s1
240179fa:	2b00      	cmp	r3, #0
240179fc:	fe27 7b05 	vselge.f64	d7, d7, d5
24017a00:	ee27 0b06 	vmul.f64	d0, d7, d6
24017a04:	e7e6      	b.n	240179d4 <scalbn+0x3c>
24017a06:	2c00      	cmp	r4, #0
24017a08:	dd0a      	ble.n	24017a20 <scalbn+0x88>
24017a0a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24017a0e:	ec53 2b10 	vmov	r2, r3, d0
24017a12:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24017a16:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
24017a1a:	ec43 2b10 	vmov	d0, r2, r3
24017a1e:	e7d9      	b.n	240179d4 <scalbn+0x3c>
24017a20:	f114 0f35 	cmn.w	r4, #53	; 0x35
24017a24:	da19      	bge.n	24017a5a <scalbn+0xc2>
24017a26:	f24c 3350 	movw	r3, #50000	; 0xc350
24017a2a:	4298      	cmp	r0, r3
24017a2c:	ee10 3a90 	vmov	r3, s1
24017a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24017a34:	dd09      	ble.n	24017a4a <scalbn+0xb2>
24017a36:	ed9f 0b14 	vldr	d0, [pc, #80]	; 24017a88 <scalbn+0xf0>
24017a3a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 24017a90 <scalbn+0xf8>
24017a3e:	eeb0 7b40 	vmov.f64	d7, d0
24017a42:	2b00      	cmp	r3, #0
24017a44:	fe00 0b06 	vseleq.f64	d0, d0, d6
24017a48:	e7bb      	b.n	240179c2 <scalbn+0x2a>
24017a4a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 24017a80 <scalbn+0xe8>
24017a4e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 24017a98 <scalbn+0x100>
24017a52:	eeb0 7b40 	vmov.f64	d7, d0
24017a56:	2b00      	cmp	r3, #0
24017a58:	e7f4      	b.n	24017a44 <scalbn+0xac>
24017a5a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24017a5e:	ec53 2b10 	vmov	r2, r3, d0
24017a62:	3436      	adds	r4, #54	; 0x36
24017a64:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24017a68:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
24017a6c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 24017aa0 <scalbn+0x108>
24017a70:	ec43 2b10 	vmov	d0, r2, r3
24017a74:	e7a5      	b.n	240179c2 <scalbn+0x2a>
24017a76:	bf00      	nop
24017a78:	00000000 	.word	0x00000000
24017a7c:	43500000 	.word	0x43500000
24017a80:	c2f8f359 	.word	0xc2f8f359
24017a84:	01a56e1f 	.word	0x01a56e1f
24017a88:	8800759c 	.word	0x8800759c
24017a8c:	7e37e43c 	.word	0x7e37e43c
24017a90:	8800759c 	.word	0x8800759c
24017a94:	fe37e43c 	.word	0xfe37e43c
24017a98:	c2f8f359 	.word	0xc2f8f359
24017a9c:	81a56e1f 	.word	0x81a56e1f
24017aa0:	00000000 	.word	0x00000000
24017aa4:	3c900000 	.word	0x3c900000
24017aa8:	ffff3cb0 	.word	0xffff3cb0

24017aac <expm1f>:
24017aac:	ee10 2a10 	vmov	r2, s0
24017ab0:	497c      	ldr	r1, [pc, #496]	; (24017ca4 <expm1f+0x1f8>)
24017ab2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24017ab6:	428b      	cmp	r3, r1
24017ab8:	d920      	bls.n	24017afc <expm1f+0x50>
24017aba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24017abe:	d902      	bls.n	24017ac6 <expm1f+0x1a>
24017ac0:	ee30 0a00 	vadd.f32	s0, s0, s0
24017ac4:	4770      	bx	lr
24017ac6:	d105      	bne.n	24017ad4 <expm1f+0x28>
24017ac8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24017acc:	2a00      	cmp	r2, #0
24017ace:	fe20 0a27 	vselge.f32	s0, s0, s15
24017ad2:	4770      	bx	lr
24017ad4:	2a00      	cmp	r2, #0
24017ad6:	db05      	blt.n	24017ae4 <expm1f+0x38>
24017ad8:	4973      	ldr	r1, [pc, #460]	; (24017ca8 <expm1f+0x1fc>)
24017ada:	428b      	cmp	r3, r1
24017adc:	d95c      	bls.n	24017b98 <expm1f+0xec>
24017ade:	2000      	movs	r0, #0
24017ae0:	f7fd bf80 	b.w	240159e4 <__math_oflowf>
24017ae4:	eddf 7a71 	vldr	s15, [pc, #452]	; 24017cac <expm1f+0x200>
24017ae8:	ee70 7a27 	vadd.f32	s15, s0, s15
24017aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24017af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017af4:	d550      	bpl.n	24017b98 <expm1f+0xec>
24017af6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017afa:	4770      	bx	lr
24017afc:	496c      	ldr	r1, [pc, #432]	; (24017cb0 <expm1f+0x204>)
24017afe:	428b      	cmp	r3, r1
24017b00:	d966      	bls.n	24017bd0 <expm1f+0x124>
24017b02:	496c      	ldr	r1, [pc, #432]	; (24017cb4 <expm1f+0x208>)
24017b04:	428b      	cmp	r3, r1
24017b06:	d847      	bhi.n	24017b98 <expm1f+0xec>
24017b08:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 24017cb8 <expm1f+0x20c>
24017b0c:	2a00      	cmp	r2, #0
24017b0e:	bfa7      	ittee	ge
24017b10:	ee30 7a47 	vsubge.f32	s14, s0, s14
24017b14:	eddf 7a69 	vldrge	s15, [pc, #420]	; 24017cbc <expm1f+0x210>
24017b18:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 24017cc0 <expm1f+0x214>
24017b1c:	ee30 7a07 	vaddlt.f32	s14, s0, s14
24017b20:	bfac      	ite	ge
24017b22:	2301      	movge	r3, #1
24017b24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
24017b28:	ee37 0a67 	vsub.f32	s0, s14, s15
24017b2c:	ee37 7a40 	vsub.f32	s14, s14, s0
24017b30:	ee77 7a67 	vsub.f32	s15, s14, s15
24017b34:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24017b38:	ee20 4a25 	vmul.f32	s8, s0, s11
24017b3c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 24017cc4 <expm1f+0x218>
24017b40:	eddf 6a61 	vldr	s13, [pc, #388]	; 24017cc8 <expm1f+0x21c>
24017b44:	ed9f 5a61 	vldr	s10, [pc, #388]	; 24017ccc <expm1f+0x220>
24017b48:	ee20 7a04 	vmul.f32	s14, s0, s8
24017b4c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
24017b50:	eee7 6a06 	vfma.f32	s13, s14, s12
24017b54:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 24017cd0 <expm1f+0x224>
24017b58:	eea6 6a87 	vfma.f32	s12, s13, s14
24017b5c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 24017cd4 <expm1f+0x228>
24017b60:	eee6 6a07 	vfma.f32	s13, s12, s14
24017b64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24017b68:	eea6 5a87 	vfma.f32	s10, s13, s14
24017b6c:	eef0 6a46 	vmov.f32	s13, s12
24017b70:	eee5 6a07 	vfma.f32	s13, s10, s14
24017b74:	eee4 4a66 	vfms.f32	s9, s8, s13
24017b78:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
24017b7c:	eea0 4a64 	vfms.f32	s8, s0, s9
24017b80:	ee36 5ae4 	vsub.f32	s10, s13, s9
24017b84:	eec5 6a04 	vdiv.f32	s13, s10, s8
24017b88:	ee66 6a87 	vmul.f32	s13, s13, s14
24017b8c:	bb73      	cbnz	r3, 24017bec <expm1f+0x140>
24017b8e:	eef0 7a47 	vmov.f32	s15, s14
24017b92:	eed0 7a26 	vfnms.f32	s15, s0, s13
24017b96:	e024      	b.n	24017be2 <expm1f+0x136>
24017b98:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24017b9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017ba0:	2a00      	cmp	r2, #0
24017ba2:	fe67 7a87 	vselge.f32	s15, s15, s14
24017ba6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 24017cd8 <expm1f+0x22c>
24017baa:	eddf 6a43 	vldr	s13, [pc, #268]	; 24017cb8 <expm1f+0x20c>
24017bae:	ee40 7a07 	vmla.f32	s15, s0, s14
24017bb2:	eeb0 7a40 	vmov.f32	s14, s0
24017bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24017bba:	ee17 3a90 	vmov	r3, s15
24017bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017bc2:	eea7 7ae6 	vfms.f32	s14, s15, s13
24017bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24017cbc <expm1f+0x210>
24017bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
24017bce:	e7ab      	b.n	24017b28 <expm1f+0x7c>
24017bd0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24017bd4:	d208      	bcs.n	24017be8 <expm1f+0x13c>
24017bd6:	eddf 7a41 	vldr	s15, [pc, #260]	; 24017cdc <expm1f+0x230>
24017bda:	ee70 7a27 	vadd.f32	s15, s0, s15
24017bde:	ee77 7ae7 	vsub.f32	s15, s15, s15
24017be2:	ee30 0a67 	vsub.f32	s0, s0, s15
24017be6:	4770      	bx	lr
24017be8:	2300      	movs	r3, #0
24017bea:	e7a3      	b.n	24017b34 <expm1f+0x88>
24017bec:	ee76 6ae7 	vsub.f32	s13, s13, s15
24017bf0:	1c5a      	adds	r2, r3, #1
24017bf2:	eed6 7a80 	vfnms.f32	s15, s13, s0
24017bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017bfa:	d106      	bne.n	24017c0a <expm1f+0x15e>
24017bfc:	ee70 7a67 	vsub.f32	s15, s0, s15
24017c00:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24017c04:	eea7 0aa5 	vfma.f32	s0, s15, s11
24017c08:	4770      	bx	lr
24017c0a:	2b01      	cmp	r3, #1
24017c0c:	d118      	bne.n	24017c40 <expm1f+0x194>
24017c0e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
24017c12:	eeb4 0ac7 	vcmpe.f32	s0, s14
24017c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017c1a:	bf5b      	ittet	pl
24017c1c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
24017c20:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
24017c24:	ee30 0a25 	vaddmi.f32	s0, s0, s11
24017c28:	eea7 6a87 	vfmapl.f32	s12, s15, s14
24017c2c:	bf43      	ittte	mi
24017c2e:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
24017c32:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
24017c36:	ee27 0a80 	vmulmi.f32	s0, s15, s0
24017c3a:	eeb0 0a46 	vmovpl.f32	s0, s12
24017c3e:	4770      	bx	lr
24017c40:	1c5a      	adds	r2, r3, #1
24017c42:	2a39      	cmp	r2, #57	; 0x39
24017c44:	ea4f 51c3 	mov.w	r1, r3, lsl #23
24017c48:	d90b      	bls.n	24017c62 <expm1f+0x1b6>
24017c4a:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017c4e:	ee36 0a40 	vsub.f32	s0, s12, s0
24017c52:	ee10 3a10 	vmov	r3, s0
24017c56:	440b      	add	r3, r1
24017c58:	ee00 3a10 	vmov	s0, r3
24017c5c:	ee30 0a46 	vsub.f32	s0, s0, s12
24017c60:	4770      	bx	lr
24017c62:	2b16      	cmp	r3, #22
24017c64:	dc11      	bgt.n	24017c8a <expm1f+0x1de>
24017c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24017c6a:	fa42 f303 	asr.w	r3, r2, r3
24017c6e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
24017c72:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017c76:	ee07 3a90 	vmov	s15, r3
24017c7a:	ee37 0ac0 	vsub.f32	s0, s15, s0
24017c7e:	ee10 3a10 	vmov	r3, s0
24017c82:	440b      	add	r3, r1
24017c84:	ee00 3a10 	vmov	s0, r3
24017c88:	4770      	bx	lr
24017c8a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
24017c8e:	05db      	lsls	r3, r3, #23
24017c90:	ee07 3a10 	vmov	s14, r3
24017c94:	ee77 7a87 	vadd.f32	s15, s15, s14
24017c98:	ee70 7a67 	vsub.f32	s15, s0, s15
24017c9c:	ee37 0a86 	vadd.f32	s0, s15, s12
24017ca0:	e7ed      	b.n	24017c7e <expm1f+0x1d2>
24017ca2:	bf00      	nop
24017ca4:	4195b843 	.word	0x4195b843
24017ca8:	42b17217 	.word	0x42b17217
24017cac:	0da24260 	.word	0x0da24260
24017cb0:	3eb17218 	.word	0x3eb17218
24017cb4:	3f851591 	.word	0x3f851591
24017cb8:	3f317180 	.word	0x3f317180
24017cbc:	3717f7d1 	.word	0x3717f7d1
24017cc0:	b717f7d1 	.word	0xb717f7d1
24017cc4:	b457edbb 	.word	0xb457edbb
24017cc8:	36867e54 	.word	0x36867e54
24017ccc:	bd088889 	.word	0xbd088889
24017cd0:	b8a670cd 	.word	0xb8a670cd
24017cd4:	3ad00d01 	.word	0x3ad00d01
24017cd8:	3fb8aa3b 	.word	0x3fb8aa3b
24017cdc:	7149f2ca 	.word	0x7149f2ca

24017ce0 <floorf>:
24017ce0:	ee10 3a10 	vmov	r3, s0
24017ce4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24017ce8:	3a7f      	subs	r2, #127	; 0x7f
24017cea:	2a16      	cmp	r2, #22
24017cec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24017cf0:	dc2a      	bgt.n	24017d48 <floorf+0x68>
24017cf2:	2a00      	cmp	r2, #0
24017cf4:	da11      	bge.n	24017d1a <floorf+0x3a>
24017cf6:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017d58 <floorf+0x78>
24017cfa:	ee30 0a27 	vadd.f32	s0, s0, s15
24017cfe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017d06:	dd05      	ble.n	24017d14 <floorf+0x34>
24017d08:	2b00      	cmp	r3, #0
24017d0a:	da23      	bge.n	24017d54 <floorf+0x74>
24017d0c:	4a13      	ldr	r2, [pc, #76]	; (24017d5c <floorf+0x7c>)
24017d0e:	2900      	cmp	r1, #0
24017d10:	bf18      	it	ne
24017d12:	4613      	movne	r3, r2
24017d14:	ee00 3a10 	vmov	s0, r3
24017d18:	4770      	bx	lr
24017d1a:	4911      	ldr	r1, [pc, #68]	; (24017d60 <floorf+0x80>)
24017d1c:	4111      	asrs	r1, r2
24017d1e:	420b      	tst	r3, r1
24017d20:	d0fa      	beq.n	24017d18 <floorf+0x38>
24017d22:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24017d58 <floorf+0x78>
24017d26:	ee30 0a27 	vadd.f32	s0, s0, s15
24017d2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017d32:	ddef      	ble.n	24017d14 <floorf+0x34>
24017d34:	2b00      	cmp	r3, #0
24017d36:	bfbe      	ittt	lt
24017d38:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24017d3c:	fa40 f202 	asrlt.w	r2, r0, r2
24017d40:	189b      	addlt	r3, r3, r2
24017d42:	ea23 0301 	bic.w	r3, r3, r1
24017d46:	e7e5      	b.n	24017d14 <floorf+0x34>
24017d48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
24017d4c:	d3e4      	bcc.n	24017d18 <floorf+0x38>
24017d4e:	ee30 0a00 	vadd.f32	s0, s0, s0
24017d52:	4770      	bx	lr
24017d54:	2300      	movs	r3, #0
24017d56:	e7dd      	b.n	24017d14 <floorf+0x34>
24017d58:	7149f2ca 	.word	0x7149f2ca
24017d5c:	bf800000 	.word	0xbf800000
24017d60:	007fffff 	.word	0x007fffff

24017d64 <nanf>:
24017d64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24017d6c <nanf+0x8>
24017d68:	4770      	bx	lr
24017d6a:	bf00      	nop
24017d6c:	7fc00000 	.word	0x7fc00000

24017d70 <scalbnf>:
24017d70:	ee10 3a10 	vmov	r3, s0
24017d74:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24017d78:	d024      	beq.n	24017dc4 <scalbnf+0x54>
24017d7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24017d7e:	d302      	bcc.n	24017d86 <scalbnf+0x16>
24017d80:	ee30 0a00 	vadd.f32	s0, s0, s0
24017d84:	4770      	bx	lr
24017d86:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24017d8a:	d121      	bne.n	24017dd0 <scalbnf+0x60>
24017d8c:	4b29      	ldr	r3, [pc, #164]	; (24017e34 <scalbnf+0xc4>)
24017d8e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24017e38 <scalbnf+0xc8>
24017d92:	4298      	cmp	r0, r3
24017d94:	ee20 0a27 	vmul.f32	s0, s0, s15
24017d98:	db15      	blt.n	24017dc6 <scalbnf+0x56>
24017d9a:	ee10 3a10 	vmov	r3, s0
24017d9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24017da2:	3a19      	subs	r2, #25
24017da4:	4402      	add	r2, r0
24017da6:	2afe      	cmp	r2, #254	; 0xfe
24017da8:	dd14      	ble.n	24017dd4 <scalbnf+0x64>
24017daa:	eddf 7a24 	vldr	s15, [pc, #144]	; 24017e3c <scalbnf+0xcc>
24017dae:	eddf 6a24 	vldr	s13, [pc, #144]	; 24017e40 <scalbnf+0xd0>
24017db2:	ee10 3a10 	vmov	r3, s0
24017db6:	eeb0 7a67 	vmov.f32	s14, s15
24017dba:	2b00      	cmp	r3, #0
24017dbc:	fe67 7aa6 	vselge.f32	s15, s15, s13
24017dc0:	ee27 0a27 	vmul.f32	s0, s14, s15
24017dc4:	4770      	bx	lr
24017dc6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24017e44 <scalbnf+0xd4>
24017dca:	ee20 0a27 	vmul.f32	s0, s0, s15
24017dce:	4770      	bx	lr
24017dd0:	0dd2      	lsrs	r2, r2, #23
24017dd2:	e7e7      	b.n	24017da4 <scalbnf+0x34>
24017dd4:	2a00      	cmp	r2, #0
24017dd6:	dd06      	ble.n	24017de6 <scalbnf+0x76>
24017dd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017ddc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24017de0:	ee00 3a10 	vmov	s0, r3
24017de4:	4770      	bx	lr
24017de6:	f112 0f16 	cmn.w	r2, #22
24017dea:	da19      	bge.n	24017e20 <scalbnf+0xb0>
24017dec:	f24c 3350 	movw	r3, #50000	; 0xc350
24017df0:	4298      	cmp	r0, r3
24017df2:	ee10 3a10 	vmov	r3, s0
24017df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24017dfa:	dd09      	ble.n	24017e10 <scalbnf+0xa0>
24017dfc:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 24017e3c <scalbnf+0xcc>
24017e00:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24017e40 <scalbnf+0xd0>
24017e04:	eef0 7a40 	vmov.f32	s15, s0
24017e08:	2b00      	cmp	r3, #0
24017e0a:	fe00 0a07 	vseleq.f32	s0, s0, s14
24017e0e:	e7dc      	b.n	24017dca <scalbnf+0x5a>
24017e10:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24017e44 <scalbnf+0xd4>
24017e14:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24017e48 <scalbnf+0xd8>
24017e18:	eef0 7a40 	vmov.f32	s15, s0
24017e1c:	2b00      	cmp	r3, #0
24017e1e:	e7f4      	b.n	24017e0a <scalbnf+0x9a>
24017e20:	3219      	adds	r2, #25
24017e22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017e26:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
24017e2a:	eddf 7a08 	vldr	s15, [pc, #32]	; 24017e4c <scalbnf+0xdc>
24017e2e:	ee07 3a10 	vmov	s14, r3
24017e32:	e7c5      	b.n	24017dc0 <scalbnf+0x50>
24017e34:	ffff3cb0 	.word	0xffff3cb0
24017e38:	4c000000 	.word	0x4c000000
24017e3c:	7149f2ca 	.word	0x7149f2ca
24017e40:	f149f2ca 	.word	0xf149f2ca
24017e44:	0da24260 	.word	0x0da24260
24017e48:	8da24260 	.word	0x8da24260
24017e4c:	33000000 	.word	0x33000000
24017e50:	62652e2a 	.word	0x62652e2a
24017e54:	00000070 	.word	0x00000070
24017e58:	53594850 	.word	0x53594850
24017e5c:	52545320 	.word	0x52545320
24017e60:	20202031 	.word	0x20202031
24017e64:	00002020 	.word	0x00002020
24017e68:	67726154 	.word	0x67726154
24017e6c:	654c7465 	.word	0x654c7465
24017e70:	20202076 	.word	0x20202076
24017e74:	00002020 	.word	0x00002020
24017e78:	5376654c 	.word	0x5376654c
24017e7c:	746f6f6d 	.word	0x746f6f6d
24017e80:	20202068 	.word	0x20202068
24017e84:	00002020 	.word	0x00002020
24017e88:	5376654c 	.word	0x5376654c
24017e8c:	6e657274 	.word	0x6e657274
24017e90:	20207467 	.word	0x20207467
24017e94:	00002020 	.word	0x00002020
24017e98:	4d76654c 	.word	0x4d76654c
24017e9c:	2065646f 	.word	0x2065646f
24017ea0:	20202020 	.word	0x20202020
24017ea4:	00002020 	.word	0x00002020
24017ea8:	20202020 	.word	0x20202020
24017eac:	20202020 	.word	0x20202020
24017eb0:	20202020 	.word	0x20202020
24017eb4:	00002020 	.word	0x00002020
24017eb8:	53594850 	.word	0x53594850
24017ebc:	52545320 	.word	0x52545320
24017ec0:	20202032 	.word	0x20202032
24017ec4:	00002020 	.word	0x00002020
24017ec8:	654c4246 	.word	0x654c4246
24017ecc:	6e4f2076 	.word	0x6e4f2076
24017ed0:	20202020 	.word	0x20202020
24017ed4:	00002020 	.word	0x00002020
24017ed8:	6b636950 	.word	0x6b636950
24017edc:	20736f50 	.word	0x20736f50
24017ee0:	20202020 	.word	0x20202020
24017ee4:	00002020 	.word	0x00002020
24017ee8:	61636544 	.word	0x61636544
24017eec:	20202079 	.word	0x20202079
24017ef0:	20202020 	.word	0x20202020
24017ef4:	00002020 	.word	0x00002020
24017ef8:	63756f54 	.word	0x63756f54
24017efc:	20202068 	.word	0x20202068
24017f00:	20202020 	.word	0x20202020
24017f04:	00002020 	.word	0x00002020
24017f08:	73696f4e 	.word	0x73696f4e
24017f0c:	20203165 	.word	0x20203165
24017f10:	20202020 	.word	0x20202020
24017f14:	00002020 	.word	0x00002020
24017f18:	73696f4e 	.word	0x73696f4e
24017f1c:	20203265 	.word	0x20203265
24017f20:	20202020 	.word	0x20202020
24017f24:	00002020 	.word	0x00002020
24017f28:	49444441 	.word	0x49444441
24017f2c:	45564954 	.word	0x45564954
24017f30:	20202020 	.word	0x20202020
24017f34:	00002020 	.word	0x00002020
24017f38:	656e6f54 	.word	0x656e6f54
24017f3c:	20202020 	.word	0x20202020
24017f40:	20202020 	.word	0x20202020
24017f44:	00002020 	.word	0x00002020
24017f48:	65727453 	.word	0x65727453
24017f4c:	20686374 	.word	0x20686374
24017f50:	20202020 	.word	0x20202020
24017f54:	00002020 	.word	0x00002020
24017f58:	646e6152 	.word	0x646e6152
24017f5c:	79636544 	.word	0x79636544
24017f60:	20202020 	.word	0x20202020
24017f64:	00002020 	.word	0x00002020
24017f68:	646e6152 	.word	0x646e6152
24017f6c:	6e696147 	.word	0x6e696147
24017f70:	20202020 	.word	0x20202020
24017f74:	00002020 	.word	0x00002020
24017f78:	73696f4e 	.word	0x73696f4e
24017f7c:	6c6f5665 	.word	0x6c6f5665
24017f80:	20202020 	.word	0x20202020
24017f84:	00002020 	.word	0x00002020
24017f88:	7062652e 	.word	0x7062652e
24017f8c:	00000000 	.word	0x00000000
24017f90:	69617262 	.word	0x69617262
24017f94:	69622e6e 	.word	0x69622e6e
24017f98:	0000006e 	.word	0x0000006e
24017f9c:	63756c70 	.word	0x63756c70
24017fa0:	69622e6b 	.word	0x69622e6b
24017fa4:	0000006e 	.word	0x0000006e

24017fa8 <D1CorePrescTable>:
24017fa8:	00000000 04030201 04030201 09080706     ................

24017fb8 <flagBitshiftOffset.0>:
24017fb8:	16100600 16100600                       ........

24017fc0 <SD_Driver>:
24017fc0:	2400cb4d 2400cb7d 2400cb9d 2400cc2d     M..$}..$...$-..$
24017fd0:	2400cbc5 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
24017fe0:	3d3b2c2b 00005d5b                       +,;=[]..

24017fe8 <ExCvt>:
24017fe8:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
24017ff8:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
24018008:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
24018018:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
24018028:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
24018038:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
24018048:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
24018058:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

24018068 <LfnOfs>:
24018068:	07050301 12100e09 1c181614 0000001e     ................

24018078 <Tbl>:
24018078:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
24018088:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
24018098:	00e600c9 00f400c6 00f200f6 00f900fb     ................
240180a8:	00d600ff 00f800dc 00d800a3 019200d7     ................
240180b8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
240180c8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
240180d8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
240180e8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
240180f8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
24018108:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
24018118:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
24018128:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
24018138:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
24018148:	00da00de 00d900db 00dd00fd 00b400af     ................
24018158:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
24018168:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

24018178 <cvt1.1>:
24018178:	031a0061 031700e0 030700f8 000100ff     a...............
24018188:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
24018198:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
240181a8:	01840182 01860184 01870187 018a0189     ................
240181b8:	018b018b 018e018d 0190018f 01910191     ................
240181c8:	01940193 019601f6 01980197 023d0198     ..............=.
240181d8:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
240181e8:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
240181f8:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
24018208:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
24018218:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
24018228:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
24018238:	01ca01cb 011001cd 000101dd 01de018e     ................
24018248:	01f30112 01f10003 01f401f4 012801f8     ..............(.
24018258:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
24018268:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
24018278:	01810040 02550186 018a0189 018f0258     @.....U.....X...
24018288:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
24018298:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
240182a8:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
240182b8:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
240182c8:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
240182d8:	01a90282 02850284 02870286 024401ae     ..............D.
240182e8:	01b201b1 028d0245 028f028e 02910290     ....E...........
240182f8:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
24018308:	03880386 038a0389 031103b1 000203c2     ................
24018318:	03a303a3 030803c4 000303cc 038e038c     ................
24018328:	03d8038f 03f20118 03f9000a 03f403f3     ................
24018338:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
24018348:	04500320 04600710 048a0122 04c10136      .P...`."...6...
24018358:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
24018368:	00000000                                ....

2401836c <cvt2.0>:
2401836c:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401837c:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401838c:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401839c:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
240183ac:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
240183bc:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
240183cc:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
240183dc:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
240183ec:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
240183fc:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401840c:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401841c:	2d000164 ff410826 0000031a              d..-&.A.....

24018428 <__leaf_table_filtertan>:
24018428:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
24018438:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
24018448:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
24018458:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
24018468:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
24018478:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
24018488:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
24018498:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
240184a8:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
240184b8:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
240184c8:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
240184d8:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
240184e8:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
240184f8:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
24018508:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
24018518:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
24018528:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
24018538:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
24018548:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
24018558:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
24018568:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
24018578:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
24018588:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
24018598:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
240185a8:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
240185b8:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
240185c8:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
240185d8:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
240185e8:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
240185f8:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
24018608:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
24018618:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
24018628:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
24018638:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
24018648:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
24018658:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
24018668:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
24018678:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
24018688:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
24018698:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
240186a8:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
240186b8:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
240186c8:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
240186d8:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
240186e8:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
240186f8:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
24018708:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
24018718:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
24018728:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
24018738:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
24018748:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
24018758:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
24018768:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
24018778:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
24018788:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
24018798:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
240187a8:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
240187b8:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
240187c8:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
240187d8:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
240187e8:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
240187f8:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
24018808:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
24018818:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
24018828:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
24018838:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
24018848:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
24018858:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
24018868:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
24018878:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
24018888:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
24018898:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
240188a8:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
240188b8:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
240188c8:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
240188d8:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
240188e8:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
240188f8:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
24018908:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
24018918:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
24018928:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
24018938:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
24018948:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
24018958:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
24018968:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
24018978:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
24018988:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
24018998:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
240189a8:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
240189b8:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
240189c8:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
240189d8:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
240189e8:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
240189f8:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
24018a08:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
24018a18:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
24018a28:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
24018a38:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
24018a48:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
24018a58:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
24018a68:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
24018a78:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
24018a88:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
24018a98:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
24018aa8:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
24018ab8:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
24018ac8:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
24018ad8:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
24018ae8:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
24018af8:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
24018b08:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
24018b18:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
24018b28:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
24018b38:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
24018b48:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
24018b58:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
24018b68:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
24018b78:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
24018b88:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
24018b98:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
24018ba8:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
24018bb8:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
24018bc8:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
24018bd8:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
24018be8:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
24018bf8:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
24018c08:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
24018c18:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
24018c28:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
24018c38:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
24018c48:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
24018c58:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
24018c68:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
24018c78:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
24018c88:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
24018c98:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
24018ca8:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
24018cb8:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
24018cc8:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
24018cd8:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
24018ce8:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
24018cf8:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
24018d08:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
24018d18:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
24018d28:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
24018d38:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
24018d48:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
24018d58:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
24018d68:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
24018d78:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
24018d88:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
24018d98:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
24018da8:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
24018db8:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
24018dc8:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
24018dd8:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
24018de8:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
24018df8:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
24018e08:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
24018e18:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
24018e28:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
24018e38:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
24018e48:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
24018e58:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
24018e68:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
24018e78:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
24018e88:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
24018e98:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
24018ea8:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
24018eb8:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
24018ec8:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
24018ed8:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
24018ee8:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
24018ef8:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
24018f08:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
24018f18:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
24018f28:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
24018f38:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
24018f48:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
24018f58:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
24018f68:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
24018f78:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
24018f88:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
24018f98:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
24018fa8:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
24018fb8:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
24018fc8:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
24018fd8:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
24018fe8:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
24018ff8:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
24019008:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
24019018:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
24019028:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
24019038:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
24019048:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
24019058:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
24019068:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
24019078:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
24019088:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
24019098:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
240190a8:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
240190b8:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
240190c8:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
240190d8:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
240190e8:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
240190f8:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
24019108:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
24019118:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
24019128:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
24019138:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
24019148:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
24019158:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
24019168:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
24019178:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
24019188:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
24019198:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
240191a8:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
240191b8:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
240191c8:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
240191d8:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
240191e8:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
240191f8:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
24019208:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
24019218:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
24019228:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
24019238:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
24019248:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
24019258:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
24019268:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
24019278:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
24019288:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
24019298:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
240192a8:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
240192b8:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
240192c8:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
240192d8:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
240192e8:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
240192f8:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
24019308:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
24019318:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
24019328:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
24019338:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
24019348:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
24019358:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
24019368:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
24019378:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
24019388:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
24019398:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
240193a8:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
240193b8:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
240193c8:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
240193d8:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
240193e8:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
240193f8:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
24019408:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
24019418:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
24019428:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
24019438:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
24019448:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
24019458:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
24019468:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
24019478:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
24019488:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
24019498:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
240194a8:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
240194b8:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
240194c8:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
240194d8:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
240194e8:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
240194f8:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
24019508:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
24019518:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
24019528:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
24019538:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
24019548:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
24019558:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
24019568:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
24019578:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
24019588:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
24019598:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
240195a8:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
240195b8:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
240195c8:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
240195d8:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
240195e8:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
240195f8:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
24019608:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
24019618:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
24019628:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
24019638:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
24019648:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
24019658:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
24019668:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
24019678:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
24019688:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
24019698:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
240196a8:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
240196b8:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
240196c8:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
240196d8:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
240196e8:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
240196f8:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
24019708:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
24019718:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
24019728:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
24019738:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
24019748:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
24019758:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
24019768:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
24019778:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
24019788:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
24019798:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
240197a8:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
240197b8:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
240197c8:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
240197d8:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
240197e8:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
240197f8:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
24019808:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
24019818:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
24019828:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
24019838:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
24019848:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
24019858:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
24019868:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
24019878:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
24019888:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
24019898:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
240198a8:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
240198b8:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
240198c8:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
240198d8:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
240198e8:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
240198f8:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
24019908:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
24019918:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
24019928:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
24019938:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
24019948:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
24019958:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
24019968:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
24019978:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
24019988:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
24019998:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
240199a8:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
240199b8:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
240199c8:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
240199d8:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
240199e8:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
240199f8:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
24019a08:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
24019a18:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
24019a28:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
24019a38:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
24019a48:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
24019a58:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
24019a68:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
24019a78:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
24019a88:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
24019a98:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
24019aa8:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
24019ab8:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
24019ac8:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
24019ad8:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
24019ae8:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
24019af8:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
24019b08:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
24019b18:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
24019b28:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
24019b38:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
24019b48:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
24019b58:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
24019b68:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
24019b78:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
24019b88:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
24019b98:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
24019ba8:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
24019bb8:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
24019bc8:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
24019bd8:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
24019be8:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
24019bf8:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
24019c08:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
24019c18:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
24019c28:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
24019c38:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
24019c48:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
24019c58:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
24019c68:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
24019c78:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
24019c88:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
24019c98:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
24019ca8:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
24019cb8:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
24019cc8:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
24019cd8:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
24019ce8:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
24019cf8:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
24019d08:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
24019d18:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
24019d28:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
24019d38:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
24019d48:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
24019d58:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
24019d68:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
24019d78:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
24019d88:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
24019d98:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
24019da8:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
24019db8:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
24019dc8:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
24019dd8:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
24019de8:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
24019df8:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
24019e08:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
24019e18:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
24019e28:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
24019e38:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
24019e48:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
24019e58:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
24019e68:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
24019e78:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
24019e88:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
24019e98:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
24019ea8:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
24019eb8:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
24019ec8:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
24019ed8:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
24019ee8:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
24019ef8:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
24019f08:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
24019f18:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
24019f28:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
24019f38:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
24019f48:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
24019f58:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
24019f68:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
24019f78:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
24019f88:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
24019f98:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
24019fa8:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
24019fb8:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
24019fc8:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
24019fd8:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
24019fe8:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
24019ff8:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
2401a008:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
2401a018:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
2401a028:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
2401a038:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
2401a048:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
2401a058:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
2401a068:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
2401a078:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
2401a088:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
2401a098:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
2401a0a8:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
2401a0b8:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
2401a0c8:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
2401a0d8:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
2401a0e8:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
2401a0f8:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
2401a108:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
2401a118:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
2401a128:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
2401a138:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
2401a148:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
2401a158:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
2401a168:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
2401a178:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
2401a188:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
2401a198:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
2401a1a8:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
2401a1b8:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
2401a1c8:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
2401a1d8:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
2401a1e8:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
2401a1f8:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
2401a208:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
2401a218:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
2401a228:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
2401a238:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
2401a248:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
2401a258:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
2401a268:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
2401a278:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
2401a288:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
2401a298:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
2401a2a8:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
2401a2b8:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
2401a2c8:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
2401a2d8:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
2401a2e8:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
2401a2f8:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
2401a308:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
2401a318:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
2401a328:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
2401a338:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
2401a348:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
2401a358:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
2401a368:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
2401a378:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
2401a388:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
2401a398:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
2401a3a8:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
2401a3b8:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
2401a3c8:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
2401a3d8:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
2401a3e8:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
2401a3f8:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
2401a408:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
2401a418:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
2401a428:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
2401a438:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
2401a448:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
2401a458:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
2401a468:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
2401a478:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
2401a488:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
2401a498:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
2401a4a8:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
2401a4b8:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
2401a4c8:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
2401a4d8:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
2401a4e8:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
2401a4f8:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
2401a508:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
2401a518:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
2401a528:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
2401a538:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
2401a548:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
2401a558:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
2401a568:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
2401a578:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
2401a588:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
2401a598:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
2401a5a8:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
2401a5b8:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
2401a5c8:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
2401a5d8:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
2401a5e8:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
2401a5f8:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
2401a608:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
2401a618:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
2401a628:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
2401a638:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
2401a648:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
2401a658:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
2401a668:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
2401a678:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
2401a688:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
2401a698:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
2401a6a8:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
2401a6b8:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
2401a6c8:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
2401a6d8:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
2401a6e8:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
2401a6f8:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
2401a708:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
2401a718:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
2401a728:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
2401a738:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
2401a748:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
2401a758:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
2401a768:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
2401a778:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
2401a788:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
2401a798:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
2401a7a8:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
2401a7b8:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
2401a7c8:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
2401a7d8:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
2401a7e8:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
2401a7f8:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
2401a808:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
2401a818:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
2401a828:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
2401a838:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
2401a848:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
2401a858:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
2401a868:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
2401a878:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
2401a888:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
2401a898:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
2401a8a8:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
2401a8b8:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
2401a8c8:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
2401a8d8:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
2401a8e8:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
2401a8f8:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
2401a908:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
2401a918:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
2401a928:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
2401a938:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
2401a948:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
2401a958:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
2401a968:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
2401a978:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
2401a988:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
2401a998:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
2401a9a8:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
2401a9b8:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
2401a9c8:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
2401a9d8:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
2401a9e8:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
2401a9f8:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
2401aa08:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
2401aa18:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
2401aa28:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
2401aa38:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
2401aa48:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
2401aa58:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
2401aa68:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
2401aa78:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
2401aa88:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
2401aa98:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
2401aaa8:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
2401aab8:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
2401aac8:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
2401aad8:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401aae8:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401aaf8:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401ab08:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401ab18:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401ab28:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401ab38:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401ab48:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401ab58:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401ab68:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401ab78:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401ab88:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401ab98:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401aba8:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401abb8:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401abc8:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401abd8:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401abe8:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401abf8:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401ac08:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401ac18:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401ac28:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401ac38:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401ac48:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401ac58:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401ac68:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401ac78:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401ac88:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401ac98:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401aca8:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401acb8:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401acc8:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401acd8:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401ace8:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401acf8:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401ad08:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401ad18:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401ad28:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401ad38:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401ad48:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401ad58:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401ad68:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401ad78:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401ad88:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401ad98:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401ada8:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401adb8:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401adc8:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401add8:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401ade8:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401adf8:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401ae08:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401ae18:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401ae28:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401ae38:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401ae48:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401ae58:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401ae68:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401ae78:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401ae88:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401ae98:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401aea8:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401aeb8:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401aec8:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401aed8:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401aee8:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401aef8:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401af08:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401af18:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2401af28:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2401af38:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2401af48:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2401af58:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2401af68:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2401af78:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2401af88:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2401af98:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2401afa8:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2401afb8:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
2401afc8:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
2401afd8:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
2401afe8:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
2401aff8:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
2401b008:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
2401b018:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2401b028:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2401b038:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2401b048:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2401b058:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2401b068:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2401b078:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2401b088:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2401b098:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2401b0a8:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2401b0b8:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
2401b0c8:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
2401b0d8:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
2401b0e8:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
2401b0f8:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
2401b108:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
2401b118:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2401b128:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2401b138:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2401b148:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2401b158:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2401b168:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2401b178:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2401b188:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2401b198:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2401b1a8:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2401b1b8:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
2401b1c8:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
2401b1d8:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
2401b1e8:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
2401b1f8:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
2401b208:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
2401b218:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2401b228:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2401b238:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2401b248:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2401b258:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2401b268:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2401b278:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2401b288:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2401b298:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2401b2a8:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2401b2b8:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
2401b2c8:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
2401b2d8:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
2401b2e8:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
2401b2f8:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
2401b308:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
2401b318:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2401b328:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2401b338:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2401b348:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2401b358:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2401b368:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2401b378:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2401b388:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2401b398:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2401b3a8:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2401b3b8:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
2401b3c8:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
2401b3d8:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
2401b3e8:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
2401b3f8:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
2401b408:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
2401b418:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2401b428:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2401b438:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2401b448:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2401b458:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2401b468:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2401b478:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2401b488:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2401b498:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2401b4a8:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2401b4b8:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
2401b4c8:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
2401b4d8:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
2401b4e8:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
2401b4f8:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
2401b508:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
2401b518:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2401b528:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2401b538:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2401b548:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2401b558:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2401b568:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2401b578:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2401b588:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2401b598:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2401b5a8:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2401b5b8:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
2401b5c8:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
2401b5d8:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
2401b5e8:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
2401b5f8:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
2401b608:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
2401b618:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2401b628:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2401b638:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2401b648:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2401b658:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2401b668:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2401b678:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2401b688:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2401b698:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2401b6a8:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2401b6b8:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
2401b6c8:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
2401b6d8:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
2401b6e8:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
2401b6f8:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
2401b708:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
2401b718:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2401b728:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2401b738:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2401b748:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2401b758:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2401b768:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2401b778:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2401b788:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2401b798:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2401b7a8:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2401b7b8:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
2401b7c8:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
2401b7d8:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
2401b7e8:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
2401b7f8:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
2401b808:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
2401b818:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2401b828:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2401b838:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2401b848:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2401b858:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2401b868:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2401b878:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2401b888:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2401b898:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2401b8a8:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2401b8b8:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
2401b8c8:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
2401b8d8:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
2401b8e8:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
2401b8f8:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
2401b908:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
2401b918:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
2401b928:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
2401b938:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
2401b948:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
2401b958:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
2401b968:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
2401b978:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
2401b988:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
2401b998:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
2401b9a8:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
2401b9b8:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
2401b9c8:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
2401b9d8:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
2401b9e8:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
2401b9f8:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
2401ba08:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
2401ba18:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
2401ba28:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
2401ba38:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
2401ba48:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
2401ba58:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
2401ba68:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
2401ba78:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
2401ba88:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
2401ba98:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
2401baa8:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
2401bab8:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
2401bac8:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
2401bad8:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
2401bae8:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
2401baf8:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
2401bb08:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
2401bb18:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
2401bb28:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
2401bb38:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
2401bb48:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
2401bb58:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
2401bb68:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
2401bb78:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
2401bb88:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
2401bb98:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
2401bba8:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
2401bbb8:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
2401bbc8:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
2401bbd8:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
2401bbe8:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
2401bbf8:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
2401bc08:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
2401bc18:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
2401bc28:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
2401bc38:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
2401bc48:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
2401bc58:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
2401bc68:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
2401bc78:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
2401bc88:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
2401bc98:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
2401bca8:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
2401bcb8:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
2401bcc8:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
2401bcd8:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
2401bce8:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
2401bcf8:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
2401bd08:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
2401bd18:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
2401bd28:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
2401bd38:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
2401bd48:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
2401bd58:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
2401bd68:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
2401bd78:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
2401bd88:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
2401bd98:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
2401bda8:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
2401bdb8:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
2401bdc8:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
2401bdd8:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
2401bde8:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
2401bdf8:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
2401be08:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
2401be18:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
2401be28:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
2401be38:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
2401be48:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
2401be58:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
2401be68:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
2401be78:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
2401be88:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
2401be98:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
2401bea8:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
2401beb8:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
2401bec8:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
2401bed8:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
2401bee8:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
2401bef8:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
2401bf08:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
2401bf18:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2401bf28:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2401bf38:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2401bf48:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2401bf58:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2401bf68:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2401bf78:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2401bf88:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2401bf98:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2401bfa8:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2401bfb8:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
2401bfc8:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
2401bfd8:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401bfe8:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401bff8:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401c008:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401c018:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401c028:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401c038:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401c048:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401c058:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401c068:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401c078:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401c088:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401c098:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401c0a8:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401c0b8:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401c0c8:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401c0d8:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401c0e8:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401c0f8:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401c108:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401c118:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401c128:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401c138:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401c148:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401c158:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401c168:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401c178:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401c188:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401c198:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401c1a8:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401c1b8:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401c1c8:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401c1d8:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401c1e8:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401c1f8:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401c208:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401c218:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401c228:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401c238:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401c248:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401c258:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401c268:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401c278:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401c288:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401c298:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401c2a8:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401c2b8:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401c2c8:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401c2d8:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401c2e8:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401c2f8:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401c308:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401c318:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401c328:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401c338:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401c348:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401c358:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401c368:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401c378:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401c388:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401c398:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401c3a8:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401c3b8:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401c3c8:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401c3d8:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401c3e8:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401c3f8:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401c408:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401c418:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401c428 <__leaf_table_fir2XLow>:
2401c428:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401c438:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401c448:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401c458:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401c468:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401c478:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401c488:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401c498:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401c4a8 <__leaf_table_sinewave>:
2401c4a8:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2401c4b8:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2401c4c8:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2401c4d8:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2401c4e8:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2401c4f8:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2401c508:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
2401c518:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
2401c528:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
2401c538:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
2401c548:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
2401c558:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
2401c568:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2401c578:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2401c588:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2401c598:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2401c5a8:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2401c5b8:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2401c5c8:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2401c5d8:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2401c5e8:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2401c5f8:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2401c608:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
2401c618:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
2401c628:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
2401c638:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
2401c648:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
2401c658:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
2401c668:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2401c678:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2401c688:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2401c698:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2401c6a8:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2401c6b8:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2401c6c8:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2401c6d8:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2401c6e8:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2401c6f8:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2401c708:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
2401c718:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
2401c728:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
2401c738:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
2401c748:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
2401c758:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
2401c768:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2401c778:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2401c788:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2401c798:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2401c7a8:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2401c7b8:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2401c7c8:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2401c7d8:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2401c7e8:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2401c7f8:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2401c808:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
2401c818:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
2401c828:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
2401c838:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
2401c848:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
2401c858:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
2401c868:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2401c878:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2401c888:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2401c898:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2401c8a8:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2401c8b8:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2401c8c8:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2401c8d8:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2401c8e8:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2401c8f8:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2401c908:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
2401c918:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2401c928:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2401c938:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2401c948:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2401c958:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2401c968:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2401c978:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2401c988:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2401c998:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2401c9a8:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2401c9b8:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2401c9c8:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2401c9d8:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2401c9e8:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2401c9f8:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2401ca08:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
2401ca18:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2401ca28:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2401ca38:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2401ca48:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2401ca58:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2401ca68:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2401ca78:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2401ca88:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2401ca98:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2401caa8:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2401cab8:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2401cac8:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2401cad8:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2401cae8:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2401caf8:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2401cb08:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
2401cb18:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2401cb28:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2401cb38:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2401cb48:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2401cb58:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2401cb68:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2401cb78:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2401cb88:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2401cb98:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2401cba8:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2401cbb8:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2401cbc8:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2401cbd8:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2401cbe8:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2401cbf8:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2401cc08:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
2401cc18:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2401cc28:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2401cc38:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2401cc48:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2401cc58:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2401cc68:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2401cc78:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2401cc88:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2401cc98:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2401cca8:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2401ccb8:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2401ccc8:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2401ccd8:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2401cce8:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2401ccf8:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2401cd08:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
2401cd18:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2401cd28:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2401cd38:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2401cd48:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2401cd58:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2401cd68:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2401cd78:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2401cd88:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2401cd98:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2401cda8:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2401cdb8:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
2401cdc8:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
2401cdd8:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
2401cde8:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
2401cdf8:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
2401ce08:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
2401ce18:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2401ce28:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2401ce38:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2401ce48:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2401ce58:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2401ce68:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2401ce78:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2401ce88:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2401ce98:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2401cea8:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2401ceb8:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
2401cec8:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
2401ced8:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
2401cee8:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
2401cef8:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
2401cf08:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
2401cf18:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2401cf28:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2401cf38:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2401cf48:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2401cf58:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2401cf68:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2401cf78:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2401cf88:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2401cf98:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2401cfa8:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2401cfb8:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
2401cfc8:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
2401cfd8:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
2401cfe8:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
2401cff8:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
2401d008:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
2401d018:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2401d028:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2401d038:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2401d048:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2401d058:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2401d068:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2401d078:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2401d088:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2401d098:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2401d0a8:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2401d0b8:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
2401d0c8:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
2401d0d8:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
2401d0e8:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
2401d0f8:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
2401d108:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
2401d118:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2401d128:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2401d138:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2401d148:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2401d158:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2401d168:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2401d178:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2401d188:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2401d198:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2401d1a8:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2401d1b8:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
2401d1c8:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
2401d1d8:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
2401d1e8:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
2401d1f8:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
2401d208:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
2401d218:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2401d228:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2401d238:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2401d248:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2401d258:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2401d268:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2401d278:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2401d288:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2401d298:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2401d2a8:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2401d2b8:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
2401d2c8:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
2401d2d8:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
2401d2e8:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
2401d2f8:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
2401d308:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
2401d318:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
2401d328:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
2401d338:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
2401d348:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
2401d358:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
2401d368:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2401d378:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2401d388:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2401d398:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2401d3a8:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2401d3b8:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2401d3c8:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2401d3d8:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2401d3e8:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2401d3f8:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2401d408:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
2401d418:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
2401d428:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
2401d438:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
2401d448:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
2401d458:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
2401d468:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2401d478:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2401d488:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2401d498:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2401d4a8:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2401d4b8:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2401d4c8:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2401d4d8:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2401d4e8:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2401d4f8:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2401d508:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
2401d518:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
2401d528:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
2401d538:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
2401d548:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
2401d558:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
2401d568:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2401d578:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2401d588:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2401d598:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2401d5a8:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2401d5b8:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2401d5c8:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2401d5d8:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2401d5e8:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2401d5f8:	be827fa2 be84039b be858794 be870b8d     ................
2401d608:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
2401d618:	be8e9b7c be901b86 be919f80 be931f8a     |...............
2401d628:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
2401d638:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
2401d648:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
2401d658:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
2401d668:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2401d678:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2401d688:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2401d698:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2401d6a8:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2401d6b8:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2401d6c8:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2401d6d8:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2401d6e8:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2401d6f8:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2401d708:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
2401d718:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
2401d728:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
2401d738:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
2401d748:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
2401d758:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
2401d768:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2401d778:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2401d788:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2401d798:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2401d7a8:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2401d7b8:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2401d7c8:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2401d7d8:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2401d7e8:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2401d7f8:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2401d808:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
2401d818:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
2401d828:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
2401d838:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
2401d848:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
2401d858:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
2401d868:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2401d878:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2401d888:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2401d898:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2401d8a8:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2401d8b8:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2401d8c8:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2401d8d8:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2401d8e8:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2401d8f8:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2401d908:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
2401d918:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2401d928:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2401d938:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2401d948:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2401d958:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2401d968:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2401d978:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2401d988:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2401d998:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2401d9a8:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2401d9b8:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2401d9c8:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2401d9d8:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2401d9e8:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2401d9f8:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2401da08:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
2401da18:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2401da28:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2401da38:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2401da48:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2401da58:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2401da68:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2401da78:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2401da88:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2401da98:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2401daa8:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2401dab8:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2401dac8:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2401dad8:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2401dae8:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2401daf8:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2401db08:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
2401db18:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2401db28:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2401db38:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2401db48:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2401db58:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2401db68:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2401db78:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2401db88:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2401db98:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2401dba8:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2401dbb8:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2401dbc8:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2401dbd8:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2401dbe8:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2401dbf8:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2401dc08:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
2401dc18:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2401dc28:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2401dc38:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2401dc48:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2401dc58:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2401dc68:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2401dc78:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2401dc88:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2401dc98:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2401dca8:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2401dcb8:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2401dcc8:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2401dcd8:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2401dce8:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2401dcf8:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2401dd08:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
2401dd18:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2401dd28:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2401dd38:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2401dd48:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2401dd58:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2401dd68:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2401dd78:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2401dd88:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2401dd98:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2401dda8:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2401ddb8:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
2401ddc8:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
2401ddd8:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
2401dde8:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
2401ddf8:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
2401de08:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
2401de18:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2401de28:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2401de38:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2401de48:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2401de58:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2401de68:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2401de78:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2401de88:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2401de98:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2401dea8:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2401deb8:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
2401dec8:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
2401ded8:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
2401dee8:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
2401def8:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
2401df08:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
2401df18:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2401df28:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2401df38:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2401df48:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2401df58:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2401df68:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2401df78:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2401df88:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2401df98:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2401dfa8:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2401dfb8:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2401dfc8:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2401dfd8:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2401dfe8:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2401dff8:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2401e008:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2401e018:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2401e028:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2401e038:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2401e048:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2401e058:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2401e068:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2401e078:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2401e088:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2401e098:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2401e0a8:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2401e0b8:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2401e0c8:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2401e0d8:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2401e0e8:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2401e0f8:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2401e108:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2401e118:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2401e128:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2401e138:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2401e148:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2401e158:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2401e168:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2401e178:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2401e188:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2401e198:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2401e1a8:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2401e1b8:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2401e1c8:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2401e1d8:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2401e1e8:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2401e1f8:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2401e208:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2401e218:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2401e228:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2401e238:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2401e248:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2401e258:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2401e268:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2401e278:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2401e288:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2401e298:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2401e2a8:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2401e2b8:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2401e2c8:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2401e2d8:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2401e2e8:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2401e2f8:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2401e308:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2401e318:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2401e328:	be949f95 be931f8a be919f80 be901b86     ................
2401e338:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2401e348:	be888f86 be870b8d be858794 be84039b     ................
2401e358:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2401e368:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2401e378:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2401e388:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2401e398:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2401e3a8:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2401e3b8:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2401e3c8:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2401e3d8:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2401e3e8:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2401e3f8:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2401e408:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2401e418:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2401e428:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2401e438:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2401e448:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2401e458:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2401e468:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2401e478:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2401e488:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2401e498:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2401e4a8 <slope_dd_table>:
	...
2401e544:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
2401e554:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
2401e564:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
2401e574:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
2401e584:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
2401e594:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
2401e5a4:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
2401e5b4:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
2401e5c4:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
2401e5d4:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
2401e5e4:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
2401e5f4:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
2401e604:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
2401e614:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
2401e624:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
2401e634:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
2401e644:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
2401e654:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
2401e664:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
2401e674:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
2401e684:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
2401e694:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
2401e6a4:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
2401e6b4:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
2401e6c4:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
2401e6d4:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
2401e6e4:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
2401e6f4:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
2401e704:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
2401e714:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
2401e724:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
2401e734:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
2401e744:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
2401e754:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
2401e764:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
2401e774:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
2401e784:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
2401e794:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
2401e7a4:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
2401e7b4:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
2401e7c4:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
2401e7d4:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
2401e7e4:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
2401e7f4:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
2401e804:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
2401e814:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
2401e824:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
2401e834:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
2401e844:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
2401e854:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
2401e864:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
2401e874:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
2401e884:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
2401e894:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
2401e8a4:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
2401e8b4:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
2401e8c4:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
2401e8d4:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
2401e8e4:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
2401e8f4:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
2401e904:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
2401e914:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
2401e924:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
2401e934:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
2401e944:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
2401e954:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
2401e964:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
2401e974:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
2401e984:	be0eae12 be10148d be1152be be1268fb     .........R...h..
2401e994:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
2401e9a4:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
2401e9b4:	be15718f be15109e be148cff be13e73e     .q..........>...
2401e9c4:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
2401e9d4:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
2401e9e4:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
2401e9f4:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
2401ea04:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
2401ea14:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
2401ea24:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
2401ea34:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
2401ea44:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
2401ea54:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
2401ea64:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
2401ea74:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
2401ea84:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
2401ea94:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
2401eaa4:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
2401eab4:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
2401eac4:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
2401ead4:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
2401eae4:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
2401eaf4:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
2401eb04:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
2401eb14:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
2401eb24:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
2401eb34:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
2401eb44:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
2401eb54:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
2401eb64:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
2401eb74:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
2401eb84:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
2401eb94:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
2401eba4:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
2401ebb4:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
2401ebc4:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
2401ebd4:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
2401ebe4:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
2401ebf4:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
2401ec04:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
2401ec14:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
2401ec24:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
2401ec34:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
2401ec44:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
2401ec54:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
2401ec64:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
2401ec74:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
2401ec84:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
2401ec94:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
2401eca4:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
2401ecb4:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
2401ecc4:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
2401ecd4:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
2401ece4:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
2401ecf4:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
2401ed04:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
2401ed14:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
2401ed24:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
2401ed34:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
2401ed44:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
2401ed54:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
2401ed64:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
2401ed74:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
2401ed84:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
2401ed94:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
2401eda4:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
2401edb4:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
2401edc4:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
2401edd4:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
2401ede4:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
2401edf4:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
2401ee04:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
2401ee14:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
2401ee24:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
2401ee34:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
2401ee44:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
2401ee54:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
2401ee64:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
2401ee74:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
2401ee84:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
2401ee94:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
2401eea4:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
2401eeb4:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
2401eec4:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
2401eed4:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
2401eee4:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
2401eef4:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
2401ef04:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
2401ef14:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
2401ef24:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
2401ef34:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
2401ef44:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
2401ef54:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
2401ef64:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
2401ef74:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
2401ef84:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
2401ef94:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
2401efa4:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
2401efb4:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
2401efc4:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
2401efd4:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
2401efe4:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
2401eff4:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
2401f004:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
2401f014:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
2401f024:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
2401f034:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
2401f044:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
2401f054:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
2401f064:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
2401f074:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
2401f084:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
2401f094:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
2401f0a4:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
2401f0b4:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
2401f0c4:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
2401f0d4:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
2401f0e4:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
2401f0f4:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
2401f104:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
2401f114:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
2401f124:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
2401f134:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
2401f144:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
2401f154:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
2401f164:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
2401f174:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
2401f184:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
2401f194:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
2401f1a4:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
2401f1b4:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
2401f1c4:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
2401f1d4:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
2401f1e4:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
2401f1f4:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
2401f204:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
2401f214:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
2401f224:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
2401f234:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
2401f244:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
2401f254:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
2401f264:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
2401f274:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
2401f284:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
2401f294:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
2401f2a4:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
2401f2b4:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
2401f2c4:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
2401f2d4:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
2401f2e4:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
2401f2f4:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
2401f304:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
2401f314:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
2401f324:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
2401f334:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
2401f344:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
2401f354:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
2401f364:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
2401f374:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
2401f384:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
2401f394:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
2401f3a4:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
2401f3b4:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
2401f3c4:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
2401f3d4:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
2401f3e4:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
2401f3f4:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
2401f404:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
2401f414:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
2401f424:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
2401f434:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
2401f444:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
2401f454:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
2401f464:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
2401f474:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
2401f484:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
2401f494:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
2401f4a4:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
2401f4b4:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
2401f4c4:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
2401f4d4:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
2401f4e4:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
2401f4f4:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
2401f504:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
2401f514:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
2401f524:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
2401f534:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
2401f544:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
2401f554:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
2401f564:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
2401f574:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
2401f584:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
2401f594:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
2401f5a4:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
2401f5b4:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
2401f5c4:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
2401f5d4:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
2401f5e4:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
2401f5f4:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
2401f604:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
2401f614:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
2401f624:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
2401f634:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
2401f644:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
2401f654:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
2401f664:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
2401f674:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
2401f684:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
2401f694:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
2401f6a4:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
2401f6b4:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
2401f6c4:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
2401f6d4:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
2401f6e4:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
2401f6f4:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
2401f704:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
2401f714:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
2401f724:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
2401f734:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
2401f744:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
2401f754:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
2401f764:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
2401f774:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
2401f784:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
2401f794:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
2401f7a4:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
2401f7b4:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
2401f7c4:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
2401f7d4:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
2401f7e4:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
2401f7f4:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
2401f804:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
2401f814:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
2401f824:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
2401f834:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
2401f844:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
2401f854:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
2401f864:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
2401f874:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
2401f884:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
2401f894:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
2401f8a4:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
2401f8b4:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
2401f8c4:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
2401f8d4:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
2401f8e4:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
2401f8f4:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
2401f904:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
2401f914:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
2401f924:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
2401f934:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
2401f944:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
2401f954:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
2401f964:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
2401f974:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
2401f984:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
2401f994:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
2401f9a4:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
2401f9b4:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
2401f9c4:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
2401f9d4:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
2401f9e4:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
2401f9f4:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
2401fa04:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
2401fa14:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
2401fa24:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
2401fa34:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
2401fa44:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
2401fa54:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
2401fa64:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
2401fa74:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
2401fa84:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
2401fa94:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
2401faa4:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
2401fab4:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
2401fac4:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
2401fad4:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
2401fae4:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
2401faf4:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
2401fb04:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
2401fb14:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
2401fb24:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
2401fb34:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
2401fb44:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
2401fb54:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
2401fb64:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
2401fb74:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
2401fb84:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
2401fb94:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
2401fba4:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
2401fbb4:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
2401fbc4:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
2401fbd4:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
2401fbe4:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
2401fbf4:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
2401fc04:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
2401fc14:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
2401fc24:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
2401fc34:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
2401fc44:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
2401fc54:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
2401fc64:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
2401fc74:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
2401fc84:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
2401fc94:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
2401fca4:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
2401fcb4:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
2401fcc4:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
2401fcd4:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
2401fce4:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
2401fcf4:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
2401fd04:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
2401fd14:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
2401fd24:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
2401fd34:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
2401fd44:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
2401fd54:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
2401fd64:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
2401fd74:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
2401fd84:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
2401fd94:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
2401fda4:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
2401fdb4:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
2401fdc4:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
2401fdd4:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
2401fde4:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
2401fdf4:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
2401fe04:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
2401fe14:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
2401fe24:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
2401fe34:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
2401fe44:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
2401fe54:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
2401fe64:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
2401fe74:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
2401fe84:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
2401fe94:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
2401fea4:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
2401feb4:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
2401fec4:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
2401fed4:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
2401fee4:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
2401fef4:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
2401ff04:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
2401ff14:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
2401ff24:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
2401ff34:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
2401ff44:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
2401ff54:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
2401ff64:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
2401ff74:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
2401ff84:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
2401ff94:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
2401ffa4:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
2401ffb4:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
2401ffc4:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
2401ffd4:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
2401ffe4:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
2401fff4:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
24020004:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
24020014:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
24020024:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
24020034:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
24020044:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
24020054:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
24020064:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
24020074:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
24020084:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
24020094:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
240200a4:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
240200b4:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
240200c4:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
240200d4:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
240200e4:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
240200f4:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
24020104:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
24020114:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
24020124:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
24020134:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
24020144:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
24020154:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
24020164:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
24020174:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
24020184:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
24020194:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
240201a4:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
240201b4:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
240201c4:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
240201d4:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
240201e4:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
240201f4:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
24020204:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
24020214:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
24020224:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
24020234:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
24020244:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
24020254:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
24020264:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
24020274:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
24020284:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
24020294:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
240202a4:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
240202b4:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
240202c4:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
240202d4:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
240202e4:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
240202f4:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
24020304:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
24020314:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
24020324:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
24020334:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
24020344:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
24020354:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
24020364:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
24020374:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
24020384:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
24020394:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
240203a4:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
240203b4:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
240203c4:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
240203d4:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
240203e4:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
240203f4:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
24020404:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
24020414:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
24020424:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
24020434:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
24020444:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
24020454:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
24020464:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
24020474:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
24020484:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
24020494:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
240204a4:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
240204b4:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
240204c4:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
240204d4:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
240204e4:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
240204f4:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
24020504:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
24020514:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
24020524:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
24020534:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
24020544:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
24020554:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
24020564:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
24020574:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
24020584:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
24020594:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
240205a4:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
240205b4:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
240205c4:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
240205d4:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
240205e4:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
240205f4:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
24020604:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
24020614:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
24020624:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
24020634:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
24020644:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
24020654:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
24020664:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
24020674:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
24020684:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
24020694:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
240206a4:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
240206b4:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
240206c4:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
240206d4:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
240206e4:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
240206f4:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
24020704:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
24020714:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
24020724:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
24020734:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
24020744:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
24020754:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
24020764:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
24020774:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
24020784:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
24020794:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
240207a4:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
240207b4:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
240207c4:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
240207d4:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
240207e4:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
240207f4:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
24020804:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
24020814:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
24020824:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
24020834:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
24020844:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
24020854:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
24020864:	babf16bd babb96cd bab7bd01 bab38bab     ................
24020874:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
24020884:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
24020894:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
240208a4:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
240208b4:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
240208c4:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
240208d4:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
240208e4:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
240208f4:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
24020904:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
24020914:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
24020924:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
24020934:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
24020944:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
24020954:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
24020964:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
24020974:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
24020984:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
24020994:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
240209a4:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
240209b4:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
240209c4:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
240209d4:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
240209e4:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
240209f4:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
24020a04:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
24020a14:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
24020a24:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
24020a34:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
24020a44:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
24020a54:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
24020a64:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
24020a74:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
24020a84:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
24020a94:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
24020aa4:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
24020ab4:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
24020ac4:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
24020ad4:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
24020ae4:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
24020af4:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
24020b04:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
24020b14:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
24020b24:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
24020b34:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
24020b44:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
24020b54:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
24020b64:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
24020b74:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
24020b84:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
24020b94:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
24020ba4:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
24020bb4:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
24020bc4:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
24020bd4:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
24020be4:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
24020bf4:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
24020c04:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
24020c14:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
24020c24:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
24020c34:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
24020c44:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
24020c54:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
24020c64:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
24020c74:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
24020c84:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
24020c94:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
24020ca4:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
24020cb4:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
24020cc4:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
24020cd4:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
24020ce4:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
24020cf4:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
24020d04:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
24020d14:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
24020d24:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
24020d34:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
24020d44:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
24020d54:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
24020d64:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
24020d74:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
24020d84:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
24020d94:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
24020da4:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
24020db4:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
24020dc4:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
24020dd4:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
24020de4:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
24020df4:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
24020e04:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
24020e14:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
24020e24:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
24020e34:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
24020e44:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
24020e54:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
24020e64:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
24020e74:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
24020e84:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
24020e94:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
24020ea4:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
24020eb4:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
24020ec4:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
24020ed4:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
24020ee4:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
24020ef4:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
24020f04:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
24020f14:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
24020f24:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
24020f34:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
24020f44:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
24020f54:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
24020f64:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
24020f74:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
24020f84:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
24020f94:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
24020fa4:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
24020fb4:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
24020fc4:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
24020fd4:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
24020fe4:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
24020ff4:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
24021004:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
24021014:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
24021024:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
24021034:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
24021044:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
24021054:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
24021064:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
24021074:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
24021084:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
24021094:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
240210a4:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
240210b4:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
240210c4:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
240210d4:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
240210e4:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
240210f4:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
24021104:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
24021114:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
24021124:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
24021134:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
24021144:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
24021154:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
24021164:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
24021174:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
24021184:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
24021194:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
240211a4:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
240211b4:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
240211c4:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
240211d4:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
240211e4:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
240211f4:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
24021204:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
24021214:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
24021224:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
24021234:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
24021244:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
24021254:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
24021264:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
24021274:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
24021284:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
24021294:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
240212a4:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
240212b4:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
240212c4:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
240212d4:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
240212e4:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
240212f4:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
24021304:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
24021314:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
24021324:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
24021334:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
24021344:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
24021354:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
24021364:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
24021374:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
24021384:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
24021394:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
240213a4:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
240213b4:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
240213c4:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
240213d4:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
240213e4:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
240213f4:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
24021404:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
24021414:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
24021424:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
24021434:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
24021444:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
24021454:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
24021464:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
24021474:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
24021484:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
24021494:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
240214a4:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
240214b4:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
240214c4:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
240214d4:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
240214e4:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
240214f4:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24021504:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24021514:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24021524:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24021534:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24021544:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24021554:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24021564:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24021574:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24021584:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24021594:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
240215a4:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
240215b4:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
240215c4:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
240215d4:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
240215e4:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
240215f4:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24021604:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24021614:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24021624:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24021634:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24021644:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24021654:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24021664:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24021674:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24021684:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24021694:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
240216a4:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
240216b4:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
240216c4:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
240216d4:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
240216e4:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
240216f4:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24021704:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24021714:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24021724:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24021734:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24021744:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24021754:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24021764:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24021774:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24021784:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24021794:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
240217a4:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
240217b4:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
240217c4:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
240217d4:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
240217e4:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
240217f4:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24021804:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24021814:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24021824:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24021834:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24021844:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24021854:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24021864:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24021874:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24021884:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24021894:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
240218a4:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
240218b4:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
240218c4:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
240218d4:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
240218e4:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
240218f4:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24021904:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24021914:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24021924:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24021934:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24021944:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24021954:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24021964:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24021974:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24021984:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
24021994:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
240219a4:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
240219b4:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
240219c4:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
240219d4:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
240219e4:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
240219f4:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
24021a04:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
24021a14:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
24021a24:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
24021a34:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
24021a44:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
24021a54:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24021a64:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24021a74:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24021a84:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24021a94:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24021aa4:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
24021ab4:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
24021ac4:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
24021ad4:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
24021ae4:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
24021af4:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
24021b04:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
24021b14:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
24021b24:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
24021b34:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
24021b44:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
24021b54:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
24021b64:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
24021b74:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
24021b84:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
24021b94:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
24021ba4:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
24021bb4:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
24021bc4:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
24021bd4:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
24021be4:	b808d82b b80a8abf b80befed b80d078a     +...............
24021bf4:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
24021c04:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
24021c14:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
24021c24:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
24021c34:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
24021c44:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
24021c54:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
24021c64:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
24021c74:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
24021c84:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
24021c94:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
24021ca4:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
24021cb4:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
24021cc4:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
24021cd4:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
24021ce4:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
24021cf4:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
24021d04:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
24021d14:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
24021d24:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
24021d34:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
24021d44:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
24021d54:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
24021d64:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
24021d74:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
24021d84:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
24021d94:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
24021da4:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
24021db4:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
24021dc4:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
24021dd4:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
24021de4:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
24021df4:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
24021e04:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
24021e14:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
24021e24:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
24021e34:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
24021e44:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
24021e54:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
24021e64:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
24021e74:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
24021e84:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
24021e94:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
24021ea4:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
24021eb4:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
24021ec4:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
24021ed4:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
24021ee4:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
24021ef4:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
24021f04:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
24021f14:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
24021f24:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
24021f34:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
24021f44:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
24021f54:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
24021f64:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
24021f74:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
24021f84:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
24021f94:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
24021fa4:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
24021fb4:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
24021fc4:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
24021fd4:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
24021fe4:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
24021ff4:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
24022004:	b7087574 b70df990 b713221d b717ed03     tu......."......
24022014:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
24022024:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
24022034:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
24022044:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
24022054:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
24022064:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
24022074:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
24022084:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
24022094:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
240220a4:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
240220b4:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
240220c4:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
240220d4:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
240220e4:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
240220f4:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
24022104:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
24022114:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
24022124:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
24022134:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
24022144:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
24022154:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
24022164:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
24022174:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
24022184:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
24022194:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
240221a4:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
240221b4:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
240221c4:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
240221d4:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
240221e4:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
240221f4:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
24022204:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
24022214:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
24022224:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
24022234:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
24022244:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
24022254:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
24022264:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
24022274:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
24022284:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
24022294:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
240222a4:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
240222b4:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
240222c4:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
240222d4:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
240222e4:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
240222f4:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
24022304:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
24022314:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
24022324:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
24022334:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
24022344:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
24022354:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
24022364:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
24022374:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
24022384:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
24022394:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
240223a4:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
240223b4:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
240223c4:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
240223d4:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
240223e4:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
240223f4:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
24022404:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
24022414:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
24022424:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
24022434:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
24022444:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
24022454:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
24022464:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
24022474:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
24022484:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
24022494:	b610f5d3 b60be886 b60694c9 b600fec9     ................
240224a4:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
240224b4:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
240224c4:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
240224d4:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
240224e4:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
240224f4:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
24022504:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
24022514:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
24022524:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
24022534:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
24022544:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
24022554:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24022564:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24022574:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24022584:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
24022594:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
240225a4:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
240225b4:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
240225c4:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
240225d4:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
240225e4:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
240225f4:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
24022604:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
24022614:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
24022624:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
24022634:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
24022644:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
24022654:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24022664:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24022674:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24022684:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
24022694:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
240226a4:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
240226b4:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
240226c4:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
240226d4:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
240226e4:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
240226f4:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
24022704:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
24022714:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
24022724:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
24022734:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
24022744:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
24022754:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24022764:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24022774:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24022784:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
24022794:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
240227a4:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
240227b4:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
240227c4:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
240227d4:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
240227e4:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
240227f4:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
24022804:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
24022814:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
24022824:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
24022834:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
24022844:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
24022854:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24022864:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24022874:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24022884:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
24022894:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
240228a4:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
240228b4:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
240228c4:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
240228d4:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
240228e4:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
240228f4:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24022904:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24022914:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24022924:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24022934:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24022944:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24022954:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24022964:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24022974:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24022984:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
24022994:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
240229a4:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
240229b4:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
240229c4:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
240229d4:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
240229e4:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
240229f4:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
24022a04:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
24022a14:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
24022a24:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
24022a34:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
24022a44:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
24022a54:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24022a64:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24022a74:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24022a84:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24022a94:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24022aa4:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
24022ab4:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
24022ac4:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
24022ad4:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
24022ae4:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
24022af4:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
24022b04:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
24022b14:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
24022b24:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

24022bac <step_dd_table>:
	...
24022ce0:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24022cf0:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24022d00:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24022d10:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24022d20:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24022d30:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24022d40:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
24022d50:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
24022d60:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
24022d70:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
24022d80:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
24022d90:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
24022da0:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
24022db0:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
24022dc0:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
24022dd0:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
24022de0:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24022df0:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24022e00:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24022e10:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24022e20:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24022e30:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24022e40:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
24022e50:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
24022e60:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
24022e70:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
24022e80:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
24022e90:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
24022ea0:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
24022eb0:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
24022ec0:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
24022ed0:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
24022ee0:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24022ef0:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
24022f00:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
24022f10:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
24022f20:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
24022f30:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
24022f40:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
24022f50:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
24022f60:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
24022f70:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
24022f80:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
24022f90:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
24022fa0:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
24022fb0:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
24022fc0:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
24022fd0:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
24022fe0:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24022ff0:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
24023000:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
24023010:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
24023020:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
24023030:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
24023040:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
24023050:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
24023060:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
24023070:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
24023080:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
24023090:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
240230a0:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
240230b0:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
240230c0:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
240230d0:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
240230e0:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
240230f0:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
24023100:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
24023110:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
24023120:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
24023130:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
24023140:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
24023150:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
24023160:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
24023170:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
24023180:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
24023190:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
240231a0:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
240231b0:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
240231c0:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
240231d0:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
240231e0:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
240231f0:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
24023200:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
24023210:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
24023220:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
24023230:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
24023240:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
24023250:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
24023260:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
24023270:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
24023280:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
24023290:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
240232a0:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
240232b0:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
240232c0:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
240232d0:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
240232e0:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
240232f0:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
24023300:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
24023310:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
24023320:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
24023330:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
24023340:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
24023350:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
24023360:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24023370:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24023380:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
24023390:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
240233a0:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
240233b0:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
240233c0:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
240233d0:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
240233e0:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
240233f0:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24023400:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
24023410:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
24023420:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
24023430:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
24023440:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
24023450:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
24023460:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24023470:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24023480:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
24023490:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
240234a0:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
240234b0:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
240234c0:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
240234d0:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
240234e0:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
240234f0:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24023500:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
24023510:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
24023520:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
24023530:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
24023540:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
24023550:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24023560:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24023570:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24023580:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24023590:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
240235a0:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
240235b0:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
240235c0:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
240235d0:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
240235e0:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
240235f0:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24023600:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
24023610:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
24023620:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
24023630:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
24023640:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
24023650:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24023660:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24023670:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24023680:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24023690:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
240236a0:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
240236b0:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
240236c0:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
240236d0:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
240236e0:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
240236f0:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24023700:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
24023710:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
24023720:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
24023730:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
24023740:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
24023750:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24023760:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24023770:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24023780:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24023790:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
240237a0:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
240237b0:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
240237c0:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
240237d0:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
240237e0:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
240237f0:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24023800:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
24023810:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
24023820:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
24023830:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
24023840:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
24023850:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24023860:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24023870:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24023880:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24023890:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
240238a0:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
240238b0:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
240238c0:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
240238d0:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
240238e0:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
240238f0:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24023900:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24023910:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24023920:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24023930:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24023940:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24023950:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24023960:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24023970:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24023980:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
24023990:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
240239a0:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
240239b0:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
240239c0:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
240239d0:	bae718f6 be02f380 bad0894d be049492     ........M.......
240239e0:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
240239f0:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24023a00:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
24023a10:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
24023a20:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
24023a30:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
24023a40:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
24023a50:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
24023a60:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24023a70:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24023a80:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
24023a90:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
24023aa0:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
24023ab0:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
24023ac0:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
24023ad0:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
24023ae0:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
24023af0:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
24023b00:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
24023b10:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
24023b20:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
24023b30:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
24023b40:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
24023b50:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
24023b60:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
24023b70:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
24023b80:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
24023b90:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
24023ba0:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
24023bb0:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
24023bc0:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
24023bd0:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
24023be0:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
24023bf0:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
24023c00:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
24023c10:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
24023c20:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
24023c30:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
24023c40:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
24023c50:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
24023c60:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
24023c70:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
24023c80:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
24023c90:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
24023ca0:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
24023cb0:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
24023cc0:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
24023cd0:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
24023ce0:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
24023cf0:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
24023d00:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
24023d10:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
24023d20:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
24023d30:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
24023d40:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
24023d50:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
24023d60:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
24023d70:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
24023d80:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
24023d90:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
24023da0:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
24023db0:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
24023dc0:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
24023dd0:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
24023de0:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
24023df0:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
24023e00:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
24023e10:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
24023e20:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
24023e30:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
24023e40:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
24023e50:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
24023e60:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
24023e70:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
24023e80:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
24023e90:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
24023ea0:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
24023eb0:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
24023ec0:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
24023ed0:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
24023ee0:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
24023ef0:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
24023f00:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
24023f10:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
24023f20:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
24023f30:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
24023f40:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
24023f50:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
24023f60:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
24023f70:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
24023f80:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
24023f90:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
24023fa0:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
24023fb0:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
24023fc0:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
24023fd0:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
24023fe0:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
24023ff0:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
24024000:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
24024010:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
24024020:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
24024030:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
24024040:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
24024050:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
24024060:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
24024070:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
24024080:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
24024090:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
240240a0:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
240240b0:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
240240c0:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
240240d0:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
240240e0:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
240240f0:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
24024100:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
24024110:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
24024120:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
24024130:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
24024140:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
24024150:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
24024160:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
24024170:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
24024180:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
24024190:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
240241a0:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
240241b0:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
240241c0:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
240241d0:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
240241e0:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
240241f0:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
24024200:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
24024210:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
24024220:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
24024230:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
24024240:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
24024250:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
24024260:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
24024270:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
24024280:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
24024290:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
240242a0:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
240242b0:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
240242c0:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
240242d0:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
240242e0:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
240242f0:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
24024300:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
24024310:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
24024320:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
24024330:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
24024340:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
24024350:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
24024360:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
24024370:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
24024380:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
24024390:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
240243a0:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
240243b0:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
240243c0:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
240243d0:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
240243e0:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
240243f0:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
24024400:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
24024410:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
24024420:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
24024430:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
24024440:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
24024450:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
24024460:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
24024470:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
24024480:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
24024490:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
240244a0:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
240244b0:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
240244c0:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
240244d0:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
240244e0:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
240244f0:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
24024500:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
24024510:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
24024520:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
24024530:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
24024540:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
24024550:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
24024560:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
24024570:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
24024580:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
24024590:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
240245a0:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
240245b0:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
240245c0:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
240245d0:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
240245e0:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
240245f0:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
24024600:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
24024610:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
24024620:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
24024630:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
24024640:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
24024650:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
24024660:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
24024670:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
24024680:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
24024690:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
240246a0:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
240246b0:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
240246c0:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
240246d0:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
240246e0:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
240246f0:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
24024700:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
24024710:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
24024720:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
24024730:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
24024740:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
24024750:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
24024760:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
24024770:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
24024780:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
24024790:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
240247a0:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
240247b0:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
240247c0:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
240247d0:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
240247e0:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
240247f0:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
24024800:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
24024810:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
24024820:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
24024830:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
24024840:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
24024850:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
24024860:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
24024870:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
24024880:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
24024890:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
240248a0:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
240248b0:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
240248c0:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
240248d0:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
240248e0:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
240248f0:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
24024900:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
24024910:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
24024920:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
24024930:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
24024940:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
24024950:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
24024960:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
24024970:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
24024980:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
24024990:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
240249a0:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
240249b0:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
240249c0:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
240249d0:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
240249e0:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
240249f0:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
24024a00:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
24024a10:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
24024a20:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
24024a30:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
24024a40:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
24024a50:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
24024a60:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
24024a70:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
24024a80:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
24024a90:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
24024aa0:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
24024ab0:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
24024ac0:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
24024ad0:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
24024ae0:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
24024af0:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
24024b00:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
24024b10:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
24024b20:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
24024b30:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
24024b40:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
24024b50:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
24024b60:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
24024b70:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
24024b80:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
24024b90:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
24024ba0:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
24024bb0:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
24024bc0:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
24024bd0:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
24024be0:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
24024bf0:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
24024c00:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
24024c10:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
24024c20:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
24024c30:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
24024c40:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
24024c50:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
24024c60:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
24024c70:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
24024c80:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
24024c90:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
24024ca0:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
24024cb0:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
24024cc0:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
24024cd0:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
24024ce0:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
24024cf0:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
24024d00:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
24024d10:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
24024d20:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
24024d30:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
24024d40:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
24024d50:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
24024d60:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
24024d70:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
24024d80:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
24024d90:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
24024da0:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
24024db0:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
24024dc0:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
24024dd0:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
24024de0:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
24024df0:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
24024e00:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
24024e10:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
24024e20:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
24024e30:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
24024e40:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
24024e50:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
24024e60:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
24024e70:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
24024e80:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
24024e90:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
24024ea0:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
24024eb0:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
24024ec0:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
24024ed0:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
24024ee0:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
24024ef0:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
24024f00:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
24024f10:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
24024f20:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
24024f30:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
24024f40:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
24024f50:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
24024f60:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
24024f70:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
24024f80:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
24024f90:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
24024fa0:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
24024fb0:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
24024fc0:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
24024fd0:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
24024fe0:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
24024ff0:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
24025000:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
24025010:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
24025020:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
24025030:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
24025040:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
24025050:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
24025060:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
24025070:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
24025080:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
24025090:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
240250a0:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
240250b0:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
240250c0:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
240250d0:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
240250e0:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
240250f0:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
24025100:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
24025110:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
24025120:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
24025130:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
24025140:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
24025150:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
24025160:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
24025170:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
24025180:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
24025190:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
240251a0:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
240251b0:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
240251c0:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
240251d0:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
240251e0:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
240251f0:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
24025200:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
24025210:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
24025220:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
24025230:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
24025240:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
24025250:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
24025260:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
24025270:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
24025280:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
24025290:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
240252a0:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
240252b0:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
240252c0:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
240252d0:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
240252e0:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
240252f0:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
24025300:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
24025310:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
24025320:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
24025330:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
24025340:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
24025350:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
24025360:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
24025370:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
24025380:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
24025390:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
240253a0:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
240253b0:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
240253c0:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
240253d0:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
240253e0:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
240253f0:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
24025400:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
24025410:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
24025420:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
24025430:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
24025440:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
24025450:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
24025460:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
24025470:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
24025480:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
24025490:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
240254a0:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
240254b0:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
240254c0:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
240254d0:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
240254e0:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
240254f0:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
24025500:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
24025510:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
24025520:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
24025530:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
24025540:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
24025550:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
24025560:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
24025570:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
24025580:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
24025590:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
240255a0:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
240255b0:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
240255c0:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
240255d0:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
240255e0:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
240255f0:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
24025600:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
24025610:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
24025620:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
24025630:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
24025640:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
24025650:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
24025660:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
24025670:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
24025680:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
24025690:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
240256a0:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
240256b0:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
240256c0:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
240256d0:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
240256e0:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
240256f0:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
24025700:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
24025710:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
24025720:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
24025730:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
24025740:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
24025750:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
24025760:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
24025770:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
24025780:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
24025790:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
240257a0:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
240257b0:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
240257c0:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
240257d0:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
240257e0:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
240257f0:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
24025800:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
24025810:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
24025820:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
24025830:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
24025840:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
24025850:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
24025860:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
24025870:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
24025880:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
24025890:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
240258a0:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
240258b0:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
240258c0:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
240258d0:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
240258e0:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
240258f0:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
24025900:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
24025910:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
24025920:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
24025930:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
24025940:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
24025950:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
24025960:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
24025970:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
24025980:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
24025990:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
240259a0:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
240259b0:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
240259c0:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
240259d0:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
240259e0:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
240259f0:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
24025a00:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
24025a10:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
24025a20:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
24025a30:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
24025a40:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
24025a50:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
24025a60:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
24025a70:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
24025a80:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
24025a90:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
24025aa0:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
24025ab0:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
24025ac0:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
24025ad0:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
24025ae0:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
24025af0:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
24025b00:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
24025b10:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
24025b20:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
24025b30:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
24025b40:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
24025b50:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
24025b60:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
24025b70:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
24025b80:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
24025b90:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
24025ba0:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
24025bb0:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
24025bc0:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
24025bd0:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
24025be0:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
24025bf0:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
24025c00:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
24025c10:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
24025c20:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
24025c30:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
24025c40:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
24025c50:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
24025c60:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
24025c70:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
24025c80:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
24025c90:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
24025ca0:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
24025cb0:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
24025cc0:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
24025cd0:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
24025ce0:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
24025cf0:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
24025d00:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
24025d10:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
24025d20:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
24025d30:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
24025d40:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
24025d50:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
24025d60:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
24025d70:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
24025d80:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
24025d90:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
24025da0:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
24025db0:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
24025dc0:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
24025dd0:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
24025de0:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
24025df0:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
24025e00:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
24025e10:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
24025e20:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
24025e30:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
24025e40:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
24025e50:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
24025e60:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
24025e70:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
24025e80:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
24025e90:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
24025ea0:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
24025eb0:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
24025ec0:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
24025ed0:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
24025ee0:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
24025ef0:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
24025f00:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
24025f10:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
24025f20:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
24025f30:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
24025f40:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
24025f50:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
24025f60:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
24025f70:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
24025f80:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
24025f90:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
24025fa0:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
24025fb0:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
24025fc0:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
24025fd0:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
24025fe0:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
24025ff0:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
24026000:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
24026010:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
24026020:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
24026030:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
24026040:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
24026050:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
24026060:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
24026070:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
24026080:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
24026090:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
240260a0:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
240260b0:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
240260c0:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
240260d0:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
240260e0:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
240260f0:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
24026100:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
24026110:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
24026120:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
24026130:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
24026140:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
24026150:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
24026160:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
24026170:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
24026180:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
24026190:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
240261a0:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
240261b0:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
240261c0:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
240261d0:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
240261e0:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
240261f0:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
24026200:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
24026210:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
24026220:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
24026230:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
24026240:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
24026250:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
24026260:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
24026270:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
24026280:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
24026290:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
240262a0:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
240262b0:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
240262c0:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
240262d0:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
240262e0:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
240262f0:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
24026300:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
24026310:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
24026320:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
24026330:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
24026340:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
24026350:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
24026360:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
24026370:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
24026380:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
24026390:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
240263a0:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
240263b0:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
240263c0:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
240263d0:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
240263e0:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
240263f0:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
24026400:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
24026410:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
24026420:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
24026430:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
24026440:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
24026450:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
24026460:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
24026470:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
24026480:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
24026490:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
240264a0:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
240264b0:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
240264c0:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
240264d0:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
240264e0:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
240264f0:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
24026500:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
24026510:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
24026520:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
24026530:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
24026540:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
24026550:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
24026560:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
24026570:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
24026580:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
24026590:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
240265a0:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
240265b0:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
240265c0:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
240265d0:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
240265e0:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
240265f0:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
24026600:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
24026610:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
24026620:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
24026630:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
24026640:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
24026650:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
24026660:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
24026670:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
24026680:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
24026690:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
240266a0:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
240266b0:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
240266c0:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
240266d0:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
240266e0:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
240266f0:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
24026700:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
24026710:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
24026720:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
24026730:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
24026740:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
24026750:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
24026760:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
24026770:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
24026780:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
24026790:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
240267a0:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
240267b0:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
240267c0:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
240267d0:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
240267e0:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
240267f0:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
24026800:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
24026810:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
24026820:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
24026830:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
24026840:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
24026850:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
24026860:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
24026870:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
24026880:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
24026890:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
240268a0:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
240268b0:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
240268c0:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
240268d0:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
240268e0:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
240268f0:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
24026900:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
24026910:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
24026920:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
24026930:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
24026940:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
24026950:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
24026960:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
24026970:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
24026980:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
24026990:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
240269a0:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
240269b0:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
240269c0:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
240269d0:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
240269e0:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
240269f0:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
24026a00:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
24026a10:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
24026a20:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
24026a30:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
24026a40:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
24026a50:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
24026a60:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
24026a70:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
24026a80:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
24026a90:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
24026aa0:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
24026ab0:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
24026ac0:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
24026ad0:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
24026ae0:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
24026af0:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
24026b00:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
24026b10:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
24026b20:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
24026b30:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
24026b40:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
24026b50:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
24026b60:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
24026b70:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
24026b80:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
24026b90:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
24026ba0:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
24026bb0:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
24026bc0:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
24026bd0:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
24026be0:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
24026bf0:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
24026c00:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
24026c10:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
24026c20:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
24026c30:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
24026c40:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
24026c50:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
24026c60:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
24026c70:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
24026c80:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
24026c90:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
24026ca0:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
24026cb0:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
24026cc0:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
24026cd0:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
24026ce0:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
24026cf0:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
24026d00:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
24026d10:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
24026d20:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
24026d30:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
24026d40:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
24026d50:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
24026d60:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
24026d70:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
24026d80:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
24026d90:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
24026da0:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
24026db0:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
24026dc0:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
24026dd0:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
24026de0:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
24026df0:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
24026e00:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
24026e10:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
24026e20:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
24026e30:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
24026e40:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
24026e50:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
24026e60:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
24026e70:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
24026e80:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
24026e90:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
24026ea0:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
24026eb0:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
24026ec0:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
24026ed0:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
24026ee0:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
24026ef0:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
24026f00:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
24026f10:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
24026f20:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
24026f30:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
24026f40:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
24026f50:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
24026f60:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
24026f70:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
24026f80:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
24026f90:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
24026fa0:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
24026fb0:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
24026fc0:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
24026fd0:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
24026fe0:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
24026ff0:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
24027000:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
24027010:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
24027020:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
24027030:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
24027040:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
24027050:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
24027060:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
24027070:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
24027080:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
24027090:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
240270a0:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
240270b0:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
240270c0:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
240270d0:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
240270e0:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
240270f0:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
24027100:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
24027110:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
24027120:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
24027130:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
24027140:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
24027150:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
24027160:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
24027170:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
24027180:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
24027190:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
240271a0:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
240271b0:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
240271c0:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
240271d0:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
240271e0:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
240271f0:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
24027200:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
24027210:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
24027220:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
24027230:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
24027240:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
24027250:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
24027260:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
24027270:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
24027280:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
24027290:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
240272a0:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
240272b0:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
240272c0:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
240272d0:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
240272e0:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
240272f0:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
24027300:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
24027310:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
24027320:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
24027330:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
24027340:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
24027350:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
24027360:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
24027370:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
24027380:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
24027390:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
240273a0:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
240273b0:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
240273c0:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
240273d0:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
240273e0:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
240273f0:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
24027400:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
24027410:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
24027420:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
24027430:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
24027440:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
24027450:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
24027460:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
24027470:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
24027480:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
24027490:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
240274a0:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
240274b0:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
240274c0:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
240274d0:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
240274e0:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
240274f0:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
24027500:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
24027510:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
24027520:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
24027530:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
24027540:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
24027550:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
24027560:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
24027570:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
24027580:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
24027590:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
240275a0:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
240275b0:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
240275c0:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
240275d0:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
240275e0:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
240275f0:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
24027600:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
24027610:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
24027620:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
24027630:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
24027640:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
24027650:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
24027660:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
24027670:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
24027680:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
24027690:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
240276a0:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
240276b0:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
240276c0:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
240276d0:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
240276e0:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
240276f0:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
24027700:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
24027710:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
24027720:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
24027730:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
24027740:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
24027750:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
24027760:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
24027770:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
24027780:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
24027790:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
240277a0:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
240277b0:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
240277c0:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
240277d0:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
240277e0:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
240277f0:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
24027800:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
24027810:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
24027820:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
24027830:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
24027840:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
24027850:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
24027860:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
24027870:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
24027880:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
24027890:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
240278a0:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
240278b0:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
240278c0:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
240278d0:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
240278e0:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
240278f0:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
24027900:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
24027910:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
24027920:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
24027930:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
24027940:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
24027950:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
24027960:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
24027970:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
24027980:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
24027990:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
240279a0:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
240279b0:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
240279c0:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
240279d0:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
240279e0:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
240279f0:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
24027a00:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
24027a10:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
24027a20:	b89cc6ac bafe109a b89407ce bb03a88e     ................
24027a30:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
24027a40:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
24027a50:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
24027a60:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
24027a70:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
24027a80:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
24027a90:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
24027aa0:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
24027ab0:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
24027ac0:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
24027ad0:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
24027ae0:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
24027af0:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
24027b00:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
24027b10:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
24027b20:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
24027b30:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
24027b40:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
24027b50:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
24027b60:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
24027b70:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
24027b80:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
24027b90:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
24027ba0:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
24027bb0:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
24027bc0:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
24027bd0:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
24027be0:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
24027bf0:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
24027c00:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
24027c10:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
24027c20:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
24027c30:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
24027c40:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
24027c50:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
24027c60:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
24027c70:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
24027c80:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
24027c90:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
24027ca0:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
24027cb0:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
24027cc0:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
24027cd0:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
24027ce0:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
24027cf0:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
24027d00:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
24027d10:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
24027d20:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
24027d30:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
24027d40:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
24027d50:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
24027d60:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
24027d70:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
24027d80:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
24027d90:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
24027da0:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
24027db0:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
24027dc0:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
24027dd0:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
24027de0:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
24027df0:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
24027e00:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
24027e10:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
24027e20:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
24027e30:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
24027e40:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
24027e50:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
24027e60:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
24027e70:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
24027e80:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
24027e90:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
24027ea0:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
24027eb0:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
24027ec0:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
24027ed0:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
24027ee0:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
24027ef0:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
24027f00:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
24027f10:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
24027f20:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
24027f30:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
24027f40:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
24027f50:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
24027f60:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
24027f70:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
24027f80:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
24027f90:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
24027fa0:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
24027fb0:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
24027fc0:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
24027fd0:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
24027fe0:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
24027ff0:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
24028000:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
24028010:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
24028020:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
24028030:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
24028040:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
24028050:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
24028060:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
24028070:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
24028080:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
24028090:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
240280a0:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
240280b0:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
240280c0:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
240280d0:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
240280e0:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
240280f0:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
24028100:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
24028110:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
24028120:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
24028130:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
24028140:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
24028150:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
24028160:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
24028170:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
24028180:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
24028190:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
240281a0:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
240281b0:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
240281c0:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
240281d0:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
240281e0:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
240281f0:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
24028200:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
24028210:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
24028220:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
24028230:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
24028240:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
24028250:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
24028260:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
24028270:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
24028280:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
24028290:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
240282a0:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
240282b0:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
240282c0:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
240282d0:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
240282e0:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
240282f0:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
24028300:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
24028310:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
24028320:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
24028330:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
24028340:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
24028350:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
24028360:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24028370:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24028380:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
24028390:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
240283a0:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
240283b0:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
240283c0:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
240283d0:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
240283e0:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
240283f0:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
24028400:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
24028410:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
24028420:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
24028430:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
24028440:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
24028450:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
24028460:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24028470:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24028480:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
24028490:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
240284a0:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
240284b0:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
240284c0:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
240284d0:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
240284e0:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
240284f0:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
24028500:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
24028510:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
24028520:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
24028530:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
24028540:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
24028550:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
24028560:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24028570:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24028580:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24028590:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
240285a0:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
240285b0:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
240285c0:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
240285d0:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
240285e0:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
240285f0:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
24028600:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
24028610:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
24028620:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
24028630:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
24028640:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
24028650:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
24028660:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24028670:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24028680:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24028690:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
240286a0:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
240286b0:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
240286c0:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
240286d0:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
240286e0:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
240286f0:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
24028700:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
24028710:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
24028720:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
24028730:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
24028740:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
24028750:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
24028760:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24028770:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24028780:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24028790:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
240287a0:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
240287b0:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
240287c0:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
240287d0:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
240287e0:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
240287f0:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
24028800:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
24028810:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
24028820:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
24028830:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
24028840:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
24028850:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
24028860:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24028870:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24028880:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24028890:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
240288a0:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
240288b0:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
240288c0:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
240288d0:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
240288e0:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
240288f0:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
24028900:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
24028910:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
24028920:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
24028930:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
24028940:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
24028950:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
24028960:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
24028970:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
24028980:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
24028990:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
240289a0:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
240289b0:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
240289c0:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
240289d0:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
240289e0:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
240289f0:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
24028a00:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
24028a10:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
24028a20:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
24028a30:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
24028a40:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
24028a50:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
24028a60:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
24028a70:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
24028a80:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
24028a90:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
24028aa0:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
24028ab0:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
24028ac0:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
24028ad0:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
24028ae0:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
24028af0:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
24028b00:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
24028b10:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
24028b20:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
24028b30:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
24028b40:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
24028b50:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
24028b60:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
24028b70:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
24028b80:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
24028b90:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
24028ba0:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
24028bb0:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
24028bc0:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
24028bd0:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
24028be0:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
24028bf0:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
24028c00:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
24028c10:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
24028c20:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
24028c30:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
24028c40:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
24028c50:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
24028c60:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
24028c70:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
24028c80:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
24028c90:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
24028ca0:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
24028cb0:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
24028cc0:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
24028cd0:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
24028ce0:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
24028cf0:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
24028d00:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
24028d10:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
24028d20:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
24028d30:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
24028d40:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
24028d50:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
24028d60:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
24028d70:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
24028d80:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
24028d90:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
24028da0:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
24028db0:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
24028dc0:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
24028dd0:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
24028de0:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
24028df0:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
24028e00:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
24028e10:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
24028e20:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
24028e30:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
24028e40:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
24028e50:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
24028e60:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
24028e70:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
24028e80:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
24028e90:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
24028ea0:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
24028eb0:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
24028ec0:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
24028ed0:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
24028ee0:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
24028ef0:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
24028f00:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
24028f10:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
24028f20:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
24028f30:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
24028f40:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
24028f50:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
24028f60:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
24028f70:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
24028f80:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
24028f90:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
24028fa0:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
24028fb0:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
24028fc0:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
24028fd0:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
24028fe0:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
24028ff0:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
24029000:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
24029010:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
24029020:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
24029030:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
24029040:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
24029050:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
24029060:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
24029070:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
24029080:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
24029090:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
240290a0:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
240290b0:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
240290c0:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
240290d0:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
240290e0:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
240290f0:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
24029100:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
24029110:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
24029120:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
24029130:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
24029140:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
24029150:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
24029160:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
24029170:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
24029180:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
24029190:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
240291a0:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
240291b0:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
240291c0:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
240291d0:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
240291e0:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
240291f0:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
24029200:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
24029210:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
24029220:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
24029230:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
24029240:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
24029250:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
24029260:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
24029270:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
24029280:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
24029290:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
240292a0:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
240292b0:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
240292c0:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
240292d0:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
240292e0:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
240292f0:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
24029300:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
24029310:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
24029320:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
24029330:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
24029340:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
24029350:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
24029360:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
24029370:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
24029380:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
24029390:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
240293a0:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
240293b0:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
240293c0:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
240293d0:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
240293e0:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
240293f0:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
24029400:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
24029410:	b7168bbf b8839904 b7135056 b896030f     ........VP......
24029420:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
24029430:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
24029440:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
24029450:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
24029460:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
24029470:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
24029480:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
24029490:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
240294a0:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
240294b0:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
240294c0:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
240294d0:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
240294e0:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
240294f0:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
24029500:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
24029510:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
24029520:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
24029530:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
24029540:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
24029550:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
24029560:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
24029570:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
24029580:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
24029590:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
240295a0:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
240295b0:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
240295c0:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
240295d0:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
240295e0:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
240295f0:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
24029600:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
24029610:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
24029620:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
24029630:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
24029640:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
24029650:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
24029660:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
24029670:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
24029680:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
24029690:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
240296a0:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
240296b0:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
240296c0:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
240296d0:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
240296e0:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
240296f0:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
24029700:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
24029710:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
24029720:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
24029730:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
24029740:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
24029750:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
24029760:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
24029770:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
24029780:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
24029790:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
240297a0:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
240297b0:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
240297c0:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
240297d0:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
240297e0:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
240297f0:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
24029800:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
24029810:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
24029820:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
24029830:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
24029840:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
24029850:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
24029860:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
24029870:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
24029880:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
24029890:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
240298a0:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
240298b0:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
240298c0:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
240298d0:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
240298e0:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
240298f0:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
24029900:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
24029910:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
24029920:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
24029930:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
24029940:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
24029950:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
24029960:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
24029970:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
24029980:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
24029990:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
240299a0:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
240299b0:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
240299c0:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
240299d0:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
240299e0:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
240299f0:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
24029a00:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
24029a10:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
24029a20:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
24029a30:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
24029a40:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
24029a50:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
24029a60:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
24029a70:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
24029a80:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
24029a90:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
24029aa0:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24029ab0:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24029ac0:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24029ad0:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24029ae0:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24029af0:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24029b00:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24029b10:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24029b20:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24029b30:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
24029b40:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
24029b50:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
24029b60:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
24029b70:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
24029b80:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
24029b90:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
24029ba0:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
24029bb0:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
24029bc0:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
24029bd0:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
24029be0:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24029bf0:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24029c00:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24029c10:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24029c20:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24029c30:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
24029c40:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
24029c50:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
24029c60:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
24029c70:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
24029c80:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
24029c90:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
24029ca0:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
24029cb0:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
24029cc0:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
24029cd0:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
24029ce0:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24029cf0:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24029d00:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24029d10:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24029d20:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24029d30:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
24029d40:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
24029d50:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
24029d60:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
24029d70:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
24029d80:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
24029d90:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
24029da0:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
24029db0:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
24029dc0:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
24029dd0:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
24029de0:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24029df0:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24029e00:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24029e10:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24029e20:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24029e30:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
24029e40:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
24029e50:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
24029e60:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
24029e70:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
24029e80:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
24029e90:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
24029ea0:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24029eb0:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24029ec0:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24029ed0:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24029ee0:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24029ef0:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24029f00:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24029f10:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24029f20:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24029f30:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
24029f40:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
24029f50:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
24029f60:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
24029f70:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
24029f80:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
24029f90:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
24029fa0:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24029fb0:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
24029fc0:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
24029fd0:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
24029fe0:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24029ff0:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
2402a000:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
2402a010:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
2402a020:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
2402a030:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
2402a040:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
2402a050:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
2402a060:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
2402a070:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
2402a080:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
2402a090:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
2402a0a0:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
2402a0b0:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
2402a0c0:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
2402a0d0:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
2402a0e0:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
2402a0f0:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
2402a100:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
2402a110:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
2402a120:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
2402a130:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
2402a140:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
2402a150:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
2402a160:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
2402a170:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
2402a180:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
2402a190:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
2402a1a0:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
2402a1b0:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
2402a1c0:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
2402a1d0:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
2402a1e0:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
2402a1f0:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
2402a200:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
2402a210:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
2402a220:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
2402a230:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
2402a240:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
2402a250:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
2402a260:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
2402a270:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
2402a280:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
2402a290:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
2402a2a0:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
2402a2b0:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
2402a2c0:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
2402a2d0:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
2402a2e0:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
2402a2f0:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
2402a300:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
2402a310:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
2402a320:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
2402a330:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
2402a340:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
2402a350:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
2402a360:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
2402a370:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
2402a380:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
2402a390:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
2402a3a0:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
2402a3b0:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
2402a3c0:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
2402a3d0:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
2402a3e0:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
2402a3f0:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
2402a400:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
2402a410:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
2402a420:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
2402a430:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
2402a440:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
2402a450:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
2402a460:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
2402a470:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
2402a480:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
2402a490:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
2402a4a0:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
2402a4b0:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
2402a4c0:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
2402a4d0:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
2402a4e0:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
2402a4f0:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
2402a500:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
2402a510:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
2402a520:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
2402a530:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
2402a540:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
2402a550:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
2402a560:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
2402a570:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
2402a580:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
2402a590:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
2402a5a0:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
2402a5b0:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
2402a5c0:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
2402a5d0:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
2402a5e0:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
2402a5f0:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
2402a600:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
2402a610:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
2402a620:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
2402a630:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
2402a640:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
2402a650:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
2402a660:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
2402a670:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
2402a680:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
2402a690:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
2402a6a0:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
2402a6b0:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
2402a6c0:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
2402a6d0:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
2402a6e0:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
2402a6f0:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
2402a700:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
2402a710:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
2402a720:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
2402a730:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
2402a740:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
2402a750:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
2402a760:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
2402a770:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
2402a780:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
2402a790:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
2402a7a0:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
2402a7b0:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
2402a7c0:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
2402a7d0:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
2402a7e0:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
2402a7f0:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
2402a800:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
2402a810:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
2402a820:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
2402a830:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
2402a840:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
2402a850:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
2402a860:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
2402a870:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
2402a880:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
2402a890:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
2402a8a0:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
2402a8b0:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
2402a8c0:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
2402a8d0:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
2402a8e0:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
2402a8f0:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
2402a900:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
2402a910:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
2402a920:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
2402a930:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
2402a940:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
2402a950:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
2402a960:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
2402a970:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
2402a980:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
2402a990:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
2402a9a0:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
2402a9b0:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
2402a9c0:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
2402a9d0:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
2402a9e0:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
2402a9f0:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
2402aa00:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
2402aa10:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
2402aa20:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
2402aa30:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
2402aa40:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
2402aa50:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
2402aa60:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
2402aa70:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
2402aa80:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
2402aa90:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
2402aaa0:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
2402aab0:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
2402aac0:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
2402aad0:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
2402aae0:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
2402aaf0:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
2402ab00:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
2402ab10:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
2402ab20:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
2402ab30:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
2402ab40:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
2402ab50:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
2402ab60:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
2402ab70:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
2402ab80:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
2402ab90:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
2402aba0:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
2402abb0:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
2402abc0:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
2402abd0:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
2402abe0:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
2402abf0:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
2402ac00:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
2402ac10:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
2402ac20:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
2402ac30:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
2402ac40:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
2402ac50:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
2402ac60:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
2402ac70:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
2402ac80:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
2402ac90:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
2402aca0:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
2402acb0:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
2402acc0:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
2402acd0:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
2402ace0:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
2402acf0:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
2402ad00:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
2402ad10:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
2402ad20:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
2402ad30:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
2402ad40:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
2402ad50:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
2402ad60:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
2402ad70:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
2402ad80:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
2402ad90:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
2402ada0:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
2402adb0:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
2402adc0:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
2402add0:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
2402ade0:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
2402adf0:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
2402ae00:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
2402ae10:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
2402ae20:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
2402ae30:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
2402ae40:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
2402ae50:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
2402ae60:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
2402ae70:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
2402ae80:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
2402ae90:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
2402aea0:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
2402aeb0:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
2402aec0:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
2402aed0:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
2402aee0:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
2402aef0:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
2402af00:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
2402af10:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
2402af20:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
2402af30:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
2402af40:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
2402af50:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
2402af60:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
2402af70:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
2402af80:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
2402af90:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
2402afa0:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
2402afb0:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
2402afc0:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
2402afd0:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
2402afe0:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
2402aff0:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
2402b000:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
2402b010:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
2402b020:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
2402b030:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
2402b040:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
2402b050:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
2402b060:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
2402b070:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
2402b080:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
2402b090:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
2402b0a0:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
2402b0b0:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
2402b0c0:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
2402b0d0:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
2402b0e0:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
2402b0f0:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
2402b100:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
2402b110:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
2402b120:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
2402b130:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
2402b140:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
2402b150:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
2402b160:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
2402b170:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
2402b180:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
2402b190:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
2402b1a0:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
2402b1b0:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
2402b1c0:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
2402b1d0:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
2402b1e0:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
2402b1f0:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
2402b200:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
2402b210:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
2402b220:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
2402b230:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
2402b240:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
2402b250:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
2402b260:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
2402b270:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
2402b280:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
2402b290:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
2402b2a0:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
2402b2b0:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
2402b2c0:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
2402b2d0:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
2402b2e0:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
2402b2f0:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
2402b300:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
2402b310:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
2402b320:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
2402b330:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
2402b340:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
2402b350:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
2402b360:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
2402b370:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
2402b380:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
2402b390:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
2402b3a0:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
2402b3b0:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
2402b3c0:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
2402b3d0:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
2402b3e0:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
2402b3f0:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
2402b400:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
2402b410:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
2402b420:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
2402b430:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
2402b440:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
2402b450:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
2402b460:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
2402b470:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
2402b480:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
2402b490:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
2402b4a0:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
2402b4b0:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
2402b4c0:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
2402b4d0:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
2402b4e0:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
2402b4f0:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
2402b500:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
2402b510:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
2402b520:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
2402b530:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
2402b540:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
2402b550:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
2402b560:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
2402b570:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
2402b580:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
2402b590:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
2402b5a0:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
2402b5b0:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
2402b5c0:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
2402b5d0:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
2402b5e0:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
2402b5f0:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
2402b600:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
2402b610:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
2402b620:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
2402b630:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
2402b640:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
2402b650:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
2402b660:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
2402b670:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
2402b680:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
2402b690:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
2402b6a0:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
2402b6b0:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
2402b6c0:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
2402b6d0:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
2402b6e0:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
2402b6f0:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
2402b700:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
2402b710:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
2402b720:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
2402b730:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
2402b740:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
2402b750:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
2402b760:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
2402b770:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
2402b780:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
2402b790:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
2402b7a0:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
2402b7b0:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
2402b7c0:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
2402b7d0:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
2402b7e0:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
2402b7f0:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
2402b800:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
2402b810:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
2402b820:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
2402b830:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
2402b840:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
2402b850:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
2402b860:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
2402b870:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
2402b880:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
2402b890:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
2402b8a0:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
2402b8b0:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
2402b8c0:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
2402b8d0:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
2402b8e0:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
2402b8f0:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
2402b900:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
2402b910:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
2402b920:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
2402b930:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
2402b940:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
2402b950:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
2402b960:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
2402b970:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
2402b980:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
2402b990:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
2402b9a0:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
2402b9b0:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
2402b9c0:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
2402b9d0:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
2402b9e0:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
2402b9f0:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
2402ba00:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
2402ba10:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
2402ba20:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
2402ba30:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
2402ba40:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
2402ba50:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
2402ba60:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
2402ba70:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
2402ba80:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
2402ba90:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
2402baa0:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
2402bab0:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
2402bac0:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
2402bad0:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
2402bae0:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
2402baf0:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
2402bb00:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
2402bb10:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
2402bb20:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
2402bb30:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
2402bb40:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
2402bb50:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
2402bb60:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
2402bb70:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
2402bb80:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
2402bb90:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

2402bbb4 <sinTable_f32>:
2402bbb4:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2402bbc4:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2402bbd4:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2402bbe4:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2402bbf4:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2402bc04:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2402bc14:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2402bc24:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2402bc34:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2402bc44:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2402bc54:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2402bc64:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2402bc74:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2402bc84:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2402bc94:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2402bca4:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2402bcb4:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2402bcc4:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2402bcd4:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2402bce4:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2402bcf4:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2402bd04:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2402bd14:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2402bd24:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2402bd34:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2402bd44:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2402bd54:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2402bd64:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2402bd74:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2402bd84:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2402bd94:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2402bda4:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2402bdb4:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2402bdc4:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2402bdd4:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2402bde4:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2402bdf4:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2402be04:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2402be14:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2402be24:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2402be34:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2402be44:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2402be54:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2402be64:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2402be74:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2402be84:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2402be94:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2402bea4:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2402beb4:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2402bec4:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2402bed4:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2402bee4:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2402bef4:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2402bf04:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2402bf14:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2402bf24:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2402bf34:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2402bf44:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2402bf54:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2402bf64:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2402bf74:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2402bf84:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2402bf94:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2402bfa4:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2402bfb4:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2402bfc4:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2402bfd4:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2402bfe4:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2402bff4:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2402c004:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2402c014:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2402c024:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2402c034:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2402c044:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2402c054:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2402c064:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2402c074:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2402c084:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2402c094:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2402c0a4:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2402c0b4:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2402c0c4:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2402c0d4:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2402c0e4:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2402c0f4:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2402c104:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2402c114:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2402c124:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2402c134:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2402c144:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2402c154:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2402c164:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2402c174:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2402c184:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2402c194:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2402c1a4:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2402c1b4:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2402c1c4:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2402c1d4:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2402c1e4:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2402c1f4:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2402c204:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2402c214:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2402c224:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2402c234:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2402c244:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2402c254:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2402c264:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2402c274:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2402c284:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2402c294:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2402c2a4:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2402c2b4:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2402c2c4:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2402c2d4:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2402c2e4:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2402c2f4:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2402c304:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2402c314:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2402c324:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2402c334:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2402c344:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2402c354:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2402c364:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2402c374:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2402c384:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2402c394:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2402c3a4:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2402c3b4:	80000000 33323130 37363534 62613938     ....0123456789ab
2402c3c4:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
2402c3d4:	76757473 7a797877 00000000              stuvwxyz....

2402c3e0 <__exp_data>:
2402c3e0:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402c3f0:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402c400:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402c410:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402c420:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402c430:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402c440:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402c45c:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402c46c:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402c47c:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402c48c:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402c49c:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402c4ac:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402c4bc:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402c4cc:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402c4dc:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402c4ec:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402c4fc:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402c50c:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402c51c:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402c52c:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402c53c:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402c54c:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402c55c:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402c56c:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402c57c:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402c58c:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402c59c:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402c5ac:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402c5bc:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402c5cc:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402c5dc:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402c5ec:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402c5fc:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402c60c:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402c61c:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402c62c:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402c63c:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402c64c:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402c65c:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402c66c:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402c67c:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402c68c:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402c69c:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402c6ac:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402c6bc:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402c6cc:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402c6dc:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402c6ec:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402c6fc:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402c70c:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402c71c:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402c72c:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402c73c:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402c74c:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402c75c:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402c76c:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402c77c:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402c78c:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402c79c:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402c7ac:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402c7bc:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402c7cc:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402c7dc:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402c7ec:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402c7fc:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402c80c:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402c81c:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402c82c:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402c83c:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402c84c:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402c85c:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402c86c:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402c87c:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402c88c:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402c89c:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402c8ac:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402c8bc:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402c8cc:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402c8dc:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402c8ec:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402c8fc:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402c90c:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402c91c:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402c92c:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402c93c:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402c94c:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402c95c:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402c96c:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402c97c:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402c98c:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402c99c:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402c9ac:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402c9bc:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402c9cc:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402c9dc:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402c9ec:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402c9fc:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402ca0c:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402ca1c:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402ca2c:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402ca3c:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402ca4c:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402ca5c:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402ca6c:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402ca7c:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402ca8c:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402ca9c:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402caac:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402cabc:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402cacc:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402cadc:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402caec:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402cafc:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402cb0c:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402cb1c:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402cb2c:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402cb3c:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402cb4c:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402cb5c:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402cb6c:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402cb7c:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402cb8c:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402cb9c:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402cbac:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402cbbc:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402cbcc:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402cbdc:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402cbec:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402cbfc:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402cc0c:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402cc1c:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402cc2c:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402cc3c:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402cc4c:	3feff3c2                                ...?

2402cc50 <__exp2f_data>:
2402cc50:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402cc60:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402cc70:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402cc80:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402cc90:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402cca0:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402ccb0:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402ccc0:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402ccd0:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402cce0:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402ccf0:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402cd00:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402cd10:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402cd20:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402cd30:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402cd40:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402cd50:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402cd60:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402cd70:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402cd80:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402cd90:	ff0c52d6 3f962e42                       .R..B..?

2402cd98 <__logf_data>:
2402cd98:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402cda8:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402cdb8:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402cdc8:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402cdd8:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402cde8:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402cdf8:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402ce08:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402ce18:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402ce28:	00000000 3ff00000 00000000 00000000     .......?........
2402ce38:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402ce48:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402ce58:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402ce68:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402ce78:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402ce88:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402ce98:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402cea8:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402ceb8 <TWO23>:
2402ceb8:	4b000000 cb000000                       ...K....

2402cec0 <__powf_log2_data>:
2402cec0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402ced0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402cee0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402cef0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402cf00:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402cf10:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402cf20:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402cf30:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402cf40:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402cf50:	00000000 3ff00000 00000000 00000000     .......?........
2402cf60:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402cf70:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402cf80:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402cf90:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402cfa0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402cfb0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402cfc0:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402cfd0:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402cfe0:	652ab82b 3ff71547                       +.*eG..?

2402cfe8 <__inv_pio4>:
2402cfe8:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
2402cff8:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
2402d008:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
2402d018:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
2402d028:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
2402d038:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

2402d048 <__sincosf_table>:
2402d048:	00000000 3ff00000 00000000 bff00000     .......?........
2402d058:	00000000 bff00000 00000000 3ff00000     ...............?
2402d068:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402d078:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
2402d088:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
2402d098:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
2402d0a8:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
2402d0b8:	00000000 3ff00000 00000000 bff00000     .......?........
2402d0c8:	00000000 bff00000 00000000 3ff00000     ...............?
2402d0d8:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402d0e8:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
2402d0f8:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
2402d108:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
2402d118:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

2402d128 <Zero>:
	...
2402d134:	80000000                                ....

2402d138 <npio2_hw>:
2402d138:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402d148:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402d158:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402d168:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402d178:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402d188:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402d198:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402d1a8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402d1b8 <two_over_pi>:
2402d1b8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402d1c8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402d1d8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402d1e8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402d1f8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402d208:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402d218:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402d228:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402d238:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402d248:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402d258:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402d268:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402d278:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402d288:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402d298:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402d2a8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402d2b8:	0060e27b 00c08c6b                       {.`.k...

2402d2c0 <Zero>:
2402d2c0:	00000000 80000000                       ........

2402d2c8 <npio2_hw>:
2402d2c8:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402d2d8:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402d2e8:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402d2f8:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402d308:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402d318:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402d328:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402d338:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402d348 <two_over_pi>:
2402d348:	000000a2 000000f9 00000083 0000006e     ............n...
2402d358:	0000004e 00000044 00000015 00000029     N...D.......)...
2402d368:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402d378:	000000f5 00000034 000000dd 000000c0     ....4...........
2402d388:	000000db 00000062 00000095 00000099     ....b...........
2402d398:	0000003c 00000043 00000090 00000041     <...C.......A...
2402d3a8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402d3b8:	000000de 000000bb 000000c5 00000061     ............a...
2402d3c8:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402d3d8:	00000042 0000004d 000000d2 000000e0     B...M...........
2402d3e8:	00000006 00000049 0000002e 000000ea     ....I...........
2402d3f8:	00000009 000000d1 00000092 0000001c     ................
2402d408:	000000fe 0000001d 000000eb 0000001c     ................
2402d418:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402d428:	000000e8 00000082 00000035 000000f5     ........5.......
2402d438:	0000002e 000000bb 00000044 00000084     ........D.......
2402d448:	000000e9 0000009c 00000070 00000026     ........p...&...
2402d458:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402d468:	00000039 00000091 000000d6 00000039     9...........9...
2402d478:	00000083 00000053 00000039 000000f4     ....S...9.......
2402d488:	0000009c 00000084 0000005f 0000008b     ........_.......
2402d498:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402d4a8:	0000001f 000000f8 00000097 000000ff     ................
2402d4b8:	000000de 00000005 00000098 0000000f     ................
2402d4c8:	000000ef 0000002f 00000011 0000008b     ..../...........
2402d4d8:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402d4e8:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402d4f8:	00000027 000000cb 00000009 000000b7     '...............
2402d508:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402d518:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402d528:	00000075 00000027 000000ba 000000c7     u...'...........
2402d538:	000000eb 000000e5 000000f1 0000007b     ............{...
2402d548:	0000003d 00000007 00000039 000000f7     =.......9.......
2402d558:	0000008a 00000052 00000092 000000ea     ....R...........
2402d568:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402d578:	0000001f 0000008d 0000005d 00000008     ........].......
2402d588:	00000056 00000003 00000030 00000046     V.......0...F...
2402d598:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402d5a8:	000000f0 000000cf 000000bc 00000020     ............ ...
2402d5b8:	0000009a 000000f4 00000036 0000001d     ........6.......
2402d5c8:	000000a9 000000e3 00000091 00000061     ............a...
2402d5d8:	0000005e 000000e6 0000001b 00000008     ^...............
2402d5e8:	00000065 00000099 00000085 0000005f     e..........._...
2402d5f8:	00000014 000000a0 00000068 00000040     ........h...@...
2402d608:	0000008d 000000ff 000000d8 00000080     ................
2402d618:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402d628:	00000006 00000006 00000015 00000056     ............V...
2402d638:	000000ca 00000073 000000a8 000000c9     ....s...........
2402d648:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402d658:	0000008c 0000006b                       ....k...

2402d660 <PIo2>:
2402d660:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402d670:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402d680:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402d690:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402d6a0 <init_jk>:
2402d6a0:	00000002 00000003 00000004 00000006     ................

2402d6b0 <PIo2>:
2402d6b0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402d6c0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402d6d0:	1fc40000 1bc60000 17440000              ..........D.

2402d6dc <init_jk>:
2402d6dc:	00000004 00000007 00000009              ............

2402d6e8 <_init>:
2402d6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402d6ea:	bf00      	nop
2402d6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402d6ee:	bc08      	pop	{r3}
2402d6f0:	469e      	mov	lr, r3
2402d6f2:	4770      	bx	lr

2402d6f4 <_fini>:
2402d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402d6f6:	bf00      	nop
2402d6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402d6fa:	bc08      	pop	{r3}
2402d6fc:	469e      	mov	lr, r3
2402d6fe:	4770      	bx	lr

2402d700 <__HAL_SPI_RxHalfCpltCallback_veneer>:
2402d700:	f85f f000 	ldr.w	pc, [pc]	; 2402d704 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
2402d704:	00004921 	.word	0x00004921

2402d708 <__randomNumber_veneer>:
2402d708:	f85f f000 	ldr.w	pc, [pc]	; 2402d70c <__randomNumber_veneer+0x4>
2402d70c:	00005081 	.word	0x00005081

2402d710 <__tExpSmooth_setDest_veneer>:
2402d710:	f85f f000 	ldr.w	pc, [pc]	; 2402d714 <__tExpSmooth_setDest_veneer+0x4>
2402d714:	00007381 	.word	0x00007381

2402d718 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402d718:	f85f f000 	ldr.w	pc, [pc]	; 2402d71c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402d71c:	00004b21 	.word	0x00004b21

2402d720 <__HAL_SAI_TxCpltCallback_veneer>:
2402d720:	f85f f000 	ldr.w	pc, [pc]	; 2402d724 <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402d724:	00004c61 	.word	0x00004c61

2402d728 <__HAL_SAI_ErrorCallback_veneer>:
2402d728:	f85f f000 	ldr.w	pc, [pc]	; 2402d72c <__HAL_SAI_ErrorCallback_veneer+0x4>
2402d72c:	00004d21 	.word	0x00004d21

2402d730 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402d730:	f85f f000 	ldr.w	pc, [pc]	; 2402d734 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402d734:	000072c1 	.word	0x000072c1

2402d738 <__HAL_I2C_ErrorCallback_veneer>:
2402d738:	f85f f000 	ldr.w	pc, [pc]	; 2402d73c <__HAL_I2C_ErrorCallback_veneer+0x4>
2402d73c:	00007321 	.word	0x00007321

2402d740 <__parsePreset_veneer>:
2402d740:	f85f f000 	ldr.w	pc, [pc]	; 2402d744 <__parsePreset_veneer+0x4>
2402d744:	000050e1 	.word	0x000050e1

2402d748 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402d748:	f85f f000 	ldr.w	pc, [pc]	; 2402d74c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402d74c:	00004bc1 	.word	0x00004bc1

2402d750 <__LEAF_clip_veneer>:
2402d750:	f85f f000 	ldr.w	pc, [pc]	; 2402d754 <__LEAF_clip_veneer+0x4>
2402d754:	000074a1 	.word	0x000074a1

2402d758 <__HAL_SPI_RxCpltCallback_veneer>:
2402d758:	f85f f000 	ldr.w	pc, [pc]	; 2402d75c <__HAL_SPI_RxCpltCallback_veneer+0x4>
2402d75c:	00004721 	.word	0x00004721

2402d760 <__tExpSmooth_tick_veneer>:
2402d760:	f85f f000 	ldr.w	pc, [pc]	; 2402d764 <__tExpSmooth_tick_veneer+0x4>
2402d764:	00007361 	.word	0x00007361

2402d768 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402d768:	f85f f000 	ldr.w	pc, [pc]	; 2402d76c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402d76c:	00004cc1 	.word	0x00004cc1

Disassembly of section .itcmram:

00000400 <updateStateFromSPIMessage>:
}
     400:	4a56      	ldr	r2, [pc, #344]	; (55c <updateStateFromSPIMessage+0x15c>)
     402:	1811      	adds	r1, r2, r0
     404:	b4f0      	push	{r4, r5, r6, r7}
     406:	7e0b      	ldrb	r3, [r1, #24]
     408:	4d55      	ldr	r5, [pc, #340]	; (560 <updateStateFromSPIMessage+0x160>)
     40a:	f3c3 1680 	ubfx	r6, r3, #6, #1
    __HAL_DMA_ENABLE(hdma);
     40e:	7e4c      	ldrb	r4, [r1, #25]
     410:	f3c3 1c40 	ubfx	ip, r3, #5, #1
     414:	4953      	ldr	r1, [pc, #332]	; (564 <updateStateFromSPIMessage+0x164>)
     416:	702e      	strb	r6, [r5, #0]
     418:	4e53      	ldr	r6, [pc, #332]	; (568 <updateStateFromSPIMessage+0x168>)
     41a:	600c      	str	r4, [r1, #0]
     41c:	f8c6 c000 	str.w	ip, [r6]
     420:	f3c3 1c00 	ubfx	ip, r3, #4, #1
     424:	4e51      	ldr	r6, [pc, #324]	; (56c <updateStateFromSPIMessage+0x16c>)
     426:	4c52      	ldr	r4, [pc, #328]	; (570 <updateStateFromSPIMessage+0x170>)
     428:	680f      	ldr	r7, [r1, #0]
     42a:	f8c6 c000 	str.w	ip, [r6]
     42e:	6826      	ldr	r6, [r4, #0]
     430:	42b7      	cmp	r7, r6
     432:	d00f      	beq.n	454 <updateStateFromSPIMessage+0x54>
     434:	680e      	ldr	r6, [r1, #0]
     436:	2e3f      	cmp	r6, #63	; 0x3f
     438:	d071      	beq.n	51e <updateStateFromSPIMessage+0x11e>
     43a:	680e      	ldr	r6, [r1, #0]
     43c:	2e3e      	cmp	r6, #62	; 0x3e
     43e:	d06e      	beq.n	51e <updateStateFromSPIMessage+0x11e>
     440:	680e      	ldr	r6, [r1, #0]
     442:	2e3d      	cmp	r6, #61	; 0x3d
     444:	d06b      	beq.n	51e <updateStateFromSPIMessage+0x11e>
     446:	4e4b      	ldr	r6, [pc, #300]	; (574 <updateStateFromSPIMessage+0x174>)
     448:	2701      	movs	r7, #1
     44a:	6037      	str	r7, [r6, #0]
     44c:	680e      	ldr	r6, [r1, #0]
     44e:	4f4a      	ldr	r7, [pc, #296]	; (578 <updateStateFromSPIMessage+0x178>)
     450:	b2f6      	uxtb	r6, r6
     452:	703e      	strb	r6, [r7, #0]
     454:	f003 030f 	and.w	r3, r3, #15
     458:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
     45c:	6809      	ldr	r1, [r1, #0]
     45e:	3b05      	subs	r3, #5
     460:	6021      	str	r1, [r4, #0]
     462:	ee07 3a90 	vmov	s15, r3
     466:	4c45      	ldr	r4, [pc, #276]	; (57c <updateStateFromSPIMessage+0x17c>)
     468:	7829      	ldrb	r1, [r5, #0]
     46a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     46e:	ee67 7a87 	vmul.f32	s15, s15, s14
     472:	edc4 7a00 	vstr	s15, [r4]
     476:	b149      	cbz	r1, 48c <updateStateFromSPIMessage+0x8c>
     478:	4b41      	ldr	r3, [pc, #260]	; (580 <updateStateFromSPIMessage+0x180>)
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	b133      	cbz	r3, 48c <updateStateFromSPIMessage+0x8c>
     47e:	4941      	ldr	r1, [pc, #260]	; (584 <updateStateFromSPIMessage+0x184>)
     480:	2b01      	cmp	r3, #1
     482:	edc1 7a00 	vstr	s15, [r1]
     486:	bf18      	it	ne
     488:	edc1 7a01 	vstrne	s15, [r1, #4]
     48c:	4410      	add	r0, r2
     48e:	4c3e      	ldr	r4, [pc, #248]	; (588 <updateStateFromSPIMessage+0x188>)
     490:	4a3e      	ldr	r2, [pc, #248]	; (58c <updateStateFromSPIMessage+0x18c>)
     492:	7e81      	ldrb	r1, [r0, #26]
     494:	7ec3      	ldrb	r3, [r0, #27]
     496:	eddf 7a3e 	vldr	s15, [pc, #248]	; 590 <updateStateFromSPIMessage+0x190>
     49a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     49e:	7f01      	ldrb	r1, [r0, #28]
     4a0:	7f40      	ldrb	r0, [r0, #29]
     4a2:	b29b      	uxth	r3, r3
     4a4:	4d3b      	ldr	r5, [pc, #236]	; (594 <updateStateFromSPIMessage+0x194>)
  HAL_StatusTypeDef status = HAL_OK;
     4a6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    __HAL_DMA_ENABLE(hdma);
     4aa:	493b      	ldr	r1, [pc, #236]	; (598 <updateStateFromSPIMessage+0x198>)
     4ac:	8023      	strh	r3, [r4, #0]
}
     4ae:	8823      	ldrh	r3, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b0:	b29b      	uxth	r3, r3
     4b2:	ee00 3a10 	vmov	s0, r3
     4b6:	7813      	ldrb	r3, [r2, #0]
}
     4b8:	b2db      	uxtb	r3, r3
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
     4be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     4c2:	7813      	ldrb	r3, [r2, #0]
  __HAL_LOCK(hdma);
     4c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    __HAL_DMA_ENABLE(hdma);
     4c8:	4834      	ldr	r0, [pc, #208]	; (59c <updateStateFromSPIMessage+0x19c>)
     4ca:	b2db      	uxtb	r3, r3
     4cc:	ed85 0a00 	vstr	s0, [r5]
}
     4d0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d4:	7813      	ldrb	r3, [r2, #0]
     4d6:	b2db      	uxtb	r3, r3
     4d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	429c      	cmp	r4, r3
     4de:	d01a      	beq.n	516 <updateStateFromSPIMessage+0x116>
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	7814      	ldrb	r4, [r2, #0]
     4e2:	7813      	ldrb	r3, [r2, #0]
     4e4:	b2e2      	uxtb	r2, r4
     4e6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 5a0 <updateStateFromSPIMessage+0x1a0>
     4ea:	b2db      	uxtb	r3, r3
     4ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
     4f4:	ed91 7a00 	vldr	s14, [r1]
     4f8:	edd1 7a01 	vldr	s15, [r1, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	4b28      	ldr	r3, [pc, #160]	; (5a4 <updateStateFromSPIMessage+0x1a4>)
     502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     506:	ee27 7a26 	vmul.f32	s14, s14, s13
     50a:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50e:	ed83 7a00 	vstr	s14, [r3]
     512:	edc3 7a01 	vstr	s15, [r3, #4]
     516:	4824      	ldr	r0, [pc, #144]	; (5a8 <updateStateFromSPIMessage+0x1a8>)
     518:	bcf0      	pop	{r4, r5, r6, r7}
     51a:	f006 bf31 	b.w	7380 <tExpSmooth_setDest>
     51e:	6826      	ldr	r6, [r4, #0]
     520:	2e3f      	cmp	r6, #63	; 0x3f
     522:	d00d      	beq.n	540 <updateStateFromSPIMessage+0x140>
     524:	6826      	ldr	r6, [r4, #0]
     526:	2e3e      	cmp	r6, #62	; 0x3e
     528:	d011      	beq.n	54e <updateStateFromSPIMessage+0x14e>
     52a:	680e      	ldr	r6, [r1, #0]
     52c:	4f1f      	ldr	r7, [pc, #124]	; (5ac <updateStateFromSPIMessage+0x1ac>)
     52e:	b2f6      	uxtb	r6, r6
                for (int j = i + 1; j != n; ++j)
                {
                    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&p->_zc, j);
                    if (next->_peak >= threshold)
                    {
                        int period = tZeroCrossingInfo_period(&curr, &next);
     530:	703e      	strb	r6, [r7, #0]
     532:	2701      	movs	r7, #1
     534:	4e1e      	ldr	r6, [pc, #120]	; (5b0 <updateStateFromSPIMessage+0x1b0>)
     536:	6037      	str	r7, [r6, #0]
     538:	2700      	movs	r7, #0
     53a:	4e1e      	ldr	r6, [pc, #120]	; (5b4 <updateStateFromSPIMessage+0x1b4>)
     53c:	7037      	strb	r7, [r6, #0]
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     53e:	e789      	b.n	454 <updateStateFromSPIMessage+0x54>
     540:	680e      	ldr	r6, [r1, #0]
     542:	2e3e      	cmp	r6, #62	; 0x3e
        if (info._periodicity > collector->_fundamental._periodicity &&
     544:	d1ee      	bne.n	524 <updateStateFromSPIMessage+0x124>
     546:	4e1c      	ldr	r6, [pc, #112]	; (5b8 <updateStateFromSPIMessage+0x1b8>)
     548:	2701      	movs	r7, #1
     54a:	6037      	str	r7, [r6, #0]
     54c:	e782      	b.n	454 <updateStateFromSPIMessage+0x54>
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     54e:	680e      	ldr	r6, [r1, #0]
     550:	2e3f      	cmp	r6, #63	; 0x3f
        if (info._periodicity > collector->_fundamental._periodicity &&
     552:	d1ea      	bne.n	52a <updateStateFromSPIMessage+0x12a>
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     554:	4e18      	ldr	r6, [pc, #96]	; (5b8 <updateStateFromSPIMessage+0x1b8>)
     556:	2702      	movs	r7, #2
     558:	6037      	str	r7, [r6, #0]
     55a:	e77b      	b.n	454 <updateStateFromSPIMessage+0x54>
     55c:	30000140 	.word	0x30000140
        if (info._periodicity > collector->_fundamental._periodicity &&
     560:	200055a4 	.word	0x200055a4
     564:	2001490c 	.word	0x2001490c
            Lfloat periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     568:	20005058 	.word	0x20005058
     56c:	2000505c 	.word	0x2000505c
            if (periodicity_diff <= collector->_harmonic_threshold)
     570:	2000014c 	.word	0x2000014c
     574:	2001aaa8 	.word	0x2001aaa8
                collector->_fundamental._i1 = info._i1;
     578:	2001aaa6 	.word	0x2001aaa6
            if (periodicity_diff <= collector->_harmonic_threshold)
     57c:	200055a0 	.word	0x200055a0
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     580:	2000000d 	.word	0x2000000d
                collector->_fundamental._i2 = info._i2;
     584:	20014868 	.word	0x20014868
                            if (count == 0)
     588:	20014918 	.word	0x20014918
     58c:	20014940 	.word	0x20014940
    unsigned int trailing_edge = 0;
     590:	39800801 	.word	0x39800801
    if (info._period != -1.0f)
     594:	20014914 	.word	0x20014914
     598:	20014870 	.word	0x20014870
     59c:	20014878 	.word	0x20014878
     5a0:	3b000000 	.word	0x3b000000
                                for (int d = start - 1; d > p->_min_period; --d)
     5a4:	20000a1c 	.word	0x20000a1c
                            int count = tBACF_getCorrelation(&p->_bacf, period);
     5a8:	2001491c 	.word	0x2001491c
                                for (int d = start + 1; d < mid; ++d)
     5ac:	200006d8 	.word	0x200006d8
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     5b0:	20005764 	.word	0x20005764
            if (periodicity_diff <= collector->_harmonic_threshold)
     5b4:	20014b60 	.word	0x20014b60
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5b8:	20014888 	.word	0x20014888
     5bc:	f3af 8000 	nop.w

000005c0 <switchStringModel>:
     5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	2801      	cmp	r0, #1
     5c6:	4f50      	ldr	r7, [pc, #320]	; (708 <switchStringModel+0x148>)
     5c8:	f04f 0400 	mov.w	r4, #0
     5cc:	ed2d 8b06 	vpush	{d8-d10}
	*ptr++ = (BYTE)val; val >>= 8;
     5d0:	603c      	str	r4, [r7, #0]
     5d2:	d044      	beq.n	65e <switchStringModel+0x9e>
     5d4:	2802      	cmp	r0, #2
     5d6:	d00d      	beq.n	5f4 <switchStringModel+0x34>
     5d8:	4b4c      	ldr	r3, [pc, #304]	; (70c <switchStringModel+0x14c>)
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5da:	2100      	movs	r1, #0
     5dc:	4a4c      	ldr	r2, [pc, #304]	; (710 <switchStringModel+0x150>)
     5de:	2001      	movs	r0, #1
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	7011      	strb	r1, [r2, #0]
     5e4:	b2db      	uxtb	r3, r3
     5e6:	4a4b      	ldr	r2, [pc, #300]	; (714 <switchStringModel+0x154>)
     5e8:	6038      	str	r0, [r7, #0]
     5ea:	7013      	strb	r3, [r2, #0]
		*d++ = (BYTE)val;
     5ec:	ecbd 8b06 	vpop	{d8-d10}
     5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5f4:	4d48      	ldr	r5, [pc, #288]	; (718 <switchStringModel+0x158>)
	*ptr++ = (BYTE)val; val >>= 8;
     5f6:	782b      	ldrb	r3, [r5, #0]
     5f8:	2b00      	cmp	r3, #0
     5fa:	d0ed      	beq.n	5d8 <switchStringModel+0x18>
     5fc:	4e47      	ldr	r6, [pc, #284]	; (71c <switchStringModel+0x15c>)
     5fe:	4630      	mov	r0, r6
     600:	3401      	adds	r4, #1
     602:	f008 fbf9 	bl	8df8 <__tLivingString2_free_veneer>
     606:	782b      	ldrb	r3, [r5, #0]
}
     608:	3604      	adds	r6, #4
	*ptr++ = (BYTE)val; val >>= 8;
     60a:	42a3      	cmp	r3, r4
     60c:	dcf7      	bgt.n	5fe <switchStringModel+0x3e>
     60e:	2b00      	cmp	r3, #0
	*ptr++ = (BYTE)val; val >>= 8;
     610:	d0e2      	beq.n	5d8 <switchStringModel+0x18>
     612:	4e43      	ldr	r6, [pc, #268]	; (720 <switchStringModel+0x160>)
     614:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val; val >>= 8;
     616:	f8df 8134 	ldr.w	r8, [pc, #308]	; 74c <switchStringModel+0x18c>
     61a:	ed9f aa42 	vldr	s20, [pc, #264]	; 724 <switchStringModel+0x164>
	*ptr++ = (BYTE)val;
     61e:	eddf 9a42 	vldr	s19, [pc, #264]	; 728 <switchStringModel+0x168>
	const BYTE *s = (const BYTE*)src;
     622:	ed9f 9a42 	vldr	s18, [pc, #264]	; 72c <switchStringModel+0x16c>
     626:	eddf 8a42 	vldr	s17, [pc, #264]	; 730 <switchStringModel+0x170>
			*d++ = *s++;
     62a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 734 <switchStringModel+0x174>
		} while (--cnt);
     62e:	4630      	mov	r0, r6
			*d++ = *s++;
     630:	4643      	mov	r3, r8
     632:	eef0 2a4a 	vmov.f32	s5, s20
		} while (--cnt);
     636:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 724 <switchStringModel+0x164>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     63a:	eef0 1a69 	vmov.f32	s3, s19
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     63e:	2200      	movs	r2, #0
     640:	eeb0 1a49 	vmov.f32	s2, s18
     644:	2104      	movs	r1, #4
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     646:	eef0 0a68 	vmov.f32	s1, s17
     64a:	3401      	adds	r4, #1
     64c:	eeb0 0a48 	vmov.f32	s0, s16
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     650:	3604      	adds	r6, #4
     652:	f008 fbc9 	bl	8de8 <__tSimpleLivingString3_initToPool_veneer>
		*d++ = (BYTE)val;
     656:	782b      	ldrb	r3, [r5, #0]
     658:	42a3      	cmp	r3, r4
     65a:	dce8      	bgt.n	62e <switchStringModel+0x6e>
     65c:	e7bc      	b.n	5d8 <switchStringModel+0x18>
     65e:	4d2e      	ldr	r5, [pc, #184]	; (718 <switchStringModel+0x158>)
     660:	782b      	ldrb	r3, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
     662:	2b00      	cmp	r3, #0
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	d0b8      	beq.n	5d8 <switchStringModel+0x18>
     666:	4e2e      	ldr	r6, [pc, #184]	; (720 <switchStringModel+0x160>)
			pte[PTE_System] = sys;				/* System type */
     668:	4630      	mov	r0, r6
     66a:	3401      	adds	r4, #1
	*ptr++ = (BYTE)val; val >>= 8;
     66c:	f008 fb5c 	bl	8d28 <__tSimpleLivingString3_free_veneer>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     670:	782b      	ldrb	r3, [r5, #0]
     672:	3604      	adds	r6, #4
     674:	42a3      	cmp	r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
     676:	dcf7      	bgt.n	668 <switchStringModel+0xa8>
     678:	2b00      	cmp	r3, #0
     67a:	d0ad      	beq.n	5d8 <switchStringModel+0x18>
	*ptr++ = (BYTE)val; val >>= 8;
     67c:	4c27      	ldr	r4, [pc, #156]	; (71c <switchStringModel+0x15c>)
     67e:	2600      	movs	r6, #0
     680:	eddf aa2d 	vldr	s21, [pc, #180]	; 738 <switchStringModel+0x178>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     684:	ed9f 8a28 	vldr	s16, [pc, #160]	; 728 <switchStringModel+0x168>
			pte[PTE_EdHead] = 254;				/* End head */
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     688:	ed9f aa2c 	vldr	s20, [pc, #176]	; 73c <switchStringModel+0x17c>
	*ptr++ = (BYTE)val; val >>= 8;
     68c:	eddf 9a2c 	vldr	s19, [pc, #176]	; 740 <switchStringModel+0x180>
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     690:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 744 <switchStringModel+0x184>
			pte[PTE_EdHead] = 254;				/* End head */
     694:	eddf 8a2c 	vldr	s17, [pc, #176]	; 748 <switchStringModel+0x188>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     698:	eef0 4a6a 	vmov.f32	s9, s21
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	4a2b      	ldr	r2, [pc, #172]	; (74c <switchStringModel+0x18c>)
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     69e:	eef0 3a48 	vmov.f32	s7, s16
	*ptr++ = (BYTE)val;
     6a2:	ed9f 4a25 	vldr	s8, [pc, #148]	; 738 <switchStringModel+0x178>
	*ptr++ = (BYTE)val; val >>= 8;
     6a6:	eeb0 3a4a 	vmov.f32	s6, s20
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6aa:	eddf 2a24 	vldr	s5, [pc, #144]	; 73c <switchStringModel+0x17c>
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	eef0 1a69 	vmov.f32	s3, s19
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 728 <switchStringModel+0x168>
     6b6:	eeb0 1a49 	vmov.f32	s2, s18
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ba:	2101      	movs	r1, #1
     6bc:	eef0 0a68 	vmov.f32	s1, s17
     6c0:	4620      	mov	r0, r4
     6c2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 750 <switchStringModel+0x190>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c6:	3601      	adds	r6, #1
     6c8:	f008 faaa 	bl	8c20 <__tLivingString2_initToPool_veneer>
     6cc:	4620      	mov	r0, r4
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6ce:	ed9f 0a21 	vldr	s0, [pc, #132]	; 754 <switchStringModel+0x194>
     6d2:	f008 fad5 	bl	8c80 <__tLivingString2_setBrightness_veneer>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d6:	4620      	mov	r0, r4
     6d8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
			sys = 0x0C;		/* FAT32X */
     6dc:	f008 faac 	bl	8c38 <__tLivingString2_setPickPos_veneer>
	const BYTE *s = (const BYTE*)src;
     6e0:	4620      	mov	r0, r4
     6e2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 758 <switchStringModel+0x198>
			*d++ = *s++;
     6e6:	f008 fabb 	bl	8c60 <__tLivingString2_setPrepPos_veneer>
		} while (--cnt);
     6ea:	4620      	mov	r0, r4
			*d++ = *s++;
     6ec:	eeb0 0a48 	vmov.f32	s0, s16
		} while (--cnt);
     6f0:	f008 fbee 	bl	8ed0 <__tLivingString2_setPrepIndex_veneer>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f4:	4620      	mov	r0, r4
     6f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     6fa:	3404      	adds	r4, #4
     6fc:	f008 fbb8 	bl	8e70 <__tLivingString2_setPickupPos_veneer>
     700:	782b      	ldrb	r3, [r5, #0]
     702:	42b3      	cmp	r3, r6
     704:	dcc8      	bgt.n	698 <switchStringModel+0xd8>
     706:	e767      	b.n	5d8 <switchStringModel+0x18>
     708:	20005764 	.word	0x20005764
     70c:	2001490c 	.word	0x2001490c
     710:	20014b60 	.word	0x20014b60
     714:	200006d8 	.word	0x200006d8
     718:	2000000d 	.word	0x2000000d
     71c:	20014880 	.word	0x20014880
     720:	200053f0 	.word	0x200053f0
     724:	3c23d70a 	.word	0x3c23d70a
	i = lrintf(r - 0.5f);
     728:	00000000 	.word	0x00000000
                x = 0.5f - (p - b) * invB1;
     72c:	3f7fff58 	.word	0x3f7fff58
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     730:	4684d000 	.word	0x4684d000
                x = 0.5f - (p - b) * invB1;
     734:	435c0000 	.word	0x435c0000
	i = lrintf(r - 0.5f);
     738:	3d4ccccd 	.word	0x3d4ccccd
	r -= (Lfloat)i;
     73c:	3f7ff972 	.word	0x3f7ff972
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     740:	3f666666 	.word	0x3f666666
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     744:	3e99999a 	.word	0x3e99999a
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     748:	3f19999a 	.word	0x3f19999a
	r -= (Lfloat)i;
     74c:	2000550c 	.word	0x2000550c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     750:	42c80000 	.word	0x42c80000
	r -= (Lfloat)i;
     754:	3f7d70a4 	.word	0x3f7d70a4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     758:	3ecccccd 	.word	0x3ecccccd
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     75c:	f3af 8000 	nop.w

00000760 <oscillator_tick>:
	c->BLEPindices[c->mostRecentBLEP] = i;
     760:	4a68      	ldr	r2, [pc, #416]	; (904 <oscillator_tick+0x1a4>)
     762:	4b69      	ldr	r3, [pc, #420]	; (908 <oscillator_tick+0x1a8>)
     764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     768:	eb02 0680 	add.w	r6, r2, r0, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     76c:	ed2d 8b0c 	vpush	{d8-d13}
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     770:	eddf 8a66 	vldr	s17, [pc, #408]	; 90c <oscillator_tick+0x1ac>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     774:	b087      	sub	sp, #28
     776:	781a      	ldrb	r2, [r3, #0]
     778:	edc6 8a00 	vstr	s17, [r6]
            x = 0.5f - (p_at_reset - b) * invB1;
     77c:	edc6 8a06 	vstr	s17, [r6, #24]
                if (p_at_reset >= 1.0f) {
     780:	edc6 8a02 	vstr	s17, [r6, #8]
            x = 0.5f - (p_at_reset - b) * invB1;
     784:	edc6 8a08 	vstr	s17, [r6, #32]
     788:	edc6 8a04 	vstr	s17, [r6, #16]
                if (p_at_reset >= 1.0f) {
     78c:	edc6 8a0a 	vstr	s17, [r6, #40]	; 0x28
            x = 0.5f - (p_at_reset - b) * invB1;
     790:	2a00      	cmp	r2, #0
                if (p_at_reset >= 1.0f) {
     792:	f000 80b1 	beq.w	8f8 <oscillator_tick+0x198>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     796:	0085      	lsls	r5, r0, #2
     798:	4a5d      	ldr	r2, [pc, #372]	; (910 <oscillator_tick+0x1b0>)
     79a:	4c5e      	ldr	r4, [pc, #376]	; (914 <oscillator_tick+0x1b4>)
     79c:	eeb0 9a40 	vmov.f32	s18, s0
     7a0:	eb02 0905 	add.w	r9, r2, r5
     7a4:	4a5c      	ldr	r2, [pc, #368]	; (918 <oscillator_tick+0x1b8>)
	i = lrintf(r - 0.5f);
     7a6:	4b5d      	ldr	r3, [pc, #372]	; (91c <oscillator_tick+0x1bc>)
     7a8:	4682      	mov	sl, r0
     7aa:	eddf ba5d 	vldr	s23, [pc, #372]	; 920 <oscillator_tick+0x1c0>
     7ae:	442c      	add	r4, r5
     7b0:	ed9f ba5c 	vldr	s22, [pc, #368]	; 924 <oscillator_tick+0x1c4>
	r -= (Lfloat)i;
     7b4:	eb02 0805 	add.w	r8, r2, r5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7b8:	eddf aa5b 	vldr	s21, [pc, #364]	; 928 <oscillator_tick+0x1c8>
	c->BLEPindices[c->mostRecentBLEP] = i;
     7bc:	2700      	movs	r7, #0
	r -= (Lfloat)i;
     7be:	f8df b180 	ldr.w	fp, [pc, #384]	; 940 <oscillator_tick+0x1e0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7c2:	ed9f aa5a 	vldr	s20, [pc, #360]	; 92c <oscillator_tick+0x1cc>
	r -= (Lfloat)i;
     7c6:	eddf 9a5a 	vldr	s19, [pc, #360]	; 930 <oscillator_tick+0x1d0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7ca:	9301      	str	r3, [sp, #4]
     7cc:	9502      	str	r5, [sp, #8]
     7ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7d2:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
	c->BLEPindices[c->mostRecentBLEP] = i;
     7d6:	9d02      	ldr	r5, [sp, #8]
     7d8:	eeb0 0a49 	vmov.f32	s0, s18
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7dc:	4b55      	ldr	r3, [pc, #340]	; (934 <oscillator_tick+0x1d4>)
     7de:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7e2:	eef4 6ac7 	vcmpe.f32	s13, s14
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7e6:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     7ea:	1958      	adds	r0, r3, r5
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7ec:	ed94 cafe 	vldr	s24, [r4, #1016]	; 0x3f8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     7f0:	eea7 0aab 	vfma.f32	s0, s15, s23
     7f4:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
     7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7fc:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
     800:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     804:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     808:	9002      	str	r0, [sp, #8]
            if (p >= b) {
     80a:	f106 0608 	add.w	r6, r6, #8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     80e:	bfcc      	ite	gt
     810:	2201      	movgt	r2, #1
     812:	2200      	movle	r2, #0
            if (p >= b) {
     814:	9203      	str	r2, [sp, #12]
     816:	f006 fdb3 	bl	7380 <tExpSmooth_setDest>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     81a:	9802      	ldr	r0, [sp, #8]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     81c:	f006 fda0 	bl	7360 <tExpSmooth_tick>
	c->BLEPindices[c->mostRecentBLEP] = i;
     820:	4b45      	ldr	r3, [pc, #276]	; (938 <oscillator_tick+0x1d8>)
     822:	eef0 0a40 	vmov.f32	s1, s0
     826:	442b      	add	r3, r5
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     828:	3508      	adds	r5, #8
     82a:	eeb0 1a4a 	vmov.f32	s2, s20
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     82e:	edd3 7a00 	vldr	s15, [r3]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     832:	eeb0 0a69 	vmov.f32	s0, s19
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     836:	9502      	str	r5, [sp, #8]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     838:	ee70 0aa7 	vadd.f32	s1, s1, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     83c:	f006 fe30 	bl	74a0 <LEAF_clip>
     840:	eef0 7a6a 	vmov.f32	s15, s21
     844:	464b      	mov	r3, r9
     846:	483d      	ldr	r0, [pc, #244]	; (93c <oscillator_tick+0x1dc>)
     848:	eef0 0a6d 	vmov.f32	s1, s27
            if (p >= b) {
     84c:	9a03      	ldr	r2, [sp, #12]
            x = -0.5f + p * invB;
     84e:	eee0 7a0b 	vfma.f32	s15, s0, s22
            k = 0;
     852:	ed93 6a00 	vldr	s12, [r3]
            x = -0.5f + p * invB;
     856:	eeb0 0a4d 	vmov.f32	s0, s26
                p -= 1.0f;
     85a:	edcd 8a05 	vstr	s17, [sp, #20]
     85e:	f109 0908 	add.w	r9, r9, #8
                x = -0.5f + p * invB;
     862:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	_tMBSineTri* c = *osc;
     866:	ee38 7a67 	vsub.f32	s14, s16, s15
     86a:	ee38 8a4c 	vsub.f32	s16, s16, s24
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
     86e:	ee16 3a90 	vmov	r3, s13
                x = -0.5f + p * invB;
     872:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	i = lrintf(r - 0.5f);
     876:	1c59      	adds	r1, r3, #1
     878:	f3c3 030e 	ubfx	r3, r3, #0, #15
	r -= (Lfloat)i;
     87c:	ee37 7a26 	vadd.f32	s14, s14, s13
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     880:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     884:	f3c1 010e 	ubfx	r1, r1, #0, #15
	r -= (Lfloat)i;
     888:	ee77 7ae6 	vsub.f32	s15, s15, s13
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     88c:	edd3 6a00 	vldr	s13, [r3]
	scale *= w;
     890:	eb00 0381 	add.w	r3, r0, r1, lsl #2
                x = -0.5f + p * invB;
     894:	4639      	mov	r1, r7
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     896:	3701      	adds	r7, #1
     898:	edd3 5a00 	vldr	s11, [r3]
	r -= (Lfloat)i;
     89c:	9b01      	ldr	r3, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     89e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8a2:	f853 0b04 	ldr.w	r0, [r3], #4
	c->BLEPindices[c->mostRecentBLEP] = i;
     8a6:	eee7 7a26 	vfma.f32	s15, s14, s13
     8aa:	4605      	mov	r5, r0
     8ac:	9301      	str	r3, [sp, #4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8ae:	a805      	add	r0, sp, #20
     8b0:	4653      	mov	r3, sl
     8b2:	eea6 0a27 	vfma.f32	s0, s12, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8b6:	47a8      	blx	r5
     8b8:	ed9d 7a05 	vldr	s14, [sp, #20]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     8bc:	eddb 7a00 	vldr	s15, [fp]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     8c0:	4643      	mov	r3, r8
     8c2:	ee2c 7a87 	vmul.f32	s14, s25, s14
     8c6:	edd4 6a4f 	vldr	s13, [r4, #316]	; 0x13c
     8ca:	f108 0808 	add.w	r8, r8, #8
}
     8ce:	ee26 ca8c 	vmul.f32	s24, s13, s24
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
	i = lrintf(r - 0.5f);
     8d6:	ed83 7a00 	vstr	s14, [r3]
                x = 0.5f - (p - b) * invB1;
     8da:	4b0b      	ldr	r3, [pc, #44]	; (908 <oscillator_tick+0x1a8>)
     8dc:	ee28 8a27 	vmul.f32	s16, s16, s15
     8e0:	781b      	ldrb	r3, [r3, #0]
	i = lrintf(r - 0.5f);
     8e2:	ee2c ca27 	vmul.f32	s24, s24, s15
     8e6:	42bb      	cmp	r3, r7
     8e8:	ee28 8a26 	vmul.f32	s16, s16, s13
                x = 0.5f - (p - b) * invB1;
     8ec:	ed06 ca02 	vstr	s24, [r6, #-8]
	i = lrintf(r - 0.5f);
     8f0:	ed86 8a04 	vstr	s16, [r6, #16]
	r -= (Lfloat)i;
     8f4:	f73f af6b 	bgt.w	7ce <oscillator_tick+0x6e>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8f8:	b007      	add	sp, #28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     8fa:	ecbd 8b0c 	vpop	{d8-d13}
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	r -= (Lfloat)i;
     902:	bf00      	nop
     904:	200055d8 	.word	0x200055d8
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     908:	20000024 	.word	0x20000024
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     90c:	00000000 	.word	0x00000000
	r -= (Lfloat)i;
     910:	200050dc 	.word	0x200050dc
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     914:	20019978 	.word	0x20019978
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     918:	200146d0 	.word	0x200146d0
	c->BLEPindices[c->mostRecentBLEP] = i;
     91c:	20005bf4 	.word	0x20005bf4
     920:	3c23d70a 	.word	0x3c23d70a
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     924:	42c80000 	.word	0x42c80000
     928:	46800000 	.word	0x46800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     92c:	4323d666 	.word	0x4323d666
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     930:	c323d666 	.word	0xc323d666
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     934:	2000574c 	.word	0x2000574c
            x = -0.5f + p_at_reset * invB;
     938:	20005510 	.word	0x20005510
    sinPhase += inc_amount;
     93c:	30012000 	.word	0x30012000
    p += inc_amount;
     940:	20000010 	.word	0x20000010
            x = -0.5f + p_at_reset * invB;
     944:	f3af 8000 	nop.w
            else if (sw < 0)
     948:	f3af 8000 	nop.w
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     94c:	f3af 8000 	nop.w
     950:	f3af 8000 	nop.w
     954:	f3af 8000 	nop.w
     958:	f3af 8000 	nop.w
                    p_at_reset -= 1.0f;
     95c:	f3af 8000 	nop.w

00000960 <sawSquareTick>:
                    x = -0.5f + p_at_reset * invB;
     960:	4a0a      	ldr	r2, [pc, #40]	; (98c <sawSquareTick+0x2c>)
                    p_at_reset -= 1.0f;
     962:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	i = lrintf(r - 0.5f);
     966:	b510      	push	{r4, lr}
     968:	4604      	mov	r4, r0
                    x = -0.5f + p_at_reset * invB;
     96a:	b082      	sub	sp, #8
     96c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     970:	9001      	str	r0, [sp, #4]
                    x = -0.5f + p_at_reset * invB;
     972:	f007 f865 	bl	7a40 <tPBSawSquare_setFreq>
	i = lrintf(r - 0.5f);
     976:	9801      	ldr	r0, [sp, #4]
     978:	f006 ffe2 	bl	7940 <tPBSawSquare_tick>
     97c:	edd4 7a00 	vldr	s15, [r4]
	r -= (Lfloat)i;
     980:	ee37 0a80 	vadd.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     984:	ed84 0a00 	vstr	s0, [r4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     988:	b002      	add	sp, #8
	r -= (Lfloat)i;
     98a:	bd10      	pop	{r4, pc}
     98c:	20005b9c 	.word	0x20005b9c
	i = lrintf(r - 0.5f);
     990:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     994:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     998:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     99c:	f3af 8000 	nop.w

000009a0 <sineTriTick>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9a0:	b538      	push	{r3, r4, r5, lr}
     9a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9a6:	4c0e      	ldr	r4, [pc, #56]	; (9e0 <sineTriTick+0x40>)
	c->BLEPindices[c->mostRecentBLEP] = i;
     9a8:	4605      	mov	r5, r0
     9aa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     9ae:	ed2d 8b02 	vpush	{d8}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9b2:	eeb0 8a60 	vmov.f32	s16, s1
     9b6:	4620      	mov	r0, r4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     9b8:	f006 fe32 	bl	7620 <tPBSineTriangle_setFreq>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     9bc:	4620      	mov	r0, r4
     9be:	eeb0 0a48 	vmov.f32	s0, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     9c2:	f008 fa99 	bl	8ef8 <__tPBSineTriangle_setShape_veneer>
     9c6:	4620      	mov	r0, r4
     9c8:	f006 fd7a 	bl	74c0 <tPBSineTriangle_tick>
     9cc:	edd5 7a00 	vldr	s15, [r5]
	i = lrintf(r - 0.5f);
     9d0:	ee37 0a80 	vadd.f32	s0, s15, s0
	r -= (Lfloat)i;
     9d4:	ed85 0a00 	vstr	s0, [r5]
	c->BLEPindices[c->mostRecentBLEP] = i;
     9d8:	ecbd 8b02 	vpop	{d8}
     9dc:	bd38      	pop	{r3, r4, r5, pc}
	r -= (Lfloat)i;
     9de:	bf00      	nop
     9e0:	20005c58 	.word	0x20005c58
     9e4:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     9e8:	f3af 8000 	nop.w
     9ec:	f3af 8000 	nop.w
     9f0:	f3af 8000 	nop.w
	_tMBSineTri* c = *osc;
     9f4:	f3af 8000 	nop.w
     9f8:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     9fc:	f3af 8000 	nop.w

00000a00 <sawTick>:
	i = lrintf(r - 0.5f);
     a00:	4a0a      	ldr	r2, [pc, #40]	; (a2c <sawTick+0x2c>)
     a02:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	r -= (Lfloat)i;
     a06:	b510      	push	{r4, lr}
     a08:	4604      	mov	r4, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a0a:	b082      	sub	sp, #8
     a0c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
	scale *= w;
     a10:	9001      	str	r0, [sp, #4]
	r -= (Lfloat)i;
     a12:	f006 ff85 	bl	7920 <tPBSaw_setFreq>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     a16:	9801      	ldr	r0, [sp, #4]
     a18:	f006 ff32 	bl	7880 <tPBSaw_tick>
                x = -0.5f + p * invB;
     a1c:	edd4 7a00 	vldr	s15, [r4]
	scale *= w;
     a20:	ee37 0a80 	vadd.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a24:	ed84 0a00 	vstr	s0, [r4]
	r -= (Lfloat)i;
     a28:	b002      	add	sp, #8
     a2a:	bd10      	pop	{r4, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a2c:	20005b84 	.word	0x20005b84
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a30:	f3af 8000 	nop.w
	c->BLEPindices[c->mostRecentBLEP] = i;
     a34:	f3af 8000 	nop.w
     a38:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a3c:	f3af 8000 	nop.w

00000a40 <pulseTick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a40:	b538      	push	{r3, r4, r5, lr}
     a42:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a46:	4c0e      	ldr	r4, [pc, #56]	; (a80 <pulseTick+0x40>)
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     a48:	4605      	mov	r5, r0
     a4a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a4e:	ed2d 8b02 	vpush	{d8}
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     a52:	eeb0 8a60 	vmov.f32	s16, s1
     a56:	4620      	mov	r0, r4
     a58:	f006 ff02 	bl	7860 <tPBPulse_setFreq>
     a5c:	4620      	mov	r0, r4
                k = 0;
     a5e:	eeb0 0a48 	vmov.f32	s0, s16
        	p = (1.0f - eof_offset) + 0.25f;
     a62:	f008 f939 	bl	8cd8 <__tPBPulse_setWidth_veneer>
        	sinPhase = (1.0f - eof_offset);
     a66:	4620      	mov	r0, r4
     a68:	f006 feaa 	bl	77c0 <tPBPulse_tick>
        	p = (1.0f - eof_offset) + 0.25f;
     a6c:	edd5 7a00 	vldr	s15, [r5]
        if (!k) {
     a70:	ee37 0a80 	vadd.f32	s0, s15, s0
                if (p_at_reset < 0.0f) {
     a74:	ed85 0a00 	vstr	s0, [r5]
     a78:	ecbd 8b02 	vpop	{d8}
     a7c:	bd38      	pop	{r3, r4, r5, pc}
     a7e:	bf00      	nop
            x = -0.5f + p_at_reset * invB;
     a80:	20005768 	.word	0x20005768
     a84:	f3af 8000 	nop.w
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     a88:	f3af 8000 	nop.w
     a8c:	f3af 8000 	nop.w
            x = -0.5f + p_at_reset * invB;
     a90:	f3af 8000 	nop.w
     a94:	f3af 8000 	nop.w
	r = MINBLEP_PHASES * phase * inv_w;
     a98:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     a9c:	f3af 8000 	nop.w

00000aa0 <sineTick>:
     aa0:	4a0a      	ldr	r2, [pc, #40]	; (acc <sineTick+0x2c>)
     aa2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
     aa6:	b510      	push	{r4, lr}
     aa8:	4604      	mov	r4, r0
     aaa:	b082      	sub	sp, #8
	r -= (Lfloat)i;
     aac:	eb02 0081 	add.w	r0, r2, r1, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ab0:	9001      	str	r0, [sp, #4]
     ab2:	f008 f985 	bl	8dc0 <__tCycle_setFreq_veneer>
	c->BLEPindices[c->mostRecentBLEP] = i;
     ab6:	9801      	ldr	r0, [sp, #4]
	r -= (Lfloat)i;
     ab8:	f008 f8a6 	bl	8c08 <__tCycle_tick_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     abc:	edd4 7a00 	vldr	s15, [r4]
	r -= (Lfloat)i;
     ac0:	ee37 0a80 	vadd.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ac4:	ed84 0a00 	vstr	s0, [r4]
     ac8:	b002      	add	sp, #8
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     aca:	bd10      	pop	{r4, pc}
     acc:	20005c40 	.word	0x20005c40
	c->BLEPindices[c->mostRecentBLEP] = i;
     ad0:	f3af 8000 	nop.w
     ad4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ad8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     adc:	f3af 8000 	nop.w

00000ae0 <triTick>:
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ae0:	b538      	push	{r3, r4, r5, lr}
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ae2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ae6:	4c0e      	ldr	r4, [pc, #56]	; (b20 <triTick+0x40>)
     ae8:	4605      	mov	r5, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     aea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     aee:	ed2d 8b02 	vpush	{d8}
     af2:	eeb0 8a60 	vmov.f32	s16, s1
     af6:	4620      	mov	r0, r4
     af8:	f006 fe52 	bl	77a0 <tPBTriangle_setFreq>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     afc:	4620      	mov	r0, r4
     afe:	eeb0 0a48 	vmov.f32	s0, s16
	scale *= w;
     b02:	f008 f989 	bl	8e18 <__tPBTriangle_setSkew_veneer>
            if (p < b) {
     b06:	4620      	mov	r0, r4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b08:	f006 fdaa 	bl	7660 <tPBTriangle_tick>
     b0c:	edd5 7a00 	vldr	s15, [r5]
            if (p < b) {
     b10:	ee37 0a80 	vadd.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b14:	ed85 0a00 	vstr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b18:	ecbd 8b02 	vpop	{d8}
	c->BLEPindices[c->mostRecentBLEP] = i;
     b1c:	bd38      	pop	{r3, r4, r5, pc}
     b1e:	bf00      	nop
     b20:	200148f4 	.word	0x200148f4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b24:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b28:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b2c:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b30:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b34:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b38:	f3af 8000 	nop.w
     b3c:	f3af 8000 	nop.w

00000b40 <userTick>:
     b40:	4770      	bx	lr
     b42:	bf00      	nop
     b44:	f3af 8000 	nop.w
            if (p < b) {
     b48:	f3af 8000 	nop.w
            x = 0.5f - (p - b) * invB1;
     b4c:	f3af 8000 	nop.w
     b50:	f3af 8000 	nop.w
     b54:	f3af 8000 	nop.w
     b58:	f3af 8000 	nop.w
     b5c:	f3af 8000 	nop.w

00000b60 <filter_tick>:
     b60:	b570      	push	{r4, r5, r6, lr}
     b62:	f201 239b 	addw	r3, r1, #667	; 0x29b
     b66:	4e5f      	ldr	r6, [pc, #380]	; (ce4 <filter_tick+0x184>)
     b68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                    p_at_reset -= 1.0f;
     b6c:	460c      	mov	r4, r1
     b6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b72:	4605      	mov	r5, r0
	i = lrintf(r - 0.5f);
     b74:	ed2d 8b06 	vpush	{d8-d10}
     b78:	ed93 9a00 	vldr	s18, [r3]
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b7c:	eeb0 8a40 	vmov.f32	s16, s0
	i = lrintf(r - 0.5f);
     b80:	eeb4 9ae7 	vcmpe.f32	s18, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i = lrintf(r - 0.5f);
     b88:	d91e      	bls.n	bc8 <filter_tick+0x68>
     b8a:	1c8b      	adds	r3, r1, #2
     b8c:	f506 622f 	add.w	r2, r6, #2800	; 0xaf0
	r -= (Lfloat)i;
     b90:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b94:	eddf 0a54 	vldr	s1, [pc, #336]	; ce8 <filter_tick+0x188>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     b98:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	r -= (Lfloat)i;
     b9c:	ed9f 1a53 	vldr	s2, [pc, #332]	; cec <filter_tick+0x18c>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ba0:	ed9f 0a53 	vldr	s0, [pc, #332]	; cf0 <filter_tick+0x190>
	scale *= w;
     ba4:	ed92 7a00 	vldr	s14, [r2]
                if (!k && p_at_reset >= b) {
     ba8:	f606 229c 	addw	r2, r6, #2716	; 0xa9c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	r -= (Lfloat)i;
     bb0:	edd3 7a00 	vldr	s15, [r3]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bb8:	eee8 7a07 	vfma.f32	s15, s16, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
     bbc:	ee67 0aa0 	vmul.f32	s1, s15, s1
                if (!k && p_at_reset >= b) {
     bc0:	f006 fc6e 	bl	74a0 <LEAF_clip>
	c->BLEPindices[c->mostRecentBLEP] = i;
     bc4:	eef0 aa40 	vmov.f32	s21, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bc8:	f204 23c5 	addw	r3, r4, #709	; 0x2c5
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     bcc:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     bd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bd4:	edd3 9a00 	vldr	s19, [r3]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     bd8:	eef4 9ae8 	vcmpe.f32	s19, s17
     bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     be0:	d963      	bls.n	caa <filter_tick+0x14a>
     be2:	4b44      	ldr	r3, [pc, #272]	; (cf4 <filter_tick+0x194>)
     be4:	1ca2      	adds	r2, r4, #2
                if (!k && p_at_reset >= b) {
     be6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
                    x = 0.5f - (p_at_reset - b) * invB1;
     bea:	eddf 0a3f 	vldr	s1, [pc, #252]	; ce8 <filter_tick+0x188>
	_tMBSineTri* c = *osc;
     bee:	eb03 0182 	add.w	r1, r3, r2, lsl #2
	i = lrintf(r - 0.5f);
     bf2:	ed9f 1a3e 	vldr	s2, [pc, #248]	; cec <filter_tick+0x18c>
                    x = 0.5f - (p_at_reset - b) * invB1;
     bf6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; cf0 <filter_tick+0x190>
     bfa:	ed51 7a15 	vldr	s15, [r1, #-84]	; 0xffffffac
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     bfe:	ed91 7a00 	vldr	s14, [r1]
                    x = 0.5f - (p_at_reset - b) * invB1;
     c02:	ee77 7ae6 	vsub.f32	s15, s15, s13
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c06:	eee8 7a07 	vfma.f32	s15, s16, s14
	i = lrintf(r - 0.5f);
     c0a:	ee67 0aa0 	vmul.f32	s1, s15, s1
     c0e:	f006 fc47 	bl	74a0 <LEAF_clip>
	r -= (Lfloat)i;
     c12:	eeb4 9ae8 	vcmpe.f32	s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c16:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c1a:	eeb0 aa40 	vmov.f32	s20, s0
	r -= (Lfloat)i;
     c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c22:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
     c26:	ed96 8a00 	vldr	s16, [r6]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c2a:	dd21      	ble.n	c70 <filter_tick+0x110>
     c2c:	4e32      	ldr	r6, [pc, #200]	; (cf8 <filter_tick+0x198>)
	r -= (Lfloat)i;
     c2e:	eeb0 0a6a 	vmov.f32	s0, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c32:	4622      	mov	r2, r4
     c34:	2100      	movs	r1, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c36:	6833      	ldr	r3, [r6, #0]
     c38:	4628      	mov	r0, r5
	c->BLEPindices[c->mostRecentBLEP] = i;
     c3a:	4798      	blx	r3
     c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     c40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c44:	edd5 7a01 	vldr	s15, [r5, #4]
     c48:	ed95 7a00 	vldr	s14, [r5]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c4c:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     c50:	eef4 9ac6 	vcmpe.f32	s19, s12
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     c54:	eee7 7a26 	vfma.f32	s15, s14, s13
     c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c5c:	eeb0 0a67 	vmov.f32	s0, s15
        if (sw > 0)
     c60:	edc5 7a01 	vstr	s15, [r5, #4]
     c64:	dc11      	bgt.n	c8a <filter_tick+0x12a>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c66:	eea7 0a08 	vfma.f32	s0, s14, s16
     c6a:	ecbd 8b06 	vpop	{d8-d10}
	i = lrintf(r - 0.5f);
     c6e:	bd70      	pop	{r4, r5, r6, pc}
     c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     c74:	edd5 7a01 	vldr	s15, [r5, #4]
     c78:	edd5 6a00 	vldr	s13, [r5]
     c7c:	4e1e      	ldr	r6, [pc, #120]	; (cf8 <filter_tick+0x198>)
     c7e:	ee37 7a48 	vsub.f32	s14, s14, s16
	r -= (Lfloat)i;
     c82:	eee6 7a87 	vfma.f32	s15, s13, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c86:	edc5 7a01 	vstr	s15, [r5, #4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c8a:	eeb0 0a4a 	vmov.f32	s0, s20
	r -= (Lfloat)i;
     c8e:	6873      	ldr	r3, [r6, #4]
     c90:	4622      	mov	r2, r4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c92:	2101      	movs	r1, #1
     c94:	1d28      	adds	r0, r5, #4
     c96:	4798      	blx	r3
                if (p_at_reset >= 1.0f) {
     c98:	ed95 0a01 	vldr	s0, [r5, #4]
	r -= (Lfloat)i;
     c9c:	ed95 7a00 	vldr	s14, [r5]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ca0:	eea7 0a08 	vfma.f32	s0, s14, s16
     ca4:	ecbd 8b06 	vpop	{d8-d10}
     ca8:	bd70      	pop	{r4, r5, r6, pc}
     caa:	eeb4 9ae8 	vcmpe.f32	s18, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cae:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
	c->BLEPindices[c->mostRecentBLEP] = i;
     cb2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                if (p_at_reset >= 1.0f) {
     cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
     cba:	ed96 8a00 	vldr	s16, [r6]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cbe:	dcb5      	bgt.n	c2c <filter_tick+0xcc>
     cc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cc4:	ed95 0a01 	vldr	s0, [r5, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     cc8:	ed95 7a00 	vldr	s14, [r5]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ccc:	ee77 7ac8 	vsub.f32	s15, s15, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     cd0:	eea7 0a87 	vfma.f32	s0, s15, s14
     cd4:	ed85 0a01 	vstr	s0, [r5, #4]
     cd8:	eea7 0a08 	vfma.f32	s0, s14, s16
     cdc:	ecbd 8b06 	vpop	{d8-d10}
                if (p_at_reset >= 1.0f) {
     ce0:	bd70      	pop	{r4, r5, r6, pc}
                    x = 0.5f - (p_at_reset - b) * invB1;
     ce2:	bf00      	nop
     ce4:	20019978 	.word	0x20019978
     ce8:	420fb824 	.word	0x420fb824
     cec:	457ff000 	.word	0x457ff000
     cf0:	00000000 	.word	0x00000000
     cf4:	2001a510 	.word	0x2001a510
            x = 0.5f - (p_at_reset - b) * invB1;
     cf8:	200050bc 	.word	0x200050bc
                if (p_at_reset < b) {
     cfc:	f3af 8000 	nop.w

00000d00 <lowpassTick>:
            x = 0.5f - (p_at_reset - b) * invB1;
     d00:	eb02 0241 	add.w	r2, r2, r1, lsl #1
                if (p_at_reset < b) {
     d04:	4b0d      	ldr	r3, [pc, #52]	; (d3c <lowpassTick+0x3c>)
     d06:	b530      	push	{r4, r5, lr}
            x = 0.5f - (p_at_reset - b) * invB1;
     d08:	4605      	mov	r5, r0
     d0a:	b083      	sub	sp, #12
                if (p_at_reset < b) {
     d0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
                if (p_at_reset < 0.0f) {
     d10:	0094      	lsls	r4, r2, #2
     d12:	9001      	str	r0, [sp, #4]
     d14:	f008 f914 	bl	8f40 <__tSVF_setFreqFast_veneer>
     d18:	ed95 0a00 	vldr	s0, [r5]
        else if (sw < 0)
     d1c:	9801      	ldr	r0, [sp, #4]
     d1e:	f008 f88f 	bl	8e40 <__tSVF_tick_veneer>
     d22:	4a07      	ldr	r2, [pc, #28]	; (d40 <lowpassTick+0x40>)
	i = lrintf(r - 0.5f);
     d24:	ed85 0a00 	vstr	s0, [r5]
     d28:	4422      	add	r2, r4
     d2a:	edd2 7a00 	vldr	s15, [r2]
     d2e:	ee27 0a80 	vmul.f32	s0, s15, s0
     d32:	ed85 0a00 	vstr	s0, [r5]
     d36:	b003      	add	sp, #12
	r -= (Lfloat)i;
     d38:	bd30      	pop	{r4, r5, pc}
     d3a:	bf00      	nop
	c->BLEPindices[c->mostRecentBLEP] = i;
     d3c:	200053f8 	.word	0x200053f8
	r -= (Lfloat)i;
     d40:	200050ac 	.word	0x200050ac
     d44:	f3af 8000 	nop.w
     d48:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     d4c:	f3af 8000 	nop.w
                p -= 1.0f;
     d50:	f3af 8000 	nop.w
     d54:	f3af 8000 	nop.w
                x = -0.5f + p * invB;
     d58:	f3af 8000 	nop.w
	_tMBSineTri* c = *osc;
     d5c:	f3af 8000 	nop.w

00000d60 <highpassTick>:
     d60:	eb02 0241 	add.w	r2, r2, r1, lsl #1
}
     d64:	4b0d      	ldr	r3, [pc, #52]	; (d9c <highpassTick+0x3c>)
     d66:	b530      	push	{r4, r5, lr}
	i = lrintf(r - 0.5f);
     d68:	4605      	mov	r5, r0
     d6a:	b083      	sub	sp, #12
                x = -0.5f + p * invB;
     d6c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	scale *= w;
     d70:	0094      	lsls	r4, r2, #2
     d72:	9001      	str	r0, [sp, #4]
	i = lrintf(r - 0.5f);
     d74:	f008 f8e4 	bl	8f40 <__tSVF_setFreqFast_veneer>
     d78:	ed95 0a00 	vldr	s0, [r5]
	r -= (Lfloat)i;
     d7c:	9801      	ldr	r0, [sp, #4]
     d7e:	f008 f85f 	bl	8e40 <__tSVF_tick_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d82:	4a07      	ldr	r2, [pc, #28]	; (da0 <highpassTick+0x40>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     d84:	ed85 0a00 	vstr	s0, [r5]
	r -= (Lfloat)i;
     d88:	4422      	add	r2, r4
     d8a:	edd2 7a00 	vldr	s15, [r2]
	scale *= w;
     d8e:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d92:	ed85 0a00 	vstr	s0, [r5]
	r -= (Lfloat)i;
     d96:	b003      	add	sp, #12
     d98:	bd30      	pop	{r4, r5, pc}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d9a:	bf00      	nop
     d9c:	20005160 	.word	0x20005160
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     da0:	200050ac 	.word	0x200050ac
	c->BLEPindices[c->mostRecentBLEP] = i;
     da4:	f3af 8000 	nop.w
     da8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     dac:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     db0:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     db4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     db8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dbc:	f3af 8000 	nop.w

00000dc0 <bandpassTick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     dc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     dc4:	4b0d      	ldr	r3, [pc, #52]	; (dfc <bandpassTick+0x3c>)
     dc6:	b530      	push	{r4, r5, lr}
     dc8:	4605      	mov	r5, r0
     dca:	b083      	sub	sp, #12
}
     dcc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
     dd0:	0094      	lsls	r4, r2, #2
     dd2:	9001      	str	r0, [sp, #4]
     dd4:	f008 f8b4 	bl	8f40 <__tSVF_setFreqFast_veneer>
	i = lrintf(r - 0.5f);
     dd8:	ed95 0a00 	vldr	s0, [r5]
     ddc:	9801      	ldr	r0, [sp, #4]
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     dde:	f008 f82f 	bl	8e40 <__tSVF_tick_veneer>
     de2:	4a07      	ldr	r2, [pc, #28]	; (e00 <bandpassTick+0x40>)
     de4:	ed85 0a00 	vstr	s0, [r5]
	i = lrintf(r - 0.5f);
     de8:	4422      	add	r2, r4
     dea:	edd2 7a00 	vldr	s15, [r2]
                    p_at_reset += 1.0f;
     dee:	ee27 0a80 	vmul.f32	s0, s15, s0
	i = lrintf(r - 0.5f);
     df2:	ed85 0a00 	vstr	s0, [r5]
     df6:	b003      	add	sp, #12
     df8:	bd30      	pop	{r4, r5, pc}
	r -= (Lfloat)i;
     dfa:	bf00      	nop
     dfc:	20000a0c 	.word	0x20000a0c
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e00:	200050ac 	.word	0x200050ac
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e04:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     e08:	f3af 8000 	nop.w
                if (k && p_at_reset < b) {
     e0c:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e10:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     e14:	f3af 8000 	nop.w
	scale *= w;
     e18:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e1c:	f3af 8000 	nop.w

00000e20 <diodeLowpassTick>:
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e20:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
     e24:	4b0d      	ldr	r3, [pc, #52]	; (e5c <diodeLowpassTick+0x3c>)
     e26:	b530      	push	{r4, r5, lr}
                if (k && p_at_reset < b) {
     e28:	4605      	mov	r5, r0
     e2a:	b083      	sub	sp, #12
	c->BLEPindices[c->mostRecentBLEP] = i;
     e2c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e30:	0094      	lsls	r4, r2, #2
     e32:	9001      	str	r0, [sp, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     e34:	f007 ff90 	bl	8d58 <__tDiodeFilter_setFreqFast_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e38:	ed95 0a00 	vldr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     e3c:	9801      	ldr	r0, [sp, #4]
     e3e:	f008 f827 	bl	8e90 <__tDiodeFilter_tickEfficient_veneer>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     e42:	4a07      	ldr	r2, [pc, #28]	; (e60 <diodeLowpassTick+0x40>)
     e44:	ed85 0a00 	vstr	s0, [r5]
     e48:	4422      	add	r2, r4
     e4a:	edd2 7a00 	vldr	s15, [r2]
     e4e:	ee27 0a80 	vmul.f32	s0, s15, s0
                if (k && p_at_reset < b) {
     e52:	ed85 0a00 	vstr	s0, [r5]
                    x = -0.5f + p_at_reset * invB;
     e56:	b003      	add	sp, #12
	_tMBSineTri* c = *osc;
     e58:	bd30      	pop	{r4, r5, pc}
                    x = -0.5f + p_at_reset * invB;
     e5a:	bf00      	nop
     e5c:	20005048 	.word	0x20005048
	i = lrintf(r - 0.5f);
     e60:	200050ac 	.word	0x200050ac
                    x = -0.5f + p_at_reset * invB;
     e64:	f3af 8000 	nop.w
	r = MINBLEP_PHASES * phase * inv_w;
     e68:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     e6c:	f3af 8000 	nop.w
     e70:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     e74:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e78:	f3af 8000 	nop.w
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e7c:	f3af 8000 	nop.w

00000e80 <VZpeakTick>:
	r -= (Lfloat)i;
     e80:	4b09      	ldr	r3, [pc, #36]	; (ea8 <VZpeakTick+0x28>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	r -= (Lfloat)i;
     e86:	b510      	push	{r4, lr}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e88:	4604      	mov	r4, r0
     e8a:	b082      	sub	sp, #8
     e8c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e90:	9001      	str	r0, [sp, #4]
     e92:	f007 ffe1 	bl	8e58 <__tVZFilter_setFreqFast_veneer>
	c->BLEPindices[c->mostRecentBLEP] = i;
     e96:	9801      	ldr	r0, [sp, #4]
     e98:	ed94 0a00 	vldr	s0, [r4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e9c:	f008 f838 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
     ea0:	ed84 0a00 	vstr	s0, [r4]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ea4:	b002      	add	sp, #8
     ea6:	bd10      	pop	{r4, pc}
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ea8:	200008d4 	.word	0x200008d4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     eac:	f3af 8000 	nop.w
     eb0:	f3af 8000 	nop.w
     eb4:	f3af 8000 	nop.w
     eb8:	f3af 8000 	nop.w
        else if (sw < 0)
     ebc:	f3af 8000 	nop.w

00000ec0 <VZlowshelfTick>:
	i = lrintf(r - 0.5f);
     ec0:	4b09      	ldr	r3, [pc, #36]	; (ee8 <VZlowshelfTick+0x28>)
     ec2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
     ec6:	b510      	push	{r4, lr}
     ec8:	4604      	mov	r4, r0
     eca:	b082      	sub	sp, #8
     ecc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     ed0:	9001      	str	r0, [sp, #4]
     ed2:	f007 ffc1 	bl	8e58 <__tVZFilter_setFreqFast_veneer>
     ed6:	9801      	ldr	r0, [sp, #4]
     ed8:	ed94 0a00 	vldr	s0, [r4]
	r -= (Lfloat)i;
     edc:	f008 f818 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ee0:	ed84 0a00 	vstr	s0, [r4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     ee4:	b002      	add	sp, #8
     ee6:	bd10      	pop	{r4, pc}
	r -= (Lfloat)i;
     ee8:	200008c4 	.word	0x200008c4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     eec:	f3af 8000 	nop.w
                if (p_at_reset < 0.0f) {
     ef0:	f3af 8000 	nop.w
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ef4:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     ef8:	f3af 8000 	nop.w
	scale *= w;
     efc:	f3af 8000 	nop.w

00000f00 <VZhighshelfTick>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <VZhighshelfTick+0x28>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
     f06:	b510      	push	{r4, lr}
     f08:	4604      	mov	r4, r0
                if (p_at_reset < 0.0f) {
     f0a:	b082      	sub	sp, #8
     f0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
	scale *= w;
     f10:	9001      	str	r0, [sp, #4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     f12:	f007 ffa1 	bl	8e58 <__tVZFilter_setFreqFast_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f16:	9801      	ldr	r0, [sp, #4]
     f18:	ed94 0a00 	vldr	s0, [r4]
     f1c:	f007 fff8 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     f20:	ed84 0a00 	vstr	s0, [r4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     f24:	b002      	add	sp, #8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     f26:	bd10      	pop	{r4, pc}
     f28:	200008b4 	.word	0x200008b4
     f2c:	f3af 8000 	nop.w
     f30:	f3af 8000 	nop.w
     f34:	f3af 8000 	nop.w
                    x = -0.5f + p_at_reset * invB;
     f38:	f3af 8000 	nop.w
        else if (sw < 0)
     f3c:	f3af 8000 	nop.w

00000f40 <VZbandrejectTick>:
     f40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     f44:	4b0d      	ldr	r3, [pc, #52]	; (f7c <VZbandrejectTick+0x3c>)
	i = lrintf(r - 0.5f);
     f46:	b530      	push	{r4, r5, lr}
     f48:	4605      	mov	r5, r0
                    x = -0.5f + p_at_reset * invB;
     f4a:	b083      	sub	sp, #12
     f4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	i = lrintf(r - 0.5f);
     f50:	0094      	lsls	r4, r2, #2
     f52:	9001      	str	r0, [sp, #4]
     f54:	f007 ff80 	bl	8e58 <__tVZFilter_setFreqFast_veneer>
	r -= (Lfloat)i;
     f58:	ed95 0a00 	vldr	s0, [r5]
	c->BLEPindices[c->mostRecentBLEP] = i;
     f5c:	9801      	ldr	r0, [sp, #4]
     f5e:	f007 ffd7 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
	r -= (Lfloat)i;
     f62:	4a07      	ldr	r2, [pc, #28]	; (f80 <VZbandrejectTick+0x40>)
     f64:	ed85 0a00 	vstr	s0, [r5]
                    x = -0.5f + p_at_reset * invB;
     f68:	4422      	add	r2, r4
	r -= (Lfloat)i;
     f6a:	edd2 7a00 	vldr	s15, [r2]
     f6e:	ee27 0a80 	vmul.f32	s0, s15, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     f72:	ed85 0a00 	vstr	s0, [r5]
     f76:	b003      	add	sp, #12
     f78:	bd30      	pop	{r4, r5, pc}
     f7a:	bf00      	nop
     f7c:	200008a4 	.word	0x200008a4
                    x = 0.5f - (p_at_reset - b) * invB1;
     f80:	200050ac 	.word	0x200050ac
	i = lrintf(r - 0.5f);
     f84:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b) * invB1;
     f88:	f3af 8000 	nop.w
     f8c:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     f90:	f3af 8000 	nop.w
                    x = 0.5f - (p_at_reset - b) * invB1;
     f94:	f3af 8000 	nop.w
     f98:	f3af 8000 	nop.w
	i = lrintf(r - 0.5f);
     f9c:	f3af 8000 	nop.w

00000fa0 <LadderLowpassTick>:
     fa0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
                    x = 0.5f - (p_at_reset - b) * invB1;
     fa4:	4b0d      	ldr	r3, [pc, #52]	; (fdc <LadderLowpassTick+0x3c>)
     fa6:	b530      	push	{r4, r5, lr}
	i = lrintf(r - 0.5f);
     fa8:	4605      	mov	r5, r0
     faa:	b083      	sub	sp, #12
	r -= (Lfloat)i;
     fac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fb0:	0094      	lsls	r4, r2, #2
     fb2:	9001      	str	r0, [sp, #4]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     fb4:	f007 fe68 	bl	8c88 <__tLadderFilter_setFreqFast_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     fb8:	ed95 0a00 	vldr	s0, [r5]
	r -= (Lfloat)i;
     fbc:	9801      	ldr	r0, [sp, #4]
     fbe:	f007 ff7f 	bl	8ec0 <__tLadderFilter_tick_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fc2:	4a07      	ldr	r2, [pc, #28]	; (fe0 <LadderLowpassTick+0x40>)
     fc4:	ed85 0a00 	vstr	s0, [r5]
     fc8:	4422      	add	r2, r4
	i = lrintf(r - 0.5f);
     fca:	edd2 7a00 	vldr	s15, [r2]
	r -= (Lfloat)i;
     fce:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fd2:	ed85 0a00 	vstr	s0, [r5]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fd6:	b003      	add	sp, #12
     fd8:	bd30      	pop	{r4, r5, pc}
	c->BLEPindices[c->mostRecentBLEP] = i;
     fda:	bf00      	nop
     fdc:	20000894 	.word	0x20000894
	i = lrintf(r - 0.5f);
     fe0:	200050ac 	.word	0x200050ac
	c->BLEPindices[c->mostRecentBLEP] = i;
     fe4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fe8:	f3af 8000 	nop.w
     fec:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ff0:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ff4:	f3af 8000 	nop.w
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <setFreqMultPitch>:
    1000:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
	i = lrintf(r - 0.5f);
    1004:	4a12      	ldr	r2, [pc, #72]	; (1050 <setFreqMultPitch+0x50>)
    1006:	0043      	lsls	r3, r0, #1
	r -= (Lfloat)i;
    1008:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	c->BLEPindices[c->mostRecentBLEP] = i;
    100c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    1010:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r -= (Lfloat)i;
    1014:	3020      	adds	r0, #32
    1016:	ee20 0a07 	vmul.f32	s0, s0, s14
    101a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    101e:	4408      	add	r0, r1
    1020:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    sinPhase += inc_amount;
    1024:	ed90 7a02 	vldr	s14, [r0, #8]
    p += inc_amount;
    1028:	eeb4 7ae7 	vcmpe.f32	s14, s15
    102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                x = 0.5f - (p - b) * invB1;
    1030:	dd01      	ble.n	1036 <setFreqMultPitch+0x36>
    1032:	feb8 0a40 	vrinta.f32	s0, s0
    1036:	4419      	add	r1, r3
    1038:	4a06      	ldr	r2, [pc, #24]	; (1054 <setFreqMultPitch+0x54>)
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <setFreqMultPitch+0x58>)
    103c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    1040:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1044:	eb03 0181 	add.w	r1, r3, r1, lsl #2
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1048:	ed82 0a00 	vstr	s0, [r2]
	i = lrintf(r - 0.5f);
    104c:	6008      	str	r0, [r1, #0]
    104e:	4770      	bx	lr
    1050:	20019978 	.word	0x20019978
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1054:	20005510 	.word	0x20005510
	i = lrintf(r - 0.5f);
    1058:	200050dc 	.word	0x200050dc
    105c:	f3af 8000 	nop.w

00001060 <setFreqMultHarm>:
}

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	harm *= 15.0f;
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    1060:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    1064:	4a1a      	ldr	r2, [pc, #104]	; (10d0 <setFreqMultHarm+0x70>)
    1066:	0043      	lsls	r3, r0, #1
	harm *= 15.0f;
    1068:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    106c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    1070:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1074:	3020      	adds	r0, #32
	harm *= 15.0f;
    1076:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    107a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    107e:	4408      	add	r0, r1
    1080:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    1084:	ed90 7a02 	vldr	s14, [r0, #8]
    1088:	eeb4 7ae7 	vcmpe.f32	s14, s15
    108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1090:	dd01      	ble.n	1096 <setFreqMultHarm+0x36>
	{
		harm = roundf(harm);
    1092:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
    1096:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
    109a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10a2:	db0d      	blt.n	10c0 <setFreqMultHarm+0x60>
		freqMult[osc][string] = (harm + 1);
    10a4:	ee30 0a27 	vadd.f32	s0, s0, s15
    10a8:	4419      	add	r1, r3
    10aa:	4a0a      	ldr	r2, [pc, #40]	; (10d4 <setFreqMultHarm+0x74>)
	}
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}
	midiAdd[osc][string] = 0.0f;
    10ac:	4b0a      	ldr	r3, [pc, #40]	; (10d8 <setFreqMultHarm+0x78>)
    10ae:	2000      	movs	r0, #0
    10b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    10b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    10b8:	ed82 0a00 	vstr	s0, [r2]
    10bc:	6008      	str	r0, [r1, #0]
}
    10be:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    10c0:	ee30 0a67 	vsub.f32	s0, s0, s15
    10c4:	eeb0 7ac0 	vabs.f32	s14, s0
    10c8:	ee87 0a87 	vdiv.f32	s0, s15, s14
    10cc:	e7ec      	b.n	10a8 <setFreqMultHarm+0x48>
    10ce:	bf00      	nop
    10d0:	20019978 	.word	0x20019978
    10d4:	200050dc 	.word	0x200050dc
    10d8:	20005510 	.word	0x20005510
    10dc:	f3af 8000 	nop.w

000010e0 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
    10e0:	4b03      	ldr	r3, [pc, #12]	; (10f0 <lowpassSetQ+0x10>)
    10e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    10e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    10ea:	f007 bf1d 	b.w	8f28 <__tSVF_setQ_veneer>
    10ee:	bf00      	nop
    10f0:	200053f8 	.word	0x200053f8
    10f4:	f3af 8000 	nop.w
    10f8:	f3af 8000 	nop.w
    10fc:	f3af 8000 	nop.w

00001100 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
    1100:	4b03      	ldr	r3, [pc, #12]	; (1110 <highpassSetQ+0x10>)
    1102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    110a:	f007 bf0d 	b.w	8f28 <__tSVF_setQ_veneer>
    110e:	bf00      	nop
    1110:	20005160 	.word	0x20005160
    1114:	f3af 8000 	nop.w
    1118:	f3af 8000 	nop.w
    111c:	f3af 8000 	nop.w

00001120 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <bandpassSetQ+0x10>)
    1122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    112a:	f007 befd 	b.w	8f28 <__tSVF_setQ_veneer>
    112e:	bf00      	nop
    1130:	20000a0c 	.word	0x20000a0c
    1134:	f3af 8000 	nop.w
    1138:	f3af 8000 	nop.w
    113c:	f3af 8000 	nop.w

00001140 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <diodeLowpassSetQ+0x10>)
    1142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    114a:	f007 bdb5 	b.w	8cb8 <__tDiodeFilter_setQ_veneer>
    114e:	bf00      	nop
    1150:	20005048 	.word	0x20005048
    1154:	f3af 8000 	nop.w
    1158:	f3af 8000 	nop.w
    115c:	f3af 8000 	nop.w

00001160 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <VZpeakSetQ+0x10>)
    1162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    116a:	f007 bd95 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    116e:	bf00      	nop
    1170:	200008d4 	.word	0x200008d4
    1174:	f3af 8000 	nop.w
    1178:	f3af 8000 	nop.w
    117c:	f3af 8000 	nop.w

00001180 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <VZlowshelfSetQ+0x10>)
    1182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    118a:	f007 bd85 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    118e:	bf00      	nop
    1190:	200008c4 	.word	0x200008c4
    1194:	f3af 8000 	nop.w
    1198:	f3af 8000 	nop.w
    119c:	f3af 8000 	nop.w

000011a0 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
    11a0:	4b03      	ldr	r3, [pc, #12]	; (11b0 <VZhighshelfSetQ+0x10>)
    11a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    11a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11aa:	f007 bd75 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    11ae:	bf00      	nop
    11b0:	200008b4 	.word	0x200008b4
    11b4:	f3af 8000 	nop.w
    11b8:	f3af 8000 	nop.w
    11bc:	f3af 8000 	nop.w

000011c0 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    11c0:	4b03      	ldr	r3, [pc, #12]	; (11d0 <VZbandrejectSetQ+0x10>)
    11c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    11c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11ca:	f007 bd65 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    11ce:	bf00      	nop
    11d0:	200008a4 	.word	0x200008a4
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    11e0:	4b03      	ldr	r3, [pc, #12]	; (11f0 <LadderLowpassSetQ+0x10>)
    11e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    11e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11ea:	f007 bdd5 	b.w	8d98 <__tLadderFilter_setQ_veneer>
    11ee:	bf00      	nop
    11f0:	20000894 	.word	0x20000894
    11f4:	f3af 8000 	nop.w
    11f8:	f3af 8000 	nop.w
    11fc:	f3af 8000 	nop.w

00001200 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1200:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1204:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1208:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    120a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    120e:	4605      	mov	r5, r0
    1210:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    1212:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1216:	eeb0 0a67 	vmov.f32	s0, s15
    121a:	f007 fe99 	bl	8f50 <__fasterdbtoa_veneer>
    121e:	4b03      	ldr	r3, [pc, #12]	; (122c <lowpassSetGain+0x2c>)
    1220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1224:	ed84 0a00 	vstr	s0, [r4]
}
    1228:	bd38      	pop	{r3, r4, r5, pc}
    122a:	bf00      	nop
    122c:	200050ac 	.word	0x200050ac
    1230:	f3af 8000 	nop.w
    1234:	f3af 8000 	nop.w
    1238:	f3af 8000 	nop.w
    123c:	f3af 8000 	nop.w

00001240 <highpassSetGain>:
    1240:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1244:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1248:	b538      	push	{r3, r4, r5, lr}
    124a:	eee0 7a07 	vfma.f32	s15, s0, s14
    124e:	4605      	mov	r5, r0
    1250:	460c      	mov	r4, r1
    1252:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1256:	eeb0 0a67 	vmov.f32	s0, s15
    125a:	f007 fe79 	bl	8f50 <__fasterdbtoa_veneer>
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <highpassSetGain+0x2c>)
    1260:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1264:	ed84 0a00 	vstr	s0, [r4]
    1268:	bd38      	pop	{r3, r4, r5, pc}
    126a:	bf00      	nop
    126c:	200050ac 	.word	0x200050ac
    1270:	f3af 8000 	nop.w
    1274:	f3af 8000 	nop.w
    1278:	f3af 8000 	nop.w
    127c:	f3af 8000 	nop.w

00001280 <bandpassSetGain>:
    1280:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1284:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1288:	b538      	push	{r3, r4, r5, lr}
    128a:	eee0 7a07 	vfma.f32	s15, s0, s14
    128e:	4605      	mov	r5, r0
    1290:	460c      	mov	r4, r1
    1292:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1296:	eeb0 0a67 	vmov.f32	s0, s15
    129a:	f007 fe59 	bl	8f50 <__fasterdbtoa_veneer>
    129e:	4b03      	ldr	r3, [pc, #12]	; (12ac <bandpassSetGain+0x2c>)
    12a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    12a4:	ed84 0a00 	vstr	s0, [r4]
    12a8:	bd38      	pop	{r3, r4, r5, pc}
    12aa:	bf00      	nop
    12ac:	200050ac 	.word	0x200050ac
    12b0:	f3af 8000 	nop.w
    12b4:	f3af 8000 	nop.w
    12b8:	f3af 8000 	nop.w
    12bc:	f3af 8000 	nop.w

000012c0 <diodeLowpassSetGain>:
    12c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    12c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    12c8:	b538      	push	{r3, r4, r5, lr}
    12ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    12ce:	4605      	mov	r5, r0
    12d0:	460c      	mov	r4, r1
    12d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    12d6:	eeb0 0a67 	vmov.f32	s0, s15
    12da:	f007 fe39 	bl	8f50 <__fasterdbtoa_veneer>
    12de:	4b03      	ldr	r3, [pc, #12]	; (12ec <diodeLowpassSetGain+0x2c>)
    12e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    12e4:	ed84 0a00 	vstr	s0, [r4]
    12e8:	bd38      	pop	{r3, r4, r5, pc}
    12ea:	bf00      	nop
    12ec:	200050ac 	.word	0x200050ac
    12f0:	f3af 8000 	nop.w
    12f4:	f3af 8000 	nop.w
    12f8:	f3af 8000 	nop.w
    12fc:	f3af 8000 	nop.w

00001300 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1300:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1304:	ed9f 7a09 	vldr	s14, [pc, #36]	; 132c <VZpeakSetGain+0x2c>
{
    1308:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    130a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    130e:	4605      	mov	r5, r0
    1310:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1312:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1316:	eeb0 0a67 	vmov.f32	s0, s15
    131a:	f007 fe19 	bl	8f50 <__fasterdbtoa_veneer>
    131e:	4804      	ldr	r0, [pc, #16]	; (1330 <VZpeakSetGain+0x30>)
    1320:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1328:	f007 bd7e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    132c:	42480000 	.word	0x42480000
    1330:	200008d4 	.word	0x200008d4
    1334:	f3af 8000 	nop.w
    1338:	f3af 8000 	nop.w
    133c:	f3af 8000 	nop.w

00001340 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1340:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1344:	ed9f 7a09 	vldr	s14, [pc, #36]	; 136c <VZlowshelfSetGain+0x2c>
{
    1348:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    134a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    134e:	4605      	mov	r5, r0
    1350:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1352:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1356:	eeb0 0a67 	vmov.f32	s0, s15
    135a:	f007 fdf9 	bl	8f50 <__fasterdbtoa_veneer>
    135e:	4804      	ldr	r0, [pc, #16]	; (1370 <VZlowshelfSetGain+0x30>)
    1360:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    1364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    1368:	f007 bd5e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    136c:	42480000 	.word	0x42480000
    1370:	200008c4 	.word	0x200008c4
    1374:	f3af 8000 	nop.w
    1378:	f3af 8000 	nop.w
    137c:	f3af 8000 	nop.w

00001380 <VZhighshelfSetGain>:
    1380:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1384:	ed9f 7a09 	vldr	s14, [pc, #36]	; 13ac <VZhighshelfSetGain+0x2c>
    1388:	b538      	push	{r3, r4, r5, lr}
    138a:	eee0 7a07 	vfma.f32	s15, s0, s14
    138e:	4605      	mov	r5, r0
    1390:	460c      	mov	r4, r1
    1392:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1396:	eeb0 0a67 	vmov.f32	s0, s15
    139a:	f007 fdd9 	bl	8f50 <__fasterdbtoa_veneer>
    139e:	4804      	ldr	r0, [pc, #16]	; (13b0 <VZhighshelfSetGain+0x30>)
    13a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    13a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    13a8:	f007 bd3e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    13ac:	42480000 	.word	0x42480000
    13b0:	200008c4 	.word	0x200008c4
    13b4:	f3af 8000 	nop.w
    13b8:	f3af 8000 	nop.w
    13bc:	f3af 8000 	nop.w

000013c0 <VZbandrejectSetGain>:
    13c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    13c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    13c8:	b538      	push	{r3, r4, r5, lr}
    13ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    13ce:	4605      	mov	r5, r0
    13d0:	460c      	mov	r4, r1
    13d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    13d6:	eeb0 0a67 	vmov.f32	s0, s15
    13da:	f007 fdb9 	bl	8f50 <__fasterdbtoa_veneer>
    13de:	4b03      	ldr	r3, [pc, #12]	; (13ec <VZbandrejectSetGain+0x2c>)
    13e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    13e4:	ed84 0a00 	vstr	s0, [r4]
    13e8:	bd38      	pop	{r3, r4, r5, pc}
    13ea:	bf00      	nop
    13ec:	200050ac 	.word	0x200050ac
    13f0:	f3af 8000 	nop.w
    13f4:	f3af 8000 	nop.w
    13f8:	f3af 8000 	nop.w
    13fc:	f3af 8000 	nop.w

00001400 <LadderLowpassSetGain>:
    1400:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1404:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1408:	b538      	push	{r3, r4, r5, lr}
    140a:	eee0 7a07 	vfma.f32	s15, s0, s14
    140e:	4605      	mov	r5, r0
    1410:	460c      	mov	r4, r1
    1412:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    1416:	eeb0 0a67 	vmov.f32	s0, s15
    141a:	f007 fd99 	bl	8f50 <__fasterdbtoa_veneer>
    141e:	4b03      	ldr	r3, [pc, #12]	; (142c <LadderLowpassSetGain+0x2c>)
    1420:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1424:	ed84 0a00 	vstr	s0, [r4]
    1428:	bd38      	pop	{r3, r4, r5, pc}
    142a:	bf00      	nop
    142c:	200050ac 	.word	0x200050ac
    1430:	f3af 8000 	nop.w
    1434:	f3af 8000 	nop.w
    1438:	f3af 8000 	nop.w
    143c:	f3af 8000 	nop.w

00001440 <envelope_tick>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}


void __ATTR_ITCMRAM envelope_tick(int string)
{
    1440:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < NUM_ENV; v++)
	{
		if (envOn[v])
    1442:	4d1d      	ldr	r5, [pc, #116]	; (14b8 <envelope_tick+0x78>)
{
    1444:	4604      	mov	r4, r0
		if (envOn[v])
    1446:	782b      	ldrb	r3, [r5, #0]
    1448:	bb53      	cbnz	r3, 14a0 <envelope_tick+0x60>
    144a:	786b      	ldrb	r3, [r5, #1]
    144c:	b9e3      	cbnz	r3, 1488 <envelope_tick+0x48>
    144e:	78ab      	ldrb	r3, [r5, #2]
    1450:	b973      	cbnz	r3, 1470 <envelope_tick+0x30>
    1452:	78eb      	ldrb	r3, [r5, #3]
    1454:	b903      	cbnz	r3, 1458 <envelope_tick+0x18>
		{
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
		}
	}
}
    1456:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    1458:	4b18      	ldr	r3, [pc, #96]	; (14bc <envelope_tick+0x7c>)
    145a:	1da0      	adds	r0, r4, #6
    145c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1460:	f007 fd1e 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    1464:	4816      	ldr	r0, [pc, #88]	; (14c0 <envelope_tick+0x80>)
    1466:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    146a:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
}
    146e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    1470:	4b12      	ldr	r3, [pc, #72]	; (14bc <envelope_tick+0x7c>)
    1472:	1d20      	adds	r0, r4, #4
    1474:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1478:	f007 fd12 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    147c:	4b10      	ldr	r3, [pc, #64]	; (14c0 <envelope_tick+0x80>)
    147e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1482:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    1486:	e7e4      	b.n	1452 <envelope_tick+0x12>
    1488:	4b0c      	ldr	r3, [pc, #48]	; (14bc <envelope_tick+0x7c>)
    148a:	1ca0      	adds	r0, r4, #2
    148c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1490:	f007 fd06 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    1494:	4b0a      	ldr	r3, [pc, #40]	; (14c0 <envelope_tick+0x80>)
    1496:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    149a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    149e:	e7d6      	b.n	144e <envelope_tick+0xe>
    14a0:	4806      	ldr	r0, [pc, #24]	; (14bc <envelope_tick+0x7c>)
    14a2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    14a6:	f007 fcfb 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <envelope_tick+0x80>)
    14ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    14b0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    14b4:	e7c9      	b.n	144a <envelope_tick+0xa>
    14b6:	bf00      	nop
    14b8:	20005070 	.word	0x20005070
    14bc:	20005074 	.word	0x20005074
    14c0:	200146d0 	.word	0x200146d0
    14c4:	f3af 8000 	nop.w
    14c8:	f3af 8000 	nop.w
    14cc:	f3af 8000 	nop.w
    14d0:	f3af 8000 	nop.w
    14d4:	f3af 8000 	nop.w
    14d8:	f3af 8000 	nop.w
    14dc:	f3af 8000 	nop.w

000014e0 <lfo_tick>:


void __ATTR_ITCMRAM lfo_tick(int string)
{
    14e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    14e4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1534 <lfo_tick+0x54>
    14e8:	b082      	sub	sp, #8
    14ea:	4d10      	ldr	r5, [pc, #64]	; (152c <lfo_tick+0x4c>)
    14ec:	4607      	mov	r7, r0
    14ee:	4e10      	ldr	r6, [pc, #64]	; (1530 <lfo_tick+0x50>)
    14f0:	f108 0904 	add.w	r9, r8, #4
    14f4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    14f8:	4644      	mov	r4, r8
	for (int i = 0; i < NUM_LFOS; i++)
	{
		if (lfoOn[i])
		{
			float sample = 0.0f;
    14fa:	f04f 0a00 	mov.w	sl, #0
    14fe:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    1502:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    1506:	463a      	mov	r2, r7
    1508:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    150a:	b133      	cbz	r3, 151a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    150c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    150e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    1512:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    1514:	9b01      	ldr	r3, [sp, #4]
    1516:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    151a:	454c      	cmp	r4, r9
    151c:	f106 0604 	add.w	r6, r6, #4
    1520:	f105 0508 	add.w	r5, r5, #8
    1524:	d1eb      	bne.n	14fe <lfo_tick+0x1e>
		}
	}
}
    1526:	b002      	add	sp, #8
    1528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    152c:	200146d0 	.word	0x200146d0
    1530:	20005380 	.word	0x20005380
    1534:	2000531c 	.word	0x2000531c
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <setEnvelopeAttack>:


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.001f;
    1540:	eddf 7a05 	vldr	s15, [pc, #20]	; 1558 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    1544:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1548:	4b04      	ldr	r3, [pc, #16]	; (155c <setEnvelopeAttack+0x1c>)
    154a:	ee30 0a27 	vadd.f32	s0, s0, s15
    154e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1552:	f007 bc45 	b.w	8de0 <__tADSRT_setAttack_veneer>
    1556:	bf00      	nop
    1558:	3a83126f 	.word	0x3a83126f
    155c:	20005074 	.word	0x20005074

00001560 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.001f;
    1560:	eddf 7a05 	vldr	s15, [pc, #20]	; 1578 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    1564:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <setEnvelopeDecay+0x1c>)
    156a:	ee30 0a27 	vadd.f32	s0, s0, s15
    156e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1572:	f007 bbbd 	b.w	8cf0 <__tADSRT_setDecay_veneer>
    1576:	bf00      	nop
    1578:	3a83126f 	.word	0x3a83126f
    157c:	20005074 	.word	0x20005074

00001580 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
    1580:	4b03      	ldr	r3, [pc, #12]	; (1590 <setEnvelopeSustain+0x10>)
    1582:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    158a:	f007 bc21 	b.w	8dd0 <__tADSRT_setSustain_veneer>
    158e:	bf00      	nop
    1590:	20005074 	.word	0x20005074
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.001f;
    15a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 15b8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    15a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    15a8:	4b04      	ldr	r3, [pc, #16]	; (15bc <setEnvelopeRelease+0x1c>)
    15aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    15ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    15b2:	f007 bc3d 	b.w	8e30 <__tADSRT_setRelease_veneer>
    15b6:	bf00      	nop
    15b8:	3a83126f 	.word	0x3a83126f
    15bc:	20005074 	.word	0x20005074

000015c0 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    15c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    15c4:	eddf 6a08 	vldr	s13, [pc, #32]	; 15e8 <setEnvelopeLeak+0x28>
    15c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 15ec <setEnvelopeLeak+0x2c>
    15cc:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    15d0:	4b07      	ldr	r3, [pc, #28]	; (15f0 <setEnvelopeLeak+0x30>)
    15d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    15d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    15da:	eea7 7aa6 	vfma.f32	s14, s15, s13
    15de:	eeb0 0a47 	vmov.f32	s0, s14
    15e2:	f007 bbe9 	b.w	8db8 <__tADSRT_setLeakFactor_veneer>
    15e6:	bf00      	nop
    15e8:	3851b717 	.word	0x3851b717
    15ec:	3f7ffcb9 	.word	0x3f7ffcb9
    15f0:	20005074 	.word	0x20005074
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
    1600:	4b02      	ldr	r3, [pc, #8]	; (160c <setAmp+0xc>)
    1602:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1606:	ed81 0a00 	vstr	s0, [r1]
}
    160a:	4770      	bx	lr
    160c:	20000a04 	.word	0x20000a04
    1610:	f3af 8000 	nop.w
    1614:	f3af 8000 	nop.w
    1618:	f3af 8000 	nop.w
    161c:	f3af 8000 	nop.w

00001620 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
    1620:	4b02      	ldr	r3, [pc, #8]	; (162c <setMaster+0xc>)
    1622:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1626:	ed81 0a00 	vstr	s0, [r1]
}
    162a:	4770      	bx	lr
    162c:	200050cc 	.word	0x200050cc
    1630:	f3af 8000 	nop.w
    1634:	f3af 8000 	nop.w
    1638:	f3af 8000 	nop.w
    163c:	f3af 8000 	nop.w

00001640 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
    1640:	4b01      	ldr	r3, [pc, #4]	; (1648 <setTranspose+0x8>)
    1642:	ed83 0a00 	vstr	s0, [r3]
}
    1646:	4770      	bx	lr
    1648:	200148f0 	.word	0x200148f0
    164c:	f3af 8000 	nop.w
    1650:	f3af 8000 	nop.w
    1654:	f3af 8000 	nop.w
    1658:	f3af 8000 	nop.w
    165c:	f3af 8000 	nop.w

00001660 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    1660:	eddf 7a03 	vldr	s15, [pc, #12]	; 1670 <setPitchBendRange+0x10>
    1664:	4b03      	ldr	r3, [pc, #12]	; (1674 <setPitchBendRange+0x14>)
    1666:	ee20 0a27 	vmul.f32	s0, s0, s15
    166a:	ed83 0a00 	vstr	s0, [r3]
}
    166e:	4770      	bx	lr
    1670:	39000200 	.word	0x39000200
    1674:	20000000 	.word	0x20000000
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1680:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    1684:	eddf 0a0b 	vldr	s1, [pc, #44]	; 16b4 <setFinalLowpass+0x34>
{
    1688:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    168c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 16b8 <setFinalLowpass+0x38>
    1690:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 16bc <setFinalLowpass+0x3c>
    1694:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    1698:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    169a:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
    169e:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    16a0:	f005 fefe 	bl	74a0 <LEAF_clip>
    16a4:	4806      	ldr	r0, [pc, #24]	; (16c0 <setFinalLowpass+0x40>)
    16a6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    16aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    16ae:	f007 bc47 	b.w	8f40 <__tSVF_setFreqFast_veneer>
    16b2:	bf00      	nop
    16b4:	420fb824 	.word	0x420fb824
    16b8:	457ff000 	.word	0x457ff000
    16bc:	00000000 	.word	0x00000000
    16c0:	200050c4 	.word	0x200050c4
    16c4:	f3af 8000 	nop.w
    16c8:	f3af 8000 	nop.w
    16cc:	f3af 8000 	nop.w
    16d0:	f3af 8000 	nop.w
    16d4:	f3af 8000 	nop.w
    16d8:	f3af 8000 	nop.w
    16dc:	f3af 8000 	nop.w

000016e0 <tickMappings>:


void __ATTR_ITCMRAM tickMappings(void)
{
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
	for (int i = 0; i < numMappings; i++)
    16e4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 1844 <tickMappings+0x164>
	interruptChecker = 0;
    16e8:	f04f 0b00 	mov.w	fp, #0
    16ec:	4b51      	ldr	r3, [pc, #324]	; (1834 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    16ee:	f899 2000 	ldrb.w	r2, [r9]
{
    16f2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    16f6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    16fa:	2a00      	cmp	r2, #0
    16fc:	f000 8087 	beq.w	180e <tickMappings+0x12e>
    1700:	4c4d      	ldr	r4, [pc, #308]	; (1838 <tickMappings+0x158>)
	{
		if (mappings[i].destNumber != 255)
		{
			for (int v = 0; v < numStringsThisBoard; v++)
    1702:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1848 <tickMappings+0x168>
    1706:	e004      	b.n	1712 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    1708:	f10b 0b01 	add.w	fp, fp, #1
    170c:	344c      	adds	r4, #76	; 0x4c
    170e:	455a      	cmp	r2, fp
    1710:	dd7d      	ble.n	180e <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    1712:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    1716:	2bff      	cmp	r3, #255	; 0xff
    1718:	d0f6      	beq.n	1708 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    171a:	f898 3000 	ldrb.w	r3, [r8]
    171e:	2b00      	cmp	r3, #0
    1720:	d0f2      	beq.n	1708 <tickMappings+0x28>
    1722:	4b46      	ldr	r3, [pc, #280]	; (183c <tickMappings+0x15c>)
    1724:	4626      	mov	r6, r4
    1726:	2500      	movs	r5, #0
    1728:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
			{
				float unsmoothedValue = 0.0f;
				float smoothedValue = 0.0f;
				for (int j = 0; j < 3; j++)
				{
					if (mappings[i].hookActive[j])
    172c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    1730:	2b00      	cmp	r3, #0
    1732:	d070      	beq.n	1816 <tickMappings+0x136>
					{
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1734:	6832      	ldr	r2, [r6, #0]
    1736:	69f3      	ldr	r3, [r6, #28]
    1738:	ed92 8a00 	vldr	s16, [r2]
    173c:	ed93 7a00 	vldr	s14, [r3]
    1740:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    1744:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    1748:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    174a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    174e:	2900      	cmp	r1, #0
    1750:	d069      	beq.n	1826 <tickMappings+0x146>
						{
							smoothedValue += sum;
    1752:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    1756:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 1840 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    175a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    175e:	b183      	cbz	r3, 1782 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1760:	68b2      	ldr	r2, [r6, #8]
    1762:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1764:	ed92 7a00 	vldr	s14, [r2]
    1768:	ed93 6a00 	vldr	s12, [r3]
    176c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    1770:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    1774:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1776:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    177a:	2900      	cmp	r1, #0
    177c:	d156      	bne.n	182c <tickMappings+0x14c>
						}
						else
						{
							unsmoothedValue += sum;
    177e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    1782:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    1786:	b183      	cbz	r3, 17aa <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    1788:	6932      	ldr	r2, [r6, #16]
    178a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    178c:	ed92 7a00 	vldr	s14, [r2]
    1790:	ed93 6a00 	vldr	s12, [r3]
    1794:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    1798:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    179c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    179e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    17a2:	2900      	cmp	r1, #0
    17a4:	d13c      	bne.n	1820 <tickMappings+0x140>
							unsmoothedValue += sum;
    17a6:	ee38 8a07 	vadd.f32	s16, s16, s14
						}
					}
				}
				//sources are now summed - let's add the initial value
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    17aa:	f854 3c04 	ldr.w	r3, [r4, #-4]

				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    17ae:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    17b0:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    17b2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    17b6:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    17ba:	ee37 0a80 	vadd.f32	s0, s15, s0
    17be:	f005 fddf 	bl	7380 <tExpSmooth_setDest>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    17c2:	4638      	mov	r0, r7
    17c4:	f005 fdcc 	bl	7360 <tExpSmooth_tick>
				float finalVal = unsmoothedValue + smoothedValue;

				//now scale the value with the correct scaling function
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    17c8:	f854 ac04 	ldr.w	sl, [r4, #-4]
    17cc:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    17d0:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    17d2:	f8da 3010 	ldr.w	r3, [sl, #16]
    17d6:	4798      	blx	r3
    17d8:	1cab      	adds	r3, r5, #2

				//and pop that value where it belongs by setting the actual parameter
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    17da:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    17dc:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    17de:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    17e2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    17e6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    17ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    17ee:	6942      	ldr	r2, [r0, #20]
    17f0:	7e00      	ldrb	r0, [r0, #24]
    17f2:	ed93 0a00 	vldr	s0, [r3]
    17f6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    17f8:	f898 3000 	ldrb.w	r3, [r8]
    17fc:	42ab      	cmp	r3, r5
    17fe:	dc95      	bgt.n	172c <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    1800:	f899 2000 	ldrb.w	r2, [r9]
    1804:	f10b 0b01 	add.w	fp, fp, #1
    1808:	344c      	adds	r4, #76	; 0x4c
    180a:	455a      	cmp	r2, fp
    180c:	dc81      	bgt.n	1712 <tickMappings+0x32>
			}
		}
	}


}
    180e:	ecbd 8b02 	vpop	{d8}
    1812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    1816:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1840 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    181a:	eeb0 8a67 	vmov.f32	s16, s15
    181e:	e79c      	b.n	175a <tickMappings+0x7a>
							smoothedValue += sum;
    1820:	ee77 7a87 	vadd.f32	s15, s15, s14
    1824:	e7c1      	b.n	17aa <tickMappings+0xca>
				float smoothedValue = 0.0f;
    1826:	eddf 7a06 	vldr	s15, [pc, #24]	; 1840 <tickMappings+0x160>
    182a:	e796      	b.n	175a <tickMappings+0x7a>
							smoothedValue += sum;
    182c:	ee77 7a87 	vadd.f32	s15, s15, s14
    1830:	e7a7      	b.n	1782 <tickMappings+0xa2>
    1832:	bf00      	nop
    1834:	20016ce8 	.word	0x20016ce8
    1838:	20018d28 	.word	0x20018d28
    183c:	2000540c 	.word	0x2000540c
    1840:	00000000 	.word	0x00000000
    1844:	20019968 	.word	0x20019968
    1848:	2000000d 	.word	0x2000000d
    184c:	f3af 8000 	nop.w
    1850:	f3af 8000 	nop.w
    1854:	f3af 8000 	nop.w
    1858:	f3af 8000 	nop.w
    185c:	f3af 8000 	nop.w

00001860 <audioTickString>:

	return masterSample * audioMasterLevel * 0.98f;
}

float __ATTR_ITCMRAM audioTickString(void)
{
    1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    1864:	f8df 8208 	ldr.w	r8, [pc, #520]	; 1a70 <audioTickString+0x210>
    1868:	4e71      	ldr	r6, [pc, #452]	; (1a30 <audioTickString+0x1d0>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    186a:	4872      	ldr	r0, [pc, #456]	; (1a34 <audioTickString+0x1d4>)
    186c:	4d72      	ldr	r5, [pc, #456]	; (1a38 <audioTickString+0x1d8>)
    186e:	4634      	mov	r4, r6
    1870:	f106 0930 	add.w	r9, r6, #48	; 0x30
{
    1874:	ed2d 8b0c 	vpush	{d8-d13}
    1878:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
    187a:	f898 3000 	ldrb.w	r3, [r8]
{
    187e:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    1880:	009b      	lsls	r3, r3, #2
    1882:	3307      	adds	r3, #7
    1884:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    1888:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    188c:	f005 fd68 	bl	7360 <tExpSmooth_tick>
    1890:	eef0 ba40 	vmov.f32	s23, s0
	float note[numStringsThisBoard];
    1894:	46ea      	mov	sl, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1896:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    1898:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    189a:	f005 fd61 	bl	7360 <tExpSmooth_tick>
    189e:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    18a2:	454c      	cmp	r4, r9
    18a4:	d1f7      	bne.n	1896 <audioTickString+0x36>
	}
	pluckPos = knobScaled[9];
    18a6:	4a65      	ldr	r2, [pc, #404]	; (1a3c <audioTickString+0x1dc>)
    18a8:	6a71      	ldr	r1, [r6, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
    18aa:	f898 3000 	ldrb.w	r3, [r8]
	float temp = 0.0f;
    18ae:	ed9f 9a64 	vldr	s18, [pc, #400]	; 1a40 <audioTickString+0x1e0>
	pluckPos = knobScaled[9];
    18b2:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    18b4:	2b00      	cmp	r3, #0
    18b6:	f000 8084 	beq.w	19c2 <audioTickString+0x162>
		float finalFreq = mtof(note[i]);
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    18ba:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    18be:	4654      	mov	r4, sl
		if (note[i] < 0.0f)
    18c0:	eeb0 ba49 	vmov.f32	s22, s18
    18c4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 1a74 <audioTickString+0x214>
    18c8:	4d5e      	ldr	r5, [pc, #376]	; (1a44 <audioTickString+0x1e4>)
	for (int i = 0; i < numStringsThisBoard; i++)
    18ca:	f04f 0a00 	mov.w	sl, #0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    18ce:	eddf ca5e 	vldr	s25, [pc, #376]	; 1a48 <audioTickString+0x1e8>
    18d2:	ed9f ca5e 	vldr	s24, [pc, #376]	; 1a4c <audioTickString+0x1ec>
		float decay = 0.1f;
    18d6:	eddf 9a5e 	vldr	s19, [pc, #376]	; 1a50 <audioTickString+0x1f0>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    18da:	ed9f da5e 	vldr	s26, [pc, #376]	; 1a54 <audioTickString+0x1f4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    18de:	4b5e      	ldr	r3, [pc, #376]	; (1a58 <audioTickString+0x1f8>)
    18e0:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    18e4:	ecb9 0a01 	vldmia	r9!, {s0}
    18e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    18ec:	edd2 7a00 	vldr	s15, [r2]
    18f0:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
    18f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    18f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18fc:	f100 8093 	bmi.w	1a26 <audioTickString+0x1c6>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1900:	ed84 0a00 	vstr	s0, [r4]
		float finalFreq = mtof(note[i]);
    1904:	f007 f9b8 	bl	8c78 <__mtof_veneer>
    1908:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    190c:	eeb0 0a4c 	vmov.f32	s0, s24
    1910:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
		float decay = 0.1f;
    1914:	eeb0 aa69 	vmov.f32	s20, s19
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    1918:	eea7 0aac 	vfma.f32	s0, s15, s25
    191c:	f007 fae4 	bl	8ee8 <__faster_mtof_veneer>
		if (lsDecay[i])
    1920:	f815 2b01 	ldrb.w	r2, [r5], #1
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
    1924:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
    1928:	b12a      	cbz	r2, 1936 <audioTickString+0xd6>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
    192a:	eeb0 aa6a 	vmov.f32	s20, s21
    192e:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    1932:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    1936:	4b49      	ldr	r3, [pc, #292]	; (1a5c <audioTickString+0x1fc>)
	for (int i = 0; i < numStringsThisBoard; i++)
    1938:	f10a 0a01 	add.w	sl, sl, #1
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    193c:	ed96 0a08 	vldr	s0, [r6, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    1940:	3404      	adds	r4, #4
    1942:	eb03 000b 	add.w	r0, r3, fp
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    1946:	6078      	str	r0, [r7, #4]
    1948:	f007 fab6 	bl	8eb8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    194c:	eeb0 0a4a 	vmov.f32	s0, s20
    1950:	6878      	ldr	r0, [r7, #4]
    1952:	f007 f9d1 	bl	8cf8 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    1956:	eeb0 0a68 	vmov.f32	s0, s17
    195a:	6878      	ldr	r0, [r7, #4]
    195c:	f007 fa3c 	bl	8dd8 <__tSimpleLivingString3_setDampFreq_veneer>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
    1960:	ed96 0a00 	vldr	s0, [r6]
    1964:	6878      	ldr	r0, [r7, #4]
    1966:	f007 fa1f 	bl	8da8 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
    196a:	ed96 0a01 	vldr	s0, [r6, #4]
    196e:	6878      	ldr	r0, [r7, #4]
    1970:	ee20 0a29 	vmul.f32	s0, s0, s19
    1974:	f007 faa8 	bl	8ec8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
    1978:	ed96 0a02 	vldr	s0, [r6, #8]
    197c:	6878      	ldr	r0, [r7, #4]
    197e:	ee20 0a29 	vmul.f32	s0, s0, s19
    1982:	f007 f99d 	bl	8cc0 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
    1986:	edd6 7a03 	vldr	s15, [r6, #12]
    198a:	6878      	ldr	r0, [r7, #4]
    198c:	eef4 7aea 	vcmpe.f32	s15, s21
    1990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1994:	bfcc      	ite	gt
    1996:	2101      	movgt	r1, #1
    1998:	2100      	movle	r1, #0
    199a:	f007 f981 	bl	8ca0 <__tSimpleLivingString3_setLevMode_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    199e:	eeb0 0a48 	vmov.f32	s0, s16
    19a2:	6878      	ldr	r0, [r7, #4]
    19a4:	f007 f9e0 	bl	8d68 <__tSimpleLivingString3_setFreq_veneer>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
    19a8:	eeb0 0a4b 	vmov.f32	s0, s22
    19ac:	6878      	ldr	r0, [r7, #4]
    19ae:	f007 fa4b 	bl	8e48 <__tSimpleLivingString3_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    19b2:	f898 2000 	ldrb.w	r2, [r8]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
    19b6:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    19ba:	4552      	cmp	r2, sl
    19bc:	dc8f      	bgt.n	18de <audioTickString+0x7e>
    19be:	ee29 9a2a 	vmul.f32	s18, s18, s21
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    19c2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 1a60 <audioTickString+0x200>
    19c6:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a64 <audioTickString+0x204>
    19ca:	eef0 0a40 	vmov.f32	s1, s0
    19ce:	ed9f 1a26 	vldr	s2, [pc, #152]	; 1a68 <audioTickString+0x208>
    19d2:	eeeb 0aa7 	vfma.f32	s1, s23, s15
    19d6:	f005 fd63 	bl	74a0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    19da:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    19de:	4a23      	ldr	r2, [pc, #140]	; (1a6c <audioTickString+0x20c>)
	float omAlpha = 1.0f - alpha;
    19e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol * 0.5f;

	return temp;
}
    19e4:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
    19e6:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    19ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
    19ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    19f2:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    19f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    19f8:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    19fc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    1a00:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1a04:	ed93 7a00 	vldr	s14, [r3]
    1a08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1a0c:	edd2 6a00 	vldr	s13, [r2]
    1a10:	ee20 0a26 	vmul.f32	s0, s0, s13
    1a14:	eea7 0a27 	vfma.f32	s0, s14, s15
}
    1a18:	ee20 0a09 	vmul.f32	s0, s0, s18
    1a1c:	46bd      	mov	sp, r7
    1a1e:	ecbd 8b0c 	vpop	{d8-d13}
    1a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
    1a26:	eeb0 0a4b 	vmov.f32	s0, s22
    1a2a:	ed84 ba00 	vstr	s22, [r4]
    1a2e:	e769      	b.n	1904 <audioTickString+0xa4>
    1a30:	20005224 	.word	0x20005224
    1a34:	2001491c 	.word	0x2001491c
    1a38:	20005298 	.word	0x20005298
    1a3c:	20000148 	.word	0x20000148
    1a40:	00000000 	.word	0x00000000
    1a44:	20005408 	.word	0x20005408
    1a48:	430c0000 	.word	0x430c0000
    1a4c:	42700000 	.word	0x42700000
    1a50:	3dcccccd 	.word	0x3dcccccd
    1a54:	44480000 	.word	0x44480000
    1a58:	20014860 	.word	0x20014860
    1a5c:	200053f0 	.word	0x200053f0
    1a60:	423c0000 	.word	0x423c0000
    1a64:	42a00000 	.word	0x42a00000
    1a68:	42fe0000 	.word	0x42fe0000
    1a6c:	200004d4 	.word	0x200004d4
    1a70:	2000000d 	.word	0x2000000d
    1a74:	20014868 	.word	0x20014868
    1a78:	f3af 8000 	nop.w
    1a7c:	f3af 8000 	nop.w

00001a80 <audioTickString2>:



float  __ATTR_ITCMRAM audioTickString2(void)
{
    1a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    1a84:	4b9f      	ldr	r3, [pc, #636]	; (1d04 <audioTickString2+0x284>)
    1a86:	4da0      	ldr	r5, [pc, #640]	; (1d08 <audioTickString2+0x288>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1a88:	48a0      	ldr	r0, [pc, #640]	; (1d0c <audioTickString2+0x28c>)
    1a8a:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 1d5c <audioTickString2+0x2dc>
    1a8e:	462c      	mov	r4, r5
    1a90:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
    1a94:	ed2d 8b08 	vpush	{d8-d11}
    1a98:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
    1a9a:	781b      	ldrb	r3, [r3, #0]
{
    1a9c:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    1a9e:	009b      	lsls	r3, r3, #2
    1aa0:	3307      	adds	r3, #7
    1aa2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    1aa6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    1aaa:	f005 fc59 	bl	7360 <tExpSmooth_tick>
    1aae:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
    1ab2:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1ab4:	4648      	mov	r0, r9
	for (int i = 0; i < 12; i++)
    1ab6:	f109 0904 	add.w	r9, r9, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    1aba:	f005 fc51 	bl	7360 <tExpSmooth_tick>
    1abe:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    1ac2:	4554      	cmp	r4, sl
    1ac4:	d1f6      	bne.n	1ab4 <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
    1ac6:	4b8f      	ldr	r3, [pc, #572]	; (1d04 <audioTickString2+0x284>)
    1ac8:	781b      	ldrb	r3, [r3, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	f000 8116 	beq.w	1cfc <audioTickString2+0x27c>
    1ad0:	4b8f      	ldr	r3, [pc, #572]	; (1d10 <audioTickString2+0x290>)
    1ad2:	f04f 0800 	mov.w	r8, #0
    1ad6:	4c8f      	ldr	r4, [pc, #572]	; (1d14 <audioTickString2+0x294>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
    1ad8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 1d18 <audioTickString2+0x298>
		if (note[i] < 0.0f)
    1adc:	ed9f aa8f 	vldr	s20, [pc, #572]	; 1d1c <audioTickString2+0x29c>
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1ae0:	f8df b27c 	ldr.w	fp, [pc, #636]	; 1d60 <audioTickString2+0x2e0>
    1ae4:	f8df a27c 	ldr.w	sl, [pc, #636]	; 1d64 <audioTickString2+0x2e4>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1ae8:	f8df 927c 	ldr.w	r9, [pc, #636]	; 1d68 <audioTickString2+0x2e8>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1aec:	eddf 9a8c 	vldr	s19, [pc, #560]	; 1d20 <audioTickString2+0x2a0>
    1af0:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1af2:	687b      	ldr	r3, [r7, #4]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1af4:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
    1af6:	eddf aa8b 	vldr	s21, [pc, #556]	; 1d24 <audioTickString2+0x2a4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1afa:	ecb3 7a01 	vldmia	r3!, {s14}
    1afe:	607b      	str	r3, [r7, #4]
    1b00:	4b89      	ldr	r3, [pc, #548]	; (1d28 <audioTickString2+0x2a8>)
    1b02:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    1b06:	edd3 7a00 	vldr	s15, [r3]
    1b0a:	ea4f 0388 	mov.w	r3, r8, lsl #2
	for (int i = 0; i < numStringsThisBoard; i++)
    1b0e:	f108 0801 	add.w	r8, r8, #1
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1b12:	ee77 7a87 	vadd.f32	s15, s15, s14
		if (note[i] < 0.0f)
    1b16:	603b      	str	r3, [r7, #0]
    1b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    1b20:	bf54      	ite	pl
    1b22:	edc6 7a00 	vstrpl	s15, [r6]
			note[i] = 0.0f;
    1b26:	ed86 aa00 	vstrmi	s20, [r6]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1b2a:	f007 f925 	bl	8d78 <__tNoise_tick_veneer>
    1b2e:	4650      	mov	r0, sl
    1b30:	f007 f9ee 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1b34:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    1b36:	eeb0 ba40 	vmov.f32	s22, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1b3a:	f007 f91d 	bl	8d78 <__tNoise_tick_veneer>
    1b3e:	4648      	mov	r0, r9
    1b40:	f007 f9e6 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b44:	4a79      	ldr	r2, [pc, #484]	; (1d2c <audioTickString2+0x2ac>)
    1b46:	683b      	ldr	r3, [r7, #0]
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1b48:	ee3b ba00 	vadd.f32	s22, s22, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b4c:	18d0      	adds	r0, r2, r3
    1b4e:	f007 f8fb 	bl	8d48 <__tADSRT_tick_veneer>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1b52:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1b54:	eeb0 8a40 	vmov.f32	s16, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
    1b58:	eeb0 0a69 	vmov.f32	s0, s19
    1b5c:	f007 f988 	bl	8e70 <__tLivingString2_setPickupPos_veneer>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
    1b60:	ed95 0a05 	vldr	s0, [r5, #20]
    1b64:	ee20 0a28 	vmul.f32	s0, s0, s17
    1b68:	f007 f9be 	bl	8ee8 <__faster_mtof_veneer>
    1b6c:	4650      	mov	r0, sl
    1b6e:	f007 f8e7 	bl	8d40 <__tVZFilter_setFreq_veneer>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
    1b72:	ed95 0a06 	vldr	s0, [r5, #24]
    1b76:	ee20 0a28 	vmul.f32	s0, s0, s17
    1b7a:	f007 f9b5 	bl	8ee8 <__faster_mtof_veneer>
    1b7e:	4648      	mov	r0, r9
    1b80:	f007 f8de 	bl	8d40 <__tVZFilter_setFreq_veneer>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
    1b84:	ed95 0a07 	vldr	s0, [r5, #28]
    1b88:	4620      	mov	r0, r4
    1b8a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    1b8e:	f007 f9af 	bl	8ef0 <__tLivingString2_setLevSmoothFactor_veneer>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
    1b92:	ed95 0a08 	vldr	s0, [r5, #32]
    1b96:	4620      	mov	r0, r4
    1b98:	ee20 0a2a 	vmul.f32	s0, s0, s21
    1b9c:	f007 f8c0 	bl	8d20 <__tLivingString2_setLevStrength_veneer>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
    1ba0:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
    1ba4:	4620      	mov	r0, r4
    1ba6:	f007 f86b 	bl	8c80 <__tLivingString2_setBrightness_veneer>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
    1baa:	ed95 0a02 	vldr	s0, [r5, #8]
    1bae:	4620      	mov	r0, r4
    1bb0:	f007 f842 	bl	8c38 <__tLivingString2_setPickPos_veneer>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
    1bb4:	eeb0 0a6a 	vmov.f32	s0, s21
    1bb8:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
    1bbc:	4620      	mov	r0, r4
    1bbe:	eddf 7a5c 	vldr	s15, [pc, #368]	; 1d30 <audioTickString2+0x2b0>
    1bc2:	eea7 0a27 	vfma.f32	s0, s14, s15
    1bc6:	f007 f84b 	bl	8c60 <__tLivingString2_setPrepPos_veneer>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
    1bca:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 1d34 <audioTickString2+0x2b4>
    1bce:	ecf6 0a01 	vldmia	r6!, {s1}
    1bd2:	ed9f 0a59 	vldr	s0, [pc, #356]	; 1d38 <audioTickString2+0x2b8>
    1bd6:	f005 fc63 	bl	74a0 <LEAF_clip>
    1bda:	ed9f 7a58 	vldr	s14, [pc, #352]	; 1d3c <audioTickString2+0x2bc>
    1bde:	eddf 7a58 	vldr	s15, [pc, #352]	; 1d40 <audioTickString2+0x2c0>

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);

		tLivingString2_setFreq(&strings[i], finalFreq);
    1be2:	4620      	mov	r0, r4
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1be4:	4a57      	ldr	r2, [pc, #348]	; (1d44 <audioTickString2+0x2c4>)
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
    1be6:	eee0 7a07 	vfma.f32	s15, s0, s14
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		int tempIndexI = (int)tempIndexF;
    1bee:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1bf2:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
    1bf6:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
    1bfa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1bfe:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1c00:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
    1c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1c0c:	f3c1 010e 	ubfx	r1, r1, #0, #15
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1c10:	ee37 7a26 	vadd.f32	s14, s14, s13
    1c14:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1c18:	eb02 0381 	add.w	r3, r2, r1, lsl #2
		float finalFreq = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
    1c1c:	ed93 0a00 	vldr	s0, [r3]
    1c20:	ee27 0a80 	vmul.f32	s0, s15, s0
		tLivingString2_setFreq(&strings[i], finalFreq);
    1c24:	eea7 0a26 	vfma.f32	s0, s14, s13
    1c28:	f007 f8f2 	bl	8e10 <__tLivingString2_setFreq_veneer>


		if (knobScaled[4] > 0.5f)
    1c2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1c30:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
    1c34:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
    1c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c40:	dd4d      	ble.n	1cde <audioTickString2+0x25e>
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
    1c42:	4620      	mov	r0, r4
    1c44:	ee28 0a00 	vmul.f32	s0, s16, s0
    1c48:	f007 f942 	bl	8ed0 <__tLivingString2_setPrepIndex_veneer>
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
		}

		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1c4c:	4620      	mov	r0, r4
    1c4e:	ee2b 0a08 	vmul.f32	s0, s22, s16
	for (int i = 0; i < numStringsThisBoard; i++)
    1c52:	3404      	adds	r4, #4
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1c54:	f007 f978 	bl	8f48 <__tLivingString2_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1c58:	4b2a      	ldr	r3, [pc, #168]	; (1d04 <audioTickString2+0x284>)
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	4598      	cmp	r8, r3
    1c5e:	f6ff af48 	blt.w	1af2 <audioTickString2+0x72>
    1c62:	ed9f 8a39 	vldr	s16, [pc, #228]	; 1d48 <audioTickString2+0x2c8>
    1c66:	ee20 8a08 	vmul.f32	s16, s0, s16

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    1c6a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 1d4c <audioTickString2+0x2cc>
    1c6e:	eddf 7a38 	vldr	s15, [pc, #224]	; 1d50 <audioTickString2+0x2d0>
    1c72:	eef0 0a40 	vmov.f32	s1, s0
    1c76:	ed9f 1a37 	vldr	s2, [pc, #220]	; 1d54 <audioTickString2+0x2d4>
    1c7a:	eee9 0a27 	vfma.f32	s1, s18, s15
    1c7e:	f005 fc0f 	bl	74a0 <LEAF_clip>
    1c82:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    1c86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1c8a:	4a33      	ldr	r2, [pc, #204]	; (1d58 <audioTickString2+0x2d8>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * 0.5f;

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    1c8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
    1c90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    1c94:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
    1c98:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1c9c:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    1c9e:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    1ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1caa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1cae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    1cb2:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1cb6:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
    1cba:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1cbe:	edd3 6a00 	vldr	s13, [r3]
    1cc2:	ee60 0aa7 	vmul.f32	s1, s1, s15
    1cc6:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    1cca:	ee60 0a88 	vmul.f32	s1, s1, s16
    1cce:	f005 fbe7 	bl	74a0 <LEAF_clip>
}
    1cd2:	370c      	adds	r7, #12
    1cd4:	46bd      	mov	sp, r7
    1cd6:	ecbd 8b08 	vpop	{d8-d11}
    1cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
    1cde:	4620      	mov	r0, r4
    1ce0:	f007 f8f6 	bl	8ed0 <__tLivingString2_setPrepIndex_veneer>
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1ce4:	4620      	mov	r0, r4
    1ce6:	ee2b 0a08 	vmul.f32	s0, s22, s16
	for (int i = 0; i < numStringsThisBoard; i++)
    1cea:	3404      	adds	r4, #4
		temp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
    1cec:	f007 f92c 	bl	8f48 <__tLivingString2_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <audioTickString2+0x284>)
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	4543      	cmp	r3, r8
    1cf6:	f73f aefc 	bgt.w	1af2 <audioTickString2+0x72>
    1cfa:	e7b2      	b.n	1c62 <audioTickString2+0x1e2>
    1cfc:	ed9f 8a07 	vldr	s16, [pc, #28]	; 1d1c <audioTickString2+0x29c>
    1d00:	e7b3      	b.n	1c6a <audioTickString2+0x1ea>
    1d02:	bf00      	nop
    1d04:	2000000d 	.word	0x2000000d
    1d08:	20005224 	.word	0x20005224
    1d0c:	2001491c 	.word	0x2001491c
    1d10:	20014868 	.word	0x20014868
    1d14:	20014880 	.word	0x20014880
    1d18:	43000000 	.word	0x43000000
    1d1c:	00000000 	.word	0x00000000
    1d20:	3f7ff972 	.word	0x3f7ff972
    1d24:	3dcccccd 	.word	0x3dcccccd
    1d28:	20014860 	.word	0x20014860
    1d2c:	20005094 	.word	0x20005094
    1d30:	3f4ccccd 	.word	0x3f4ccccd
    1d34:	43480000 	.word	0x43480000
    1d38:	c3480000 	.word	0xc3480000
    1d3c:	42c80000 	.word	0x42c80000
    1d40:	46800000 	.word	0x46800000
    1d44:	30012000 	.word	0x30012000
    1d48:	3efae148 	.word	0x3efae148
    1d4c:	423c0000 	.word	0x423c0000
    1d50:	42a00000 	.word	0x42a00000
    1d54:	42fe0000 	.word	0x42fe0000
    1d58:	200004d4 	.word	0x200004d4
    1d5c:	20005298 	.word	0x20005298
    1d60:	20005568 	.word	0x20005568
    1d64:	20005578 	.word	0x20005578
    1d68:	2000557c 	.word	0x2000557c
    1d6c:	f3af 8000 	nop.w
    1d70:	f3af 8000 	nop.w
    1d74:	f3af 8000 	nop.w
    1d78:	f3af 8000 	nop.w
    1d7c:	f3af 8000 	nop.w

00001d80 <lfoSawSquareTick>:



void __ATTR_ITCMRAM lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <lfoSawSquareTick+0x18>)
    1d82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1d86:	b510      	push	{r4, lr}
    1d88:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    1d8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1d8e:	f007 f873 	bl	8e78 <__tSawSquareLFO_tick_veneer>
    1d92:	ed84 0a00 	vstr	s0, [r4]
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	20005360 	.word	0x20005360
    1d9c:	f3af 8000 	nop.w

00001da0 <lfoSineTriTick>:

void __ATTR_ITCMRAM lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <lfoSineTriTick+0x18>)
    1da2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1da6:	b510      	push	{r4, lr}
    1da8:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    1daa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dae:	f006 ffc3 	bl	8d38 <__tSineTriLFO_tick_veneer>
    1db2:	ed84 0a00 	vstr	s0, [r4]
}
    1db6:	bd10      	pop	{r4, pc}
    1db8:	200053b0 	.word	0x200053b0
    1dbc:	f3af 8000 	nop.w

00001dc0 <lfoSineTick>:

void __ATTR_ITCMRAM lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
    1dc0:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <lfoSineTick+0x18>)
    1dc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1dc6:	b510      	push	{r4, lr}
    1dc8:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    1dca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dce:	f006 ff1b 	bl	8c08 <__tCycle_tick_veneer>
    1dd2:	ed84 0a00 	vstr	s0, [r4]
}
    1dd6:	bd10      	pop	{r4, pc}
    1dd8:	20005390 	.word	0x20005390
    1ddc:	f3af 8000 	nop.w

00001de0 <lfoTriTick>:

void __ATTR_ITCMRAM lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    1de0:	4b05      	ldr	r3, [pc, #20]	; (1df8 <lfoTriTick+0x18>)
    1de2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1de6:	b510      	push	{r4, lr}
    1de8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    1dea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1dee:	f007 f823 	bl	8e38 <__tTriLFO_tick_veneer>
    1df2:	ed84 0a00 	vstr	s0, [r4]
}
    1df6:	bd10      	pop	{r4, pc}
    1df8:	200053d0 	.word	0x200053d0
    1dfc:	f3af 8000 	nop.w

00001e00 <lfoSawTick>:
void __ATTR_ITCMRAM lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    1e00:	4b08      	ldr	r3, [pc, #32]	; (1e24 <lfoSawTick+0x24>)
    1e02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1e06:	b510      	push	{r4, lr}
    1e08:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    1e0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1e0e:	f006 ff8f 	bl	8d30 <__tIntPhasor_tick_veneer>
    1e12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1e16:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1e1a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1e1e:	edc4 7a00 	vstr	s15, [r4]
}
    1e22:	bd10      	pop	{r4, pc}
    1e24:	20005340 	.word	0x20005340
    1e28:	f3af 8000 	nop.w
    1e2c:	f3af 8000 	nop.w
    1e30:	f3af 8000 	nop.w
    1e34:	f3af 8000 	nop.w
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <lfoPulseTick>:

void __ATTR_ITCMRAM lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    1e40:	4b05      	ldr	r3, [pc, #20]	; (1e58 <lfoPulseTick+0x18>)
    1e42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    1e46:	b510      	push	{r4, lr}
    1e48:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    1e4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    1e4e:	f006 ff7f 	bl	8d50 <__tSquareLFO_tick_veneer>
    1e52:	ed84 0a00 	vstr	s0, [r4]
}
    1e56:	bd10      	pop	{r4, pc}
    1e58:	20005320 	.word	0x20005320
    1e5c:	f3af 8000 	nop.w

00001e60 <lfoSawSquareSetRate>:

void __ATTR_ITCMRAM lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    1e60:	4b03      	ldr	r3, [pc, #12]	; (1e70 <lfoSawSquareSetRate+0x10>)
    1e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e6a:	f007 b849 	b.w	8f00 <__tSawSquareLFO_setFreq_veneer>
    1e6e:	bf00      	nop
    1e70:	20005360 	.word	0x20005360
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <lfoSineTriSetRate>:
}

void __ATTR_ITCMRAM lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    1e80:	4b03      	ldr	r3, [pc, #12]	; (1e90 <lfoSineTriSetRate+0x10>)
    1e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e8a:	f006 bf29 	b.w	8ce0 <__tSineTriLFO_setFreq_veneer>
    1e8e:	bf00      	nop
    1e90:	200053b0 	.word	0x200053b0
    1e94:	f3af 8000 	nop.w
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <lfoSineSetRate>:
}
void __ATTR_ITCMRAM lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
    1ea0:	4b03      	ldr	r3, [pc, #12]	; (1eb0 <lfoSineSetRate+0x10>)
    1ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eaa:	f006 bf89 	b.w	8dc0 <__tCycle_setFreq_veneer>
    1eae:	bf00      	nop
    1eb0:	20005390 	.word	0x20005390
    1eb4:	f3af 8000 	nop.w
    1eb8:	f3af 8000 	nop.w
    1ebc:	f3af 8000 	nop.w

00001ec0 <lfoTriSetRate>:
}
void __ATTR_ITCMRAM lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <lfoTriSetRate+0x10>)
    1ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eca:	f006 bef1 	b.w	8cb0 <__tTriLFO_setFreq_veneer>
    1ece:	bf00      	nop
    1ed0:	200053d0 	.word	0x200053d0
    1ed4:	f3af 8000 	nop.w
    1ed8:	f3af 8000 	nop.w
    1edc:	f3af 8000 	nop.w

00001ee0 <lfoSawSetRate>:
}
void __ATTR_ITCMRAM lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    1ee0:	4b03      	ldr	r3, [pc, #12]	; (1ef0 <lfoSawSetRate+0x10>)
    1ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eea:	f006 be9d 	b.w	8c28 <__tIntPhasor_setFreq_veneer>
    1eee:	bf00      	nop
    1ef0:	20005340 	.word	0x20005340
    1ef4:	f3af 8000 	nop.w
    1ef8:	f3af 8000 	nop.w
    1efc:	f3af 8000 	nop.w

00001f00 <lfoPulseSetRate>:
}
void __ATTR_ITCMRAM lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    1f00:	4b03      	ldr	r3, [pc, #12]	; (1f10 <lfoPulseSetRate+0x10>)
    1f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f0a:	f006 bfd1 	b.w	8eb0 <__tSquareLFO_setFreq_veneer>
    1f0e:	bf00      	nop
    1f10:	20005320 	.word	0x20005320
    1f14:	f3af 8000 	nop.w
    1f18:	f3af 8000 	nop.w
    1f1c:	f3af 8000 	nop.w

00001f20 <lfoSawSquareSetPhase>:
}


void __ATTR_ITCMRAM lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    1f20:	4b03      	ldr	r3, [pc, #12]	; (1f30 <lfoSawSquareSetPhase+0x10>)
    1f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f2a:	f006 bea1 	b.w	8c70 <__tSawSquareLFO_setPhase_veneer>
    1f2e:	bf00      	nop
    1f30:	20005360 	.word	0x20005360
    1f34:	f3af 8000 	nop.w
    1f38:	f3af 8000 	nop.w
    1f3c:	f3af 8000 	nop.w

00001f40 <lfoSineTriSetPhase>:
}
void __ATTR_ITCMRAM lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <lfoSineTriSetPhase+0x10>)
    1f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f4a:	f006 bf8d 	b.w	8e68 <__tSineTriLFO_setPhase_veneer>
    1f4e:	bf00      	nop
    1f50:	200053b0 	.word	0x200053b0
    1f54:	f3af 8000 	nop.w
    1f58:	f3af 8000 	nop.w
    1f5c:	f3af 8000 	nop.w

00001f60 <lfoSineSetPhase>:
}
void __ATTR_ITCMRAM lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
    1f60:	4b03      	ldr	r3, [pc, #12]	; (1f70 <lfoSineSetPhase+0x10>)
    1f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f6a:	f006 be51 	b.w	8c10 <__tCycle_setPhase_veneer>
    1f6e:	bf00      	nop
    1f70:	20005390 	.word	0x20005390
    1f74:	f3af 8000 	nop.w
    1f78:	f3af 8000 	nop.w
    1f7c:	f3af 8000 	nop.w

00001f80 <lfoTriSetPhase>:
}
void __ATTR_ITCMRAM lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <lfoTriSetPhase+0x10>)
    1f82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f8a:	f006 bebd 	b.w	8d08 <__tTriLFO_setPhase_veneer>
    1f8e:	bf00      	nop
    1f90:	200053d0 	.word	0x200053d0
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <lfoSawSetPhase>:
}
void __ATTR_ITCMRAM lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    1fa0:	4b03      	ldr	r3, [pc, #12]	; (1fb0 <lfoSawSetPhase+0x10>)
    1fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1faa:	f006 be29 	b.w	8c00 <__tIntPhasor_setPhase_veneer>
    1fae:	bf00      	nop
    1fb0:	20005340 	.word	0x20005340
    1fb4:	f3af 8000 	nop.w
    1fb8:	f3af 8000 	nop.w
    1fbc:	f3af 8000 	nop.w

00001fc0 <lfoPulseSetPhase>:
}
void __ATTR_ITCMRAM lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    1fc0:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <lfoPulseSetPhase+0x10>)
    1fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1fca:	f006 be41 	b.w	8c50 <__tSquareLFO_setPhase_veneer>
    1fce:	bf00      	nop
    1fd0:	20005320 	.word	0x20005320
    1fd4:	f3af 8000 	nop.w
    1fd8:	f3af 8000 	nop.w
    1fdc:	f3af 8000 	nop.w

00001fe0 <lfoSawSquareSetShape>:
}


void __ATTR_ITCMRAM lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    1fe0:	4b03      	ldr	r3, [pc, #12]	; (1ff0 <lfoSawSquareSetShape+0x10>)
    1fe2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    1fe6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1fea:	f006 bf95 	b.w	8f18 <__tSawSquareLFO_setShape_veneer>
    1fee:	bf00      	nop
    1ff0:	20005360 	.word	0x20005360
    1ff4:	f3af 8000 	nop.w
    1ff8:	f3af 8000 	nop.w
    1ffc:	f3af 8000 	nop.w

00002000 <lfoSineTriSetShape>:
}
void __ATTR_ITCMRAM lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    2000:	4b03      	ldr	r3, [pc, #12]	; (2010 <lfoSineTriSetShape+0x10>)
    2002:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2006:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    200a:	f006 bed1 	b.w	8db0 <__tSineTriLFO_setShape_veneer>
    200e:	bf00      	nop
    2010:	200053b0 	.word	0x200053b0
    2014:	f3af 8000 	nop.w
    2018:	f3af 8000 	nop.w
    201c:	f3af 8000 	nop.w

00002020 <lfoSineSetShape>:
}
void __ATTR_ITCMRAM lfoSineSetShape(float s, int v, int string)
{
	//none
}
    2020:	4770      	bx	lr
    2022:	bf00      	nop
    2024:	f3af 8000 	nop.w
    2028:	f3af 8000 	nop.w
    202c:	f3af 8000 	nop.w
    2030:	f3af 8000 	nop.w
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <lfoTriSetShape>:
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	f3af 8000 	nop.w
    2048:	f3af 8000 	nop.w
    204c:	f3af 8000 	nop.w
    2050:	f3af 8000 	nop.w
    2054:	f3af 8000 	nop.w
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <lfoSawSetShape>:
    2060:	4770      	bx	lr
    2062:	bf00      	nop
    2064:	f3af 8000 	nop.w
    2068:	f3af 8000 	nop.w
    206c:	f3af 8000 	nop.w
    2070:	f3af 8000 	nop.w
    2074:	f3af 8000 	nop.w
    2078:	f3af 8000 	nop.w
    207c:	f3af 8000 	nop.w

00002080 <lfoPulseSetShape>:
{
	//none
}
void __ATTR_ITCMRAM lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    2080:	4b03      	ldr	r3, [pc, #12]	; (2090 <lfoPulseSetShape+0x10>)
    2082:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    208a:	f006 be7d 	b.w	8d88 <__tSquareLFO_setPulseWidth_veneer>
    208e:	bf00      	nop
    2090:	20005320 	.word	0x20005320
    2094:	f3af 8000 	nop.w
    2098:	f3af 8000 	nop.w
    209c:	f3af 8000 	nop.w

000020a0 <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
    20a0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    20a4:	b538      	push	{r3, r4, r5, lr}
    20a6:	4605      	mov	r5, r0
    20a8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    20aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    20ae:	f006 ff4f 	bl	8f50 <__fasterdbtoa_veneer>
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <clipperGainSet+0x24>)
    20b4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    20b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    20bc:	ed84 0a00 	vstr	s0, [r4]
}
    20c0:	bd38      	pop	{r3, r4, r5, pc}
    20c2:	bf00      	nop
    20c4:	20005610 	.word	0x20005610
    20c8:	f3af 8000 	nop.w
    20cc:	f3af 8000 	nop.w
    20d0:	f3af 8000 	nop.w
    20d4:	f3af 8000 	nop.w
    20d8:	f3af 8000 	nop.w
    20dc:	f3af 8000 	nop.w

000020e0 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
    20e0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    20e4:	b538      	push	{r3, r4, r5, lr}
    20e6:	4605      	mov	r5, r0
    20e8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    20ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    20ee:	f006 ff2f 	bl	8f50 <__fasterdbtoa_veneer>
    20f2:	4b04      	ldr	r3, [pc, #16]	; (2104 <wavefolderParam1+0x24>)
    20f4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    20f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    20fc:	ed84 0a00 	vstr	s0, [r4]
}
    2100:	bd38      	pop	{r3, r4, r5, pc}
    2102:	bf00      	nop
    2104:	20005610 	.word	0x20005610
    2108:	f3af 8000 	nop.w
    210c:	f3af 8000 	nop.w
    2110:	f3af 8000 	nop.w
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
    2120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2124:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2128:	4b07      	ldr	r3, [pc, #28]	; (2148 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    212a:	4808      	ldr	r0, [pc, #32]	; (214c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    212c:	ee70 6a27 	vadd.f32	s13, s0, s15
    2130:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    2134:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    2138:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    213c:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    2140:	ed83 7a00 	vstr	s14, [r3]
}
    2144:	4770      	bx	lr
    2146:	bf00      	nop
    2148:	200051f4 	.word	0x200051f4
    214c:	20005650 	.word	0x20005650
    2150:	f3af 8000 	nop.w
    2154:	f3af 8000 	nop.w
    2158:	f3af 8000 	nop.w
    215c:	f3af 8000 	nop.w

00002160 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
    2160:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2162:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    2166:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    216a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    216e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    2172:	0084      	lsls	r4, r0, #2
{
    2174:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2178:	eee0 7a68 	vfms.f32	s15, s0, s17
    217c:	eeb0 0a67 	vmov.f32	s0, s15
    2180:	f006 fee6 	bl	8f50 <__fasterdbtoa_veneer>
    2184:	4808      	ldr	r0, [pc, #32]	; (21a8 <tiltParam1+0x48>)
    2186:	4420      	add	r0, r4
    2188:	f006 fe4e 	bl	8e28 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    218c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    2190:	eea8 0a28 	vfma.f32	s0, s16, s17
    2194:	f006 fedc 	bl	8f50 <__fasterdbtoa_veneer>
    2198:	4804      	ldr	r0, [pc, #16]	; (21ac <tiltParam1+0x4c>)
}
    219a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    219e:	4420      	add	r0, r4
}
    21a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    21a4:	f006 be40 	b.w	8e28 <__tVZFilter_setGain_veneer>
    21a8:	20005c00 	.word	0x20005c00
    21ac:	20005c20 	.word	0x20005c20
    21b0:	f3af 8000 	nop.w
    21b4:	f3af 8000 	nop.w
    21b8:	f3af 8000 	nop.w
    21bc:	f3af 8000 	nop.w

000021c0 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    21c0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    21c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 21f8 <tiltParam2+0x38>
    21c8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 21fc <tiltParam2+0x3c>
    21cc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2200 <tiltParam2+0x40>
    21d0:	eee0 7a07 	vfma.f32	s15, s0, s14
    21d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2204 <tiltParam2+0x44>
{
    21d8:	b538      	push	{r3, r4, r5, lr}
    21da:	4605      	mov	r5, r0
    21dc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    21de:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21e2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    21e6:	f005 f95b 	bl	74a0 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21ea:	4807      	ldr	r0, [pc, #28]	; (2208 <tiltParam2+0x48>)
    21ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    21f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    21f4:	f006 be30 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    21f8:	429a0000 	.word	0x429a0000
    21fc:	420fb824 	.word	0x420fb824
    2200:	457ff000 	.word	0x457ff000
    2204:	00000000 	.word	0x00000000
    2208:	20000a44 	.word	0x20000a44
    220c:	f3af 8000 	nop.w
    2210:	f3af 8000 	nop.w
    2214:	f3af 8000 	nop.w
    2218:	f3af 8000 	nop.w
    221c:	f3af 8000 	nop.w

00002220 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    2220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2224:	4b06      	ldr	r3, [pc, #24]	; (2240 <tiltParam3+0x20>)
    2226:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    222a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    222e:	ee30 0a07 	vadd.f32	s0, s0, s14
    2232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2236:	ee20 0a27 	vmul.f32	s0, s0, s15
    223a:	f006 bd2d 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    223e:	bf00      	nop
    2240:	20000a44 	.word	0x20000a44
    2244:	f3af 8000 	nop.w
    2248:	f3af 8000 	nop.w
    224c:	f3af 8000 	nop.w
    2250:	f3af 8000 	nop.w
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2260:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    2264:	ed9f 7a09 	vldr	s14, [pc, #36]	; 228c <tiltParam4+0x2c>
{
    2268:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    226a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    226e:	4605      	mov	r5, r0
    2270:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2272:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    2276:	eeb0 0a67 	vmov.f32	s0, s15
    227a:	f006 fde9 	bl	8e50 <__fastdbtoa_veneer>
    227e:	4804      	ldr	r0, [pc, #16]	; (2290 <tiltParam4+0x30>)
    2280:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    2288:	f006 bdce 	b.w	8e28 <__tVZFilter_setGain_veneer>
    228c:	42080000 	.word	0x42080000
    2290:	20000a44 	.word	0x20000a44
    2294:	f3af 8000 	nop.w
    2298:	f3af 8000 	nop.w
    229c:	f3af 8000 	nop.w

000022a0 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
    22a0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    22a4:	4b04      	ldr	r3, [pc, #16]	; (22b8 <compressorParam1+0x18>)
    22a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    22aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    22ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22b2:	ed83 0a03 	vstr	s0, [r3, #12]
}
    22b6:	4770      	bx	lr
    22b8:	20000a64 	.word	0x20000a64
    22bc:	f3af 8000 	nop.w

000022c0 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
    22c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    22c4:	4b0a      	ldr	r3, [pc, #40]	; (22f0 <compressorParam2+0x30>)
    22c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    22ca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    22ce:	eeb0 7a67 	vmov.f32	s14, s15
    22d2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    22d6:	eea0 7a26 	vfma.f32	s14, s0, s13
    22da:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    22de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    22e2:	edd3 6a04 	vldr	s13, [r3, #16]
    22e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    22ea:	ed83 7a07 	vstr	s14, [r3, #28]
}
    22ee:	4770      	bx	lr
    22f0:	20000a64 	.word	0x20000a64
    22f4:	f3af 8000 	nop.w
    22f8:	f3af 8000 	nop.w
    22fc:	f3af 8000 	nop.w

00002300 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
    2300:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    2304:	4b04      	ldr	r3, [pc, #16]	; (2318 <compressorParam3+0x18>)
    2306:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    230a:	ee20 0a27 	vmul.f32	s0, s0, s15
    230e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2312:	ed83 0a06 	vstr	s0, [r3, #24]
}
    2316:	4770      	bx	lr
    2318:	20000a64 	.word	0x20000a64
    231c:	f3af 8000 	nop.w

00002320 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <compressorParam4+0x30>)
    2322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    2326:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2354 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    232a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    232e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2330:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    2334:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2338:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    233c:	ee20 0a07 	vmul.f32	s0, s0, s14
    2340:	ee87 0a80 	vdiv.f32	s0, s15, s0
    2344:	f006 fd8c 	bl	8e60 <__fasterexpf_veneer>
    2348:	ed84 0a01 	vstr	s0, [r4, #4]
}
    234c:	bd10      	pop	{r4, pc}
    234e:	bf00      	nop
    2350:	20000a64 	.word	0x20000a64
    2354:	3a83126f 	.word	0x3a83126f
    2358:	f3af 8000 	nop.w
    235c:	f3af 8000 	nop.w

00002360 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2360:	4b0b      	ldr	r3, [pc, #44]	; (2390 <compressorParam5+0x30>)
    2362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    2366:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 2394 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    236a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    236e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2370:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    2374:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    2378:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    237c:	ee20 0a07 	vmul.f32	s0, s0, s14
    2380:	ee87 0a80 	vdiv.f32	s0, s15, s0
    2384:	f006 fd6c 	bl	8e60 <__fasterexpf_veneer>
    2388:	ed84 0a02 	vstr	s0, [r4, #8]
}
    238c:	bd10      	pop	{r4, pc}
    238e:	bf00      	nop
    2390:	20000a64 	.word	0x20000a64
    2394:	3a83126f 	.word	0x3a83126f
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
    23a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    23a4:	4b05      	ldr	r3, [pc, #20]	; (23bc <offsetParam2+0x1c>)
    23a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    23aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    23ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    23b2:	eee0 7a07 	vfma.f32	s15, s0, s14
    23b6:	edc3 7a00 	vstr	s15, [r3]
}
    23ba:	4770      	bx	lr
    23bc:	20005630 	.word	0x20005630

000023c0 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
    23c0:	4b03      	ldr	r3, [pc, #12]	; (23d0 <param2Linear+0x10>)
    23c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    23c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    23ca:	ed83 0a00 	vstr	s0, [r3]
}
    23ce:	4770      	bx	lr
    23d0:	20005630 	.word	0x20005630
    23d4:	f3af 8000 	nop.w
    23d8:	f3af 8000 	nop.w
    23dc:	f3af 8000 	nop.w

000023e0 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
    23e0:	4b03      	ldr	r3, [pc, #12]	; (23f0 <param3Linear+0x10>)
    23e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    23e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    23ea:	ed83 0a00 	vstr	s0, [r3]
}
    23ee:	4770      	bx	lr
    23f0:	20005650 	.word	0x20005650
    23f4:	f3af 8000 	nop.w
    23f8:	f3af 8000 	nop.w
    23fc:	f3af 8000 	nop.w

00002400 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
    2400:	eddf 6a10 	vldr	s13, [pc, #64]	; 2444 <param3Soft+0x44>
    2404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2408:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2448 <param3Soft+0x48>
    240c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2410:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 244c <param3Soft+0x4c>
    2414:	eee0 7a26 	vfma.f32	s15, s0, s13
    2418:	4a0d      	ldr	r2, [pc, #52]	; (2450 <param3Soft+0x50>)
    241a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    241e:	4b0d      	ldr	r3, [pc, #52]	; (2454 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    2420:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    2424:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2428:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    242c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    2430:	eee5 6a86 	vfma.f32	s13, s11, s12
    2434:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2438:	eec7 6a27 	vdiv.f32	s13, s14, s15
    243c:	edc1 6a00 	vstr	s13, [r1]
}
    2440:	4770      	bx	lr
    2442:	bf00      	nop
    2444:	3f7d70a4 	.word	0x3f7d70a4
    2448:	3c23d70a 	.word	0x3c23d70a
    244c:	3eaaaaaa 	.word	0x3eaaaaaa
    2450:	20005650 	.word	0x20005650
    2454:	20005bd4 	.word	0x20005bd4
    2458:	f3af 8000 	nop.w
    245c:	f3af 8000 	nop.w

00002460 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    2460:	eddf 6a17 	vldr	s13, [pc, #92]	; 24c0 <param3Hard+0x60>
    2464:	eddf 7a17 	vldr	s15, [pc, #92]	; 24c4 <param3Hard+0x64>
    2468:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24c8 <param3Hard+0x68>
    246c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    2470:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    2472:	4b16      	ldr	r3, [pc, #88]	; (24cc <param3Hard+0x6c>)
    2474:	0045      	lsls	r5, r0, #1
    2476:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    247a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    247c:	ee27 0a87 	vmul.f32	s0, s15, s14
    2480:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2484:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
    2488:	f006 fd52 	bl	8f30 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    248c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    2490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2494:	d00a      	beq.n	24ac <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    2496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    249a:	4b0d      	ldr	r3, [pc, #52]	; (24d0 <param3Hard+0x70>)
    249c:	442c      	add	r4, r5
    249e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    24a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    24a6:	edc4 7a00 	vstr	s15, [r4]
}
    24aa:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    24ac:	4b08      	ldr	r3, [pc, #32]	; (24d0 <param3Hard+0x70>)
    24ae:	442c      	add	r4, r5
    24b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 24d4 <param3Hard+0x74>
    24b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    24b8:	edc4 7a00 	vstr	s15, [r4]
}
    24bc:	bd38      	pop	{r3, r4, r5, pc}
    24be:	bf00      	nop
    24c0:	3f7d70a4 	.word	0x3f7d70a4
    24c4:	3c23d70a 	.word	0x3c23d70a
    24c8:	3fc90fdb 	.word	0x3fc90fdb
    24cc:	20005650 	.word	0x20005650
    24d0:	20005bb4 	.word	0x20005bb4
    24d4:	4479ffff 	.word	0x4479ffff
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
    24e0:	4b03      	ldr	r3, [pc, #12]	; (24f0 <param4Linear+0x10>)
    24e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    24e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    24ea:	ed83 0a00 	vstr	s0, [r3]
}
    24ee:	4770      	bx	lr
    24f0:	20005670 	.word	0x20005670
    24f4:	f3af 8000 	nop.w
    24f8:	f3af 8000 	nop.w
    24fc:	f3af 8000 	nop.w

00002500 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <param5Linear+0x10>)
    2502:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2506:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    250a:	ed83 0a00 	vstr	s0, [r3]
}
    250e:	4770      	bx	lr
    2510:	20005690 	.word	0x20005690
    2514:	f3af 8000 	nop.w
    2518:	f3af 8000 	nop.w
    251c:	f3af 8000 	nop.w

00002520 <param2BC>:
void __ATTR_ITCMRAM param2BC(float value, int v, int string)
{
	tCrusher_setQuality (&bc[v][string],value);
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <param2BC+0x10>)
    2522:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    252a:	f006 bcd9 	b.w	8ee0 <__tCrusher_setQuality_veneer>
    252e:	bf00      	nop
    2530:	20000a24 	.word	0x20000a24
    2534:	f3af 8000 	nop.w
    2538:	f3af 8000 	nop.w
    253c:	f3af 8000 	nop.w

00002540 <param3BC>:
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
    2540:	4a07      	ldr	r2, [pc, #28]	; (2560 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    2542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    2546:	eddf 7a07 	vldr	s15, [pc, #28]	; 2564 <param3BC+0x24>
    254a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    254e:	4b06      	ldr	r3, [pc, #24]	; (2568 <param3BC+0x28>)
    2550:	eee7 7a00 	vfma.f32	s15, s14, s0
    2554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2558:	eeb0 0a67 	vmov.f32	s0, s15
    255c:	f006 bbd8 	b.w	8d10 <__tCrusher_setSamplingRatio_veneer>
    2560:	20000008 	.word	0x20000008
    2564:	3c23d70a 	.word	0x3c23d70a
    2568:	20000a24 	.word	0x20000a24
    256c:	f3af 8000 	nop.w
    2570:	f3af 8000 	nop.w
    2574:	f3af 8000 	nop.w
    2578:	f3af 8000 	nop.w
    257c:	f3af 8000 	nop.w

00002580 <param4BC>:
}
void __ATTR_ITCMRAM param4BC(float value, int v, int string)
{
	tCrusher_setRound(&bc[v][string], value);
    2580:	4b03      	ldr	r3, [pc, #12]	; (2590 <param4BC+0x10>)
    2582:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    258a:	f006 bba1 	b.w	8cd0 <__tCrusher_setRound_veneer>
    258e:	bf00      	nop
    2590:	20000a24 	.word	0x20000a24
    2594:	f3af 8000 	nop.w
    2598:	f3af 8000 	nop.w
    259c:	f3af 8000 	nop.w

000025a0 <param5BC>:
}
void __ATTR_ITCMRAM param5BC(float value, int v, int string)
{
	tCrusher_setOperation(&bc[v][string], value);
    25a0:	4b03      	ldr	r3, [pc, #12]	; (25b0 <param5BC+0x10>)
    25a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    25a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    25aa:	f006 bbf9 	b.w	8da0 <__tCrusher_setOperation_veneer>
    25ae:	bf00      	nop
    25b0:	20000a24 	.word	0x20000a24
    25b4:	f3af 8000 	nop.w
    25b8:	f3af 8000 	nop.w
    25bc:	f3af 8000 	nop.w

000025c0 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
    25c0:	4b03      	ldr	r3, [pc, #12]	; (25d0 <fxMixSet+0x10>)
    25c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    25c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    25ca:	ed83 0a00 	vstr	s0, [r3]
}
    25ce:	4770      	bx	lr
    25d0:	200050f4 	.word	0x200050f4
    25d4:	f3af 8000 	nop.w
    25d8:	f3af 8000 	nop.w
    25dc:	f3af 8000 	nop.w

000025e0 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    25e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    25e8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    25ee:	4605      	mov	r5, r0
    25f0:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    25f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    25f6:	eeb0 0a67 	vmov.f32	s0, s15
    25fa:	f006 fca9 	bl	8f50 <__fasterdbtoa_veneer>
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <fxPostGainSet+0x2c>)
    2600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2604:	ed84 0a00 	vstr	s0, [r4]
}
    2608:	bd38      	pop	{r3, r4, r5, pc}
    260a:	bf00      	nop
    260c:	20005114 	.word	0x20005114
    2610:	f3af 8000 	nop.w
    2614:	f3af 8000 	nop.w
    2618:	f3af 8000 	nop.w
    261c:	f3af 8000 	nop.w

00002620 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
    2620:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
    2626:	4d36      	ldr	r5, [pc, #216]	; (2700 <wavefolderTick+0xe0>)
    2628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    262c:	4b35      	ldr	r3, [pc, #212]	; (2704 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    262e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    2632:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2636:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    263a:	4a33      	ldr	r2, [pc, #204]	; (2708 <wavefolderTick+0xe8>)
    263c:	ed9f 4a33 	vldr	s8, [pc, #204]	; 270c <wavefolderTick+0xec>
    2640:	0084      	lsls	r4, r0, #2
    2642:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
    2646:	eddf 3a32 	vldr	s7, [pc, #200]	; 2710 <wavefolderTick+0xf0>
{
    264a:	ed2d 8b02 	vpush	{d8}
    264e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2652:	ed93 6a00 	vldr	s12, [r3]
    2656:	fe88 8a66 	vminnm.f32	s16, s16, s13
    265a:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    265e:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
    2662:	4b2c      	ldr	r3, [pc, #176]	; (2714 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2664:	ee30 0a06 	vadd.f32	s0, s0, s12
    2668:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
    266c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    2670:	4a29      	ldr	r2, [pc, #164]	; (2718 <wavefolderTick+0xf8>)
    2672:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    2676:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
    267a:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
    267e:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    2682:	4b26      	ldr	r3, [pc, #152]	; (271c <wavefolderTick+0xfc>)
    2684:	ee76 5ae5 	vsub.f32	s11, s13, s11
    2688:	ed9f 0a25 	vldr	s0, [pc, #148]	; 2720 <wavefolderTick+0x100>
    268c:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
    2690:	ee67 7aa3 	vmul.f32	s15, s15, s7
    2694:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    2698:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    269c:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
    26a0:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    26a8:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    26ac:	ee36 3ac5 	vsub.f32	s6, s13, s10
    26b0:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26b4:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    26b8:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26bc:	ee25 5a23 	vmul.f32	s10, s10, s7
    26c0:	ee76 6ae5 	vsub.f32	s13, s13, s11
    26c4:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    26c8:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26cc:	eee7 7a05 	vfma.f32	s15, s14, s10
    26d0:	eeb0 8a67 	vmov.f32	s16, s15
    26d4:	f006 fc2c 	bl	8f30 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    26d8:	4b12      	ldr	r3, [pc, #72]	; (2724 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26da:	4813      	ldr	r0, [pc, #76]	; (2728 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26dc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    26e0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26e2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    26e4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    26e8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    26ec:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26f0:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
    26f4:	ecbd 8b02 	vpop	{d8}
    26f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    26fc:	f006 bbcc 	b.w	8e98 <__tHighpass_tick_veneer>
    2700:	20014920 	.word	0x20014920
    2704:	20005630 	.word	0x20005630
    2708:	20005610 	.word	0x20005610
    270c:	3eaaaaaa 	.word	0x3eaaaaaa
    2710:	3fbffff8 	.word	0x3fbffff8
    2714:	20005650 	.word	0x20005650
    2718:	20005670 	.word	0x20005670
    271c:	20005690 	.word	0x20005690
    2720:	40c90fdb 	.word	0x40c90fdb
    2724:	200051f4 	.word	0x200051f4
    2728:	20000de4 	.word	0x20000de4
    272c:	f3af 8000 	nop.w
    2730:	f3af 8000 	nop.w
    2734:	f3af 8000 	nop.w
    2738:	f3af 8000 	nop.w
    273c:	f3af 8000 	nop.w

00002740 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
    2740:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    2744:	ed9f 7a05 	vldr	s14, [pc, #20]	; 275c <chorusParam1+0x1c>
    2748:	4b05      	ldr	r3, [pc, #20]	; (2760 <chorusParam1+0x20>)
    274a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    274e:	eee0 7a07 	vfma.f32	s15, s0, s14
    2752:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2756:	edc3 7a00 	vstr	s15, [r3]
}
    275a:	4770      	bx	lr
    275c:	45b4a000 	.word	0x45b4a000
    2760:	20005610 	.word	0x20005610
    2764:	f3af 8000 	nop.w
    2768:	f3af 8000 	nop.w
    276c:	f3af 8000 	nop.w
    2770:	f3af 8000 	nop.w
    2774:	f3af 8000 	nop.w
    2778:	f3af 8000 	nop.w
    277c:	f3af 8000 	nop.w

00002780 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
    2780:	eddf 7a05 	vldr	s15, [pc, #20]	; 2798 <chorusParam2+0x18>
    2784:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2788:	4b04      	ldr	r3, [pc, #16]	; (279c <chorusParam2+0x1c>)
    278a:	ee20 0a27 	vmul.f32	s0, s0, s15
    278e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2792:	ed83 0a00 	vstr	s0, [r3]
}
    2796:	4770      	bx	lr
    2798:	3dcccccd 	.word	0x3dcccccd
    279c:	20005630 	.word	0x20005630

000027a0 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    27a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 27c0 <chorusParam3+0x20>
    27a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    27a8:	eddf 7a06 	vldr	s15, [pc, #24]	; 27c4 <chorusParam3+0x24>
    27ac:	4b06      	ldr	r3, [pc, #24]	; (27c8 <chorusParam3+0x28>)
    27ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    27b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    27b6:	eeb0 0a67 	vmov.f32	s0, s15
    27ba:	f006 bb01 	b.w	8dc0 <__tCycle_setFreq_veneer>
    27be:	bf00      	nop
    27c0:	3ecccccd 	.word	0x3ecccccd
    27c4:	3c23d70a 	.word	0x3c23d70a
    27c8:	20005528 	.word	0x20005528
    27cc:	f3af 8000 	nop.w
    27d0:	f3af 8000 	nop.w
    27d4:	f3af 8000 	nop.w
    27d8:	f3af 8000 	nop.w
    27dc:	f3af 8000 	nop.w

000027e0 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    27e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2800 <chorusParam4+0x20>
    27e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    27e8:	eddf 7a06 	vldr	s15, [pc, #24]	; 2804 <chorusParam4+0x24>
    27ec:	4b06      	ldr	r3, [pc, #24]	; (2808 <chorusParam4+0x28>)
    27ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    27f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    27f6:	eeb0 0a67 	vmov.f32	s0, s15
    27fa:	f006 bae1 	b.w	8dc0 <__tCycle_setFreq_veneer>
    27fe:	bf00      	nop
    2800:	3ee38e37 	.word	0x3ee38e37
    2804:	3c343958 	.word	0x3c343958
    2808:	20005548 	.word	0x20005548
    280c:	f3af 8000 	nop.w
    2810:	f3af 8000 	nop.w
    2814:	f3af 8000 	nop.w
    2818:	f3af 8000 	nop.w
    281c:	f3af 8000 	nop.w

00002820 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    2820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2822:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    2826:	4f2b      	ldr	r7, [pc, #172]	; (28d4 <chorusTick+0xb4>)
    2828:	4d2b      	ldr	r5, [pc, #172]	; (28d8 <chorusTick+0xb8>)
    282a:	482c      	ldr	r0, [pc, #176]	; (28dc <chorusTick+0xbc>)
    282c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    2830:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    2834:	4e2a      	ldr	r6, [pc, #168]	; (28e0 <chorusTick+0xc0>)
    2836:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    283a:	008c      	lsls	r4, r1, #2
    283c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    2840:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    2844:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    2848:	edd5 9a00 	vldr	s19, [r5]
{
    284c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    2850:	ed97 9a00 	vldr	s18, [r7]
    2854:	f006 f9d8 	bl	8c08 <__tCycle_tick_veneer>
    2858:	4630      	mov	r0, r6
    285a:	eef0 7a48 	vmov.f32	s15, s16
    285e:	eee9 7a80 	vfma.f32	s15, s19, s0
    2862:	ed9f 0a20 	vldr	s0, [pc, #128]	; 28e4 <chorusTick+0xc4>
    2866:	ee29 0a00 	vmul.f32	s0, s18, s0
    286a:	ee20 0a27 	vmul.f32	s0, s0, s15
    286e:	f006 fb0b 	bl	8e88 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    2872:	481d      	ldr	r0, [pc, #116]	; (28e8 <chorusTick+0xc8>)
    2874:	edd5 9a00 	vldr	s19, [r5]
    2878:	4420      	add	r0, r4
    287a:	ed97 9a00 	vldr	s18, [r7]
    287e:	f006 f9c3 	bl	8c08 <__tCycle_tick_veneer>
    2882:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2886:	eea9 8ac0 	vfms.f32	s16, s19, s0
    288a:	4d18      	ldr	r5, [pc, #96]	; (28ec <chorusTick+0xcc>)
    288c:	ee29 0a27 	vmul.f32	s0, s18, s15
    2890:	4425      	add	r5, r4
    2892:	4628      	mov	r0, r5
    2894:	ee20 0a08 	vmul.f32	s0, s0, s16
    2898:	f006 faf6 	bl	8e88 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    289c:	eeb0 0a68 	vmov.f32	s0, s17
    28a0:	4630      	mov	r0, r6
    28a2:	f006 fa21 	bl	8ce8 <__tLinearDelay_tick_veneer>
    28a6:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    28aa:	4628      	mov	r0, r5
    28ac:	eeb0 0a68 	vmov.f32	s0, s17
    28b0:	f006 fa1a 	bl	8ce8 <__tLinearDelay_tick_veneer>
    28b4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    28b8:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    28bc:	480c      	ldr	r0, [pc, #48]	; (28f0 <chorusTick+0xd0>)
    28be:	4420      	add	r0, r4
    28c0:	eea8 0ae7 	vfms.f32	s0, s17, s15
    28c4:	f006 fae8 	bl	8e98 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    28c8:	eeb1 0a40 	vneg.f32	s0, s0
    28cc:	ecbd 8b04 	vpop	{d8-d9}
    28d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d2:	bf00      	nop
    28d4:	20005610 	.word	0x20005610
    28d8:	20005630 	.word	0x20005630
    28dc:	20005528 	.word	0x20005528
    28e0:	20005008 	.word	0x20005008
    28e4:	3f34fdf4 	.word	0x3f34fdf4
    28e8:	20005548 	.word	0x20005548
    28ec:	20005028 	.word	0x20005028
    28f0:	20000de4 	.word	0x20000de4
    28f4:	f3af 8000 	nop.w
    28f8:	f3af 8000 	nop.w
    28fc:	f3af 8000 	nop.w

00002900 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    2900:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2904:	4a0e      	ldr	r2, [pc, #56]	; (2940 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    2906:	4b0f      	ldr	r3, [pc, #60]	; (2944 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    2908:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    290c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    2910:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    2912:	edd2 7a00 	vldr	s15, [r2]
    2916:	008c      	lsls	r4, r1, #2
    2918:	ee30 0a27 	vadd.f32	s0, s0, s15
    291c:	edd3 7a00 	vldr	s15, [r3]
    2920:	4b09      	ldr	r3, [pc, #36]	; (2948 <shaperTick+0x48>)
    2922:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2926:	ee20 0a27 	vmul.f32	s0, s0, s15
    292a:	edd1 0a00 	vldr	s1, [r1]
    292e:	f006 f987 	bl	8c40 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2932:	4806      	ldr	r0, [pc, #24]	; (294c <shaperTick+0x4c>)
    2934:	4420      	add	r0, r4
    return temp;
}
    2936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    293a:	f006 baad 	b.w	8e98 <__tHighpass_tick_veneer>
    293e:	bf00      	nop
    2940:	20005630 	.word	0x20005630
    2944:	20005610 	.word	0x20005610
    2948:	20005650 	.word	0x20005650
    294c:	20000de4 	.word	0x20000de4
    2950:	f3af 8000 	nop.w
    2954:	f3af 8000 	nop.w
    2958:	f3af 8000 	nop.w
    295c:	f3af 8000 	nop.w

00002960 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    2960:	4770      	bx	lr
    2962:	bf00      	nop
    2964:	f3af 8000 	nop.w
    2968:	f3af 8000 	nop.w
    296c:	f3af 8000 	nop.w
    2970:	f3af 8000 	nop.w
    2974:	f3af 8000 	nop.w
    2978:	f3af 8000 	nop.w
    297c:	f3af 8000 	nop.w

00002980 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    2980:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2984:	4b08      	ldr	r3, [pc, #32]	; (29a8 <tiltFilterTick+0x28>)
{
    2986:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    2988:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    298c:	008c      	lsls	r4, r1, #2
    298e:	f006 fabf 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    2992:	4806      	ldr	r0, [pc, #24]	; (29ac <tiltFilterTick+0x2c>)
    2994:	4420      	add	r0, r4
    2996:	f006 fabb 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    299a:	4805      	ldr	r0, [pc, #20]	; (29b0 <tiltFilterTick+0x30>)
    299c:	4420      	add	r0, r4
    return sample;
}
    299e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    29a2:	f006 bab5 	b.w	8f10 <__tVZFilter_tickEfficient_veneer>
    29a6:	bf00      	nop
    29a8:	20005c00 	.word	0x20005c00
    29ac:	20005c20 	.word	0x20005c20
    29b0:	20000a44 	.word	0x20000a44
    29b4:	f3af 8000 	nop.w
    29b8:	f3af 8000 	nop.w
    29bc:	f3af 8000 	nop.w

000029c0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    29c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    29c4:	4b10      	ldr	r3, [pc, #64]	; (2a08 <tanhTick+0x48>)
    29c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    29ca:	4810      	ldr	r0, [pc, #64]	; (2a0c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    29cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    29d0:	b510      	push	{r4, lr}
    29d2:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
    29d6:	008c      	lsls	r4, r1, #2
    29d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    29dc:	eea6 0a87 	vfma.f32	s0, s13, s14
    29e0:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
    29e4:	ee27 0a80 	vmul.f32	s0, s15, s0
    29e8:	f006 fa0a 	bl	8e00 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    29ec:	4808      	ldr	r0, [pc, #32]	; (2a10 <tanhTick+0x50>)
    29ee:	4420      	add	r0, r4
    29f0:	f006 fa52 	bl	8e98 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    29f4:	4b07      	ldr	r3, [pc, #28]	; (2a14 <tanhTick+0x54>)
    29f6:	4423      	add	r3, r4
    29f8:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    29fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    2a00:	ee20 0a27 	vmul.f32	s0, s0, s15
    2a04:	f006 b9fc 	b.w	8e00 <__tanhf_veneer>
    2a08:	20005630 	.word	0x20005630
    2a0c:	20005610 	.word	0x20005610
    2a10:	20000de4 	.word	0x20000de4
    2a14:	20005670 	.word	0x20005670
    2a18:	f3af 8000 	nop.w
    2a1c:	f3af 8000 	nop.w

00002a20 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    2a20:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    2a24:	4a19      	ldr	r2, [pc, #100]	; (2a8c <softClipTick+0x6c>)
    float shape = param3[v][string];
    2a26:	4b1a      	ldr	r3, [pc, #104]	; (2a90 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    2a28:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    2a2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2a30:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2a94 <softClipTick+0x74>
    float shape = param3[v][string];
    2a34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2a38:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a3c:	4816      	ldr	r0, [pc, #88]	; (2a98 <softClipTick+0x78>)
{
    2a3e:	b410      	push	{r4}
    sample = sample * param1[v][string];
    2a40:	4c16      	ldr	r4, [pc, #88]	; (2a9c <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    2a46:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    2a4a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
    2a4e:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    2a52:	4b13      	ldr	r3, [pc, #76]	; (2aa0 <softClipTick+0x80>)
    sample = sample + param2[v][string];
    2a54:	ed94 5a00 	vldr	s10, [r4]
    2a58:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
    2a5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
    2a60:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    2a64:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    2a68:	ed93 0a00 	vldr	s0, [r3]
    2a6c:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    2a70:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    2a74:	ee27 7a27 	vmul.f32	s14, s14, s15
    2a78:	ee27 7a27 	vmul.f32	s14, s14, s15
    2a7c:	ee36 7ac7 	vsub.f32	s14, s13, s14
    2a80:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2a84:	ee27 0a80 	vmul.f32	s0, s15, s0
    2a88:	f006 ba06 	b.w	8e98 <__tHighpass_tick_veneer>
    2a8c:	20005630 	.word	0x20005630
    2a90:	20005650 	.word	0x20005650
    2a94:	3eaaaaaa 	.word	0x3eaaaaaa
    2a98:	20000de4 	.word	0x20000de4
    2a9c:	20005610 	.word	0x20005610
    2aa0:	20005bd4 	.word	0x20005bd4
    2aa4:	f3af 8000 	nop.w
    2aa8:	f3af 8000 	nop.w
    2aac:	f3af 8000 	nop.w
    2ab0:	f3af 8000 	nop.w
    2ab4:	f3af 8000 	nop.w
    2ab8:	f3af 8000 	nop.w
    2abc:	f3af 8000 	nop.w

00002ac0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    2ac0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ac4:	4a1a      	ldr	r2, [pc, #104]	; (2b30 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    2ac6:	4b1b      	ldr	r3, [pc, #108]	; (2b34 <hardClipTick+0x74>)
    2ac8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    2acc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2ad0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    2ad4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    2ad8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    2ada:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    2ade:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
    2ae0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2ae4:	4e14      	ldr	r6, [pc, #80]	; (2b38 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    2ae6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    2aea:	4d14      	ldr	r5, [pc, #80]	; (2b3c <hardClipTick+0x7c>)
    2aec:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    2af0:	4425      	add	r5, r4
    2af2:	ed96 7a00 	vldr	s14, [r6]
    2af6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    2afa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    2afe:	ee27 0a87 	vmul.f32	s0, s15, s14
    2b02:	f006 fa15 	bl	8f30 <__arm_sin_f32_veneer>
    2b06:	ed96 7a00 	vldr	s14, [r6]
    2b0a:	edd5 7a00 	vldr	s15, [r5]
    2b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b12:	ee27 0a80 	vmul.f32	s0, s15, s0
    2b16:	f006 fa0b 	bl	8f30 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    2b1a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2b1e:	4808      	ldr	r0, [pc, #32]	; (2b40 <hardClipTick+0x80>)
    2b20:	ee20 0a27 	vmul.f32	s0, s0, s15
    2b24:	4420      	add	r0, r4
    return sample;
}
    2b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    2b2a:	f006 b9b5 	b.w	8e98 <__tHighpass_tick_veneer>
    2b2e:	bf00      	nop
    2b30:	20005610 	.word	0x20005610
    2b34:	20005630 	.word	0x20005630
    2b38:	20005650 	.word	0x20005650
    2b3c:	20005bb4 	.word	0x20005bb4
    2b40:	20000de4 	.word	0x20000de4
    2b44:	f3af 8000 	nop.w
    2b48:	f3af 8000 	nop.w
    2b4c:	f3af 8000 	nop.w
    2b50:	f3af 8000 	nop.w
    2b54:	f3af 8000 	nop.w
    2b58:	f3af 8000 	nop.w
    2b5c:	f3af 8000 	nop.w

00002b60 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    2b60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b64:	4b17      	ldr	r3, [pc, #92]	; (2bc4 <satTick+0x64>)
    sample = sample * param1[v][string];
    2b66:	4a18      	ldr	r2, [pc, #96]	; (2bc8 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b68:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    2b6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b70:	4816      	ldr	r0, [pc, #88]	; (2bcc <satTick+0x6c>)
    sample = sample * param1[v][string];
    2b72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2b76:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    2b7a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b7c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    2b80:	008c      	lsls	r4, r1, #2
    2b82:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    2b86:	eeb0 6a47 	vmov.f32	s12, s14
    2b8a:	ee27 7a87 	vmul.f32	s14, s15, s14
    2b8e:	eea7 6a80 	vfma.f32	s12, s15, s0
    2b92:	eea7 7a80 	vfma.f32	s14, s15, s0
    2b96:	eeb0 6ac6 	vabs.f32	s12, s12
    2b9a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2b9e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2ba2:	ee36 6b05 	vadd.f64	d6, d6, d5
    2ba6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    2baa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2bae:	f006 f973 	bl	8e98 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    2bb2:	4807      	ldr	r0, [pc, #28]	; (2bd0 <satTick+0x70>)
    2bb4:	4420      	add	r0, r4
    2bb6:	f006 f96f 	bl	8e98 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    2bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    2bbe:	f006 b853 	b.w	8c68 <__LEAF_tanh_veneer>
    2bc2:	bf00      	nop
    2bc4:	20005630 	.word	0x20005630
    2bc8:	20005610 	.word	0x20005610
    2bcc:	20000de4 	.word	0x20000de4
    2bd0:	20000e04 	.word	0x20000e04
    2bd4:	f3af 8000 	nop.w
    2bd8:	f3af 8000 	nop.w
    2bdc:	f3af 8000 	nop.w

00002be0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    2be0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    2be6:	4806      	ldr	r0, [pc, #24]	; (2c00 <bcTick+0x20>)
    sample = sample * param1[v][string];
    2be8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    2bec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    2bf0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    2bf4:	ee20 0a27 	vmul.f32	s0, s0, s15
    2bf8:	f006 b8e6 	b.w	8dc8 <__tCrusher_tick_veneer>
    2bfc:	20005610 	.word	0x20005610
    2c00:	20000a24 	.word	0x20000a24
    2c04:	f3af 8000 	nop.w
    2c08:	f3af 8000 	nop.w
    2c0c:	f3af 8000 	nop.w
    2c10:	f3af 8000 	nop.w
    2c14:	f3af 8000 	nop.w
    2c18:	f3af 8000 	nop.w
    2c1c:	f3af 8000 	nop.w

00002c20 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    2c20:	4b03      	ldr	r3, [pc, #12]	; (2c30 <compressorTick+0x10>)
    2c22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c2a:	f006 b8ed 	b.w	8e08 <__tCompressor_tick_veneer>
    2c2e:	bf00      	nop
    2c30:	20000a64 	.word	0x20000a64
    2c34:	f3af 8000 	nop.w
    2c38:	f3af 8000 	nop.w
    2c3c:	f3af 8000 	nop.w

00002c40 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    2c40:	4b03      	ldr	r3, [pc, #12]	; (2c50 <FXlowpassTick+0x10>)
    2c42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c4a:	f006 b8f9 	b.w	8e40 <__tSVF_tick_veneer>
    2c4e:	bf00      	nop
    2c50:	20000874 	.word	0x20000874
    2c54:	f3af 8000 	nop.w
    2c58:	f3af 8000 	nop.w
    2c5c:	f3af 8000 	nop.w

00002c60 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    2c60:	4b03      	ldr	r3, [pc, #12]	; (2c70 <FXhighpassTick+0x10>)
    2c62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c6a:	f006 b8e9 	b.w	8e40 <__tSVF_tick_veneer>
    2c6e:	bf00      	nop
    2c70:	20000854 	.word	0x20000854
    2c74:	f3af 8000 	nop.w
    2c78:	f3af 8000 	nop.w
    2c7c:	f3af 8000 	nop.w

00002c80 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    2c80:	4b03      	ldr	r3, [pc, #12]	; (2c90 <FXbandpassTick+0x10>)
    2c82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c8a:	f006 b8d9 	b.w	8e40 <__tSVF_tick_veneer>
    2c8e:	bf00      	nop
    2c90:	20000814 	.word	0x20000814
    2c94:	f3af 8000 	nop.w
    2c98:	f3af 8000 	nop.w
    2c9c:	f3af 8000 	nop.w

00002ca0 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <FXdiodeLowpassTick+0x10>)
    2ca2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2caa:	f006 b871 	b.w	8d90 <__tDiodeFilter_tick_veneer>
    2cae:	bf00      	nop
    2cb0:	20000834 	.word	0x20000834
    2cb4:	f3af 8000 	nop.w
    2cb8:	f3af 8000 	nop.w
    2cbc:	f3af 8000 	nop.w

00002cc0 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <FXVZpeakTick+0x10>)
    2cc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2cc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cca:	f006 b921 	b.w	8f10 <__tVZFilter_tickEfficient_veneer>
    2cce:	bf00      	nop
    2cd0:	200007f4 	.word	0x200007f4
    2cd4:	f3af 8000 	nop.w
    2cd8:	f3af 8000 	nop.w
    2cdc:	f3af 8000 	nop.w

00002ce0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    2ce0:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <FXVZlowshelfTick+0x10>)
    2ce2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ce6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cea:	f006 b911 	b.w	8f10 <__tVZFilter_tickEfficient_veneer>
    2cee:	bf00      	nop
    2cf0:	200007d4 	.word	0x200007d4
    2cf4:	f3af 8000 	nop.w
    2cf8:	f3af 8000 	nop.w
    2cfc:	f3af 8000 	nop.w

00002d00 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    2d00:	4b03      	ldr	r3, [pc, #12]	; (2d10 <FXVZhighshelfTick+0x10>)
    2d02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2d06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2d0a:	f006 b901 	b.w	8f10 <__tVZFilter_tickEfficient_veneer>
    2d0e:	bf00      	nop
    2d10:	200007b4 	.word	0x200007b4
    2d14:	f3af 8000 	nop.w
    2d18:	f3af 8000 	nop.w
    2d1c:	f3af 8000 	nop.w

00002d20 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    2d20:	4b03      	ldr	r3, [pc, #12]	; (2d30 <FXVZbandrejectTick+0x10>)
    2d22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2d26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2d2a:	f006 b8f1 	b.w	8f10 <__tVZFilter_tickEfficient_veneer>
    2d2e:	bf00      	nop
    2d30:	20000794 	.word	0x20000794
    2d34:	f3af 8000 	nop.w
    2d38:	f3af 8000 	nop.w
    2d3c:	f3af 8000 	nop.w

00002d40 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    2d40:	4b03      	ldr	r3, [pc, #12]	; (2d50 <FXLadderLowpassTick+0x10>)
    2d42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2d46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2d4a:	f006 b8b9 	b.w	8ec0 <__tLadderFilter_tick_veneer>
    2d4e:	bf00      	nop
    2d50:	20000774 	.word	0x20000774
    2d54:	f3af 8000 	nop.w
    2d58:	f3af 8000 	nop.w
    2d5c:	f3af 8000 	nop.w

00002d60 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d60:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2d64:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2d98 <FXLowpassParam1+0x38>
    2d68:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2d9c <FXLowpassParam1+0x3c>
    2d6c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2da0 <FXLowpassParam1+0x40>
    2d70:	eee0 7a07 	vfma.f32	s15, s0, s14
    2d74:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2da4 <FXLowpassParam1+0x44>
{
    2d78:	b538      	push	{r3, r4, r5, lr}
    2d7a:	4605      	mov	r5, r0
    2d7c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d7e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d82:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2d86:	f004 fb8b 	bl	74a0 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d8a:	4807      	ldr	r0, [pc, #28]	; (2da8 <FXLowpassParam1+0x48>)
    2d8c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    2d94:	f006 b8d4 	b.w	8f40 <__tSVF_setFreqFast_veneer>
    2d98:	429a0000 	.word	0x429a0000
    2d9c:	420fb824 	.word	0x420fb824
    2da0:	457ff000 	.word	0x457ff000
    2da4:	00000000 	.word	0x00000000
    2da8:	20000874 	.word	0x20000874
    2dac:	f3af 8000 	nop.w
    2db0:	f3af 8000 	nop.w
    2db4:	f3af 8000 	nop.w
    2db8:	f3af 8000 	nop.w
    2dbc:	f3af 8000 	nop.w

00002dc0 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2dc0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2dc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2df8 <FXHighpassParam1+0x38>
    2dc8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2dfc <FXHighpassParam1+0x3c>
    2dcc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2e00 <FXHighpassParam1+0x40>
    2dd0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2dd4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2e04 <FXHighpassParam1+0x44>
{
    2dd8:	b538      	push	{r3, r4, r5, lr}
    2dda:	4605      	mov	r5, r0
    2ddc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2dde:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2de2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2de6:	f004 fb5b 	bl	74a0 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2dea:	4807      	ldr	r0, [pc, #28]	; (2e08 <FXHighpassParam1+0x48>)
    2dec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    2df4:	f006 b8a4 	b.w	8f40 <__tSVF_setFreqFast_veneer>
    2df8:	429a0000 	.word	0x429a0000
    2dfc:	420fb824 	.word	0x420fb824
    2e00:	457ff000 	.word	0x457ff000
    2e04:	00000000 	.word	0x00000000
    2e08:	20000854 	.word	0x20000854
    2e0c:	f3af 8000 	nop.w
    2e10:	f3af 8000 	nop.w
    2e14:	f3af 8000 	nop.w
    2e18:	f3af 8000 	nop.w
    2e1c:	f3af 8000 	nop.w

00002e20 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e20:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2e24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2e58 <FXBandpassParam1+0x38>
    2e28:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2e5c <FXBandpassParam1+0x3c>
    2e2c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2e60 <FXBandpassParam1+0x40>
    2e30:	eee0 7a07 	vfma.f32	s15, s0, s14
    2e34:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2e64 <FXBandpassParam1+0x44>
{
    2e38:	b538      	push	{r3, r4, r5, lr}
    2e3a:	4605      	mov	r5, r0
    2e3c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e42:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e46:	f004 fb2b 	bl	74a0 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e4a:	4807      	ldr	r0, [pc, #28]	; (2e68 <FXBandpassParam1+0x48>)
    2e4c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    2e54:	f006 b874 	b.w	8f40 <__tSVF_setFreqFast_veneer>
    2e58:	429a0000 	.word	0x429a0000
    2e5c:	420fb824 	.word	0x420fb824
    2e60:	457ff000 	.word	0x457ff000
    2e64:	00000000 	.word	0x00000000
    2e68:	20000814 	.word	0x20000814
    2e6c:	f3af 8000 	nop.w
    2e70:	f3af 8000 	nop.w
    2e74:	f3af 8000 	nop.w
    2e78:	f3af 8000 	nop.w
    2e7c:	f3af 8000 	nop.w

00002e80 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e80:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2e84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2eb8 <FXDiodeParam1+0x38>
    2e88:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2ebc <FXDiodeParam1+0x3c>
    2e8c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2ec0 <FXDiodeParam1+0x40>
    2e90:	eee0 7a07 	vfma.f32	s15, s0, s14
    2e94:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2ec4 <FXDiodeParam1+0x44>
{
    2e98:	b538      	push	{r3, r4, r5, lr}
    2e9a:	4605      	mov	r5, r0
    2e9c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2e9e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2ea2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ea6:	f004 fafb 	bl	74a0 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2eaa:	4807      	ldr	r0, [pc, #28]	; (2ec8 <FXDiodeParam1+0x48>)
    2eac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    2eb4:	f005 bf50 	b.w	8d58 <__tDiodeFilter_setFreqFast_veneer>
    2eb8:	429a0000 	.word	0x429a0000
    2ebc:	420fb824 	.word	0x420fb824
    2ec0:	457ff000 	.word	0x457ff000
    2ec4:	00000000 	.word	0x00000000
    2ec8:	20000834 	.word	0x20000834
    2ecc:	f3af 8000 	nop.w
    2ed0:	f3af 8000 	nop.w
    2ed4:	f3af 8000 	nop.w
    2ed8:	f3af 8000 	nop.w
    2edc:	f3af 8000 	nop.w

00002ee0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2ee0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2f18 <FXPeakParam1+0x38>
    2ee8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2f1c <FXPeakParam1+0x3c>
    2eec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2f20 <FXPeakParam1+0x40>
    2ef0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2ef4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2f24 <FXPeakParam1+0x44>
{
    2ef8:	b538      	push	{r3, r4, r5, lr}
    2efa:	4605      	mov	r5, r0
    2efc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2efe:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2f02:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f06:	f004 facb 	bl	74a0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2f0a:	4807      	ldr	r0, [pc, #28]	; (2f28 <FXPeakParam1+0x48>)
    2f0c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    2f14:	f005 bfa0 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    2f18:	429a0000 	.word	0x429a0000
    2f1c:	420fb824 	.word	0x420fb824
    2f20:	457ff000 	.word	0x457ff000
    2f24:	00000000 	.word	0x00000000
    2f28:	200007f4 	.word	0x200007f4
    2f2c:	f3af 8000 	nop.w
    2f30:	f3af 8000 	nop.w
    2f34:	f3af 8000 	nop.w
    2f38:	f3af 8000 	nop.w
    2f3c:	f3af 8000 	nop.w

00002f40 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f40:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2f44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2f78 <FXLowShelfParam1+0x38>
    2f48:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2f7c <FXLowShelfParam1+0x3c>
    2f4c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2f80 <FXLowShelfParam1+0x40>
    2f50:	eee0 7a07 	vfma.f32	s15, s0, s14
    2f54:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2f84 <FXLowShelfParam1+0x44>
{
    2f58:	b538      	push	{r3, r4, r5, lr}
    2f5a:	4605      	mov	r5, r0
    2f5c:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f5e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f62:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2f66:	f004 fa9b 	bl	74a0 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f6a:	4807      	ldr	r0, [pc, #28]	; (2f88 <FXLowShelfParam1+0x48>)
    2f6c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    2f74:	f005 bf70 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    2f78:	429a0000 	.word	0x429a0000
    2f7c:	420fb824 	.word	0x420fb824
    2f80:	457ff000 	.word	0x457ff000
    2f84:	00000000 	.word	0x00000000
    2f88:	200007d4 	.word	0x200007d4
    2f8c:	f3af 8000 	nop.w
    2f90:	f3af 8000 	nop.w
    2f94:	f3af 8000 	nop.w
    2f98:	f3af 8000 	nop.w
    2f9c:	f3af 8000 	nop.w

00002fa0 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fa0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    2fa4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 2fd8 <FXHighShelfParam1+0x38>
    2fa8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 2fdc <FXHighShelfParam1+0x3c>
    2fac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 2fe0 <FXHighShelfParam1+0x40>
    2fb0:	eee0 7a07 	vfma.f32	s15, s0, s14
    2fb4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 2fe4 <FXHighShelfParam1+0x44>
{
    2fb8:	b538      	push	{r3, r4, r5, lr}
    2fba:	4605      	mov	r5, r0
    2fbc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fbe:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2fc2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    2fc6:	f004 fa6b 	bl	74a0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2fca:	4807      	ldr	r0, [pc, #28]	; (2fe8 <FXHighShelfParam1+0x48>)
    2fcc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    2fd4:	f005 bf40 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    2fd8:	429a0000 	.word	0x429a0000
    2fdc:	420fb824 	.word	0x420fb824
    2fe0:	457ff000 	.word	0x457ff000
    2fe4:	00000000 	.word	0x00000000
    2fe8:	200007b4 	.word	0x200007b4
    2fec:	f3af 8000 	nop.w
    2ff0:	f3af 8000 	nop.w
    2ff4:	f3af 8000 	nop.w
    2ff8:	f3af 8000 	nop.w
    2ffc:	f3af 8000 	nop.w

00003000 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3000:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    3004:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3038 <FXNotchParam1+0x38>
    3008:	eddf 0a0c 	vldr	s1, [pc, #48]	; 303c <FXNotchParam1+0x3c>
    300c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3040 <FXNotchParam1+0x40>
    3010:	eee0 7a07 	vfma.f32	s15, s0, s14
    3014:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3044 <FXNotchParam1+0x44>
{
    3018:	b538      	push	{r3, r4, r5, lr}
    301a:	4605      	mov	r5, r0
    301c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    301e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    3022:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3026:	f004 fa3b 	bl	74a0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    302a:	4807      	ldr	r0, [pc, #28]	; (3048 <FXNotchParam1+0x48>)
    302c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    3034:	f005 bf10 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    3038:	429a0000 	.word	0x429a0000
    303c:	420fb824 	.word	0x420fb824
    3040:	457ff000 	.word	0x457ff000
    3044:	00000000 	.word	0x00000000
    3048:	20000794 	.word	0x20000794
    304c:	f3af 8000 	nop.w
    3050:	f3af 8000 	nop.w
    3054:	f3af 8000 	nop.w
    3058:	f3af 8000 	nop.w
    305c:	f3af 8000 	nop.w

00003060 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3060:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    3064:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3098 <FXLadderParam1+0x38>
    3068:	eddf 0a0c 	vldr	s1, [pc, #48]	; 309c <FXLadderParam1+0x3c>
    306c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 30a0 <FXLadderParam1+0x40>
    3070:	eee0 7a07 	vfma.f32	s15, s0, s14
    3074:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 30a4 <FXLadderParam1+0x44>
{
    3078:	b538      	push	{r3, r4, r5, lr}
    307a:	4605      	mov	r5, r0
    307c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    307e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    3082:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3086:	f004 fa0b 	bl	74a0 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    308a:	4807      	ldr	r0, [pc, #28]	; (30a8 <FXLadderParam1+0x48>)
    308c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    3094:	f005 bdf8 	b.w	8c88 <__tLadderFilter_setFreqFast_veneer>
    3098:	429a0000 	.word	0x429a0000
    309c:	420fb824 	.word	0x420fb824
    30a0:	457ff000 	.word	0x457ff000
    30a4:	00000000 	.word	0x00000000
    30a8:	20000774 	.word	0x20000774
    30ac:	f3af 8000 	nop.w
    30b0:	f3af 8000 	nop.w
    30b4:	f3af 8000 	nop.w
    30b8:	f3af 8000 	nop.w
    30bc:	f3af 8000 	nop.w

000030c0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    30c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 30ec <FXPeakParam2+0x2c>
{
    30c8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    30ce:	4605      	mov	r5, r0
    30d0:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    30d6:	eeb0 0a67 	vmov.f32	s0, s15
    30da:	f005 ff39 	bl	8f50 <__fasterdbtoa_veneer>
    30de:	4804      	ldr	r0, [pc, #16]	; (30f0 <FXPeakParam2+0x30>)
    30e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    30e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    30e8:	f005 be9e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    30ec:	42480000 	.word	0x42480000
    30f0:	200007f4 	.word	0x200007f4
    30f4:	f3af 8000 	nop.w
    30f8:	f3af 8000 	nop.w
    30fc:	f3af 8000 	nop.w

00003100 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3100:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3104:	ed9f 7a09 	vldr	s14, [pc, #36]	; 312c <FXLowShelfParam2+0x2c>
{
    3108:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    310a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    310e:	4605      	mov	r5, r0
    3110:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3112:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3116:	eeb0 0a67 	vmov.f32	s0, s15
    311a:	f005 ff19 	bl	8f50 <__fasterdbtoa_veneer>
    311e:	4804      	ldr	r0, [pc, #16]	; (3130 <FXLowShelfParam2+0x30>)
    3120:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3128:	f005 be7e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    312c:	42480000 	.word	0x42480000
    3130:	200007d4 	.word	0x200007d4
    3134:	f3af 8000 	nop.w
    3138:	f3af 8000 	nop.w
    313c:	f3af 8000 	nop.w

00003140 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3140:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3144:	ed9f 7a09 	vldr	s14, [pc, #36]	; 316c <FXHighShelfParam2+0x2c>
{
    3148:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    314a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    314e:	4605      	mov	r5, r0
    3150:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3152:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3156:	eeb0 0a67 	vmov.f32	s0, s15
    315a:	f005 fef9 	bl	8f50 <__fasterdbtoa_veneer>
    315e:	4804      	ldr	r0, [pc, #16]	; (3170 <FXHighShelfParam2+0x30>)
    3160:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    3164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3168:	f005 be5e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    316c:	42480000 	.word	0x42480000
    3170:	200007b4 	.word	0x200007b4
    3174:	f3af 8000 	nop.w
    3178:	f3af 8000 	nop.w
    317c:	f3af 8000 	nop.w

00003180 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3180:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3184:	ed9f 7a09 	vldr	s14, [pc, #36]	; 31ac <FXNotchParam2+0x2c>
{
    3188:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    318a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    318e:	4605      	mov	r5, r0
    3190:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    3192:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    3196:	eeb0 0a67 	vmov.f32	s0, s15
    319a:	f005 fed9 	bl	8f50 <__fasterdbtoa_veneer>
    319e:	4804      	ldr	r0, [pc, #16]	; (31b0 <FXNotchParam2+0x30>)
    31a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
    31a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    31a8:	f005 be3e 	b.w	8e28 <__tVZFilter_setGain_veneer>
    31ac:	42480000 	.word	0x42480000
    31b0:	20000794 	.word	0x20000794
    31b4:	f3af 8000 	nop.w
    31b8:	f3af 8000 	nop.w
    31bc:	f3af 8000 	nop.w

000031c0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    31c0:	4b03      	ldr	r3, [pc, #12]	; (31d0 <FXLowpassParam3+0x10>)
    31c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    31c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31ca:	f005 bead 	b.w	8f28 <__tSVF_setQ_veneer>
    31ce:	bf00      	nop
    31d0:	20000874 	.word	0x20000874
    31d4:	f3af 8000 	nop.w
    31d8:	f3af 8000 	nop.w
    31dc:	f3af 8000 	nop.w

000031e0 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    31e0:	4b03      	ldr	r3, [pc, #12]	; (31f0 <FXHighpassParam3+0x10>)
    31e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    31e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    31ea:	f005 be9d 	b.w	8f28 <__tSVF_setQ_veneer>
    31ee:	bf00      	nop
    31f0:	20000854 	.word	0x20000854
    31f4:	f3af 8000 	nop.w
    31f8:	f3af 8000 	nop.w
    31fc:	f3af 8000 	nop.w

00003200 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    3200:	4b03      	ldr	r3, [pc, #12]	; (3210 <FXBandpassParam3+0x10>)
    3202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    320a:	f005 be8d 	b.w	8f28 <__tSVF_setQ_veneer>
    320e:	bf00      	nop
    3210:	20000814 	.word	0x20000814
    3214:	f3af 8000 	nop.w
    3218:	f3af 8000 	nop.w
    321c:	f3af 8000 	nop.w

00003220 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    3220:	4b03      	ldr	r3, [pc, #12]	; (3230 <FXDiodeParam3+0x10>)
    3222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    322a:	f005 bd45 	b.w	8cb8 <__tDiodeFilter_setQ_veneer>
    322e:	bf00      	nop
    3230:	20000834 	.word	0x20000834
    3234:	f3af 8000 	nop.w
    3238:	f3af 8000 	nop.w
    323c:	f3af 8000 	nop.w

00003240 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
    3240:	4b03      	ldr	r3, [pc, #12]	; (3250 <FXPeakParam3+0x10>)
    3242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    324a:	f005 bd25 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    324e:	bf00      	nop
    3250:	200007f4 	.word	0x200007f4
    3254:	f3af 8000 	nop.w
    3258:	f3af 8000 	nop.w
    325c:	f3af 8000 	nop.w

00003260 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
    3260:	4b03      	ldr	r3, [pc, #12]	; (3270 <FXLowShelfParam3+0x10>)
    3262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    326a:	f005 bd15 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    326e:	bf00      	nop
    3270:	200007d4 	.word	0x200007d4
    3274:	f3af 8000 	nop.w
    3278:	f3af 8000 	nop.w
    327c:	f3af 8000 	nop.w

00003280 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
    3280:	4b03      	ldr	r3, [pc, #12]	; (3290 <FXHighShelfParam3+0x10>)
    3282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    328a:	f005 bd05 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    328e:	bf00      	nop
    3290:	200007b4 	.word	0x200007b4
    3294:	f3af 8000 	nop.w
    3298:	f3af 8000 	nop.w
    329c:	f3af 8000 	nop.w

000032a0 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    32a0:	4b03      	ldr	r3, [pc, #12]	; (32b0 <FXNotchParam3+0x10>)
    32a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    32a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32aa:	f005 bcf5 	b.w	8c98 <__tVZFilter_setResonance_veneer>
    32ae:	bf00      	nop
    32b0:	20000794 	.word	0x20000794
    32b4:	f3af 8000 	nop.w
    32b8:	f3af 8000 	nop.w
    32bc:	f3af 8000 	nop.w

000032c0 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    32c0:	4b03      	ldr	r3, [pc, #12]	; (32d0 <FXLadderParam3+0x10>)
    32c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    32c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    32ca:	f005 bd65 	b.w	8d98 <__tLadderFilter_setQ_veneer>
    32ce:	bf00      	nop
    32d0:	20000774 	.word	0x20000774
    32d4:	f3af 8000 	nop.w
    32d8:	f3af 8000 	nop.w
    32dc:	f3af 8000 	nop.w

000032e0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    32e0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32e2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    32e6:	008c      	lsls	r4, r1, #2
{
    32e8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32ec:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    32f0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32f4:	eee0 7a68 	vfms.f32	s15, s0, s17
    32f8:	eeb0 0a67 	vmov.f32	s0, s15
    32fc:	f005 fda8 	bl	8e50 <__fastdbtoa_veneer>
    3300:	4808      	ldr	r0, [pc, #32]	; (3324 <noiseSetTilt+0x44>)
    3302:	4420      	add	r0, r4
    3304:	f005 fd90 	bl	8e28 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    3308:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    330c:	eea8 0a28 	vfma.f32	s0, s16, s17
    3310:	f005 fd9e 	bl	8e50 <__fastdbtoa_veneer>
    3314:	4804      	ldr	r0, [pc, #16]	; (3328 <noiseSetTilt+0x48>)
}
    3316:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    331a:	4420      	add	r0, r4
}
    331c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
    3320:	f005 bd82 	b.w	8e28 <__tVZFilter_setGain_veneer>
    3324:	20005590 	.word	0x20005590
    3328:	20005598 	.word	0x20005598
    332c:	f3af 8000 	nop.w
    3330:	f3af 8000 	nop.w
    3334:	f3af 8000 	nop.w
    3338:	f3af 8000 	nop.w
    333c:	f3af 8000 	nop.w

00003340 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3340:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    3344:	ed9f 7a08 	vldr	s14, [pc, #32]	; 3368 <noiseSetGain+0x28>
{
    3348:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    334a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    334e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3350:	eeb0 0a67 	vmov.f32	s0, s15
    3354:	f005 fd7c 	bl	8e50 <__fastdbtoa_veneer>
    3358:	4804      	ldr	r0, [pc, #16]	; (336c <noiseSetGain+0x2c>)
    335a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
    3362:	f005 bd61 	b.w	8e28 <__tVZFilter_setGain_veneer>
    3366:	bf00      	nop
    3368:	42080000 	.word	0x42080000
    336c:	20005570 	.word	0x20005570
    3370:	f3af 8000 	nop.w
    3374:	f3af 8000 	nop.w
    3378:	f3af 8000 	nop.w
    337c:	f3af 8000 	nop.w

00003380 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3380:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    3384:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 33b4 <noiseSetFreq+0x34>
    3388:	eddf 0a0b 	vldr	s1, [pc, #44]	; 33b8 <noiseSetFreq+0x38>
    338c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 33bc <noiseSetFreq+0x3c>
    3390:	eee0 7a07 	vfma.f32	s15, s0, s14
    3394:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 33c0 <noiseSetFreq+0x40>
{
    3398:	b510      	push	{r4, lr}
    339a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    339c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    33a0:	f004 f87e 	bl	74a0 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    33a4:	4807      	ldr	r0, [pc, #28]	; (33c4 <noiseSetFreq+0x44>)
    33a6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    33aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    33ae:	f005 bd53 	b.w	8e58 <__tVZFilter_setFreqFast_veneer>
    33b2:	bf00      	nop
    33b4:	429a0000 	.word	0x429a0000
    33b8:	420fb824 	.word	0x420fb824
    33bc:	457ff000 	.word	0x457ff000
    33c0:	00000000 	.word	0x00000000
    33c4:	20005570 	.word	0x20005570
    33c8:	f3af 8000 	nop.w
    33cc:	f3af 8000 	nop.w
    33d0:	f3af 8000 	nop.w
    33d4:	f3af 8000 	nop.w
    33d8:	f3af 8000 	nop.w
    33dc:	f3af 8000 	nop.w

000033e0 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    33e0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    33e2:	4b25      	ldr	r3, [pc, #148]	; (3478 <noise_tick+0x98>)
{
    33e4:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    33e6:	4d25      	ldr	r5, [pc, #148]	; (347c <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    33e8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    33ec:	4924      	ldr	r1, [pc, #144]	; (3480 <noise_tick+0xa0>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33ee:	4825      	ldr	r0, [pc, #148]	; (3484 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    33f0:	4613      	mov	r3, r2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    33f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    33f6:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    33fa:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    33fe:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    3402:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    3404:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    3408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    340c:	3201      	adds	r2, #1
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    340e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    3412:	702a      	strb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    3414:	f005 fd7c 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    3418:	00a5      	lsls	r5, r4, #2
    341a:	481b      	ldr	r0, [pc, #108]	; (3488 <noise_tick+0xa8>)
    341c:	4428      	add	r0, r5
    341e:	f005 fd77 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    3422:	481a      	ldr	r0, [pc, #104]	; (348c <noise_tick+0xac>)
    3424:	4428      	add	r0, r5
    3426:	f005 fd73 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    342a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    342e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 3490 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    3432:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    3436:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    343a:	4816      	ldr	r0, [pc, #88]	; (3494 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    343c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    3440:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    3444:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    3448:	4b13      	ldr	r3, [pc, #76]	; (3498 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    344a:	4405      	add	r5, r0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    344c:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    3450:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    3454:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    3458:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    345c:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    3460:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    3464:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    3468:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    346c:	edc3 7a06 	vstr	s15, [r3, #24]
}
    3470:	ecbd 8b04 	vpop	{d8-d9}
    3474:	bd38      	pop	{r3, r4, r5, pc}
    3476:	bf00      	nop
    3478:	20019978 	.word	0x20019978
    347c:	20005b80 	.word	0x20005b80
    3480:	2001aac0 	.word	0x2001aac0
    3484:	20005590 	.word	0x20005590
    3488:	20005598 	.word	0x20005598
    348c:	20005570 	.word	0x20005570
    3490:	00000000 	.word	0x00000000
    3494:	20005580 	.word	0x20005580
    3498:	200146d0 	.word	0x200146d0
    349c:	f3af 8000 	nop.w

000034a0 <audioTickL>:
{
    34a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
    34a4:	2200      	movs	r2, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    34a6:	4cbf      	ldr	r4, [pc, #764]	; (37a4 <audioTickL+0x304>)
	interrupted = 0;
    34a8:	4bbf      	ldr	r3, [pc, #764]	; (37a8 <audioTickL+0x308>)
    34aa:	4dc0      	ldr	r5, [pc, #768]	; (37ac <audioTickL+0x30c>)
    34ac:	4ec0      	ldr	r6, [pc, #768]	; (37b0 <audioTickL+0x310>)
    34ae:	f8df a388 	ldr.w	sl, [pc, #904]	; 3838 <audioTickL+0x398>
    34b2:	f105 0930 	add.w	r9, r5, #48	; 0x30
    34b6:	f8df b384 	ldr.w	fp, [pc, #900]	; 383c <audioTickL+0x39c>
{
    34ba:	ed2d 8b08 	vpush	{d8-d11}
    34be:	b091      	sub	sp, #68	; 0x44
	interrupted = 0;
    34c0:	701a      	strb	r2, [r3, #0]
{
    34c2:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    34c4:	6863      	ldr	r3, [r4, #4]
    34c6:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    34c8:	f8d4 8004 	ldr.w	r8, [r4, #4]
	tickMappings();
    34cc:	f7fe f908 	bl	16e0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    34d0:	6863      	ldr	r3, [r4, #4]
    34d2:	4ab8      	ldr	r2, [pc, #736]	; (37b4 <audioTickL+0x314>)
    34d4:	eba3 0308 	sub.w	r3, r3, r8
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    34d8:	48b7      	ldr	r0, [pc, #732]	; (37b8 <audioTickL+0x318>)
	timeMap = DWT->CYCCNT - tempCountMap;
    34da:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    34dc:	f8d4 8004 	ldr.w	r8, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    34e0:	f003 ff3e 	bl	7360 <tExpSmooth_tick>
    34e4:	eeb0 9a40 	vmov.f32	s18, s0
    34e8:	4634      	mov	r4, r6
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    34ea:	4650      	mov	r0, sl
    34ec:	f003 ff38 	bl	7360 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    34f0:	f89b 3000 	ldrb.w	r3, [fp]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    34f4:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    34f8:	b12b      	cbz	r3, 3506 <audioTickL+0x66>
    34fa:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    34fc:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    3500:	d001      	beq.n	3506 <audioTickL+0x66>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    3502:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    3506:	454d      	cmp	r5, r9
    3508:	f10a 0a04 	add.w	sl, sl, #4
    350c:	f104 0408 	add.w	r4, r4, #8
    3510:	d1eb      	bne.n	34ea <audioTickL+0x4a>
    3512:	4caa      	ldr	r4, [pc, #680]	; (37bc <audioTickL+0x31c>)
    3514:	4daa      	ldr	r5, [pc, #680]	; (37c0 <audioTickL+0x320>)
    3516:	f104 0928 	add.w	r9, r4, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    351a:	4628      	mov	r0, r5
    351c:	f003 ff20 	bl	7360 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    3520:	f89b 3000 	ldrb.w	r3, [fp]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    3524:	eca4 0a01 	vstmia	r4!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    3528:	b12b      	cbz	r3, 3536 <audioTickL+0x96>
    352a:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    352c:	ed86 0a38 	vstr	s0, [r6, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    3530:	d001      	beq.n	3536 <audioTickL+0x96>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    3532:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    3536:	454c      	cmp	r4, r9
    3538:	f105 0504 	add.w	r5, r5, #4
    353c:	f106 0608 	add.w	r6, r6, #8
    3540:	d1eb      	bne.n	351a <audioTickL+0x7a>
	float note[numStringsThisBoard];
    3542:	009a      	lsls	r2, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    3544:	f8df 925c 	ldr.w	r9, [pc, #604]	; 37a4 <audioTickL+0x304>
	float masterSample = 0.0f;
    3548:	eddf 8a9e 	vldr	s17, [pc, #632]	; 37c4 <audioTickL+0x324>
	float note[numStringsThisBoard];
    354c:	3207      	adds	r2, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    354e:	f8d9 1004 	ldr.w	r1, [r9, #4]
	float note[numStringsThisBoard];
    3552:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    3556:	eba1 0108 	sub.w	r1, r1, r8
	float note[numStringsThisBoard];
    355a:	ebad 0d02 	sub.w	sp, sp, r2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    355e:	4a9a      	ldr	r2, [pc, #616]	; (37c8 <audioTickL+0x328>)
    3560:	6011      	str	r1, [r2, #0]
	float note[numStringsThisBoard];
    3562:	4668      	mov	r0, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    3564:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3568:	607a      	str	r2, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    356a:	2b00      	cmp	r3, #0
    356c:	f000 819f 	beq.w	38ae <audioTickL+0x40e>
    3570:	4a96      	ldr	r2, [pc, #600]	; (37cc <audioTickL+0x32c>)
		float sample = 0.0f;
    3572:	eef0 9a68 	vmov.f32	s19, s17
    3576:	4b96      	ldr	r3, [pc, #600]	; (37d0 <audioTickL+0x330>)
    3578:	623a      	str	r2, [r7, #32]
    357a:	4a96      	ldr	r2, [pc, #600]	; (37d4 <audioTickL+0x334>)
    357c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int v = 0; v < numStringsThisBoard; v++)
    357e:	2300      	movs	r3, #0
    3580:	617a      	str	r2, [r7, #20]
    3582:	4a95      	ldr	r2, [pc, #596]	; (37d8 <audioTickL+0x338>)
    3584:	469a      	mov	sl, r3
		if (note[v] > 127.0f)
    3586:	ed9f aa95 	vldr	s20, [pc, #596]	; 37dc <audioTickL+0x33c>
    358a:	627a      	str	r2, [r7, #36]	; 0x24
				if (oversamplerArray[i] > .999999f)
    358c:	eddf aa94 	vldr	s21, [pc, #592]	; 37e0 <audioTickL+0x340>
    3590:	4a94      	ldr	r2, [pc, #592]	; (37e4 <audioTickL+0x344>)
				else if (oversamplerArray[i]< -.999999f)
    3592:	ed9f ba95 	vldr	s22, [pc, #596]	; 37e8 <audioTickL+0x348>
    3596:	61b8      	str	r0, [r7, #24]
	for (int v = 0; v < numStringsThisBoard; v++)
    3598:	62fb      	str	r3, [r7, #44]	; 0x2c
    359a:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    359c:	4b93      	ldr	r3, [pc, #588]	; (37ec <audioTickL+0x34c>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    359e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35a0:	edd3 7a00 	vldr	s15, [r3]
    35a4:	4b92      	ldr	r3, [pc, #584]	; (37f0 <audioTickL+0x350>)
		float sample = 0.0f;
    35a6:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35aa:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35ae:	4b91      	ldr	r3, [pc, #580]	; (37f4 <audioTickL+0x354>)
    35b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    35b4:	4b90      	ldr	r3, [pc, #576]	; (37f8 <audioTickL+0x358>)
    35b6:	440b      	add	r3, r1
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    35b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35bc:	ed92 8a00 	vldr	s16, [r2]
    35c0:	edd3 6a00 	vldr	s13, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35c6:	ee38 8a26 	vadd.f32	s16, s16, s13
    35ca:	69bb      	ldr	r3, [r7, #24]
    35cc:	4615      	mov	r5, r2
    35ce:	3204      	adds	r2, #4
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35d0:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35d4:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
    35d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    35dc:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35de:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
    35e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    35e6:	ed42 7a01 	vstr	s15, [r2, #-4]
    35ea:	62ba      	str	r2, [r7, #40]	; 0x28
		if (note[v] < 0.0f)
    35ec:	f100 81ba 	bmi.w	3964 <audioTickL+0x4c4>
		if (note[v] > 127.0f)
    35f0:	eeb4 8aca 	vcmpe.f32	s16, s20
    35f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35f8:	dd03      	ble.n	3602 <audioTickL+0x162>
			note[v] = 127.0f;
    35fa:	eeb0 8a4a 	vmov.f32	s16, s20
    35fe:	ed03 aa01 	vstr	s20, [r3, #-4]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    3602:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3606:	4a7d      	ldr	r2, [pc, #500]	; (37fc <audioTickL+0x35c>)
    3608:	1a5b      	subs	r3, r3, r1
    360a:	6013      	str	r3, [r2, #0]
		if (envOn[v])
    360c:	4b7c      	ldr	r3, [pc, #496]	; (3800 <audioTickL+0x360>)
		uint32_t tempCountEnv = DWT->CYCCNT;
    360e:	f8d9 4004 	ldr.w	r4, [r9, #4]
		if (envOn[v])
    3612:	781b      	ldrb	r3, [r3, #0]
    3614:	2b00      	cmp	r3, #0
    3616:	f040 81cd 	bne.w	39b4 <audioTickL+0x514>
    361a:	4b79      	ldr	r3, [pc, #484]	; (3800 <audioTickL+0x360>)
    361c:	785b      	ldrb	r3, [r3, #1]
    361e:	2b00      	cmp	r3, #0
    3620:	f040 81a5 	bne.w	396e <audioTickL+0x4ce>
    3624:	4b76      	ldr	r3, [pc, #472]	; (3800 <audioTickL+0x360>)
    3626:	789b      	ldrb	r3, [r3, #2]
    3628:	2b00      	cmp	r3, #0
    362a:	f040 81ad 	bne.w	3988 <audioTickL+0x4e8>
    362e:	4b74      	ldr	r3, [pc, #464]	; (3800 <audioTickL+0x360>)
    3630:	78db      	ldrb	r3, [r3, #3]
    3632:	2b00      	cmp	r3, #0
    3634:	f040 81b5 	bne.w	39a2 <audioTickL+0x502>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    3638:	f8d9 3004 	ldr.w	r3, [r9, #4]
    363c:	3d88      	subs	r5, #136	; 0x88
    363e:	f8df 8200 	ldr.w	r8, [pc, #512]	; 3840 <audioTickL+0x3a0>
    3642:	1b1c      	subs	r4, r3, r4
    3644:	4b6f      	ldr	r3, [pc, #444]	; (3804 <audioTickL+0x364>)
    3646:	601c      	str	r4, [r3, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    3648:	4c6f      	ldr	r4, [pc, #444]	; (3808 <audioTickL+0x368>)
    364a:	f8d9 6004 	ldr.w	r6, [r9, #4]
			float sample = 0.0f;
    364e:	4b6e      	ldr	r3, [pc, #440]	; (3808 <audioTickL+0x368>)
			lfoShapeTick[i](&sample,i, string);
    3650:	4652      	mov	r2, sl
    3652:	f107 0038 	add.w	r0, r7, #56	; 0x38
    3656:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    3658:	f814 3b01 	ldrb.w	r3, [r4], #1
    365c:	b13b      	cbz	r3, 366e <audioTickL+0x1ce>
			lfoShapeTick[i](&sample,i, string);
    365e:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    3662:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    3666:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    3668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    366a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    366e:	4b67      	ldr	r3, [pc, #412]	; (380c <audioTickL+0x36c>)
    3670:	f108 0804 	add.w	r8, r8, #4
    3674:	3508      	adds	r5, #8
    3676:	429c      	cmp	r4, r3
    3678:	d1e9      	bne.n	364e <audioTickL+0x1ae>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    367a:	f8d9 3004 	ldr.w	r3, [r9, #4]
		oscillator_tick(note[v], v);
    367e:	eeb0 0a48 	vmov.f32	s0, s16
    3682:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    3684:	1b9e      	subs	r6, r3, r6
    3686:	4b62      	ldr	r3, [pc, #392]	; (3810 <audioTickL+0x370>)
    3688:	601e      	str	r6, [r3, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    368a:	f8d9 4004 	ldr.w	r4, [r9, #4]
		oscillator_tick(note[v], v);
    368e:	f7fd f867 	bl	760 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    3692:	f8d9 3004 	ldr.w	r3, [r9, #4]
		noise_tick(v);
    3696:	4650      	mov	r0, sl
		timeOsc = DWT->CYCCNT - tempCountOsc;
    3698:	4a5e      	ldr	r2, [pc, #376]	; (3814 <audioTickL+0x374>)
    369a:	1b1b      	subs	r3, r3, r4
    369c:	6013      	str	r3, [r2, #0]
		uint32_t tempCountNoise = DWT->CYCCNT;
    369e:	f8d9 4004 	ldr.w	r4, [r9, #4]
		noise_tick(v);
    36a2:	f7ff fe9d 	bl	33e0 <noise_tick>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    36a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    36aa:	4a5b      	ldr	r2, [pc, #364]	; (3818 <audioTickL+0x378>)
    36ac:	1b1b      	subs	r3, r3, r4
    36ae:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    36b0:	4b5a      	ldr	r3, [pc, #360]	; (381c <audioTickL+0x37c>)
    36b2:	781b      	ldrb	r3, [r3, #0]
    36b4:	2b00      	cmp	r3, #0
    36b6:	f000 81eb 	beq.w	3a90 <audioTickL+0x5f0>
			filterSamps[0] += oscOuts[0][i][v];
    36ba:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    36bc:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    36be:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    36c2:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    36c6:	d011      	beq.n	36ec <audioTickL+0x24c>
			filterSamps[0] += oscOuts[0][i][v];
    36c8:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    36cc:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    36ce:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    36d2:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    36d6:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    36da:	d007      	beq.n	36ec <audioTickL+0x24c>
			filterSamps[0] += oscOuts[0][i][v];
    36dc:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    36e0:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    36e4:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    36e8:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    36ec:	697b      	ldr	r3, [r7, #20]
		sample = filter_tick(&filterSamps[0], note[v], v);
    36ee:	eeb0 0a48 	vmov.f32	s0, s16
    36f2:	4651      	mov	r1, sl
    36f4:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    36f8:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    36fc:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    3700:	ee76 6a86 	vadd.f32	s13, s13, s12
    3704:	617b      	str	r3, [r7, #20]
		filterSamps[1] += noiseOuts[1][v];
    3706:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    370a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    370e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    3712:	f8d9 4004 	ldr.w	r4, [r9, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    3716:	f7fd fa23 	bl	b60 <filter_tick>
    371a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    371e:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    3722:	f8d9 3004 	ldr.w	r3, [r9, #4]
    3726:	4a3e      	ldr	r2, [pc, #248]	; (3820 <audioTickL+0x380>)
    3728:	1b1b      	subs	r3, r3, r4
    372a:	6013      	str	r3, [r2, #0]
		if (fxPre)
    372c:	4b3d      	ldr	r3, [pc, #244]	; (3824 <audioTickL+0x384>)
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	b133      	cbz	r3, 3740 <audioTickL+0x2a0>
			sample *= amplitude[v];
    3732:	6a3b      	ldr	r3, [r7, #32]
    3734:	edd3 7a00 	vldr	s15, [r3]
    3738:	ee20 8a27 	vmul.f32	s16, s0, s15
    373c:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    3740:	4b39      	ldr	r3, [pc, #228]	; (3828 <audioTickL+0x388>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3742:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
		if (overSampled)
    3746:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    3748:	f8d9 3004 	ldr.w	r3, [r9, #4]
    374c:	613b      	str	r3, [r7, #16]
		if (overSampled)
    374e:	2c00      	cmp	r4, #0
    3750:	f040 8137 	bne.w	39c2 <audioTickL+0x522>
    3754:	4a35      	ldr	r2, [pc, #212]	; (382c <audioTickL+0x38c>)
    3756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3758:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 3844 <audioTickL+0x3a4>
    375c:	18d6      	adds	r6, r2, r3
    375e:	4a34      	ldr	r2, [pc, #208]	; (3830 <audioTickL+0x390>)
    3760:	18d5      	adds	r5, r2, r3
					sample = effectTick[i](sample, i, v); //run the effect
    3762:	4a34      	ldr	r2, [pc, #208]	; (3834 <audioTickL+0x394>)
				if (effectsActive[i])
    3764:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    3768:	eeb0 0a48 	vmov.f32	s0, s16
    376c:	4620      	mov	r0, r4
    376e:	4651      	mov	r1, sl
				if (effectsActive[i])
    3770:	b18b      	cbz	r3, 3796 <audioTickL+0x2f6>
					sample = effectTick[i](sample, i, v); //run the effect
    3772:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3776:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    3778:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    377c:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    3780:	ee7b 6ae7 	vsub.f32	s13, s23, s15
					sample *= fxPostGain[i][v];
    3784:	4a2b      	ldr	r2, [pc, #172]	; (3834 <audioTickL+0x394>)
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    3786:	ee60 7a27 	vmul.f32	s15, s0, s15
    378a:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    378e:	ee27 8a87 	vmul.f32	s16, s15, s14
    3792:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    3796:	3401      	adds	r4, #1
    3798:	3608      	adds	r6, #8
    379a:	3508      	adds	r5, #8
    379c:	2c04      	cmp	r4, #4
    379e:	d1e1      	bne.n	3764 <audioTickL+0x2c4>
    37a0:	e052      	b.n	3848 <audioTickL+0x3a8>
    37a2:	bf00      	nop
    37a4:	e0001000 	.word	0xe0001000
    37a8:	200051f0 	.word	0x200051f0
    37ac:	20005224 	.word	0x20005224
    37b0:	200146d0 	.word	0x200146d0
    37b4:	200148a4 	.word	0x200148a4
    37b8:	2001491c 	.word	0x2001491c
    37bc:	200056b0 	.word	0x200056b0
    37c0:	20005724 	.word	0x20005724
    37c4:	00000000 	.word	0x00000000
    37c8:	200148b8 	.word	0x200148b8
    37cc:	20000a04 	.word	0x20000a04
    37d0:	20014758 	.word	0x20014758
    37d4:	20005580 	.word	0x20005580
    37d8:	20005074 	.word	0x20005074
    37dc:	42fe0000 	.word	0x42fe0000
    37e0:	3f7fffef 	.word	0x3f7fffef
    37e4:	200055d8 	.word	0x200055d8
    37e8:	bf7fffef 	.word	0xbf7fffef
    37ec:	20019960 	.word	0x20019960
    37f0:	2001995c 	.word	0x2001995c
    37f4:	20014860 	.word	0x20014860
    37f8:	20014868 	.word	0x20014868
    37fc:	2001489c 	.word	0x2001489c
    3800:	20005070 	.word	0x20005070
    3804:	20014890 	.word	0x20014890
    3808:	2000531c 	.word	0x2000531c
    380c:	20005320 	.word	0x20005320
    3810:	200148a0 	.word	0x200148a0
    3814:	200148b0 	.word	0x200148b0
    3818:	200148a8 	.word	0x200148a8
    381c:	20000024 	.word	0x20000024
    3820:	20014894 	.word	0x20014894
    3824:	20016ce6 	.word	0x20016ce6
    3828:	20000025 	.word	0x20000025
    382c:	200050f4 	.word	0x200050f4
    3830:	20005114 	.word	0x20005114
    3834:	20005060 	.word	0x20005060
    3838:	20005298 	.word	0x20005298
    383c:	2000000d 	.word	0x2000000d
    3840:	20005380 	.word	0x20005380
    3844:	20014bb4 	.word	0x20014bb4
		timeOS = DWT->CYCCNT - tempCountOS;
    3848:	f8d9 3004 	ldr.w	r3, [r9, #4]
    384c:	693a      	ldr	r2, [r7, #16]
    384e:	1a9b      	subs	r3, r3, r2
    3850:	4a98      	ldr	r2, [pc, #608]	; (3ab4 <audioTickL+0x614>)
    3852:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    3854:	4b98      	ldr	r3, [pc, #608]	; (3ab8 <audioTickL+0x618>)
    3856:	781b      	ldrb	r3, [r3, #0]
    3858:	b933      	cbnz	r3, 3868 <audioTickL+0x3c8>
			sample *= amplitude[v];
    385a:	6a3b      	ldr	r3, [r7, #32]
    385c:	edd3 7a00 	vldr	s15, [r3]
    3860:	ee28 8a27 	vmul.f32	s16, s16, s15
    3864:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    3868:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
    386a:	eeb0 0a48 	vmov.f32	s0, s16
    386e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    3870:	f10a 0a01 	add.w	sl, sl, #1
    3874:	3304      	adds	r3, #4
    3876:	623b      	str	r3, [r7, #32]
    3878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    387a:	3304      	adds	r3, #4
    387c:	627b      	str	r3, [r7, #36]	; 0x24
    387e:	69fb      	ldr	r3, [r7, #28]
    3880:	3304      	adds	r3, #4
    3882:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
    3884:	4b8d      	ldr	r3, [pc, #564]	; (3abc <audioTickL+0x61c>)
    3886:	1918      	adds	r0, r3, r4
    3888:	f005 fada 	bl	8e40 <__tSVF_tick_veneer>
		masterSample += sample * finalMaster[v];
    388c:	4b8c      	ldr	r3, [pc, #560]	; (3ac0 <audioTickL+0x620>)
    388e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    3892:	4423      	add	r3, r4
    3894:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    3898:	1d23      	adds	r3, r4, #4
    389a:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample * finalMaster[v];
    389c:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    38a0:	f89b 3000 	ldrb.w	r3, [fp]
    38a4:	4553      	cmp	r3, sl
		masterSample += sample * finalMaster[v];
    38a6:	eee7 8a80 	vfma.f32	s17, s15, s0
	for (int v = 0; v < numStringsThisBoard; v++)
    38aa:	f73f ae77 	bgt.w	359c <audioTickL+0xfc>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    38ae:	ed9f 0a85 	vldr	s0, [pc, #532]	; 3ac4 <audioTickL+0x624>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    38b2:	4b85      	ldr	r3, [pc, #532]	; (3ac8 <audioTickL+0x628>)
    38b4:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    38b6:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    38ba:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    38bc:	eddf 7a83 	vldr	s15, [pc, #524]	; 3acc <audioTickL+0x62c>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    38c0:	1a5b      	subs	r3, r3, r1
    38c2:	4a83      	ldr	r2, [pc, #524]	; (3ad0 <audioTickL+0x630>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    38c4:	eee9 0a27 	vfma.f32	s1, s18, s15
    38c8:	ed9f 1a82 	vldr	s2, [pc, #520]	; 3ad4 <audioTickL+0x634>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    38cc:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    38ce:	f003 fde7 	bl	74a0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    38d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    38d6:	4a80      	ldr	r2, [pc, #512]	; (3ad8 <audioTickL+0x638>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38d8:	4b80      	ldr	r3, [pc, #512]	; (3adc <audioTickL+0x63c>)
	if (pedalControlsMaster)
    38da:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    38dc:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    38e0:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38e2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    38e6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    38ea:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    38ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    38f2:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    38f6:	b178      	cbz	r0, 3918 <audioTickL+0x478>
	float omAlpha = 1.0f - alpha;
    38f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    38fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    3900:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    3904:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    3908:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    390c:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    3910:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    3914:	ee68 8aa7 	vmul.f32	s17, s17, s15
	if (masterSample  > .999999f)
    3918:	eddf 7a71 	vldr	s15, [pc, #452]	; 3ae0 <audioTickL+0x640>
    391c:	eef4 8ae7 	vcmpe.f32	s17, s15
    3920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3924:	f300 80b1 	bgt.w	3a8a <audioTickL+0x5ea>
	else if (masterSample < -.999999f)
    3928:	eddf 7a6e 	vldr	s15, [pc, #440]	; 3ae4 <audioTickL+0x644>
    392c:	eef4 8ae7 	vcmpe.f32	s17, s15
    3930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3934:	d501      	bpl.n	393a <audioTickL+0x49a>
		masterSample = -.9999999f;
    3936:	eddf 8a6c 	vldr	s17, [pc, #432]	; 3ae8 <audioTickL+0x648>
	return masterSample * audioMasterLevel * 0.98f;
    393a:	496c      	ldr	r1, [pc, #432]	; (3aec <audioTickL+0x64c>)
	timeTick = DWT->CYCCNT - tempCountTick;
    393c:	4b62      	ldr	r3, [pc, #392]	; (3ac8 <audioTickL+0x628>)
	return masterSample * audioMasterLevel * 0.98f;
    393e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 3af0 <audioTickL+0x650>
	timeTick = DWT->CYCCNT - tempCountTick;
    3942:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    3944:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    3948:	68b9      	ldr	r1, [r7, #8]
}
    394a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    394c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    3950:	4a68      	ldr	r2, [pc, #416]	; (3af4 <audioTickL+0x654>)
    3952:	1a5b      	subs	r3, r3, r1
}
    3954:	ee20 0a28 	vmul.f32	s0, s0, s17
	timeTick = DWT->CYCCNT - tempCountTick;
    3958:	6013      	str	r3, [r2, #0]
}
    395a:	46bd      	mov	sp, r7
    395c:	ecbd 8b08 	vpop	{d8-d11}
    3960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[v] = 0.0f;
    3964:	eeb0 8a69 	vmov.f32	s16, s19
    3968:	ed43 9a01 	vstr	s19, [r3, #-4]
		if (note[v] > 127.0f)
    396c:	e649      	b.n	3602 <audioTickL+0x162>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3970:	f103 0008 	add.w	r0, r3, #8
    3974:	f005 fa94 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    3978:	6abb      	ldr	r3, [r7, #40]	; 0x28
    397a:	ed83 0a07 	vstr	s0, [r3, #28]
		if (envOn[v])
    397e:	4b5e      	ldr	r3, [pc, #376]	; (3af8 <audioTickL+0x658>)
    3980:	789b      	ldrb	r3, [r3, #2]
    3982:	2b00      	cmp	r3, #0
    3984:	f43f ae53 	beq.w	362e <audioTickL+0x18e>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    3988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    398a:	f103 0010 	add.w	r0, r3, #16
    398e:	f005 fa87 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    3992:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3994:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
		if (envOn[v])
    3998:	4b57      	ldr	r3, [pc, #348]	; (3af8 <audioTickL+0x658>)
    399a:	78db      	ldrb	r3, [r3, #3]
    399c:	2b00      	cmp	r3, #0
    399e:	f43f ae4b 	beq.w	3638 <audioTickL+0x198>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    39a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39a4:	f103 0018 	add.w	r0, r3, #24
    39a8:	f005 fa7a 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    39ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39ae:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    39b2:	e641      	b.n	3638 <audioTickL+0x198>
    39b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    39b6:	f005 fa73 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    39ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    39bc:	ed83 0a05 	vstr	s0, [r3, #20]
    39c0:	e62b      	b.n	361a <audioTickL+0x17a>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    39c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
    39c8:	484c      	ldr	r0, [pc, #304]	; (3afc <audioTickL+0x65c>)
			for (int i = 0; i < 4; i++)
    39ca:	2400      	movs	r4, #0
    39cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    39d0:	f8df 8148 	ldr.w	r8, [pc, #328]	; 3b1c <audioTickL+0x67c>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    39d4:	4410      	add	r0, r2
    39d6:	603a      	str	r2, [r7, #0]
    39d8:	4a49      	ldr	r2, [pc, #292]	; (3b00 <audioTickL+0x660>)
    39da:	18d6      	adds	r6, r2, r3
    39dc:	4a49      	ldr	r2, [pc, #292]	; (3b04 <audioTickL+0x664>)
    39de:	18d5      	adds	r5, r2, r3
    39e0:	2301      	movs	r3, #1
    39e2:	4a49      	ldr	r2, [pc, #292]	; (3b08 <audioTickL+0x668>)
    39e4:	f005 fab8 	bl	8f58 <__arm_fir_interpolate_f32_veneer>
    39e8:	4651      	mov	r1, sl
    39ea:	46b2      	mov	sl, r6
    39ec:	462e      	mov	r6, r5
				if (effectsActive[i])
    39ee:	f818 3b01 	ldrb.w	r3, [r8], #1
    39f2:	bb63      	cbnz	r3, 3a4e <audioTickL+0x5ae>
			for (int i = 0; i < 4; i++)
    39f4:	3401      	adds	r4, #1
    39f6:	f10a 0a08 	add.w	sl, sl, #8
    39fa:	3608      	adds	r6, #8
    39fc:	2c04      	cmp	r4, #4
    39fe:	d1f6      	bne.n	39ee <audioTickL+0x54e>
				if (oversamplerArray[i] > .999999f)
    3a00:	4b41      	ldr	r3, [pc, #260]	; (3b08 <audioTickL+0x668>)
    3a02:	468a      	mov	sl, r1
    3a04:	edd3 7a00 	vldr	s15, [r3]
    3a08:	eef4 7aea 	vcmpe.f32	s15, s21
    3a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a10:	dd43      	ble.n	3a9a <audioTickL+0x5fa>
					oversamplerArray[i] = .999999f;
    3a12:	4b3d      	ldr	r3, [pc, #244]	; (3b08 <audioTickL+0x668>)
    3a14:	edc3 aa00 	vstr	s21, [r3]
				if (oversamplerArray[i] > .999999f)
    3a18:	4b3b      	ldr	r3, [pc, #236]	; (3b08 <audioTickL+0x668>)
    3a1a:	edd3 7a01 	vldr	s15, [r3, #4]
    3a1e:	eef4 7aea 	vcmpe.f32	s15, s21
    3a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a26:	dc40      	bgt.n	3aaa <audioTickL+0x60a>
				else if (oversamplerArray[i]< -.999999f)
    3a28:	eef4 7acb 	vcmpe.f32	s15, s22
    3a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a30:	d501      	bpl.n	3a36 <audioTickL+0x596>
					oversamplerArray[i] = -.999999f;
    3a32:	ed83 ba01 	vstr	s22, [r3, #4]
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	f107 0234 	add.w	r2, r7, #52	; 0x34
    3a3c:	4833      	ldr	r0, [pc, #204]	; (3b0c <audioTickL+0x66c>)
    3a3e:	4932      	ldr	r1, [pc, #200]	; (3b08 <audioTickL+0x668>)
    3a40:	4418      	add	r0, r3
    3a42:	2302      	movs	r3, #2
    3a44:	f005 f9ec 	bl	8e20 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    3a48:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    3a4c:	e6fc      	b.n	3848 <audioTickL+0x3a8>
    3a4e:	4d2e      	ldr	r5, [pc, #184]	; (3b08 <audioTickL+0x668>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    3a50:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    3a54:	4620      	mov	r0, r4
    3a56:	4b2e      	ldr	r3, [pc, #184]	; (3b10 <audioTickL+0x670>)
    3a58:	eeb0 0a48 	vmov.f32	s0, s16
    3a5c:	60f9      	str	r1, [r7, #12]
    3a5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    3a62:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3a64:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    3a68:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3a6c:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    3a70:	4b28      	ldr	r3, [pc, #160]	; (3b14 <audioTickL+0x674>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3a72:	ee7b 7ae7 	vsub.f32	s15, s23, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    3a76:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    3a78:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    3a7c:	ee27 0a00 	vmul.f32	s0, s14, s0
    3a80:	eca5 0a01 	vstmia	r5!, {s0}
					for (int j = 0; j < OVERSAMPLE; j++)
    3a84:	429d      	cmp	r5, r3
    3a86:	d1e3      	bne.n	3a50 <audioTickL+0x5b0>
    3a88:	e7b4      	b.n	39f4 <audioTickL+0x554>
		masterSample  = .999999f;
    3a8a:	eef0 8a67 	vmov.f32	s17, s15
    3a8e:	e754      	b.n	393a <audioTickL+0x49a>
		for (int i = 0; i < oscToTick; i++)
    3a90:	eddf 7a21 	vldr	s15, [pc, #132]	; 3b18 <audioTickL+0x678>
    3a94:	eeb0 6a67 	vmov.f32	s12, s15
    3a98:	e628      	b.n	36ec <audioTickL+0x24c>
				else if (oversamplerArray[i]< -.999999f)
    3a9a:	eef4 7acb 	vcmpe.f32	s15, s22
    3a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3aa2:	d5b9      	bpl.n	3a18 <audioTickL+0x578>
					oversamplerArray[i] = -.999999f;
    3aa4:	ed83 ba00 	vstr	s22, [r3]
    3aa8:	e7b6      	b.n	3a18 <audioTickL+0x578>
					oversamplerArray[i] = .999999f;
    3aaa:	4b17      	ldr	r3, [pc, #92]	; (3b08 <audioTickL+0x668>)
    3aac:	edc3 aa01 	vstr	s21, [r3, #4]
    3ab0:	e7c1      	b.n	3a36 <audioTickL+0x596>
    3ab2:	bf00      	nop
    3ab4:	200148ac 	.word	0x200148ac
    3ab8:	20016ce6 	.word	0x20016ce6
    3abc:	200050c4 	.word	0x200050c4
    3ac0:	200050cc 	.word	0x200050cc
    3ac4:	423c0000 	.word	0x423c0000
    3ac8:	e0001000 	.word	0xe0001000
    3acc:	42a00000 	.word	0x42a00000
    3ad0:	200148b4 	.word	0x200148b4
    3ad4:	42fe0000 	.word	0x42fe0000
    3ad8:	2001aa88 	.word	0x2001aa88
    3adc:	200004d4 	.word	0x200004d4
    3ae0:	3f7fffef 	.word	0x3f7fffef
    3ae4:	bf7fffef 	.word	0xbf7fffef
    3ae8:	bf7ffffe 	.word	0xbf7ffffe
    3aec:	200006d4 	.word	0x200006d4
    3af0:	3f7ae148 	.word	0x3f7ae148
    3af4:	200148bc 	.word	0x200148bc
    3af8:	20005070 	.word	0x20005070
    3afc:	200055c0 	.word	0x200055c0
    3b00:	200050f4 	.word	0x200050f4
    3b04:	20005114 	.word	0x20005114
    3b08:	20005608 	.word	0x20005608
    3b0c:	200055a8 	.word	0x200055a8
    3b10:	20005060 	.word	0x20005060
    3b14:	20005610 	.word	0x20005610
    3b18:	00000000 	.word	0x00000000
    3b1c:	20014bb4 	.word	0x20014bb4

00003b20 <audioFrame>:
{
    3b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b24:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    3b26:	2201      	movs	r2, #1
    3b28:	2108      	movs	r1, #8
    3b2a:	48a8      	ldr	r0, [pc, #672]	; (3dcc <audioFrame+0x2ac>)
	if (switchStrings)
    3b2c:	4ca8      	ldr	r4, [pc, #672]	; (3dd0 <audioFrame+0x2b0>)
{
    3b2e:	ed2d 8b10 	vpush	{d8-d15}
    3b32:	b095      	sub	sp, #84	; 0x54
    3b34:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    3b36:	f005 f95b 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    3b3a:	4ba6      	ldr	r3, [pc, #664]	; (3dd4 <audioFrame+0x2b4>)
    3b3c:	685b      	ldr	r3, [r3, #4]
    3b3e:	9305      	str	r3, [sp, #20]
	if (switchStrings)
    3b40:	6823      	ldr	r3, [r4, #0]
    3b42:	2b00      	cmp	r3, #0
    3b44:	f040 80f5 	bne.w	3d32 <audioFrame+0x212>
	switchStrings = 0;
    3b48:	2300      	movs	r3, #0
	if (newPluck)
    3b4a:	4aa3      	ldr	r2, [pc, #652]	; (3dd8 <audioFrame+0x2b8>)
	switchStrings = 0;
    3b4c:	6023      	str	r3, [r4, #0]
	if (newPluck)
    3b4e:	6812      	ldr	r2, [r2, #0]
    3b50:	2a00      	cmp	r2, #0
    3b52:	d150      	bne.n	3bf6 <audioFrame+0xd6>
	if (currentActivePreset == 63)
    3b54:	4fa1      	ldr	r7, [pc, #644]	; (3ddc <audioFrame+0x2bc>)
    3b56:	783b      	ldrb	r3, [r7, #0]
    3b58:	2b3f      	cmp	r3, #63	; 0x3f
    3b5a:	f000 80b2 	beq.w	3cc2 <audioFrame+0x1a2>
	else if (currentActivePreset == 62)
    3b5e:	783b      	ldrb	r3, [r7, #0]
    3b60:	2b3e      	cmp	r3, #62	; 0x3e
    3b62:	f000 80c6 	beq.w	3cf2 <audioFrame+0x1d2>
	else if (currentActivePreset == 61)
    3b66:	783b      	ldrb	r3, [r7, #0]
    3b68:	2b3d      	cmp	r3, #61	; 0x3d
    3b6a:	f000 816b 	beq.w	3e44 <audioFrame+0x324>
    3b6e:	4c9c      	ldr	r4, [pc, #624]	; (3de0 <audioFrame+0x2c0>)
    3b70:	9b04      	ldr	r3, [sp, #16]
    3b72:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3b76:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 3de4 <audioFrame+0x2c4>
    3b7a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    3b7e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3b82:	f7ff fc8d 	bl	34a0 <audioTickL>
    3b86:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3b8a:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3b8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3b90:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    3b92:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3b96:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3b9a:	d1f2      	bne.n	3b82 <audioFrame+0x62>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3b9c:	4892      	ldr	r0, [pc, #584]	; (3de8 <audioFrame+0x2c8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3b9e:	4b8d      	ldr	r3, [pc, #564]	; (3dd4 <audioFrame+0x2b4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3ba0:	edd0 6a00 	vldr	s13, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3ba4:	685b      	ldr	r3, [r3, #4]
    3ba6:	9805      	ldr	r0, [sp, #20]
	if (frameLoadPercentage > .99f)
    3ba8:	ed9f 7a90 	vldr	s14, [pc, #576]	; 3dec <audioFrame+0x2cc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bac:	1a1b      	subs	r3, r3, r0
    3bae:	4990      	ldr	r1, [pc, #576]	; (3df0 <audioFrame+0x2d0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bb0:	4a90      	ldr	r2, [pc, #576]	; (3df4 <audioFrame+0x2d4>)
    3bb2:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    3bb6:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    3bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    3bc4:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    3bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3bcc:	dd09      	ble.n	3be2 <audioFrame+0xc2>
		if (overSampled == 1)
    3bce:	4b8a      	ldr	r3, [pc, #552]	; (3df8 <audioFrame+0x2d8>)
    3bd0:	781a      	ldrb	r2, [r3, #0]
    3bd2:	2a01      	cmp	r2, #1
    3bd4:	f000 80c6 	beq.w	3d64 <audioFrame+0x244>
		else if (oscToTick > 0)
    3bd8:	4a88      	ldr	r2, [pc, #544]	; (3dfc <audioFrame+0x2dc>)
    3bda:	7813      	ldrb	r3, [r2, #0]
    3bdc:	b10b      	cbz	r3, 3be2 <audioFrame+0xc2>
			oscToTick--;
    3bde:	3b01      	subs	r3, #1
    3be0:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    3be2:	2200      	movs	r2, #0
    3be4:	2108      	movs	r1, #8
    3be6:	4879      	ldr	r0, [pc, #484]	; (3dcc <audioFrame+0x2ac>)
}
    3be8:	b015      	add	sp, #84	; 0x54
    3bea:	ecbd 8b10 	vpop	{d8-d15}
    3bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    3bf2:	f005 b8fd 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    3bf6:	f8df a240 	ldr.w	sl, [pc, #576]	; 3e38 <audioFrame+0x318>
    3bfa:	f89a 2000 	ldrb.w	r2, [sl]
    3bfe:	2a00      	cmp	r2, #0
    3c00:	f000 809b 	beq.w	3d3a <audioFrame+0x21a>
    3c04:	487e      	ldr	r0, [pc, #504]	; (3e00 <audioFrame+0x2e0>)
    3c06:	469b      	mov	fp, r3
    3c08:	4f74      	ldr	r7, [pc, #464]	; (3ddc <audioFrame+0x2bc>)
    3c0a:	4b7e      	ldr	r3, [pc, #504]	; (3e04 <audioFrame+0x2e4>)
    3c0c:	497e      	ldr	r1, [pc, #504]	; (3e08 <audioFrame+0x2e8>)
    3c0e:	9003      	str	r0, [sp, #12]
    3c10:	487e      	ldr	r0, [pc, #504]	; (3e0c <audioFrame+0x2ec>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    3c12:	9706      	str	r7, [sp, #24]
    3c14:	461f      	mov	r7, r3
    3c16:	9002      	str	r0, [sp, #8]
    3c18:	f8cd a01c 	str.w	sl, [sp, #28]
    3c1c:	468a      	mov	sl, r1
    3c1e:	487c      	ldr	r0, [pc, #496]	; (3e10 <audioFrame+0x2f0>)
					tLivingString2_setDecay(&strings[i], 0.2f);
    3c20:	eddf da7c 	vldr	s27, [pc, #496]	; 3e14 <audioFrame+0x2f4>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3c24:	ed9f da7c 	vldr	s26, [pc, #496]	; 3e18 <audioFrame+0x2f8>
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    3c28:	ed9f ea7c 	vldr	s28, [pc, #496]	; 3e1c <audioFrame+0x2fc>
    3c2c:	eddf ba7c 	vldr	s23, [pc, #496]	; 3e20 <audioFrame+0x300>
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    3c30:	ed9f ba7c 	vldr	s22, [pc, #496]	; 3e24 <audioFrame+0x304>
    3c34:	4e7c      	ldr	r6, [pc, #496]	; (3e28 <audioFrame+0x308>)
    3c36:	f8df 8204 	ldr.w	r8, [pc, #516]	; 3e3c <audioFrame+0x31c>
    3c3a:	f8df 9204 	ldr.w	r9, [pc, #516]	; 3e40 <audioFrame+0x320>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    3c3e:	eddf fa7b 	vldr	s31, [pc, #492]	; 3e2c <audioFrame+0x30c>
    3c42:	9001      	str	r0, [sp, #4]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    3c44:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
    3c48:	2b00      	cmp	r3, #0
    3c4a:	d16a      	bne.n	3d22 <audioFrame+0x202>
    3c4c:	6831      	ldr	r1, [r6, #0]
    3c4e:	2900      	cmp	r1, #0
    3c50:	f040 808b 	bne.w	3d6a <audioFrame+0x24a>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    3c54:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	dd13      	ble.n	3c84 <audioFrame+0x164>
				if (currentActivePreset < 60)
    3c5c:	9b06      	ldr	r3, [sp, #24]
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2b3b      	cmp	r3, #59	; 0x3b
    3c62:	d96c      	bls.n	3d3e <audioFrame+0x21e>
				else if (currentActivePreset == 63)
    3c64:	9b06      	ldr	r3, [sp, #24]
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	2b3f      	cmp	r3, #63	; 0x3f
    3c6a:	f000 81f0 	beq.w	404e <_Min_Heap_Size+0x4e>
				else if (currentActivePreset == 62)
    3c6e:	9b06      	ldr	r3, [sp, #24]
    3c70:	781b      	ldrb	r3, [r3, #0]
    3c72:	2b3e      	cmp	r3, #62	; 0x3e
    3c74:	f000 8248 	beq.w	4108 <_Min_Heap_Size+0x108>
				else if (currentActivePreset == 61)
    3c78:	9b06      	ldr	r3, [sp, #24]
    3c7a:	781b      	ldrb	r3, [r3, #0]
    3c7c:	2b3d      	cmp	r3, #61	; 0x3d
    3c7e:	f000 8267 	beq.w	4150 <_Min_Heap_Size+0x150>
    3c82:	2100      	movs	r1, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    3c84:	9b03      	ldr	r3, [sp, #12]
    3c86:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    3c88:	f849 102b 	str.w	r1, [r9, fp, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
    3c8c:	f10b 0b01 	add.w	fp, fp, #1
    3c90:	3304      	adds	r3, #4
    3c92:	3704      	adds	r7, #4
    3c94:	455a      	cmp	r2, fp
    3c96:	f108 0804 	add.w	r8, r8, #4
    3c9a:	9303      	str	r3, [sp, #12]
    3c9c:	f10a 0a04 	add.w	sl, sl, #4
    3ca0:	9b02      	ldr	r3, [sp, #8]
    3ca2:	f103 0304 	add.w	r3, r3, #4
    3ca6:	9302      	str	r3, [sp, #8]
    3ca8:	9b01      	ldr	r3, [sp, #4]
    3caa:	f103 0348 	add.w	r3, r3, #72	; 0x48
    3cae:	9301      	str	r3, [sp, #4]
    3cb0:	dcc8      	bgt.n	3c44 <audioFrame+0x124>
    3cb2:	9f06      	ldr	r7, [sp, #24]
		newPluck = 0;
    3cb4:	2300      	movs	r3, #0
    3cb6:	4a48      	ldr	r2, [pc, #288]	; (3dd8 <audioFrame+0x2b8>)
    3cb8:	6013      	str	r3, [r2, #0]
	if (currentActivePreset == 63)
    3cba:	783b      	ldrb	r3, [r7, #0]
    3cbc:	2b3f      	cmp	r3, #63	; 0x3f
    3cbe:	f47f af4e 	bne.w	3b5e <audioFrame+0x3e>
    3cc2:	4c47      	ldr	r4, [pc, #284]	; (3de0 <audioFrame+0x2c0>)
    3cc4:	9b04      	ldr	r3, [sp, #16]
    3cc6:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3cca:	ed9f 8a46 	vldr	s16, [pc, #280]	; 3de4 <audioFrame+0x2c4>
    3cce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    3cd2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3cd6:	f7fd fdc3 	bl	1860 <audioTickString>
    3cda:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3cde:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3ce0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3ce4:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString() * TWO_TO_23);
    3ce6:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3cea:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3cee:	d1f2      	bne.n	3cd6 <audioFrame+0x1b6>
    3cf0:	e754      	b.n	3b9c <audioFrame+0x7c>
    3cf2:	4c3b      	ldr	r4, [pc, #236]	; (3de0 <audioFrame+0x2c0>)
    3cf4:	9b04      	ldr	r3, [sp, #16]
    3cf6:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3cfa:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 3de4 <audioFrame+0x2c4>
    3cfe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    3d02:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3d06:	f7fd febb 	bl	1a80 <audioTickString2>
    3d0a:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d0e:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3d10:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d14:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    3d16:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    3d1a:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    3d1e:	d1f2      	bne.n	3d06 <audioFrame+0x1e6>
    3d20:	e73c      	b.n	3b9c <audioFrame+0x7c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    3d22:	f859 302b 	ldr.w	r3, [r9, fp, lsl #2]
    3d26:	6831      	ldr	r1, [r6, #0]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	ddab      	ble.n	3c84 <audioFrame+0x164>
    3d2c:	2900      	cmp	r1, #0
    3d2e:	d1a9      	bne.n	3c84 <audioFrame+0x164>
    3d30:	e794      	b.n	3c5c <audioFrame+0x13c>
		switchStringModel(switchStrings);
    3d32:	6820      	ldr	r0, [r4, #0]
    3d34:	f7fc fc44 	bl	5c0 <switchStringModel>
    3d38:	e706      	b.n	3b48 <audioFrame+0x28>
    3d3a:	4f28      	ldr	r7, [pc, #160]	; (3ddc <audioFrame+0x2bc>)
    3d3c:	e7ba      	b.n	3cb4 <audioFrame+0x194>
						tADSRT_off(&envs[v][i]);
    3d3e:	4638      	mov	r0, r7
    3d40:	f004 ff8a 	bl	8c58 <__tADSRT_off_veneer>
    3d44:	f107 0008 	add.w	r0, r7, #8
    3d48:	f004 ff86 	bl	8c58 <__tADSRT_off_veneer>
    3d4c:	f107 0010 	add.w	r0, r7, #16
    3d50:	f004 ff82 	bl	8c58 <__tADSRT_off_veneer>
    3d54:	f107 0018 	add.w	r0, r7, #24
    3d58:	f004 ff7e 	bl	8c58 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    3d5c:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    3d5e:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    3d60:	781a      	ldrb	r2, [r3, #0]
    3d62:	e78f      	b.n	3c84 <audioFrame+0x164>
			overSampled = 0;
    3d64:	2200      	movs	r2, #0
    3d66:	701a      	strb	r2, [r3, #0]
    3d68:	e73b      	b.n	3be2 <audioFrame+0xc2>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3d6a:	ee07 1a90 	vmov	s15, r1
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3d6e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3d72:	eeb0 0a6f 	vmov.f32	s0, s31
    3d76:	9308      	str	r3, [sp, #32]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    3d78:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3d7c:	4c2c      	ldr	r4, [pc, #176]	; (3e30 <audioFrame+0x310>)
    3d7e:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    3d82:	ee60 0a8d 	vmul.f32	s1, s1, s26
    3d86:	f003 fb8b 	bl	74a0 <LEAF_clip>
				stringOctave[i] = octave;
    3d8a:	4a2a      	ldr	r2, [pc, #168]	; (3e34 <audioFrame+0x314>)
				if (currentActivePreset < 60)
    3d8c:	9b06      	ldr	r3, [sp, #24]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
    3d8e:	eeb0 8a40 	vmov.f32	s16, s0
				stringOctave[i] = octave;
    3d92:	6812      	ldr	r2, [r2, #0]
    3d94:	ea4f 018b 	mov.w	r1, fp, lsl #2
    3d98:	6022      	str	r2, [r4, #0]
				if (currentActivePreset < 60)
    3d9a:	781a      	ldrb	r2, [r3, #0]
    3d9c:	9b08      	ldr	r3, [sp, #32]
    3d9e:	2a3b      	cmp	r2, #59	; 0x3b
    3da0:	f240 815a 	bls.w	4058 <_Min_Heap_Size+0x58>
				else if (currentActivePreset == 63)
    3da4:	9a06      	ldr	r2, [sp, #24]
    3da6:	7812      	ldrb	r2, [r2, #0]
    3da8:	2a3f      	cmp	r2, #63	; 0x3f
    3daa:	f000 81c2 	beq.w	4132 <_Min_Heap_Size+0x132>
				else if (currentActivePreset == 62)
    3dae:	9a06      	ldr	r2, [sp, #24]
    3db0:	7812      	ldrb	r2, [r2, #0]
    3db2:	2a3e      	cmp	r2, #62	; 0x3e
    3db4:	f000 8214 	beq.w	41e0 <_Min_Heap_Size+0x1e0>
				else if (currentActivePreset == 61)
    3db8:	9b06      	ldr	r3, [sp, #24]
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	2b3d      	cmp	r3, #61	; 0x3d
    3dbe:	f000 829b 	beq.w	42f8 <_Min_Heap_Size+0x2f8>
		for (int i = 0; i < numStringsThisBoard; i++)
    3dc2:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    3dc4:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    3dc6:	781a      	ldrb	r2, [r3, #0]
    3dc8:	e75c      	b.n	3c84 <audioFrame+0x164>
    3dca:	bf00      	nop
    3dcc:	58020000 	.word	0x58020000
    3dd0:	20014888 	.word	0x20014888
    3dd4:	e0001000 	.word	0xe0001000
    3dd8:	2000556c 	.word	0x2000556c
    3ddc:	200006d8 	.word	0x200006d8
    3de0:	30000040 	.word	0x30000040
    3de4:	4b000000 	.word	0x4b000000
    3de8:	20000004 	.word	0x20000004
    3dec:	3f7d70a4 	.word	0x3f7d70a4
    3df0:	20014898 	.word	0x20014898
    3df4:	200050d8 	.word	0x200050d8
    3df8:	20000025 	.word	0x20000025
    3dfc:	20000024 	.word	0x20000024
    3e00:	20014760 	.word	0x20014760
    3e04:	20005074 	.word	0x20005074
    3e08:	20005094 	.word	0x20005094
    3e0c:	2001a828 	.word	0x2001a828
    3e10:	20000974 	.word	0x20000974
    3e14:	3e4ccccd 	.word	0x3e4ccccd
    3e18:	37800080 	.word	0x37800080
    3e1c:	44fa0000 	.word	0x44fa0000
    3e20:	3dcccccd 	.word	0x3dcccccd
    3e24:	3ffeb852 	.word	0x3ffeb852
    3e28:	20014830 	.word	0x20014830
    3e2c:	00000000 	.word	0x00000000
    3e30:	20014868 	.word	0x20014868
    3e34:	200055a0 	.word	0x200055a0
    3e38:	2000000d 	.word	0x2000000d
    3e3c:	20014880 	.word	0x20014880
    3e40:	30000000 	.word	0x30000000
    3e44:	4bc8      	ldr	r3, [pc, #800]	; (4168 <_Min_Heap_Size+0x168>)
    3e46:	9904      	ldr	r1, [sp, #16]
    3e48:	f103 0240 	add.w	r2, r3, #64	; 0x40
    3e4c:	4ec7      	ldr	r6, [pc, #796]	; (416c <_Min_Heap_Size+0x16c>)
    3e4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3e52:	eddf aac7 	vldr	s21, [pc, #796]	; 4170 <_Min_Heap_Size+0x170>
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3e56:	ed9f aac7 	vldr	s20, [pc, #796]	; 4174 <_Min_Heap_Size+0x174>
    3e5a:	f106 0730 	add.w	r7, r6, #48	; 0x30
    3e5e:	9303      	str	r3, [sp, #12]
    3e60:	eb02 0381 	add.w	r3, r2, r1, lsl #2
					if (tempFreq < 18000.0f)
    3e64:	eddf 9ac4 	vldr	s19, [pc, #784]	; 4178 <_Min_Heap_Size+0x178>
    3e68:	9306      	str	r3, [sp, #24]
    3e6a:	f8df a36c 	ldr.w	sl, [pc, #876]	; 41d8 <_Min_Heap_Size+0x1d8>
    3e6e:	4bc3      	ldr	r3, [pc, #780]	; (417c <_Min_Heap_Size+0x17c>)
    3e70:	9302      	str	r3, [sp, #8]
			for (int i = 0; i < 12; i++)
    3e72:	f8df 8368 	ldr.w	r8, [pc, #872]	; 41dc <_Min_Heap_Size+0x1dc>
    3e76:	4dbd      	ldr	r5, [pc, #756]	; (416c <_Min_Heap_Size+0x16c>)
    3e78:	4cc1      	ldr	r4, [pc, #772]	; (4180 <_Min_Heap_Size+0x180>)
				knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    3e7a:	4640      	mov	r0, r8
    3e7c:	f003 fa70 	bl	7360 <tExpSmooth_tick>
				for (int v = 0; v < numStringsThisBoard; v++)
    3e80:	f89a 3000 	ldrb.w	r3, [sl]
				knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    3e84:	eca5 0a01 	vstmia	r5!, {s0}
				for (int v = 0; v < numStringsThisBoard; v++)
    3e88:	b12b      	cbz	r3, 3e96 <audioFrame+0x376>
    3e8a:	2b01      	cmp	r3, #1
					sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    3e8c:	ed84 0a08 	vstr	s0, [r4, #32]
				for (int v = 0; v < numStringsThisBoard; v++)
    3e90:	d001      	beq.n	3e96 <audioFrame+0x376>
					sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    3e92:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
			for (int i = 0; i < 12; i++)
    3e96:	42af      	cmp	r7, r5
    3e98:	f108 0804 	add.w	r8, r8, #4
    3e9c:	f104 0408 	add.w	r4, r4, #8
    3ea0:	d1eb      	bne.n	3e7a <audioFrame+0x35a>
			float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    3ea2:	48b8      	ldr	r0, [pc, #736]	; (4184 <_Min_Heap_Size+0x184>)
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3ea4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    3ea8:	f004 ff66 	bl	8d78 <__tNoise_tick_veneer>
    3eac:	48b6      	ldr	r0, [pc, #728]	; (4188 <_Min_Heap_Size+0x188>)
    3eae:	f005 f82f 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
    3eb2:	eeb0 ba40 	vmov.f32	s22, s0
			filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    3eb6:	48b3      	ldr	r0, [pc, #716]	; (4184 <_Min_Heap_Size+0x184>)
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3eb8:	f04f 0800 	mov.w	r8, #0
			filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    3ebc:	f004 ff5c 	bl	8d78 <__tNoise_tick_veneer>
    3ec0:	48b2      	ldr	r0, [pc, #712]	; (418c <_Min_Heap_Size+0x18c>)
    3ec2:	f005 f825 	bl	8f10 <__tVZFilter_tickEfficient_veneer>
    3ec6:	ee3b ba00 	vadd.f32	s22, s22, s0
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3eca:	ed96 0a00 	vldr	s0, [r6]
			float tempSamp = 0.0f;
    3ece:	eddf 8ab0 	vldr	s17, [pc, #704]	; 4190 <_Min_Heap_Size+0x190>
			tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    3ed2:	ee20 0a2a 	vmul.f32	s0, s0, s21
    3ed6:	4daf      	ldr	r5, [pc, #700]	; (4194 <_Min_Heap_Size+0x194>)
    3ed8:	f005 f806 	bl	8ee8 <__faster_mtof_veneer>
    3edc:	48aa      	ldr	r0, [pc, #680]	; (4188 <_Min_Heap_Size+0x188>)
    3ede:	f004 ff2f 	bl	8d40 <__tVZFilter_setFreq_veneer>
			tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[1] * 128.0f));
    3ee2:	ed96 0a01 	vldr	s0, [r6, #4]
    3ee6:	ee20 0a2a 	vmul.f32	s0, s0, s21
    3eea:	f004 fffd 	bl	8ee8 <__faster_mtof_veneer>
    3eee:	48a7      	ldr	r0, [pc, #668]	; (418c <_Min_Heap_Size+0x18c>)
    3ef0:	f004 ff26 	bl	8d40 <__tVZFilter_setFreq_veneer>
			float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    3ef4:	48a8      	ldr	r0, [pc, #672]	; (4198 <_Min_Heap_Size+0x198>)
    3ef6:	f003 fa33 	bl	7360 <tExpSmooth_tick>
    3efa:	4ba8      	ldr	r3, [pc, #672]	; (419c <_Min_Heap_Size+0x19c>)
    3efc:	eef0 ba40 	vmov.f32	s23, s0
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3f00:	f8cd a010 	str.w	sl, [sp, #16]
    3f04:	9301      	str	r3, [sp, #4]
    3f06:	4ba6      	ldr	r3, [pc, #664]	; (41a0 <_Min_Heap_Size+0x1a0>)
    3f08:	4699      	mov	r9, r3
				float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    3f0a:	4ba6      	ldr	r3, [pc, #664]	; (41a4 <_Min_Heap_Size+0x1a4>)
    3f0c:	ea4f 0488 	mov.w	r4, r8, lsl #2
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f10:	46cb      	mov	fp, r9
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f12:	f04f 0a00 	mov.w	sl, #0
				float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    3f16:	eb03 0088 	add.w	r0, r3, r8, lsl #2
    3f1a:	f004 ff15 	bl	8d48 <__tADSRT_tick_veneer>
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f1e:	edd6 7a07 	vldr	s15, [r6, #28]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f22:	9b02      	ldr	r3, [sp, #8]
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f24:	ee6b 7a27 	vmul.f32	s15, s22, s15
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f28:	441c      	add	r4, r3
    3f2a:	9b01      	ldr	r3, [sp, #4]
    3f2c:	ed94 7a00 	vldr	s14, [r4]
				tempSamp += filtNoise * noiseEnv * knobScaled[7];
    3f30:	eee7 8a80 	vfma.f32	s17, s15, s0
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    3f34:	ecb3 0a01 	vldmia	r3!, {s0}
    3f38:	eb08 04c8 	add.w	r4, r8, r8, lsl #3
    3f3c:	ee37 0a00 	vadd.f32	s0, s14, s0
    3f40:	9301      	str	r3, [sp, #4]
    3f42:	f004 fe99 	bl	8c78 <__mtof_veneer>
    3f46:	4b98      	ldr	r3, [pc, #608]	; (41a8 <_Min_Heap_Size+0x1a8>)
    3f48:	eca5 0a01 	vstmia	r5!, {s0}
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    3f50:	e004      	b.n	3f5c <audioFrame+0x43c>
    3f52:	f1ba 0f0c 	cmp.w	sl, #12
    3f56:	f104 0404 	add.w	r4, r4, #4
    3f5a:	d030      	beq.n	3fbe <audioFrame+0x49e>
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3f5c:	4658      	mov	r0, fp
				for (int j = 0; j < NUM_OVERTONES; j++)
    3f5e:	f10b 0b04 	add.w	fp, fp, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3f62:	f004 ff9d 	bl	8ea0 <__tADSRT_tickNoInterp_veneer>
    3f66:	ee06 aa10 	vmov	s12, sl
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3f6a:	edd6 6a04 	vldr	s13, [r6, #16]
    3f6e:	f10a 0a01 	add.w	sl, sl, #1
    3f72:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    3f76:	ed55 7a01 	vldr	s15, [r5, #-4]
    3f7a:	ee66 6a8a 	vmul.f32	s13, s13, s20
    3f7e:	ee07 aa10 	vmov	s14, sl
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    3f82:	eeb0 8a40 	vmov.f32	s16, s0
					float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    3f86:	eeb0 0a49 	vmov.f32	s0, s18
    3f8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3f8e:	eea6 0a26 	vfma.f32	s0, s12, s13
    3f92:	ee67 7a27 	vmul.f32	s15, s14, s15
    3f96:	ee27 0a80 	vmul.f32	s0, s15, s0
					if (tempFreq < 18000.0f)
    3f9a:	eeb4 0ae9 	vcmpe.f32	s0, s19
    3f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3fa2:	d5d6      	bpl.n	3f52 <audioFrame+0x432>
						tCycle_setFreq(&additive[i][j], tempFreq);
    3fa4:	4620      	mov	r0, r4
    3fa6:	f004 ff0b 	bl	8dc0 <__tCycle_setFreq_veneer>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    3faa:	4620      	mov	r0, r4
    3fac:	f004 fe2c 	bl	8c08 <__tCycle_tick_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    3fb0:	f1ba 0f0c 	cmp.w	sl, #12
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    3fb4:	eee0 8a08 	vfma.f32	s17, s0, s16
				for (int j = 0; j < NUM_OVERTONES; j++)
    3fb8:	f104 0404 	add.w	r4, r4, #4
    3fbc:	d1ce      	bne.n	3f5c <audioFrame+0x43c>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    3fbe:	f109 0948 	add.w	r9, r9, #72	; 0x48
    3fc2:	f1b8 0f00 	cmp.w	r8, #0
    3fc6:	d03f      	beq.n	4048 <_Min_Heap_Size+0x48>
			float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    3fc8:	ed9f 0a78 	vldr	s0, [pc, #480]	; 41ac <_Min_Heap_Size+0x1ac>
    3fcc:	eddf 7a78 	vldr	s15, [pc, #480]	; 41b0 <_Min_Heap_Size+0x1b0>
    3fd0:	eef0 0a40 	vmov.f32	s1, s0
    3fd4:	ed9f 1a77 	vldr	s2, [pc, #476]	; 41b4 <_Min_Heap_Size+0x1b4>
    3fd8:	f8dd a010 	ldr.w	sl, [sp, #16]
    3fdc:	eeeb 0aa7 	vfma.f32	s1, s23, s15
    3fe0:	f003 fa5e 	bl	74a0 <LEAF_clip>
			int volIdxInt = (int) volIdx;
    3fe4:	eefd 6ac0 	vcvt.s32.f32	s13, s0
			float outVol = volumeAmps128[volIdxInt] * omAlpha;
    3fe8:	4973      	ldr	r1, [pc, #460]	; (41b8 <_Min_Heap_Size+0x1b8>)
			float omAlpha = 1.0f - alpha;
    3fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    3fee:	eddf 7a73 	vldr	s15, [pc, #460]	; 41bc <_Min_Heap_Size+0x1bc>
			int volIdxInt = (int) volIdx;
    3ff2:	ee16 2a90 	vmov	r2, s13
			float alpha = volIdx-volIdxInt;
    3ff6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    3ffa:	ee68 7aa7 	vmul.f32	s15, s17, s15
			int volIdxIntPlus = (volIdxInt + 1) & 127;
    3ffe:	1c53      	adds	r3, r2, #1
			float omAlpha = 1.0f - alpha;
    4000:	ee37 7a40 	vsub.f32	s14, s14, s0
			float alpha = volIdx-volIdxInt;
    4004:	ee70 8a66 	vsub.f32	s17, s0, s13
			float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4008:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			int volIdxIntPlus = (volIdxInt + 1) & 127;
    400c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			float omAlpha = 1.0f - alpha;
    4010:	ee37 7a26 	vadd.f32	s14, s14, s13
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4014:	edd2 6a00 	vldr	s13, [r2]
    4018:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    401c:	9a03      	ldr	r2, [sp, #12]
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    401e:	ed93 0a00 	vldr	s0, [r3]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4022:	3208      	adds	r2, #8
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4024:	ee68 8a80 	vmul.f32	s17, s17, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4028:	9203      	str	r2, [sp, #12]
			outVol += volumeAmps128[volIdxIntPlus] * alpha;
    402a:	eee6 8a87 	vfma.f32	s17, s13, s14
			current_sample = (int32_t)(tempSamp * TWO_TO_23);
    402e:	ee67 8aa8 	vmul.f32	s17, s15, s17
    4032:	eefd 7ae8 	vcvt.s32.f32	s15, s17
    4036:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
    403a:	e942 3302 	strd	r3, r3, [r2, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    403e:	9b06      	ldr	r3, [sp, #24]
    4040:	4293      	cmp	r3, r2
    4042:	f47f af16 	bne.w	3e72 <audioFrame+0x352>
    4046:	e5a9      	b.n	3b9c <audioFrame+0x7c>
    4048:	f04f 0801 	mov.w	r8, #1
    404c:	e75d      	b.n	3f0a <audioFrame+0x3ea>
					lsDecay[i] = 0;
    404e:	2100      	movs	r1, #0
    4050:	4b5b      	ldr	r3, [pc, #364]	; (41c0 <_Min_Heap_Size+0x1c0>)
    4052:	f80b 1003 	strb.w	r1, [fp, r3]
    4056:	e615      	b.n	3c84 <audioFrame+0x164>
    4058:	9a02      	ldr	r2, [sp, #8]
				if (currentActivePreset < 60)
    405a:	463c      	mov	r4, r7
    405c:	f5a2 7513 	sub.w	r5, r2, #588	; 0x24c
    4060:	3254      	adds	r2, #84	; 0x54
						voiceSounding = 1;
    4062:	e9cd 2308 	strd	r2, r3, [sp, #32]
						if (useVelocity == 0) envVel = 1.f;
    4066:	edd5 7a00 	vldr	s15, [r5]
						tADSRT_on(&envs[v][i], envVel);
    406a:	4620      	mov	r0, r4
    406c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
					for (int v = 0; v < NUM_ENV; v++)
    4070:	35a8      	adds	r5, #168	; 0xa8
						if (useVelocity == 0) envVel = 1.f;
    4072:	eef5 7a40 	vcmp.f32	s15, #0.0
    4076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    407a:	bf0c      	ite	eq
    407c:	4620      	moveq	r0, r4
    407e:	eeb0 0a48 	vmovne.f32	s0, s16
    4082:	f004 fdd5 	bl	8c30 <__tADSRT_on_veneer>
						voiceSounding = 1;
    4086:	4b4f      	ldr	r3, [pc, #316]	; (41c4 <_Min_Heap_Size+0x1c4>)
    4088:	f04f 0201 	mov.w	r2, #1
					for (int v = 0; v < NUM_ENV; v++)
    408c:	3408      	adds	r4, #8
						voiceSounding = 1;
    408e:	701a      	strb	r2, [r3, #0]
					for (int v = 0; v < NUM_ENV; v++)
    4090:	9b08      	ldr	r3, [sp, #32]
    4092:	42ab      	cmp	r3, r5
    4094:	d1e7      	bne.n	4066 <_Min_Heap_Size+0x66>
    4096:	ebcb 758b 	rsb	r5, fp, fp, lsl #30
				if (currentActivePreset < 60)
    409a:	9c02      	ldr	r4, [sp, #8]
    409c:	9b09      	ldr	r3, [sp, #36]	; 0x24
						if (noteOnSync > 0.5f)
    409e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    40a2:	00ad      	lsls	r5, r5, #2
				if (currentActivePreset < 60)
    40a4:	9608      	str	r6, [sp, #32]
    40a6:	350c      	adds	r5, #12
    40a8:	462e      	mov	r6, r5
    40aa:	4625      	mov	r5, r4
    40ac:	461c      	mov	r4, r3
						if (noteOnSync > 0.5f)
    40ae:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    40b2:	4620      	mov	r0, r4
    40b4:	4659      	mov	r1, fp
					for (int v = 0; v < NUM_LFOS; v++)
    40b6:	3401      	adds	r4, #1
						if (noteOnSync > 0.5f)
    40b8:	eef4 7ae8 	vcmpe.f32	s15, s17
    40bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40c0:	dd03      	ble.n	40ca <_Min_Heap_Size+0xca>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    40c2:	ed95 0a00 	vldr	s0, [r5]
    40c6:	59ab      	ldr	r3, [r5, r6]
    40c8:	4798      	blx	r3
					for (int v = 0; v < NUM_LFOS; v++)
    40ca:	2c04      	cmp	r4, #4
    40cc:	f105 058c 	add.w	r5, r5, #140	; 0x8c
    40d0:	d1ed      	bne.n	40ae <_Min_Heap_Size+0xae>
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    40d2:	4a3d      	ldr	r2, [pc, #244]	; (41c8 <_Min_Heap_Size+0x1c8>)
    40d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    40d8:	483c      	ldr	r0, [pc, #240]	; (41cc <_Min_Heap_Size+0x1cc>)
    40da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    40de:	7813      	ldrb	r3, [r2, #0]
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    40e0:	9c03      	ldr	r4, [sp, #12]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    40e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    40e6:	3301      	adds	r3, #1
    40e8:	9e08      	ldr	r6, [sp, #32]
    40ea:	edd0 7a00 	vldr	s15, [r0]
    40ee:	7013      	strb	r3, [r2, #0]
    40f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
		for (int i = 0; i < numStringsThisBoard; i++)
    40f4:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    40f6:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    40f8:	781a      	ldrb	r2, [r3, #0]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    40fa:	ee67 7a87 	vmul.f32	s15, s15, s14
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    40fe:	ed84 8a00 	vstr	s16, [r4]
					sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4102:	edc4 7a02 	vstr	s15, [r4, #8]
					sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    4106:	e5bd      	b.n	3c84 <audioFrame+0x164>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
    4108:	eeb0 0a6f 	vmov.f32	s0, s31
    410c:	4640      	mov	r0, r8
    410e:	f004 fe2f 	bl	8d70 <__tLivingString2_setTargetLev_veneer>
					tLivingString2_setLevMode(&strings[i], 0);
    4112:	4640      	mov	r0, r8
    4114:	2100      	movs	r1, #0
    4116:	f004 fdd7 	bl	8cc8 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setDecay(&strings[i], 0.2f);
    411a:	eeb0 0a6d 	vmov.f32	s0, s27
    411e:	4640      	mov	r0, r8
    4120:	f004 feae 	bl	8e80 <__tLivingString2_setDecay_veneer>
					tADSRT_off(&fenvelopes[i]);
    4124:	4650      	mov	r0, sl
    4126:	f004 fd97 	bl	8c58 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    412a:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    412c:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    412e:	781a      	ldrb	r2, [r3, #0]
    4130:	e5a8      	b.n	3c84 <audioFrame+0x164>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
    4132:	4b27      	ldr	r3, [pc, #156]	; (41d0 <_Min_Heap_Size+0x1d0>)
    4134:	4827      	ldr	r0, [pc, #156]	; (41d4 <_Min_Heap_Size+0x1d4>)
    4136:	edd3 0a00 	vldr	s1, [r3]
    413a:	4408      	add	r0, r1
    413c:	f004 fde0 	bl	8d00 <__tSimpleLivingString3_pluck_veneer>
					lsDecay[i] = 1;
    4140:	4b1f      	ldr	r3, [pc, #124]	; (41c0 <_Min_Heap_Size+0x1c0>)
    4142:	2201      	movs	r2, #1
    4144:	f80b 2003 	strb.w	r2, [fp, r3]
		for (int i = 0; i < numStringsThisBoard; i++)
    4148:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    414a:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    414c:	781a      	ldrb	r2, [r3, #0]
    414e:	e599      	b.n	3c84 <audioFrame+0x164>
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	461d      	mov	r5, r3
    4154:	f103 0430 	add.w	r4, r3, #48	; 0x30
						tADSRT_off(&additiveEnv[i][j]);
    4158:	4628      	mov	r0, r5
					for (int j = 0; j < NUM_OVERTONES; j++)
    415a:	3504      	adds	r5, #4
						tADSRT_off(&additiveEnv[i][j]);
    415c:	f004 fd7c 	bl	8c58 <__tADSRT_off_veneer>
					for (int j = 0; j < NUM_OVERTONES; j++)
    4160:	42a5      	cmp	r5, r4
    4162:	d1f9      	bne.n	4158 <_Min_Heap_Size+0x158>
    4164:	e7de      	b.n	4124 <_Min_Heap_Size+0x124>
    4166:	bf00      	nop
    4168:	30000040 	.word	0x30000040
    416c:	20005224 	.word	0x20005224
    4170:	43000000 	.word	0x43000000
    4174:	3b449ba6 	.word	0x3b449ba6
    4178:	468ca000 	.word	0x468ca000
    417c:	20014860 	.word	0x20014860
    4180:	200146d0 	.word	0x200146d0
    4184:	20005568 	.word	0x20005568
    4188:	20005578 	.word	0x20005578
    418c:	2000557c 	.word	0x2000557c
    4190:	00000000 	.word	0x00000000
    4194:	20014800 	.word	0x20014800
    4198:	2001491c 	.word	0x2001491c
    419c:	20014868 	.word	0x20014868
    41a0:	20000974 	.word	0x20000974
    41a4:	20005094 	.word	0x20005094
    41a8:	200008e4 	.word	0x200008e4
    41ac:	423c0000 	.word	0x423c0000
    41b0:	42a00000 	.word	0x42a00000
    41b4:	42fe0000 	.word	0x42fe0000
    41b8:	200004d4 	.word	0x200004d4
    41bc:	4a4ccccd 	.word	0x4a4ccccd
    41c0:	20005408 	.word	0x20005408
    41c4:	20014910 	.word	0x20014910
    41c8:	20005b80 	.word	0x20005b80
    41cc:	2001aac0 	.word	0x2001aac0
    41d0:	20000148 	.word	0x20000148
    41d4:	200053f0 	.word	0x200053f0
    41d8:	2000000d 	.word	0x2000000d
    41dc:	20005298 	.word	0x20005298
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    41e0:	4d96      	ldr	r5, [pc, #600]	; (443c <_Min_Heap_Size+0x43c>)
					tADSRT_on(&fenvelopes[i], amplitz);
    41e2:	4650      	mov	r0, sl
    41e4:	9308      	str	r3, [sp, #32]
    41e6:	f004 fd23 	bl	8c30 <__tADSRT_on_veneer>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    41ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    41ee:	ed95 7a00 	vldr	s14, [r5]
    41f2:	4640      	mov	r0, r8
					float pluckAmp = amplitz * 2.0f; //was 4
    41f4:	ee38 8a08 	vadd.f32	s16, s16, s16
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    41f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    41fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4200:	bfcc      	ite	gt
    4202:	2101      	movgt	r1, #1
    4204:	2100      	movle	r1, #0
    4206:	f004 fd5f 	bl	8cc8 <__tLivingString2_setLevMode_veneer>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
    420a:	ed95 0a01 	vldr	s0, [r5, #4]
    420e:	4640      	mov	r0, r8
    4210:	f004 fdae 	bl	8d70 <__tLivingString2_setTargetLev_veneer>
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4214:	f8d8 1000 	ldr.w	r1, [r8]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    4218:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
    421c:	ed95 7a02 	vldr	s14, [r5, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4220:	edd1 6a02 	vldr	s13, [r1, #8]
					if (beforeLength > 0)
    4224:	9b08      	ldr	r3, [sp, #32]
					int delayLength = (int)strings[i]->waveLengthInSamples;
    4226:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    422a:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
    422e:	ee16 2a90 	vmov	r2, s13
					int beforeLength = (delayLength * knobScaled[2]);
    4232:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    4236:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    423a:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
    423e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
    4242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
    4246:	ee17 ca10 	vmov	ip, s14
					if (beforeLength > 0)
    424a:	f1bc 0f00 	cmp.w	ip, #0
    424e:	f340 8254 	ble.w	46fa <_Min_Heap_Size+0x6fa>
						beforePickIncrement = pluckAmp / beforeLength;
    4252:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    4256:	eec8 6a07 	vdiv.f32	s13, s16, s14
					if (afterLength > 0)
    425a:	ee17 0a90 	vmov	r0, s15
    425e:	2800      	cmp	r0, #0
    4260:	dd03      	ble.n	426a <_Min_Heap_Size+0x26a>
						afterPickIncrement = pluckAmp / afterLength;
    4262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4266:	ee88 8a27 	vdiv.f32	s16, s16, s15
					for (int j = 0; j < delayLength; j++)
    426a:	2a00      	cmp	r2, #0
    426c:	dd37      	ble.n	42de <_Min_Heap_Size+0x2de>
					float value = 0.0f;
    426e:	eddf 7a74 	vldr	s15, [pc, #464]	; 4440 <_Min_Heap_Size+0x440>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    4272:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4276:	e01e      	b.n	42b6 <_Min_Heap_Size+0x2b6>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    4278:	6acc      	ldr	r4, [r1, #44]	; 0x2c
							value += beforePickIncrement;
    427a:	ee77 7aa6 	vadd.f32	s15, s15, s13
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    427e:	69a1      	ldr	r1, [r4, #24]
    4280:	68a0      	ldr	r0, [r4, #8]
    4282:	ee27 6a87 	vmul.f32	s12, s15, s14
    4286:	4419      	add	r1, r3
    4288:	4001      	ands	r1, r0
    428a:	6860      	ldr	r0, [r4, #4]
    428c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4290:	ed81 6a00 	vstr	s12, [r1]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
    4294:	f8d8 1000 	ldr.w	r1, [r8]
    4298:	6b8c      	ldr	r4, [r1, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    429a:	69a1      	ldr	r1, [r4, #24]
    429c:	68a0      	ldr	r0, [r4, #8]
    429e:	4419      	add	r1, r3
					for (int j = 0; j < delayLength; j++)
    42a0:	3301      	adds	r3, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42a2:	4001      	ands	r1, r0
    42a4:	6860      	ldr	r0, [r4, #4]
					for (int j = 0; j < delayLength; j++)
    42a6:	429a      	cmp	r2, r3
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    42ac:	ed81 6a00 	vstr	s12, [r1]
					for (int j = 0; j < delayLength; j++)
    42b0:	d015      	beq.n	42de <_Min_Heap_Size+0x2de>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    42b2:	f8d8 1000 	ldr.w	r1, [r8]
						if (j < beforeLength)
    42b6:	459c      	cmp	ip, r3
    42b8:	dcde      	bgt.n	4278 <_Min_Heap_Size+0x278>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    42ba:	6b0c      	ldr	r4, [r1, #48]	; 0x30
							value -= afterPickIncrement;
    42bc:	ee77 7ac8 	vsub.f32	s15, s15, s16
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    42c0:	69a1      	ldr	r1, [r4, #24]
    42c2:	68a0      	ldr	r0, [r4, #8]
    42c4:	ee27 6a87 	vmul.f32	s12, s15, s14
    42c8:	4419      	add	r1, r3
    42ca:	4001      	ands	r1, r0
    42cc:	6860      	ldr	r0, [r4, #4]
    42ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    42d2:	ed81 6a00 	vstr	s12, [r1]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    42d6:	f8d8 1000 	ldr.w	r1, [r8]
    42da:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    42dc:	e7dd      	b.n	429a <_Min_Heap_Size+0x29a>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    42de:	ed95 0a03 	vldr	s0, [r5, #12]
    42e2:	4640      	mov	r0, r8
    42e4:	eddf 7a57 	vldr	s15, [pc, #348]	; 4444 <_Min_Heap_Size+0x444>
    42e8:	ee20 0a27 	vmul.f32	s0, s0, s15
    42ec:	f004 fdc8 	bl	8e80 <__tLivingString2_setDecay_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    42f0:	9b07      	ldr	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
    42f2:	6831      	ldr	r1, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    42f4:	781a      	ldrb	r2, [r3, #0]
    42f6:	e4c5      	b.n	3c84 <audioFrame+0x164>
					tADSRT_on(&fenvelopes[i], amplitz);
    42f8:	4650      	mov	r0, sl
    42fa:	9108      	str	r1, [sp, #32]
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    42fc:	4d52      	ldr	r5, [pc, #328]	; (4448 <_Min_Heap_Size+0x448>)
					tADSRT_on(&fenvelopes[i], amplitz);
    42fe:	f004 fc97 	bl	8c30 <__tADSRT_on_veneer>
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4302:	9908      	ldr	r1, [sp, #32]
					float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    4304:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4308:	edd4 7a00 	vldr	s15, [r4]
    430c:	440d      	add	r5, r1
    430e:	ed95 0a00 	vldr	s0, [r5]
					float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    4312:	4d4a      	ldr	r5, [pc, #296]	; (443c <_Min_Heap_Size+0x43c>)
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4314:	ee30 0a27 	vadd.f32	s0, s0, s15
    4318:	f004 fcae 	bl	8c78 <__mtof_veneer>
					float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    431c:	eef0 7a0c 	vmov.f32	s15, #12	; 0x40600000  3.5
    4320:	ed95 7a02 	vldr	s14, [r5, #8]
					int thisString = i + firstString;
    4324:	4b49      	ldr	r3, [pc, #292]	; (444c <_Min_Heap_Size+0x44c>)
					float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    4326:	eea7 9a27 	vfma.f32	s18, s14, s15
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    432a:	9908      	ldr	r1, [sp, #32]
					int thisString = i + firstString;
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	eb03 020b 	add.w	r2, r3, fp
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4332:	4b47      	ldr	r3, [pc, #284]	; (4450 <_Min_Heap_Size+0x450>)
						stringFade = (float)thisString * 0.2f;
    4334:	ee07 2a90 	vmov	s15, r2
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4338:	440b      	add	r3, r1
					if (thisString < 6)
    433a:	2a05      	cmp	r2, #5
					float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    433c:	ee20 9a09 	vmul.f32	s18, s0, s18
						stringFade = (float)thisString * 0.2f;
    4340:	eef8 aae7 	vcvt.f32.s32	s21, s15
					int thisString = i + firstString;
    4344:	920a      	str	r2, [sp, #40]	; 0x28
					stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    4346:	ed83 0a00 	vstr	s0, [r3]
					if (thisString < 6)
    434a:	f300 81b6 	bgt.w	46ba <_Min_Heap_Size+0x6ba>
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    434e:	4c41      	ldr	r4, [pc, #260]	; (4454 <_Min_Heap_Size+0x454>)
    4350:	eeb0 1a4b 	vmov.f32	s2, s22
    4354:	eeb0 0a6f 	vmov.f32	s0, s31
    4358:	ed94 7a06 	vldr	s14, [r4, #24]
						stringFade = (float)thisString * 0.2f;
    435c:	ee6a aaad 	vmul.f32	s21, s21, s27
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4360:	edd4 7a08 	vldr	s15, [r4, #32]
    4364:	ee79 6a47 	vsub.f32	s13, s18, s14
    4368:	ee77 7ac7 	vsub.f32	s15, s15, s14
    436c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    4370:	ee70 0aa0 	vadd.f32	s1, s1, s1
    4374:	f003 f894 	bl	74a0 <LEAF_clip>
    4378:	eef0 ca40 	vmov.f32	s25, s0
						height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    437c:	ed94 7a03 	vldr	s14, [r4, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4380:	edd4 7a05 	vldr	s15, [r4, #20]
    4384:	ee79 6a47 	vsub.f32	s13, s18, s14
    4388:	ee77 7ac7 	vsub.f32	s15, s15, s14
						height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    438c:	eeb0 1a4b 	vmov.f32	s2, s22
    4390:	eeb0 0a6f 	vmov.f32	s0, s31
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    4394:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    4398:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    439c:	ee39 faea 	vsub.f32	s30, s19, s21
						height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    43a0:	ee70 0aa0 	vadd.f32	s1, s1, s1
    43a4:	f003 f87c 	bl	74a0 <LEAF_clip>
					int height2Int = floor(height2);
    43a8:	eeb7 7aec 	vcvt.f64.f32	d7, s25
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    43ac:	ee39 5aec 	vsub.f32	s10, s19, s25
    43b0:	4929      	ldr	r1, [pc, #164]	; (4458 <_Min_Heap_Size+0x458>)
					int height1Int = floor(height1);
    43b2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    43b6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
					int height2Int = floor(height2);
    43ba:	febb 7b47 	vrintm.f64	d7, d7
    43be:	eebd 7bc7 	vcvt.s32.f64	s14, d7
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    43c2:	ee79 5ac0 	vsub.f32	s11, s19, s0
    43c6:	970f      	str	r7, [sp, #60]	; 0x3c
					int height1Int = floor(height1);
    43c8:	febb 6b46 	vrintm.f64	d6, d6
    43cc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
					float height2Float = height2 - height2Int;
    43d0:	eef8 eac7 	vcvt.f32.s32	s29, s14
    43d4:	ee17 3a10 	vmov	r3, s14
    43d8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
						height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    43dc:	eeb0 ca40 	vmov.f32	s24, s0
					int height1Int = floor(height1);
    43e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    43e4:	9612      	str	r6, [sp, #72]	; 0x48
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    43e6:	ee75 7a2e 	vadd.f32	s15, s10, s29
    43ea:	4f1c      	ldr	r7, [pc, #112]	; (445c <_Min_Heap_Size+0x45c>)
    43ec:	011b      	lsls	r3, r3, #4
					float height2Float = height2 - height2Int;
    43ee:	ee7c eaee 	vsub.f32	s29, s25, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    43f2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
					int height1Int = floor(height1);
    43f6:	eefd 7bc6 	vcvt.s32.f64	s15, d6
    43fa:	f103 0090 	add.w	r0, r3, #144	; 0x90
    43fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    4402:	ee17 2a90 	vmov	r2, s15
					float height1Float = height1 - height1Int;
    4406:	18cb      	adds	r3, r1, r3
    4408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    440c:	1808      	adds	r0, r1, r0
    440e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4412:	9308      	str	r3, [sp, #32]
    4414:	4680      	mov	r8, r0
    4416:	eb01 1302 	add.w	r3, r1, r2, lsl #4
    441a:	ee30 7a67 	vsub.f32	s14, s0, s15
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    441e:	ee75 7aa7 	vadd.f32	s15, s11, s15
    4422:	4a0f      	ldr	r2, [pc, #60]	; (4460 <_Min_Heap_Size+0x460>)
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    4424:	9901      	ldr	r1, [sp, #4]
    4426:	9309      	str	r3, [sp, #36]	; 0x24
    4428:	33c0      	adds	r3, #192	; 0xc0
    442a:	468b      	mov	fp, r1
    442c:	4616      	mov	r6, r2
    442e:	469a      	mov	sl, r3
					float height1Float = height1 - height1Int;
    4430:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4434:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
    4438:	e0a5      	b.n	4586 <_Min_Heap_Size+0x586>
    443a:	bf00      	nop
    443c:	20005224 	.word	0x20005224
    4440:	00000000 	.word	0x00000000
    4444:	43fa0000 	.word	0x43fa0000
    4448:	20014860 	.word	0x20014860
    444c:	200050d4 	.word	0x200050d4
    4450:	20014800 	.word	0x20014800
    4454:	20000300 	.word	0x20000300
    4458:	20000324 	.word	0x20000324
    445c:	20000ba4 	.word	0x20000ba4
    4460:	20000cc4 	.word	0x20000cc4
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4464:	9b08      	ldr	r3, [sp, #32]
							if (height2 < 1.0f)
    4466:	eef4 cae9 	vcmpe.f32	s25, s19
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    446a:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    446e:	edd3 8a00 	vldr	s17, [r3]
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4472:	edda 7a00 	vldr	s15, [sl]
							if (height2 < 1.0f)
    4476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    447a:	ee6e 8aa8 	vmul.f32	s17, s29, s17
    447e:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4482:	ee67 7a27 	vmul.f32	s15, s14, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4486:	ed98 7a24 	vldr	s14, [r8, #144]	; 0x90
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    448c:	eee7 8a26 	vfma.f32	s17, s14, s13
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    4490:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
    4494:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
    4498:	eee7 7a26 	vfma.f32	s15, s14, s13
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    449c:	ee68 8a8f 	vmul.f32	s17, s17, s30
    44a0:	eeea 8aa7 	vfma.f32	s17, s21, s15
							if (height2 < 1.0f)
    44a4:	f100 80cb 	bmi.w	463e <_Min_Heap_Size+0x63e>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    44a8:	eef0 0a49 	vmov.f32	s1, s18
    44ac:	ed94 1a08 	vldr	s2, [r4, #32]
    44b0:	ed94 0a07 	vldr	s0, [r4, #28]
    44b4:	ed97 aa3c 	vldr	s20, [r7, #240]	; 0xf0
    44b8:	f002 fff2 	bl	74a0 <LEAF_clip>
    44bc:	edd6 7a3c 	vldr	s15, [r6, #240]	; 0xf0
    44c0:	eeea 7a00 	vfma.f32	s15, s20, s0
    44c4:	ee89 aaa7 	vdiv.f32	s20, s19, s15
							if (height1 < 1.0f)
    44c8:	eeb4 cae9 	vcmpe.f32	s24, s19
    44cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44d0:	f100 80a0 	bmi.w	4614 <_Min_Heap_Size+0x614>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    44d4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
    44d8:	eef0 0a49 	vmov.f32	s1, s18
    44dc:	ed94 1a05 	vldr	s2, [r4, #20]
    44e0:	ed94 0a04 	vldr	s0, [r4, #16]
    44e4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
    44e8:	f002 ffda 	bl	74a0 <LEAF_clip>
    44ec:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
    44f0:	edd6 7a24 	vldr	s15, [r6, #144]	; 0x90
    44f4:	eee7 7a00 	vfma.f32	s15, s14, s0
    44f8:	ee89 7aa7 	vdiv.f32	s14, s19, s15
					for (int j = 0; j < NUM_OVERTONES; j++)
    44fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    44fe:	4658      	mov	r0, fp
    4500:	4a7f      	ldr	r2, [pc, #508]	; (4700 <_Min_Heap_Size+0x700>)
					for (int j = 0; j < NUM_OVERTONES; j++)
    4502:	3704      	adds	r7, #4
    4504:	3304      	adds	r3, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    4506:	497f      	ldr	r1, [pc, #508]	; (4704 <_Min_Heap_Size+0x704>)
    4508:	ed95 0a05 	vldr	s0, [r5, #20]
					for (int j = 0; j < NUM_OVERTONES; j++)
    450c:	3604      	adds	r6, #4
    450e:	9309      	str	r3, [sp, #36]	; 0x24
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    4510:	ee6a 7a0f 	vmul.f32	s15, s20, s30
					for (int j = 0; j < NUM_OVERTONES; j++)
    4514:	9b08      	ldr	r3, [sp, #32]
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    4516:	ee20 0a2b 	vmul.f32	s0, s0, s23
					for (int j = 0; j < NUM_OVERTONES; j++)
    451a:	f10a 0a04 	add.w	sl, sl, #4
    451e:	f108 0804 	add.w	r8, r8, #4
    4522:	3304      	adds	r3, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    4524:	eee7 7a2a 	vfma.f32	s15, s14, s21
					for (int j = 0; j < NUM_OVERTONES; j++)
    4528:	9308      	str	r3, [sp, #32]
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    452a:	7813      	ldrb	r3, [r2, #0]
    452c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4530:	ed93 7a00 	vldr	s14, [r3]
    4534:	ee20 0a07 	vmul.f32	s0, s0, s14
    4538:	ed95 7a03 	vldr	s14, [r5, #12]
    453c:	ee27 7a0e 	vmul.f32	s14, s14, s28
    4540:	eea7 0a87 	vfma.f32	s0, s15, s14
    4544:	f004 fbd4 	bl	8cf0 <__tADSRT_setDecay_veneer>
						currentRandom++;
    4548:	4a6d      	ldr	r2, [pc, #436]	; (4700 <_Min_Heap_Size+0x700>)
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    454a:	496e      	ldr	r1, [pc, #440]	; (4704 <_Min_Heap_Size+0x704>)
    454c:	4658      	mov	r0, fp
						currentRandom++;
    454e:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    4550:	f10b 0b04 	add.w	fp, fp, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    4554:	edd5 7a06 	vldr	s15, [r5, #24]
						currentRandom++;
    4558:	3301      	adds	r3, #1
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    455a:	ee67 7aab 	vmul.f32	s15, s15, s23
						currentRandom++;
    455e:	b2db      	uxtb	r3, r3
    4560:	7013      	strb	r3, [r2, #0]
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    4562:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4566:	ed93 7a00 	vldr	s14, [r3]
    456a:	eee7 8a27 	vfma.f32	s17, s14, s15
    456e:	ee28 0a88 	vmul.f32	s0, s17, s16
    4572:	f004 fb5d 	bl	8c30 <__tADSRT_on_veneer>
						currentRandom++;
    4576:	4a62      	ldr	r2, [pc, #392]	; (4700 <_Min_Heap_Size+0x700>)
    4578:	7813      	ldrb	r3, [r2, #0]
    457a:	3301      	adds	r3, #1
    457c:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
    457e:	4b62      	ldr	r3, [pc, #392]	; (4708 <_Min_Heap_Size+0x708>)
    4580:	42bb      	cmp	r3, r7
    4582:	f000 8093 	beq.w	46ac <_Min_Heap_Size+0x6ac>
						if (thisString < 6)
    4586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4588:	2b05      	cmp	r3, #5
    458a:	f77f af6b 	ble.w	4464 <_Min_Heap_Size+0x464>
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    458e:	9b08      	ldr	r3, [sp, #32]
							if (height2 < 1.0f)
    4590:	eef4 cae9 	vcmpe.f32	s25, s19
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    4594:	edd8 8a00 	vldr	s17, [r8]
    4598:	edd3 7a00 	vldr	s15, [r3]
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
							if (height2 < 1.0f)
    459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    45a2:	eee7 8aae 	vfma.f32	s17, s15, s29
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    45a6:	ed9a 7a00 	vldr	s14, [sl]
    45aa:	edd3 7a00 	vldr	s15, [r3]
    45ae:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
    45b2:	eee7 7a26 	vfma.f32	s15, s14, s13
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    45b6:	ee68 8a8f 	vmul.f32	s17, s17, s30
    45ba:	eeea 8aa7 	vfma.f32	s17, s21, s15
							if (height2 < 1.0f)
    45be:	d464      	bmi.n	468a <_Min_Heap_Size+0x68a>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    45c0:	eef0 0a49 	vmov.f32	s1, s18
    45c4:	ed94 1a05 	vldr	s2, [r4, #20]
    45c8:	ed94 0a04 	vldr	s0, [r4, #16]
    45cc:	ed97 aa24 	vldr	s20, [r7, #144]	; 0x90
    45d0:	f002 ff66 	bl	74a0 <LEAF_clip>
    45d4:	edd6 7a24 	vldr	s15, [r6, #144]	; 0x90
    45d8:	eeea 7a00 	vfma.f32	s15, s20, s0
    45dc:	ee89 aaa7 	vdiv.f32	s20, s19, s15
							if (height1 < 1.0f)
    45e0:	eeb4 cae9 	vcmpe.f32	s24, s19
    45e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45e8:	d43a      	bmi.n	4660 <_Min_Heap_Size+0x660>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    45ea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
    45ee:	eef0 0a49 	vmov.f32	s1, s18
    45f2:	ed94 1a02 	vldr	s2, [r4, #8]
    45f6:	ed94 0a01 	vldr	s0, [r4, #4]
    45fa:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
    45fe:	f002 ff4f 	bl	74a0 <LEAF_clip>
    4602:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
    4606:	edd6 7a0c 	vldr	s15, [r6, #48]	; 0x30
    460a:	eee7 7a00 	vfma.f32	s15, s14, s0
    460e:	ee89 7aa7 	vdiv.f32	s14, s19, s15
    4612:	e773      	b.n	44fc <_Min_Heap_Size+0x4fc>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    4614:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
    4618:	eef0 0a49 	vmov.f32	s1, s18
    461c:	ed94 1a04 	vldr	s2, [r4, #16]
    4620:	ed94 0a03 	vldr	s0, [r4, #12]
    4624:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
    4628:	f002 ff3a 	bl	74a0 <LEAF_clip>
    462c:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
    4630:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    4634:	eee7 7a00 	vfma.f32	s15, s14, s0
    4638:	ee89 7aa7 	vdiv.f32	s14, s19, s15
    463c:	e75e      	b.n	44fc <_Min_Heap_Size+0x4fc>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    463e:	eef0 0a49 	vmov.f32	s1, s18
    4642:	ed94 1a07 	vldr	s2, [r4, #28]
    4646:	ed94 0a06 	vldr	s0, [r4, #24]
    464a:	ed97 aa30 	vldr	s20, [r7, #192]	; 0xc0
    464e:	f002 ff27 	bl	74a0 <LEAF_clip>
    4652:	edd6 7a30 	vldr	s15, [r6, #192]	; 0xc0
    4656:	eeea 7a00 	vfma.f32	s15, s20, s0
    465a:	ee89 aaa7 	vdiv.f32	s20, s19, s15
    465e:	e733      	b.n	44c8 <_Min_Heap_Size+0x4c8>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    4660:	ed97 7a00 	vldr	s14, [r7]
    4664:	eef0 0a49 	vmov.f32	s1, s18
    4668:	ed94 1a01 	vldr	s2, [r4, #4]
    466c:	ed94 0a00 	vldr	s0, [r4]
    4670:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
    4674:	f002 ff14 	bl	74a0 <LEAF_clip>
    4678:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
    467c:	edd6 7a00 	vldr	s15, [r6]
    4680:	eee7 7a00 	vfma.f32	s15, s14, s0
    4684:	ee89 7aa7 	vdiv.f32	s14, s19, s15
    4688:	e738      	b.n	44fc <_Min_Heap_Size+0x4fc>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    468a:	eef0 0a49 	vmov.f32	s1, s18
    468e:	ed94 1a04 	vldr	s2, [r4, #16]
    4692:	ed94 0a03 	vldr	s0, [r4, #12]
    4696:	ed97 aa18 	vldr	s20, [r7, #96]	; 0x60
    469a:	f002 ff01 	bl	74a0 <LEAF_clip>
    469e:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    46a2:	eeea 7a00 	vfma.f32	s15, s20, s0
    46a6:	ee89 aaa7 	vdiv.f32	s20, s19, s15
    46aa:	e799      	b.n	45e0 <_Min_Heap_Size+0x5e0>
			previousStringInputs[i] = stringInputs[i];
    46ac:	e9dd b70e 	ldrd	fp, r7, [sp, #56]	; 0x38
    46b0:	e9dd a810 	ldrd	sl, r8, [sp, #64]	; 0x40
    46b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
    46b6:	f7ff bb84 	b.w	3dc2 <audioFrame+0x2a2>
						stringFade = (float)(thisString - 6.0f) * 0.2f;
    46ba:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    46be:	4c13      	ldr	r4, [pc, #76]	; (470c <_Min_Heap_Size+0x70c>)
    46c0:	eeb0 1a4b 	vmov.f32	s2, s22
    46c4:	ed94 7a03 	vldr	s14, [r4, #12]
    46c8:	eeb0 0a6f 	vmov.f32	s0, s31
						stringFade = (float)(thisString - 6.0f) * 0.2f;
    46cc:	ee7a aae7 	vsub.f32	s21, s21, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    46d0:	edd4 7a05 	vldr	s15, [r4, #20]
    46d4:	ee79 6a47 	vsub.f32	s13, s18, s14
    46d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
						stringFade = (float)(thisString - 6.0f) * 0.2f;
    46dc:	ee6a aaad 	vmul.f32	s21, s21, s27
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    46e0:	eec6 0aa7 	vdiv.f32	s1, s13, s15
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    46e4:	ee70 0aa0 	vadd.f32	s1, s1, s1
    46e8:	f002 feda 	bl	74a0 <LEAF_clip>
						height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    46ec:	ed94 7a00 	vldr	s14, [r4]
						height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    46f0:	eef0 ca40 	vmov.f32	s25, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    46f4:	edd4 7a02 	vldr	s15, [r4, #8]
    46f8:	e644      	b.n	4384 <_Min_Heap_Size+0x384>
						beforePickIncrement = pluckAmp;
    46fa:	eef0 6a48 	vmov.f32	s13, s16
    46fe:	e5ac      	b.n	425a <_Min_Heap_Size+0x25a>
    4700:	20014b26 	.word	0x20014b26
    4704:	20005780 	.word	0x20005780
    4708:	20000bd4 	.word	0x20000bd4
    470c:	20000300 	.word	0x20000300
    4710:	f3af 8000 	nop.w
    4714:	f3af 8000 	nop.w
    4718:	f3af 8000 	nop.w
    471c:	f3af 8000 	nop.w

00004720 <HAL_SPI_RxCpltCallback>:



void __ATTR_ITCMRAM HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
    4720:	2201      	movs	r2, #1
    4722:	4b76      	ldr	r3, [pc, #472]	; (48fc <HAL_SPI_RxCpltCallback+0x1dc>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    4724:	2102      	movs	r1, #2
    4726:	4876      	ldr	r0, [pc, #472]	; (4900 <HAL_SPI_RxCpltCallback+0x1e0>)
{
    4728:	b510      	push	{r4, lr}
	interrupted = 1;
    472a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    472c:	f004 fb60 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4730:	4b74      	ldr	r3, [pc, #464]	; (4904 <HAL_SPI_RxCpltCallback+0x1e4>)
    4732:	f023 011f 	bic.w	r1, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4736:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    473a:	4a73      	ldr	r2, [pc, #460]	; (4908 <HAL_SPI_RxCpltCallback+0x1e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    473c:	f101 0420 	add.w	r4, r1, #32
    4740:	f101 0040 	add.w	r0, r1, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4744:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4748:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    474c:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4750:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4754:	f3bf 8f6f 	isb	sy
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    4758:	7e9a      	ldrb	r2, [r3, #26]
    475a:	2afe      	cmp	r2, #254	; 0xfe
    475c:	d009      	beq.n	4772 <HAL_SPI_RxCpltCallback+0x52>
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
		}
	}
	newPluck = 1;
    475e:	2401      	movs	r4, #1
    4760:	4b6a      	ldr	r3, [pc, #424]	; (490c <HAL_SPI_RxCpltCallback+0x1ec>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4762:	2200      	movs	r2, #0
    4764:	2102      	movs	r1, #2
	newPluck = 1;
    4766:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4768:	4865      	ldr	r0, [pc, #404]	; (4900 <HAL_SPI_RxCpltCallback+0x1e0>)
}
    476a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    476e:	f004 bb3f 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
    4772:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    4776:	2afd      	cmp	r2, #253	; 0xfd
    4778:	d1f1      	bne.n	475e <HAL_SPI_RxCpltCallback+0x3e>
		for (int i = 0; i < numStringsThisBoard; i++)
    477a:	4a65      	ldr	r2, [pc, #404]	; (4910 <HAL_SPI_RxCpltCallback+0x1f0>)
    477c:	7811      	ldrb	r1, [r2, #0]
    477e:	2900      	cmp	r1, #0
    4780:	d0ed      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4782:	4a64      	ldr	r2, [pc, #400]	; (4914 <HAL_SPI_RxCpltCallback+0x1f4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    4784:	2901      	cmp	r1, #1
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4786:	6814      	ldr	r4, [r2, #0]
    4788:	6810      	ldr	r0, [r2, #0]
    478a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    478e:	f100 000e 	add.w	r0, r0, #14
    4792:	f894 c01b 	ldrb.w	ip, [r4, #27]
    4796:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
    479a:	485f      	ldr	r0, [pc, #380]	; (4918 <HAL_SPI_RxCpltCallback+0x1f8>)
    479c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    47a0:	6004      	str	r4, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    47a2:	d0dc      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47a4:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    47a6:	2902      	cmp	r1, #2
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47a8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47ac:	f894 c01d 	ldrb.w	ip, [r4, #29]
    47b0:	6814      	ldr	r4, [r2, #0]
    47b2:	f104 040f 	add.w	r4, r4, #15
    47b6:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    47ba:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    47be:	6044      	str	r4, [r0, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    47c0:	d0cd      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47c2:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    47c4:	2903      	cmp	r1, #3
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47ca:	f894 c01f 	ldrb.w	ip, [r4, #31]
    47ce:	6814      	ldr	r4, [r2, #0]
    47d0:	f104 0410 	add.w	r4, r4, #16
    47d4:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    47d8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    47dc:	6084      	str	r4, [r0, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    47de:	d0be      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47e0:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    47e2:	2904      	cmp	r1, #4
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    47e8:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
    47ec:	6814      	ldr	r4, [r2, #0]
    47ee:	f104 0411 	add.w	r4, r4, #17
    47f2:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    47f6:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    47fa:	60c4      	str	r4, [r0, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
    47fc:	d0af      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    47fe:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4800:	2905      	cmp	r1, #5
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4802:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4806:	f894 c023 	ldrb.w	ip, [r4, #35]	; 0x23
    480a:	6814      	ldr	r4, [r2, #0]
    480c:	f104 0412 	add.w	r4, r4, #18
    4810:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    4814:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4818:	6104      	str	r4, [r0, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    481a:	d0a0      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    481c:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    481e:	2906      	cmp	r1, #6
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4820:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4824:	f894 c025 	ldrb.w	ip, [r4, #37]	; 0x25
    4828:	6814      	ldr	r4, [r2, #0]
    482a:	f104 0413 	add.w	r4, r4, #19
    482e:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    4832:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4836:	6144      	str	r4, [r0, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
    4838:	d091      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    483a:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    483c:	2907      	cmp	r1, #7
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    483e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4842:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
    4846:	6814      	ldr	r4, [r2, #0]
    4848:	f104 0414 	add.w	r4, r4, #20
    484c:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    4850:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4854:	6184      	str	r4, [r0, #24]
		for (int i = 0; i < numStringsThisBoard; i++)
    4856:	d082      	beq.n	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4858:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    485a:	2908      	cmp	r1, #8
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    485c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4860:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
    4864:	6814      	ldr	r4, [r2, #0]
    4866:	f104 0415 	add.w	r4, r4, #21
    486a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    486e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4872:	61c4      	str	r4, [r0, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
    4874:	f43f af73 	beq.w	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4878:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    487a:	2909      	cmp	r1, #9
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    487c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4880:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
    4884:	6814      	ldr	r4, [r2, #0]
    4886:	f104 0416 	add.w	r4, r4, #22
    488a:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    488e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4892:	6204      	str	r4, [r0, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    4894:	f43f af63 	beq.w	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    4898:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    489a:	290a      	cmp	r1, #10
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    489c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48a0:	f894 c02d 	ldrb.w	ip, [r4, #45]	; 0x2d
    48a4:	6814      	ldr	r4, [r2, #0]
    48a6:	f104 0417 	add.w	r4, r4, #23
    48aa:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    48ae:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    48b2:	6244      	str	r4, [r0, #36]	; 0x24
		for (int i = 0; i < numStringsThisBoard; i++)
    48b4:	f43f af53 	beq.w	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48b8:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48ba:	290b      	cmp	r1, #11
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48bc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48c0:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
    48c4:	6814      	ldr	r4, [r2, #0]
    48c6:	f104 0418 	add.w	r4, r4, #24
    48ca:	f813 4014 	ldrb.w	r4, [r3, r4, lsl #1]
    48ce:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    48d2:	6284      	str	r4, [r0, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
    48d4:	f43f af43 	beq.w	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48d8:	6814      	ldr	r4, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    48da:	290c      	cmp	r1, #12
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48e0:	f894 c031 	ldrb.w	ip, [r4, #49]	; 0x31
    48e4:	6814      	ldr	r4, [r2, #0]
    48e6:	f104 0419 	add.w	r4, r4, #25
    48ea:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
    48ee:	eb03 230c 	add.w	r3, r3, ip, lsl #8
    48f2:	62c3      	str	r3, [r0, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
    48f4:	f43f af33 	beq.w	475e <HAL_SPI_RxCpltCallback+0x3e>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
    48f8:	6813      	ldr	r3, [r2, #0]
    48fa:	6813      	ldr	r3, [r2, #0]
    48fc:	200051f0 	.word	0x200051f0
    4900:	58020800 	.word	0x58020800
    4904:	38000000 	.word	0x38000000
    4908:	e000ed00 	.word	0xe000ed00
    490c:	2000556c 	.word	0x2000556c
    4910:	2000000d 	.word	0x2000000d
    4914:	200050d4 	.word	0x200050d4
    4918:	20014830 	.word	0x20014830
    491c:	f3af 8000 	nop.w

00004920 <HAL_SPI_RxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    4920:	b510      	push	{r4, lr}
	interrupted = 1;
    4922:	4b75      	ldr	r3, [pc, #468]	; (4af8 <HAL_SPI_RxHalfCpltCallback+0x1d8>)
    4924:	2201      	movs	r2, #1
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4926:	4c75      	ldr	r4, [pc, #468]	; (4afc <HAL_SPI_RxHalfCpltCallback+0x1dc>)
	interrupted = 1;
    4928:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_RX) & ~(uint32_t)0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    492a:	f024 031f 	bic.w	r3, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    492e:	f3bf 8f4f 	dsb	sy
    4932:	4973      	ldr	r1, [pc, #460]	; (4b00 <HAL_SPI_RxHalfCpltCallback+0x1e0>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4934:	f103 0020 	add.w	r0, r3, #32
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4938:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    493c:	3340      	adds	r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    493e:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
    4942:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
    4946:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    494a:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    494e:	2102      	movs	r1, #2
    4950:	486c      	ldr	r0, [pc, #432]	; (4b04 <HAL_SPI_RxHalfCpltCallback+0x1e4>)
    4952:	f004 fa4d 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    4956:	7823      	ldrb	r3, [r4, #0]
    4958:	2bfe      	cmp	r3, #254	; 0xfe
    495a:	d009      	beq.n	4970 <HAL_SPI_RxHalfCpltCallback+0x50>
		for (int i = 0; i < numStringsThisBoard; i++)
		{
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
		}
	}
	newPluck = 1;
    495c:	2401      	movs	r4, #1
    495e:	4b6a      	ldr	r3, [pc, #424]	; (4b08 <HAL_SPI_RxHalfCpltCallback+0x1e8>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4960:	2200      	movs	r2, #0
    4962:	2102      	movs	r1, #2
	newPluck = 1;
    4964:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    4966:	4867      	ldr	r0, [pc, #412]	; (4b04 <HAL_SPI_RxHalfCpltCallback+0x1e4>)
}
    4968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    496c:	f004 ba40 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
    4970:	7e63      	ldrb	r3, [r4, #25]
    4972:	2bfd      	cmp	r3, #253	; 0xfd
    4974:	d1f2      	bne.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
		for (int i = 0; i < numStringsThisBoard; i++)
    4976:	4b65      	ldr	r3, [pc, #404]	; (4b0c <HAL_SPI_RxHalfCpltCallback+0x1ec>)
    4978:	781a      	ldrb	r2, [r3, #0]
    497a:	2a00      	cmp	r2, #0
    497c:	d0ee      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    497e:	4b64      	ldr	r3, [pc, #400]	; (4b10 <HAL_SPI_RxHalfCpltCallback+0x1f0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    4980:	2a01      	cmp	r2, #1
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4982:	6818      	ldr	r0, [r3, #0]
    4984:	6819      	ldr	r1, [r3, #0]
    4986:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    498a:	f101 0101 	add.w	r1, r1, #1
    498e:	f890 c001 	ldrb.w	ip, [r0, #1]
    4992:	f814 0011 	ldrb.w	r0, [r4, r1, lsl #1]
    4996:	495f      	ldr	r1, [pc, #380]	; (4b14 <HAL_SPI_RxHalfCpltCallback+0x1f4>)
    4998:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    499c:	6008      	str	r0, [r1, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    499e:	d0dd      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49a0:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    49a2:	2a02      	cmp	r2, #2
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49a4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    49a8:	f890 c003 	ldrb.w	ip, [r0, #3]
    49ac:	6818      	ldr	r0, [r3, #0]
    49ae:	f100 0002 	add.w	r0, r0, #2
    49b2:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    49b6:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    49ba:	6048      	str	r0, [r1, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
    49bc:	d0ce      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49be:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    49c0:	2a03      	cmp	r2, #3
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49c2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    49c6:	f890 c005 	ldrb.w	ip, [r0, #5]
    49ca:	6818      	ldr	r0, [r3, #0]
    49cc:	f100 0003 	add.w	r0, r0, #3
    49d0:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    49d4:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    49d8:	6088      	str	r0, [r1, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    49da:	d0bf      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49dc:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    49de:	2a04      	cmp	r2, #4
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49e0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    49e4:	f890 c007 	ldrb.w	ip, [r0, #7]
    49e8:	6818      	ldr	r0, [r3, #0]
    49ea:	f100 0004 	add.w	r0, r0, #4
    49ee:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    49f2:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    49f6:	60c8      	str	r0, [r1, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
    49f8:	d0b0      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49fa:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    49fc:	2a05      	cmp	r2, #5
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49fe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a02:	f890 c009 	ldrb.w	ip, [r0, #9]
    4a06:	6818      	ldr	r0, [r3, #0]
    4a08:	f100 0005 	add.w	r0, r0, #5
    4a0c:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a10:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a14:	6108      	str	r0, [r1, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a16:	d0a1      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a18:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a1a:	2a06      	cmp	r2, #6
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a1c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a20:	f890 c00b 	ldrb.w	ip, [r0, #11]
    4a24:	6818      	ldr	r0, [r3, #0]
    4a26:	f100 0006 	add.w	r0, r0, #6
    4a2a:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a2e:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a32:	6148      	str	r0, [r1, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a34:	d092      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a36:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a38:	2a07      	cmp	r2, #7
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a3a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a3e:	f890 c00d 	ldrb.w	ip, [r0, #13]
    4a42:	6818      	ldr	r0, [r3, #0]
    4a44:	f100 0007 	add.w	r0, r0, #7
    4a48:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a4c:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a50:	6188      	str	r0, [r1, #24]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a52:	d083      	beq.n	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a54:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a56:	2a08      	cmp	r2, #8
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a58:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a5c:	f890 c00f 	ldrb.w	ip, [r0, #15]
    4a60:	6818      	ldr	r0, [r3, #0]
    4a62:	f100 0008 	add.w	r0, r0, #8
    4a66:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a6a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a6e:	61c8      	str	r0, [r1, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a70:	f43f af74 	beq.w	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a74:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a76:	2a09      	cmp	r2, #9
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a78:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a7c:	f890 c011 	ldrb.w	ip, [r0, #17]
    4a80:	6818      	ldr	r0, [r3, #0]
    4a82:	f100 0009 	add.w	r0, r0, #9
    4a86:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4a8a:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4a8e:	6208      	str	r0, [r1, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a90:	f43f af64 	beq.w	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a94:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4a96:	2a0a      	cmp	r2, #10
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a98:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4a9c:	f890 c013 	ldrb.w	ip, [r0, #19]
    4aa0:	6818      	ldr	r0, [r3, #0]
    4aa2:	f100 000a 	add.w	r0, r0, #10
    4aa6:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4aaa:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4aae:	6248      	str	r0, [r1, #36]	; 0x24
		for (int i = 0; i < numStringsThisBoard; i++)
    4ab0:	f43f af54 	beq.w	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ab4:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ab6:	2a0b      	cmp	r2, #11
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ab8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4abc:	f890 c015 	ldrb.w	ip, [r0, #21]
    4ac0:	6818      	ldr	r0, [r3, #0]
    4ac2:	f100 000b 	add.w	r0, r0, #11
    4ac6:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4aca:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4ace:	6288      	str	r0, [r1, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
    4ad0:	f43f af44 	beq.w	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ad4:	6818      	ldr	r0, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ad6:	2a0c      	cmp	r2, #12
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ad8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    4adc:	f890 c017 	ldrb.w	ip, [r0, #23]
    4ae0:	6818      	ldr	r0, [r3, #0]
    4ae2:	f100 000c 	add.w	r0, r0, #12
    4ae6:	f814 0010 	ldrb.w	r0, [r4, r0, lsl #1]
    4aea:	eb00 200c 	add.w	r0, r0, ip, lsl #8
    4aee:	62c8      	str	r0, [r1, #44]	; 0x2c
		for (int i = 0; i < numStringsThisBoard; i++)
    4af0:	f43f af34 	beq.w	495c <HAL_SPI_RxHalfCpltCallback+0x3c>
			stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4af4:	681a      	ldr	r2, [r3, #0]
    4af6:	681b      	ldr	r3, [r3, #0]
    4af8:	200051f0 	.word	0x200051f0
    4afc:	38000000 	.word	0x38000000
    4b00:	e000ed00 	.word	0xe000ed00
    4b04:	58020800 	.word	0x58020800
    4b08:	2000556c 	.word	0x2000556c
    4b0c:	2000000d 	.word	0x2000000d
    4b10:	200050d4 	.word	0x200050d4
    4b14:	20014830 	.word	0x20014830
    4b18:	f3af 8000 	nop.w
    4b1c:	f3af 8000 	nop.w

00004b20 <HAL_SPI_TxRxCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    4b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interrupted = 1;
    4b22:	2201      	movs	r2, #1
    4b24:	4b1c      	ldr	r3, [pc, #112]	; (4b98 <HAL_SPI_TxRxCpltCallback+0x78>)
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4b26:	4d1d      	ldr	r5, [pc, #116]	; (4b9c <HAL_SPI_TxRxCpltCallback+0x7c>)
	interrupted = 1;
    4b28:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4b2a:	f025 041f 	bic.w	r4, r5, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4b2e:	f3bf 8f4f 	dsb	sy
    4b32:	4b1b      	ldr	r3, [pc, #108]	; (4ba0 <HAL_SPI_TxRxCpltCallback+0x80>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4b34:	f104 0720 	add.w	r7, r4, #32
    4b38:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4b3c:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    4b40:	f8c3 725c 	str.w	r7, [r3, #604]	; 0x25c
    4b44:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
    4b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b4c:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4b50:	2110      	movs	r1, #16
    4b52:	4814      	ldr	r0, [pc, #80]	; (4ba4 <HAL_SPI_TxRxCpltCallback+0x84>)
    4b54:	f004 f94c 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4b58:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    4b5c:	2bfe      	cmp	r3, #254	; 0xfe
    4b5e:	d013      	beq.n	4b88 <HAL_SPI_TxRxCpltCallback+0x68>
  __ASM volatile ("dsb 0xF":::"memory");
    4b60:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4b64:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <HAL_SPI_TxRxCpltCallback+0x80>)
    4b66:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    4b6a:	f8c3 7268 	str.w	r7, [r3, #616]	; 0x268
    4b6e:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
    4b72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b76:	f3bf 8f6f 	isb	sy
	{
		handleSPI(LEVER_BUFFER_SIZE);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4b7a:	2200      	movs	r2, #0
    4b7c:	2110      	movs	r1, #16
    4b7e:	4809      	ldr	r0, [pc, #36]	; (4ba4 <HAL_SPI_TxRxCpltCallback+0x84>)
}
    4b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4b84:	f004 b934 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
    4b88:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    4b8c:	2bfd      	cmp	r3, #253	; 0xfd
    4b8e:	d1e7      	bne.n	4b60 <HAL_SPI_TxRxCpltCallback+0x40>
		handleSPI(LEVER_BUFFER_SIZE);
    4b90:	2020      	movs	r0, #32
    4b92:	f001 faa5 	bl	60e0 <handleSPI>
    4b96:	e7e3      	b.n	4b60 <HAL_SPI_TxRxCpltCallback+0x40>
    4b98:	200051f0 	.word	0x200051f0
    4b9c:	30000140 	.word	0x30000140
    4ba0:	e000ed00 	.word	0xe000ed00
    4ba4:	58020800 	.word	0x58020800
    4ba8:	f3af 8000 	nop.w
    4bac:	f3af 8000 	nop.w
    4bb0:	f3af 8000 	nop.w
    4bb4:	f3af 8000 	nop.w
    4bb8:	f3af 8000 	nop.w
    4bbc:	f3af 8000 	nop.w

00004bc0 <HAL_SPI_TxRxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
    4bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interrupted = 1;
    4bc2:	2201      	movs	r2, #1
    4bc4:	4b1b      	ldr	r3, [pc, #108]	; (4c34 <HAL_SPI_TxRxHalfCpltCallback+0x74>)
	//SCB_InvalidateDCache();
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4bc6:	4d1c      	ldr	r5, [pc, #112]	; (4c38 <HAL_SPI_TxRxHalfCpltCallback+0x78>)
	interrupted = 1;
    4bc8:	701a      	strb	r2, [r3, #0]
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4bca:	f025 041f 	bic.w	r4, r5, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4bce:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4bd2:	4b1a      	ldr	r3, [pc, #104]	; (4c3c <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4bd4:	f104 0720 	add.w	r7, r4, #32
    4bd8:	f104 0640 	add.w	r6, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4bdc:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    4be0:	f8c3 725c 	str.w	r7, [r3, #604]	; 0x25c
    4be4:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
    4be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bec:	f3bf 8f6f 	isb	sy
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    4bf0:	2110      	movs	r1, #16
    4bf2:	4813      	ldr	r0, [pc, #76]	; (4c40 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
    4bf4:	f004 f8fc 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4bf8:	7fab      	ldrb	r3, [r5, #30]
    4bfa:	2bfe      	cmp	r3, #254	; 0xfe
    4bfc:	d013      	beq.n	4c26 <HAL_SPI_TxRxHalfCpltCallback+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
    4bfe:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c02:	4b0e      	ldr	r3, [pc, #56]	; (4c3c <HAL_SPI_TxRxHalfCpltCallback+0x7c>)
    4c04:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    4c08:	f8c3 7268 	str.w	r7, [r3, #616]	; 0x268
    4c0c:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
    4c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c14:	f3bf 8f6f 	isb	sy
	{
		handleSPI(0);
	}
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_LEVERS) & ~(uint32_t)0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4c18:	2200      	movs	r2, #0
    4c1a:	2110      	movs	r1, #16
    4c1c:	4808      	ldr	r0, [pc, #32]	; (4c40 <HAL_SPI_TxRxHalfCpltCallback+0x80>)
}
    4c1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    4c22:	f004 b8e5 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
    4c26:	7feb      	ldrb	r3, [r5, #31]
    4c28:	2bfd      	cmp	r3, #253	; 0xfd
    4c2a:	d1e8      	bne.n	4bfe <HAL_SPI_TxRxHalfCpltCallback+0x3e>
		handleSPI(0);
    4c2c:	2000      	movs	r0, #0
    4c2e:	f001 fa57 	bl	60e0 <handleSPI>
    4c32:	e7e4      	b.n	4bfe <HAL_SPI_TxRxHalfCpltCallback+0x3e>
    4c34:	200051f0 	.word	0x200051f0
    4c38:	30000140 	.word	0x30000140
    4c3c:	e000ed00 	.word	0xe000ed00
    4c40:	58020800 	.word	0x58020800
    4c44:	f3af 8000 	nop.w
    4c48:	f3af 8000 	nop.w
    4c4c:	f3af 8000 	nop.w
    4c50:	f3af 8000 	nop.w
    4c54:	f3af 8000 	nop.w
    4c58:	f3af 8000 	nop.w
    4c5c:	f3af 8000 	nop.w

00004c60 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    4c60:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    4c62:	4b0c      	ldr	r3, [pc, #48]	; (4c94 <HAL_SAI_TxCpltCallback+0x34>)
    4c64:	781b      	ldrb	r3, [r3, #0]
    4c66:	b913      	cbnz	r3, 4c6e <HAL_SAI_TxCpltCallback+0xe>
    4c68:	4b0b      	ldr	r3, [pc, #44]	; (4c98 <HAL_SAI_TxCpltCallback+0x38>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	b903      	cbnz	r3, 4c70 <HAL_SAI_TxCpltCallback+0x10>
	{
		audioFrame(HALF_BUFFER_SIZE);
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
	}
}
    4c6e:	bd08      	pop	{r3, pc}
		audioFrame(HALF_BUFFER_SIZE);
    4c70:	2010      	movs	r0, #16
    4c72:	f7fe ff55 	bl	3b20 <audioFrame>
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4c76:	4a09      	ldr	r2, [pc, #36]	; (4c9c <HAL_SAI_TxCpltCallback+0x3c>)
  __ASM volatile ("dsb 0xF":::"memory");
    4c78:	f3bf 8f4f 	dsb	sy
    4c7c:	4b08      	ldr	r3, [pc, #32]	; (4ca0 <HAL_SAI_TxCpltCallback+0x40>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4c7e:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4c82:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4c86:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c8e:	f3bf 8f6f 	isb	sy
}
    4c92:	bd08      	pop	{r3, pc}
    4c94:	20014b60 	.word	0x20014b60
    4c98:	20005764 	.word	0x20005764
    4c9c:	30000040 	.word	0x30000040
    4ca0:	e000ed00 	.word	0xe000ed00
    4ca4:	f3af 8000 	nop.w
    4ca8:	f3af 8000 	nop.w
    4cac:	f3af 8000 	nop.w
    4cb0:	f3af 8000 	nop.w
    4cb4:	f3af 8000 	nop.w
    4cb8:	f3af 8000 	nop.w
    4cbc:	f3af 8000 	nop.w

00004cc0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    4cc0:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    4cc2:	4b0c      	ldr	r3, [pc, #48]	; (4cf4 <HAL_SAI_TxHalfCpltCallback+0x34>)
    4cc4:	7818      	ldrb	r0, [r3, #0]
    4cc6:	b910      	cbnz	r0, 4cce <HAL_SAI_TxHalfCpltCallback+0xe>
    4cc8:	4b0b      	ldr	r3, [pc, #44]	; (4cf8 <HAL_SAI_TxHalfCpltCallback+0x38>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	b903      	cbnz	r3, 4cd0 <HAL_SAI_TxHalfCpltCallback+0x10>
	{
		audioFrame(0);
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
	}
}
    4cce:	bd08      	pop	{r3, pc}
		audioFrame(0);
    4cd0:	f7fe ff26 	bl	3b20 <audioFrame>
		SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4cd4:	4a09      	ldr	r2, [pc, #36]	; (4cfc <HAL_SAI_TxHalfCpltCallback+0x3c>)
  __ASM volatile ("dsb 0xF":::"memory");
    4cd6:	f3bf 8f4f 	dsb	sy
    4cda:	4b09      	ldr	r3, [pc, #36]	; (4d00 <HAL_SAI_TxHalfCpltCallback+0x40>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4cdc:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4ce0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    4ce4:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4cec:	f3bf 8f6f 	isb	sy
}
    4cf0:	bd08      	pop	{r3, pc}
    4cf2:	bf00      	nop
    4cf4:	20014b60 	.word	0x20014b60
    4cf8:	20005764 	.word	0x20005764
    4cfc:	30000040 	.word	0x30000040
    4d00:	e000ed00 	.word	0xe000ed00
    4d04:	f3af 8000 	nop.w
    4d08:	f3af 8000 	nop.w
    4d0c:	f3af 8000 	nop.w
    4d10:	f3af 8000 	nop.w
    4d14:	f3af 8000 	nop.w
    4d18:	f3af 8000 	nop.w
    4d1c:	f3af 8000 	nop.w

00004d20 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop
	...

00004d40 <scaleDefault>:
}
    4d40:	4770      	bx	lr
    4d42:	bf00      	nop
    4d44:	f3af 8000 	nop.w
    4d48:	f3af 8000 	nop.w
    4d4c:	f3af 8000 	nop.w
    4d50:	f3af 8000 	nop.w
    4d54:	f3af 8000 	nop.w
    4d58:	f3af 8000 	nop.w
    4d5c:	f3af 8000 	nop.w

00004d60 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    4d60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    4d64:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    4d68:	eee0 7a07 	vfma.f32	s15, s0, s14
    4d6c:	eeb0 0a67 	vmov.f32	s0, s15
    4d70:	4770      	bx	lr
    4d72:	bf00      	nop
    4d74:	f3af 8000 	nop.w
    4d78:	f3af 8000 	nop.w
    4d7c:	f3af 8000 	nop.w

00004d80 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    4d80:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4d94 <scaleOscFine+0x14>
    4d84:	eddf 7a04 	vldr	s15, [pc, #16]	; 4d98 <scaleOscFine+0x18>
}
    4d88:	eee0 7a07 	vfma.f32	s15, s0, s14
    4d8c:	eeb0 0a67 	vmov.f32	s0, s15
    4d90:	4770      	bx	lr
    4d92:	bf00      	nop
    4d94:	43480000 	.word	0x43480000
    4d98:	c2c80000 	.word	0xc2c80000
    4d9c:	f3af 8000 	nop.w

00004da0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    4da0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4db4 <scaleOscFreq+0x14>
    4da4:	eddf 7a04 	vldr	s15, [pc, #16]	; 4db8 <scaleOscFreq+0x18>
}
    4da8:	eee0 7a07 	vfma.f32	s15, s0, s14
    4dac:	eeb0 0a67 	vmov.f32	s0, s15
    4db0:	4770      	bx	lr
    4db2:	bf00      	nop
    4db4:	457a0000 	.word	0x457a0000
    4db8:	c4fa0000 	.word	0xc4fa0000
    4dbc:	f3af 8000 	nop.w

00004dc0 <scaleFilterCutoff>:
	return (input * 127.0f);
    4dc0:	eddf 7a02 	vldr	s15, [pc, #8]	; 4dcc <scaleFilterCutoff+0xc>
}
    4dc4:	ee20 0a27 	vmul.f32	s0, s0, s15
    4dc8:	4770      	bx	lr
    4dca:	bf00      	nop
    4dcc:	42fe0000 	.word	0x42fe0000
    4dd0:	f3af 8000 	nop.w
    4dd4:	f3af 8000 	nop.w
    4dd8:	f3af 8000 	nop.w
    4ddc:	f3af 8000 	nop.w

00004de0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    4de0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 4df4 <scaleFinalLowpass+0x14>
    4de4:	eddf 7a04 	vldr	s15, [pc, #16]	; 4df8 <scaleFinalLowpass+0x18>
}
    4de8:	eee0 7a07 	vfma.f32	s15, s0, s14
    4dec:	eeb0 0a67 	vmov.f32	s0, s15
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	428c0000 	.word	0x428c0000
    4df8:	42680000 	.word	0x42680000
    4dfc:	f3af 8000 	nop.w

00004e00 <blankFunction>:
}
    4e00:	4770      	bx	lr
    4e02:	bf00      	nop
    4e04:	f3af 8000 	nop.w
    4e08:	f3af 8000 	nop.w
    4e0c:	f3af 8000 	nop.w
    4e10:	f3af 8000 	nop.w
    4e14:	f3af 8000 	nop.w
    4e18:	f3af 8000 	nop.w
    4e1c:	f3af 8000 	nop.w

00004e20 <scaleTranspose>:
{
    4e20:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    4e24:	ed9f 0a07 	vldr	s0, [pc, #28]	; 4e44 <scaleTranspose+0x24>
    4e28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    4e2c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    4e2e:	f002 fb37 	bl	74a0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    4e32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4e48 <scaleTranspose+0x28>
    4e36:	eddf 7a05 	vldr	s15, [pc, #20]	; 4e4c <scaleTranspose+0x2c>
}
    4e3a:	eee0 7a07 	vfma.f32	s15, s0, s14
    4e3e:	eeb0 0a67 	vmov.f32	s0, s15
    4e42:	bd08      	pop	{r3, pc}
    4e44:	00000000 	.word	0x00000000
    4e48:	42c00000 	.word	0x42c00000
    4e4c:	c2400000 	.word	0xc2400000
    4e50:	f3af 8000 	nop.w
    4e54:	f3af 8000 	nop.w
    4e58:	f3af 8000 	nop.w
    4e5c:	f3af 8000 	nop.w

00004e60 <scalePitchBend>:
{
    4e60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    4e64:	ed9f 0a05 	vldr	s0, [pc, #20]	; 4e7c <scalePitchBend+0x1c>
    4e68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    4e6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    4e6e:	f002 fb17 	bl	74a0 <LEAF_clip>
	return (input * 48.0f);
    4e72:	eddf 7a03 	vldr	s15, [pc, #12]	; 4e80 <scalePitchBend+0x20>
}
    4e76:	ee20 0a27 	vmul.f32	s0, s0, s15
    4e7a:	bd08      	pop	{r3, pc}
    4e7c:	00000000 	.word	0x00000000
    4e80:	42400000 	.word	0x42400000
    4e84:	f3af 8000 	nop.w
    4e88:	f3af 8000 	nop.w
    4e8c:	f3af 8000 	nop.w
    4e90:	f3af 8000 	nop.w
    4e94:	f3af 8000 	nop.w
    4e98:	f3af 8000 	nop.w
    4e9c:	f3af 8000 	nop.w

00004ea0 <scaleFilterResonance>:
{
    4ea0:	b510      	push	{r4, lr}
    4ea2:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    4ea6:	ed9f 9a21 	vldr	s18, [pc, #132]	; 4f2c <scaleFilterResonance+0x8c>
{
    4eaa:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    4eae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4eb2:	eeb0 0a49 	vmov.f32	s0, s18
    4eb6:	f002 faf3 	bl	74a0 <LEAF_clip>
    4eba:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    4ebe:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 4f30 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4ec2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 4f34 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    4ec6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    4eca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    4ece:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    4ed2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4ed6:	1c63      	adds	r3, r4, #1
    4ed8:	ee00 3a90 	vmov	s1, r3
    4edc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    4ee0:	f002 fade 	bl	74a0 <LEAF_clip>
    4ee4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4ee8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4eec:	4b12      	ldr	r3, [pc, #72]	; (4f38 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    4eee:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4ef2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4efa:	ee38 8a27 	vadd.f32	s16, s16, s15
    4efe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f02:	edd4 7a00 	vldr	s15, [r4]
    4f06:	eeb0 0a49 	vmov.f32	s0, s18
    4f0a:	ed93 7a00 	vldr	s14, [r3]
    4f0e:	ee38 8a68 	vsub.f32	s16, s16, s17
    4f12:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    4f16:	ee60 0a87 	vmul.f32	s1, s1, s14
    4f1a:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    4f1e:	ecbd 8b04 	vpop	{d8-d9}
    4f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    4f26:	f002 babb 	b.w	74a0 <LEAF_clip>
    4f2a:	bf00      	nop
    4f2c:	3dcccccd 	.word	0x3dcccccd
    4f30:	44ffe000 	.word	0x44ffe000
    4f34:	00000000 	.word	0x00000000
    4f38:	2001aec4 	.word	0x2001aec4
    4f3c:	f3af 8000 	nop.w

00004f40 <scaleEnvTimes>:
{
    4f40:	b510      	push	{r4, lr}
    4f42:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    4f46:	eddf 8a1d 	vldr	s17, [pc, #116]	; 4fbc <scaleEnvTimes+0x7c>
{
    4f4a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    4f4e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4f52:	eeb0 0a68 	vmov.f32	s0, s17
    4f56:	f002 faa3 	bl	74a0 <LEAF_clip>
    4f5a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    4f5e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 4fc0 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f62:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    4f66:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    4f6a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    4f6e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    4f72:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    4f76:	1c63      	adds	r3, r4, #1
    4f78:	ee00 3a90 	vmov	s1, r3
    4f7c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    4f80:	f002 fa8e 	bl	74a0 <LEAF_clip>
    4f84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    4f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4f8c:	4b0d      	ldr	r3, [pc, #52]	; (4fc4 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    4f8e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    4f92:	ee10 2a10 	vmov	r2, s0
    4f96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4f9a:	ee38 8a07 	vadd.f32	s16, s16, s14
    4f9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4fa2:	ed94 7a00 	vldr	s14, [r4]
    4fa6:	ed93 0a00 	vldr	s0, [r3]
    4faa:	ee38 8a68 	vsub.f32	s16, s16, s17
    4fae:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    4fb2:	eea7 0a08 	vfma.f32	s0, s14, s16
    4fb6:	ecbd 8b02 	vpop	{d8}
    4fba:	bd10      	pop	{r4, pc}
    4fbc:	00000000 	.word	0x00000000
    4fc0:	44ffe000 	.word	0x44ffe000
    4fc4:	20014bb8 	.word	0x20014bb8
    4fc8:	f3af 8000 	nop.w
    4fcc:	f3af 8000 	nop.w
    4fd0:	f3af 8000 	nop.w
    4fd4:	f3af 8000 	nop.w
    4fd8:	f3af 8000 	nop.w
    4fdc:	f3af 8000 	nop.w

00004fe0 <scaleLFORates>:
{
    4fe0:	b510      	push	{r4, lr}
    4fe2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    4fe6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 505c <scaleLFORates+0x7c>
{
    4fea:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    4fee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4ff2:	eeb0 0a68 	vmov.f32	s0, s17
    4ff6:	f002 fa53 	bl	74a0 <LEAF_clip>
    4ffa:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    4ffe:	ed9f 1a18 	vldr	s2, [pc, #96]	; 5060 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5002:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    5006:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    500a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    500e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    5012:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5016:	1c63      	adds	r3, r4, #1
    5018:	ee00 3a90 	vmov	s1, r3
    501c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    5020:	f002 fa3e 	bl	74a0 <LEAF_clip>
    5024:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    5028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    502c:	4b0d      	ldr	r3, [pc, #52]	; (5064 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    502e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    5032:	ee10 2a10 	vmov	r2, s0
    5036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    503a:	ee38 8a07 	vadd.f32	s16, s16, s14
    503e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5042:	ed94 7a00 	vldr	s14, [r4]
    5046:	ed93 0a00 	vldr	s0, [r3]
    504a:	ee38 8a68 	vsub.f32	s16, s16, s17
    504e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    5052:	eea7 0a08 	vfma.f32	s0, s14, s16
    5056:	ecbd 8b02 	vpop	{d8}
    505a:	bd10      	pop	{r4, pc}
    505c:	00000000 	.word	0x00000000
    5060:	44ffe000 	.word	0x44ffe000
    5064:	20016cec 	.word	0x20016cec
    5068:	f3af 8000 	nop.w
    506c:	f3af 8000 	nop.w
    5070:	f3af 8000 	nop.w
    5074:	f3af 8000 	nop.w
    5078:	f3af 8000 	nop.w
    507c:	f3af 8000 	nop.w

00005080 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    5080:	b500      	push	{lr}
    5082:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    5084:	4807      	ldr	r0, [pc, #28]	; (50a4 <randomNumber+0x24>)
    5086:	a901      	add	r1, sp, #4
    5088:	f003 ff0e 	bl	8ea8 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    508c:	eddd 7a01 	vldr	s15, [sp, #4]
    5090:	ed9f 0a05 	vldr	s0, [pc, #20]	; 50a8 <randomNumber+0x28>
    5094:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    5098:	ee27 0a80 	vmul.f32	s0, s15, s0
    509c:	b003      	add	sp, #12
    509e:	f85d fb04 	ldr.w	pc, [sp], #4
    50a2:	bf00      	nop
    50a4:	2001cf34 	.word	0x2001cf34
    50a8:	2f80000d 	.word	0x2f80000d
    50ac:	f3af 8000 	nop.w
    50b0:	f3af 8000 	nop.w
    50b4:	f3af 8000 	nop.w
    50b8:	f3af 8000 	nop.w
    50bc:	f3af 8000 	nop.w

000050c0 <scaleTwo>:
}
    50c0:	ee30 0a00 	vadd.f32	s0, s0, s0
    50c4:	4770      	bx	lr
    50c6:	bf00      	nop
    50c8:	f3af 8000 	nop.w
    50cc:	f3af 8000 	nop.w
    50d0:	f3af 8000 	nop.w
    50d4:	f3af 8000 	nop.w
    50d8:	f3af 8000 	nop.w
    50dc:	f3af 8000 	nop.w

000050e0 <parsePreset>:
{
    50e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50e4:	460b      	mov	r3, r1
    50e6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    50e8:	2200      	movs	r2, #0
    50ea:	2101      	movs	r1, #1
    50ec:	4885      	ldr	r0, [pc, #532]	; (5304 <parsePreset+0x224>)
{
    50ee:	ed2d 8b02 	vpush	{d8}
    50f2:	b08d      	sub	sp, #52	; 0x34
    50f4:	e9cd 4300 	strd	r4, r3, [sp]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    50f8:	f003 fe7a 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    50fc:	b672      	cpsid	i
	 presetReady = 0;
    50fe:	2500      	movs	r5, #0
    5100:	4b81      	ldr	r3, [pc, #516]	; (5308 <parsePreset+0x228>)
	if (buffer[bufferIndex] == 17)
    5102:	f8df 9220 	ldr.w	r9, [pc, #544]	; 5324 <parsePreset+0x244>
		 audioOutBuffer[i] = 0;
    5106:	2280      	movs	r2, #128	; 0x80
    5108:	4629      	mov	r1, r5
    510a:	4880      	ldr	r0, [pc, #512]	; (530c <parsePreset+0x22c>)
	 presetReady = 0;
    510c:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    510e:	f003 fefb 	bl	8f08 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    5112:	f899 4000 	ldrb.w	r4, [r9]
	audioMasterLevel = 0.0f;
    5116:	2300      	movs	r3, #0
    5118:	4a7d      	ldr	r2, [pc, #500]	; (5310 <parsePreset+0x230>)
	if (buffer[bufferIndex] == 17)
    511a:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    511c:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    511e:	f000 821b 	beq.w	5558 <parsePreset+0x478>
	uint16_t bufferIndex = 0;
    5122:	4629      	mov	r1, r5
	uint16_t presetVersionNumber = 0;
    5124:	46aa      	mov	sl, r5
		presetName[i] = buffer[bufferIndex];
    5126:	1c4a      	adds	r2, r1, #1
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5128:	9b01      	ldr	r3, [sp, #4]
		presetName[i] = buffer[bufferIndex];
    512a:	f819 8002 	ldrb.w	r8, [r9, r2]
    512e:	1c8a      	adds	r2, r1, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5130:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		presetName[i] = buffer[bufferIndex];
    5134:	f819 e002 	ldrb.w	lr, [r9, r2]
    5138:	1cca      	adds	r2, r1, #3
    513a:	f819 c002 	ldrb.w	ip, [r9, r2]
    513e:	1d0a      	adds	r2, r1, #4
    5140:	f819 b002 	ldrb.w	fp, [r9, r2]
    5144:	1d4a      	adds	r2, r1, #5
    5146:	f819 2002 	ldrb.w	r2, [r9, r2]
    514a:	9206      	str	r2, [sp, #24]
    514c:	1d8a      	adds	r2, r1, #6
    514e:	f819 0002 	ldrb.w	r0, [r9, r2]
    5152:	1dca      	adds	r2, r1, #7
    5154:	f819 5002 	ldrb.w	r5, [r9, r2]
    5158:	f101 0208 	add.w	r2, r1, #8
    515c:	9005      	str	r0, [sp, #20]
    515e:	f819 6002 	ldrb.w	r6, [r9, r2]
    5162:	f101 0209 	add.w	r2, r1, #9
    5166:	9504      	str	r5, [sp, #16]
    5168:	f819 2002 	ldrb.w	r2, [r9, r2]
    516c:	9603      	str	r6, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    516e:	4e69      	ldr	r6, [pc, #420]	; (5314 <parsePreset+0x234>)
		presetName[i] = buffer[bufferIndex];
    5170:	9202      	str	r2, [sp, #8]
    5172:	f101 020a 	add.w	r2, r1, #10
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5176:	eb06 0043 	add.w	r0, r6, r3, lsl #1
    517a:	005e      	lsls	r6, r3, #1
		presetName[i] = buffer[bufferIndex];
    517c:	f819 5002 	ldrb.w	r5, [r9, r2]
    5180:	4a65      	ldr	r2, [pc, #404]	; (5318 <parsePreset+0x238>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5182:	011b      	lsls	r3, r3, #4
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5184:	4637      	mov	r7, r6
    5186:	4e63      	ldr	r6, [pc, #396]	; (5314 <parsePreset+0x234>)
		presetName[i] = buffer[bufferIndex];
    5188:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    518a:	55f4      	strb	r4, [r6, r7]
		presetName[i] = buffer[bufferIndex];
    518c:	9c06      	ldr	r4, [sp, #24]
    518e:	f882 8001 	strb.w	r8, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5192:	f880 8001 	strb.w	r8, [r0, #1]
		presetName[i] = buffer[bufferIndex];
    5196:	f882 e002 	strb.w	lr, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    519a:	f880 e002 	strb.w	lr, [r0, #2]
		presetName[i] = buffer[bufferIndex];
    519e:	f882 c003 	strb.w	ip, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51a2:	f880 c003 	strb.w	ip, [r0, #3]
		presetName[i] = buffer[bufferIndex];
    51a6:	f882 b004 	strb.w	fp, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51aa:	f880 b004 	strb.w	fp, [r0, #4]
		presetName[i] = buffer[bufferIndex];
    51ae:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51b0:	7144      	strb	r4, [r0, #5]
		presetName[i] = buffer[bufferIndex];
    51b2:	9c05      	ldr	r4, [sp, #20]
    51b4:	7194      	strb	r4, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51b6:	7184      	strb	r4, [r0, #6]
		presetName[i] = buffer[bufferIndex];
    51b8:	9c04      	ldr	r4, [sp, #16]
    51ba:	9e03      	ldr	r6, [sp, #12]
    51bc:	71d4      	strb	r4, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51be:	71c4      	strb	r4, [r0, #7]
		presetName[i] = buffer[bufferIndex];
    51c0:	9c02      	ldr	r4, [sp, #8]
    51c2:	7216      	strb	r6, [r2, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51c4:	7206      	strb	r6, [r0, #8]
		presetName[i] = buffer[bufferIndex];
    51c6:	7254      	strb	r4, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51c8:	7244      	strb	r4, [r0, #9]
		presetName[i] = buffer[bufferIndex];
    51ca:	f101 040b 	add.w	r4, r1, #11
    51ce:	7295      	strb	r5, [r2, #10]
    51d0:	f819 4004 	ldrb.w	r4, [r9, r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51d4:	7285      	strb	r5, [r0, #10]
		presetName[i] = buffer[bufferIndex];
    51d6:	72d4      	strb	r4, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51d8:	72c4      	strb	r4, [r0, #11]
		presetName[i] = buffer[bufferIndex];
    51da:	f101 040c 	add.w	r4, r1, #12
    51de:	4d4f      	ldr	r5, [pc, #316]	; (531c <parsePreset+0x23c>)
    51e0:	f819 4004 	ldrb.w	r4, [r9, r4]
    51e4:	7314      	strb	r4, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51e6:	7304      	strb	r4, [r0, #12]
		presetName[i] = buffer[bufferIndex];
    51e8:	f101 040d 	add.w	r4, r1, #13
    51ec:	f819 4004 	ldrb.w	r4, [r9, r4]
    51f0:	7354      	strb	r4, [r2, #13]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    51f2:	7344      	strb	r4, [r0, #13]
		bufferIndex++;
    51f4:	f101 000e 	add.w	r0, r1, #14
	for (int j = 0; j < 8; j++)
    51f8:	2400      	movs	r4, #0
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    51fa:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    51fe:	f819 6000 	ldrb.w	r6, [r9, r0]
	for (int j = 0; j < 8; j++)
    5202:	3401      	adds	r4, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5204:	eb03 0242 	add.w	r2, r3, r2, lsl #1
	for (int j = 0; j < 8; j++)
    5208:	2c08      	cmp	r4, #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    520a:	54ae      	strb	r6, [r5, r2]
			bufferIndex++;
    520c:	f100 0601 	add.w	r6, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5210:	442a      	add	r2, r5
    5212:	b2b6      	uxth	r6, r6
    5214:	f819 6006 	ldrb.w	r6, [r9, r6]
    5218:	7056      	strb	r6, [r2, #1]
			bufferIndex++;
    521a:	f100 0602 	add.w	r6, r0, #2
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    521e:	b2b6      	uxth	r6, r6
    5220:	f819 6006 	ldrb.w	r6, [r9, r6]
    5224:	7096      	strb	r6, [r2, #2]
			bufferIndex++;
    5226:	f100 0603 	add.w	r6, r0, #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    522a:	b2b6      	uxth	r6, r6
    522c:	f819 6006 	ldrb.w	r6, [r9, r6]
    5230:	70d6      	strb	r6, [r2, #3]
			bufferIndex++;
    5232:	f100 0604 	add.w	r6, r0, #4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5236:	b2b6      	uxth	r6, r6
    5238:	f819 6006 	ldrb.w	r6, [r9, r6]
    523c:	7116      	strb	r6, [r2, #4]
			bufferIndex++;
    523e:	f100 0605 	add.w	r6, r0, #5
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5242:	b2b6      	uxth	r6, r6
    5244:	f819 6006 	ldrb.w	r6, [r9, r6]
    5248:	7156      	strb	r6, [r2, #5]
			bufferIndex++;
    524a:	f100 0606 	add.w	r6, r0, #6
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    524e:	b2b6      	uxth	r6, r6
    5250:	f819 6006 	ldrb.w	r6, [r9, r6]
    5254:	7196      	strb	r6, [r2, #6]
			bufferIndex++;
    5256:	f100 0607 	add.w	r6, r0, #7
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    525a:	b2b6      	uxth	r6, r6
    525c:	f819 6006 	ldrb.w	r6, [r9, r6]
    5260:	71d6      	strb	r6, [r2, #7]
			bufferIndex++;
    5262:	f100 0608 	add.w	r6, r0, #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5266:	b2b6      	uxth	r6, r6
    5268:	f819 6006 	ldrb.w	r6, [r9, r6]
    526c:	7216      	strb	r6, [r2, #8]
			bufferIndex++;
    526e:	f100 0609 	add.w	r6, r0, #9
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5272:	b2b6      	uxth	r6, r6
    5274:	f819 6006 	ldrb.w	r6, [r9, r6]
    5278:	7256      	strb	r6, [r2, #9]
			bufferIndex++;
    527a:	f100 060a 	add.w	r6, r0, #10
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    527e:	b2b6      	uxth	r6, r6
    5280:	f819 6006 	ldrb.w	r6, [r9, r6]
    5284:	7296      	strb	r6, [r2, #10]
			bufferIndex++;
    5286:	f100 060b 	add.w	r6, r0, #11
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    528a:	b2b6      	uxth	r6, r6
    528c:	f819 6006 	ldrb.w	r6, [r9, r6]
    5290:	72d6      	strb	r6, [r2, #11]
			bufferIndex++;
    5292:	f100 060c 	add.w	r6, r0, #12
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5296:	b2b6      	uxth	r6, r6
    5298:	f819 6006 	ldrb.w	r6, [r9, r6]
    529c:	7316      	strb	r6, [r2, #12]
			bufferIndex++;
    529e:	f100 060d 	add.w	r6, r0, #13
    52a2:	f100 000e 	add.w	r0, r0, #14
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52a6:	b2b6      	uxth	r6, r6
			bufferIndex++;
    52a8:	b280      	uxth	r0, r0
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    52aa:	f819 6006 	ldrb.w	r6, [r9, r6]
    52ae:	7356      	strb	r6, [r2, #13]
	for (int j = 0; j < 8; j++)
    52b0:	d1a3      	bne.n	51fa <parsePreset+0x11a>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    52b2:	f101 027e 	add.w	r2, r1, #126	; 0x7e
    52b6:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    52ba:	f819 0002 	ldrb.w	r0, [r9, r2]
    52be:	f819 3003 	ldrb.w	r3, [r9, r3]
    52c2:	eb03 2300 	add.w	r3, r3, r0, lsl #8
	if (paramCount > size)
    52c6:	9800      	ldr	r0, [sp, #0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    52c8:	b29b      	uxth	r3, r3
	if (paramCount > size)
    52ca:	4283      	cmp	r3, r0
    52cc:	dc0c      	bgt.n	52e8 <parsePreset+0x208>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    52ce:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	if (paramEndCheck != 0xefef)
    52d2:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    52d6:	005c      	lsls	r4, r3, #1
    52d8:	444a      	add	r2, r9
    52da:	7896      	ldrb	r6, [r2, #2]
    52dc:	78d0      	ldrb	r0, [r2, #3]
    52de:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    52e2:	b280      	uxth	r0, r0
    52e4:	42a8      	cmp	r0, r5
    52e6:	d01f      	beq.n	5328 <parsePreset+0x248>
		audioMasterLevel = 1.0f;
    52e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    52ec:	4b0c      	ldr	r3, [pc, #48]	; (5320 <parsePreset+0x240>)
    52ee:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    52f0:	4807      	ldr	r0, [pc, #28]	; (5310 <parsePreset+0x230>)
    52f2:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    52f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    52f6:	b662      	cpsie	i
}
    52f8:	b00d      	add	sp, #52	; 0x34
    52fa:	ecbd 8b02 	vpop	{d8}
    52fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5302:	bf00      	nop
    5304:	58020000 	.word	0x58020000
    5308:	20005764 	.word	0x20005764
    530c:	30000040 	.word	0x30000040
    5310:	200006d4 	.word	0x200006d4
    5314:	30032000 	.word	0x30032000
    5318:	2001aa98 	.word	0x2001aa98
    531c:	30032380 	.word	0x30032380
    5320:	2001aaac 	.word	0x2001aaac
    5324:	300001c0 	.word	0x300001c0
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    5328:	7910      	ldrb	r0, [r2, #4]
    532a:	7952      	ldrb	r2, [r2, #5]
    532c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    5330:	b290      	uxth	r0, r2
    5332:	9006      	str	r0, [sp, #24]
	if (presetVersionNumber == 0)
    5334:	f1ba 0f00 	cmp.w	sl, #0
    5338:	f000 8117 	beq.w	556a <parsePreset+0x48a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    533c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    5340:	18d0      	adds	r0, r2, r3
    5342:	f101 0284 	add.w	r2, r1, #132	; 0x84
    5346:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    534a:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    534c:	9800      	ldr	r0, [sp, #0]
    534e:	4282      	cmp	r2, r0
    5350:	dcca      	bgt.n	52e8 <parsePreset+0x208>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    5352:	eb09 0502 	add.w	r5, r9, r2
    5356:	f819 0002 	ldrb.w	r0, [r9, r2]
    535a:	786a      	ldrb	r2, [r5, #1]
    535c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    5360:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    5364:	b292      	uxth	r2, r2
    5366:	4282      	cmp	r2, r0
    5368:	d1be      	bne.n	52e8 <parsePreset+0x208>
	bufferIndex = bufferIndex + 2;
    536a:	f101 0780 	add.w	r7, r1, #128	; 0x80
    536e:	463e      	mov	r6, r7
	for (int i = 0; i < paramCount; i++)
    5370:	2b00      	cmp	r3, #0
    5372:	f000 8665 	beq.w	6040 <parsePreset+0xf60>
    5376:	443c      	add	r4, r7
    5378:	48b4      	ldr	r0, [pc, #720]	; (564c <parsePreset+0x56c>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    537a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 5650 <parsePreset+0x570>
    537e:	b2a7      	uxth	r7, r4
	for (int i = 0; i < paramCount; i++)
    5380:	4680      	mov	r8, r0
    5382:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5384:	eb09 0206 	add.w	r2, r9, r6
    5388:	f819 5006 	ldrb.w	r5, [r9, r6]
		bufferIndex += 2;
    538c:	3602      	adds	r6, #2
	for (int i = 0; i < paramCount; i++)
    538e:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5390:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    5392:	b2b6      	uxth	r6, r6
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5394:	eb02 2205 	add.w	r2, r2, r5, lsl #8
	for (int i = 0; i < paramCount; i++)
    5398:	42b7      	cmp	r7, r6
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    539a:	ee07 2a90 	vmov	s15, r2
    539e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    53a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    53a6:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    53aa:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    53ae:	d1e9      	bne.n	5384 <parsePreset+0x2a4>
    53b0:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
    53b4:	4aa5      	ldr	r2, [pc, #660]	; (564c <parsePreset+0x56c>)
    53b6:	4da7      	ldr	r5, [pc, #668]	; (5654 <parsePreset+0x574>)
    53b8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    53bc:	6155      	str	r5, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    53be:	321c      	adds	r2, #28
    53c0:	4294      	cmp	r4, r2
    53c2:	d1fb      	bne.n	53bc <parsePreset+0x2dc>
    53c4:	4aa4      	ldr	r2, [pc, #656]	; (5658 <parsePreset+0x578>)
		params[i].scaleFunc = &scaleDefault;
    53c6:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    53c8:	301c      	adds	r0, #28
    53ca:	4284      	cmp	r4, r0
    53cc:	d1fb      	bne.n	53c6 <parsePreset+0x2e6>
		bufferIndex += 2;
    53ce:	eb01 0643 	add.w	r6, r1, r3, lsl #1
    53d2:	3680      	adds	r6, #128	; 0x80
    53d4:	b2b6      	uxth	r6, r6
	for (int i = paramCount; i < NUM_PARAMS; i++)
    53d6:	2b9b      	cmp	r3, #155	; 0x9b
    53d8:	f300 862f 	bgt.w	603a <parsePreset+0xf5a>
    53dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    53e0:	4c9e      	ldr	r4, [pc, #632]	; (565c <parsePreset+0x57c>)
    53e2:	4d9c      	ldr	r5, [pc, #624]	; (5654 <parsePreset+0x574>)
			params[i].zeroToOneVal[v] = 0.0f;
    53e4:	2100      	movs	r1, #0
    53e6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    53ea:	4a9b      	ldr	r2, [pc, #620]	; (5658 <parsePreset+0x578>)
    53ec:	6019      	str	r1, [r3, #0]
    53ee:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    53f0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    53f4:	331c      	adds	r3, #28
    53f6:	429c      	cmp	r4, r3
    53f8:	d1f8      	bne.n	53ec <parsePreset+0x30c>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    53fa:	4a99      	ldr	r2, [pc, #612]	; (5660 <parsePreset+0x580>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    53fc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    5400:	4b98      	ldr	r3, [pc, #608]	; (5664 <parsePreset+0x584>)
	for (int i = 0; i < NUM_EFFECT; i++)
    5402:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5404:	f8c8 22e8 	str.w	r2, [r8, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    5408:	f8c8 2454 	str.w	r2, [r8, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    540c:	f8c8 25c0 	str.w	r2, [r8, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5410:	4a95      	ldr	r2, [pc, #596]	; (5668 <parsePreset+0x588>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    5412:	f8c8 3be0 	str.w	r3, [r8, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5416:	f8c8 2304 	str.w	r2, [r8, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    541a:	f8c8 2470 	str.w	r2, [r8, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    541e:	f8c8 25dc 	str.w	r2, [r8, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    5422:	4a92      	ldr	r2, [pc, #584]	; (566c <parsePreset+0x58c>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    5424:	f8c8 3bfc 	str.w	r3, [r8, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    5428:	f8c8 3c34 	str.w	r3, [r8, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    542c:	f8c8 3c88 	str.w	r3, [r8, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    5430:	f8c8 3ca4 	str.w	r3, [r8, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    5434:	f8c8 3cdc 	str.w	r3, [r8, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    5438:	f8c8 3d30 	str.w	r3, [r8, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    543c:	f8c8 3d4c 	str.w	r3, [r8, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    5440:	f8c8 3d84 	str.w	r3, [r8, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    5444:	f8c8 3dd8 	str.w	r3, [r8, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    5448:	f8c8 3df4 	str.w	r3, [r8, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    544c:	f8c8 3e2c 	str.w	r3, [r8, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    5450:	f8c8 2aac 	str.w	r2, [r8, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    5454:	4b86      	ldr	r3, [pc, #536]	; (5670 <parsePreset+0x590>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    5456:	f8c8 2b54 	str.w	r2, [r8, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    545a:	4a86      	ldr	r2, [pc, #536]	; (5674 <parsePreset+0x594>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    545c:	f8df b240 	ldr.w	fp, [pc, #576]	; 56a0 <parsePreset+0x5c0>
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    5460:	f8c8 32cc 	str.w	r3, [r8, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    5464:	f8c8 3358 	str.w	r3, [r8, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    5468:	f8c8 3438 	str.w	r3, [r8, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    546c:	f8c8 34c4 	str.w	r3, [r8, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    5470:	f8c8 35a4 	str.w	r3, [r8, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    5474:	f8c8 3630 	str.w	r3, [r8, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    5478:	f8c8 21d0 	str.w	r2, [r8, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    547c:	4b7e      	ldr	r3, [pc, #504]	; (5678 <parsePreset+0x598>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    547e:	4d7f      	ldr	r5, [pc, #508]	; (567c <parsePreset+0x59c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5480:	4a7f      	ldr	r2, [pc, #508]	; (5680 <parsePreset+0x5a0>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    5482:	f8c8 3e80 	str.w	r3, [r8, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    5486:	f8c8 3f0c 	str.w	r3, [r8, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    548a:	f8c8 5ae4 	str.w	r5, [r8, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    548e:	f8c8 5b8c 	str.w	r5, [r8, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5492:	f8c8 21ec 	str.w	r2, [r8, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    5496:	f8c8 3f98 	str.w	r3, [r8, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    549a:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
    549e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    54a2:	4b78      	ldr	r3, [pc, #480]	; (5684 <parsePreset+0x5a4>)
    54a4:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    54a8:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    54ac:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    54ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    54b2:	fef8 7a67 	vrinta.f32	s15, s15
    54b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    54ba:	edcd 7a00 	vstr	s15, [sp]
    54be:	f89d 0000 	ldrb.w	r0, [sp]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    54c2:	280b      	cmp	r0, #11
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    54c4:	bf88      	it	hi
    54c6:	f8c8 5064 	strhi.w	r5, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    54ca:	f003 fbbd 	bl	8c48 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    54ce:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    54d2:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    54d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    54d8:	fef8 7a67 	vrinta.f32	s15, s15
    54dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    54e0:	edcd 7a00 	vstr	s15, [sp]
    54e4:	f89d 0000 	ldrb.w	r0, [sp]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    54e8:	280b      	cmp	r0, #11
    54ea:	d946      	bls.n	557a <parsePreset+0x49a>
	for (int i = 0; i < NUM_EFFECT; i++)
    54ec:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    54ee:	f8c8 5064 	str.w	r5, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    54f2:	f003 fba9 	bl	8c48 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    54f6:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    54fa:	2f04      	cmp	r7, #4
    54fc:	d1d4      	bne.n	54a8 <parsePreset+0x3c8>
    54fe:	4f53      	ldr	r7, [pc, #332]	; (564c <parsePreset+0x56c>)
    5500:	46b8      	mov	r8, r7
    5502:	463d      	mov	r5, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5504:	692b      	ldr	r3, [r5, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5506:	351c      	adds	r5, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5508:	ed15 0a07 	vldr	s0, [r5, #-28]	; 0xffffffe4
    550c:	4798      	blx	r3
    550e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    5512:	42ac      	cmp	r4, r5
    5514:	d1f6      	bne.n	5504 <parsePreset+0x424>
    5516:	4d4d      	ldr	r5, [pc, #308]	; (564c <parsePreset+0x56c>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5518:	692b      	ldr	r3, [r5, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    551a:	351c      	adds	r5, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    551c:	ed15 0a06 	vldr	s0, [r5, #-24]	; 0xffffffe8
    5520:	4798      	blx	r3
    5522:	ed05 0a04 	vstr	s0, [r5, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5526:	42ac      	cmp	r4, r5
    5528:	d1f6      	bne.n	5518 <parsePreset+0x438>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    552a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    552e:	edd8 7af7 	vldr	s15, [r8, #988]	; 0x3dc
    5532:	ee67 7a87 	vmul.f32	s15, s15, s14
    5536:	fef8 7a67 	vrinta.f32	s15, s15
    553a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    553e:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    5542:	2b06      	cmp	r3, #6
    5544:	d831      	bhi.n	55aa <parsePreset+0x4ca>
    5546:	e8df f013 	tbh	[pc, r3, lsl #1]
    554a:	002d      	.short	0x002d
    554c:	056e0573 	.word	0x056e0573
    5550:	05640569 	.word	0x05640569
    5554:	055a055f 	.word	0x055a055f
		if (buffer[bufferIndex + 1] == 18)
    5558:	f899 3001 	ldrb.w	r3, [r9, #1]
    555c:	2b12      	cmp	r3, #18
    555e:	d015      	beq.n	558c <parsePreset+0x4ac>
	uint16_t presetVersionNumber = 0;
    5560:	46aa      	mov	sl, r5
		presetName[i] = buffer[bufferIndex];
    5562:	f899 4004 	ldrb.w	r4, [r9, #4]
		bufferIndex = 4;
    5566:	2104      	movs	r1, #4
    5568:	e5dd      	b.n	5126 <parsePreset+0x46>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    556a:	f101 0284 	add.w	r2, r1, #132	; 0x84
    556e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5572:	4422      	add	r2, r4
    5574:	4402      	add	r2, r0
    5576:	b292      	uxth	r2, r2
    5578:	e6e8      	b.n	534c <parsePreset+0x26c>
			setEffectsFunctions(effectType, i);
    557a:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    557c:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    557e:	f003 fb63 	bl	8c48 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    5582:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    5586:	2f04      	cmp	r7, #4
    5588:	d18e      	bne.n	54a8 <parsePreset+0x3c8>
    558a:	e7b8      	b.n	54fe <parsePreset+0x41e>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    558c:	f899 2002 	ldrb.w	r2, [r9, #2]
		bufferIndex = 4;
    5590:	2104      	movs	r1, #4
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    5592:	f899 3003 	ldrb.w	r3, [r9, #3]
		presetName[i] = buffer[bufferIndex];
    5596:	f899 4004 	ldrb.w	r4, [r9, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    559a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    559e:	fa1f fa83 	uxth.w	sl, r3
    55a2:	e5c0      	b.n	5126 <parsePreset+0x46>
			  shapeTick[i] = &sawSquareTick;
    55a4:	4b38      	ldr	r3, [pc, #224]	; (5688 <parsePreset+0x5a8>)
    55a6:	4a39      	ldr	r2, [pc, #228]	; (568c <parsePreset+0x5ac>)
    55a8:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    55aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    55ae:	ed98 7aaa 	vldr	s14, [r8, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    55b2:	4a37      	ldr	r2, [pc, #220]	; (5690 <parsePreset+0x5b0>)
    55b4:	4937      	ldr	r1, [pc, #220]	; (5694 <parsePreset+0x5b4>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    55b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    55ba:	edd2 7a00 	vldr	s15, [r2]
    55be:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    55c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    55c6:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    55ca:	bfd4      	ite	le
    55cc:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    55ce:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    55d0:	fef8 7a67 	vrinta.f32	s15, s15
    55d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			enabledCount++;
    55d8:	4603      	mov	r3, r0
    55da:	6008      	str	r0, [r1, #0]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    55dc:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    55e0:	2a06      	cmp	r2, #6
    55e2:	d80b      	bhi.n	55fc <parsePreset+0x51c>
    55e4:	e8df f012 	tbh	[pc, r2, lsl #1]
    55e8:	05060007 	.word	0x05060007
    55ec:	04fc0501 	.word	0x04fc0501
    55f0:	04f204f7 	.word	0x04f204f7
    55f4:	04ed      	.short	0x04ed
			  shapeTick[i] = &sawSquareTick;
    55f6:	4a24      	ldr	r2, [pc, #144]	; (5688 <parsePreset+0x5a8>)
    55f8:	4824      	ldr	r0, [pc, #144]	; (568c <parsePreset+0x5ac>)
    55fa:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    55fc:	4a26      	ldr	r2, [pc, #152]	; (5698 <parsePreset+0x5b8>)
    55fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5602:	ed92 7a00 	vldr	s14, [r2]
    5606:	eeb4 7ae7 	vcmpe.f32	s14, s15
    560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    560e:	f340 84ac 	ble.w	5f6a <parsePreset+0xe8a>
			enabledCount++;
    5612:	3301      	adds	r3, #1
			oscsEnabled[i] = 1;
    5614:	2201      	movs	r2, #1
			enabledCount++;
    5616:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    5618:	604a      	str	r2, [r1, #4]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    561a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    561e:	4a1f      	ldr	r2, [pc, #124]	; (569c <parsePreset+0x5bc>)
    5620:	edd2 7a00 	vldr	s15, [r2]
    5624:	ee67 7a87 	vmul.f32	s15, s15, s14
    5628:	fef8 7a67 	vrinta.f32	s15, s15
    562c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5630:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    5634:	2a06      	cmp	r2, #6
    5636:	d838      	bhi.n	56aa <parsePreset+0x5ca>
    5638:	e8df f012 	tbh	[pc, r2, lsl #1]
    563c:	04b904be 	.word	0x04b904be
    5640:	04af04b4 	.word	0x04af04b4
    5644:	04a504aa 	.word	0x04a504aa
    5648:	0034      	.short	0x0034
    564a:	bf00      	nop
    564c:	20019978 	.word	0x20019978
    5650:	377ffff6 	.word	0x377ffff6
    5654:	00004e01 	.word	0x00004e01
    5658:	00004d41 	.word	0x00004d41
    565c:	2001aa88 	.word	0x2001aa88
    5660:	00004d81 	.word	0x00004d81
    5664:	00004f41 	.word	0x00004f41
    5668:	00004da1 	.word	0x00004da1
    566c:	00004dc1 	.word	0x00004dc1
    5670:	00004d61 	.word	0x00004d61
    5674:	00004e21 	.word	0x00004e21
    5678:	00004fe1 	.word	0x00004fe1
    567c:	00004ea1 	.word	0x00004ea1
    5680:	00004e61 	.word	0x00004e61
    5684:	00004de1 	.word	0x00004de1
    5688:	20005bf4 	.word	0x20005bf4
    568c:	00000961 	.word	0x00000961
    5690:	20019ec0 	.word	0x20019ec0
    5694:	2001996c 	.word	0x2001996c
    5698:	20019d8c 	.word	0x20019d8c
    569c:	2001a02c 	.word	0x2001a02c
    56a0:	2001a978 	.word	0x2001a978
			  shapeTick[i] = &userTick;
    56a4:	4a91      	ldr	r2, [pc, #580]	; (58ec <parsePreset+0x80c>)
    56a6:	4892      	ldr	r0, [pc, #584]	; (58f0 <parsePreset+0x810>)
    56a8:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    56aa:	4a92      	ldr	r2, [pc, #584]	; (58f4 <parsePreset+0x814>)
    56ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    56b0:	ed92 7a00 	vldr	s14, [r2]
    56b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    56b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56bc:	f340 8452 	ble.w	5f64 <parsePreset+0xe84>
			enabledCount++;
    56c0:	3301      	adds	r3, #1
			oscsEnabled[i] = 1;
    56c2:	2201      	movs	r2, #1
			enabledCount++;
    56c4:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    56c6:	4d8c      	ldr	r5, [pc, #560]	; (58f8 <parsePreset+0x818>)
    56c8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    56cc:	608a      	str	r2, [r1, #8]
		setFilterTypes(filterType, i);
    56ce:	2100      	movs	r1, #0
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    56d0:	edd5 7a00 	vldr	s15, [r5]
    56d4:	f205 4444 	addw	r4, r5, #1092	; 0x444
	oscAmpMult = oscAmpMultArray[enabledCount];
    56d8:	4a88      	ldr	r2, [pc, #544]	; (58fc <parsePreset+0x81c>)
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    56da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    56de:	ee67 7aa6 	vmul.f32	s15, s15, s13
	oscAmpMult = oscAmpMultArray[enabledCount];
    56e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    56e6:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    56ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    56ee:	681a      	ldr	r2, [r3, #0]
    56f0:	4b83      	ldr	r3, [pc, #524]	; (5900 <parsePreset+0x820>)
		setFilterTypes(filterType, i);
    56f2:	ee17 0a90 	vmov	r0, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    56f6:	601a      	str	r2, [r3, #0]
		setFilterTypes(filterType, i);
    56f8:	f003 faca 	bl	8c90 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    56fc:	edd5 7a2a 	vldr	s15, [r5, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    5700:	460d      	mov	r5, r1
		setFilterTypes(filterType, i);
    5702:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    5704:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5708:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    570c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5710:	ee17 0a90 	vmov	r0, s15
    5714:	f003 fabc 	bl	8c90 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    5718:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    571a:	4629      	mov	r1, r5
	for (int i = 0; i < NUM_LFOS; i++)
    571c:	3501      	adds	r5, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    571e:	348c      	adds	r4, #140	; 0x8c
    5720:	edd3 7a00 	vldr	s15, [r3]
    5724:	ee67 7a87 	vmul.f32	s15, s15, s14
    5728:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5730:	ee17 0a90 	vmov	r0, s15
    5734:	f003 fc00 	bl	8f38 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    5738:	2d04      	cmp	r5, #4
    573a:	d1ed      	bne.n	5718 <parsePreset+0x638>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    573c:	4c71      	ldr	r4, [pc, #452]	; (5904 <parsePreset+0x824>)
		params[i].objectNumber = 0;
    573e:	2500      	movs	r5, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    5740:	4b71      	ldr	r3, [pc, #452]	; (5908 <parsePreset+0x828>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    5742:	f8c8 42d0 	str.w	r4, [r8, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    5746:	f8c8 443c 	str.w	r4, [r8, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    574a:	f8c8 45a8 	str.w	r4, [r8, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    574e:	4c6f      	ldr	r4, [pc, #444]	; (590c <parsePreset+0x82c>)
	params[Effect1Mix].setParam = &fxMixSet;
    5750:	486f      	ldr	r0, [pc, #444]	; (5910 <parsePreset+0x830>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    5752:	f8c8 435c 	str.w	r4, [r8, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    5756:	f8c8 44c8 	str.w	r4, [r8, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    575a:	f8c8 4634 	str.w	r4, [r8, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    575e:	681c      	ldr	r4, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    5760:	496c      	ldr	r1, [pc, #432]	; (5914 <parsePreset+0x834>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    5762:	f8c8 4714 	str.w	r4, [r8, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    5766:	685c      	ldr	r4, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    5768:	f8c8 07a0 	str.w	r0, [r8, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    576c:	f8c8 4730 	str.w	r4, [r8, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    5770:	689c      	ldr	r4, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    5772:	f8c8 17bc 	str.w	r1, [r8, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    5776:	f8c8 474c 	str.w	r4, [r8, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    577a:	68dc      	ldr	r4, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    577c:	4a66      	ldr	r2, [pc, #408]	; (5918 <parsePreset+0x838>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    577e:	f8c8 4768 	str.w	r4, [r8, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    5782:	691c      	ldr	r4, [r3, #16]
    5784:	f8c8 4784 	str.w	r4, [r8, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    5788:	695c      	ldr	r4, [r3, #20]
    578a:	f8c8 47f4 	str.w	r4, [r8, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    578e:	699c      	ldr	r4, [r3, #24]
    5790:	f8c8 4810 	str.w	r4, [r8, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    5794:	69dc      	ldr	r4, [r3, #28]
    5796:	f8c8 482c 	str.w	r4, [r8, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    579a:	4c60      	ldr	r4, [pc, #384]	; (591c <parsePreset+0x83c>)
    579c:	f8c8 4228 	str.w	r4, [r8, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    57a0:	4c5f      	ldr	r4, [pc, #380]	; (5920 <parsePreset+0x840>)
    57a2:	f8c8 4260 	str.w	r4, [r8, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    57a6:	4c5f      	ldr	r4, [pc, #380]	; (5924 <parsePreset+0x844>)
    57a8:	f8c8 4244 	str.w	r4, [r8, #580]	; 0x244
	params[Master].setParam = &setMaster;
    57ac:	4c5e      	ldr	r4, [pc, #376]	; (5928 <parsePreset+0x848>)
    57ae:	f8c8 404c 	str.w	r4, [r8, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    57b2:	4c5e      	ldr	r4, [pc, #376]	; (592c <parsePreset+0x84c>)
    57b4:	f8c8 41d4 	str.w	r4, [r8, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    57b8:	4c5d      	ldr	r4, [pc, #372]	; (5930 <parsePreset+0x850>)
    57ba:	f8c8 41f0 	str.w	r4, [r8, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    57be:	4c5d      	ldr	r4, [pc, #372]	; (5934 <parsePreset+0x854>)
    57c0:	f8cb 40d0 	str.w	r4, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    57c4:	6a1c      	ldr	r4, [r3, #32]
    57c6:	f8c8 4848 	str.w	r4, [r8, #2120]	; 0x848
	params[OutputAmp].setParam = &setAmp;
    57ca:	2401      	movs	r4, #1
	params[Effect2PostGain].setParam = &fxPostGainSet;
    57cc:	f8c8 189c 	str.w	r1, [r8, #2204]	; 0x89c
	params[Effect3PostGain].setParam = &fxPostGainSet;
    57d0:	f8c8 197c 	str.w	r1, [r8, #2428]	; 0x97c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    57d4:	f8c8 1a5c 	str.w	r1, [r8, #2652]	; 0xa5c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    57d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2Mix].setParam = &fxMixSet;
    57da:	f8c8 0880 	str.w	r0, [r8, #2176]	; 0x880
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    57de:	f8c8 1864 	str.w	r1, [r8, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    57e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3Mix].setParam = &fxMixSet;
    57e4:	f8c8 0960 	str.w	r0, [r8, #2400]	; 0x960
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    57e8:	f8c8 18d4 	str.w	r1, [r8, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    57ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4Mix].setParam = &fxMixSet;
    57ee:	f8c8 0a40 	str.w	r0, [r8, #2624]	; 0xa40
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    57f2:	f8c8 18f0 	str.w	r1, [r8, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    57f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    57f8:	484f      	ldr	r0, [pc, #316]	; (5938 <parsePreset+0x858>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    57fa:	f8c8 190c 	str.w	r1, [r8, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    57fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    5800:	f8c8 1928 	str.w	r1, [r8, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    5804:	6b99      	ldr	r1, [r3, #56]	; 0x38
    5806:	f8c8 1944 	str.w	r1, [r8, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    580a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    580c:	f8c8 19b4 	str.w	r1, [r8, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    5810:	6c19      	ldr	r1, [r3, #64]	; 0x40
    5812:	f8c8 19d0 	str.w	r1, [r8, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    5816:	6c59      	ldr	r1, [r3, #68]	; 0x44
    5818:	f8c8 19ec 	str.w	r1, [r8, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    581c:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    581e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    5820:	f8c8 1a08 	str.w	r1, [r8, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    5824:	f8c8 3a24 	str.w	r3, [r8, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    5828:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    582a:	4944      	ldr	r1, [pc, #272]	; (593c <parsePreset+0x85c>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    582c:	f8c8 3ae8 	str.w	r3, [r8, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    5830:	6853      	ldr	r3, [r2, #4]
    5832:	f8c8 3acc 	str.w	r3, [r8, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    5836:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    5838:	f8c8 1be4 	str.w	r1, [r8, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    583c:	f8c8 3b90 	str.w	r3, [r8, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    5840:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    5842:	f8c8 1c8c 	str.w	r1, [r8, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    5846:	f8c8 3b74 	str.w	r3, [r8, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    584a:	4b3d      	ldr	r3, [pc, #244]	; (5940 <parsePreset+0x860>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    584c:	f8c8 1d34 	str.w	r1, [r8, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    5850:	f8c8 3c00 	str.w	r3, [r8, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    5854:	f8c8 3ca8 	str.w	r3, [r8, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    5858:	f8c8 3d50 	str.w	r3, [r8, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    585c:	f8c8 3df8 	str.w	r3, [r8, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    5860:	4b38      	ldr	r3, [pc, #224]	; (5944 <parsePreset+0x864>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    5862:	f8c8 1ddc 	str.w	r1, [r8, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    5866:	f8c8 3c1c 	str.w	r3, [r8, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    586a:	f8c8 3cc4 	str.w	r3, [r8, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    586e:	f8c8 3d6c 	str.w	r3, [r8, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    5872:	f8c8 3e14 	str.w	r3, [r8, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    5876:	4b34      	ldr	r3, [pc, #208]	; (5948 <parsePreset+0x868>)
    5878:	f8c8 3c38 	str.w	r3, [r8, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    587c:	f8c8 3ce0 	str.w	r3, [r8, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    5880:	f8c8 3d88 	str.w	r3, [r8, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    5884:	f8c8 3e30 	str.w	r3, [r8, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    5888:	4b30      	ldr	r3, [pc, #192]	; (594c <parsePreset+0x86c>)
    588a:	f8c8 3c54 	str.w	r3, [r8, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    588e:	f8c8 3cfc 	str.w	r3, [r8, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    5892:	f8c8 3da4 	str.w	r3, [r8, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    5896:	f8c8 3e4c 	str.w	r3, [r8, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    589a:	6803      	ldr	r3, [r0, #0]
    589c:	f8c8 3e84 	str.w	r3, [r8, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    58a0:	68c3      	ldr	r3, [r0, #12]
    58a2:	f8c8 3f10 	str.w	r3, [r8, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    58a6:	6983      	ldr	r3, [r0, #24]
    58a8:	f8c8 3f9c 	str.w	r3, [r8, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    58ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    58ae:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    58b2:	6843      	ldr	r3, [r0, #4]
    58b4:	f8c8 3ea0 	str.w	r3, [r8, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    58b8:	6903      	ldr	r3, [r0, #16]
    58ba:	f8c8 3f2c 	str.w	r3, [r8, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    58be:	69c3      	ldr	r3, [r0, #28]
    58c0:	f8c8 3fb8 	str.w	r3, [r8, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    58c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    58c6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    58ca:	6883      	ldr	r3, [r0, #8]
    58cc:	f8c8 3ebc 	str.w	r3, [r8, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    58d0:	6943      	ldr	r3, [r0, #20]
    58d2:	f8c8 3f48 	str.w	r3, [r8, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    58d6:	6a03      	ldr	r3, [r0, #32]
    58d8:	f8c8 3fd4 	str.w	r3, [r8, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    58dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    58de:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    58e2:	4b1b      	ldr	r3, [pc, #108]	; (5950 <parsePreset+0x870>)
    58e4:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    58e8:	e03a      	b.n	5960 <parsePreset+0x880>
    58ea:	bf00      	nop
    58ec:	20005bf4 	.word	0x20005bf4
    58f0:	00000b41 	.word	0x00000b41
    58f4:	20019ef8 	.word	0x20019ef8
    58f8:	2001a400 	.word	0x2001a400
    58fc:	20000014 	.word	0x20000014
    5900:	20000010 	.word	0x20000010
    5904:	00001001 	.word	0x00001001
    5908:	20014b64 	.word	0x20014b64
    590c:	00001061 	.word	0x00001061
    5910:	000025c1 	.word	0x000025c1
    5914:	000025e1 	.word	0x000025e1
    5918:	20016bb8 	.word	0x20016bb8
    591c:	000032e1 	.word	0x000032e1
    5920:	00003381 	.word	0x00003381
    5924:	00003341 	.word	0x00003341
    5928:	00001621 	.word	0x00001621
    592c:	00001641 	.word	0x00001641
    5930:	00001661 	.word	0x00001661
    5934:	00001681 	.word	0x00001681
    5938:	20018cec 	.word	0x20018cec
    593c:	00001541 	.word	0x00001541
    5940:	00001561 	.word	0x00001561
    5944:	00001581 	.word	0x00001581
    5948:	000015a1 	.word	0x000015a1
    594c:	000015c1 	.word	0x000015c1
    5950:	00001601 	.word	0x00001601
    5954:	3c010204 	.word	0x3c010204
    5958:	42fe0000 	.word	0x42fe0000
    595c:	371c      	adds	r7, #28
    595e:	3401      	adds	r4, #1
		if ((i >= Osc1) && (i < Osc2))
    5960:	f1a4 0319 	sub.w	r3, r4, #25
		params[i].objectNumber = 0;
    5964:	763d      	strb	r5, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    5966:	2b0c      	cmp	r3, #12
    5968:	d94b      	bls.n	5a02 <parsePreset+0x922>
		else if ((i >= Osc2) && (i < Osc3))
    596a:	f1a4 0326 	sub.w	r3, r4, #38	; 0x26
    596e:	2b0c      	cmp	r3, #12
    5970:	f240 83af 	bls.w	60d2 <parsePreset+0xff2>
		else if ((i >= Osc3) && (i < Effect1FXType))
    5974:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
    5978:	2b0c      	cmp	r3, #12
    597a:	f240 83a7 	bls.w	60cc <parsePreset+0xfec>
		else if ((i >= Filter1) && (i < Filter2))
    597e:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
    5982:	2b05      	cmp	r3, #5
    5984:	d93d      	bls.n	5a02 <parsePreset+0x922>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    5986:	f1a4 0366 	sub.w	r3, r4, #102	; 0x66
    598a:	2b06      	cmp	r3, #6
    598c:	f240 83a1 	bls.w	60d2 <parsePreset+0xff2>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    5990:	f1a4 036d 	sub.w	r3, r4, #109	; 0x6d
    5994:	2b05      	cmp	r3, #5
    5996:	d934      	bls.n	5a02 <parsePreset+0x922>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    5998:	f1a4 0373 	sub.w	r3, r4, #115	; 0x73
    599c:	2b05      	cmp	r3, #5
    599e:	f240 8398 	bls.w	60d2 <parsePreset+0xff2>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    59a2:	f1a4 0379 	sub.w	r3, r4, #121	; 0x79
    59a6:	2b05      	cmp	r3, #5
    59a8:	f240 8390 	bls.w	60cc <parsePreset+0xfec>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    59ac:	f1a4 037f 	sub.w	r3, r4, #127	; 0x7f
    59b0:	2b05      	cmp	r3, #5
    59b2:	f240 837b 	bls.w	60ac <parsePreset+0xfcc>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    59b6:	f1a4 0385 	sub.w	r3, r4, #133	; 0x85
    59ba:	2b04      	cmp	r3, #4
    59bc:	d921      	bls.n	5a02 <parsePreset+0x922>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    59be:	f1a4 038a 	sub.w	r3, r4, #138	; 0x8a
    59c2:	2b04      	cmp	r3, #4
    59c4:	f240 8385 	bls.w	60d2 <parsePreset+0xff2>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    59c8:	f1a4 038f 	sub.w	r3, r4, #143	; 0x8f
    59cc:	2b04      	cmp	r3, #4
    59ce:	f240 837d 	bls.w	60cc <parsePreset+0xfec>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    59d2:	f1a4 0394 	sub.w	r3, r4, #148	; 0x94
    59d6:	2b04      	cmp	r3, #4
    59d8:	f240 8368 	bls.w	60ac <parsePreset+0xfcc>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    59dc:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
    59e0:	2b07      	cmp	r3, #7
    59e2:	d90e      	bls.n	5a02 <parsePreset+0x922>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    59e4:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48
    59e8:	2b07      	cmp	r3, #7
    59ea:	f240 8372 	bls.w	60d2 <parsePreset+0xff2>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    59ee:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
    59f2:	2b07      	cmp	r3, #7
    59f4:	f240 836a 	bls.w	60cc <parsePreset+0xfec>
		else if ((i >= Effect4FXType) && (i < Filter1))
    59f8:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
    59fc:	2b07      	cmp	r3, #7
    59fe:	f240 8355 	bls.w	60ac <parsePreset+0xfcc>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    5a02:	2100      	movs	r1, #0
    5a04:	ed97 0a02 	vldr	s0, [r7, #8]
    5a08:	697b      	ldr	r3, [r7, #20]
    5a0a:	4608      	mov	r0, r1
    5a0c:	4798      	blx	r3
    5a0e:	ed97 0a03 	vldr	s0, [r7, #12]
    5a12:	697b      	ldr	r3, [r7, #20]
    5a14:	2101      	movs	r1, #1
    5a16:	7e38      	ldrb	r0, [r7, #24]
    5a18:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    5a1a:	2c9c      	cmp	r4, #156	; 0x9c
    5a1c:	d19e      	bne.n	595c <parsePreset+0x87c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a1e:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a22:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a26:	ed98 7a02 	vldr	s14, [r8, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a2a:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
    5a32:	ed1f 5a38 	vldr	s10, [pc, #-224]	; 5954 <parsePreset+0x874>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a36:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5a3a:	ed5f 5a39 	vldr	s11, [pc, #-228]	; 5958 <parsePreset+0x878>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a3e:	4b97      	ldr	r3, [pc, #604]	; (5c9c <parsePreset+0xbbc>)
    5a40:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5a48:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a4c:	bfcc      	ite	gt
    5a4e:	2201      	movgt	r2, #1
    5a50:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5a52:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5a56:	4b92      	ldr	r3, [pc, #584]	; (5ca0 <parsePreset+0xbc0>)
    5a58:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    5a5c:	4b91      	ldr	r3, [pc, #580]	; (5ca4 <parsePreset+0xbc4>)
    5a5e:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    5a60:	f1ba 0f00 	cmp.w	sl, #0
    5a64:	f000 827c 	beq.w	5f60 <parsePreset+0xe80>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5a68:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    5a6c:	eef4 7ae6 	vcmpe.f32	s15, s13
    5a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a74:	bfcc      	ite	gt
    5a76:	2301      	movgt	r3, #1
    5a78:	2300      	movle	r3, #0
	bufferIndex += 2;
    5a7a:	3604      	adds	r6, #4
		knobFrozen[i] = 0;
    5a7c:	498a      	ldr	r1, [pc, #552]	; (5ca8 <parsePreset+0xbc8>)
    5a7e:	f8df b250 	ldr.w	fp, [pc, #592]	; 5cd0 <parsePreset+0xbf0>
	bufferIndex += 2;
    5a82:	b2b2      	uxth	r2, r6
    5a84:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    5a88:	4614      	mov	r4, r2
	numMappings = 0;
    5a8a:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    5a8c:	600a      	str	r2, [r1, #0]
    5a8e:	604a      	str	r2, [r1, #4]
    5a90:	608a      	str	r2, [r1, #8]
    5a92:	4986      	ldr	r1, [pc, #536]	; (5cac <parsePreset+0xbcc>)
    5a94:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    5a96:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    5a98:	4b85      	ldr	r3, [pc, #532]	; (5cb0 <parsePreset+0xbd0>)
    5a9a:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    5a9c:	4b85      	ldr	r3, [pc, #532]	; (5cb4 <parsePreset+0xbd4>)
    5a9e:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    5aa0:	4b85      	ldr	r3, [pc, #532]	; (5cb8 <parsePreset+0xbd8>)
    5aa2:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    5aa4:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    5aa6:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    5aa8:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    5aaa:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    5aae:	4283      	cmp	r3, r0
    5ab0:	d1f9      	bne.n	5aa6 <parsePreset+0x9c6>
	for (int i = 0; i < mappingCount; i++)
    5ab2:	9b06      	ldr	r3, [sp, #24]
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	f000 822c 	beq.w	5f12 <parsePreset+0xe32>
    5aba:	4b80      	ldr	r3, [pc, #512]	; (5cbc <parsePreset+0xbdc>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    5abc:	4656      	mov	r6, sl
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5abe:	ed9f 8a80 	vldr	s16, [pc, #512]	; 5cc0 <parsePreset+0xbe0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    5ac2:	46a2      	mov	sl, r4
    5ac4:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
    5ac6:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    5ac8:	f8cd 801c 	str.w	r8, [sp, #28]
	for (int i = 0; i < mappingCount; i++)
    5acc:	9302      	str	r3, [sp, #8]
		uint8_t destNumber = buffer[bufferIndex+1];
    5ace:	eb09 030a 	add.w	r3, r9, sl
    5ad2:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    5ad4:	2e00      	cmp	r6, #0
    5ad6:	f000 816d 	beq.w	5db4 <parsePreset+0xcd4>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    5ada:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    5adc:	2300      	movs	r3, #0
    5ade:	465a      	mov	r2, fp
    5ae0:	461f      	mov	r7, r3
    5ae2:	461c      	mov	r4, r3
    5ae4:	e003      	b.n	5aee <parsePreset+0xa0e>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5ae6:	3301      	adds	r3, #1
    5ae8:	324c      	adds	r2, #76	; 0x4c
    5aea:	2b20      	cmp	r3, #32
    5aec:	d00c      	beq.n	5b08 <parsePreset+0xa28>
			if (mappings[j].destNumber == destNumber)
    5aee:	7811      	ldrb	r1, [r2, #0]
    5af0:	4281      	cmp	r1, r0
    5af2:	d1f8      	bne.n	5ae6 <parsePreset+0xa06>
				foundOne = 1;
    5af4:	2701      	movs	r7, #1
    5af6:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    5af8:	2e00      	cmp	r6, #0
    5afa:	d1f4      	bne.n	5ae6 <parsePreset+0xa06>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5afc:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    5afe:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5b02:	324c      	adds	r2, #76	; 0x4c
    5b04:	2b20      	cmp	r3, #32
    5b06:	d1f2      	bne.n	5aee <parsePreset+0xa0e>
		if (foundOne == 0)
    5b08:	b99f      	cbnz	r7, 5b32 <parsePreset+0xa52>
			whichMapping = numMappings;
    5b0a:	4969      	ldr	r1, [pc, #420]	; (5cb0 <parsePreset+0xbd0>)
			mappings[whichMapping].dest = &params[destNumber];
    5b0c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    5b10:	9c07      	ldr	r4, [sp, #28]
			if (presetVersionNumber == 0)
    5b12:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    5b14:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    5b16:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    5b1a:	bf08      	it	eq
    5b1c:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    5b1e:	461c      	mov	r4, r3
			numMappings++;
    5b20:	3301      	adds	r3, #1
    5b22:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    5b24:	234c      	movs	r3, #76	; 0x4c
    5b26:	fb03 f304 	mul.w	r3, r3, r4
    5b2a:	f80b 0003 	strb.w	r0, [fp, r3]
    5b2e:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    5b30:	605a      	str	r2, [r3, #4]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5b32:	234c      	movs	r3, #76	; 0x4c
    5b34:	f04f 0001 	mov.w	r0, #1
		int source = buffer[bufferIndex];
    5b38:	f819 700a 	ldrb.w	r7, [r9, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5b3c:	1c6a      	adds	r2, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5b3e:	fb03 f304 	mul.w	r3, r3, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5b42:	2f03      	cmp	r7, #3
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5b44:	eb0b 0103 	add.w	r1, fp, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5b48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    5b4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5b50:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5b52:	445b      	add	r3, fp
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    5b54:	f881 0020 	strb.w	r0, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5b58:	485a      	ldr	r0, [pc, #360]	; (5cc4 <parsePreset+0xbe4>)
    5b5a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
    5b5e:	f100 0004 	add.w	r0, r0, #4
    5b62:	60d8      	str	r0, [r3, #12]
    5b64:	4857      	ldr	r0, [pc, #348]	; (5cc4 <parsePreset+0xbe4>)
    5b66:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
    5b6a:	f84b 3002 	str.w	r3, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5b6e:	b23b      	sxth	r3, r7
    5b70:	9308      	str	r3, [sp, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    5b72:	ea4f 03c5 	mov.w	r3, r5, lsl #3
    5b76:	9303      	str	r3, [sp, #12]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5b78:	dc02      	bgt.n	5b80 <parsePreset+0xaa0>
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    5b7a:	2300      	movs	r3, #0
    5b7c:	f881 3020 	strb.w	r3, [r1, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5b80:	f1a7 0318 	sub.w	r3, r7, #24
    5b84:	2b03      	cmp	r3, #3
    5b86:	f200 8108 	bhi.w	5d9a <parsePreset+0xcba>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    5b8a:	4b4a      	ldr	r3, [pc, #296]	; (5cb4 <parsePreset+0xbd4>)
    5b8c:	f04f 0201 	mov.w	r2, #1
    5b90:	443b      	add	r3, r7
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5b92:	3f04      	subs	r7, #4
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    5b94:	f803 2c18 	strb.w	r2, [r3, #-24]
		int scalar = buffer[bufferIndex+2];
    5b98:	eb09 030a 	add.w	r3, r9, sl
    5b9c:	f893 8002 	ldrb.w	r8, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5ba0:	ea4f 0348 	mov.w	r3, r8, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5ba4:	f1a8 0018 	sub.w	r0, r8, #24
			if (scalar == 0xff)
    5ba8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    5bac:	fa0f f288 	sxth.w	r2, r8
    5bb0:	9303      	str	r3, [sp, #12]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5bb2:	f1a8 0314 	sub.w	r3, r8, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5bb6:	9004      	str	r0, [sp, #16]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5bb8:	9305      	str	r3, [sp, #20]
			if (scalar == 0xff)
    5bba:	f000 80fd 	beq.w	5db8 <parsePreset+0xcd8>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5bbe:	4b41      	ldr	r3, [pc, #260]	; (5cc4 <parsePreset+0xbe4>)
    5bc0:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5bc2:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5bc4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    5bc8:	f04f 034c 	mov.w	r3, #76	; 0x4c
    5bcc:	fb03 f304 	mul.w	r3, r3, r4
    5bd0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5bd4:	445b      	add	r3, fp
    5bd6:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5bd8:	f200 80fc 	bhi.w	5dd4 <parsePreset+0xcf4>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5bdc:	4b35      	ldr	r3, [pc, #212]	; (5cb4 <parsePreset+0xbd4>)
    5bde:	f04f 0201 	mov.w	r2, #1
    5be2:	4443      	add	r3, r8
    5be4:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5be8:	2f0b      	cmp	r7, #11
    5bea:	f240 8100 	bls.w	5dee <parsePreset+0xd0e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    5bee:	224c      	movs	r2, #76	; 0x4c
    5bf0:	00eb      	lsls	r3, r5, #3
    5bf2:	4934      	ldr	r1, [pc, #208]	; (5cc4 <parsePreset+0xbe4>)
    5bf4:	fb02 3304 	mla	r3, r2, r4, r3
    5bf8:	9a03      	ldr	r2, [sp, #12]
    5bfa:	3201      	adds	r2, #1
    5bfc:	445b      	add	r3, fp
    5bfe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5c02:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5c04:	9b04      	ldr	r3, [sp, #16]
    5c06:	2b03      	cmp	r3, #3
    5c08:	f200 811e 	bhi.w	5e48 <parsePreset+0xd68>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5c0c:	4b29      	ldr	r3, [pc, #164]	; (5cb4 <parsePreset+0xbd4>)
    5c0e:	4498      	add	r8, r3
    5c10:	f04f 0301 	mov.w	r3, #1
    5c14:	f808 3c18 	strb.w	r3, [r8, #-24]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5c18:	2f0b      	cmp	r7, #11
    5c1a:	f240 8122 	bls.w	5e62 <parsePreset+0xd82>
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c1e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c22:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c24:	eb09 020a 	add.w	r2, r9, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c2c:	fb01 b404 	mla	r4, r1, r4, fp
    5c30:	f04f 0101 	mov.w	r1, #1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c34:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    5c36:	4425      	add	r5, r4
    5c38:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c3c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    5c40:	78d1      	ldrb	r1, [r2, #3]
    5c42:	7912      	ldrb	r2, [r2, #4]
    5c44:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    5c48:	b212      	sxth	r2, r2
    5c4a:	ee07 2a90 	vmov	s15, r2
    5c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5c52:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    5c56:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    5c5a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    5c5e:	3301      	adds	r3, #1
    5c60:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    5c64:	2e00      	cmp	r6, #0
    5c66:	f000 8093 	beq.w	5d90 <parsePreset+0xcb0>
			bufferIndex += 6;
    5c6a:	f10a 0306 	add.w	r3, sl, #6
    5c6e:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    5c72:	9a00      	ldr	r2, [sp, #0]
    5c74:	9b02      	ldr	r3, [sp, #8]
    5c76:	3204      	adds	r2, #4
    5c78:	3301      	adds	r3, #1
    5c7a:	9200      	str	r2, [sp, #0]
    5c7c:	9a06      	ldr	r2, [sp, #24]
    5c7e:	9302      	str	r3, [sp, #8]
    5c80:	429a      	cmp	r2, r3
    5c82:	f47f af24 	bne.w	5ace <parsePreset+0x9ee>
	for (int i = 0; i < numMappings; i++)
    5c86:	4b0a      	ldr	r3, [pc, #40]	; (5cb0 <parsePreset+0xbd0>)
    5c88:	781a      	ldrb	r2, [r3, #0]
    5c8a:	2a00      	cmp	r2, #0
    5c8c:	f000 8141 	beq.w	5f12 <parsePreset+0xe32>
    5c90:	4c0d      	ldr	r4, [pc, #52]	; (5cc8 <parsePreset+0xbe8>)
    5c92:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    5c96:	4f0d      	ldr	r7, [pc, #52]	; (5ccc <parsePreset+0xbec>)
    5c98:	e024      	b.n	5ce4 <parsePreset+0xc04>
    5c9a:	bf00      	nop
    5c9c:	2001995c 	.word	0x2001995c
    5ca0:	20019960 	.word	0x20019960
    5ca4:	20016ce6 	.word	0x20016ce6
    5ca8:	20005218 	.word	0x20005218
    5cac:	2001aa88 	.word	0x2001aa88
    5cb0:	20019968 	.word	0x20019968
    5cb4:	2000531c 	.word	0x2000531c
    5cb8:	20005070 	.word	0x20005070
    5cbc:	20005298 	.word	0x20005298
    5cc0:	37fffffc 	.word	0x37fffffc
    5cc4:	200146d0 	.word	0x200146d0
    5cc8:	20018d28 	.word	0x20018d28
    5ccc:	2000000d 	.word	0x2000000d
    5cd0:	20018d20 	.word	0x20018d20
    5cd4:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    5cd8:	f108 0801 	add.w	r8, r8, #1
    5cdc:	344c      	adds	r4, #76	; 0x4c
    5cde:	4542      	cmp	r2, r8
    5ce0:	f340 8117 	ble.w	5f12 <parsePreset+0xe32>
		if (mappings[i].destNumber != 255)
    5ce4:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    5ce8:	2bff      	cmp	r3, #255	; 0xff
    5cea:	d0f5      	beq.n	5cd8 <parsePreset+0xbf8>
			for (int v = 0; v < numStringsThisBoard; v++)
    5cec:	783b      	ldrb	r3, [r7, #0]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d0f2      	beq.n	5cd8 <parsePreset+0xbf8>
    5cf2:	4626      	mov	r6, r4
    5cf4:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    5cf6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    5cfa:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 5cd4 <parsePreset+0xbf4>
					if (mappings[i].hookActive[j])
    5cfe:	b15b      	cbz	r3, 5d18 <parsePreset+0xc38>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    5d00:	6832      	ldr	r2, [r6, #0]
    5d02:	69f3      	ldr	r3, [r6, #28]
    5d04:	edd2 7a00 	vldr	s15, [r2]
    5d08:	edd3 6a00 	vldr	s13, [r3]
    5d0c:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    5d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5d14:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    5d18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    5d1c:	b15b      	cbz	r3, 5d36 <parsePreset+0xc56>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    5d1e:	68b2      	ldr	r2, [r6, #8]
    5d20:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    5d22:	ed92 7a00 	vldr	s14, [r2]
    5d26:	ed93 6a00 	vldr	s12, [r3]
    5d2a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    5d2e:	ee27 7a06 	vmul.f32	s14, s14, s12
    5d32:	eee7 7a26 	vfma.f32	s15, s14, s13
					if (mappings[i].hookActive[j])
    5d36:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    5d3a:	b15b      	cbz	r3, 5d54 <parsePreset+0xc74>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    5d3c:	6932      	ldr	r2, [r6, #16]
    5d3e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    5d40:	ed92 7a00 	vldr	s14, [r2]
    5d44:	ed93 6a00 	vldr	s12, [r3]
    5d48:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    5d4c:	ee27 7a06 	vmul.f32	s14, s14, s12
    5d50:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    5d54:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    5d58:	3604      	adds	r6, #4
    5d5a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    5d5e:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    5d60:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    5d64:	ee37 0a80 	vadd.f32	s0, s15, s0
    5d68:	4798      	blx	r3
    5d6a:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    5d6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5d72:	4629      	mov	r1, r5
    5d74:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    5d78:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    5d7a:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    5d7c:	ed92 0a02 	vldr	s0, [r2, #8]
    5d80:	695a      	ldr	r2, [r3, #20]
    5d82:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    5d84:	783b      	ldrb	r3, [r7, #0]
    5d86:	42ab      	cmp	r3, r5
    5d88:	dcb5      	bgt.n	5cf6 <parsePreset+0xc16>
	for (int i = 0; i < numMappings; i++)
    5d8a:	4baf      	ldr	r3, [pc, #700]	; (6048 <parsePreset+0xf68>)
    5d8c:	781a      	ldrb	r2, [r3, #0]
    5d8e:	e7a3      	b.n	5cd8 <parsePreset+0xbf8>
			bufferIndex += 5;
    5d90:	f10a 0305 	add.w	r3, sl, #5
    5d94:	fa1f fa83 	uxth.w	sl, r3
    5d98:	e76b      	b.n	5c72 <parsePreset+0xb92>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5d9a:	f1a7 0314 	sub.w	r3, r7, #20
    5d9e:	2b03      	cmp	r3, #3
    5da0:	f200 8087 	bhi.w	5eb2 <parsePreset+0xdd2>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    5da4:	4ba9      	ldr	r3, [pc, #676]	; (604c <parsePreset+0xf6c>)
    5da6:	f04f 0201 	mov.w	r2, #1
    5daa:	443b      	add	r3, r7
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5dac:	3f04      	subs	r7, #4
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    5dae:	f803 2c14 	strb.w	r2, [r3, #-20]
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5db2:	e6f1      	b.n	5b98 <parsePreset+0xab8>
		uint8_t whichHook = 0;
    5db4:	4635      	mov	r5, r6
    5db6:	e691      	b.n	5adc <parsePreset+0x9fc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    5db8:	234c      	movs	r3, #76	; 0x4c
    5dba:	00ea      	lsls	r2, r5, #3
    5dbc:	49a4      	ldr	r1, [pc, #656]	; (6050 <parsePreset+0xf70>)
    5dbe:	fb03 f304 	mul.w	r3, r3, r4
    5dc2:	441a      	add	r2, r3
    5dc4:	445a      	add	r2, fp
    5dc6:	6291      	str	r1, [r2, #40]	; 0x28
    5dc8:	1d2a      	adds	r2, r5, #4
    5dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5dce:	445b      	add	r3, fp
    5dd0:	6059      	str	r1, [r3, #4]
    5dd2:	e724      	b.n	5c1e <parsePreset+0xb3e>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5dd4:	9b05      	ldr	r3, [sp, #20]
    5dd6:	2b03      	cmp	r3, #3
    5dd8:	f63f af06 	bhi.w	5be8 <parsePreset+0xb08>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5ddc:	4b9b      	ldr	r3, [pc, #620]	; (604c <parsePreset+0xf6c>)
    5dde:	f04f 0201 	mov.w	r2, #1
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5de2:	2f0b      	cmp	r7, #11
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5de4:	4443      	add	r3, r8
    5de6:	f803 2c14 	strb.w	r2, [r3, #-20]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5dea:	f63f af00 	bhi.w	5bee <parsePreset+0xb0e>
					for (int v = 0; v < numStringsThisBoard; v++)
    5dee:	4b99      	ldr	r3, [pc, #612]	; (6054 <parsePreset+0xf74>)
    5df0:	781a      	ldrb	r2, [r3, #0]
					uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    5df2:	b2fb      	uxtb	r3, r7
    5df4:	9309      	str	r3, [sp, #36]	; 0x24
					for (int v = 0; v < numStringsThisBoard; v++)
    5df6:	2a00      	cmp	r2, #0
    5df8:	f000 80bf 	beq.w	5f7a <parsePreset+0xe9a>
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5dfc:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    5e00:	4995      	ldr	r1, [pc, #596]	; (6058 <parsePreset+0xf78>)
    5e02:	9808      	ldr	r0, [sp, #32]
    5e04:	0092      	lsls	r2, r2, #2
    5e06:	9b07      	ldr	r3, [sp, #28]
    5e08:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5e0c:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    5e10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5e14:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    5e18:	3108      	adds	r1, #8
    5e1a:	e9cd 3c0a 	strd	r3, ip, [sp, #40]	; 0x28
    5e1e:	f002 ff7b 	bl	8d18 <__memcpy_veneer>
    5e22:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
					tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5e28:	9800      	ldr	r0, [sp, #0]
    5e2a:	eba2 030c 	sub.w	r3, r2, ip
    5e2e:	9a07      	ldr	r2, [sp, #28]
    5e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5e34:	ed93 0a02 	vldr	s0, [r3, #8]
    5e38:	f003 f84e 	bl	8ed8 <__tExpSmooth_setVal_veneer>
					knobFrozen[whichMacro] = 1;
    5e3c:	4b87      	ldr	r3, [pc, #540]	; (605c <parsePreset+0xf7c>)
    5e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5e40:	f04f 0101 	mov.w	r1, #1
    5e44:	5499      	strb	r1, [r3, r2]
    5e46:	e6d2      	b.n	5bee <parsePreset+0xb0e>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e48:	9b05      	ldr	r3, [sp, #20]
    5e4a:	2b03      	cmp	r3, #3
    5e4c:	f63f aee4 	bhi.w	5c18 <parsePreset+0xb38>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5e50:	4b7e      	ldr	r3, [pc, #504]	; (604c <parsePreset+0xf6c>)
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5e52:	2f0b      	cmp	r7, #11
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5e54:	4498      	add	r8, r3
    5e56:	f04f 0301 	mov.w	r3, #1
    5e5a:	f808 3c14 	strb.w	r3, [r8, #-20]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5e5e:	f63f aede 	bhi.w	5c1e <parsePreset+0xb3e>
					for (int v = 0; v < numStringsThisBoard; v++)
    5e62:	4b7c      	ldr	r3, [pc, #496]	; (6054 <parsePreset+0xf74>)
					uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    5e64:	b2ff      	uxtb	r7, r7
					for (int v = 0; v < numStringsThisBoard; v++)
    5e66:	781a      	ldrb	r2, [r3, #0]
    5e68:	2a00      	cmp	r2, #0
    5e6a:	f000 8081 	beq.w	5f70 <parsePreset+0xe90>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    5e6e:	9908      	ldr	r1, [sp, #32]
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5e70:	f107 0803 	add.w	r8, r7, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    5e74:	4b78      	ldr	r3, [pc, #480]	; (6058 <parsePreset+0xf78>)
    5e76:	0092      	lsls	r2, r2, #2
    5e78:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
    5e7c:	9b07      	ldr	r3, [sp, #28]
    5e7e:	ebc8 01c8 	rsb	r1, r8, r8, lsl #3
    5e82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5e86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    5e8a:	3108      	adds	r1, #8
    5e8c:	9303      	str	r3, [sp, #12]
    5e8e:	f002 ff43 	bl	8d18 <__memcpy_veneer>
    5e92:	9b03      	ldr	r3, [sp, #12]
					tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5e94:	9a07      	ldr	r2, [sp, #28]
    5e96:	eba3 0308 	sub.w	r3, r3, r8
    5e9a:	9800      	ldr	r0, [sp, #0]
    5e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5ea0:	ed93 0a02 	vldr	s0, [r3, #8]
    5ea4:	f003 f818 	bl	8ed8 <__tExpSmooth_setVal_veneer>
					knobFrozen[whichMacro] = 1;
    5ea8:	4b6c      	ldr	r3, [pc, #432]	; (605c <parsePreset+0xf7c>)
    5eaa:	f04f 0201 	mov.w	r2, #1
    5eae:	55da      	strb	r2, [r3, r7]
    5eb0:	e6b5      	b.n	5c1e <parsePreset+0xb3e>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    5eb2:	3f04      	subs	r7, #4
    5eb4:	2f0b      	cmp	r7, #11
    5eb6:	f63f ae6f 	bhi.w	5b98 <parsePreset+0xab8>
			for (int v = 0; v < numStringsThisBoard; v++)
    5eba:	4b66      	ldr	r3, [pc, #408]	; (6054 <parsePreset+0xf74>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    5ebc:	fa5f f887 	uxtb.w	r8, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    5ec0:	781a      	ldrb	r2, [r3, #0]
    5ec2:	2a00      	cmp	r2, #0
    5ec4:	d046      	beq.n	5f54 <parsePreset+0xe74>
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5ec6:	f108 0c03 	add.w	ip, r8, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    5eca:	4963      	ldr	r1, [pc, #396]	; (6058 <parsePreset+0xf78>)
    5ecc:	9808      	ldr	r0, [sp, #32]
    5ece:	0092      	lsls	r2, r2, #2
    5ed0:	9b07      	ldr	r3, [sp, #28]
    5ed2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5ed6:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    5eda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5ede:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    5ee2:	3108      	adds	r1, #8
    5ee4:	e9cd 3c03 	strd	r3, ip, [sp, #12]
    5ee8:	f002 ff16 	bl	8d18 <__memcpy_veneer>
    5eec:	f8dd c010 	ldr.w	ip, [sp, #16]
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5ef0:	9a03      	ldr	r2, [sp, #12]
    5ef2:	9b07      	ldr	r3, [sp, #28]
    5ef4:	eba2 020c 	sub.w	r2, r2, ip
    5ef8:	9800      	ldr	r0, [sp, #0]
    5efa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5efe:	ed92 0a02 	vldr	s0, [r2, #8]
    5f02:	f002 ffe9 	bl	8ed8 <__tExpSmooth_setVal_veneer>
			knobFrozen[whichMacro] = 1;
    5f06:	4b55      	ldr	r3, [pc, #340]	; (605c <parsePreset+0xf7c>)
    5f08:	f04f 0201 	mov.w	r2, #1
    5f0c:	f803 2008 	strb.w	r2, [r3, r8]
    5f10:	e642      	b.n	5b98 <parsePreset+0xab8>
	presetWaitingToParse = 0;
    5f12:	4b53      	ldr	r3, [pc, #332]	; (6060 <parsePreset+0xf80>)
    5f14:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    5f16:	f89d 2004 	ldrb.w	r2, [sp, #4]
	presetWaitingToParse = 0;
    5f1a:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    5f1c:	4b51      	ldr	r3, [pc, #324]	; (6064 <parsePreset+0xf84>)
	audioMasterLevel = 1.0f;
    5f1e:	4952      	ldr	r1, [pc, #328]	; (6068 <parsePreset+0xf88>)
	currentActivePreset = presetNumber;
    5f20:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    5f22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	oscToTick = NUM_OSC;
    5f26:	4a51      	ldr	r2, [pc, #324]	; (606c <parsePreset+0xf8c>)
	audioMasterLevel = 1.0f;
    5f28:	600b      	str	r3, [r1, #0]
	oscToTick = NUM_OSC;
    5f2a:	2103      	movs	r1, #3
	overSampled = 1;
    5f2c:	4b50      	ldr	r3, [pc, #320]	; (6070 <parsePreset+0xf90>)
	oscToTick = NUM_OSC;
    5f2e:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    5f30:	2201      	movs	r2, #1
    5f32:	701a      	strb	r2, [r3, #0]
    5f34:	b662      	cpsie	i
	presetReady = 1;
    5f36:	4b4f      	ldr	r3, [pc, #316]	; (6074 <parsePreset+0xf94>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    5f38:	4611      	mov	r1, r2
    5f3a:	484f      	ldr	r0, [pc, #316]	; (6078 <parsePreset+0xf98>)
	presetReady = 1;
    5f3c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    5f3e:	f002 ff57 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    5f42:	4a4e      	ldr	r2, [pc, #312]	; (607c <parsePreset+0xf9c>)
	receivingI2C = 0;
    5f44:	4b4e      	ldr	r3, [pc, #312]	; (6080 <parsePreset+0xfa0>)
	diskBusy = 0;
    5f46:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    5f48:	701c      	strb	r4, [r3, #0]
}
    5f4a:	b00d      	add	sp, #52	; 0x34
    5f4c:	ecbd 8b02 	vpop	{d8}
    5f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5f54:	f108 0c03 	add.w	ip, r8, #3
    5f58:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    5f5c:	9303      	str	r3, [sp, #12]
    5f5e:	e7c7      	b.n	5ef0 <parsePreset+0xe10>
		pedalControlsMaster = 1;
    5f60:	2301      	movs	r3, #1
    5f62:	e58a      	b.n	5a7a <parsePreset+0x99a>
			oscsEnabled[i] = 0;
    5f64:	2200      	movs	r2, #0
    5f66:	f7ff bbae 	b.w	56c6 <parsePreset+0x5e6>
    5f6a:	2200      	movs	r2, #0
    5f6c:	f7ff bb54 	b.w	5618 <parsePreset+0x538>
			tExpSmooth_setVal(&knobSmoothers[i], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    5f70:	f107 0803 	add.w	r8, r7, #3
    5f74:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    5f78:	e78c      	b.n	5e94 <parsePreset+0xdb4>
    5f7a:	f103 0c03 	add.w	ip, r3, #3
    5f7e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    5f82:	920a      	str	r2, [sp, #40]	; 0x28
    5f84:	e74f      	b.n	5e26 <parsePreset+0xd46>
			  shapeTick[i] = &triTick;
    5f86:	4a3f      	ldr	r2, [pc, #252]	; (6084 <parsePreset+0xfa4>)
    5f88:	483f      	ldr	r0, [pc, #252]	; (6088 <parsePreset+0xfa8>)
    5f8a:	6090      	str	r0, [r2, #8]
			  break;
    5f8c:	f7ff bb8d 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &sineTick;
    5f90:	4a3c      	ldr	r2, [pc, #240]	; (6084 <parsePreset+0xfa4>)
    5f92:	483e      	ldr	r0, [pc, #248]	; (608c <parsePreset+0xfac>)
    5f94:	6090      	str	r0, [r2, #8]
			  break;
    5f96:	f7ff bb88 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &pulseTick;
    5f9a:	4a3a      	ldr	r2, [pc, #232]	; (6084 <parsePreset+0xfa4>)
    5f9c:	483c      	ldr	r0, [pc, #240]	; (6090 <parsePreset+0xfb0>)
    5f9e:	6090      	str	r0, [r2, #8]
			  break;
    5fa0:	f7ff bb83 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &sawTick;
    5fa4:	4a37      	ldr	r2, [pc, #220]	; (6084 <parsePreset+0xfa4>)
    5fa6:	483b      	ldr	r0, [pc, #236]	; (6094 <parsePreset+0xfb4>)
    5fa8:	6090      	str	r0, [r2, #8]
			  break;
    5faa:	f7ff bb7e 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &sineTriTick;
    5fae:	4a35      	ldr	r2, [pc, #212]	; (6084 <parsePreset+0xfa4>)
    5fb0:	4839      	ldr	r0, [pc, #228]	; (6098 <parsePreset+0xfb8>)
    5fb2:	6090      	str	r0, [r2, #8]
			  break;
    5fb4:	f7ff bb79 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &sawSquareTick;
    5fb8:	4a32      	ldr	r2, [pc, #200]	; (6084 <parsePreset+0xfa4>)
    5fba:	4838      	ldr	r0, [pc, #224]	; (609c <parsePreset+0xfbc>)
    5fbc:	6090      	str	r0, [r2, #8]
			  break;
    5fbe:	f7ff bb74 	b.w	56aa <parsePreset+0x5ca>
			  shapeTick[i] = &userTick;
    5fc2:	4a30      	ldr	r2, [pc, #192]	; (6084 <parsePreset+0xfa4>)
    5fc4:	4836      	ldr	r0, [pc, #216]	; (60a0 <parsePreset+0xfc0>)
    5fc6:	6050      	str	r0, [r2, #4]
			  break;
    5fc8:	f7ff bb18 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &triTick;
    5fcc:	4a2d      	ldr	r2, [pc, #180]	; (6084 <parsePreset+0xfa4>)
    5fce:	482e      	ldr	r0, [pc, #184]	; (6088 <parsePreset+0xfa8>)
    5fd0:	6050      	str	r0, [r2, #4]
			  break;
    5fd2:	f7ff bb13 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &sineTick;
    5fd6:	4a2b      	ldr	r2, [pc, #172]	; (6084 <parsePreset+0xfa4>)
    5fd8:	482c      	ldr	r0, [pc, #176]	; (608c <parsePreset+0xfac>)
    5fda:	6050      	str	r0, [r2, #4]
			  break;
    5fdc:	f7ff bb0e 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &pulseTick;
    5fe0:	4a28      	ldr	r2, [pc, #160]	; (6084 <parsePreset+0xfa4>)
    5fe2:	482b      	ldr	r0, [pc, #172]	; (6090 <parsePreset+0xfb0>)
    5fe4:	6050      	str	r0, [r2, #4]
			  break;
    5fe6:	f7ff bb09 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &sawTick;
    5fea:	4a26      	ldr	r2, [pc, #152]	; (6084 <parsePreset+0xfa4>)
    5fec:	4829      	ldr	r0, [pc, #164]	; (6094 <parsePreset+0xfb4>)
    5fee:	6050      	str	r0, [r2, #4]
			  break;
    5ff0:	f7ff bb04 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &sineTriTick;
    5ff4:	4a23      	ldr	r2, [pc, #140]	; (6084 <parsePreset+0xfa4>)
    5ff6:	4828      	ldr	r0, [pc, #160]	; (6098 <parsePreset+0xfb8>)
    5ff8:	6050      	str	r0, [r2, #4]
			  break;
    5ffa:	f7ff baff 	b.w	55fc <parsePreset+0x51c>
			  shapeTick[i] = &userTick;
    5ffe:	4b21      	ldr	r3, [pc, #132]	; (6084 <parsePreset+0xfa4>)
    6000:	4a27      	ldr	r2, [pc, #156]	; (60a0 <parsePreset+0xfc0>)
    6002:	601a      	str	r2, [r3, #0]
			  break;
    6004:	f7ff bad1 	b.w	55aa <parsePreset+0x4ca>
			  shapeTick[i] = &triTick;
    6008:	4b1e      	ldr	r3, [pc, #120]	; (6084 <parsePreset+0xfa4>)
    600a:	4a1f      	ldr	r2, [pc, #124]	; (6088 <parsePreset+0xfa8>)
    600c:	601a      	str	r2, [r3, #0]
			  break;
    600e:	f7ff bacc 	b.w	55aa <parsePreset+0x4ca>
			  shapeTick[i] = &sineTick;
    6012:	4b1c      	ldr	r3, [pc, #112]	; (6084 <parsePreset+0xfa4>)
    6014:	4a1d      	ldr	r2, [pc, #116]	; (608c <parsePreset+0xfac>)
    6016:	601a      	str	r2, [r3, #0]
			  break;
    6018:	f7ff bac7 	b.w	55aa <parsePreset+0x4ca>
			  shapeTick[i] = &pulseTick;
    601c:	4b19      	ldr	r3, [pc, #100]	; (6084 <parsePreset+0xfa4>)
    601e:	4a1c      	ldr	r2, [pc, #112]	; (6090 <parsePreset+0xfb0>)
    6020:	601a      	str	r2, [r3, #0]
			  break;
    6022:	f7ff bac2 	b.w	55aa <parsePreset+0x4ca>
			  shapeTick[i] = &sawTick;
    6026:	4b17      	ldr	r3, [pc, #92]	; (6084 <parsePreset+0xfa4>)
    6028:	4a1a      	ldr	r2, [pc, #104]	; (6094 <parsePreset+0xfb4>)
    602a:	601a      	str	r2, [r3, #0]
			  break;
    602c:	f7ff babd 	b.w	55aa <parsePreset+0x4ca>
			  shapeTick[i] = &sineTriTick;
    6030:	4b14      	ldr	r3, [pc, #80]	; (6084 <parsePreset+0xfa4>)
    6032:	4a19      	ldr	r2, [pc, #100]	; (6098 <parsePreset+0xfb8>)
    6034:	601a      	str	r2, [r3, #0]
			  break;
    6036:	f7ff bab8 	b.w	55aa <parsePreset+0x4ca>
    603a:	4c1a      	ldr	r4, [pc, #104]	; (60a4 <parsePreset+0xfc4>)
    603c:	f7ff b9dd 	b.w	53fa <parsePreset+0x31a>
    6040:	f8df 8064 	ldr.w	r8, [pc, #100]	; 60a8 <parsePreset+0xfc8>
    6044:	f7ff b9c7 	b.w	53d6 <parsePreset+0x2f6>
    6048:	20019968 	.word	0x20019968
    604c:	20005070 	.word	0x20005070
    6050:	200006dc 	.word	0x200006dc
    6054:	2000000d 	.word	0x2000000d
    6058:	200146d0 	.word	0x200146d0
    605c:	20005218 	.word	0x20005218
    6060:	2001aaac 	.word	0x2001aaac
    6064:	200006d8 	.word	0x200006d8
    6068:	200006d4 	.word	0x200006d4
    606c:	20000024 	.word	0x20000024
    6070:	20000025 	.word	0x20000025
    6074:	20005764 	.word	0x20005764
    6078:	58020000 	.word	0x58020000
    607c:	20014b60 	.word	0x20014b60
    6080:	2001aec0 	.word	0x2001aec0
    6084:	20005bf4 	.word	0x20005bf4
    6088:	00000ae1 	.word	0x00000ae1
    608c:	00000aa1 	.word	0x00000aa1
    6090:	00000a41 	.word	0x00000a41
    6094:	00000a01 	.word	0x00000a01
    6098:	000009a1 	.word	0x000009a1
    609c:	00000961 	.word	0x00000961
    60a0:	00000b41 	.word	0x00000b41
    60a4:	2001aa88 	.word	0x2001aa88
    60a8:	20019978 	.word	0x20019978
			params[i].objectNumber = 3;
    60ac:	f04f 0303 	mov.w	r3, #3
    60b0:	763b      	strb	r3, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    60b2:	ed97 0a02 	vldr	s0, [r7, #8]
    60b6:	2100      	movs	r1, #0
    60b8:	7e38      	ldrb	r0, [r7, #24]
    60ba:	697b      	ldr	r3, [r7, #20]
    60bc:	4798      	blx	r3
    60be:	ed97 0a03 	vldr	s0, [r7, #12]
    60c2:	697b      	ldr	r3, [r7, #20]
    60c4:	2101      	movs	r1, #1
    60c6:	7e38      	ldrb	r0, [r7, #24]
    60c8:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    60ca:	e447      	b.n	595c <parsePreset+0x87c>
			params[i].objectNumber = 2;
    60cc:	2302      	movs	r3, #2
    60ce:	763b      	strb	r3, [r7, #24]
    60d0:	e7ef      	b.n	60b2 <parsePreset+0xfd2>
			params[i].objectNumber = 1;
    60d2:	f04f 0301 	mov.w	r3, #1
    60d6:	763b      	strb	r3, [r7, #24]
    60d8:	e7eb      	b.n	60b2 <parsePreset+0xfd2>
    60da:	bf00      	nop
    60dc:	f3af 8000 	nop.w

000060e0 <handleSPI>:
	if (foundBrainFirmware)
    60e0:	49bb      	ldr	r1, [pc, #748]	; (63d0 <handleSPI+0x2f0>)
	interruptChecker = 1;
    60e2:	2301      	movs	r3, #1
{
    60e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    60e8:	4cba      	ldr	r4, [pc, #744]	; (63d4 <handleSPI+0x2f4>)
{
    60ea:	4605      	mov	r5, r0
    60ec:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    60f0:	780a      	ldrb	r2, [r1, #0]
{
    60f2:	b085      	sub	sp, #20
	interruptChecker = 1;
    60f4:	7023      	strb	r3, [r4, #0]
	if (foundBrainFirmware)
    60f6:	b382      	cbz	r2, 615a <handleSPI+0x7a>
		if (brainFirmwareEndSignal)
    60f8:	f8df 8300 	ldr.w	r8, [pc, #768]	; 63fc <handleSPI+0x31c>
    60fc:	f898 7000 	ldrb.w	r7, [r8]
    6100:	2f00      	cmp	r7, #0
    6102:	f000 817d 	beq.w	6400 <handleSPI+0x320>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    6106:	4bb4      	ldr	r3, [pc, #720]	; (63d8 <handleSPI+0x2f8>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6108:	4ab4      	ldr	r2, [pc, #720]	; (63dc <handleSPI+0x2fc>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    610a:	441d      	add	r5, r3
    610c:	23f9      	movs	r3, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    610e:	6812      	ldr	r2, [r2, #0]
			brainFirmwareSendInProgress = 0;
    6110:	48b3      	ldr	r0, [pc, #716]	; (63e0 <handleSPI+0x300>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    6112:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    6116:	2300      	movs	r3, #0
			foundBrainFirmware = 0;
    6118:	700b      	strb	r3, [r1, #0]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    611a:	0a11      	lsrs	r1, r2, #8
			brainFirmwareSendInProgress = 0;
    611c:	7003      	strb	r3, [r0, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    611e:	0e10      	lsrs	r0, r2, #24
			brainFirmwareEndSignal = 0;
    6120:	f888 3000 	strb.w	r3, [r8]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    6124:	0c13      	lsrs	r3, r2, #16
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6126:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6128:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    612c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    6130:	f04f 03fe 	mov.w	r3, #254	; 0xfe
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6134:	bf18      	it	ne
    6136:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    6138:	f885 1043 	strb.w	r1, [r5, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    613c:	f885 305f 	strb.w	r3, [r5, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6140:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    6144:	2200      	movs	r2, #0
    6146:	f44f 6100 	mov.w	r1, #2048	; 0x800
    614a:	48a6      	ldr	r0, [pc, #664]	; (63e4 <handleSPI+0x304>)
}
    614c:	b005      	add	sp, #20
    614e:	ecbd 8b02 	vpop	{d8}
    6152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    6156:	f002 be4b 	b.w	8df0 <__HAL_GPIO_WritePin_veneer>
		if (SPI_LEVERS[offset] == ReceivingPitches)
    615a:	4c9f      	ldr	r4, [pc, #636]	; (63d8 <handleSPI+0x2f8>)
    615c:	5c23      	ldrb	r3, [r4, r0]
    615e:	2b01      	cmp	r3, #1
    6160:	f000 81bd 	beq.w	64de <handleSPI+0x3fe>
		else if (SPI_LEVERS[offset] == ReceivingPreset)
    6164:	2b02      	cmp	r3, #2
    6166:	f000 8409 	beq.w	697c <handleSPI+0x89c>
		else if (SPI_LEVERS[offset] == ReceivingKnobs)
    616a:	2b03      	cmp	r3, #3
    616c:	f000 82b4 	beq.w	66d8 <handleSPI+0x5f8>
		else if (SPI_LEVERS[offset] == ReceivingEnd)
    6170:	2bfd      	cmp	r3, #253	; 0xfd
    6172:	f000 84e5 	beq.w	6b40 <handleSPI+0xa60>
		else if (SPI_LEVERS[offset] == ReceivingSingleParamChange)
    6176:	2b06      	cmp	r3, #6
    6178:	f000 8522 	beq.w	6bc0 <handleSPI+0xae0>
		else if (SPI_LEVERS[offset] == ReceivingMappingChange)
    617c:	2b07      	cmp	r3, #7
    617e:	f000 845d 	beq.w	6a3c <handleSPI+0x95c>
			if (boardNumber == 0)
    6182:	4b99      	ldr	r3, [pc, #612]	; (63e8 <handleSPI+0x308>)
    6184:	781e      	ldrb	r6, [r3, #0]
    6186:	2e00      	cmp	r6, #0
    6188:	d1dc      	bne.n	6144 <handleSPI+0x64>
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    618a:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    618c:	4b97      	ldr	r3, [pc, #604]	; (63ec <handleSPI+0x30c>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    618e:	21fd      	movs	r1, #253	; 0xfd
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6190:	4d97      	ldr	r5, [pc, #604]	; (63f0 <handleSPI+0x310>)
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6192:	781a      	ldrb	r2, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6194:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6198:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    619a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    619e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61a2:	4a94      	ldr	r2, [pc, #592]	; (63f4 <handleSPI+0x314>)
    61a4:	0049      	lsls	r1, r1, #1
    61a6:	5c51      	ldrb	r1, [r2, r1]
    61a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    61ac:	7819      	ldrb	r1, [r3, #0]
    61ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61b6:	7849      	ldrb	r1, [r1, #1]
    61b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    61bc:	7819      	ldrb	r1, [r3, #0]
    61be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61c6:	7889      	ldrb	r1, [r1, #2]
    61c8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    61cc:	7819      	ldrb	r1, [r3, #0]
    61ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61d6:	78c9      	ldrb	r1, [r1, #3]
    61d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    61dc:	7819      	ldrb	r1, [r3, #0]
    61de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61e6:	7909      	ldrb	r1, [r1, #4]
    61e8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    61ec:	7819      	ldrb	r1, [r3, #0]
    61ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    61f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    61f6:	7949      	ldrb	r1, [r1, #5]
    61f8:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    61fc:	7819      	ldrb	r1, [r3, #0]
    61fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6206:	7989      	ldrb	r1, [r1, #6]
    6208:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    620c:	7819      	ldrb	r1, [r3, #0]
    620e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6212:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6216:	79c9      	ldrb	r1, [r1, #7]
    6218:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    621c:	7819      	ldrb	r1, [r3, #0]
    621e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6222:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6226:	7a09      	ldrb	r1, [r1, #8]
    6228:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    622c:	7819      	ldrb	r1, [r3, #0]
    622e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6232:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6236:	7a49      	ldrb	r1, [r1, #9]
    6238:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    623c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    623e:	782f      	ldrb	r7, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    6240:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6244:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    6248:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    624c:	7a89      	ldrb	r1, [r1, #10]
    624e:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    6252:	7819      	ldrb	r1, [r3, #0]
    6254:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6258:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    625c:	7ac9      	ldrb	r1, [r1, #11]
    625e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    6262:	7819      	ldrb	r1, [r3, #0]
    6264:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6268:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    626c:	7b09      	ldrb	r1, [r1, #12]
    626e:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6272:	7819      	ldrb	r1, [r3, #0]
    6274:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6278:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    627c:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
				whichMacroToSendName = (whichMacroToSendName + 1);
    6280:	3701      	adds	r7, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6282:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    6284:	b2ff      	uxtb	r7, r7
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6286:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    628a:	781a      	ldrb	r2, [r3, #0]
				if (whichMacroToSendName >= 8)
    628c:	2f07      	cmp	r7, #7
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    628e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    6292:	ea4f 1002 	mov.w	r0, r2, lsl #4
    6296:	4a58      	ldr	r2, [pc, #352]	; (63f8 <handleSPI+0x318>)
    6298:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    629c:	5c10      	ldrb	r0, [r2, r0]
    629e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    62a2:	7818      	ldrb	r0, [r3, #0]
    62a4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    62a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
    62ac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    62b0:	4410      	add	r0, r2
    62b2:	7840      	ldrb	r0, [r0, #1]
    62b4:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    62b8:	7818      	ldrb	r0, [r3, #0]
    62ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    62be:	ea4f 1000 	mov.w	r0, r0, lsl #4
    62c2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    62c6:	4410      	add	r0, r2
    62c8:	7880      	ldrb	r0, [r0, #2]
    62ca:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    62ce:	7818      	ldrb	r0, [r3, #0]
    62d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    62d4:	ea4f 1000 	mov.w	r0, r0, lsl #4
    62d8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    62dc:	4410      	add	r0, r2
    62de:	78c0      	ldrb	r0, [r0, #3]
    62e0:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    62e4:	7818      	ldrb	r0, [r3, #0]
    62e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    62ea:	ea4f 1000 	mov.w	r0, r0, lsl #4
    62ee:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    62f2:	4410      	add	r0, r2
    62f4:	7900      	ldrb	r0, [r0, #4]
    62f6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    62fa:	7818      	ldrb	r0, [r3, #0]
    62fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6300:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6304:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6308:	4410      	add	r0, r2
    630a:	7940      	ldrb	r0, [r0, #5]
    630c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    6310:	7818      	ldrb	r0, [r3, #0]
    6312:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6316:	ea4f 1000 	mov.w	r0, r0, lsl #4
    631a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    631e:	4410      	add	r0, r2
    6320:	7980      	ldrb	r0, [r0, #6]
    6322:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    6326:	7818      	ldrb	r0, [r3, #0]
    6328:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    632c:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6330:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6334:	4410      	add	r0, r2
    6336:	79c0      	ldrb	r0, [r0, #7]
    6338:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    633c:	7818      	ldrb	r0, [r3, #0]
    633e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6342:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6346:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    634a:	4410      	add	r0, r2
    634c:	7a00      	ldrb	r0, [r0, #8]
    634e:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    6352:	7818      	ldrb	r0, [r3, #0]
    6354:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6358:	ea4f 1000 	mov.w	r0, r0, lsl #4
    635c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6360:	4410      	add	r0, r2
    6362:	7a40      	ldrb	r0, [r0, #9]
    6364:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
    6368:	7818      	ldrb	r0, [r3, #0]
    636a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    636e:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6372:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6376:	4410      	add	r0, r2
    6378:	7a80      	ldrb	r0, [r0, #10]
    637a:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
    637e:	7818      	ldrb	r0, [r3, #0]
    6380:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6384:	ea4f 1000 	mov.w	r0, r0, lsl #4
    6388:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    638c:	4410      	add	r0, r2
    638e:	7ac0      	ldrb	r0, [r0, #11]
    6390:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
    6394:	7818      	ldrb	r0, [r3, #0]
    6396:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    639a:	ea4f 1000 	mov.w	r0, r0, lsl #4
    639e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    63a2:	4410      	add	r0, r2
    63a4:	7b00      	ldrb	r0, [r0, #12]
    63a6:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
    63aa:	7818      	ldrb	r0, [r3, #0]
    63ac:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    63b0:	ea4f 1000 	mov.w	r0, r0, lsl #4
    63b4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    63b8:	440a      	add	r2, r1
    63ba:	7b52      	ldrb	r2, [r2, #13]
    63bc:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    63c0:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    63c4:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 8)
    63c8:	f200 82c2 	bhi.w	6950 <handleSPI+0x870>
				whichMacroToSendName = (whichMacroToSendName + 1);
    63cc:	702f      	strb	r7, [r5, #0]
    63ce:	e6b9      	b.n	6144 <handleSPI+0x64>
    63d0:	20016ce4 	.word	0x20016ce4
    63d4:	20016ce8 	.word	0x20016ce8
    63d8:	30000140 	.word	0x30000140
    63dc:	20014b20 	.word	0x20014b20
    63e0:	20014b1d 	.word	0x20014b1d
    63e4:	58020c00 	.word	0x58020c00
    63e8:	20014b15 	.word	0x20014b15
    63ec:	2001cf31 	.word	0x2001cf31
    63f0:	2001cf30 	.word	0x2001cf30
    63f4:	30032000 	.word	0x30032000
    63f8:	30032380 	.word	0x30032380
    63fc:	20014b1c 	.word	0x20014b1c
		else if (brainFirmwareSendInProgress)
    6400:	4aa8      	ldr	r2, [pc, #672]	; (66a4 <handleSPI+0x5c4>)
    6402:	7811      	ldrb	r1, [r2, #0]
    6404:	2900      	cmp	r1, #0
    6406:	f000 8134 	beq.w	6672 <handleSPI+0x592>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    640a:	4ca7      	ldr	r4, [pc, #668]	; (66a8 <handleSPI+0x5c8>)
    640c:	23fb      	movs	r3, #251	; 0xfb
    640e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 66d4 <handleSPI+0x5f4>
    6412:	4ea6      	ldr	r6, [pc, #664]	; (66ac <handleSPI+0x5cc>)
    6414:	4404      	add	r4, r0
    6416:	4da6      	ldr	r5, [pc, #664]	; (66b0 <handleSPI+0x5d0>)
    6418:	f8b9 0000 	ldrh.w	r0, [r9]
    641c:	6832      	ldr	r2, [r6, #0]
    641e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    6422:	f815 c002 	ldrb.w	ip, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    6426:	f102 0a01 	add.w	sl, r2, #1
	if (('0' <= value) && (value <= '9'))
    642a:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    642e:	f815 e00a 	ldrb.w	lr, [r5, sl]
	if (('0' <= value) && (value <= '9'))
    6432:	b2db      	uxtb	r3, r3
    6434:	2b09      	cmp	r3, #9
    6436:	f240 8277 	bls.w	6928 <handleSPI+0x848>
	if (('a' <= value) && (value <= 'f'))
    643a:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
    643e:	2b05      	cmp	r3, #5
    6440:	f240 8275 	bls.w	692e <handleSPI+0x84e>
	if (('A' <= value) && (value <= 'F'))
    6444:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
    6448:	2b05      	cmp	r3, #5
    644a:	f240 827b 	bls.w	6944 <handleSPI+0x864>
    644e:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    6450:	f1ae 0130 	sub.w	r1, lr, #48	; 0x30
    6454:	b2c9      	uxtb	r1, r1
    6456:	2909      	cmp	r1, #9
    6458:	f240 8263 	bls.w	6922 <handleSPI+0x842>
	if (('a' <= value) && (value <= 'f'))
    645c:	f1ae 0161 	sub.w	r1, lr, #97	; 0x61
    6460:	2905      	cmp	r1, #5
    6462:	f240 826a 	bls.w	693a <handleSPI+0x85a>
	if (('A' <= value) && (value <= 'F'))
    6466:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
    646a:	2905      	cmp	r1, #5
    646c:	f240 8257 	bls.w	691e <handleSPI+0x83e>
				if (positionInRowLine < 294)
    6470:	f5b0 7f93 	cmp.w	r0, #294	; 0x126
    6474:	f0c0 823a 	bcc.w	68ec <handleSPI+0x80c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6478:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
    647c:	f000 82cc 	beq.w	6a18 <handleSPI+0x938>
    6480:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    6484:	f04f 0000 	mov.w	r0, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6488:	bf08      	it	eq
    648a:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    648c:	18ab      	adds	r3, r5, r2
    648e:	789b      	ldrb	r3, [r3, #2]
    6490:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6492:	bf08      	it	eq
    6494:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6496:	18ab      	adds	r3, r5, r2
    6498:	78db      	ldrb	r3, [r3, #3]
    649a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    649c:	bf08      	it	eq
    649e:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64a0:	18ab      	adds	r3, r5, r2
    64a2:	791b      	ldrb	r3, [r3, #4]
    64a4:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64a6:	bf08      	it	eq
    64a8:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64aa:	18ab      	adds	r3, r5, r2
    64ac:	795b      	ldrb	r3, [r3, #5]
    64ae:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64b0:	bf08      	it	eq
    64b2:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64b4:	18ab      	adds	r3, r5, r2
    64b6:	799b      	ldrb	r3, [r3, #6]
    64b8:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64ba:	bf08      	it	eq
    64bc:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64be:	18ab      	adds	r3, r5, r2
    64c0:	79db      	ldrb	r3, [r3, #7]
    64c2:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64c4:	bf08      	it	eq
    64c6:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64c8:	18ab      	adds	r3, r5, r2
    64ca:	7a1b      	ldrb	r3, [r3, #8]
    64cc:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64ce:	bf08      	it	eq
    64d0:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    64d2:	18ab      	adds	r3, r5, r2
    64d4:	7a5b      	ldrb	r3, [r3, #9]
    64d6:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    64d8:	bf08      	it	eq
    64da:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    64dc:	e7a1      	b.n	6422 <handleSPI+0x342>
			 for (int i = 0; i < numStringsThisBoard; i++)
    64de:	4b75      	ldr	r3, [pc, #468]	; (66b4 <handleSPI+0x5d4>)
    64e0:	7818      	ldrb	r0, [r3, #0]
    64e2:	2800      	cmp	r0, #0
    64e4:	f000 80b2 	beq.w	664c <handleSPI+0x56c>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    64e8:	4973      	ldr	r1, [pc, #460]	; (66b8 <handleSPI+0x5d8>)
			 uint8_t currentByte = offset+1;
    64ea:	1c6b      	adds	r3, r5, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    64ec:	ed9f 6a73 	vldr	s12, [pc, #460]	; 66bc <handleSPI+0x5dc>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    64f0:	680a      	ldr	r2, [r1, #0]
    64f2:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    64f4:	eddf 6a72 	vldr	s13, [pc, #456]	; 66c0 <handleSPI+0x5e0>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    64f8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    64fc:	5cd2      	ldrb	r2, [r2, r3]
    64fe:	0212      	lsls	r2, r2, #8
    6500:	ee07 2a90 	vmov	s15, r2
    6504:	680a      	ldr	r2, [r1, #0]
    6506:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    650a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    650e:	441a      	add	r2, r3
    6510:	7852      	ldrb	r2, [r2, #1]
    6512:	ee07 2a90 	vmov	s15, r2
    6516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    651a:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    651e:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6522:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    652a:	d507      	bpl.n	653c <handleSPI+0x45c>
    652c:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6534:	dd02      	ble.n	653c <handleSPI+0x45c>
					stringMIDIPitches[i] = myPitch;
    6536:	4a63      	ldr	r2, [pc, #396]	; (66c4 <handleSPI+0x5e4>)
    6538:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    653c:	2801      	cmp	r0, #1
    653e:	f000 8085 	beq.w	664c <handleSPI+0x56c>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6542:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6544:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 66bc <handleSPI+0x5dc>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6548:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    654a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 66c0 <handleSPI+0x5e0>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    654e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6552:	5cd2      	ldrb	r2, [r2, r3]
    6554:	0212      	lsls	r2, r2, #8
    6556:	ee07 2a90 	vmov	s15, r2
    655a:	680a      	ldr	r2, [r1, #0]
    655c:	3201      	adds	r2, #1
    655e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6562:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6566:	441a      	add	r2, r3
    6568:	7852      	ldrb	r2, [r2, #1]
    656a:	ee07 2a90 	vmov	s15, r2
    656e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6572:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6576:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    657a:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6582:	d507      	bpl.n	6594 <handleSPI+0x4b4>
    6584:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    658c:	dd02      	ble.n	6594 <handleSPI+0x4b4>
					stringMIDIPitches[i] = myPitch;
    658e:	4a4d      	ldr	r2, [pc, #308]	; (66c4 <handleSPI+0x5e4>)
    6590:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6594:	2802      	cmp	r0, #2
    6596:	d059      	beq.n	664c <handleSPI+0x56c>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6598:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    659a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 66bc <handleSPI+0x5dc>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    659e:	3202      	adds	r2, #2
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    65a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 66c0 <handleSPI+0x5e0>
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    65a4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    65a8:	5cd2      	ldrb	r2, [r2, r3]
    65aa:	0212      	lsls	r2, r2, #8
    65ac:	ee07 2a90 	vmov	s15, r2
    65b0:	680a      	ldr	r2, [r1, #0]
    65b2:	3202      	adds	r2, #2
    65b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    65b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    65bc:	441a      	add	r2, r3
    65be:	7852      	ldrb	r2, [r2, #1]
    65c0:	ee07 2a90 	vmov	s15, r2
    65c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    65c8:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    65cc:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    65d0:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    65d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65d8:	d507      	bpl.n	65ea <handleSPI+0x50a>
    65da:	eeb5 7a40 	vcmp.f32	s14, #0.0
    65de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65e2:	dd02      	ble.n	65ea <handleSPI+0x50a>
					stringMIDIPitches[i] = myPitch;
    65e4:	4a37      	ldr	r2, [pc, #220]	; (66c4 <handleSPI+0x5e4>)
    65e6:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    65ea:	2803      	cmp	r0, #3
    65ec:	d02e      	beq.n	664c <handleSPI+0x56c>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    65ee:	ed9f 6a34 	vldr	s12, [pc, #208]	; 66c0 <handleSPI+0x5e0>
			 for (int i = 0; i < numStringsThisBoard; i++)
    65f2:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    65f4:	eddf 6a31 	vldr	s13, [pc, #196]	; 66bc <handleSPI+0x5dc>
					stringMIDIPitches[i] = myPitch;
    65f8:	4f32      	ldr	r7, [pc, #200]	; (66c4 <handleSPI+0x5e4>)
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    65fa:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    65fc:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    6600:	4432      	add	r2, r6
    6602:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6606:	5cd2      	ldrb	r2, [r2, r3]
    6608:	0212      	lsls	r2, r2, #8
    660a:	ee07 2a90 	vmov	s15, r2
    660e:	680a      	ldr	r2, [r1, #0]
    6610:	4432      	add	r2, r6
    6612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6616:	3601      	adds	r6, #1
    6618:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    661c:	441a      	add	r2, r3
    661e:	7852      	ldrb	r2, [r2, #1]
    6620:	ee07 2a90 	vmov	s15, r2
    6624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6628:	ee77 7a27 	vadd.f32	s15, s14, s15
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    662c:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6630:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6638:	dd06      	ble.n	6648 <handleSPI+0x568>
    663a:	eef4 7a66 	vcmp.f32	s15, s13
    663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6642:	d501      	bpl.n	6648 <handleSPI+0x568>
					stringMIDIPitches[i] = myPitch;
    6644:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6648:	4286      	cmp	r6, r0
    664a:	dbd6      	blt.n	65fa <handleSPI+0x51a>
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    664c:	481e      	ldr	r0, [pc, #120]	; (66c8 <handleSPI+0x5e8>)
    664e:	f44f 7100 	mov.w	r1, #512	; 0x200
    6652:	2201      	movs	r2, #1
			 whichBar = 0;
    6654:	2600      	movs	r6, #0
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    6656:	f002 fbcb 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
			 whichBar = 0;
    665a:	4b1c      	ldr	r3, [pc, #112]	; (66cc <handleSPI+0x5ec>)
			 updateStateFromSPIMessage(offset);
    665c:	4628      	mov	r0, r5
			 whichBar = 0;
    665e:	701e      	strb	r6, [r3, #0]
				updateStateFromSPIMessage(offset);
    6660:	f7f9 fece 	bl	400 <updateStateFromSPIMessage>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    6664:	2200      	movs	r2, #0
    6666:	f44f 7100 	mov.w	r1, #512	; 0x200
    666a:	4817      	ldr	r0, [pc, #92]	; (66c8 <handleSPI+0x5e8>)
    666c:	f002 fbc0 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
    6670:	e587      	b.n	6182 <handleSPI+0xa2>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    6672:	490d      	ldr	r1, [pc, #52]	; (66a8 <handleSPI+0x5c8>)
    6674:	20fc      	movs	r0, #252	; 0xfc
    6676:	4e0d      	ldr	r6, [pc, #52]	; (66ac <handleSPI+0x5cc>)
			brainFirmwareSendInProgress = 1;
    6678:	7013      	strb	r3, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    667a:	440d      	add	r5, r1
    667c:	4a14      	ldr	r2, [pc, #80]	; (66d0 <handleSPI+0x5f0>)
    667e:	6831      	ldr	r1, [r6, #0]
    6680:	f102 0464 	add.w	r4, r2, #100	; 0x64
    6684:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
				if (brainFirmwareBuffer[i] ==  0x3a)
    6688:	f812 0f01 	ldrb.w	r0, [r2, #1]!
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    668c:	283a      	cmp	r0, #58	; 0x3a
    668e:	bf08      	it	eq
    6690:	4619      	moveq	r1, r3
			for (uint8_t i = 0; i<100; i++)
    6692:	42a2      	cmp	r2, r4
    6694:	f103 0301 	add.w	r3, r3, #1
    6698:	d1f6      	bne.n	6688 <handleSPI+0x5a8>
			positionInRowLine = 0;
    669a:	4b0e      	ldr	r3, [pc, #56]	; (66d4 <handleSPI+0x5f4>)
    669c:	2200      	movs	r2, #0
    669e:	6031      	str	r1, [r6, #0]
    66a0:	801a      	strh	r2, [r3, #0]
    66a2:	e54f      	b.n	6144 <handleSPI+0x64>
    66a4:	20014b1d 	.word	0x20014b1d
    66a8:	30000140 	.word	0x30000140
    66ac:	20014b18 	.word	0x20014b18
    66b0:	c3e00000 	.word	0xc3e00000
    66b4:	2000000d 	.word	0x2000000d
    66b8:	200050d4 	.word	0x200050d4
    66bc:	478bff74 	.word	0x478bff74
    66c0:	3b000080 	.word	0x3b000080
    66c4:	20014860 	.word	0x20014860
    66c8:	58021800 	.word	0x58021800
    66cc:	20014940 	.word	0x20014940
    66d0:	c3dfffff 	.word	0xc3dfffff
    66d4:	2001aa94 	.word	0x2001aa94
			 uint8_t currentByte = offset+1;
    66d8:	f100 0801 	add.w	r8, r0, #1
					if (knobFrozen[i])
    66dc:	4fa0      	ldr	r7, [pc, #640]	; (6960 <handleSPI+0x880>)
				float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
    66de:	fa5f f888 	uxtb.w	r8, r8
					if (knobFrozen[i])
    66e2:	783b      	ldrb	r3, [r7, #0]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    66e4:	f814 9008 	ldrb.w	r9, [r4, r8]
					if (knobFrozen[i])
    66e8:	2b00      	cmp	r3, #0
    66ea:	f000 819a 	beq.w	6a22 <handleSPI+0x942>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    66ee:	4e9d      	ldr	r6, [pc, #628]	; (6964 <handleSPI+0x884>)
    66f0:	7833      	ldrb	r3, [r6, #0]
    66f2:	1c9a      	adds	r2, r3, #2
    66f4:	4591      	cmp	r9, r2
    66f6:	dc02      	bgt.n	66fe <handleSPI+0x61e>
    66f8:	3301      	adds	r3, #1
    66fa:	4599      	cmp	r9, r3
    66fc:	dc01      	bgt.n	6702 <handleSPI+0x622>
							knobFrozen[i] = 0;
    66fe:	2300      	movs	r3, #0
    6700:	703b      	strb	r3, [r7, #0]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6702:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    6706:	f886 9000 	strb.w	r9, [r6]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    670a:	f893 9001 	ldrb.w	r9, [r3, #1]
					if (knobFrozen[i])
    670e:	787b      	ldrb	r3, [r7, #1]
    6710:	2b00      	cmp	r3, #0
    6712:	f000 835d 	beq.w	6dd0 <handleSPI+0xcf0>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6716:	7873      	ldrb	r3, [r6, #1]
    6718:	1c9a      	adds	r2, r3, #2
    671a:	4591      	cmp	r9, r2
    671c:	dc02      	bgt.n	6724 <handleSPI+0x644>
    671e:	3301      	adds	r3, #1
    6720:	4599      	cmp	r9, r3
    6722:	dc01      	bgt.n	6728 <handleSPI+0x648>
							knobFrozen[i] = 0;
    6724:	2300      	movs	r3, #0
    6726:	707b      	strb	r3, [r7, #1]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6728:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    672c:	f886 9001 	strb.w	r9, [r6, #1]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6730:	f893 9002 	ldrb.w	r9, [r3, #2]
					if (knobFrozen[i])
    6734:	78bb      	ldrb	r3, [r7, #2]
    6736:	2b00      	cmp	r3, #0
    6738:	f000 8362 	beq.w	6e00 <handleSPI+0xd20>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    673c:	78b3      	ldrb	r3, [r6, #2]
    673e:	1c9a      	adds	r2, r3, #2
    6740:	4591      	cmp	r9, r2
    6742:	dc02      	bgt.n	674a <handleSPI+0x66a>
    6744:	3301      	adds	r3, #1
    6746:	4599      	cmp	r9, r3
    6748:	dc01      	bgt.n	674e <handleSPI+0x66e>
							knobFrozen[i] = 0;
    674a:	2300      	movs	r3, #0
    674c:	70bb      	strb	r3, [r7, #2]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    674e:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    6752:	f886 9002 	strb.w	r9, [r6, #2]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6756:	f893 9003 	ldrb.w	r9, [r3, #3]
					if (knobFrozen[i])
    675a:	78fb      	ldrb	r3, [r7, #3]
    675c:	2b00      	cmp	r3, #0
    675e:	f000 8343 	beq.w	6de8 <handleSPI+0xd08>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6762:	78f3      	ldrb	r3, [r6, #3]
    6764:	1c9a      	adds	r2, r3, #2
    6766:	4591      	cmp	r9, r2
    6768:	dc02      	bgt.n	6770 <handleSPI+0x690>
    676a:	3301      	adds	r3, #1
    676c:	4599      	cmp	r9, r3
    676e:	dc01      	bgt.n	6774 <handleSPI+0x694>
							knobFrozen[i] = 0;
    6770:	2300      	movs	r3, #0
    6772:	70fb      	strb	r3, [r7, #3]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6774:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    6778:	f886 9003 	strb.w	r9, [r6, #3]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    677c:	f893 9004 	ldrb.w	r9, [r3, #4]
					if (knobFrozen[i])
    6780:	793b      	ldrb	r3, [r7, #4]
    6782:	2b00      	cmp	r3, #0
    6784:	f000 839c 	beq.w	6ec0 <handleSPI+0xde0>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6788:	7933      	ldrb	r3, [r6, #4]
    678a:	1c9a      	adds	r2, r3, #2
    678c:	4591      	cmp	r9, r2
    678e:	dc02      	bgt.n	6796 <handleSPI+0x6b6>
    6790:	3301      	adds	r3, #1
    6792:	4599      	cmp	r9, r3
    6794:	dc01      	bgt.n	679a <handleSPI+0x6ba>
							knobFrozen[i] = 0;
    6796:	2300      	movs	r3, #0
    6798:	713b      	strb	r3, [r7, #4]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    679a:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    679e:	f886 9004 	strb.w	r9, [r6, #4]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    67a2:	f893 9005 	ldrb.w	r9, [r3, #5]
					if (knobFrozen[i])
    67a6:	797b      	ldrb	r3, [r7, #5]
    67a8:	2b00      	cmp	r3, #0
    67aa:	f000 837d 	beq.w	6ea8 <handleSPI+0xdc8>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    67ae:	7973      	ldrb	r3, [r6, #5]
    67b0:	1c9a      	adds	r2, r3, #2
    67b2:	4591      	cmp	r9, r2
    67b4:	dc02      	bgt.n	67bc <handleSPI+0x6dc>
    67b6:	3301      	adds	r3, #1
    67b8:	4599      	cmp	r9, r3
    67ba:	dc01      	bgt.n	67c0 <handleSPI+0x6e0>
							knobFrozen[i] = 0;
    67bc:	2300      	movs	r3, #0
    67be:	717b      	strb	r3, [r7, #5]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    67c0:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    67c4:	f886 9005 	strb.w	r9, [r6, #5]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    67c8:	f893 9006 	ldrb.w	r9, [r3, #6]
					if (knobFrozen[i])
    67cc:	79bb      	ldrb	r3, [r7, #6]
    67ce:	2b00      	cmp	r3, #0
    67d0:	f000 835e 	beq.w	6e90 <handleSPI+0xdb0>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    67d4:	79b3      	ldrb	r3, [r6, #6]
    67d6:	1c9a      	adds	r2, r3, #2
    67d8:	4591      	cmp	r9, r2
    67da:	dc02      	bgt.n	67e2 <handleSPI+0x702>
    67dc:	3301      	adds	r3, #1
    67de:	4599      	cmp	r9, r3
    67e0:	dc01      	bgt.n	67e6 <handleSPI+0x706>
							knobFrozen[i] = 0;
    67e2:	2300      	movs	r3, #0
    67e4:	71bb      	strb	r3, [r7, #6]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    67e6:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    67ea:	f886 9006 	strb.w	r9, [r6, #6]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    67ee:	f893 9007 	ldrb.w	r9, [r3, #7]
					if (knobFrozen[i])
    67f2:	79fb      	ldrb	r3, [r7, #7]
    67f4:	2b00      	cmp	r3, #0
    67f6:	f000 833f 	beq.w	6e78 <handleSPI+0xd98>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    67fa:	79f3      	ldrb	r3, [r6, #7]
    67fc:	1c9a      	adds	r2, r3, #2
    67fe:	4591      	cmp	r9, r2
    6800:	dc02      	bgt.n	6808 <handleSPI+0x728>
    6802:	3301      	adds	r3, #1
    6804:	4599      	cmp	r9, r3
    6806:	dc01      	bgt.n	680c <handleSPI+0x72c>
							knobFrozen[i] = 0;
    6808:	2300      	movs	r3, #0
    680a:	71fb      	strb	r3, [r7, #7]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    680c:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    6810:	f886 9007 	strb.w	r9, [r6, #7]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6814:	f893 9008 	ldrb.w	r9, [r3, #8]
					if (knobFrozen[i])
    6818:	7a3b      	ldrb	r3, [r7, #8]
    681a:	2b00      	cmp	r3, #0
    681c:	f000 8320 	beq.w	6e60 <handleSPI+0xd80>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6820:	7a33      	ldrb	r3, [r6, #8]
    6822:	1c9a      	adds	r2, r3, #2
    6824:	4591      	cmp	r9, r2
    6826:	dc02      	bgt.n	682e <handleSPI+0x74e>
    6828:	3301      	adds	r3, #1
    682a:	4599      	cmp	r9, r3
    682c:	dc01      	bgt.n	6832 <handleSPI+0x752>
							knobFrozen[i] = 0;
    682e:	2300      	movs	r3, #0
    6830:	723b      	strb	r3, [r7, #8]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6832:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    6836:	f886 9008 	strb.w	r9, [r6, #8]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    683a:	f893 9009 	ldrb.w	r9, [r3, #9]
					if (knobFrozen[i])
    683e:	7a7b      	ldrb	r3, [r7, #9]
    6840:	2b00      	cmp	r3, #0
    6842:	f000 8301 	beq.w	6e48 <handleSPI+0xd68>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6846:	7a73      	ldrb	r3, [r6, #9]
    6848:	1c9a      	adds	r2, r3, #2
    684a:	4591      	cmp	r9, r2
    684c:	dc02      	bgt.n	6854 <handleSPI+0x774>
    684e:	3301      	adds	r3, #1
    6850:	4599      	cmp	r9, r3
    6852:	dc01      	bgt.n	6858 <handleSPI+0x778>
							knobFrozen[i] = 0;
    6854:	2300      	movs	r3, #0
    6856:	727b      	strb	r3, [r7, #9]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6858:	eb04 0308 	add.w	r3, r4, r8
					prevKnobByte[i] = newByte;
    685c:	f886 9009 	strb.w	r9, [r6, #9]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6860:	f893 900a 	ldrb.w	r9, [r3, #10]
					if (knobFrozen[i])
    6864:	7abb      	ldrb	r3, [r7, #10]
    6866:	2b00      	cmp	r3, #0
    6868:	f000 82e2 	beq.w	6e30 <handleSPI+0xd50>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    686c:	7ab3      	ldrb	r3, [r6, #10]
    686e:	1c9a      	adds	r2, r3, #2
    6870:	4591      	cmp	r9, r2
    6872:	dc02      	bgt.n	687a <handleSPI+0x79a>
    6874:	3301      	adds	r3, #1
    6876:	4599      	cmp	r9, r3
    6878:	dc01      	bgt.n	687e <handleSPI+0x79e>
							knobFrozen[i] = 0;
    687a:	2300      	movs	r3, #0
    687c:	72bb      	strb	r3, [r7, #10]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    687e:	44a0      	add	r8, r4
					if (knobFrozen[i])
    6880:	7afb      	ldrb	r3, [r7, #11]
					prevKnobByte[i] = newByte;
    6882:	f886 900a 	strb.w	r9, [r6, #10]
					uint8_t newByte = SPI_LEVERS[i + currentByte];
    6886:	f898 800b 	ldrb.w	r8, [r8, #11]
					if (knobFrozen[i])
    688a:	2b00      	cmp	r3, #0
    688c:	f000 82c4 	beq.w	6e18 <handleSPI+0xd38>
						if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] + 2)))
    6890:	7af3      	ldrb	r3, [r6, #11]
    6892:	1c9a      	adds	r2, r3, #2
    6894:	4590      	cmp	r8, r2
    6896:	dc02      	bgt.n	689e <handleSPI+0x7be>
    6898:	3301      	adds	r3, #1
    689a:	4598      	cmp	r8, r3
    689c:	dc01      	bgt.n	68a2 <handleSPI+0x7c2>
							knobFrozen[i] = 0;
    689e:	2300      	movs	r3, #0
    68a0:	72fb      	strb	r3, [r7, #11]
				currentByte += 12;
    68a2:	f105 070d 	add.w	r7, r5, #13
					prevKnobByte[i] = newByte;
    68a6:	f886 800b 	strb.w	r8, [r6, #11]
				for (int i = 0; i < 10; i++)
    68aa:	4e2f      	ldr	r6, [pc, #188]	; (6968 <handleSPI+0x888>)
    68ac:	b2ff      	uxtb	r7, r7
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    68ae:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 696c <handleSPI+0x88c>
    68b2:	f106 0828 	add.w	r8, r6, #40	; 0x28
    68b6:	3f01      	subs	r7, #1
    68b8:	4427      	add	r7, r4
    68ba:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    68be:	4630      	mov	r0, r6
				for (int i = 0; i < 10; i++)
    68c0:	3604      	adds	r6, #4
					tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    68c2:	ee00 3a10 	vmov	s0, r3
    68c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    68ca:	ee20 0a08 	vmul.f32	s0, s0, s16
    68ce:	f000 fd57 	bl	7380 <tExpSmooth_setDest>
				for (int i = 0; i < 10; i++)
    68d2:	45b0      	cmp	r8, r6
    68d4:	d1f1      	bne.n	68ba <handleSPI+0x7da>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    68d6:	2201      	movs	r2, #1
    68d8:	4825      	ldr	r0, [pc, #148]	; (6970 <handleSPI+0x890>)
    68da:	f44f 7100 	mov.w	r1, #512	; 0x200
    68de:	f002 fa87 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
				whichBar = 1;
    68e2:	4b24      	ldr	r3, [pc, #144]	; (6974 <handleSPI+0x894>)
    68e4:	2201      	movs	r2, #1
				updateStateFromSPIMessage(offset);
    68e6:	4628      	mov	r0, r5
				whichBar = 1;
    68e8:	701a      	strb	r2, [r3, #0]
    68ea:	e6b9      	b.n	6660 <handleSPI+0x580>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    68ec:	19e1      	adds	r1, r4, r7
			for (int i = 0; i < 30; i++)
    68ee:	3701      	adds	r7, #1
				positionInRowLine++;
    68f0:	3001      	adds	r0, #1
					brainFirmwareBufferIndex += 2;
    68f2:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    68f4:	2f1e      	cmp	r7, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    68f6:	f881 3041 	strb.w	r3, [r1, #65]	; 0x41
				positionInRowLine++;
    68fa:	b280      	uxth	r0, r0
			for (int i = 0; i < 30; i++)
    68fc:	f47f ad91 	bne.w	6422 <handleSPI+0x342>
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    6900:	4b1d      	ldr	r3, [pc, #116]	; (6978 <handleSPI+0x898>)
			SPI_LEVERS_TX[offset+31] = 254;
    6902:	21fe      	movs	r1, #254	; 0xfe
    6904:	6032      	str	r2, [r6, #0]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    6906:	681b      	ldr	r3, [r3, #0]
    6908:	f8a9 0000 	strh.w	r0, [r9]
    690c:	429a      	cmp	r2, r3
			SPI_LEVERS_TX[offset+31] = 254;
    690e:	f884 105f 	strb.w	r1, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    6912:	f4ff ac17 	bcc.w	6144 <handleSPI+0x64>
				brainFirmwareEndSignal = 1;
    6916:	2301      	movs	r3, #1
    6918:	f888 3000 	strb.w	r3, [r8]
    691c:	e412      	b.n	6144 <handleSPI+0x64>
		return (uint8_t) (10 + value - 'A');
    691e:	f1ae 0137 	sub.w	r1, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6922:	430b      	orrs	r3, r1
    6924:	b25b      	sxtb	r3, r3
		return (uint8_t) (10 + value - 'A');
    6926:	e5a3      	b.n	6470 <handleSPI+0x390>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6928:	011b      	lsls	r3, r3, #4
    692a:	b25b      	sxtb	r3, r3
    692c:	e590      	b.n	6450 <handleSPI+0x370>
		return (uint8_t) (10 + value - 'a');
    692e:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6932:	f343 0303 	sbfx	r3, r3, #0, #4
    6936:	011b      	lsls	r3, r3, #4
		return (uint8_t) (10 + value - 'a');
    6938:	e58a      	b.n	6450 <handleSPI+0x370>
    693a:	f1ae 0157 	sub.w	r1, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    693e:	430b      	orrs	r3, r1
    6940:	b25b      	sxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    6942:	e595      	b.n	6470 <handleSPI+0x390>
		return (uint8_t) (10 + value - 'A');
    6944:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6948:	f343 0303 	sbfx	r3, r3, #0, #4
    694c:	011b      	lsls	r3, r3, #4
		return (uint8_t) (10 + value - 'A');
    694e:	e57f      	b.n	6450 <handleSPI+0x370>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    6950:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    6952:	702e      	strb	r6, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    6954:	3201      	adds	r2, #1
    6956:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    695a:	701a      	strb	r2, [r3, #0]
    695c:	f7ff bbf2 	b.w	6144 <handleSPI+0x64>
    6960:	20005218 	.word	0x20005218
    6964:	2001aab4 	.word	0x2001aab4
    6968:	20005724 	.word	0x20005724
    696c:	3b808081 	.word	0x3b808081
    6970:	58021800 	.word	0x58021800
    6974:	20014940 	.word	0x20014940
    6978:	20014b20 	.word	0x20014b20
			 if (writingState != ReceivingPreset)
    697c:	497c      	ldr	r1, [pc, #496]	; (6b70 <handleSPI+0xa90>)
    697e:	7808      	ldrb	r0, [r1, #0]
    6980:	2802      	cmp	r0, #2
    6982:	f000 80f3 	beq.w	6b6c <handleSPI+0xa8c>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    6986:	700b      	strb	r3, [r1, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    6988:	4b7a      	ldr	r3, [pc, #488]	; (6b74 <handleSPI+0xa94>)
    698a:	f013 0107 	ands.w	r1, r3, #7
    698e:	f040 82e1 	bne.w	6f54 <handleSPI+0xe74>
						audioOutBuffer[i] = 0;
    6992:	e9c3 1100 	strd	r1, r1, [r3]
    6996:	e9c3 1102 	strd	r1, r1, [r3, #8]
    699a:	e9c3 1104 	strd	r1, r1, [r3, #16]
    699e:	e9c3 1106 	strd	r1, r1, [r3, #24]
    69a2:	e9c3 1108 	strd	r1, r1, [r3, #32]
    69a6:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
    69aa:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30
    69ae:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    69b2:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
    69b6:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
    69ba:	e9c3 1114 	strd	r1, r1, [r3, #80]	; 0x50
    69be:	e9c3 1116 	strd	r1, r1, [r3, #88]	; 0x58
    69c2:	e9c3 1118 	strd	r1, r1, [r3, #96]	; 0x60
    69c6:	e9c3 111a 	strd	r1, r1, [r3, #104]	; 0x68
    69ca:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
    69ce:	e9c3 111e 	strd	r1, r1, [r3, #120]	; 0x78
				 diskBusy = 1;
    69d2:	4a69      	ldr	r2, [pc, #420]	; (6b78 <handleSPI+0xa98>)
    69d4:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    69d6:	4b69      	ldr	r3, [pc, #420]	; (6b7c <handleSPI+0xa9c>)
				 diskBusy = 1;
    69d8:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    69da:	2200      	movs	r2, #0
				 bufferPos = 0;
    69dc:	4868      	ldr	r0, [pc, #416]	; (6b80 <handleSPI+0xaa0>)
				 audioMasterLevel = 0.0f;
    69de:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    69e0:	2300      	movs	r3, #0
    69e2:	8003      	strh	r3, [r0, #0]
			 presetNumberToSave = SPI_LEVERS[offset + 1];
    69e4:	1963      	adds	r3, r4, r5
    69e6:	4a67      	ldr	r2, [pc, #412]	; (6b84 <handleSPI+0xaa4>)
    69e8:	4f67      	ldr	r7, [pc, #412]	; (6b88 <handleSPI+0xaa8>)
    69ea:	785b      	ldrb	r3, [r3, #1]
    69ec:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 6bb4 <handleSPI+0xad4>
    69f0:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    69f2:	1cab      	adds	r3, r5, #2
    69f4:	b2db      	uxtb	r3, r3
    69f6:	1e59      	subs	r1, r3, #1
    69f8:	441f      	add	r7, r3
    69fa:	4421      	add	r1, r4
				 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    69fc:	8803      	ldrh	r3, [r0, #0]
    69fe:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    6a02:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    6a04:	42b9      	cmp	r1, r7
				 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
    6a06:	f103 0201 	add.w	r2, r3, #1
    6a0a:	f80c 6003 	strb.w	r6, [ip, r3]
    6a0e:	b293      	uxth	r3, r2
    6a10:	8003      	strh	r3, [r0, #0]
			 for (int i = 0; i < 28; i++)
    6a12:	d1f3      	bne.n	69fc <handleSPI+0x91c>
    6a14:	f7ff bbb5 	b.w	6182 <handleSPI+0xa2>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6a18:	18ab      	adds	r3, r5, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6a1a:	4652      	mov	r2, sl
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6a1c:	f893 e002 	ldrb.w	lr, [r3, #2]
    6a20:	e52e      	b.n	6480 <handleSPI+0x3a0>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    6a22:	ee07 9a90 	vmov	s15, r9
    6a26:	ed9f 0a59 	vldr	s0, [pc, #356]	; 6b8c <handleSPI+0xaac>
    6a2a:	4859      	ldr	r0, [pc, #356]	; (6b90 <handleSPI+0xab0>)
    6a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6a30:	4e58      	ldr	r6, [pc, #352]	; (6b94 <handleSPI+0xab4>)
    6a32:	ee27 0a80 	vmul.f32	s0, s15, s0
    6a36:	f000 fca3 	bl	7380 <tExpSmooth_setDest>
    6a3a:	e662      	b.n	6702 <handleSPI+0x622>
			if (presetReady)
    6a3c:	4b56      	ldr	r3, [pc, #344]	; (6b98 <handleSPI+0xab8>)
    6a3e:	681b      	ldr	r3, [r3, #0]
    6a40:	2b00      	cmp	r3, #0
    6a42:	f43f ab9e 	beq.w	6182 <handleSPI+0xa2>
				uint8_t currentByte = offset+1;
    6a46:	1c43      	adds	r3, r0, #1
    6a48:	4f54      	ldr	r7, [pc, #336]	; (6b9c <handleSPI+0xabc>)
				uint8_t foundOne = 0;
    6a4a:	4692      	mov	sl, r2
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    6a4c:	f04f 0820 	mov.w	r8, #32
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    6a50:	b2db      	uxtb	r3, r3
    6a52:	5ce1      	ldrb	r1, [r4, r3]
    6a54:	4423      	add	r3, r4
    6a56:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    6a58:	f893 c005 	ldrb.w	ip, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    6a5c:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    6a60:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS[currentByte+2]);
    6a62:	f893 e002 	ldrb.w	lr, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    6a66:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS[currentByte+3]);
    6a6a:	f893 9003 	ldrb.w	r9, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    6a6e:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS[currentByte+4]<< 8) + SPI_LEVERS[currentByte+5]);
    6a70:	4639      	mov	r1, r7
    6a72:	fa0f fc8c 	sxth.w	ip, ip
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6a76:	4613      	mov	r3, r2
					if (mappings[j].destNumber == destNumber)
    6a78:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6a7a:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    6a7c:	4286      	cmp	r6, r0
    6a7e:	d102      	bne.n	6a86 <handleSPI+0x9a6>
						whichMapping = j;
    6a80:	b2da      	uxtb	r2, r3
						foundOne = 1;
    6a82:	f04f 0a01 	mov.w	sl, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    6a86:	28ff      	cmp	r0, #255	; 0xff
    6a88:	d103      	bne.n	6a92 <handleSPI+0x9b2>
    6a8a:	4598      	cmp	r8, r3
    6a8c:	bfc8      	it	gt
    6a8e:	fa5f f883 	uxtbgt.w	r8, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6a92:	3301      	adds	r3, #1
    6a94:	2b20      	cmp	r3, #32
    6a96:	d1ef      	bne.n	6a78 <handleSPI+0x998>
				if (foundOne == 0)
    6a98:	f1ba 0f00 	cmp.w	sl, #0
    6a9c:	d10f      	bne.n	6abe <handleSPI+0x9de>
					numMappings++;
    6a9e:	4940      	ldr	r1, [pc, #256]	; (6ba0 <handleSPI+0xac0>)
					mappings[whichMapping].destNumber = destNumber;
    6aa0:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    6aa2:	4642      	mov	r2, r8
					numMappings++;
    6aa4:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    6aa6:	fb03 f308 	mul.w	r3, r3, r8
					numMappings++;
    6aaa:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    6aac:	54fe      	strb	r6, [r7, r3]
					mappings[whichMapping].dest = &params[destNumber];
    6aae:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    6ab2:	443b      	add	r3, r7
					numMappings++;
    6ab4:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    6ab6:	493b      	ldr	r1, [pc, #236]	; (6ba4 <handleSPI+0xac4>)
    6ab8:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    6abc:	605e      	str	r6, [r3, #4]
				if (mappingChangeType == SourceID)
    6abe:	f1b9 0f00 	cmp.w	r9, #0
    6ac2:	f040 8341 	bne.w	7148 <handleSPI+0x1068>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    6ac6:	234c      	movs	r3, #76	; 0x4c
    6ac8:	2001      	movs	r0, #1
					if (source == 255)
    6aca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    6ace:	fb02 f303 	mul.w	r3, r2, r3
    6ad2:	eb07 0803 	add.w	r8, r7, r3
    6ad6:	eb08 060e 	add.w	r6, r8, lr
    6ada:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    6ade:	f000 836e 	beq.w	71be <handleSPI+0x10de>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 6bb8 <handleSPI+0xad8>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6ae6:	f10e 0104 	add.w	r1, lr, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6aea:	f10e 0a01 	add.w	sl, lr, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    6aee:	f1bc 0f03 	cmp.w	ip, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6af2:	eb08 0bcc 	add.w	fp, r8, ip, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6af6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 6bbc <handleSPI+0xadc>
    6afa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    6afe:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6b02:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    6b06:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6b0a:	4439      	add	r1, r7
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6b0c:	f847 b00a 	str.w	fp, [r7, sl]
    6b10:	f10b 0b04 	add.w	fp, fp, #4
    6b14:	443b      	add	r3, r7
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6b16:	f8c1 8004 	str.w	r8, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    6b1a:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    6b1e:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    6b22:	f300 8343 	bgt.w	71ac <handleSPI+0x10cc>
							mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    6b26:	f886 9020 	strb.w	r9, [r6, #32]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    6b2a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    6b2e:	2100      	movs	r1, #0
    6b30:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    6b34:	4472      	add	r2, lr
    6b36:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    6b3a:	63d9      	str	r1, [r3, #60]	; 0x3c
    6b3c:	f7ff bb21 	b.w	6182 <handleSPI+0xa2>
			if(writingState == ReceivingPreset)
    6b40:	4b0b      	ldr	r3, [pc, #44]	; (6b70 <handleSPI+0xa90>)
    6b42:	7819      	ldrb	r1, [r3, #0]
    6b44:	2902      	cmp	r1, #2
    6b46:	f47f ab1c 	bne.w	6182 <handleSPI+0xa2>
				 presetNumberToLoad = presetNumberToSave;
    6b4a:	480e      	ldr	r0, [pc, #56]	; (6b84 <handleSPI+0xaa4>)
				 writingState = 0;
    6b4c:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    6b4e:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    6b50:	4a0b      	ldr	r2, [pc, #44]	; (6b80 <handleSPI+0xaa0>)
				 presetNumberToLoad = presetNumberToSave;
    6b52:	4915      	ldr	r1, [pc, #84]	; (6ba8 <handleSPI+0xac8>)
    6b54:	b2db      	uxtb	r3, r3
    6b56:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    6b58:	8813      	ldrh	r3, [r2, #0]
    6b5a:	4914      	ldr	r1, [pc, #80]	; (6bac <handleSPI+0xacc>)
    6b5c:	b29b      	uxth	r3, r3
    6b5e:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    6b60:	8813      	ldrh	r3, [r2, #0]
    6b62:	4a13      	ldr	r2, [pc, #76]	; (6bb0 <handleSPI+0xad0>)
    6b64:	b29b      	uxth	r3, r3
    6b66:	6013      	str	r3, [r2, #0]
    6b68:	f7ff bb0b 	b.w	6182 <handleSPI+0xa2>
    6b6c:	4804      	ldr	r0, [pc, #16]	; (6b80 <handleSPI+0xaa0>)
    6b6e:	e739      	b.n	69e4 <handleSPI+0x904>
    6b70:	2001cf32 	.word	0x2001cf32
    6b74:	30000040 	.word	0x30000040
    6b78:	20014b60 	.word	0x20014b60
    6b7c:	200006d4 	.word	0x200006d4
    6b80:	20014b24 	.word	0x20014b24
    6b84:	2001aaa7 	.word	0x2001aaa7
    6b88:	3000015b 	.word	0x3000015b
    6b8c:	3b808081 	.word	0x3b808081
    6b90:	20005298 	.word	0x20005298
    6b94:	2001aab4 	.word	0x2001aab4
    6b98:	20005764 	.word	0x20005764
    6b9c:	20018d20 	.word	0x20018d20
    6ba0:	20019968 	.word	0x20019968
    6ba4:	20019978 	.word	0x20019978
    6ba8:	2001aaa6 	.word	0x2001aaa6
    6bac:	2001aaac 	.word	0x2001aaac
    6bb0:	2001aab0 	.word	0x2001aab0
    6bb4:	300001c0 	.word	0x300001c0
    6bb8:	200146d0 	.word	0x200146d0
    6bbc:	200006dc 	.word	0x200006dc
			if (presetReady)
    6bc0:	4bc7      	ldr	r3, [pc, #796]	; (6ee0 <handleSPI+0xe00>)
    6bc2:	681b      	ldr	r3, [r3, #0]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	f43f aadc 	beq.w	6182 <handleSPI+0xa2>
				uint8_t currentByte = offset+1;
    6bca:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6bcc:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 6ee4 <handleSPI+0xe04>
    6bd0:	4ec5      	ldr	r6, [pc, #788]	; (6ee8 <handleSPI+0xe08>)
				uint16_t whichParam = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    6bd2:	b2db      	uxtb	r3, r3
    6bd4:	18e2      	adds	r2, r4, r3
    6bd6:	5ce3      	ldrb	r3, [r4, r3]
    6bd8:	7857      	ldrb	r7, [r2, #1]
    6bda:	eb07 2703 	add.w	r7, r7, r3, lsl #8
				currentByte = currentByte + 2;
    6bde:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6be0:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS[currentByte]<< 8) + SPI_LEVERS[currentByte+1]);
    6be2:	b2bf      	uxth	r7, r7
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6be4:	18e1      	adds	r1, r4, r3
    6be6:	5ce2      	ldrb	r2, [r4, r3]
    6be8:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6bec:	784b      	ldrb	r3, [r1, #1]
    6bee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    6bf2:	f1a7 023f 	sub.w	r2, r7, #63	; 0x3f
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6bf6:	ee07 3a90 	vmov	s15, r3
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    6bfa:	b291      	uxth	r1, r2
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6bfc:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    6c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    6c04:	2918      	cmp	r1, #24
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS[currentByte] << 8) + SPI_LEVERS[currentByte+1]);
    6c06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    6c0e:	edc3 7a00 	vstr	s15, [r3]
    6c12:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    6c16:	d842      	bhi.n	6c9e <handleSPI+0xbbe>
    6c18:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    6c1c:	40cb      	lsrs	r3, r1
    6c1e:	07d8      	lsls	r0, r3, #31
    6c20:	d53d      	bpl.n	6c9e <handleSPI+0xbbe>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6c22:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    6c26:	4613      	mov	r3, r2
    6c28:	2a00      	cmp	r2, #0
					param *FXAlias = &params[whichParam + 1];
    6c2a:	f107 0201 	add.w	r2, r7, #1
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    6c32:	bfb8      	it	lt
    6c34:	f1a7 0338 	sublt.w	r3, r7, #56	; 0x38
					param *FXAlias = &params[whichParam + 1];
    6c38:	ebc2 09c2 	rsb	r9, r2, r2, lsl #3
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    6c3c:	10db      	asrs	r3, r3, #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6c3e:	fef8 7a67 	vrinta.f32	s15, s15
    6c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
					param *FXAlias = &params[whichParam + 1];
    6c46:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    6c4a:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    6c4e:	edcd 7a01 	vstr	s15, [sp, #4]
    6c52:	f89d 0004 	ldrb.w	r0, [sp, #4]
					if (effectType > FXLowpass)
    6c56:	280b      	cmp	r0, #11
    6c58:	d902      	bls.n	6c60 <handleSPI+0xb80>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    6c5a:	49a4      	ldr	r1, [pc, #656]	; (6eec <handleSPI+0xe0c>)
    6c5c:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    6c60:	fa5f f883 	uxtb.w	r8, r3
    6c64:	9201      	str	r2, [sp, #4]
    6c66:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    6c68:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    6c6c:	f001 ffec 	bl	8c48 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    6c70:	9a01      	ldr	r2, [sp, #4]
    6c72:	ebab 0302 	sub.w	r3, fp, r2
    6c76:	4a9e      	ldr	r2, [pc, #632]	; (6ef0 <handleSPI+0xe10>)
    6c78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6c7c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    6c80:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    6c84:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    6c86:	684b      	ldr	r3, [r1, #4]
    6c88:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    6c8c:	688b      	ldr	r3, [r1, #8]
    6c8e:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    6c92:	68cb      	ldr	r3, [r1, #12]
    6c94:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    6c98:	690b      	ldr	r3, [r1, #16]
    6c9a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
    6c9e:	ebaa 0807 	sub.w	r8, sl, r7
			 for (int i = 0; i < numStringsThisBoard; i++)
    6ca2:	f04f 0b00 	mov.w	fp, #0
    6ca6:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    6caa:	46c1      	mov	r9, r8
    6cac:	ecb8 0a01 	vldmia	r8!, {s0}
    6cb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
    6cb4:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    6cb6:	4659      	mov	r1, fp
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    6cb8:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    6cbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    6cc0:	f899 0018 	ldrb.w	r0, [r9, #24]
    6cc4:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6cc6:	f1bb 0f00 	cmp.w	fp, #0
    6cca:	f000 8105 	beq.w	6ed8 <handleSPI+0xdf8>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    6cce:	f1a7 0323 	sub.w	r3, r7, #35	; 0x23
    6cd2:	b299      	uxth	r1, r3
    6cd4:	291a      	cmp	r1, #26
    6cd6:	d821      	bhi.n	6d1c <handleSPI+0xc3c>
    6cd8:	4a86      	ldr	r2, [pc, #536]	; (6ef4 <handleSPI+0xe14>)
    6cda:	40ca      	lsrs	r2, r1
    6cdc:	07d1      	lsls	r1, r2, #31
    6cde:	d51d      	bpl.n	6d1c <handleSPI+0xc3c>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6ce0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    6ce4:	edd9 7a02 	vldr	s15, [r9, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6ce8:	4a83      	ldr	r2, [pc, #524]	; (6ef8 <handleSPI+0xe18>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6cea:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6cee:	fb82 1203 	smull	r1, r2, r2, r3
    6cf2:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6cf4:	fef8 7a67 	vrinta.f32	s15, s15
    6cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    6cfc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    6d00:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    6d04:	2a06      	cmp	r2, #6
    6d06:	d809      	bhi.n	6d1c <handleSPI+0xc3c>
    6d08:	e8df f002 	tbb	[pc, r2]
    6d0c:	4e535d58 	.word	0x4e535d58
    6d10:	4449      	.short	0x4449
    6d12:	04          	.byte	0x04
    6d13:	00          	.byte	0x00
			  shapeTick[i] = &userTick;
    6d14:	4a79      	ldr	r2, [pc, #484]	; (6efc <handleSPI+0xe1c>)
    6d16:	497a      	ldr	r1, [pc, #488]	; (6f00 <handleSPI+0xe20>)
    6d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    6d1c:	f1a7 0318 	sub.w	r3, r7, #24
    6d20:	b299      	uxth	r1, r3
    6d22:	291a      	cmp	r1, #26
    6d24:	f240 8137 	bls.w	6f96 <handleSPI+0xeb6>
				if ((whichParam == Filter1Type) || (whichParam == Filter1Type))
    6d28:	2f60      	cmp	r7, #96	; 0x60
    6d2a:	f040 815b 	bne.w	6fe4 <handleSPI+0xf04>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    6d2e:	f8df 8220 	ldr.w	r8, [pc, #544]	; 6f50 <handleSPI+0xe70>
    6d32:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					setFilterTypes(filterType, whichFilter);
    6d36:	2100      	movs	r1, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    6d38:	4643      	mov	r3, r8
    6d3a:	f108 0838 	add.w	r8, r8, #56	; 0x38
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6d3e:	460f      	mov	r7, r1
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    6d40:	edd3 7a00 	vldr	s15, [r3]
    6d44:	ee67 7a87 	vmul.f32	s15, s15, s14
    6d48:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    6d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6d50:	ee17 0a90 	vmov	r0, s15
    6d54:	f001 ff9c 	bl	8c90 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6d58:	4a6a      	ldr	r2, [pc, #424]	; (6f04 <handleSPI+0xe24>)
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    6d5a:	e9d2 3200 	ldrd	r3, r2, [r2]
    6d5e:	f8c6 2acc 	str.w	r2, [r6, #2764]	; 0xacc
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    6d62:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    6d66:	ed98 0a07 	vldr	s0, [r8, #28]
    6d6a:	4639      	mov	r1, r7
    6d6c:	f896 0aec 	ldrb.w	r0, [r6, #2796]	; 0xaec
    6d70:	f108 0804 	add.w	r8, r8, #4
    6d74:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    6d76:	ed18 0a01 	vldr	s0, [r8, #-4]
    6d7a:	4639      	mov	r1, r7
    6d7c:	f8d6 3acc 	ldr.w	r3, [r6, #2764]	; 0xacc
    6d80:	f896 0ad0 	ldrb.w	r0, [r6, #2768]	; 0xad0
    6d84:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    6d86:	2f00      	cmp	r7, #0
    6d88:	f47f a9fb 	bne.w	6182 <handleSPI+0xa2>
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    6d8c:	f8d6 3ae8 	ldr.w	r3, [r6, #2792]	; 0xae8
    6d90:	2701      	movs	r7, #1
    6d92:	e7e8      	b.n	6d66 <handleSPI+0xc86>
			  shapeTick[i] = &triTick;
    6d94:	4a59      	ldr	r2, [pc, #356]	; (6efc <handleSPI+0xe1c>)
    6d96:	495c      	ldr	r1, [pc, #368]	; (6f08 <handleSPI+0xe28>)
    6d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6d9c:	e7be      	b.n	6d1c <handleSPI+0xc3c>
			  shapeTick[i] = &sineTick;
    6d9e:	4a57      	ldr	r2, [pc, #348]	; (6efc <handleSPI+0xe1c>)
    6da0:	495a      	ldr	r1, [pc, #360]	; (6f0c <handleSPI+0xe2c>)
    6da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6da6:	e7b9      	b.n	6d1c <handleSPI+0xc3c>
			  shapeTick[i] = &pulseTick;
    6da8:	4a54      	ldr	r2, [pc, #336]	; (6efc <handleSPI+0xe1c>)
    6daa:	4959      	ldr	r1, [pc, #356]	; (6f10 <handleSPI+0xe30>)
    6dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6db0:	e7b4      	b.n	6d1c <handleSPI+0xc3c>
			  shapeTick[i] = &sawTick;
    6db2:	4a52      	ldr	r2, [pc, #328]	; (6efc <handleSPI+0xe1c>)
    6db4:	4957      	ldr	r1, [pc, #348]	; (6f14 <handleSPI+0xe34>)
    6db6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6dba:	e7af      	b.n	6d1c <handleSPI+0xc3c>
			  shapeTick[i] = &sawSquareTick;
    6dbc:	4a4f      	ldr	r2, [pc, #316]	; (6efc <handleSPI+0xe1c>)
    6dbe:	4956      	ldr	r1, [pc, #344]	; (6f18 <handleSPI+0xe38>)
    6dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6dc4:	e7aa      	b.n	6d1c <handleSPI+0xc3c>
			  shapeTick[i] = &sineTriTick;
    6dc6:	4a4d      	ldr	r2, [pc, #308]	; (6efc <handleSPI+0xe1c>)
    6dc8:	4954      	ldr	r1, [pc, #336]	; (6f1c <handleSPI+0xe3c>)
    6dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    6dce:	e7a5      	b.n	6d1c <handleSPI+0xc3c>
						tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    6dd0:	ee07 9a90 	vmov	s15, r9
    6dd4:	ed9f 0a52 	vldr	s0, [pc, #328]	; 6f20 <handleSPI+0xe40>
    6dd8:	4852      	ldr	r0, [pc, #328]	; (6f24 <handleSPI+0xe44>)
    6dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6dde:	ee27 0a80 	vmul.f32	s0, s15, s0
    6de2:	f000 facd 	bl	7380 <tExpSmooth_setDest>
    6de6:	e49f      	b.n	6728 <handleSPI+0x648>
    6de8:	ee07 9a90 	vmov	s15, r9
    6dec:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 6f20 <handleSPI+0xe40>
    6df0:	484d      	ldr	r0, [pc, #308]	; (6f28 <handleSPI+0xe48>)
    6df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6df6:	ee27 0a80 	vmul.f32	s0, s15, s0
    6dfa:	f000 fac1 	bl	7380 <tExpSmooth_setDest>
    6dfe:	e4b9      	b.n	6774 <handleSPI+0x694>
    6e00:	ee07 9a90 	vmov	s15, r9
    6e04:	ed9f 0a46 	vldr	s0, [pc, #280]	; 6f20 <handleSPI+0xe40>
    6e08:	4848      	ldr	r0, [pc, #288]	; (6f2c <handleSPI+0xe4c>)
    6e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e0e:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e12:	f000 fab5 	bl	7380 <tExpSmooth_setDest>
    6e16:	e49a      	b.n	674e <handleSPI+0x66e>
    6e18:	ee07 8a90 	vmov	s15, r8
    6e1c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 6f20 <handleSPI+0xe40>
    6e20:	4843      	ldr	r0, [pc, #268]	; (6f30 <handleSPI+0xe50>)
    6e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e26:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e2a:	f000 faa9 	bl	7380 <tExpSmooth_setDest>
    6e2e:	e538      	b.n	68a2 <handleSPI+0x7c2>
    6e30:	ee07 9a90 	vmov	s15, r9
    6e34:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 6f20 <handleSPI+0xe40>
    6e38:	483e      	ldr	r0, [pc, #248]	; (6f34 <handleSPI+0xe54>)
    6e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e3e:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e42:	f000 fa9d 	bl	7380 <tExpSmooth_setDest>
    6e46:	e51a      	b.n	687e <handleSPI+0x79e>
    6e48:	ee07 9a90 	vmov	s15, r9
    6e4c:	ed9f 0a34 	vldr	s0, [pc, #208]	; 6f20 <handleSPI+0xe40>
    6e50:	4839      	ldr	r0, [pc, #228]	; (6f38 <handleSPI+0xe58>)
    6e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e56:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e5a:	f000 fa91 	bl	7380 <tExpSmooth_setDest>
    6e5e:	e4fb      	b.n	6858 <handleSPI+0x778>
    6e60:	ee07 9a90 	vmov	s15, r9
    6e64:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 6f20 <handleSPI+0xe40>
    6e68:	4834      	ldr	r0, [pc, #208]	; (6f3c <handleSPI+0xe5c>)
    6e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e6e:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e72:	f000 fa85 	bl	7380 <tExpSmooth_setDest>
    6e76:	e4dc      	b.n	6832 <handleSPI+0x752>
    6e78:	ee07 9a90 	vmov	s15, r9
    6e7c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 6f20 <handleSPI+0xe40>
    6e80:	482f      	ldr	r0, [pc, #188]	; (6f40 <handleSPI+0xe60>)
    6e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e86:	ee27 0a80 	vmul.f32	s0, s15, s0
    6e8a:	f000 fa79 	bl	7380 <tExpSmooth_setDest>
    6e8e:	e4bd      	b.n	680c <handleSPI+0x72c>
    6e90:	ee07 9a90 	vmov	s15, r9
    6e94:	ed9f 0a22 	vldr	s0, [pc, #136]	; 6f20 <handleSPI+0xe40>
    6e98:	482a      	ldr	r0, [pc, #168]	; (6f44 <handleSPI+0xe64>)
    6e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6e9e:	ee27 0a80 	vmul.f32	s0, s15, s0
    6ea2:	f000 fa6d 	bl	7380 <tExpSmooth_setDest>
    6ea6:	e49e      	b.n	67e6 <handleSPI+0x706>
    6ea8:	ee07 9a90 	vmov	s15, r9
    6eac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 6f20 <handleSPI+0xe40>
    6eb0:	4825      	ldr	r0, [pc, #148]	; (6f48 <handleSPI+0xe68>)
    6eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6eb6:	ee27 0a80 	vmul.f32	s0, s15, s0
    6eba:	f000 fa61 	bl	7380 <tExpSmooth_setDest>
    6ebe:	e47f      	b.n	67c0 <handleSPI+0x6e0>
    6ec0:	ee07 9a90 	vmov	s15, r9
    6ec4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 6f20 <handleSPI+0xe40>
    6ec8:	4820      	ldr	r0, [pc, #128]	; (6f4c <handleSPI+0xe6c>)
    6eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6ece:	ee27 0a80 	vmul.f32	s0, s15, s0
    6ed2:	f000 fa55 	bl	7380 <tExpSmooth_setDest>
    6ed6:	e460      	b.n	679a <handleSPI+0x6ba>
    6ed8:	f04f 0b01 	mov.w	fp, #1
    6edc:	e6e6      	b.n	6cac <handleSPI+0xbcc>
    6ede:	bf00      	nop
    6ee0:	20005764 	.word	0x20005764
    6ee4:	377ffff6 	.word	0x377ffff6
    6ee8:	20019978 	.word	0x20019978
    6eec:	00004ea1 	.word	0x00004ea1
    6ef0:	20014b64 	.word	0x20014b64
    6ef4:	04002001 	.word	0x04002001
    6ef8:	4ec4ec4f 	.word	0x4ec4ec4f
    6efc:	20005bf4 	.word	0x20005bf4
    6f00:	00000b41 	.word	0x00000b41
    6f04:	20016bb8 	.word	0x20016bb8
    6f08:	00000ae1 	.word	0x00000ae1
    6f0c:	00000aa1 	.word	0x00000aa1
    6f10:	00000a41 	.word	0x00000a41
    6f14:	00000a01 	.word	0x00000a01
    6f18:	00000961 	.word	0x00000961
    6f1c:	000009a1 	.word	0x000009a1
    6f20:	3b808081 	.word	0x3b808081
    6f24:	2000529c 	.word	0x2000529c
    6f28:	200052a4 	.word	0x200052a4
    6f2c:	200052a0 	.word	0x200052a0
    6f30:	200052c4 	.word	0x200052c4
    6f34:	200052c0 	.word	0x200052c0
    6f38:	200052bc 	.word	0x200052bc
    6f3c:	200052b8 	.word	0x200052b8
    6f40:	200052b4 	.word	0x200052b4
    6f44:	200052b0 	.word	0x200052b0
    6f48:	200052ac 	.word	0x200052ac
    6f4c:	200052a8 	.word	0x200052a8
    6f50:	2001a400 	.word	0x2001a400
						audioOutBuffer[i + 1] = 0;
    6f54:	e9c3 2200 	strd	r2, r2, [r3]
    6f58:	e9c3 2202 	strd	r2, r2, [r3, #8]
    6f5c:	e9c3 2204 	strd	r2, r2, [r3, #16]
    6f60:	e9c3 2206 	strd	r2, r2, [r3, #24]
    6f64:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6f68:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    6f6c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
    6f70:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    6f74:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
    6f78:	e9c3 2212 	strd	r2, r2, [r3, #72]	; 0x48
    6f7c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    6f80:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    6f84:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    6f88:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
    6f8c:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
    6f90:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    6f94:	e51d      	b.n	69d2 <handleSPI+0x8f2>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    6f96:	4ab0      	ldr	r2, [pc, #704]	; (7258 <handleSPI+0x1178>)
    6f98:	40ca      	lsrs	r2, r1
    6f9a:	07d2      	lsls	r2, r2, #31
    6f9c:	d522      	bpl.n	6fe4 <handleSPI+0xf04>
					if (params[whichParam].realVal[0]  > 0.5f)
    6f9e:	ebaa 0207 	sub.w	r2, sl, r7
    6fa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6fa6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6faa:	ed92 7a02 	vldr	s14, [r2, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6fae:	4aab      	ldr	r2, [pc, #684]	; (725c <handleSPI+0x117c>)
					if (params[whichParam].realVal[0]  > 0.5f)
    6fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6fb4:	fb82 1203 	smull	r1, r2, r2, r3
    6fb8:	17db      	asrs	r3, r3, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    6fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    6fbe:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    6fc2:	4aa7      	ldr	r2, [pc, #668]	; (7260 <handleSPI+0x1180>)
					if (params[whichParam].realVal[0]  > 0.5f)
    6fc4:	bfcc      	ite	gt
    6fc6:	2101      	movgt	r1, #1
    6fc8:	2100      	movle	r1, #0
    6fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						enabledCount += oscsEnabled[j];
    6fce:	e9d2 3100 	ldrd	r3, r1, [r2]
					oscAmpMult = oscAmpMultArray[enabledCount];
    6fd2:	6892      	ldr	r2, [r2, #8]
						enabledCount += oscsEnabled[j];
    6fd4:	440b      	add	r3, r1
					oscAmpMult = oscAmpMultArray[enabledCount];
    6fd6:	4413      	add	r3, r2
    6fd8:	4aa2      	ldr	r2, [pc, #648]	; (7264 <handleSPI+0x1184>)
    6fda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6fde:	681a      	ldr	r2, [r3, #0]
    6fe0:	4ba1      	ldr	r3, [pc, #644]	; (7268 <handleSPI+0x1188>)
    6fe2:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    6fe4:	f1a7 0887 	sub.w	r8, r7, #135	; 0x87
    6fe8:	fa1f f288 	uxth.w	r2, r8
    6fec:	2a0f      	cmp	r2, #15
    6fee:	d875      	bhi.n	70dc <handleSPI+0xffc>
    6ff0:	f248 4321 	movw	r3, #33825	; 0x8421
    6ff4:	40d3      	lsrs	r3, r2
    6ff6:	43db      	mvns	r3, r3
    6ff8:	f013 0301 	ands.w	r3, r3, #1
    6ffc:	d16e      	bne.n	70dc <handleSPI+0xffc>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    6ffe:	ebaa 0a07 	sub.w	sl, sl, r7
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7002:	4699      	mov	r9, r3
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7004:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    7008:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    700c:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7010:	4b96      	ldr	r3, [pc, #600]	; (726c <handleSPI+0x118c>)
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7012:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7016:	fb83 2308 	smull	r2, r3, r3, r8
    701a:	ea4f 78e8 	mov.w	r8, r8, asr #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    701e:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    7022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7026:	ebc8 0863 	rsb	r8, r8, r3, asr #1
					setLFOShapes(LFOShape, whichLFO);
    702a:	ee17 0a90 	vmov	r0, s15
    702e:	4641      	mov	r1, r8
    7030:	f001 ff82 	bl	8f38 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7034:	488e      	ldr	r0, [pc, #568]	; (7270 <handleSPI+0x1190>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    7036:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    703a:	9403      	str	r4, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    703c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    7040:	463c      	mov	r4, r7
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    7042:	f103 0a84 	add.w	sl, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    7046:	f103 0b85 	add.w	fp, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    704a:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    704c:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
    7050:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    7054:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7058:	ea4f 088a 	mov.w	r8, sl, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    705c:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7060:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    7064:	ebcb 0bcb 	rsb	fp, fp, fp, lsl #3
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7068:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    706c:	4617      	mov	r7, r2
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    706e:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7072:	f8ca 3014 	str.w	r3, [sl, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    7076:	f8dc 3004 	ldr.w	r3, [ip, #4]
    707a:	f8cb 3014 	str.w	r3, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    707e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    7082:	6153      	str	r3, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7084:	f108 0308 	add.w	r3, r8, #8
    7088:	18f3      	adds	r3, r6, r3
    708a:	9301      	str	r3, [sp, #4]
    708c:	f108 0324 	add.w	r3, r8, #36	; 0x24
    7090:	f108 0840 	add.w	r8, r8, #64	; 0x40
    7094:	18f3      	adds	r3, r6, r3
    7096:	44b0      	add	r8, r6
    7098:	9302      	str	r3, [sp, #8]
    709a:	462b      	mov	r3, r5
    709c:	464d      	mov	r5, r9
    709e:	4699      	mov	r9, r3
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    70a0:	9b01      	ldr	r3, [sp, #4]
    70a2:	4629      	mov	r1, r5
    70a4:	f89a 0018 	ldrb.w	r0, [sl, #24]
    70a8:	ecb3 0a01 	vldmia	r3!, {s0}
    70ac:	9301      	str	r3, [sp, #4]
    70ae:	f8da 3014 	ldr.w	r3, [sl, #20]
    70b2:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    70b4:	9b02      	ldr	r3, [sp, #8]
    70b6:	4629      	mov	r1, r5
    70b8:	f89b 0018 	ldrb.w	r0, [fp, #24]
    70bc:	ecb3 0a01 	vldmia	r3!, {s0}
    70c0:	9302      	str	r3, [sp, #8]
    70c2:	f8db 3014 	ldr.w	r3, [fp, #20]
    70c6:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    70c8:	ecb8 0a01 	vldmia	r8!, {s0}
    70cc:	4629      	mov	r1, r5
    70ce:	697b      	ldr	r3, [r7, #20]
    70d0:	7e38      	ldrb	r0, [r7, #24]
    70d2:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    70d4:	b1b5      	cbz	r5, 7104 <handleSPI+0x1024>
    70d6:	4627      	mov	r7, r4
    70d8:	464d      	mov	r5, r9
    70da:	9c03      	ldr	r4, [sp, #12]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    70dc:	2f01      	cmp	r7, #1
    70de:	d913      	bls.n	7108 <handleSPI+0x1028>
				if (whichParam == FXOrder)
    70e0:	2f9a      	cmp	r7, #154	; 0x9a
    70e2:	d127      	bne.n	7134 <handleSPI+0x1054>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    70e4:	4a63      	ldr	r2, [pc, #396]	; (7274 <handleSPI+0x1194>)
    70e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    70ea:	4b63      	ldr	r3, [pc, #396]	; (7278 <handleSPI+0x1198>)
    70ec:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    70f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    70f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70f8:	bfcc      	ite	gt
    70fa:	2201      	movgt	r2, #1
    70fc:	2200      	movle	r2, #0
    70fe:	701a      	strb	r2, [r3, #0]
    7100:	f7ff b83f 	b.w	6182 <handleSPI+0xa2>
    7104:	2501      	movs	r5, #1
    7106:	e7cb      	b.n	70a0 <handleSPI+0xfc0>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7108:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    710c:	ed96 7a02 	vldr	s14, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7110:	eddf 6a5a 	vldr	s13, [pc, #360]	; 727c <handleSPI+0x119c>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7114:	ee37 7a67 	vsub.f32	s14, s14, s15
    7118:	ed9f 6a59 	vldr	s12, [pc, #356]	; 7280 <handleSPI+0x11a0>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    711c:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7120:	4b58      	ldr	r3, [pc, #352]	; (7284 <handleSPI+0x11a4>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7122:	4a59      	ldr	r2, [pc, #356]	; (7288 <handleSPI+0x11a8>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7124:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7128:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    712c:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    7130:	f7ff b827 	b.w	6182 <handleSPI+0xa2>
    7134:	2f9b      	cmp	r7, #155	; 0x9b
    7136:	f47f a824 	bne.w	6182 <handleSPI+0xa2>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    713a:	4a4e      	ldr	r2, [pc, #312]	; (7274 <handleSPI+0x1194>)
    713c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7140:	4b52      	ldr	r3, [pc, #328]	; (728c <handleSPI+0x11ac>)
    7142:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    7146:	e7d3      	b.n	70f0 <handleSPI+0x1010>
				else if (mappingChangeType == Amount)
    7148:	f1b9 0f01 	cmp.w	r9, #1
    714c:	d055      	beq.n	71fa <handleSPI+0x111a>
				else if (mappingChangeType == ScalarID)
    714e:	f1b9 0f02 	cmp.w	r9, #2
    7152:	f47f a816 	bne.w	6182 <handleSPI+0xa2>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    7156:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    7158:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    715c:	ea4f 014c 	mov.w	r1, ip, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7160:	f1ac 0818 	sub.w	r8, ip, #24
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    7164:	fb03 f202 	mul.w	r2, r3, r2
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7168:	f1ac 0614 	sub.w	r6, ip, #20
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    716c:	f10e 0304 	add.w	r3, lr, #4
						if (scalar == 0xff)
    7170:	d060      	beq.n	7234 <handleSPI+0x1154>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    7172:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7176:	4846      	ldr	r0, [pc, #280]	; (7290 <handleSPI+0x11b0>)
    7178:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
    717c:	3101      	adds	r1, #1
    717e:	443b      	add	r3, r7
    7180:	eb00 09cc 	add.w	r9, r0, ip, lsl #3
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7184:	f1b8 0f03 	cmp.w	r8, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    7188:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    718c:	f8c3 9004 	str.w	r9, [r3, #4]
    7190:	eb07 0302 	add.w	r3, r7, r2
    7194:	6298      	str	r0, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7196:	d958      	bls.n	724a <handleSPI+0x116a>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7198:	2e03      	cmp	r6, #3
    719a:	f63e aff2 	bhi.w	6182 <handleSPI+0xa2>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    719e:	4b3d      	ldr	r3, [pc, #244]	; (7294 <handleSPI+0x11b4>)
    71a0:	2201      	movs	r2, #1
    71a2:	449c      	add	ip, r3
    71a4:	f80c 2c14 	strb.w	r2, [ip, #-20]
    71a8:	f7fe bfeb 	b.w	6182 <handleSPI+0xa2>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    71ac:	f1ac 0318 	sub.w	r3, ip, #24
    71b0:	2b03      	cmp	r3, #3
    71b2:	d835      	bhi.n	7220 <handleSPI+0x1140>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    71b4:	4b38      	ldr	r3, [pc, #224]	; (7298 <handleSPI+0x11b8>)
    71b6:	449c      	add	ip, r3
    71b8:	f80c 0c18 	strb.w	r0, [ip, #-24]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    71bc:	e4b5      	b.n	6b2a <handleSPI+0xa4a>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    71be:	f886 9048 	strb.w	r9, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    71c2:	464e      	mov	r6, r9
							mappings[whichMapping].destNumber = 255;
    71c4:	f807 c003 	strb.w	ip, [r7, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    71c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    71cc:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    71d0:	691b      	ldr	r3, [r3, #16]
    71d2:	ed97 0a00 	vldr	s0, [r7]
    71d6:	4798      	blx	r3
    71d8:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    71dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    71e0:	4631      	mov	r1, r6
    71e2:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    71e6:	695a      	ldr	r2, [r3, #20]
    71e8:	7e18      	ldrb	r0, [r3, #24]
    71ea:	ed97 0a02 	vldr	s0, [r7, #8]
    71ee:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    71f0:	2e00      	cmp	r6, #0
    71f2:	f47e afc6 	bne.w	6182 <handleSPI+0xa2>
    71f6:	2601      	movs	r6, #1
    71f8:	e7e6      	b.n	71c8 <handleSPI+0x10e8>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    71fa:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    71fe:	ee07 ca90 	vmov	s15, ip
    7202:	ed9f 7a26 	vldr	s14, [pc, #152]	; 729c <handleSPI+0x11bc>
    7206:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    720a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    720e:	4472      	add	r2, lr
    7210:	ee67 7a87 	vmul.f32	s15, s15, s14
    7214:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    7218:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    721c:	f7fe bfb1 	b.w	6182 <handleSPI+0xa2>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7220:	f1ac 0314 	sub.w	r3, ip, #20
    7224:	2b03      	cmp	r3, #3
    7226:	f63f ac80 	bhi.w	6b2a <handleSPI+0xa4a>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    722a:	4b1a      	ldr	r3, [pc, #104]	; (7294 <handleSPI+0x11b4>)
    722c:	449c      	add	ip, r3
    722e:	f80c 0c14 	strb.w	r0, [ip, #-20]
    7232:	e47a      	b.n	6b2a <handleSPI+0xa4a>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    7234:	eb02 01ce 	add.w	r1, r2, lr, lsl #3
    7238:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    723c:	4439      	add	r1, r7
    723e:	18bb      	adds	r3, r7, r2
    7240:	4a17      	ldr	r2, [pc, #92]	; (72a0 <handleSPI+0x11c0>)
    7242:	605a      	str	r2, [r3, #4]
    7244:	628a      	str	r2, [r1, #40]	; 0x28
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7246:	f7fe bf9c 	b.w	6182 <handleSPI+0xa2>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    724a:	4b13      	ldr	r3, [pc, #76]	; (7298 <handleSPI+0x11b8>)
    724c:	2201      	movs	r2, #1
    724e:	449c      	add	ip, r3
    7250:	f80c 2c18 	strb.w	r2, [ip, #-24]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7254:	f7fe bf95 	b.w	6182 <handleSPI+0xa2>
    7258:	04002001 	.word	0x04002001
    725c:	4ec4ec4f 	.word	0x4ec4ec4f
    7260:	2001996c 	.word	0x2001996c
    7264:	20000014 	.word	0x20000014
    7268:	20000010 	.word	0x20000010
    726c:	66666667 	.word	0x66666667
    7270:	20018cec 	.word	0x20018cec
    7274:	2001a978 	.word	0x2001a978
    7278:	20016ce6 	.word	0x20016ce6
    727c:	42fe0000 	.word	0x42fe0000
    7280:	3c010204 	.word	0x3c010204
    7284:	2001995c 	.word	0x2001995c
    7288:	20019960 	.word	0x20019960
    728c:	2001aa88 	.word	0x2001aa88
    7290:	200146d0 	.word	0x200146d0
    7294:	20005070 	.word	0x20005070
    7298:	2000531c 	.word	0x2000531c
    729c:	37fffffc 	.word	0x37fffffc
    72a0:	200006dc 	.word	0x200006dc
    72a4:	f3af 8000 	nop.w
    72a8:	f3af 8000 	nop.w
    72ac:	f3af 8000 	nop.w
    72b0:	f3af 8000 	nop.w
    72b4:	f3af 8000 	nop.w
    72b8:	f3af 8000 	nop.w
    72bc:	f3af 8000 	nop.w

000072c0 <HAL_I2C_SlaveRxCpltCallback>:
{
    72c0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    72c2:	2200      	movs	r2, #0
    72c4:	2140      	movs	r1, #64	; 0x40
    72c6:	4806      	ldr	r0, [pc, #24]	; (72e0 <HAL_I2C_SlaveRxCpltCallback+0x20>)
    72c8:	f001 fd92 	bl	8df0 <__HAL_GPIO_WritePin_veneer>
	presetWaitingToParse = 4096;
    72cc:	4b05      	ldr	r3, [pc, #20]	; (72e4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
    72ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    72d2:	4905      	ldr	r1, [pc, #20]	; (72e8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
    72d4:	4805      	ldr	r0, [pc, #20]	; (72ec <HAL_I2C_SlaveRxCpltCallback+0x2c>)
	presetWaitingToParse = 4096;
    72d6:	601a      	str	r2, [r3, #0]
}
    72d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    72dc:	f001 bc9c 	b.w	8c18 <__HAL_I2C_Slave_Receive_IT_veneer>
    72e0:	58020000 	.word	0x58020000
    72e4:	2001aaac 	.word	0x2001aaac
    72e8:	300001c0 	.word	0x300001c0
    72ec:	20014a6c 	.word	0x20014a6c
    72f0:	f3af 8000 	nop.w
    72f4:	f3af 8000 	nop.w
    72f8:	f3af 8000 	nop.w
    72fc:	f3af 8000 	nop.w

00007300 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    7300:	4b01      	ldr	r3, [pc, #4]	; (7308 <HAL_I2C_MasterTxCpltCallback+0x8>)
    7302:	2200      	movs	r2, #0
    7304:	701a      	strb	r2, [r3, #0]
}
    7306:	4770      	bx	lr
    7308:	20016ce7 	.word	0x20016ce7
    730c:	f3af 8000 	nop.w
    7310:	f3af 8000 	nop.w
    7314:	f3af 8000 	nop.w
    7318:	f3af 8000 	nop.w
    731c:	f3af 8000 	nop.w

00007320 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    7320:	2100      	movs	r1, #0
	I2CErrors++;
    7322:	4a05      	ldr	r2, [pc, #20]	; (7338 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    7324:	4b05      	ldr	r3, [pc, #20]	; (733c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    7326:	4806      	ldr	r0, [pc, #24]	; (7340 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    7328:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    732a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    732c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    732e:	3301      	adds	r3, #1
    7330:	b2db      	uxtb	r3, r3
    7332:	7013      	strb	r3, [r2, #0]
}
    7334:	4770      	bx	lr
    7336:	bf00      	nop
    7338:	20014b14 	.word	0x20014b14
    733c:	20016ce7 	.word	0x20016ce7
    7340:	2001aec0 	.word	0x2001aec0
	...

00007360 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
    7360:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
    7362:	edd3 6a04 	vldr	s13, [r3, #16]
    7366:	ed93 0a03 	vldr	s0, [r3, #12]
    736a:	ed93 7a02 	vldr	s14, [r3, #8]
    736e:	ee20 0a26 	vmul.f32	s0, s0, s13
    7372:	edd3 7a05 	vldr	s15, [r3, #20]
    7376:	eea7 0a27 	vfma.f32	s0, s14, s15
    737a:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
    737e:	4770      	bx	lr

00007380 <tExpSmooth_setDest>:
    _tExpSmooth* smooth = *expsmooth;
    7380:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
    7382:	ed83 0a05 	vstr	s0, [r3, #20]
}
    7386:	4770      	bx	lr
	...

000073a0 <place_step_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    73a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 740c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    73a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    73a8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    73ac:	b538      	push	{r3, r4, r5, lr}
    73ae:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    73b2:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    73b6:	460d      	mov	r5, r1
    73b8:	4604      	mov	r4, r0
    73ba:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    73be:	ee38 0a67 	vsub.f32	s0, s16, s15
    73c2:	f001 fc71 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    73c6:	ee07 0a90 	vmov	s15, r0
    73ca:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    73ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    73d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    73d6:	4b0e      	ldr	r3, [pc, #56]	; (7410 <place_step_dd+0x70>)
    73d8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    73dc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    73e0:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    73e4:	edd3 6a01 	vldr	s13, [r3, #4]
    73e8:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    73ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    73f0:	edd2 7a00 	vldr	s15, [r2]
    73f4:	eea6 7a86 	vfma.f32	s14, s13, s12
    73f8:	eee7 7a28 	vfma.f32	s15, s14, s17
    73fc:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    7400:	4291      	cmp	r1, r2
    7402:	d1ef      	bne.n	73e4 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    7404:	ecbd 8b02 	vpop	{d8}
    7408:	bd38      	pop	{r3, r4, r5, pc}
    740a:	bf00      	nop
    740c:	42800000 	.word	0x42800000
    7410:	24022bac 	.word	0x24022bac
    7414:	f3af 8000 	nop.w
    7418:	f3af 8000 	nop.w
    741c:	f3af 8000 	nop.w

00007420 <place_slope_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    7420:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 7498 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    7424:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    7428:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    742c:	b538      	push	{r3, r4, r5, lr}
    742e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    7432:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    7436:	460d      	mov	r5, r1
    7438:	4604      	mov	r4, r0
    743a:	eeb0 8a60 	vmov.f32	s16, s1
    743e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    7442:	ee38 0ae7 	vsub.f32	s0, s17, s15
    7446:	f001 fc2f 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    744a:	ee07 0a90 	vmov	s15, r0
    744e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7452:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    7456:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    745a:	4b10      	ldr	r3, [pc, #64]	; (749c <place_slope_dd+0x7c>)

	slope_delta *= w;
    745c:	ee28 1a09 	vmul.f32	s2, s16, s18
    7460:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    7464:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (Lfloat)i;
    7468:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    746c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    7470:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    7474:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    7478:	ed92 7a00 	vldr	s14, [r2]
    747c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    7480:	eee6 7a86 	vfma.f32	s15, s13, s12
    7484:	eea7 7a81 	vfma.f32	s14, s15, s2
    7488:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    748c:	4291      	cmp	r1, r2
    748e:	d1ed      	bne.n	746c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    7490:	ecbd 8b04 	vpop	{d8-d9}
    7494:	bd38      	pop	{r3, r4, r5, pc}
    7496:	bf00      	nop
    7498:	42800000 	.word	0x42800000
    749c:	2401e4a8 	.word	0x2401e4a8

000074a0 <LEAF_clip>:
    if (val < min)
    74a0:	eef4 0ac0 	vcmpe.f32	s1, s0
    74a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74a8:	d401      	bmi.n	74ae <LEAF_clip+0xe>
    else if (val > max)
    74aa:	fe80 0ac1 	vminnm.f32	s0, s1, s2
}
    74ae:	4770      	bx	lr
	...

000074c0 <tPBSineTriangle_tick>:
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    74c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    74c4:	b510      	push	{r4, lr}
    74c6:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
    74ca:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    74cc:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
    74d0:	eeb0 7a67 	vmov.f32	s14, s15
{
    74d4:	b082      	sub	sp, #8
    Lfloat t = c->phase;
    74d6:	edd4 aa01 	vldr	s21, [r4, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    74da:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    74de:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    74e2:	eeaa 7a8a 	vfma.f32	s14, s21, s20
    74e6:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
    74ea:	eeb0 0a6a 	vmov.f32	s0, s21
    74ee:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    74f2:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
    74f6:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    74fa:	eee7 7a0a 	vfma.f32	s15, s14, s20
    74fe:	eeb0 9a67 	vmov.f32	s18, s15
    v += LEAF_poly_blamp(t,  dt);
    7502:	f001 fc2d 	bl	8d60 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7506:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    750a:	eeb0 8a40 	vmov.f32	s16, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    750e:	ee39 0aea 	vsub.f32	s0, s19, s21
    7512:	f001 fc25 	bl	8d60 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    7516:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(t,  dt);
    751a:	ee39 8a08 	vadd.f32	s16, s18, s16
    v -= LEAF_poly_blamp(t, dt);
    751e:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    7522:	ee7a aa87 	vadd.f32	s21, s21, s14
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7526:	ee38 8a00 	vadd.f32	s16, s16, s0
    t -= (int)(t);
    752a:	eefd 8aea 	vcvt.s32.f32	s17, s21
    752e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    v -= LEAF_poly_blamp(t, dt);
    7532:	ee3a 0ae8 	vsub.f32	s0, s21, s17
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7536:	ee79 aaea 	vsub.f32	s21, s19, s21
    v -= LEAF_poly_blamp(t, dt);
    753a:	f001 fc11 	bl	8d60 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    753e:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    7542:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7546:	ee3a 0aa8 	vadd.f32	s0, s21, s17
    754a:	f001 fc09 	bl	8d60 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    754e:	ed94 7a02 	vldr	s14, [r4, #8]
    7552:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    7556:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
    755a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    755e:	ee37 7a26 	vadd.f32	s14, s14, s13
    7562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7566:	ee77 7a67 	vsub.f32	s15, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    756a:	eef4 7ae9 	vcmpe.f32	s15, s19
    c->phase += c->inc - (int)c->inc;
    756e:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    7572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7576:	db0a      	blt.n	758e <tPBSineTriangle_tick+0xce>
    7578:	eeb0 7a67 	vmov.f32	s14, s15
    757c:	ee77 7ae9 	vsub.f32	s15, s15, s19
    7580:	eeb4 7aca 	vcmpe.f32	s14, s20
    7584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7588:	daf6      	bge.n	7578 <tPBSineTriangle_tick+0xb8>
    758a:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    758e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7596:	d50e      	bpl.n	75b6 <tPBSineTriangle_tick+0xf6>
    7598:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    759c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    75a0:	eeb0 7a67 	vmov.f32	s14, s15
    75a4:	ee77 7a86 	vadd.f32	s15, s15, s12
    75a8:	eeb4 7ae6 	vcmpe.f32	s14, s13
    75ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    75b0:	d4f6      	bmi.n	75a0 <tPBSineTriangle_tick+0xe0>
    75b2:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
    75b6:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
    75b8:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
    75bc:	4a14      	ldr	r2, [pc, #80]	; (7610 <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    75be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 7614 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
    75c2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    75c6:	440b      	add	r3, r1
    75c8:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
    75ca:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    75cc:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
    75d0:	6940      	ldr	r0, [r0, #20]
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    75d2:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    75d6:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
    75da:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
    75dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
    75e0:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    75e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
    75e6:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
    75ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    75ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    75f2:	ed92 7a00 	vldr	s14, [r2]
    75f6:	ee37 7a40 	vsub.f32	s14, s14, s0
    75fa:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    75fe:	ee20 0a06 	vmul.f32	s0, s0, s12
}
    7602:	eea6 0a88 	vfma.f32	s0, s13, s16
    7606:	b002      	add	sp, #8
    7608:	ecbd 8b06 	vpop	{d8-d10}
    760c:	bd10      	pop	{r4, pc}
    760e:	bf00      	nop
    7610:	2401c4a8 	.word	0x2401c4a8
    7614:	35000004 	.word	0x35000004
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <tPBSineTriangle_setFreq>:
    _tPBSineTriangle* c = *osc;
    7620:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7622:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
    7626:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
    7628:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
    762c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    7630:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    7634:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
    7638:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    763c:	ee20 0a27 	vmul.f32	s0, s0, s15
    7640:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    7644:	ed82 0a02 	vstr	s0, [r2, #8]
}
    7648:	4770      	bx	lr
    764a:	bf00      	nop
    764c:	f3af 8000 	nop.w
    7650:	f3af 8000 	nop.w
    7654:	f3af 8000 	nop.w
    7658:	f3af 8000 	nop.w
    765c:	f3af 8000 	nop.w

00007660 <tPBTriangle_tick>:
{
    7660:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
    7662:	6804      	ldr	r4, [r0, #0]
{
    7664:	ed2d 8b08 	vpush	{d8-d11}
    Lfloat t = c->phase;
    7668:	ed94 8a01 	vldr	s16, [r4, #4]
{
    766c:	b082      	sub	sp, #8
    if (t < c->skew)
    766e:	edd4 7a04 	vldr	s15, [r4, #16]
    7672:	edd4 0a02 	vldr	s1, [r4, #8]
    7676:	eef4 7ac8 	vcmpe.f32	s15, s16
    767a:	eef0 0ae0 	vabs.f32	s1, s1
    767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7682:	eef1 0a60 	vneg.f32	s1, s1
    7686:	dd71      	ble.n	776c <tPBTriangle_tick+0x10c>
        v = 2.0f * t / c->skew - 1.0f;
    7688:	ee38 7a08 	vadd.f32	s14, s16, s16
    768c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    7690:	eec7 6a27 	vdiv.f32	s13, s14, s15
    7694:	ee36 aaca 	vsub.f32	s20, s13, s20
    v += LEAF_poly_blamp(1.0f - t,  dt);
    7698:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
    769c:	edcd 0a01 	vstr	s1, [sp, #4]
    76a0:	eeb0 0a48 	vmov.f32	s0, s16
    76a4:	f001 fb5c 	bl	8d60 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    76a8:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    76ac:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    76b0:	ee38 0ac8 	vsub.f32	s0, s17, s16
    76b4:	f001 fb54 	bl	8d60 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    76b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
    76bc:	eef0 aa40 	vmov.f32	s21, s0
    v -= LEAF_poly_blamp(t, dt);
    76c0:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    76c4:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
    76c8:	eefd 9ac8 	vcvt.s32.f32	s19, s16
    76cc:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
    76d0:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    76d4:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
    76d8:	f001 fb42 	bl	8d60 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    76dc:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    76e0:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    76e4:	ee38 0a29 	vadd.f32	s0, s16, s19
    76e8:	f001 fb3a 	bl	8d60 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    76ec:	ed94 7a02 	vldr	s14, [r4, #8]
    76f0:	ed94 6a01 	vldr	s12, [r4, #4]
    76f4:	ee79 6a00 	vadd.f32	s13, s18, s0
    76f8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    76fc:	ee37 7a06 	vadd.f32	s14, s14, s12
    7700:	ee76 6aca 	vsub.f32	s13, s13, s20
    7704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7708:	ee77 7a67 	vsub.f32	s15, s14, s15
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    770c:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    7710:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    7714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7718:	db0c      	blt.n	7734 <tPBTriangle_tick+0xd4>
    771a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    771e:	eeb0 7a67 	vmov.f32	s14, s15
    7722:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7726:	eeb4 7ac6 	vcmpe.f32	s14, s12
    772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    772e:	daf6      	bge.n	771e <tPBTriangle_tick+0xbe>
    7730:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
    7734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    773c:	d50e      	bpl.n	775c <tPBTriangle_tick+0xfc>
    773e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    7742:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    7746:	eeb0 7a67 	vmov.f32	s14, s15
    774a:	ee77 7aa5 	vadd.f32	s15, s15, s11
    774e:	eeb4 7ac6 	vcmpe.f32	s14, s12
    7752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7756:	d4f6      	bmi.n	7746 <tPBTriangle_tick+0xe6>
    7758:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
    775c:	ee36 9acb 	vsub.f32	s18, s13, s22
    7760:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
    7764:	b002      	add	sp, #8
    7766:	ecbd 8b08 	vpop	{d8-d11}
    776a:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    776c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
    7770:	ed94 7a05 	vldr	s14, [r4, #20]
    7774:	ee78 7a67 	vsub.f32	s15, s16, s15
    7778:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    777c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7780:	eec7 6a87 	vdiv.f32	s13, s15, s14
    7784:	ee36 aa8a 	vadd.f32	s20, s13, s20
    7788:	e786      	b.n	7698 <tPBTriangle_tick+0x38>
    778a:	bf00      	nop
    778c:	f3af 8000 	nop.w
    7790:	f3af 8000 	nop.w
    7794:	f3af 8000 	nop.w
    7798:	f3af 8000 	nop.w
    779c:	f3af 8000 	nop.w

000077a0 <tPBTriangle_setFreq>:
    _tPBTriangle* c = *osc;
    77a0:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    77a2:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    77a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    77aa:	ee27 0a80 	vmul.f32	s0, s15, s0
    77ae:	ed83 0a02 	vstr	s0, [r3, #8]
}
    77b2:	4770      	bx	lr
    77b4:	f3af 8000 	nop.w
    77b8:	f3af 8000 	nop.w
    77bc:	f3af 8000 	nop.w

000077c0 <tPBPulse_tick>:
{
    77c0:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
    77c2:	6804      	ldr	r4, [r0, #0]
{
    77c4:	ed2d 8b04 	vpush	{d8-d9}
    if (c->phase < c->width) out = 1.0f;
    77c8:	edd4 7a04 	vldr	s15, [r4, #16]
    else out = -1.0f;
    77cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    if (c->phase < c->width) out = 1.0f;
    77d0:	ed94 0a01 	vldr	s0, [r4, #4]
    else out = -1.0f;
    77d4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    out += LEAF_poly_blep(c->phase, c->inc);
    77d8:	edd4 0a02 	vldr	s1, [r4, #8]
    else out = -1.0f;
    77dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
    77e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77e4:	bf54      	ite	pl
    77e6:	eef0 8a48 	vmovpl.f32	s17, s16
    77ea:	eef0 8a49 	vmovmi.f32	s17, s18
    out += LEAF_poly_blep(c->phase, c->inc);
    77ee:	f001 fb97 	bl	8f20 <__LEAF_poly_blep_veneer>
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    77f2:	edd4 7a01 	vldr	s15, [r4, #4]
    77f6:	eef0 0a49 	vmov.f32	s1, s18
    77fa:	ed94 7a04 	vldr	s14, [r4, #16]
    77fe:	ee77 7a89 	vadd.f32	s15, s15, s18
    out += LEAF_poly_blep(c->phase, c->inc);
    7802:	ee78 8a80 	vadd.f32	s17, s17, s0
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    7806:	ee37 0ac7 	vsub.f32	s0, s15, s14
    780a:	f001 fba9 	bl	8f60 <__fmodf_veneer>
    780e:	edd4 0a02 	vldr	s1, [r4, #8]
    7812:	f001 fb85 	bl	8f20 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    7816:	ed94 7a02 	vldr	s14, [r4, #8]
    781a:	edd4 6a01 	vldr	s13, [r4, #4]
    out -= LEAF_poly_blep(fmodf(c->phase + (1.0f - c->width), 1.0f), c->inc);
    781e:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc - (int)c->inc;
    7822:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    7826:	ee37 7a26 	vadd.f32	s14, s14, s13
    782a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    782e:	ee77 7a67 	vsub.f32	s15, s14, s15
    if (c->phase >= 1.0f) c->phase -= 1.0f;
    7832:	eef4 7ac9 	vcmpe.f32	s15, s18
    7836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    783a:	bfa8      	it	ge
    783c:	ee77 7ac9 	vsubge.f32	s15, s15, s18
    if (c->phase < 0.0f) c->phase += 1.0f;
    7840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    if (c->phase >= 1.0f) c->phase -= 1.0f;
    7844:	edc4 7a01 	vstr	s15, [r4, #4]
    if (c->phase < 0.0f) c->phase += 1.0f;
    7848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    784c:	d505      	bpl.n	785a <tPBPulse_tick+0x9a>
    784e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7852:	ee77 7a87 	vadd.f32	s15, s15, s14
    7856:	edc4 7a01 	vstr	s15, [r4, #4]
}
    785a:	ecbd 8b04 	vpop	{d8-d9}
    785e:	bd10      	pop	{r4, pc}

00007860 <tPBPulse_setFreq>:
    _tPBPulse* c = *osc;
    7860:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7862:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    7866:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    786a:	ee27 0a80 	vmul.f32	s0, s15, s0
    786e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7872:	4770      	bx	lr
    7874:	f3af 8000 	nop.w
    7878:	f3af 8000 	nop.w
    787c:	f3af 8000 	nop.w

00007880 <tPBSaw_tick>:
{
    7880:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
    7882:	6804      	ldr	r4, [r0, #0]
{
    7884:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * 2.0f) - 1.0f;
    7888:	ed94 0a01 	vldr	s0, [r4, #4]
    out -= LEAF_poly_blep(c->phase, c->inc);
    788c:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat out = (c->phase * 2.0f) - 1.0f;
    7890:	ee30 8a00 	vadd.f32	s16, s0, s0
    out -= LEAF_poly_blep(c->phase, c->inc);
    7894:	f001 fb44 	bl	8f20 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    7898:	ed94 7a02 	vldr	s14, [r4, #8]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    789c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc - (int)c->inc;
    78a0:	ed94 6a01 	vldr	s12, [r4, #4]
    78a4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    78a8:	ee37 7a06 	vadd.f32	s14, s14, s12
    78ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    78b0:	ee77 7a67 	vsub.f32	s15, s14, s15
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    78b4:	eef4 7ae6 	vcmpe.f32	s15, s13
    c->phase += c->inc - (int)c->inc;
    78b8:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    78bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78c0:	db0c      	blt.n	78dc <tPBSaw_tick+0x5c>
    78c2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    78c6:	eeb0 7a67 	vmov.f32	s14, s15
    78ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
    78ce:	eeb4 7ac6 	vcmpe.f32	s14, s12
    78d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78d6:	daf6      	bge.n	78c6 <tPBSaw_tick+0x46>
    78d8:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    78dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    78e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78e4:	d50e      	bpl.n	7904 <tPBSaw_tick+0x84>
    78e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    78ea:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    78ee:	eeb0 7a67 	vmov.f32	s14, s15
    78f2:	ee77 7a86 	vadd.f32	s15, s15, s12
    78f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
    78fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78fe:	d4f6      	bmi.n	78ee <tPBSaw_tick+0x6e>
    7900:	edc4 7a01 	vstr	s15, [r4, #4]
    return (-1.0f * out);
    7904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7908:	ee37 8ac8 	vsub.f32	s16, s15, s16
}
    790c:	ee38 0a00 	vadd.f32	s0, s16, s0
    7910:	ecbd 8b02 	vpop	{d8}
    7914:	bd10      	pop	{r4, pc}
    7916:	bf00      	nop
    7918:	f3af 8000 	nop.w
    791c:	f3af 8000 	nop.w

00007920 <tPBSaw_setFreq>:
    _tPBSaw* c = *osc;
    7920:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7922:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
    7926:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    792a:	ee27 0a80 	vmul.f32	s0, s15, s0
    792e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7932:	4770      	bx	lr
    7934:	f3af 8000 	nop.w
    7938:	f3af 8000 	nop.w
    793c:	f3af 8000 	nop.w

00007940 <tPBSawSquare_tick>:
{
    7940:	b510      	push	{r4, lr}
    _tPBSawSquare* c = *osc;
    7942:	6804      	ldr	r4, [r0, #0]
{
    7944:	ed2d 8b02 	vpush	{d8}
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7948:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    float resetBlep = LEAF_poly_blep(c->phase, c->inc);
    794c:	edd4 0a02 	vldr	s1, [r4, #8]
    7950:	ed94 0a01 	vldr	s0, [r4, #4]
    7954:	f001 fae4 	bl	8f20 <__LEAF_poly_blep_veneer>
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7958:	edd4 7a01 	vldr	s15, [r4, #4]
    float resetBlep = LEAF_poly_blep(c->phase, c->inc);
    795c:	eeb0 8a40 	vmov.f32	s16, s0
    float midBlep = LEAF_poly_blep(fmod(c->phase + 0.5f, 1.0f), c->inc);
    7960:	ee37 0aa8 	vadd.f32	s0, s15, s17
    7964:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
    7968:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    796c:	f001 fa08 	bl	8d80 <__fmod_veneer>
    7970:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    7974:	edd4 0a02 	vldr	s1, [r4, #8]
    7978:	f001 fad2 	bl	8f20 <__LEAF_poly_blep_veneer>
    c->phase += c->inc - (int)c->inc;
    797c:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat sawOut = (c->phase * 2.0f) - 1.0f;
    7980:	ed94 7a01 	vldr	s14, [r4, #4]
    else squareOut = -1.0f;
    7984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    c->phase += c->inc - (int)c->inc;
    7988:	eefd 4ae7 	vcvt.s32.f32	s9, s15
    798c:	ee77 7a27 	vadd.f32	s15, s14, s15
    else squareOut = -1.0f;
    7990:	eeb4 7ae8 	vcmpe.f32	s14, s17
    c->phase += c->inc - (int)c->inc;
    7994:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    else squareOut = -1.0f;
    7998:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->phase += c->inc - (int)c->inc;
    79a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
    squareOut -= midBlep;
    79a4:	ee78 5a40 	vsub.f32	s11, s16, s0
    else squareOut = -1.0f;
    79a8:	bf48      	it	mi
    79aa:	eeb0 6a66 	vmovmi.f32	s12, s13
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    79ae:	eef4 7ae6 	vcmpe.f32	s15, s13
    c->phase += c->inc - (int)c->inc;
    79b2:	edc4 7a01 	vstr	s15, [r4, #4]
    Lfloat sawOut = (c->phase * 2.0f) - 1.0f;
    79b6:	ee37 5a07 	vadd.f32	s10, s14, s14
    squareOut -= midBlep;
    79ba:	ee75 5a86 	vadd.f32	s11, s11, s12
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    79be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79c2:	db0c      	blt.n	79de <tPBSawSquare_tick+0x9e>
    79c4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    79c8:	eeb0 7a67 	vmov.f32	s14, s15
    79cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
    79d0:	eeb4 7ac6 	vcmpe.f32	s14, s12
    79d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79d8:	daf6      	bge.n	79c8 <tPBSawSquare_tick+0x88>
    79da:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    79de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    79e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79e6:	d50e      	bpl.n	7a06 <tPBSawSquare_tick+0xc6>
    79e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    79ec:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    79f0:	eeb0 7a67 	vmov.f32	s14, s15
    79f4:	ee77 7a86 	vadd.f32	s15, s15, s12
    79f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
    79fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a00:	d4f6      	bmi.n	79f0 <tPBSawSquare_tick+0xb0>
    7a02:	edc4 7a01 	vstr	s15, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    7a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    7a0a:	edd4 7a07 	vldr	s15, [r4, #28]
    7a0e:	ed94 6a08 	vldr	s12, [r4, #32]
    7a12:	ee25 0aa7 	vmul.f32	s0, s11, s15
    7a16:	ee36 5ac5 	vsub.f32	s10, s13, s10
    7a1a:	ee35 7a08 	vadd.f32	s14, s10, s16
}
    7a1e:	ecbd 8b02 	vpop	{d8}
    7a22:	eea7 0a06 	vfma.f32	s0, s14, s12
    7a26:	bd10      	pop	{r4, pc}
    7a28:	f3af 8000 	nop.w
    7a2c:	f3af 8000 	nop.w
    7a30:	f3af 8000 	nop.w
    7a34:	f3af 8000 	nop.w
    7a38:	f3af 8000 	nop.w
    7a3c:	f3af 8000 	nop.w

00007a40 <tPBSawSquare_setFreq>:
    _tPBSawSquare* c = *osc;
    7a40:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    7a42:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
    7a46:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    7a4a:	ee27 0a80 	vmul.f32	s0, s15, s0
    7a4e:	ed83 0a02 	vstr	s0, [r3, #8]
}
    7a52:	4770      	bx	lr
    7a54:	f3af 8000 	nop.w
    7a58:	f3af 8000 	nop.w
    7a5c:	f3af 8000 	nop.w

00007a60 <tMBPulse_place_step_dd_noBuffer>:
{
    7a60:	b510      	push	{r4, lr}
    7a62:	ed2d 8b04 	vpush	{d8-d9}
    7a66:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 7ad0 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    7a6a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    7a6e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBPulse* c = *osc;
    7a72:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    7a74:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    7a78:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    7a7c:	eee0 7a08 	vfma.f32	s15, s0, s16
    7a80:	eeb0 0a67 	vmov.f32	s0, s15
    7a84:	f001 f910 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    7a88:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7a8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7a90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    7a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7a98:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    7a9a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7aa2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7aa6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    7aaa:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7aae:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7ab2:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7ab6:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    7aba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7abe:	3301      	adds	r3, #1
    7ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7ac4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    7ac8:	ecbd 8b04 	vpop	{d8-d9}
    7acc:	bd10      	pop	{r4, pc}
    7ace:	bf00      	nop
    7ad0:	42800000 	.word	0x42800000
    7ad4:	f3af 8000 	nop.w
    7ad8:	f3af 8000 	nop.w
    7adc:	f3af 8000 	nop.w

00007ae0 <tMBTriangle_place_dd_noBuffer>:
{
    7ae0:	b510      	push	{r4, lr}
    7ae2:	ed2d 8b06 	vpush	{d8-d10}
    7ae6:	eddf 8a1f 	vldr	s17, [pc, #124]	; 7b64 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    7aea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    7aee:	6804      	ldr	r4, [r0, #0]
{
    7af0:	eeb0 9a40 	vmov.f32	s18, s0
    7af4:	ee60 8aa8 	vmul.f32	s17, s1, s17
    7af8:	eeb0 8a41 	vmov.f32	s16, s2
    7afc:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    7b00:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    7b04:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    7b08:	eeb0 0a67 	vmov.f32	s0, s15
    7b0c:	f001 f8cc 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    7b10:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7b14:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    7b18:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (Lfloat)i;
    7b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7b20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7b24:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    7b26:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7b2e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    7b32:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7b36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    7b3a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7b3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7b42:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    7b46:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7b4a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    7b4e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7b52:	3301      	adds	r3, #1
    7b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7b58:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    7b5c:	ecbd 8b06 	vpop	{d8-d10}
    7b60:	bd10      	pop	{r4, pc}
    7b62:	bf00      	nop
    7b64:	42800000 	.word	0x42800000
    7b68:	f3af 8000 	nop.w
    7b6c:	f3af 8000 	nop.w
    7b70:	f3af 8000 	nop.w
    7b74:	f3af 8000 	nop.w
    7b78:	f3af 8000 	nop.w
    7b7c:	f3af 8000 	nop.w

00007b80 <tMBSineTri_place_dd_noBuffer>:
{
    7b80:	b510      	push	{r4, lr}
    7b82:	ed2d 8b06 	vpush	{d8-d10}
    7b86:	eddf 8a1f 	vldr	s17, [pc, #124]	; 7c04 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    7b8a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    7b8e:	6804      	ldr	r4, [r0, #0]
{
    7b90:	eeb0 9a40 	vmov.f32	s18, s0
    7b94:	ee60 8aa8 	vmul.f32	s17, s1, s17
    7b98:	eeb0 8a41 	vmov.f32	s16, s2
    7b9c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    7ba0:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    7ba4:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    7ba8:	eeb0 0a67 	vmov.f32	s0, s15
    7bac:	f001 f87c 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    7bb0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bb4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    7bb8:	ee28 1a0a 	vmul.f32	s2, s16, s20
	r -= (Lfloat)i;
    7bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7bc0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bc4:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    7bc6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bce:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    7bd2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7bd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    7bda:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7bde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7be2:	ed83 1a3c 	vstr	s2, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    7be6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7bea:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    7bee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7bf2:	3301      	adds	r3, #1
    7bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7bf8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    7bfc:	ecbd 8b06 	vpop	{d8-d10}
    7c00:	bd10      	pop	{r4, pc}
    7c02:	bf00      	nop
    7c04:	42800000 	.word	0x42800000
    7c08:	f3af 8000 	nop.w
    7c0c:	f3af 8000 	nop.w
    7c10:	f3af 8000 	nop.w
    7c14:	f3af 8000 	nop.w
    7c18:	f3af 8000 	nop.w
    7c1c:	f3af 8000 	nop.w

00007c20 <tMBSaw_place_step_dd_noBuffer>:
{
    7c20:	b510      	push	{r4, lr}
    7c22:	ed2d 8b04 	vpush	{d8-d9}
    7c26:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 7c90 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    7c2a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    7c2e:	eef0 8a40 	vmov.f32	s17, s0
	_tMBSaw* c = *osc;
    7c32:	6804      	ldr	r4, [r0, #0]
	r = MINBLEP_PHASES * phase * inv_w;
    7c34:	ee20 8a88 	vmul.f32	s16, s1, s16
{
    7c38:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    7c3c:	eee0 7a08 	vfma.f32	s15, s0, s16
    7c40:	eeb0 0a67 	vmov.f32	s0, s15
    7c44:	f001 f830 	bl	8ca8 <__lrintf_veneer>
	r -= (Lfloat)i;
    7c48:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c4c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7c50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    7c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c58:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    7c5a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7c62:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7c66:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    7c6a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7c6e:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7c72:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7c76:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    7c7a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    7c7e:	3301      	adds	r3, #1
    7c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c84:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
    7c88:	ecbd 8b04 	vpop	{d8-d9}
    7c8c:	bd10      	pop	{r4, pc}
    7c8e:	bf00      	nop
    7c90:	42800000 	.word	0x42800000
    7c94:	f3af 8000 	nop.w
    7c98:	f3af 8000 	nop.w
    7c9c:	f3af 8000 	nop.w

00007ca0 <tMBSawPulse_place_step_dd_noBuffer>:
{
    7ca0:	b510      	push	{r4, lr}
    7ca2:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    7ca6:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    7ca8:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    7cac:	b36b      	cbz	r3, 7d0a <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    7cae:	ed9f 8a18 	vldr	s16, [pc, #96]	; 7d10 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    7cb2:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    7cb6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    7cba:	ee20 8a88 	vmul.f32	s16, s1, s16
    7cbe:	eeb0 9a41 	vmov.f32	s18, s2
    7cc2:	eea8 0a88 	vfma.f32	s0, s17, s16
    7cc6:	f000 ffef 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    7cca:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7cce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7cd2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7cda:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7cdc:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7ce4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7ce8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7cec:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    7cf0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7cf4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7cf8:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7cfc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7d00:	3301      	adds	r3, #1
    7d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d06:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    7d0a:	ecbd 8b04 	vpop	{d8-d9}
    7d0e:	bd10      	pop	{r4, pc}
    7d10:	42800000 	.word	0x42800000
    7d14:	f3af 8000 	nop.w
    7d18:	f3af 8000 	nop.w
    7d1c:	f3af 8000 	nop.w

00007d20 <tMBSawPulse_tick>:
{
    7d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d24:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    7d28:	6804      	ldr	r4, [r0, #0]
    Lfloat sawShape = 1.0f - c->shape;
    7d2a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    7d2e:	b084      	sub	sp, #16
    7d30:	4607      	mov	r7, r0
    sync = c->sync;
    7d32:	ed94 8a04 	vldr	s16, [r4, #16]
    Lfloat shape = c->shape;
    7d36:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7d3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    7d3e:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    Lfloat sawShape = 1.0f - c->shape;
    7d42:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    7d46:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    7d4a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    7d4e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    7d56:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    7d5a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    7d5e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    7d62:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7d64:	f340 80d8 	ble.w	7f18 <tMBSawPulse_tick+0x1f8>
    7d68:	69a3      	ldr	r3, [r4, #24]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	dd65      	ble.n	7e3a <tMBSawPulse_tick+0x11a>
    7d6e:	edd4 6a05 	vldr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7d72:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7d76:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    7d7a:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    7d7e:	edc4 6a05 	vstr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7d82:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    7d86:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    7d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
    7d8e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7d92:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    7d96:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    7d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    7d9e:	2b00      	cmp	r3, #0
    7da0:	f040 80d1 	bne.w	7f46 <tMBSawPulse_tick+0x226>
		if (sw > 0)
    7da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7da8:	f340 8210 	ble.w	81cc <_Min_Stack_Size+0x1cc>
			if (p >= b) {
    7dac:	eeb4 8acb 	vcmpe.f32	s16, s22
    7db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7db4:	f280 81cc 	bge.w	8150 <_Min_Stack_Size+0x150>
    7db8:	eddf 5ae3 	vldr	s11, [pc, #908]	; 8148 <_Min_Stack_Size+0x148>
			if (p >= 1.0f) {
    7dbc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7dc0:	eeb4 8ae8 	vcmpe.f32	s16, s17
    7dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dc8:	f2c0 80cb 	blt.w	7f62 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
    7dcc:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    7dce:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    7dd2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    7dd6:	2b00      	cmp	r3, #0
    7dd8:	f000 81f3 	beq.w	81c2 <_Min_Stack_Size+0x1c2>
		r = MINBLEP_PHASES * phase * inv_w;
    7ddc:	eddf 7adb 	vldr	s15, [pc, #876]	; 814c <_Min_Stack_Size+0x14c>
		i = lrintf(r - 0.5f);
    7de0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    7de4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    7de8:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    7dec:	eea9 0a08 	vfma.f32	s0, s18, s16
    7df0:	f000 ff5a 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    7df4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7df8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7dfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7e04:	eddf 5ad0 	vldr	s11, [pc, #832]	; 8148 <_Min_Stack_Size+0x148>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e08:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7e0a:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e12:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7e16:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7e1a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7e1e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    7e22:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7e26:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7e2a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7e2e:	3301      	adds	r3, #1
    7e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e34:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    7e38:	e093      	b.n	7f62 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    7e3a:	ed94 9a05 	vldr	s18, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7e3e:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    7e42:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7e46:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    7e4a:	eefd 8ae7 	vcvt.s32.f32	s17, s15
    7e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    7e52:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    7e56:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
    7e5a:	f040 8639 	bne.w	8ad0 <_Min_Stack_Size+0xad0>
        if (sw > 0) p = eof_offset;
    7e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7e62:	4625      	mov	r5, r4
        Lfloat eof_offset = sync * sw;
    7e64:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    7e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat p_at_reset = p - eof_offset;
    7e6c:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    7e70:	f340 8117 	ble.w	80a2 <_Min_Stack_Size+0xa2>
		 if (!k)
    7e74:	ee1c 2a90 	vmov	r2, s25
    7e78:	2a00      	cmp	r2, #0
    7e7a:	f040 8274 	bne.w	8366 <_Min_Stack_Size+0x366>
				 if (p_at_reset >= b)
    7e7e:	eeb4 baed 	vcmpe.f32	s22, s27
    7e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e86:	f240 83c0 	bls.w	860a <_Min_Stack_Size+0x60a>
    _tMBSawPulse* c = *osc;
    7e8a:	46a0      	mov	r8, r4
    if (c->active)
    7e8c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    7e90:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
    7e94:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7e98:	eef4 dae8 	vcmpe.f32	s27, s17
    7e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ea0:	f280 82ad 	bge.w	83fe <_Min_Stack_Size+0x3fe>
    if (c->active)
    7ea4:	b35a      	cbz	r2, 7efe <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    7ea6:	eddf 8aa9 	vldr	s17, [pc, #676]	; 814c <_Min_Stack_Size+0x14c>
		i = lrintf(r - 0.5f);
    7eaa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    7eae:	ee6d da8d 	vmul.f32	s27, s27, s26
    7eb2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    7eb6:	eea8 0a28 	vfma.f32	s0, s16, s17
    7eba:	f000 fef5 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    7ebe:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7ec2:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    7ec6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    7eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7ece:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    7ed0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    7ed8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    7edc:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    7ee0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    7ee4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    7ee8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    7eec:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    7ef0:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    7ef4:	3301      	adds	r3, #1
    7ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7efa:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
    7efe:	f1b9 0f00 	cmp.w	r9, #0
    7f02:	f040 8419 	bne.w	8738 <_Min_Stack_Size+0x738>
			if (p >= b) {
    7f06:	eeb4 bac8 	vcmpe.f32	s22, s16
    7f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f0e:	f240 80df 	bls.w	80d0 <_Min_Stack_Size+0xd0>
		 if (!k)
    7f12:	eddf 5a8d 	vldr	s11, [pc, #564]	; 8148 <_Min_Stack_Size+0x148>
    7f16:	e024      	b.n	7f62 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
    7f18:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    7f1c:	ee1c 3a90 	vmov	r3, s25
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7f20:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    7f24:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    7f28:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    7f2c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    7f30:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    7f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    7f38:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7f3c:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    7f40:	2b00      	cmp	r3, #0
    7f42:	f43f af2f 	beq.w	7da4 <tMBSawPulse_tick+0x84>
		if (sw > 0)
    7f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f4a:	f340 81bd 	ble.w	82c8 <_Min_Stack_Size+0x2c8>
			if (p >= 1.0f) {
    7f4e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7f52:	eeb4 8ae8 	vcmpe.f32	s16, s17
    7f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f5a:	f280 80ac 	bge.w	80b6 <_Min_Stack_Size+0xb6>
    c->_k = k;
    7f5e:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    7f62:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    7f66:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    7f68:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    7f6c:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    7f70:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    7f74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    7f78:	eea6 7a8d 	vfma.f32	s14, s13, s26
    7f7c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    7f80:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    7f84:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7f88:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	f000 81e5 	beq.w	835c <_Min_Stack_Size+0x35c>
    7f92:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    7f96:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7f9a:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    7f9e:	2000      	movs	r0, #0
    7fa0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    7fa4:	4d67      	ldr	r5, [pc, #412]	; (8144 <_Min_Stack_Size+0x144>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    7fa6:	ebae 0300 	sub.w	r3, lr, r0
    7faa:	b29b      	uxth	r3, r3
    7fac:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
    7fb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fb8:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7fbc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7fc0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7fc4:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    7fc8:	b289      	uxth	r1, r1
    7fca:	f8bd 900e 	ldrh.w	r9, [sp, #14]
    7fce:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7fd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7fd4:	fa1f f888 	uxth.w	r8, r8
    7fd8:	fa1f f989 	uxth.w	r9, r9
    7fdc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    7fe0:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    7fe4:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    7fe8:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    7fec:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    7ff0:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    7ff2:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    7ff6:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    7ffa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    7ffe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    8002:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    8006:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    800a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    800c:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    8010:	edd9 6a01 	vldr	s13, [r9, #4]
    8014:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    8018:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    801c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    8020:	eee6 7a26 	vfma.f32	s15, s12, s13
    8024:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    8028:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    802c:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    8030:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    8032:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    8036:	d32e      	bcc.n	8096 <_Min_Stack_Size+0x96>
			c->numBLEPs--;
    8038:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    803c:	3001      	adds	r0, #1
    803e:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
    8042:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    8044:	4282      	cmp	r2, r0
			c->numBLEPs--;
    8046:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    804a:	dcac      	bgt.n	7fa6 <tMBSawPulse_tick+0x286>
    804c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    8050:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    8054:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    8058:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    805c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    805e:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    8062:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    8066:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    806a:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    806e:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    8072:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    8076:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    807a:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    807c:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    8080:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    8084:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    8088:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    808c:	b004      	add	sp, #16
    808e:	ecbd 8b0e 	vpop	{d8-d14}
    8092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    8096:	f89d 300d 	ldrb.w	r3, [sp, #13]
    809a:	3001      	adds	r0, #1
    809c:	4283      	cmp	r3, r0
    809e:	dc82      	bgt.n	7fa6 <tMBSawPulse_tick+0x286>
    80a0:	e7d4      	b.n	804c <_Min_Stack_Size+0x4c>
        else if (sw < 0) p = 1.0f - eof_offset;
    80a2:	f100 8229 	bmi.w	84f8 <_Min_Stack_Size+0x4f8>
		 if (!k)
    80a6:	ee1c 2a90 	vmov	r2, s25
    80aa:	2a00      	cmp	r2, #0
    80ac:	f040 8197 	bne.w	83de <_Min_Stack_Size+0x3de>
    p += sw - (int)sw;
    80b0:	eeb0 8a68 	vmov.f32	s16, s17
    80b4:	e72d      	b.n	7f12 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    80b6:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    80b8:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    80bc:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    80c0:	2b00      	cmp	r3, #0
    80c2:	f040 8161 	bne.w	8388 <_Min_Stack_Size+0x388>
			if (!k && p >= b) {
    80c6:	eeb4 bac8 	vcmpe.f32	s22, s16
    80ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80ce:	d878      	bhi.n	81c2 <_Min_Stack_Size+0x1c2>
    _tMBSawPulse* c = *osc;
    80d0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    80d2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    80d6:	2b00      	cmp	r3, #0
    80d8:	f000 8151 	beq.w	837e <_Min_Stack_Size+0x37e>
		r = MINBLEP_PHASES * phase * inv_w;
    80dc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 814c <_Min_Stack_Size+0x14c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    80e0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    80e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    80e8:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
    80ec:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    80f0:	eea8 0a89 	vfma.f32	s0, s17, s18
    80f4:	f000 fdd8 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    80f8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    80fc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8100:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8108:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    810a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    810e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8116:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
    811a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    811e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8122:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8126:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    812a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    812e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8132:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8136:	3301      	adds	r3, #1
    8138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    813c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    8140:	e70f      	b.n	7f62 <tMBSawPulse_tick+0x242>
    8142:	bf00      	nop
    8144:	24022bac 	.word	0x24022bac
    8148:	00000000 	.word	0x00000000
    814c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    8150:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    8152:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8156:	2b00      	cmp	r3, #0
    8158:	f000 814c 	beq.w	83f4 <_Min_Stack_Size+0x3f4>
		r = MINBLEP_PHASES * phase * inv_w;
    815c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 814c <_Min_Stack_Size+0x14c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    8160:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    8164:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    8168:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    816c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    8170:	eea9 0aa8 	vfma.f32	s0, s19, s17
    8174:	f000 fd98 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8178:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    817c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8180:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8188:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    818a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    818e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8196:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    819a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    819e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    81a2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    81a6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    81aa:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    81ae:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    81b2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    81b6:	3301      	adds	r3, #1
    81b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    81bc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    81c0:	e5fc      	b.n	7dbc <tMBSawPulse_tick+0x9c>
				x = 0.5f;
    81c2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    81c6:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 8148 <_Min_Stack_Size+0x148>
    81ca:	e6ca      	b.n	7f62 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
    81cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
    81d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81d4:	f57f ae9d 	bpl.w	7f12 <tMBSawPulse_tick+0x1f2>
    81d8:	eef5 7a40 	vcmp.f32	s15, #0.0
    81dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81e0:	f57f ae97 	bpl.w	7f12 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
    81e4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    81e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    81ea:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    81ee:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    81f2:	b353      	cbz	r3, 824a <_Min_Stack_Size+0x24a>
		r = MINBLEP_PHASES * phase * inv_w;
    81f4:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    81f8:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 814c <_Min_Stack_Size+0x14c>
    81fc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    8200:	eea8 0a29 	vfma.f32	s0, s16, s19
    8204:	f000 fd50 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8208:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    820c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8210:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8218:	4ab2      	ldr	r2, [pc, #712]	; (84e4 <_Min_Stack_Size+0x4e4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    821a:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    821c:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8224:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8228:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    822c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8230:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    8234:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8238:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    823c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8240:	3301      	adds	r3, #1
    8242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8246:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    824a:	eeb4 bae8 	vcmpe.f32	s22, s17
    824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8252:	f340 8446 	ble.w	8ae2 <_Min_Stack_Size+0xae2>
    _tMBSawPulse* c = *osc;
    8256:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    8258:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    825c:	2b00      	cmp	r3, #0
    825e:	f000 8327 	beq.w	88b0 <_Min_Stack_Size+0x8b0>
		r = MINBLEP_PHASES * phase * inv_w;
    8262:	eddf 7aa4 	vldr	s15, [pc, #656]	; 84f4 <_Min_Stack_Size+0x4f4>
    8266:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    826a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    826e:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    8272:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8276:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    827a:	eea9 0a29 	vfma.f32	s0, s18, s19
    827e:	f000 fd13 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8282:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8286:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    828a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    828e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8292:	eddf 5a97 	vldr	s11, [pc, #604]	; 84f0 <_Min_Stack_Size+0x4f0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8296:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    8298:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    829c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    82a0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    82a4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    82a8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    82ac:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    82b0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    82b4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    82b8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    82bc:	3301      	adds	r3, #1
    82be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82c2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    82c6:	e64c      	b.n	7f62 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
    82c8:	f57f ae49 	bpl.w	7f5e <tMBSawPulse_tick+0x23e>
			if (p < b) {
    82cc:	eeb4 8acb 	vcmpe.f32	s16, s22
    82d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82d4:	f100 80cd 	bmi.w	8472 <_Min_Stack_Size+0x472>
			if (p < 0.0f) {
    82d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    82dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82e0:	f57f ae3d 	bpl.w	7f5e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    82e4:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    82e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    82ea:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    82ee:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    82f2:	2b00      	cmp	r3, #0
    82f4:	f000 8302 	beq.w	88fc <_Min_Stack_Size+0x8fc>
		i = lrintf(r - 0.5f);
    82f8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    82fc:	eddf 9a7d 	vldr	s19, [pc, #500]	; 84f4 <_Min_Stack_Size+0x4f4>
		r = MINBLEP_PHASES * phase * inv_w;
    8300:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    8304:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    8308:	eeb0 0a6a 	vmov.f32	s0, s21
    830c:	eea9 0a29 	vfma.f32	s0, s18, s19
    8310:	f000 fcca 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8314:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8318:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    831c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8324:	4a6f      	ldr	r2, [pc, #444]	; (84e4 <_Min_Stack_Size+0x4e4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8326:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8328:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    832c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8330:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    8334:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8338:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    833c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8340:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    8344:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8348:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    834c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8350:	3301      	adds	r3, #1
    8352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8356:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    835a:	e602      	b.n	7f62 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    835c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    8360:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    8364:	e674      	b.n	8050 <_Min_Stack_Size+0x50>
				 if (p_at_reset >= 1.0f)
    8366:	eef4 dae9 	vcmpe.f32	s27, s19
    836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    836e:	f280 8159 	bge.w	8624 <_Min_Stack_Size+0x624>
    _tMBSawPulse* c = *osc;
    8372:	46a0      	mov	r8, r4
    if (c->active)
    8374:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    8378:	ee1c 9a90 	vmov	r9, s25
    837c:	e592      	b.n	7ea4 <tMBSawPulse_tick+0x184>
    837e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    8382:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    8386:	e5ec      	b.n	7f62 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
    8388:	eddf 9a5a 	vldr	s19, [pc, #360]	; 84f4 <_Min_Stack_Size+0x4f4>
		i = lrintf(r - 0.5f);
    838c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    8390:	ee69 9a29 	vmul.f32	s19, s18, s19
    8394:	eea9 0a88 	vfma.f32	s0, s19, s16
    8398:	f000 fc86 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    839c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    83a0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    83a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    83a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    83ac:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    83ae:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    83b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    83b6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    83ba:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    83be:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    83c2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    83c6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    83ca:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    83ce:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    83d2:	3301      	adds	r3, #1
    83d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83d8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    83dc:	e673      	b.n	80c6 <_Min_Stack_Size+0xc6>
			 else if (sw < 0)
    83de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    83e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    83e6:	f100 815b 	bmi.w	86a0 <_Min_Stack_Size+0x6a0>
    c->_k = k;
    83ea:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    83ee:	eeb0 8a68 	vmov.f32	s16, s17
    83f2:	e5b6      	b.n	7f62 <tMBSawPulse_tick+0x242>
    83f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    83f8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    83fc:	e4de      	b.n	7dbc <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
    83fe:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    8402:	2a00      	cmp	r2, #0
    8404:	f000 810b 	beq.w	861e <_Min_Stack_Size+0x61e>
		r = MINBLEP_PHASES * phase * inv_w;
    8408:	eddf 9a3a 	vldr	s19, [pc, #232]	; 84f4 <_Min_Stack_Size+0x4f4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    840c:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
    8410:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    8414:	f04f 0900 	mov.w	r9, #0
    8418:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
    841c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    8420:	eeac 0aa9 	vfma.f32	s0, s25, s19
    8424:	f000 fc40 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8428:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    842c:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8430:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8438:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    843a:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    843e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8442:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8446:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    844a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    844e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    8452:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8456:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    845a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    845e:	3301      	adds	r3, #1
    8460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8464:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    8468:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    846c:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    8470:	e518      	b.n	7ea4 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
    8472:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    8474:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    8478:	ee1c 3a90 	vmov	r3, s25
    847c:	2b00      	cmp	r3, #0
    847e:	f000 820d 	beq.w	889c <_Min_Stack_Size+0x89c>
		r = MINBLEP_PHASES * phase * inv_w;
    8482:	eddf 9a1c 	vldr	s19, [pc, #112]	; 84f4 <_Min_Stack_Size+0x4f4>
    8486:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    848a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    848e:	eddf ca16 	vldr	s25, [pc, #88]	; 84e8 <_Min_Stack_Size+0x4e8>
    8492:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    8496:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    849a:	eea9 0aa8 	vfma.f32	s0, s19, s17
    849e:	f000 fc03 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    84a2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84a6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    84aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    84ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84b2:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    84b4:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    84bc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    84c0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    84c4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    84c8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    84cc:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    84d0:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    84d4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    84d8:	3301      	adds	r3, #1
    84da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84de:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    84e2:	e6f9      	b.n	82d8 <_Min_Stack_Size+0x2d8>
    84e4:	bf800000 	.word	0xbf800000
    84e8:	00000000 	.word	0x00000000
    84ec:	00000001 	.word	0x00000001
    84f0:	00000000 	.word	0x00000000
    84f4:	42800000 	.word	0x42800000
		 if (!k)
    84f8:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    84fc:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    8500:	2a00      	cmp	r2, #0
    8502:	f040 80cf 	bne.w	86a4 <_Min_Stack_Size+0x6a4>
				 if (p_at_reset < 0.0f)
    8506:	eef5 da40 	vcmp.f32	s27, #0.0
    850a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    850e:	d571      	bpl.n	85f4 <_Min_Stack_Size+0x5f4>
    if (c->active)
    8510:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    8514:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    8518:	2b00      	cmp	r3, #0
    851a:	f040 8231 	bne.w	8980 <_Min_Stack_Size+0x980>
				 if (k && p_at_reset < b)
    851e:	eeb4 baed 	vcmpe.f32	s22, s27
    8522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8526:	f340 82d7 	ble.w	8ad8 <_Min_Stack_Size+0xad8>
        else if (sw < 0) p = 1.0f - eof_offset;
    852a:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    852e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8532:	2b00      	cmp	r3, #0
    8534:	f000 81d6 	beq.w	88e4 <_Min_Stack_Size+0x8e4>
		r = MINBLEP_PHASES * phase * inv_w;
    8538:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    853c:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 84f4 <_Min_Stack_Size+0x4f4>
		i = lrintf(r - 0.5f);
    8540:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    8544:	ed5f ca17 	vldr	s25, [pc, #-92]	; 84ec <_Min_Stack_Size+0x4ec>
    8548:	ee69 9a29 	vmul.f32	s19, s18, s19
    854c:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    8550:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    8554:	eea9 0aa8 	vfma.f32	s0, s19, s17
    8558:	f000 fba6 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    855c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8560:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8564:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8568:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    856c:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    856e:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8576:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    857a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    857e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8582:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8586:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    858a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    858e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8592:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8596:	3301      	adds	r3, #1
    8598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    859c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    85a0:	eeb4 bace 	vcmpe.f32	s22, s28
    85a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    85a8:	f77f acd9 	ble.w	7f5e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    85ac:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    85ae:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    85b2:	2b00      	cmp	r3, #0
    85b4:	f43f ae05 	beq.w	81c2 <_Min_Stack_Size+0x1c2>
		r = MINBLEP_PHASES * phase * inv_w;
    85b8:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 84f4 <_Min_Stack_Size+0x4f4>
    85bc:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    85c0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    85c4:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    85c8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    85cc:	eea9 0a0e 	vfma.f32	s0, s18, s28
    85d0:	f000 fb6a 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    85d4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    85d8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    85dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    85e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    85e4:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 84f0 <_Min_Stack_Size+0x4f0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    85e8:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    85ea:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    85ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85f2:	e655      	b.n	82a0 <_Min_Stack_Size+0x2a0>
		else if (sw < 0)
    85f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    85f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    85fc:	f100 814b 	bmi.w	8896 <_Min_Stack_Size+0x896>
        else if (sw < 0) p = 1.0f - eof_offset;
    8600:	eeb0 8a4e 	vmov.f32	s16, s28
    8604:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 84f0 <_Min_Stack_Size+0x4f0>
    8608:	e4ab      	b.n	7f62 <tMBSawPulse_tick+0x242>
    if (c->active)
    860a:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    860e:	2b00      	cmp	r3, #0
    8610:	f040 8109 	bne.w	8826 <_Min_Stack_Size+0x826>
				 if (p_at_reset >= 1.0f)
    8614:	eef4 dae9 	vcmpe.f32	s27, s19
    8618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    861c:	db0f      	blt.n	863e <_Min_Stack_Size+0x63e>
				x = 0.5f;
    861e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8622:	e470      	b.n	7f06 <tMBSawPulse_tick+0x1e6>
    if (c->active)
    8624:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    8628:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    862c:	f1b9 0f00 	cmp.w	r9, #0
    8630:	f040 8084 	bne.w	873c <_Min_Stack_Size+0x73c>
				 if (!k && p_at_reset >= b)
    8634:	eeb4 baed 	vcmpe.f32	s22, s27
    8638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    863c:	d8ef      	bhi.n	861e <_Min_Stack_Size+0x61e>
    if (c->active)
    863e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    8642:	2b00      	cmp	r3, #0
    8644:	d0eb      	beq.n	861e <_Min_Stack_Size+0x61e>
		r = MINBLEP_PHASES * phase * inv_w;
    8646:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 84f4 <_Min_Stack_Size+0x4f4>
		i = lrintf(r - 0.5f);
    864a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    864e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8652:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    8656:	eea8 0a28 	vfma.f32	s0, s16, s17
    865a:	f000 fb25 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    865e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8662:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8666:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    866a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    866e:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    8670:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8678:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    867c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8680:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8684:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8688:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    868c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8690:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8694:	3301      	adds	r3, #1
    8696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    869a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    869e:	e432      	b.n	7f06 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    86a0:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    86a4:	eeb4 baed 	vcmpe.f32	s22, s27
    86a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86ac:	f300 8108 	bgt.w	88c0 <_Min_Stack_Size+0x8c0>
				 if (p_at_reset < 0.0f)
    86b0:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    86b4:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    86b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86bc:	f100 8126 	bmi.w	890c <_Min_Stack_Size+0x90c>
        else if (sw < 0) p = 1.0f - eof_offset;
    86c0:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    86c4:	b38b      	cbz	r3, 872a <_Min_Stack_Size+0x72a>
		r = MINBLEP_PHASES * phase * inv_w;
    86c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    86ca:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 84f4 <_Min_Stack_Size+0x4f4>
		i = lrintf(r - 0.5f);
    86ce:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    86d2:	ee69 9a29 	vmul.f32	s19, s18, s19
    86d6:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    86da:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
    86de:	eea9 0aae 	vfma.f32	s0, s19, s29
    86e2:	f000 fae1 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    86e6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    86ea:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    86ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    86f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    86f6:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    86f8:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    86fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8700:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    8704:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8708:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    870c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8710:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8714:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8718:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    871c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8720:	3301      	adds	r3, #1
    8722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8726:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    872a:	ee1c 3a90 	vmov	r3, s25
    872e:	2b00      	cmp	r3, #0
    8730:	f47f af36 	bne.w	85a0 <_Min_Stack_Size+0x5a0>
    8734:	683d      	ldr	r5, [r7, #0]
    8736:	e6fa      	b.n	852e <_Min_Stack_Size+0x52e>
    8738:	683d      	ldr	r5, [r7, #0]
    873a:	e780      	b.n	863e <_Min_Stack_Size+0x63e>
		i = lrintf(r - 0.5f);
    873c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    8740:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 84f4 <_Min_Stack_Size+0x4f4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    8744:	ee78 aa2d 	vadd.f32	s21, s16, s27
    8748:	9301      	str	r3, [sp, #4]
    874a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    874e:	eeb0 0a6c 	vmov.f32	s0, s25
    8752:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    8756:	f000 faa7 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    875a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    875e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8762:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
    876a:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    876c:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    876e:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8772:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (Lfloat)i;
    8776:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    877e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8782:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8786:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    878a:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
    878e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8792:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8796:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
    879a:	f102 0201 	add.w	r2, r2, #1
    879e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    87a2:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    87a6:	f8d7 8000 	ldr.w	r8, [r7]
    87aa:	4645      	mov	r5, r8
    if (c->active)
    87ac:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    87b0:	f200 8175 	bhi.w	8a9e <_Min_Stack_Size+0xa9e>
    if (c->active)
    87b4:	2a00      	cmp	r2, #0
    87b6:	f43f af42 	beq.w	863e <_Min_Stack_Size+0x63e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    87ba:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
    87be:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
    87c2:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
    87c6:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    87ca:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    87ce:	eea9 0aa8 	vfma.f32	s0, s19, s17
    87d2:	f000 fa69 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    87d6:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    87da:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    87de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    87e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    87e6:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    87e8:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    87ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    87f0:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    87f4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    87f8:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    87fc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8800:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    8804:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8808:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    880c:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
    8810:	444b      	add	r3, r9
    8812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8816:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    881a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    881e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    8822:	f7ff bb3f 	b.w	7ea4 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
    8826:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 84f4 <_Min_Stack_Size+0x4f4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    882a:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    882e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    8832:	f04f 0901 	mov.w	r9, #1
    8836:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    883a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    883e:	eea8 0aa9 	vfma.f32	s0, s17, s19
    8842:	f000 fa31 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8846:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    884a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    884e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8852:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8856:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    8858:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    885c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    8860:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    8864:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8868:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    886c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8870:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    8874:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8878:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    887c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    8880:	444b      	add	r3, r9
    8882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8886:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    888a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
    888e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
    8892:	f7ff baff 	b.w	7e94 <tMBSawPulse_tick+0x174>
    8896:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    889a:	e711      	b.n	86c0 <_Min_Stack_Size+0x6c0>
			if (p < 0.0f) {
    889c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    88a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88a4:	f100 8100 	bmi.w	8aa8 <_Min_Stack_Size+0xaa8>
				x = 0.5f;
    88a8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    88ac:	f7ff bb57 	b.w	7f5e <tMBSawPulse_tick+0x23e>
				x = 0.5f;
    88b0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    88b4:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8af4 <_Min_Stack_Size+0xaf4>
    88b8:	eeb0 8a68 	vmov.f32	s16, s17
    88bc:	f7ff bb51 	b.w	7f62 <tMBSawPulse_tick+0x242>
    if (c->active)
    88c0:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    88c4:	ee1c 2a90 	vmov	r2, s25
    88c8:	2a00      	cmp	r2, #0
    88ca:	f040 80b6 	bne.w	8a3a <_Min_Stack_Size+0xa3a>
				 if (p_at_reset < 0.0f)
    88ce:	eef5 dac0 	vcmpe.f32	s27, #0.0
    88d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88d6:	f100 80ef 	bmi.w	8ab8 <_Min_Stack_Size+0xab8>
					 x = 0.5f;
    88da:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    88de:	eeb0 8a4e 	vmov.f32	s16, s28
    88e2:	e722      	b.n	872a <_Min_Stack_Size+0x72a>
			if (p < b) {
    88e4:	eeb4 bace 	vcmpe.f32	s22, s28
    88e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88ec:	f73f ac69 	bgt.w	81c2 <_Min_Stack_Size+0x1c2>
				x = -0.5f;
    88f0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    88f4:	eddf ca80 	vldr	s25, [pc, #512]	; 8af8 <_Min_Stack_Size+0xaf8>
    88f8:	f7ff bb31 	b.w	7f5e <tMBSawPulse_tick+0x23e>
				x = -0.5f;
    88fc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    8900:	eeb0 8a67 	vmov.f32	s16, s15
    8904:	eef0 5a68 	vmov.f32	s11, s17
    8908:	f7ff bb2b 	b.w	7f62 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
    890c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8910:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    8914:	2b00      	cmp	r3, #0
    8916:	f000 80cf 	beq.w	8ab8 <_Min_Stack_Size+0xab8>
		r = MINBLEP_PHASES * phase * inv_w;
    891a:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8afc <_Min_Stack_Size+0xafc>
		i = lrintf(r - 0.5f);
    891e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    8922:	eddf ca75 	vldr	s25, [pc, #468]	; 8af8 <_Min_Stack_Size+0xaf8>
    8926:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    892a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    892e:	eea8 0a28 	vfma.f32	s0, s16, s17
    8932:	f000 f9b9 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8936:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    893a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    893e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8946:	4a6e      	ldr	r2, [pc, #440]	; (8b00 <_Min_Stack_Size+0xb00>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8948:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    894a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    894e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8952:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8956:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    895a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    895e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    8962:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8966:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    896a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    896e:	3301      	adds	r3, #1
    8970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8974:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    8978:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    897a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    897e:	e69f      	b.n	86c0 <_Min_Stack_Size+0x6c0>
		r = MINBLEP_PHASES * phase * inv_w;
    8980:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8afc <_Min_Stack_Size+0xafc>
		i = lrintf(r - 0.5f);
    8984:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    8988:	ee69 9a29 	vmul.f32	s19, s18, s19
    898c:	eea9 0aa8 	vfma.f32	s0, s19, s17
    8990:	f000 f98a 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8994:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8998:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    899c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    89a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    89a4:	4a56      	ldr	r2, [pc, #344]	; (8b00 <_Min_Stack_Size+0xb00>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    89a6:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    89a8:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    89ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    89b0:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    89b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    89b8:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    89bc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    89c0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    89c4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    89c8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    89cc:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    89d0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    89d4:	f103 0301 	add.w	r3, r3, #1
    89d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    89dc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    89e0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    89e2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    89e6:	dd6e      	ble.n	8ac6 <_Min_Stack_Size+0xac6>
    if (c->active)
    89e8:	2b00      	cmp	r3, #0
    89ea:	f43f ad9e 	beq.w	852a <_Min_Stack_Size+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
    89ee:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    89f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    89f6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    89fa:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    89fe:	eea8 0a29 	vfma.f32	s0, s16, s19
    8a02:	f000 f951 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8a06:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a0a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8a0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a16:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    8a18:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8a20:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a24:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8a28:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8a2c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8a30:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8a34:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8a38:	e797      	b.n	896a <_Min_Stack_Size+0x96a>
		r = MINBLEP_PHASES * phase * inv_w;
    8a3a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8afc <_Min_Stack_Size+0xafc>
    8a3e:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    8a42:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    8a46:	ee0c 3a90 	vmov	s25, r3
    8a4a:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    8a4e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    8a52:	eea9 0a88 	vfma.f32	s0, s19, s16
    8a56:	f000 f927 	bl	8ca8 <__lrintf_veneer>
		r -= (Lfloat)i;
    8a5a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a5e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8a62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    8a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a6a:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    8a6c:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    8a74:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    8a78:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    8a7c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    8a80:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    8a84:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    8a88:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    8a8c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8a90:	3301      	adds	r3, #1
    8a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a96:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    8a9a:	683d      	ldr	r5, [r7, #0]
    8a9c:	e608      	b.n	86b0 <_Min_Stack_Size+0x6b0>
    8a9e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8aa2:	4699      	mov	r9, r3
    8aa4:	f7ff b9fe 	b.w	7ea4 <tMBSawPulse_tick+0x184>
				p += 1.0f;
    8aa8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    8aac:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    8ab0:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    8ab4:	f7ff ba55 	b.w	7f62 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
    8ab8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    8abc:	eddf ca0e 	vldr	s25, [pc, #56]	; 8af8 <_Min_Stack_Size+0xaf8>
    8ac0:	eeb0 8a4e 	vmov.f32	s16, s28
    8ac4:	e56c      	b.n	85a0 <_Min_Stack_Size+0x5a0>
    8ac6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    8aca:	eddf ca0b 	vldr	s25, [pc, #44]	; 8af8 <_Min_Stack_Size+0xaf8>
		else if (sw < 0)
    8ace:	e5f7      	b.n	86c0 <_Min_Stack_Size+0x6c0>
    p += sw - (int)sw;
    8ad0:	eeb0 8a68 	vmov.f32	s16, s17
    8ad4:	f7ff b95f 	b.w	7d96 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
    8ad8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    8adc:	eddf ca06 	vldr	s25, [pc, #24]	; 8af8 <_Min_Stack_Size+0xaf8>
    8ae0:	e6fd      	b.n	88de <_Min_Stack_Size+0x8de>
    8ae2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    8ae6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    8aea:	eeb0 8a68 	vmov.f32	s16, s17
    8aee:	f7ff ba38 	b.w	7f62 <tMBSawPulse_tick+0x242>
    8af2:	bf00      	nop
    8af4:	00000000 	.word	0x00000000
    8af8:	00000001 	.word	0x00000001
    8afc:	42800000 	.word	0x42800000
    8b00:	bf800000 	.word	0xbf800000
    8b04:	f3af 8000 	nop.w
    8b08:	f3af 8000 	nop.w
    8b0c:	f3af 8000 	nop.w
    8b10:	f3af 8000 	nop.w
    8b14:	f3af 8000 	nop.w
    8b18:	f3af 8000 	nop.w
    8b1c:	f3af 8000 	nop.w

00008b20 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    8b20:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    8b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    8b26:	eddf 6a14 	vldr	s13, [pc, #80]	; 8b78 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    8b2a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    8b2e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    8b32:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    8b36:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    8b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    8b3e:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    8b42:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    8b46:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    8b4a:	dc0c      	bgt.n	8b66 <tMBSawPulse_setFreq+0x46>
    8b4c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8b7c <tMBSawPulse_setFreq+0x5c>
    8b50:	eeb4 0ae7 	vcmpe.f32	s0, s15
    8b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b58:	d405      	bmi.n	8b66 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    8b5a:	2201      	movs	r2, #1
    8b5c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    8b60:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    8b64:	4770      	bx	lr
    	c->gain = 0.0f;
    8b66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8b80 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    8b6a:	2200      	movs	r2, #0
    8b6c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    8b70:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    8b74:	4770      	bx	lr
    8b76:	bf00      	nop
    8b78:	45bb8000 	.word	0x45bb8000
    8b7c:	c5bb8000 	.word	0xc5bb8000
    8b80:	00000000 	.word	0x00000000
    8b84:	f3af 8000 	nop.w
    8b88:	f3af 8000 	nop.w
    8b8c:	f3af 8000 	nop.w
    8b90:	f3af 8000 	nop.w
    8b94:	f3af 8000 	nop.w
    8b98:	f3af 8000 	nop.w
    8b9c:	f3af 8000 	nop.w

00008ba0 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    8ba0:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    8ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat last = c->lastsyncin;
    8ba6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    8baa:	ed83 0a03 	vstr	s0, [r3, #12]
    Lfloat delta = value - last;
    8bae:	ee30 6a67 	vsub.f32	s12, s0, s15
    Lfloat crossing = -last / delta;
    8bb2:	eef1 7a67 	vneg.f32	s15, s15
    8bb6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    8bba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    8bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bc2:	eef4 6ac7 	vcmpe.f32	s13, s14
    8bc6:	bfcc      	ite	gt
    8bc8:	2201      	movgt	r2, #1
    8bca:	2200      	movle	r2, #0
    8bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bd0:	f002 0201 	and.w	r2, r2, #1
    8bd4:	bf88      	it	hi
    8bd6:	2200      	movhi	r2, #0
    8bd8:	b122      	cbz	r2, 8be4 <tMBSawPulse_sync+0x44>
    8bda:	eeb5 0a40 	vcmp.f32	s0, #0.0
    8bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8be2:	da04      	bge.n	8bee <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    8be4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8bfc <tMBSawPulse_sync+0x5c>
    8be8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    8bec:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    8bee:	ee37 7a66 	vsub.f32	s14, s14, s13
    8bf2:	ee27 7a06 	vmul.f32	s14, s14, s12
    8bf6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    8bfa:	4770      	bx	lr
    8bfc:	00000000 	.word	0x00000000

00008c00 <__tIntPhasor_setPhase_veneer>:
    8c00:	f85f f000 	ldr.w	pc, [pc]	; 8c04 <__tIntPhasor_setPhase_veneer+0x4>
    8c04:	240134a1 	.word	0x240134a1

00008c08 <__tCycle_tick_veneer>:
    8c08:	f85f f000 	ldr.w	pc, [pc]	; 8c0c <__tCycle_tick_veneer+0x4>
    8c0c:	2401318d 	.word	0x2401318d

00008c10 <__tCycle_setPhase_veneer>:
    8c10:	f85f f000 	ldr.w	pc, [pc]	; 8c14 <__tCycle_setPhase_veneer+0x4>
    8c14:	240131f1 	.word	0x240131f1

00008c18 <__HAL_I2C_Slave_Receive_IT_veneer>:
    8c18:	f85f f000 	ldr.w	pc, [pc]	; 8c1c <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    8c1c:	24006991 	.word	0x24006991

00008c20 <__tLivingString2_initToPool_veneer>:
    8c20:	f85f f000 	ldr.w	pc, [pc]	; 8c24 <__tLivingString2_initToPool_veneer+0x4>
    8c24:	240141bd 	.word	0x240141bd

00008c28 <__tIntPhasor_setFreq_veneer>:
    8c28:	f85f f000 	ldr.w	pc, [pc]	; 8c2c <__tIntPhasor_setFreq_veneer+0x4>
    8c2c:	24013489 	.word	0x24013489

00008c30 <__tADSRT_on_veneer>:
    8c30:	f85f f000 	ldr.w	pc, [pc]	; 8c34 <__tADSRT_on_veneer+0x4>
    8c34:	2401075d 	.word	0x2401075d

00008c38 <__tLivingString2_setPickPos_veneer>:
    8c38:	f85f f000 	ldr.w	pc, [pc]	; 8c3c <__tLivingString2_setPickPos_veneer+0x4>
    8c3c:	24014521 	.word	0x24014521

00008c40 <__LEAF_shaper_veneer>:
    8c40:	f85f f000 	ldr.w	pc, [pc]	; 8c44 <__LEAF_shaper_veneer+0x4>
    8c44:	24012845 	.word	0x24012845

00008c48 <__setEffectsFunctions_veneer>:
    8c48:	f85f f000 	ldr.w	pc, [pc]	; 8c4c <__setEffectsFunctions_veneer+0x4>
    8c4c:	240028b1 	.word	0x240028b1

00008c50 <__tSquareLFO_setPhase_veneer>:
    8c50:	f85f f000 	ldr.w	pc, [pc]	; 8c54 <__tSquareLFO_setPhase_veneer+0x4>
    8c54:	240136bd 	.word	0x240136bd

00008c58 <__tADSRT_off_veneer>:
    8c58:	f85f f000 	ldr.w	pc, [pc]	; 8c5c <__tADSRT_off_veneer+0x4>
    8c5c:	24010781 	.word	0x24010781

00008c60 <__tLivingString2_setPrepPos_veneer>:
    8c60:	f85f f000 	ldr.w	pc, [pc]	; 8c64 <__tLivingString2_setPrepPos_veneer+0x4>
    8c64:	24014545 	.word	0x24014545

00008c68 <__LEAF_tanh_veneer>:
    8c68:	f85f f000 	ldr.w	pc, [pc]	; 8c6c <__LEAF_tanh_veneer+0x4>
    8c6c:	2401290d 	.word	0x2401290d

00008c70 <__tSawSquareLFO_setPhase_veneer>:
    8c70:	f85f f000 	ldr.w	pc, [pc]	; 8c74 <__tSawSquareLFO_setPhase_veneer+0x4>
    8c74:	24013831 	.word	0x24013831

00008c78 <__mtof_veneer>:
    8c78:	f85f f000 	ldr.w	pc, [pc]	; 8c7c <__mtof_veneer+0x4>
    8c7c:	24012c9d 	.word	0x24012c9d

00008c80 <__tLivingString2_setBrightness_veneer>:
    8c80:	f85f f000 	ldr.w	pc, [pc]	; 8c84 <__tLivingString2_setBrightness_veneer+0x4>
    8c84:	240145a9 	.word	0x240145a9

00008c88 <__tLadderFilter_setFreqFast_veneer>:
    8c88:	f85f f000 	ldr.w	pc, [pc]	; 8c8c <__tLadderFilter_setFreqFast_veneer+0x4>
    8c8c:	24012701 	.word	0x24012701

00008c90 <__setFilterTypes_veneer>:
    8c90:	f85f f000 	ldr.w	pc, [pc]	; 8c94 <__setFilterTypes_veneer+0x4>
    8c94:	24002cd5 	.word	0x24002cd5

00008c98 <__tVZFilter_setResonance_veneer>:
    8c98:	f85f f000 	ldr.w	pc, [pc]	; 8c9c <__tVZFilter_setResonance_veneer+0x4>
    8c9c:	240118f9 	.word	0x240118f9

00008ca0 <__tSimpleLivingString3_setLevMode_veneer>:
    8ca0:	f85f f000 	ldr.w	pc, [pc]	; 8ca4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    8ca4:	24013ecd 	.word	0x24013ecd

00008ca8 <__lrintf_veneer>:
    8ca8:	f85f f000 	ldr.w	pc, [pc]	; 8cac <__lrintf_veneer+0x4>
    8cac:	24015c5d 	.word	0x24015c5d

00008cb0 <__tTriLFO_setFreq_veneer>:
    8cb0:	f85f f000 	ldr.w	pc, [pc]	; 8cb4 <__tTriLFO_setFreq_veneer+0x4>
    8cb4:	24013925 	.word	0x24013925

00008cb8 <__tDiodeFilter_setQ_veneer>:
    8cb8:	f85f f000 	ldr.w	pc, [pc]	; 8cbc <__tDiodeFilter_setQ_veneer+0x4>
    8cbc:	24012405 	.word	0x24012405

00008cc0 <__tSimpleLivingString3_setLevStrength_veneer>:
    8cc0:	f85f f000 	ldr.w	pc, [pc]	; 8cc4 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    8cc4:	24013ec5 	.word	0x24013ec5

00008cc8 <__tLivingString2_setLevMode_veneer>:
    8cc8:	f85f f000 	ldr.w	pc, [pc]	; 8ccc <__tLivingString2_setLevMode_veneer+0x4>
    8ccc:	240146d5 	.word	0x240146d5

00008cd0 <__tCrusher_setRound_veneer>:
    8cd0:	f85f f000 	ldr.w	pc, [pc]	; 8cd4 <__tCrusher_setRound_veneer+0x4>
    8cd4:	24010325 	.word	0x24010325

00008cd8 <__tPBPulse_setWidth_veneer>:
    8cd8:	f85f f000 	ldr.w	pc, [pc]	; 8cdc <__tPBPulse_setWidth_veneer+0x4>
    8cdc:	24013329 	.word	0x24013329

00008ce0 <__tSineTriLFO_setFreq_veneer>:
    8ce0:	f85f f000 	ldr.w	pc, [pc]	; 8ce4 <__tSineTriLFO_setFreq_veneer+0x4>
    8ce4:	24013a81 	.word	0x24013a81

00008ce8 <__tLinearDelay_tick_veneer>:
    8ce8:	f85f f000 	ldr.w	pc, [pc]	; 8cec <__tLinearDelay_tick_veneer+0x4>
    8cec:	2400fe35 	.word	0x2400fe35

00008cf0 <__tADSRT_setDecay_veneer>:
    8cf0:	f85f f000 	ldr.w	pc, [pc]	; 8cf4 <__tADSRT_setDecay_veneer+0x4>
    8cf4:	240106bd 	.word	0x240106bd

00008cf8 <__tSimpleLivingString3_setDecay_veneer>:
    8cf8:	f85f f000 	ldr.w	pc, [pc]	; 8cfc <__tSimpleLivingString3_setDecay_veneer+0x4>
    8cfc:	24013e69 	.word	0x24013e69

00008d00 <__tSimpleLivingString3_pluck_veneer>:
    8d00:	f85f f000 	ldr.w	pc, [pc]	; 8d04 <__tSimpleLivingString3_pluck_veneer+0x4>
    8d04:	24013ee1 	.word	0x24013ee1

00008d08 <__tTriLFO_setPhase_veneer>:
    8d08:	f85f f000 	ldr.w	pc, [pc]	; 8d0c <__tTriLFO_setPhase_veneer+0x4>
    8d0c:	2401393d 	.word	0x2401393d

00008d10 <__tCrusher_setSamplingRatio_veneer>:
    8d10:	f85f f000 	ldr.w	pc, [pc]	; 8d14 <__tCrusher_setSamplingRatio_veneer+0x4>
    8d14:	2401032d 	.word	0x2401032d

00008d18 <__memcpy_veneer>:
    8d18:	f85f f000 	ldr.w	pc, [pc]	; 8d1c <__memcpy_veneer+0x4>
    8d1c:	240154c5 	.word	0x240154c5

00008d20 <__tLivingString2_setLevStrength_veneer>:
    8d20:	f85f f000 	ldr.w	pc, [pc]	; 8d24 <__tLivingString2_setLevStrength_veneer+0x4>
    8d24:	240146ad 	.word	0x240146ad

00008d28 <__tSimpleLivingString3_free_veneer>:
    8d28:	f85f f000 	ldr.w	pc, [pc]	; 8d2c <__tSimpleLivingString3_free_veneer+0x4>
    8d2c:	24013d79 	.word	0x24013d79

00008d30 <__tIntPhasor_tick_veneer>:
    8d30:	f85f f000 	ldr.w	pc, [pc]	; 8d34 <__tIntPhasor_tick_veneer+0x4>
    8d34:	24013469 	.word	0x24013469

00008d38 <__tSineTriLFO_tick_veneer>:
    8d38:	f85f f000 	ldr.w	pc, [pc]	; 8d3c <__tSineTriLFO_tick_veneer+0x4>
    8d3c:	240139e9 	.word	0x240139e9

00008d40 <__tVZFilter_setFreq_veneer>:
    8d40:	f85f f000 	ldr.w	pc, [pc]	; 8d44 <__tVZFilter_setFreq_veneer+0x4>
    8d44:	240115d5 	.word	0x240115d5

00008d48 <__tADSRT_tick_veneer>:
    8d48:	f85f f000 	ldr.w	pc, [pc]	; 8d4c <__tADSRT_tick_veneer+0x4>
    8d4c:	24010791 	.word	0x24010791

00008d50 <__tSquareLFO_tick_veneer>:
    8d50:	f85f f000 	ldr.w	pc, [pc]	; 8d54 <__tSquareLFO_tick_veneer+0x4>
    8d54:	24013605 	.word	0x24013605

00008d58 <__tDiodeFilter_setFreqFast_veneer>:
    8d58:	f85f f000 	ldr.w	pc, [pc]	; 8d5c <__tDiodeFilter_setFreqFast_veneer+0x4>
    8d5c:	240123c5 	.word	0x240123c5

00008d60 <__LEAF_poly_blamp_veneer>:
    8d60:	f85f f000 	ldr.w	pc, [pc]	; 8d64 <__LEAF_poly_blamp_veneer+0x4>
    8d64:	24012bad 	.word	0x24012bad

00008d68 <__tSimpleLivingString3_setFreq_veneer>:
    8d68:	f85f f000 	ldr.w	pc, [pc]	; 8d6c <__tSimpleLivingString3_setFreq_veneer+0x4>
    8d6c:	24013dc1 	.word	0x24013dc1

00008d70 <__tLivingString2_setTargetLev_veneer>:
    8d70:	f85f f000 	ldr.w	pc, [pc]	; 8d74 <__tLivingString2_setTargetLev_veneer+0x4>
    8d74:	2401465d 	.word	0x2401465d

00008d78 <__tNoise_tick_veneer>:
    8d78:	f85f f000 	ldr.w	pc, [pc]	; 8d7c <__tNoise_tick_veneer+0x4>
    8d7c:	24013399 	.word	0x24013399

00008d80 <__fmod_veneer>:
    8d80:	f85f f000 	ldr.w	pc, [pc]	; 8d84 <__fmod_veneer+0x4>
    8d84:	240160d1 	.word	0x240160d1

00008d88 <__tSquareLFO_setPulseWidth_veneer>:
    8d88:	f85f f000 	ldr.w	pc, [pc]	; 8d8c <__tSquareLFO_setPulseWidth_veneer+0x4>
    8d8c:	2401367d 	.word	0x2401367d

00008d90 <__tDiodeFilter_tick_veneer>:
    8d90:	f85f f000 	ldr.w	pc, [pc]	; 8d94 <__tDiodeFilter_tick_veneer+0x4>
    8d94:	24011c6d 	.word	0x24011c6d

00008d98 <__tLadderFilter_setQ_veneer>:
    8d98:	f85f f000 	ldr.w	pc, [pc]	; 8d9c <__tLadderFilter_setQ_veneer+0x4>
    8d9c:	24012749 	.word	0x24012749

00008da0 <__tCrusher_setOperation_veneer>:
    8da0:	f85f f000 	ldr.w	pc, [pc]	; 8da4 <__tCrusher_setOperation_veneer+0x4>
    8da4:	240102c5 	.word	0x240102c5

00008da8 <__tSimpleLivingString3_setTargetLev_veneer>:
    8da8:	f85f f000 	ldr.w	pc, [pc]	; 8dac <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    8dac:	24013eb5 	.word	0x24013eb5

00008db0 <__tSineTriLFO_setShape_veneer>:
    8db0:	f85f f000 	ldr.w	pc, [pc]	; 8db4 <__tSineTriLFO_setShape_veneer+0x4>
    8db4:	24013ae1 	.word	0x24013ae1

00008db8 <__tADSRT_setLeakFactor_veneer>:
    8db8:	f85f f000 	ldr.w	pc, [pc]	; 8dbc <__tADSRT_setLeakFactor_veneer+0x4>
    8dbc:	24010739 	.word	0x24010739

00008dc0 <__tCycle_setFreq_veneer>:
    8dc0:	f85f f000 	ldr.w	pc, [pc]	; 8dc4 <__tCycle_setFreq_veneer+0x4>
    8dc4:	240131d9 	.word	0x240131d9

00008dc8 <__tCrusher_tick_veneer>:
    8dc8:	f85f f000 	ldr.w	pc, [pc]	; 8dcc <__tCrusher_tick_veneer+0x4>
    8dcc:	24010245 	.word	0x24010245

00008dd0 <__tADSRT_setSustain_veneer>:
    8dd0:	f85f f000 	ldr.w	pc, [pc]	; 8dd4 <__tADSRT_setSustain_veneer+0x4>
    8dd4:	240106e5 	.word	0x240106e5

00008dd8 <__tSimpleLivingString3_setDampFreq_veneer>:
    8dd8:	f85f f000 	ldr.w	pc, [pc]	; 8ddc <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    8ddc:	24013e61 	.word	0x24013e61

00008de0 <__tADSRT_setAttack_veneer>:
    8de0:	f85f f000 	ldr.w	pc, [pc]	; 8de4 <__tADSRT_setAttack_veneer+0x4>
    8de4:	24010695 	.word	0x24010695

00008de8 <__tSimpleLivingString3_initToPool_veneer>:
    8de8:	f85f f000 	ldr.w	pc, [pc]	; 8dec <__tSimpleLivingString3_initToPool_veneer+0x4>
    8dec:	24013ae9 	.word	0x24013ae9

00008df0 <__HAL_GPIO_WritePin_veneer>:
    8df0:	f85f f000 	ldr.w	pc, [pc]	; 8df4 <__HAL_GPIO_WritePin_veneer+0x4>
    8df4:	2400639d 	.word	0x2400639d

00008df8 <__tLivingString2_free_veneer>:
    8df8:	f85f f000 	ldr.w	pc, [pc]	; 8dfc <__tLivingString2_free_veneer+0x4>
    8dfc:	24014455 	.word	0x24014455

00008e00 <__tanhf_veneer>:
    8e00:	f85f f000 	ldr.w	pc, [pc]	; 8e04 <__tanhf_veneer+0x4>
    8e04:	24016029 	.word	0x24016029

00008e08 <__tCompressor_tick_veneer>:
    8e08:	f85f f000 	ldr.w	pc, [pc]	; 8e0c <__tCompressor_tick_veneer+0x4>
    8e0c:	240103dd 	.word	0x240103dd

00008e10 <__tLivingString2_setFreq_veneer>:
    8e10:	f85f f000 	ldr.w	pc, [pc]	; 8e14 <__tLivingString2_setFreq_veneer+0x4>
    8e14:	240144e5 	.word	0x240144e5

00008e18 <__tPBTriangle_setSkew_veneer>:
    8e18:	f85f f000 	ldr.w	pc, [pc]	; 8e1c <__tPBTriangle_setSkew_veneer+0x4>
    8e1c:	24013245 	.word	0x24013245

00008e20 <__arm_fir_decimate_f32_veneer>:
    8e20:	f85f f000 	ldr.w	pc, [pc]	; 8e24 <__arm_fir_decimate_f32_veneer+0x4>
    8e24:	24015041 	.word	0x24015041

00008e28 <__tVZFilter_setGain_veneer>:
    8e28:	f85f f000 	ldr.w	pc, [pc]	; 8e2c <__tVZFilter_setGain_veneer+0x4>
    8e2c:	240118c1 	.word	0x240118c1

00008e30 <__tADSRT_setRelease_veneer>:
    8e30:	f85f f000 	ldr.w	pc, [pc]	; 8e34 <__tADSRT_setRelease_veneer+0x4>
    8e34:	24010711 	.word	0x24010711

00008e38 <__tTriLFO_tick_veneer>:
    8e38:	f85f f000 	ldr.w	pc, [pc]	; 8e3c <__tTriLFO_tick_veneer+0x4>
    8e3c:	240138f1 	.word	0x240138f1

00008e40 <__tSVF_tick_veneer>:
    8e40:	f85f f000 	ldr.w	pc, [pc]	; 8e44 <__tSVF_tick_veneer+0x4>
    8e44:	24010fd1 	.word	0x24010fd1

00008e48 <__tSimpleLivingString3_tick_veneer>:
    8e48:	f85f f000 	ldr.w	pc, [pc]	; 8e4c <__tSimpleLivingString3_tick_veneer+0x4>
    8e4c:	24014031 	.word	0x24014031

00008e50 <__fastdbtoa_veneer>:
    8e50:	f85f f000 	ldr.w	pc, [pc]	; 8e54 <__fastdbtoa_veneer+0x4>
    8e54:	24012d89 	.word	0x24012d89

00008e58 <__tVZFilter_setFreqFast_veneer>:
    8e58:	f85f f000 	ldr.w	pc, [pc]	; 8e5c <__tVZFilter_setFreqFast_veneer+0x4>
    8e5c:	24011605 	.word	0x24011605

00008e60 <__fasterexpf_veneer>:
    8e60:	f85f f000 	ldr.w	pc, [pc]	; 8e64 <__fasterexpf_veneer+0x4>
    8e64:	240127e5 	.word	0x240127e5

00008e68 <__tSineTriLFO_setPhase_veneer>:
    8e68:	f85f f000 	ldr.w	pc, [pc]	; 8e6c <__tSineTriLFO_setPhase_veneer+0x4>
    8e6c:	24013ab1 	.word	0x24013ab1

00008e70 <__tLivingString2_setPickupPos_veneer>:
    8e70:	f85f f000 	ldr.w	pc, [pc]	; 8e74 <__tLivingString2_setPickupPos_veneer+0x4>
    8e74:	24014569 	.word	0x24014569

00008e78 <__tSawSquareLFO_tick_veneer>:
    8e78:	f85f f000 	ldr.w	pc, [pc]	; 8e7c <__tSawSquareLFO_tick_veneer+0x4>
    8e7c:	24013765 	.word	0x24013765

00008e80 <__tLivingString2_setDecay_veneer>:
    8e80:	f85f f000 	ldr.w	pc, [pc]	; 8e84 <__tLivingString2_setDecay_veneer+0x4>
    8e84:	24014631 	.word	0x24014631

00008e88 <__tLinearDelay_setDelay_veneer>:
    8e88:	f85f f000 	ldr.w	pc, [pc]	; 8e8c <__tLinearDelay_setDelay_veneer+0x4>
    8e8c:	2400ff25 	.word	0x2400ff25

00008e90 <__tDiodeFilter_tickEfficient_veneer>:
    8e90:	f85f f000 	ldr.w	pc, [pc]	; 8e94 <__tDiodeFilter_tickEfficient_veneer+0x4>
    8e94:	24012019 	.word	0x24012019

00008e98 <__tHighpass_tick_veneer>:
    8e98:	f85f f000 	ldr.w	pc, [pc]	; 8e9c <__tHighpass_tick_veneer+0x4>
    8e9c:	24011185 	.word	0x24011185

00008ea0 <__tADSRT_tickNoInterp_veneer>:
    8ea0:	f85f f000 	ldr.w	pc, [pc]	; 8ea4 <__tADSRT_tickNoInterp_veneer+0x4>
    8ea4:	24010a55 	.word	0x24010a55

00008ea8 <__HAL_RNG_GenerateRandomNumber_veneer>:
    8ea8:	f85f f000 	ldr.w	pc, [pc]	; 8eac <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    8eac:	240093a9 	.word	0x240093a9

00008eb0 <__tSquareLFO_setFreq_veneer>:
    8eb0:	f85f f000 	ldr.w	pc, [pc]	; 8eb4 <__tSquareLFO_setFreq_veneer+0x4>
    8eb4:	2401364d 	.word	0x2401364d

00008eb8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    8eb8:	f85f f000 	ldr.w	pc, [pc]	; 8ebc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    8ebc:	240141b5 	.word	0x240141b5

00008ec0 <__tLadderFilter_tick_veneer>:
    8ec0:	f85f f000 	ldr.w	pc, [pc]	; 8ec4 <__tLadderFilter_tick_veneer+0x4>
    8ec4:	240124b5 	.word	0x240124b5

00008ec8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    8ec8:	f85f f000 	ldr.w	pc, [pc]	; 8ecc <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    8ecc:	24013ebd 	.word	0x24013ebd

00008ed0 <__tLivingString2_setPrepIndex_veneer>:
    8ed0:	f85f f000 	ldr.w	pc, [pc]	; 8ed4 <__tLivingString2_setPrepIndex_veneer+0x4>
    8ed4:	2401458d 	.word	0x2401458d

00008ed8 <__tExpSmooth_setVal_veneer>:
    8ed8:	f85f f000 	ldr.w	pc, [pc]	; 8edc <__tExpSmooth_setVal_veneer+0x4>
    8edc:	24010cb1 	.word	0x24010cb1

00008ee0 <__tCrusher_setQuality_veneer>:
    8ee0:	f85f f000 	ldr.w	pc, [pc]	; 8ee4 <__tCrusher_setQuality_veneer+0x4>
    8ee4:	240102d9 	.word	0x240102d9

00008ee8 <__faster_mtof_veneer>:
    8ee8:	f85f f000 	ldr.w	pc, [pc]	; 8eec <__faster_mtof_veneer+0x4>
    8eec:	24012cf1 	.word	0x24012cf1

00008ef0 <__tLivingString2_setLevSmoothFactor_veneer>:
    8ef0:	f85f f000 	ldr.w	pc, [pc]	; 8ef4 <__tLivingString2_setLevSmoothFactor_veneer+0x4>
    8ef4:	24014685 	.word	0x24014685

00008ef8 <__tPBSineTriangle_setShape_veneer>:
    8ef8:	f85f f000 	ldr.w	pc, [pc]	; 8efc <__tPBSineTriangle_setShape_veneer+0x4>
    8efc:	240132e9 	.word	0x240132e9

00008f00 <__tSawSquareLFO_setFreq_veneer>:
    8f00:	f85f f000 	ldr.w	pc, [pc]	; 8f04 <__tSawSquareLFO_setFreq_veneer+0x4>
    8f04:	240137e9 	.word	0x240137e9

00008f08 <__memset_veneer>:
    8f08:	f85f f000 	ldr.w	pc, [pc]	; 8f0c <__memset_veneer+0x4>
    8f0c:	240154e1 	.word	0x240154e1

00008f10 <__tVZFilter_tickEfficient_veneer>:
    8f10:	f85f f000 	ldr.w	pc, [pc]	; 8f14 <__tVZFilter_tickEfficient_veneer+0x4>
    8f14:	240111c9 	.word	0x240111c9

00008f18 <__tSawSquareLFO_setShape_veneer>:
    8f18:	f85f f000 	ldr.w	pc, [pc]	; 8f1c <__tSawSquareLFO_setShape_veneer+0x4>
    8f1c:	24013895 	.word	0x24013895

00008f20 <__LEAF_poly_blep_veneer>:
    8f20:	f85f f000 	ldr.w	pc, [pc]	; 8f24 <__LEAF_poly_blep_veneer+0x4>
    8f24:	24012b55 	.word	0x24012b55

00008f28 <__tSVF_setQ_veneer>:
    8f28:	f85f f000 	ldr.w	pc, [pc]	; 8f2c <__tSVF_setQ_veneer+0x4>
    8f2c:	240110a9 	.word	0x240110a9

00008f30 <__arm_sin_f32_veneer>:
    8f30:	f85f f000 	ldr.w	pc, [pc]	; 8f34 <__arm_sin_f32_veneer+0x4>
    8f34:	240153b1 	.word	0x240153b1

00008f38 <__setLFOShapes_veneer>:
    8f38:	f85f f000 	ldr.w	pc, [pc]	; 8f3c <__setLFOShapes_veneer+0x4>
    8f3c:	24002e6d 	.word	0x24002e6d

00008f40 <__tSVF_setFreqFast_veneer>:
    8f40:	f85f f000 	ldr.w	pc, [pc]	; 8f44 <__tSVF_setFreqFast_veneer+0x4>
    8f44:	2401103d 	.word	0x2401103d

00008f48 <__tLivingString2_tick_veneer>:
    8f48:	f85f f000 	ldr.w	pc, [pc]	; 8f4c <__tLivingString2_tick_veneer+0x4>
    8f4c:	240146f1 	.word	0x240146f1

00008f50 <__fasterdbtoa_veneer>:
    8f50:	f85f f000 	ldr.w	pc, [pc]	; 8f54 <__fasterdbtoa_veneer+0x4>
    8f54:	24012d99 	.word	0x24012d99

00008f58 <__arm_fir_interpolate_f32_veneer>:
    8f58:	f85f f000 	ldr.w	pc, [pc]	; 8f5c <__arm_fir_interpolate_f32_veneer+0x4>
    8f5c:	24014bc1 	.word	0x24014bc1

00008f60 <__fmodf_veneer>:
    8f60:	f85f f000 	ldr.w	pc, [pc]	; 8f64 <__fmodf_veneer+0x4>
    8f64:	24016119 	.word	0x24016119
